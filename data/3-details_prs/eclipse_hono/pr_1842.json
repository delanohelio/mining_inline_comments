{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTgwMjQ3", "number": 1842, "title": "[#1679] Add mongodb based implementation of device registration and management services", "bodyText": "This PR is for the issue #1679, which is to provide a mongodb based device registry. As a first step towards it, in this PR DeviceManagementService and RegistrationService have been implemented. In spite of some work left, I have raised this PR to collect some feedback. The tests will be added incrementally. Also some optimisations like pulling common configuration properties to the base module is in progress.", "createdAt": "2020-03-17T17:37:50Z", "url": "https://github.com/eclipse/hono/pull/1842", "merged": true, "mergeCommit": {"oid": "f17702cb57a74513daf1cfc4ea5955e26593c34c"}, "closed": true, "closedAt": "2020-04-02T15:15:59Z", "author": {"login": "kaniyan"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOzKaMgFqTM3NjYyMTE5MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTrDqtABqjMxOTE4NjEwNjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjIxMTkw", "url": "https://github.com/eclipse/hono/pull/1842#pullrequestreview-376621190", "createdAt": "2020-03-18T07:37:44Z", "commit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNzo0NFrOF35JkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODozNTozNVrOF36xFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MjMzNg==", "bodyText": "we already have FIELD_PAYLOAD_DEVICE_ID for the device identifier. Either this field is used for something different than the device ID or it should be removed ...", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394152336", "createdAt": "2020-03-18T07:37:44Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -213,6 +213,10 @@\n      * all devices to authenticate.\n      */\n     public static final String FIELD_ADAPTERS_DEVICE_AUTHENTICATION_REQUIRED = \"device-authentication-required\";\n+    /**\n+     * The name of the JSON property containing the device identifier.\n+     */\n+    public static final String FIELD_DEVICE = \"device\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MjgwNQ==", "bodyText": "FMPOV this should be a managed dependency in the bom/pom.xml ...", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394152805", "createdAt": "2020-03-18T07:38:52Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,152 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2020 Contributors to the Eclipse Foundation\n+   \n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+   \n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+   \n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.eclipse.hono</groupId>\n+        <artifactId>hono-services</artifactId>\n+        <version>1.2.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>hono-service-device-registry-mongodb</artifactId>\n+    <name>Hono Mongodb Based Device Registry</name>\n+    <description>A Mongodb based device registry for Hono implementing the Device Registration and Credentials APIs.\n+    </description>\n+    <url>https://www.eclipse.org/hono</url>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.hono</groupId>\n+            <artifactId>hono-service-device-registry-base</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NDI5MQ==", "bodyText": "FMPOV this should be changed to hono.registry.http as it is not strictly a RESTful interface ...", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394154291", "createdAt": "2020-03-18T07:42:33Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.hono.config.ApplicationConfigProperties;\n+import org.eclipse.hono.config.ServerConfig;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.config.VertxProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.service.MongoDbBasedRegistrationService;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.service.credentials.AutowiredCredentialsAmqpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.credentials.AutowiredCredentialsManagementHttpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.device.AutowiredDeviceManagementHttpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.device.AutowiredRegistrationAmqpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.deviceconnection.MapBasedDeviceConnectionsConfigProperties;\n+import org.eclipse.hono.deviceregistry.service.tenant.AutowiredTenantAmqpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.tenant.AutowiredTenantManagementHttpEndpoint;\n+import org.eclipse.hono.service.HealthCheckServer;\n+import org.eclipse.hono.service.VertxBasedHealthCheckServer;\n+import org.eclipse.hono.service.amqp.AmqpEndpoint;\n+import org.eclipse.hono.service.deviceconnection.DeviceConnectionAmqpEndpoint;\n+import org.eclipse.hono.service.http.HttpEndpoint;\n+import org.eclipse.hono.service.metric.MetricsTags;\n+import org.eclipse.hono.util.Constants;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.opentracing.Tracer;\n+import io.opentracing.contrib.tracerresolver.TracerResolver;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+\n+/**\n+ * Spring Boot configuration for the mongodb based device registry application.\n+ */\n+@Configuration\n+public class ApplicationConfig {\n+\n+    /**\n+     * Exposes a Vert.x instance as a Spring bean.\n+     * <p>\n+     * This method creates new Vert.x default options and invokes\n+     * {@link VertxProperties#configureVertx(VertxOptions)} on the object returned\n+     * by {@link #vertxProperties()}.\n+     *\n+     * @return The Vert.x instance.\n+     */\n+    @Bean\n+    public Vertx vertx() {\n+        return Vertx.vertx(vertxProperties().configureVertx(new VertxOptions()));\n+    }\n+\n+    /**\n+     * Exposes configuration properties for Vert.x.\n+     *\n+     * @return The properties.\n+     */\n+    @ConfigurationProperties(\"hono.vertx\")\n+    @Bean\n+    public VertxProperties vertxProperties() {\n+        return new VertxProperties();\n+    }\n+\n+    /**\n+     * Exposes an OpenTracing {@code Tracer} as a Spring Bean.\n+     * <p>\n+     * The Tracer will be resolved by means of a Java service lookup.\n+     * If no tracer can be resolved this way, the {@code NoopTracer} is\n+     * returned.\n+     *\n+     * @return The tracer.\n+     */\n+    @Bean\n+    public Tracer getTracer() {\n+\n+        return Optional.ofNullable(TracerResolver.resolveTracer())\n+                .orElse(NoopTracerFactory.create());\n+    }\n+\n+    /**\n+     * Gets general properties for configuring the Device Registry Spring Boot application.\n+     *\n+     * @return The properties.\n+     */\n+    @Bean\n+    @ConfigurationProperties(prefix = \"hono.app\")\n+    public ApplicationConfigProperties applicationConfigProperties() {\n+        return new ApplicationConfigProperties();\n+    }\n+\n+    /**\n+     * Exposes properties for configuring the health check as a Spring bean.\n+     *\n+     * @return The health check configuration properties.\n+     */\n+    @Bean\n+    @ConfigurationProperties(prefix = \"hono.health-check\")\n+    public ServerConfig healthCheckConfigProperties() {\n+        return new ServerConfig();\n+    }\n+\n+    /**\n+     * Gets properties for configuring the Device Registry's AMQP 1.0 endpoint.\n+     *\n+     * @return The properties.\n+     */\n+    @Qualifier(Constants.QUALIFIER_AMQP)\n+    @Bean\n+    @ConfigurationProperties(prefix = \"hono.registry.amqp\")\n+    public ServiceConfigProperties amqpServerProperties() {\n+        final ServiceConfigProperties props = new ServiceConfigProperties();\n+        return props;\n+    }\n+\n+    /**\n+     * Creates a new instance of an AMQP 1.0 protocol handler for Hono's <em>Device Registration</em> API.\n+     *\n+     * @return The handler.\n+     */\n+    @Bean\n+    @Scope(\"prototype\")\n+    public AmqpEndpoint registrationAmqpEndpoint() {\n+        return new AutowiredRegistrationAmqpEndpoint(vertx());\n+    }\n+\n+    /**\n+     * Creates a new instance of an AMQP 1.0 protocol handler for Hono's <em>Credentials</em> API.\n+     * \n+     * @return The handler.\n+     */\n+    @Bean\n+    @Scope(\"prototype\")\n+    public AmqpEndpoint credentialsAmqpEndpoint() {\n+        return new AutowiredCredentialsAmqpEndpoint(vertx());\n+    }\n+\n+    /**\n+     * Creates a new instance of an AMQP 1.0 protocol handler for Hono's <em>Tenant</em> API.\n+     *\n+     * @return The handler.\n+     */\n+    @Bean\n+    @Scope(\"prototype\")\n+    public AmqpEndpoint tenantAmqpEndpoint() {\n+        return new AutowiredTenantAmqpEndpoint(vertx());\n+    }\n+\n+    /**\n+     * Creates a new instance of an AMQP 1.0 protocol handler for Hono's <em>Device Connection</em> API.\n+     *\n+     * @return The handler.\n+     */\n+    @Bean\n+    @Scope(\"prototype\")\n+    public AmqpEndpoint deviceConnectionAmqpEndpoint() {\n+        return new DeviceConnectionAmqpEndpoint(vertx());\n+    }\n+\n+    /**\n+     * Gets properties for configuring the HTTP based Device Registry Management endpoint.\n+     *\n+     * @return The properties.\n+     */\n+    @Qualifier(Constants.QUALIFIER_REST)\n+    @Bean\n+    @ConfigurationProperties(prefix = \"hono.registry.rest\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NjEwNA==", "bodyText": "I don't quite see why the number of devices per tenant should be limited by default. Is there also a value that indicates unlimited?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156104", "createdAt": "2020-03-18T07:46:54Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedRegistrationConfigProperties.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+/**\n+ * Configuration properties for Hono's device registry tenant API.\n+ */\n+public final class MongoDbBasedRegistrationConfigProperties extends AbstractMongoDbBasedRegistryConfigProperties {\n+\n+    /**\n+     * The default number of devices that can be registered for each tenant.\n+     */\n+    public static final int DEFAULT_MAX_DEVICES_PER_TENANT = 100;\n+    private static final String DEFAULT_DEVICE_COLLECTION_NAME = \"devices\";\n+\n+    private int maxDevicesPerTenant = DEFAULT_MAX_DEVICES_PER_TENANT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NjU1MQ==", "bodyText": "either the class or all of its methods that are not supposed to be overridden should be final", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156551", "createdAt": "2020-03-18T07:47:56Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NjcwOA==", "bodyText": "can I set this to null?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156708", "createdAt": "2020-03-18T07:48:20Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1Njg4MQ==", "bodyText": "reasonable port range check?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156881", "createdAt": "2020-03-18T07:48:40Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1Njk4OA==", "bodyText": "can I set this to null?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156988", "createdAt": "2020-03-18T07:48:53Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NzEzNQ==", "bodyText": "null check?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394157135", "createdAt": "2020-03-18T07:49:12Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NzIyNQ==", "bodyText": "null check?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394157225", "createdAt": "2020-03-18T07:49:24Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1Nzk5NQ==", "bodyText": "null check?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394157995", "createdAt": "2020-03-18T07:51:12Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1ODA5MA==", "bodyText": "range check?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394158090", "createdAt": "2020-03-18T07:51:25Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @param timeout timeout in milliseconds. Setting to zero means the default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1ODE3NQ==", "bodyText": "range check?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394158175", "createdAt": "2020-03-18T07:51:36Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @param timeout timeout in milliseconds. Setting to zero means the default\n+     *                value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setServerSelectionTimeout(final int timeout) {\n+        this.serverSelectionTimeoutMS = timeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getConnectTimeout() {\n+        return connectTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @param connectTimeout timeout in milliseconds. Setting to zero means the default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1ODI4OA==", "bodyText": "range check?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394158288", "createdAt": "2020-03-18T07:51:52Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @param timeout timeout in milliseconds. Setting to zero means the default\n+     *                value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setServerSelectionTimeout(final int timeout) {\n+        this.serverSelectionTimeoutMS = timeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getConnectTimeout() {\n+        return connectTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @param connectTimeout timeout in milliseconds. Setting to zero means the default\n+     *                       value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectTimeout(final int connectTimeout) {\n+        this.connectTimeoutMS = connectTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to create indices during startup.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getCreateIndicesTimeout() {\n+        return createIndicesTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the startup will try to create indices\n+     * during startup.\n+     *\n+     * @param timeout timeout in milliseconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MDAzMw==", "bodyText": "literal String version should be replaced with constant", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394160033", "createdAt": "2020-03-18T07:55:52Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BaseDto {\n+\n+    @JsonProperty(value = \"version\", required = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MDExMQ==", "bodyText": "replace with constant", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394160111", "createdAt": "2020-03-18T07:56:05Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BaseDto {\n+\n+    @JsonProperty(value = \"version\", required = true)\n+    protected String version;\n+    @JsonProperty(\"updatedOn\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MDcyMg==", "bodyText": "is this class supposed to be instantiated? if not, it should be declared abstract ...\nIts methods should probably be final ..", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394160722", "createdAt": "2020-03-18T07:57:24Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BaseDto {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MDkyOQ==", "bodyText": "final?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394160929", "createdAt": "2020-03-18T07:57:52Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/DeviceDto.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+public class DeviceDto extends BaseDto {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MTI4Mw==", "bodyText": "please put annotations on their own line", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394161283", "createdAt": "2020-03-18T07:58:42Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.service.credentials.CredentialsService;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CredentialsManagementService;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * This is an implementation of the credentials service and the credentials management service where data is \n+ * stored in a mongodb database.\n+ * \n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">Credentials API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedCredentialsService extends AbstractVerticle\n+        implements CredentialsManagementService, CredentialsService {\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MTc5MQ==", "bodyText": "add aan empty line between description and param declaration", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394161791", "createdAt": "2020-03-18T07:59:57Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.service.credentials.CredentialsService;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CredentialsManagementService;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * This is an implementation of the credentials service and the credentials management service where data is \n+ * stored in a mongodb database.\n+ * \n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">Credentials API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedCredentialsService extends AbstractVerticle\n+        implements CredentialsManagementService, CredentialsService {\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId, final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId,\n+            final JsonObject clientContext, final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    @Override public Future<OperationResult<Void>> updateCredentials(final String tenantId, final String deviceId,\n+            final List<CommonCredential> credentials, final Optional<String> resourceVersion, final Span span) {\n+        //TODO\n+        return Future.succeededFuture(\n+                OperationResult.ok(HttpURLConnection.HTTP_NO_CONTENT, null, Optional.empty(), Optional.empty()));\n+    }\n+\n+    @Override public Future<OperationResult<List<CommonCredential>>> readCredentials(final String tenantId,\n+            final String deviceId,\n+            final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    /**\n+     * Remove all the credentials for the given device ID.\n+     * @param tenantId the Id of the tenant which the device belongs to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MTk3Nw==", "bodyText": "@throws NullPointerException ...?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394161977", "createdAt": "2020-03-18T08:00:22Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.service.credentials.CredentialsService;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CredentialsManagementService;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * This is an implementation of the credentials service and the credentials management service where data is \n+ * stored in a mongodb database.\n+ * \n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">Credentials API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedCredentialsService extends AbstractVerticle\n+        implements CredentialsManagementService, CredentialsService {\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId, final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId,\n+            final JsonObject clientContext, final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    @Override public Future<OperationResult<Void>> updateCredentials(final String tenantId, final String deviceId,\n+            final List<CommonCredential> credentials, final Optional<String> resourceVersion, final Span span) {\n+        //TODO\n+        return Future.succeededFuture(\n+                OperationResult.ok(HttpURLConnection.HTTP_NO_CONTENT, null, Optional.empty(), Optional.empty()));\n+    }\n+\n+    @Override public Future<OperationResult<List<CommonCredential>>> readCredentials(final String tenantId,\n+            final String deviceId,\n+            final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    /**\n+     * Remove all the credentials for the given device ID.\n+     * @param tenantId the Id of the tenant which the device belongs to.\n+     * @param deviceId the id of the device that is deleted.\n+     * @param span The active OpenTracing span for this operation.\n+     * @return A future indicating the outcome of the operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MjQ1NQ==", "bodyText": "This annotation should be removed FMPOV", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394162455", "createdAt": "2020-03-18T08:01:26Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedDeviceBackend.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.net.HttpURLConnection;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.device.AutoProvisioningEnabledDeviceBackend;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CredentialsConstants;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Repository;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import io.opentracing.Span;\n+import io.opentracing.noop.NoopSpan;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A device backend that leverages and unifies {@link MongoDbBasedRegistrationService} and\n+ * {@link MongoDbBasedCredentialsService}.\n+ */\n+@Repository\n+@Qualifier(\"backend\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"file\", matchIfMissing = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2Mzk2NA==", "bodyText": "this seems to be the same code as in the file bsaed registry, isn't it?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394163964", "createdAt": "2020-03-18T08:05:01Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedDeviceBackend.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.net.HttpURLConnection;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.device.AutoProvisioningEnabledDeviceBackend;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CredentialsConstants;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Repository;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import io.opentracing.Span;\n+import io.opentracing.noop.NoopSpan;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A device backend that leverages and unifies {@link MongoDbBasedRegistrationService} and\n+ * {@link MongoDbBasedCredentialsService}.\n+ */\n+@Repository\n+@Qualifier(\"backend\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"file\", matchIfMissing = true)\n+public class MongoDbBasedDeviceBackend implements AutoProvisioningEnabledDeviceBackend {\n+\n+    private final MongoDbBasedRegistrationService registrationService;\n+    private final MongoDbBasedCredentialsService credentialsService;\n+\n+    /**\n+     * Create a new instance.\n+     * \n+     * @param registrationService an implementation of registration service.\n+     * @param credentialsService an implementation of credentials service.\n+     */\n+    @Autowired\n+    public MongoDbBasedDeviceBackend(\n+            @Qualifier(\"serviceImpl\") final MongoDbBasedRegistrationService registrationService,\n+            @Qualifier(\"serviceImpl\") final MongoDbBasedCredentialsService credentialsService) {\n+        this.registrationService = registrationService;\n+        this.credentialsService = credentialsService;\n+    }\n+\n+    // DEVICES\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId) {\n+        return registrationService.assertRegistration(tenantId, deviceId);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId,\n+            final String gatewayId) {\n+        return registrationService.assertRegistration(tenantId, deviceId, gatewayId);\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Device>> readDevice(final String tenantId, final String deviceId, final Span span) {\n+        return registrationService.readDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<Result<Void>> deleteDevice(final String tenantId, final String deviceId,\n+            final Optional<String> resourceVersion,\n+            final Span span) {\n+\n+        return registrationService.deleteDevice(tenantId, deviceId, resourceVersion, span)\n+                .compose(result -> {\n+                    if (result.getStatus() != HttpURLConnection.HTTP_NO_CONTENT) {\n+                        return Future.succeededFuture(result);\n+                    }\n+                    // now delete the credentials set and pass on the original result\n+                    return credentialsService.removeCredentials(\n+                            tenantId,\n+                            deviceId,\n+                            span)\n+                            .map(result);\n+                });\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> createDevice(\n+            final String tenantId,\n+            final Optional<String> deviceId,\n+            final Device device,\n+            final Span span) {\n+\n+        return registrationService.createDevice(tenantId, deviceId, device, span)\n+                .compose(result -> {\n+                    if (result.getStatus() != HttpURLConnection.HTTP_CREATED) {\n+                        return Future.succeededFuture(result);\n+                    }\n+                    // now create the empty credentials set and pass on the original result\n+                    return credentialsService.updateCredentials(\n+                            tenantId,\n+                            result.getPayload().getId(),\n+                            Collections.emptyList(),\n+                            Optional.empty(),\n+                            span\n+                    ).map(result);\n+                });\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> updateDevice(final String tenantId, final String deviceId, final Device device,\n+            final Optional<String> resourceVersion, final Span span) {\n+        return registrationService.updateDevice(tenantId, deviceId, device, resourceVersion, span);\n+    }\n+\n+    // CREDENTIALS\n+\n+    @Override\n+    public final Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId) {\n+        return credentialsService.get(tenantId, type, authId);\n+    }\n+\n+    @Override\n+    public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type, final String authId,\n+            final Span span) {\n+        return credentialsService.get(tenantId, type, authId, span);\n+    }\n+\n+    @Override\n+    public final Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId, final JsonObject clientContext) {\n+        return get(tenantId, type, authId, clientContext, NoopSpan.INSTANCE);\n+    }\n+\n+    @Override\n+    public  Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type, final String authId, final JsonObject clientContext,\n+            final Span span) {\n+        return credentialsService.get(tenantId, type, authId, clientContext, span)\n+                .compose(result -> {\n+                    if (result.getStatus() == HttpURLConnection.HTTP_NOT_FOUND\n+                            && isAutoProvisioningEnabled(type, clientContext)) {\n+                        return provisionDevice(tenantId, authId, clientContext, span);\n+                    }\n+                    return Future.succeededFuture(result);\n+                });\n+    }\n+\n+    /**\n+     * Parses certificate, provisions device and returns the new credentials.\n+     */\n+    private Future<CredentialsResult<JsonObject>> provisionDevice(final String tenantId, final String authId,\n+            final JsonObject clientContext,\n+            final Span span) {\n+\n+        final X509Certificate cert;\n+        try {\n+            final byte[] bytes = clientContext.getBinary(CredentialsConstants.FIELD_CLIENT_CERT);\n+            final CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            cert = (X509Certificate) factory.generateCertificate(new ByteArrayInputStream(bytes));\n+\n+            if (!cert.getSubjectX500Principal().getName(X500Principal.RFC2253).equals(authId)) {\n+                throw new IllegalArgumentException(\"Subject DN of the client certificate does not match authId\");\n+            }\n+        } catch (final CertificateException | ClassCastException | IllegalArgumentException e) {\n+            TracingHelper.logError(span, e);\n+            final int status = HttpURLConnection.HTTP_BAD_REQUEST;\n+            return Future.succeededFuture(createErrorCredentialsResult(status, e.getMessage()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2NTA0NQ==", "bodyText": "What purpose does this serve? FMPOV this can be removed ..", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394165045", "createdAt": "2020-03-18T08:07:23Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODAyNA==", "bodyText": "this will be very hard to test. why don't you simply extend AbstractRegistrationService and also implement Verticle?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168024", "createdAt": "2020-03-18T08:13:27Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODIzNQ==", "bodyText": "can this be null?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168235", "createdAt": "2020-03-18T08:13:55Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODM4NQ==", "bodyText": "javadoc?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168385", "createdAt": "2020-03-18T08:14:15Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODU3Mw==", "bodyText": "is this going to be used?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168573", "createdAt": "2020-03-18T08:14:39Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODY2NA==", "bodyText": "final?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168664", "createdAt": "2020-03-18T08:14:51Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2OTQ4Mw==", "bodyText": "if this is what I think it is ((re-)creating indices), then I believe it should be run periodically and independently from the start-up of this verticle", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394169483", "createdAt": "2020-03-18T08:16:29Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) {\n+\n+        mongoDbCallExecutor.createCollectionIndex(getConfig().getCollectionName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3MDg3MQ==", "bodyText": "how about encapsulating the generating of (unique) identifiers in a utility method so that the strategy can be implemented/modified in a single place?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394170871", "createdAt": "2020-03-18T08:19:30Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) {\n+\n+        mongoDbCallExecutor.createCollectionIndex(getConfig().getCollectionName(),\n+                new JsonObject().put(RegistrationConstants.FIELD_PAYLOAD_TENANT_ID, 1)\n+                        .put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, 1),\n+                new IndexOptions().unique(true))\n+                .map(success -> {\n+                    startPromise.complete();\n+                    return null;\n+                })\n+                .onFailure(error -> {\n+                    log.error(\"Index creation failed\", error);\n+                    startPromise.fail(error);\n+                });\n+    }\n+\n+    @Override\n+    public void stop(final Promise<Void> stopPromise) {\n+        mongoClient.close();\n+        stopPromise.complete();\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> createDevice(final String tenantId, final Optional<String> deviceId,\n+            final Device device, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        final String deviceIdValue = deviceId.orElse(UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3MjE3Ng==", "bodyText": "processUpdateDevice", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394172176", "createdAt": "2020-03-18T08:22:18Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) {\n+\n+        mongoDbCallExecutor.createCollectionIndex(getConfig().getCollectionName(),\n+                new JsonObject().put(RegistrationConstants.FIELD_PAYLOAD_TENANT_ID, 1)\n+                        .put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, 1),\n+                new IndexOptions().unique(true))\n+                .map(success -> {\n+                    startPromise.complete();\n+                    return null;\n+                })\n+                .onFailure(error -> {\n+                    log.error(\"Index creation failed\", error);\n+                    startPromise.fail(error);\n+                });\n+    }\n+\n+    @Override\n+    public void stop(final Promise<Void> stopPromise) {\n+        mongoClient.close();\n+        stopPromise.complete();\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> createDevice(final String tenantId, final Optional<String> deviceId,\n+            final Device device, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        final String deviceIdValue = deviceId.orElse(UUID.randomUUID().toString());\n+        final Versioned<Device> versionedDevice = new Versioned<>(device);\n+        final DeviceDto deviceDto = new DeviceDto(tenantId, deviceIdValue, versionedDevice.getValue(),\n+                versionedDevice.getVersion(), Instant.now());\n+\n+        final Promise<Long> findExistingNoOfDevicesPromise = Promise.promise();\n+        mongoClient.count(getConfig().getCollectionName(), new JsonObject(), findExistingNoOfDevicesPromise);\n+        return findExistingNoOfDevicesPromise.future()\n+                .compose(existingNoOfDevices -> {\n+                    if (existingNoOfDevices >= getConfig().getMaxDevicesPerTenant()) {\n+                        log.debug(\"Maximum number of devices limit already reached for the tenant [{}]\", tenantId);\n+                        TracingHelper.logError(span, String.format(\n+                                \"Maximum number of devices limit already reached for the tenant [%s]\", tenantId));\n+                        return Future\n+                                .succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n+                    } else {\n+                        return processCreateDevice(deviceDto, span);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Device>> readDevice(final String tenantId, final String deviceId, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        return processReadDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> updateDevice(final String tenantId, final String deviceId, final Device device,\n+            final Optional<String> resourceVersion, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        if (!getConfig().isModificationEnabled()) {\n+            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n+            TracingHelper.logError(span, errorMsg);\n+            log.debug(errorMsg);\n+            return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n+        }\n+        // TODO: To check for the version mismatch.\n+\n+        final Versioned<Device> versionedDevice = new Versioned<>(device);\n+        final DeviceDto deviceDto = new DeviceDto(tenantId, deviceId, versionedDevice.getValue(),\n+                versionedDevice.getVersion(), Instant.now());\n+\n+        return ProcessUpdateDevice(tenantId, deviceId, deviceDto, span);\n+    }\n+\n+    @Override\n+    public Future<Result<Void>> deleteDevice(final String tenantId, final String deviceId,\n+            final Optional<String> resourceVersion, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        if (!config.isModificationEnabled()) {\n+            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n+            TracingHelper.logError(span, errorMsg);\n+            log.debug(errorMsg);\n+            return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_FORBIDDEN));\n+        }\n+\n+        // TODO: To check for the version mismatch.\n+\n+        return processDeleteDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId) {\n+        return registrationService.assertRegistration(tenantId, deviceId);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId,\n+            final String gatewayId) {\n+        return registrationService.assertRegistration(tenantId, deviceId, gatewayId);\n+    }\n+\n+    private JsonObject convertDevice(final String deviceId, final Device payload) {\n+\n+        if (payload == null) {\n+            return null;\n+        }\n+\n+        final JsonObject data = JsonObject.mapFrom(payload);\n+\n+        return new JsonObject()\n+                .put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n+                .put(\"data\", data);\n+    }\n+\n+    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+        final JsonObject findDeviceQuery = new MongoDbDocumentBuilder()\n+                .withTenantId(tenantId)\n+                .withDeviceId(deviceId)\n+                .create();\n+        final Promise<JsonObject> readDevicePromise = Promise.promise();\n+        mongoClient.findOne(getConfig().getCollectionName(), findDeviceQuery, null, readDevicePromise);\n+        return readDevicePromise.future()\n+                .compose(result -> Optional.ofNullable(result)\n+                        .map(ok -> result.mapTo(DeviceDto.class))\n+                        .map(Future::succeededFuture)\n+                        .orElseGet(() -> {\n+                            log.debug(\"Device [{}] not found.\", deviceId);\n+                            return Future.succeededFuture(null);\n+                        }));\n+    }\n+\n+    private Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+\n+        return processReadDevice(tenantId, deviceId, span)\n+                .compose(result -> Future.succeededFuture(RegistrationResult.from(result.getStatus(),\n+                        convertDevice(deviceId, result.getPayload()), result.getCacheDirective().orElse(null))));\n+\n+    }\n+\n+    private boolean ifDuplicateKeyError(final Throwable throwable) {\n+        if (throwable instanceof MongoException) {\n+            final MongoException mongoException = (MongoException) throwable;\n+            return ErrorCategory.fromErrorCode(mongoException.getCode()) == ErrorCategory.DUPLICATE_KEY;\n+        }\n+        return false;\n+    }\n+\n+    private Future<OperationResult<Id>> processCreateDevice(final DeviceDto device, final Span span) {\n+        final Promise<String> addDevicePromise = Promise.promise();\n+        mongoClient.insert(getConfig().getCollectionName(), JsonObject.mapFrom(device), addDevicePromise);\n+        return addDevicePromise.future()\n+                .map(success -> OperationResult.ok(\n+                        HttpURLConnection.HTTP_CREATED,\n+                        Id.of(device.getDeviceId()),\n+                        Optional.empty(),\n+                        Optional.of(device.getVersion())))\n+                .recover(error -> {\n+                    if (ifDuplicateKeyError(error)) {\n+                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId(),\n+                                device.getTenantId(), error);\n+                        TracingHelper.logError(span, String.format(\"Device [%s] already exists for the tenant [%s]\",\n+                                device.getDeviceId(), device.getTenantId()));\n+                        return Future.succeededFuture(\n+                                OperationResult.empty(HttpURLConnection.HTTP_CONFLICT));\n+                    } else {\n+                        log.error(\"Error adding device [{}] for the tenant [{}]\", device.getDeviceId(),\n+                                device.getTenantId(), error);\n+                        TracingHelper.logError(span, String.format(\"Error adding device [%s] for the tenant [%s]\",\n+                                device.getDeviceId(), device.getTenantId()), error);\n+                        return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_INTERNAL_ERROR));\n+                    }\n+                });\n+    }\n+\n+    private Future<Result<Void>> processDeleteDevice(final String tenantId, final String deviceId, final Span span) {\n+        final Promise<MongoClientDeleteResult> deleteDevicePromise = Promise.promise();\n+        final JsonObject removeDeviceQuery = new MongoDbDocumentBuilder()\n+                .withTenantId(tenantId)\n+                .withDeviceId(deviceId)\n+                .create();\n+        mongoClient.removeDocument(getConfig().getCollectionName(), removeDeviceQuery, deleteDevicePromise);\n+        return deleteDevicePromise.future()\n+                .compose(successDeleteDevice -> {\n+                    if (successDeleteDevice.getRemovedCount() == 1) {\n+                        return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_NO_CONTENT));\n+                    } else {\n+                        log.debug(\"Device [{}] not found.\", deviceId);\n+                        TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceId));\n+                        return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_NOT_FOUND));\n+                    }\n+                });\n+    }\n+\n+    private Future<OperationResult<Device>> processReadDevice(final String tenantId, final String deviceId,\n+            final Span span) {\n+        return findDevice(tenantId, deviceId)\n+                .compose(deviceDto -> Optional.ofNullable(deviceDto)\n+                        .map(ok -> Future.succeededFuture(\n+                                OperationResult.ok(\n+                                        HttpURLConnection.HTTP_OK,\n+                                        deviceDto.getDevice(),\n+                                        Optional.ofNullable(\n+                                                DeviceRegistryUtils.getCacheDirective(getConfig().getCacheMaxAge())),\n+                                        Optional.ofNullable(deviceDto.getVersion()))))\n+                        .orElseGet(() -> {\n+                            TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceId));\n+                            return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_NOT_FOUND));\n+                        }));\n+    }\n+\n+    private Future<OperationResult<Id>> ProcessUpdateDevice(final String tenantId, final String deviceId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3MzgyOA==", "bodyText": "isDuplicateKeyError", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394173828", "createdAt": "2020-03-18T08:25:40Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) {\n+\n+        mongoDbCallExecutor.createCollectionIndex(getConfig().getCollectionName(),\n+                new JsonObject().put(RegistrationConstants.FIELD_PAYLOAD_TENANT_ID, 1)\n+                        .put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, 1),\n+                new IndexOptions().unique(true))\n+                .map(success -> {\n+                    startPromise.complete();\n+                    return null;\n+                })\n+                .onFailure(error -> {\n+                    log.error(\"Index creation failed\", error);\n+                    startPromise.fail(error);\n+                });\n+    }\n+\n+    @Override\n+    public void stop(final Promise<Void> stopPromise) {\n+        mongoClient.close();\n+        stopPromise.complete();\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> createDevice(final String tenantId, final Optional<String> deviceId,\n+            final Device device, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        final String deviceIdValue = deviceId.orElse(UUID.randomUUID().toString());\n+        final Versioned<Device> versionedDevice = new Versioned<>(device);\n+        final DeviceDto deviceDto = new DeviceDto(tenantId, deviceIdValue, versionedDevice.getValue(),\n+                versionedDevice.getVersion(), Instant.now());\n+\n+        final Promise<Long> findExistingNoOfDevicesPromise = Promise.promise();\n+        mongoClient.count(getConfig().getCollectionName(), new JsonObject(), findExistingNoOfDevicesPromise);\n+        return findExistingNoOfDevicesPromise.future()\n+                .compose(existingNoOfDevices -> {\n+                    if (existingNoOfDevices >= getConfig().getMaxDevicesPerTenant()) {\n+                        log.debug(\"Maximum number of devices limit already reached for the tenant [{}]\", tenantId);\n+                        TracingHelper.logError(span, String.format(\n+                                \"Maximum number of devices limit already reached for the tenant [%s]\", tenantId));\n+                        return Future\n+                                .succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n+                    } else {\n+                        return processCreateDevice(deviceDto, span);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Device>> readDevice(final String tenantId, final String deviceId, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        return processReadDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> updateDevice(final String tenantId, final String deviceId, final Device device,\n+            final Optional<String> resourceVersion, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        if (!getConfig().isModificationEnabled()) {\n+            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n+            TracingHelper.logError(span, errorMsg);\n+            log.debug(errorMsg);\n+            return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n+        }\n+        // TODO: To check for the version mismatch.\n+\n+        final Versioned<Device> versionedDevice = new Versioned<>(device);\n+        final DeviceDto deviceDto = new DeviceDto(tenantId, deviceId, versionedDevice.getValue(),\n+                versionedDevice.getVersion(), Instant.now());\n+\n+        return ProcessUpdateDevice(tenantId, deviceId, deviceDto, span);\n+    }\n+\n+    @Override\n+    public Future<Result<Void>> deleteDevice(final String tenantId, final String deviceId,\n+            final Optional<String> resourceVersion, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        if (!config.isModificationEnabled()) {\n+            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n+            TracingHelper.logError(span, errorMsg);\n+            log.debug(errorMsg);\n+            return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_FORBIDDEN));\n+        }\n+\n+        // TODO: To check for the version mismatch.\n+\n+        return processDeleteDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId) {\n+        return registrationService.assertRegistration(tenantId, deviceId);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId,\n+            final String gatewayId) {\n+        return registrationService.assertRegistration(tenantId, deviceId, gatewayId);\n+    }\n+\n+    private JsonObject convertDevice(final String deviceId, final Device payload) {\n+\n+        if (payload == null) {\n+            return null;\n+        }\n+\n+        final JsonObject data = JsonObject.mapFrom(payload);\n+\n+        return new JsonObject()\n+                .put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n+                .put(\"data\", data);\n+    }\n+\n+    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+        final JsonObject findDeviceQuery = new MongoDbDocumentBuilder()\n+                .withTenantId(tenantId)\n+                .withDeviceId(deviceId)\n+                .create();\n+        final Promise<JsonObject> readDevicePromise = Promise.promise();\n+        mongoClient.findOne(getConfig().getCollectionName(), findDeviceQuery, null, readDevicePromise);\n+        return readDevicePromise.future()\n+                .compose(result -> Optional.ofNullable(result)\n+                        .map(ok -> result.mapTo(DeviceDto.class))\n+                        .map(Future::succeededFuture)\n+                        .orElseGet(() -> {\n+                            log.debug(\"Device [{}] not found.\", deviceId);\n+                            return Future.succeededFuture(null);\n+                        }));\n+    }\n+\n+    private Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+\n+        return processReadDevice(tenantId, deviceId, span)\n+                .compose(result -> Future.succeededFuture(RegistrationResult.from(result.getStatus(),\n+                        convertDevice(deviceId, result.getPayload()), result.getCacheDirective().orElse(null))));\n+\n+    }\n+\n+    private boolean ifDuplicateKeyError(final Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3NjE3Mw==", "bodyText": "the format returned by this method seems to be specific to the Mongo DB driver being actually used while the properties of this class seem to be generic. I would therefore propose to move this method to the MongoDbExecutor service which is already tied to the specific MongoDB driver ...", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394176173", "createdAt": "2020-03-18T08:30:22Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @param timeout timeout in milliseconds. Setting to zero means the default\n+     *                value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setServerSelectionTimeout(final int timeout) {\n+        this.serverSelectionTimeoutMS = timeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getConnectTimeout() {\n+        return connectTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @param connectTimeout timeout in milliseconds. Setting to zero means the default\n+     *                       value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectTimeout(final int connectTimeout) {\n+        this.connectTimeoutMS = connectTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to create indices during startup.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getCreateIndicesTimeout() {\n+        return createIndicesTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the startup will try to create indices\n+     * during startup.\n+     *\n+     * @param timeout timeout in milliseconds.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setCreateIndicesTimeout(final int timeout) {\n+        this.createIndicesTimeoutMS = timeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the properties of this instance in a JsonObject suitable for\n+     * initializing a Vertx MongoClient object. Note: if the connectionString is\n+     * set, it will override all other connection settings.\n+     *\n+     * @return MongoDB client config object\n+     */\n+    public JsonObject asMongoClientConfigJson() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3NjYxOQ==", "bodyText": "I don't think that there is a tenant being created, is there?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394176619", "createdAt": "2020-03-18T08:31:14Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbCallExecutor.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.utils;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbConfigProperties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.mongodb.MongoSocketException;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+\n+/**\n+ * Utility for vertx mongodb client access.\n+ */\n+public final class MongoDbCallExecutor {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbCallExecutor.class);\n+\n+    private final MongoClient mongoClient;\n+    private final MongoDbConfigProperties mongoDbConfig;\n+    private final Vertx vertx;\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param vertx         The Vert.x instance to use.\n+     * @param mongoDbConfig The mongodb configuration properties to use.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     */\n+    public MongoDbCallExecutor(final Vertx vertx, final MongoDbConfigProperties mongoDbConfig) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+        this.mongoDbConfig = Objects.requireNonNull(mongoDbConfig);\n+        final JsonObject mongoConfigJson = this.mongoDbConfig.asMongoClientConfigJson();\n+        this.mongoClient = MongoClient.createShared(vertx, mongoConfigJson);\n+    }\n+\n+    /**\n+     * Gets the mongo client.\n+     *\n+     * @return The mongo client.\n+     */\n+    public MongoClient getMongoClient() {\n+        return mongoClient;\n+    }\n+\n+    /**\n+     * Creates mongodb collection index. Wrapper of {@link #createIndex(String, JsonObject, IndexOptions, Handler)}\n+     *\n+     * @param collectionName The name of the collection of documents.\n+     * @param keys           The keys to be indexed.\n+     * @param options        The options used to configure index, which is optional.\n+     * @return A succeeded Future if the tenant creation is successful,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3Nzk5Mg==", "bodyText": "final?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394177992", "createdAt": "2020-03-18T08:33:50Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.utils;\n+\n+import org.eclipse.hono.util.RegistrationConstants;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * Utility class for building Json documents for mongodb.\n+ */\n+public class MongoDbDocumentBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3ODI4OQ==", "bodyText": "document()? There is nothing being created here ..", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394178289", "createdAt": "2020-03-18T08:34:30Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.utils;\n+\n+import org.eclipse.hono.util.RegistrationConstants;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * Utility class for building Json documents for mongodb.\n+ */\n+public class MongoDbDocumentBuilder {\n+\n+    private final JsonObject document = new JsonObject();\n+\n+    /**\n+     * Sets the json object with the given tenant id.\n+     *\n+     * @param tenantId The tenant id.\n+     * @return a reference to this for fluent use.\n+     */\n+    public MongoDbDocumentBuilder withTenantId(final String tenantId) {\n+        document.put(RegistrationConstants.FIELD_PAYLOAD_TENANT_ID, tenantId);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the json object with the given device id.\n+     *\n+     * @param deviceId The device id.\n+     * @return a reference to this for fluent use.\n+     */\n+    public MongoDbDocumentBuilder withDeviceId(final String deviceId) {\n+        document.put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the json object.\n+     * \n+     * @return the json document.\n+     */\n+    public JsonObject create() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3ODYyNQ==", "bodyText": "This should include hint that this is the Mongo DB based registry, shouldn't it?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394178625", "createdAt": "2020-03-18T08:35:10Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/resources/banner.txt", "diffHunk": "@@ -0,0 +1,15 @@\n+\n+  ______     _ _                  _    _                   \n+ |  ____|   | (_)                | |  | |                  \n+ | |__   ___| |_ _ __  ___  ___  | |__| | ___  _ __   ___  \n+ |  __| / __| | | '_ \\/ __|/ _ \\ |  __  |/ _ \\| '_ \\ / _ \\ \n+ | |___| (__| | | |_) \\__ \\  __/ | |  | | (_) | | | | (_) |\n+ |______\\___|_|_| .__/|___/\\___| |_|  |_|\\___/|_| |_|\\___/ \n+                | |                                        \n+                |_|                                        \n+\n+Eclipse Hono Device Registry Server ${application.formatted-version}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3ODgzNg==", "bodyText": "just 2020", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394178836", "createdAt": "2020-03-18T08:35:35Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/resources/logback-spring.xml", "diffHunk": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc"}, "originalPosition": 3}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/09027c05d2210e26042e5ec4970233e64ad1fbcc", "committedDate": "2020-03-17T17:02:19Z", "message": "[#1679] Add device registration and management service implementation.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "6d57334af3e86b922f8f5a9de5fe145d1415ced6", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/6d57334af3e86b922f8f5a9de5fe145d1415ced6", "committedDate": "2020-03-19T08:58:24Z", "message": "[#1679] Refactor by extending AbstractRegistrationService so that it can be easily tested.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTU2MDQ4", "url": "https://github.com/eclipse/hono/pull/1842#pullrequestreview-377556048", "createdAt": "2020-03-19T09:37:44Z", "commit": {"oid": "6d57334af3e86b922f8f5a9de5fe145d1415ced6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTozNzo0NVrOF4mmow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTozOTowM1rOF4mpyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NzA1OQ==", "bodyText": "this method is not necessary, vert.x will invoke init with the vert.x instance and the event-loop context during deployment of the verticle. So, instead, you should implement the init method accordingly ...", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394897059", "createdAt": "2020-03-19T09:37:45Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -114,6 +95,30 @@ public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n         this.config = Objects.requireNonNull(config);\n     }\n \n+    /**\n+     * Sets the Vert.x instance to deploy the service to.\n+     *\n+     * @param vertx The vertx instance.\n+     * @throws NullPointerException if vertx is {@code null}.\n+     */\n+    @Autowired\n+    public void setVertx(final Vertx vertx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d57334af3e86b922f8f5a9de5fe145d1415ced6"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NzUxNw==", "bodyText": "there seems to be a parameter missing", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394897517", "createdAt": "2020-03-19T09:38:29Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -285,15 +290,14 @@ private boolean isDuplicateKeyError(final Throwable throwable) {\n                         Optional.of(device.getVersion())))\n                 .recover(error -> {\n                     if (isDuplicateKeyError(error)) {\n-                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId(),\n-                                device.getTenantId(), error);\n+                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d57334af3e86b922f8f5a9de5fe145d1415ced6"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5Nzg2Nw==", "bodyText": "why don't you want to log the exception anymore?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394897867", "createdAt": "2020-03-19T09:39:03Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -285,15 +290,14 @@ private boolean isDuplicateKeyError(final Throwable throwable) {\n                         Optional.of(device.getVersion())))\n                 .recover(error -> {\n                     if (isDuplicateKeyError(error)) {\n-                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId(),\n-                                device.getTenantId(), error);\n+                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId());\n                         TracingHelper.logError(span, String.format(\"Device [%s] already exists for the tenant [%s]\",\n                                 device.getDeviceId(), device.getTenantId()));\n                         return Future.succeededFuture(\n                                 OperationResult.empty(HttpURLConnection.HTTP_CONFLICT));\n                     } else {\n                         log.error(\"Error adding device [{}] for the tenant [{}]\", device.getDeviceId(),\n-                                device.getTenantId(), error);\n+                                device.getTenantId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d57334af3e86b922f8f5a9de5fe145d1415ced6"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTcyMDgw", "url": "https://github.com/eclipse/hono/pull/1842#pullrequestreview-379172080", "createdAt": "2020-03-23T07:07:10Z", "commit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzowNzoxMVrOF544bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzowNzoxMVrOF544bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTEwMA==", "bodyText": "what if the client context doesn't contain a certificate?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396245100", "createdAt": "2020-03-23T07:07:11Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -134,4 +149,48 @@ public static CacheDirective getCacheDirective(final int cacheMaxAge) {\n     public static String getUniqueIdentifier() {\n         return UUID.randomUUID().toString();\n     }\n+\n+    /**\n+     * Gets the certificate of the device to be provisioned from the client context.\n+     *\n+     * @param tenantId The tenant to which the device belongs.\n+     * @param authId The authentication identifier.\n+     * @param clientContext The client context that can be used to get the X.509 certificate \n+     *                      of the device to be provisioned.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n+     *             implementation should log (error) events on this span and it may set tags and use this span \n+     *             as the parent for any spans created in this method.\n+     * @return the certificate of the device to be provisioned.\n+     * @throws NullPointerException if any of the parameters except span is {@code null}.\n+     * @throws ClientErrorException if error getting the certificate from the given client context.\n+     */\n+    public static X509Certificate getCertificateFromClientContext(\n+            final String tenantId,\n+            final String authId,\n+            final JsonObject clientContext,\n+            final Span span) throws ClientErrorException {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(authId);\n+        Objects.requireNonNull(clientContext);\n+\n+        try {\n+            final byte[] bytes = clientContext.getBinary(CredentialsConstants.FIELD_CLIENT_CERT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5Mzc2ODUw", "url": "https://github.com/eclipse/hono/pull/1842#pullrequestreview-379376850", "createdAt": "2020-03-23T12:21:04Z", "commit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyMTowNFrOF6C7yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjozNDoyN1rOF6DX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwOTgwMw==", "bodyText": "IMHO a link to the resource where the connection string format is defined would be helpful ...", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396409803", "createdAt": "2020-03-23T12:21:04Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.PortConfigurationHelper;\n+\n+/**\n+ * A POJO for configuring mongodb properties used by the\n+ * {@link org.eclipse.hono.deviceregistry.mongodb.service.MongoDbBasedRegistrationService}.\n+ */\n+public final class MongoDbConfigProperties {\n+\n+    private static final int DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS = 3000;\n+    private static final int DEFAULT_PORT = 27017;\n+\n+    private String host = \"localhost\";\n+    private int port = DEFAULT_PORT;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutInMs = 0;\n+    private int connectionTimeoutInMs = 0;\n+    private int createIndicesTimeoutInMs = DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @return The host name.\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if host is {@code null}.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = Objects.requireNonNull(host);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the TCP port that the mongodb is listening on.\n+     *\n+     * @return The port number.\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the TCP port that the mongodb is listening on.\n+     * <p>\n+     * The default port value is {@link #DEFAULT_PORT}.\n+     *\n+     * @param port The port number.\n+     * @return A reference to this for fluent use.\n+     * @throws IllegalArgumentException if port &lt; 1000 or port &gt; 65535.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        if (PortConfigurationHelper.isValidPort(port)) {\n+            this.port = port;\n+        } else {\n+            throw new IllegalArgumentException(\"invalid port number\");\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return The database name.\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName The database name\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if dbName is {@code null}.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = Objects.requireNonNull(dbName);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return The user name.\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username The user name.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the username is {@code null}.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = Objects.requireNonNull(username);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return The password.\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if password is {@code null}.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = Objects.requireNonNull(password);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the mongodb client.\n+     *\n+     * @return The connection string.\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the mongodb client. If set, the connection string\n+     * overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMDM2Mw==", "bodyText": "plaess document the default value as well", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396410363", "createdAt": "2020-03-23T12:22:07Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.PortConfigurationHelper;\n+\n+/**\n+ * A POJO for configuring mongodb properties used by the\n+ * {@link org.eclipse.hono.deviceregistry.mongodb.service.MongoDbBasedRegistrationService}.\n+ */\n+public final class MongoDbConfigProperties {\n+\n+    private static final int DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS = 3000;\n+    private static final int DEFAULT_PORT = 27017;\n+\n+    private String host = \"localhost\";\n+    private int port = DEFAULT_PORT;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutInMs = 0;\n+    private int connectionTimeoutInMs = 0;\n+    private int createIndicesTimeoutInMs = DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @return The host name.\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if host is {@code null}.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = Objects.requireNonNull(host);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the TCP port that the mongodb is listening on.\n+     *\n+     * @return The port number.\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the TCP port that the mongodb is listening on.\n+     * <p>\n+     * The default port value is {@link #DEFAULT_PORT}.\n+     *\n+     * @param port The port number.\n+     * @return A reference to this for fluent use.\n+     * @throws IllegalArgumentException if port &lt; 1000 or port &gt; 65535.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        if (PortConfigurationHelper.isValidPort(port)) {\n+            this.port = port;\n+        } else {\n+            throw new IllegalArgumentException(\"invalid port number\");\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return The database name.\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName The database name\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if dbName is {@code null}.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = Objects.requireNonNull(dbName);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return The user name.\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username The user name.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the username is {@code null}.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = Objects.requireNonNull(username);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return The password.\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if password is {@code null}.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = Objects.requireNonNull(password);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the mongodb client.\n+     *\n+     * @return The connection string.\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the mongodb client. If set, the connection string\n+     * overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString The connection string.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the connectionString is {@code null}.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = Objects.requireNonNull(connectionString);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMDYyMQ==", "bodyText": "please document the default value and its semantics as well", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396410621", "createdAt": "2020-03-23T12:22:35Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.PortConfigurationHelper;\n+\n+/**\n+ * A POJO for configuring mongodb properties used by the\n+ * {@link org.eclipse.hono.deviceregistry.mongodb.service.MongoDbBasedRegistrationService}.\n+ */\n+public final class MongoDbConfigProperties {\n+\n+    private static final int DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS = 3000;\n+    private static final int DEFAULT_PORT = 27017;\n+\n+    private String host = \"localhost\";\n+    private int port = DEFAULT_PORT;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutInMs = 0;\n+    private int connectionTimeoutInMs = 0;\n+    private int createIndicesTimeoutInMs = DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @return The host name.\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if host is {@code null}.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = Objects.requireNonNull(host);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the TCP port that the mongodb is listening on.\n+     *\n+     * @return The port number.\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the TCP port that the mongodb is listening on.\n+     * <p>\n+     * The default port value is {@link #DEFAULT_PORT}.\n+     *\n+     * @param port The port number.\n+     * @return A reference to this for fluent use.\n+     * @throws IllegalArgumentException if port &lt; 1000 or port &gt; 65535.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        if (PortConfigurationHelper.isValidPort(port)) {\n+            this.port = port;\n+        } else {\n+            throw new IllegalArgumentException(\"invalid port number\");\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return The database name.\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName The database name\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if dbName is {@code null}.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = Objects.requireNonNull(dbName);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return The user name.\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username The user name.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the username is {@code null}.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = Objects.requireNonNull(username);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return The password.\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if password is {@code null}.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = Objects.requireNonNull(password);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the mongodb client.\n+     *\n+     * @return The connection string.\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the mongodb client. If set, the connection string\n+     * overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString The connection string.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the connectionString is {@code null}.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = Objects.requireNonNull(connectionString);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return The server selection timeout in milliseconds.\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutInMs;\n+    }\n+\n+    /**\n+     * Sets the timeout in milliseconds that the mongo driver will wait to select a server \n+     * for an operation before raising an error.\n+     * <p>\n+     * When this property is set to 0, the default value of Vert.x should be used.\n+     * \n+     * @param serverSelectionTimeoutInMs The server selection timeout in milliseconds.\n+     * @return A reference to this for fluent use.\n+     * @throws IllegalArgumentException if the timeout is set to &lt;= 0.\n+     */\n+    public MongoDbConfigProperties setServerSelectionTimeout(final int serverSelectionTimeoutInMs) {\n+        if (serverSelectionTimeoutInMs <= 0) {\n+            throw new IllegalArgumentException(\"server selection timeout must be greater than zero\");\n+        }\n+        this.serverSelectionTimeoutInMs = serverSelectionTimeoutInMs;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the timeout in milliseconds to attempt a connection before timing out.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTQ4NQ==", "bodyText": "do we need an explicit version if we already have the last updated timestamp?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396411485", "createdAt": "2020-03-23T12:24:05Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_VERSION, required = true)\n+    protected String version;\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_UPDATED_ON, required = true)\n+    @HonoTimestamp\n+    protected Instant updatedOn;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public BaseDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Gets the version of the document.\n+     * \n+     * @return The version of the document or {@code null} if not set.\n+     */\n+    public final String getVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzcyMg==", "bodyText": "that would only make sense if the client has a chance of preventing it to be thrown. For that, it would need to check for the presence of the JSON property, right? That, however, is what we are trying to encapsulate here, isn't it?\nHow about returning a Future<Optional<X509Certificate>> and let the client only process the result if it is not empty?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396413722", "createdAt": "2020-03-23T12:28:15Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -134,4 +149,48 @@ public static CacheDirective getCacheDirective(final int cacheMaxAge) {\n     public static String getUniqueIdentifier() {\n         return UUID.randomUUID().toString();\n     }\n+\n+    /**\n+     * Gets the certificate of the device to be provisioned from the client context.\n+     *\n+     * @param tenantId The tenant to which the device belongs.\n+     * @param authId The authentication identifier.\n+     * @param clientContext The client context that can be used to get the X.509 certificate \n+     *                      of the device to be provisioned.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n+     *             implementation should log (error) events on this span and it may set tags and use this span \n+     *             as the parent for any spans created in this method.\n+     * @return the certificate of the device to be provisioned.\n+     * @throws NullPointerException if any of the parameters except span is {@code null}.\n+     * @throws ClientErrorException if error getting the certificate from the given client context.\n+     */\n+    public static X509Certificate getCertificateFromClientContext(\n+            final String tenantId,\n+            final String authId,\n+            final JsonObject clientContext,\n+            final Span span) throws ClientErrorException {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(authId);\n+        Objects.requireNonNull(clientContext);\n+\n+        try {\n+            final byte[] bytes = clientContext.getBinary(CredentialsConstants.FIELD_CLIENT_CERT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTEwMA=="}, "originalCommit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjk4MQ==", "bodyText": "I believe this can be done more elegantly using recursion, can't it?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396416981", "createdAt": "2020-03-23T12:34:27Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbCallExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.utils;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbConfigProperties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.mongodb.MongoSocketException;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+\n+/**\n+ * Utility class for Vert.x mongodb client access.\n+ */\n+public final class MongoDbCallExecutor {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbCallExecutor.class);\n+\n+    private final MongoDbConfigProperties config;\n+    private final MongoClient mongoClient;\n+    private final Vertx vertx;\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param vertx         The Vert.x instance to use.\n+     * @param config The mongodb configuration properties to use.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     */\n+    public MongoDbCallExecutor(final Vertx vertx, final MongoDbConfigProperties config) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+        this.config = Objects.requireNonNull(config);\n+        this.mongoClient = MongoClient.createShared(vertx, getMongoClientConfigAsJson());\n+    }\n+\n+    /**\n+     * Gets the mongo client.\n+     *\n+     * @return The mongo client.\n+     */\n+    public MongoClient getMongoClient() {\n+        return mongoClient;\n+    }\n+\n+    /**\n+     * Creates mongodb collection index. Wrapper of {@link #createIndex(String, JsonObject, IndexOptions, Handler)}\n+     *\n+     * @param collectionName The name of the collection of documents.\n+     * @param keys           The keys to be indexed.\n+     * @param options        The options used to configure index, which is optional.\n+     * @return  A future indicating the outcome of the indices creation operation.\n+     */\n+    public Future<Void> createCollectionIndex(final String collectionName, final JsonObject keys,\n+                                              final IndexOptions options) {\n+        final Promise<Void> indexCreationPromise = Promise.promise();\n+        createIndex(collectionName, keys, options, res -> {\n+            if (res.succeeded()) {\n+                indexCreationPromise.complete();\n+            } else if (res.cause() instanceof MongoSocketException) {\n+                log.info(\"Create indices failed, wait for retry, cause:\", res.cause());\n+                vertx.setTimer(this.config.getCreateIndicesTimeout(),\n+                        timer -> createIndex(collectionName, keys, options, res2 -> {\n+                            if (res2.succeeded()) {\n+                                indexCreationPromise.complete();\n+                            } else if (res2.cause() instanceof MongoSocketException) {\n+                                log.info(\"Create indices failed, wait for second retry, cause:\", res2.cause());\n+                                vertx.setTimer(this.config.getCreateIndicesTimeout(),\n+                                        timer2 -> createIndex(collectionName, keys, options, res3 -> {\n+                                            if (res3.succeeded()) {\n+                                                indexCreationPromise.complete();\n+                                            } else {\n+                                                log.error(\"Error creating index\", res3.cause());\n+                                                indexCreationPromise.fail(res3.cause());\n+                                            }\n+                                        }));\n+                            } else {\n+                                log.error(\"Error creating index\", res2.cause());\n+                                indexCreationPromise.fail(res2.cause());\n+                            }\n+                        }));\n+            } else {\n+                log.error(\"Error creating index\", res.cause());\n+                indexCreationPromise.fail(res.cause());\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd"}, "originalPosition": 106}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1abdf43952626e15971225e044b495bb8bab34dd", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/1abdf43952626e15971225e044b495bb8bab34dd", "committedDate": "2020-03-19T12:24:08Z", "message": "[#1679] Pull up a utility method to get the certificate of the device to be provisioned from the client context.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "4988fbfead555a25b1f12e83fa0ff4f8c7c1079a", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/4988fbfead555a25b1f12e83fa0ff4f8c7c1079a", "committedDate": "2020-03-30T12:13:42Z", "message": "[#1679] Pull up utility methods.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4988fbfead555a25b1f12e83fa0ff4f8c7c1079a", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/4988fbfead555a25b1f12e83fa0ff4f8c7c1079a", "committedDate": "2020-03-30T12:13:42Z", "message": "[#1679] Pull up utility methods.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "d6e0e0da429f323b5d72df723e6e4478ac3e78b7", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/d6e0e0da429f323b5d72df723e6e4478ac3e78b7", "committedDate": "2020-03-30T12:17:24Z", "message": "[#1679] Pull up utility methods.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6e0e0da429f323b5d72df723e6e4478ac3e78b7", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/d6e0e0da429f323b5d72df723e6e4478ac3e78b7", "committedDate": "2020-03-30T12:17:24Z", "message": "[#1679] Pull up utility methods.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "781582769bcf075bd813bdc4d499d26fa200c518", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/781582769bcf075bd813bdc4d499d26fa200c518", "committedDate": "2020-03-30T12:33:21Z", "message": "[#1679] Pull up utility methods.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTAxNTg0", "url": "https://github.com/eclipse/hono/pull/1842#pullrequestreview-383901584", "createdAt": "2020-03-30T14:18:27Z", "commit": {"oid": "4ba0c1a41d79c75dadb2871dea78513e1ce82211"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxODoyOFrOF9r_8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyMjoyMVrOF9sLbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyODMzOA==", "bodyText": "why is it a bad request if the client context does not contain a certificate? Maybe the adapter doesn't want to support auto provisioning?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400228338", "createdAt": "2020-03-30T14:18:28Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedDeviceBackend.java", "diffHunk": "@@ -161,23 +159,23 @@ public MongoDbBasedDeviceBackend(\n                 .compose(result -> {\n                     if (result.getStatus() == HttpURLConnection.HTTP_NOT_FOUND\n                             && isAutoProvisioningEnabled(type, clientContext)) {\n-                        try {\n-                            final X509Certificate cert = DeviceRegistryUtils\n-                                    .getCertificateFromClientContext(tenantId, authId, clientContext, span);\n-                            return provisionDevice(tenantId, cert, span)\n-                                    .compose(r -> {\n-                                        if (r.isError()) {\n-                                            TracingHelper.logError(span, r.getPayload());\n-                                            return Future.succeededFuture(\n-                                                    createErrorCredentialsResult(r.getStatus(), r.getPayload()));\n-                                        } else {\n-                                            return getNewCredentials(tenantId, authId, span);\n-                                        }\n-                                    });\n-                        } catch (final ClientErrorException e) {\n-                            return Future\n-                                    .succeededFuture(createErrorCredentialsResult(e.getErrorCode(), e.getMessage()));\n-                        }\n+                        return DeviceRegistryUtils\n+                                .getCertificateFromClientContext(tenantId, authId, clientContext, span)\n+                                .compose(optionalCert -> optionalCert\n+                                        .map(ok -> provisionDevice(tenantId, optionalCert.get(), span)\n+                                                .compose(r -> {\n+                                                    if (r.isError()) {\n+                                                        TracingHelper.logError(span, r.getPayload());\n+                                                        return Future.succeededFuture(\n+                                                                createErrorCredentialsResult(r.getStatus(),\n+                                                                        r.getPayload()));\n+                                                    } else {\n+                                                        return getNewCredentials(tenantId, authId, span);\n+                                                    }\n+                                                }))\n+                                        .orElse(Future.succeededFuture(\n+                                                createErrorCredentialsResult(HttpURLConnection.HTTP_BAD_REQUEST,\n+                                                        \"Not able to get the certificate from the client context\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba0c1a41d79c75dadb2871dea78513e1ce82211"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMDMwMw==", "bodyText": "this just means that the adapter doesn't support auto provisioning, right? So, FMPOV this should result in\nreturn Optional.empty();", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400230303", "createdAt": "2020-03-30T14:21:08Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -160,22 +159,26 @@ public static String getUniqueIdentifier() {\n      * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n      *             implementation should log (error) events on this span and it may set tags and use this span \n      *             as the parent for any spans created in this method.\n-     * @return the certificate of the device to be provisioned.\n+     * @return A future indicating the outcome of the operation. If the operation succeeds, the\n+     *         retrieved certificate is returned. Else {@link Optional#empty()} is returned.\n      * @throws NullPointerException if any of the parameters except span is {@code null}.\n-     * @throws ClientErrorException if error getting the certificate from the given client context.\n      */\n-    public static X509Certificate getCertificateFromClientContext(\n+    public static Future<Optional<X509Certificate>> getCertificateFromClientContext(\n             final String tenantId,\n             final String authId,\n             final JsonObject clientContext,\n-            final Span span) throws ClientErrorException {\n+            final Span span) {\n \n         Objects.requireNonNull(tenantId);\n         Objects.requireNonNull(authId);\n         Objects.requireNonNull(clientContext);\n \n         try {\n             final byte[] bytes = clientContext.getBinary(CredentialsConstants.FIELD_CLIENT_CERT);\n+            if (bytes == null) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"The client context doesn't contain a certificate for tenant [%s]\", tenantId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba0c1a41d79c75dadb2871dea78513e1ce82211"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMTI3Nw==", "bodyText": "this means that the adapter supports auto provisioning but the data is malformed. Thus, this should result in a failed future with a ClientErrorException(400), right?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400231277", "createdAt": "2020-03-30T14:22:21Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -184,13 +187,13 @@ public static X509Certificate getCertificateFromClientContext(\n                         String.format(\"Subject DN of the client certificate does not match authId [%s] for tenant [%s]\",\n                                 authId, tenantId));\n             }\n-            return cert;\n+            return Future.succeededFuture(Optional.of(cert));\n         } catch (final CertificateException | ClassCastException | IllegalArgumentException error) {\n             final String errorMessage = String.format(\n                     \"Error getting certificate from client context with authId [%s] for tenant [%s]\", authId, tenantId);\n             LOG.error(errorMessage, error);\n             TracingHelper.logError(span, errorMessage, error);\n-            throw new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, error.getMessage());\n+            return Future.succeededFuture(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba0c1a41d79c75dadb2871dea78513e1ce82211"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTExNjk2", "url": "https://github.com/eclipse/hono/pull/1842#pullrequestreview-383911696", "createdAt": "2020-03-30T14:28:27Z", "commit": {"oid": "a4e3e3489742683602fead8171cf92c6cbdee32d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyODoyN1rOF9se2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozMDowMlrOF9skCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjI0OQ==", "bodyText": "you really want to compute this every time this method is invoked?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400236249", "createdAt": "2020-03-30T14:28:27Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -43,22 +45,56 @@ public BaseDto() {\n     }\n \n     /**\n-     * Gets the version of the document.\n+     * Gets the version number of the document.\n      * \n+     * @return The version number of the document or {@code null} if not set.\n+     */\n+    public final long getVersionNo() {\n+        return versionNo;\n+    }\n+\n+    /**\n+     * Gets the version of the document.\n+     *\n      * @return The version of the document or {@code null} if not set.\n      */\n+    @JsonIgnore\n     public final String getVersion() {\n-        return version;\n+        return String.format(\"%d\", versionNo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4e3e3489742683602fead8171cf92c6cbdee32d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNzU3Nw==", "bodyText": "is it helpful to use a Long here instead of a String, i.e. does the Mongo DB driver update this field automatically or do you need to set this value manually whenever you save a modified object instance?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400237577", "createdAt": "2020-03-30T14:30:02Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -14,23 +14,25 @@\n \n import java.time.Instant;\n import java.util.Objects;\n+import java.util.Optional;\n \n import org.eclipse.hono.annotation.HonoTimestamp;\n import org.eclipse.hono.util.RegistryManagementConstants;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n /**\n- * TODO.\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in mongodb.\n  */\n @JsonIgnoreProperties(ignoreUnknown = true)\n @JsonInclude(JsonInclude.Include.NON_NULL)\n public abstract class BaseDto {\n \n     @JsonProperty(value = RegistryManagementConstants.FIELD_VERSION, required = true)\n-    protected String version;\n+    protected Long versionNo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4e3e3489742683602fead8171cf92c6cbdee32d"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTE4MTQ4", "url": "https://github.com/eclipse/hono/pull/1842#pullrequestreview-383918148", "createdAt": "2020-03-30T14:34:46Z", "commit": {"oid": "781582769bcf075bd813bdc4d499d26fa200c518"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozNDo0NlrOF9syXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo0MTozNlrOF9tHEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MTI0NQ==", "bodyText": "this doesn't seem to account for the tenant given but seems to count the number of elements in the collection for all tenants, doesn't it?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400241245", "createdAt": "2020-03-30T14:34:46Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -364,15 +317,32 @@ private boolean isDuplicateKeyError(final Throwable throwable) {\n         return updateDevicePromise.future()\n                 .map(updateResult -> {\n                     if (updateResult.getDocMatched() == 0) {\n-                        TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceId));\n+                        TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceDto.getDeviceId()));\n                         return OperationResult.empty(HttpURLConnection.HTTP_NOT_FOUND);\n                     } else {\n                         return OperationResult.ok(\n                                 HttpURLConnection.HTTP_NO_CONTENT,\n-                                Id.of(deviceId),\n+                                Id.of(deviceDto.getDeviceId()),\n                                 Optional.empty(),\n                                 Optional.of(deviceDto.getVersion()));\n                     }\n                 });\n     }\n+\n+    private <T> Future<T> isMaxDevicesLimitReached(final String tenantId) {\n+        final Promise<Long> findExistingNoOfDevicesPromise = Promise.promise();\n+        mongoClient.count(config.getCollectionName(), new JsonObject(), findExistingNoOfDevicesPromise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781582769bcf075bd813bdc4d499d26fa200c518"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NjU0NA==", "bodyText": "my understanding of this code is that we first load the entity, then check if the resource version is correct, then modify the entity and then write it back to the database. I am no expert in Mongo but I would assume that you can simply invoke an update operation providing filter criteria in order to do that in one go, can't you?\nThis approach here also seems to have the problem that after you retrieved the device and verified that the version matches, another update could take place which changes the version before you are writing back the object, or does the Mongo DB driver prevent this somehow?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400246544", "createdAt": "2020-03-30T14:41:36Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -179,28 +171,11 @@ public void stop(final Promise<Void> stopPromise) {\n         Objects.requireNonNull(deviceId);\n         Objects.requireNonNull(resourceVersion);\n \n-        if (!config.isModificationEnabled()) {\n-            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n-            TracingHelper.logError(span, errorMsg);\n-            log.debug(errorMsg);\n-            return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n-        }\n-\n-        return findDevice(tenantId, deviceId)\n-                .compose(deviceDto -> {\n-                    if (deviceDto == null) {\n-                        final String errorMsg = String.format(\"Device [%s] not found.\", deviceId);\n-                        log.debug(errorMsg);\n-                        TracingHelper.logError(span, errorMsg);\n-                        return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_NOT_FOUND));\n-                    }\n-                    if (!deviceDto.isVersionMatch(resourceVersion)) {\n-                        log.debug(\"Resource Version mismatch\");\n-                        TracingHelper.logError(span, \"Resource Version mismatch\");\n-                        return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_PRECON_FAILED));\n-                    }\n-                    return processUpdateDevice(tenantId, deviceId, deviceDto, span);\n-                });\n+        return MongoDbServiceUtils.isAllowedToModify(config, tenantId)\n+                .compose(ok -> findDevice(tenantId, deviceId))\n+                .compose(deviceDto -> MongoDbServiceUtils.checkResourceVersion(deviceDto, resourceVersion))\n+                .compose(deviceDto -> processUpdateDevice(tenantId, deviceDto, span))\n+                .recover(error -> Future.succeededFuture(MongoDbServiceUtils.mapErrorToResult(error, span)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781582769bcf075bd813bdc4d499d26fa200c518"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ecb1dcdfc55b3a4aa02aad0080e913e2485933af", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/ecb1dcdfc55b3a4aa02aad0080e913e2485933af", "committedDate": "2020-03-31T21:29:27Z", "message": "[#1679] Use UUID for resource version and minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "95952df5ccd643e279e6e2dd63789d18bd398219", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/95952df5ccd643e279e6e2dd63789d18bd398219", "committedDate": "2020-03-31T21:34:06Z", "message": "[#1679] Use UUID for resource version and minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MjkwODc3", "url": "https://github.com/eclipse/hono/pull/1842#pullrequestreview-385290877", "createdAt": "2020-04-01T06:16:12Z", "commit": {"oid": "95952df5ccd643e279e6e2dd63789d18bd398219"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjoxNjoxM1rOF-yMIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjoyNzozN1rOF-ycCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3ODMzOQ==", "bodyText": "are the params allowed to be null or not (as indicated by the JavaDoc)?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401378339", "createdAt": "2020-04-01T06:16:13Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/DeviceDto.java", "diffHunk": "@@ -44,18 +44,16 @@ public DeviceDto() {\n     /**\n      * @param tenantId The tenant identifier.\n      * @param deviceId The device identifier.\n-     * @param device The device.\n+     * @param device The device information.\n      * @param version The version of tenant to be sent as request header.\n-     * @param updatedOn The date and time of last update.\n      * @throws NullPointerException if any of the parameters except the device are {@code null}\n      */\n-    public DeviceDto(final String tenantId, final String deviceId, final Device device, final long version,\n-            final Instant updatedOn) {\n-        this.tenantId = Objects.requireNonNull(tenantId);\n-        this.deviceId = Objects.requireNonNull(deviceId);\n-        this.device = device;\n-        this.versionNo = version;\n-        this.updatedOn = Objects.requireNonNull(updatedOn);\n+    public DeviceDto(final String tenantId, final String deviceId, final Device device, final String version) {\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+        setDevice(device);\n+        setVersion(version);\n+        setUpdatedOn(Instant.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95952df5ccd643e279e6e2dd63789d18bd398219"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MDYzOQ==", "bodyText": "looks like this is the same code as for the delete case, isn't it?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401380639", "createdAt": "2020-04-01T06:22:41Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -304,39 +323,67 @@ private boolean isDuplicateKeyError(final Throwable throwable) {\n                                 Optional.ofNullable(deviceDto.getVersion()))));\n     }\n \n-    private Future<OperationResult<Id>> processUpdateDevice(final String tenantId, final DeviceDto deviceDto,\n-            final Span span) {\n-        final JsonObject updateDeviceQuery = new MongoDbDocumentBuilder()\n+    private Future<OperationResult<Id>> processUpdateDevice(final String tenantId, final String deviceId,\n+            final Device device, final Optional<String> resourceVersion, final Span span) {\n+        final JsonObject updateDeviceQuery = resourceVersion\n+                .map(version -> new MongoDbDocumentBuilder().withVersion(version))\n+                .orElse(new MongoDbDocumentBuilder())\n                 .withTenantId(tenantId)\n-                .withDeviceId(deviceDto.getDeviceId())\n+                .withDeviceId(deviceId)\n                 .document();\n-        final Promise<MongoClientUpdateResult> updateDevicePromise = Promise.promise();\n-        deviceDto.incrementVersionNo();\n-        mongoClient.updateCollection(config.getCollectionName(), updateDeviceQuery,\n-                new JsonObject().put(\"$set\", JsonObject.mapFrom(deviceDto)), updateDevicePromise);\n+        final Promise<JsonObject> updateDevicePromise = Promise.promise();\n+\n+        mongoClient.findOneAndReplace(config.getCollectionName(), updateDeviceQuery,\n+                JsonObject.mapFrom(new DeviceDto(tenantId, deviceId, device, new Versioned<>(device).getVersion())),\n+                updateDevicePromise);\n+\n         return updateDevicePromise.future()\n-                .map(updateResult -> {\n-                    if (updateResult.getDocMatched() == 0) {\n-                        TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceDto.getDeviceId()));\n-                        return OperationResult.empty(HttpURLConnection.HTTP_NOT_FOUND);\n-                    } else {\n-                        return OperationResult.ok(\n-                                HttpURLConnection.HTTP_NO_CONTENT,\n-                                Id.of(deviceDto.getDeviceId()),\n-                                Optional.empty(),\n-                                Optional.of(deviceDto.getVersion()));\n-                    }\n-                });\n+                .compose(result -> Optional.ofNullable(result)\n+                        .map(updated -> {\n+                            span.log(String.format(\"successfully updated device [%s]\", deviceId));\n+                            return Future.succeededFuture(OperationResult.ok(\n+                                    HttpURLConnection.HTTP_NO_CONTENT,\n+                                    Id.of(deviceId),\n+                                    Optional.empty(),\n+                                    Optional.of(result.getString(RegistryManagementConstants.FIELD_VERSION))));\n+                        })\n+                        .orElseGet(() -> {\n+                            // If the version is provided in the request, the reason for no update could be\n+                            // that the device is not found or version mismatch.\n+                            if (resourceVersion.isPresent()) {\n+                                return findDevice(tenantId, deviceId)\n+                                        .compose(foundDevice -> checkForVersionMismatchAndFail(deviceId,\n+                                                foundDevice.getVersion(), resourceVersion.get()));\n+                            } else {\n+                                return Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND,\n+                                        String.format(\"Device [%s] not found.\", deviceId)));\n+                            }\n+                        }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95952df5ccd643e279e6e2dd63789d18bd398219"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MjA3Ng==", "bodyText": "is this field used by the Device Registry Management API types? If not, then I believe it belongs into the MongoDB module as it is implementation specific, isn't it?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401382076", "createdAt": "2020-04-01T06:26:39Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -213,6 +213,10 @@\n      * all devices to authenticate.\n      */\n     public static final String FIELD_ADAPTERS_DEVICE_AUTHENTICATION_REQUIRED = \"device-authentication-required\";\n+    /**\n+     * The name of the JSON property containing the device identifier.\n+     */\n+    public static final String FIELD_DEVICE = \"device\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95952df5ccd643e279e6e2dd63789d18bd398219"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MjQwOQ==", "bodyText": "are these fields used by the Device Registry Management API types? If not, then I believe they belong into the MongoDB module as they are implementation specific, aren't they?", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401382409", "createdAt": "2020-04-01T06:27:37Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -271,6 +275,16 @@\n      */\n     public static final String FIELD_TRACING_SAMPLING_MODE_PER_AUTH_ID = \"sampling-mode-per-auth-id\";\n \n+    /**\n+     * The name of the JSON property containing the last modification date and time.\n+     */\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+\n+    /**\n+     * The name of the JSON property containing the version of the tenant or device or credentials information.\n+     */\n+    public static final String FIELD_VERSION = \"version\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95952df5ccd643e279e6e2dd63789d18bd398219"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95952df5ccd643e279e6e2dd63789d18bd398219", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/95952df5ccd643e279e6e2dd63789d18bd398219", "committedDate": "2020-03-31T21:34:06Z", "message": "[#1679] Use UUID for resource version and minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "1fe95e1666ea1df48822750e19a15a89bc16c4b0", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/1fe95e1666ea1df48822750e19a15a89bc16c4b0", "committedDate": "2020-04-01T11:44:32Z", "message": "[#1679] Minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fe95e1666ea1df48822750e19a15a89bc16c4b0", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/1fe95e1666ea1df48822750e19a15a89bc16c4b0", "committedDate": "2020-04-01T11:44:32Z", "message": "[#1679] Minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "6800e13eb979bdc4dbd8a55752d7ab0224fe95dc", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/6800e13eb979bdc4dbd8a55752d7ab0224fe95dc", "committedDate": "2020-04-01T15:22:04Z", "message": "[#1679] Refactor index creation using recursion.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjU5NTM0", "url": "https://github.com/eclipse/hono/pull/1842#pullrequestreview-386259534", "createdAt": "2020-04-02T09:35:21Z", "commit": {"oid": "5a5f42bd1e00c41e6720d479204d072fe9547407"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a48c192970a1b4b6a1770544be0686909ec846", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/28a48c192970a1b4b6a1770544be0686909ec846", "committedDate": "2020-04-02T11:57:28Z", "message": "[#1679] Prepare for mongodb based device registry implementation.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da52f31f782404cf701f5054c19cf99c82163a89", "author": {"user": {"login": "ko-j", "name": "Jan Kostulski"}}, "url": "https://github.com/eclipse/hono/commit/da52f31f782404cf701f5054c19cf99c82163a89", "committedDate": "2020-04-02T11:57:28Z", "message": "[#1679] Add utility classes for mongodb based device registry\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>\nAlso-by: Ahmad Almheidat  ahmad.almheidat@bosch-si.com\nAlso-by: Alexander Mack  alexander.mack2@bosch-si.com\nAlso-by: Bala Azhagappan  balasubramanian.azhagappan@bosch-si.com\nAlso-by: Balasubramanian  balasubramanian.azhagappan@bosch-si.com\nAlso-by: Christian Schmid  Christian.Schmid3@bosch-si.com\nAlso-by: Daniel Maier  daniel.maier@bosch-si.com\nAlso-by: Marian B\u00e4uerle  marian.baeuerle@bosch-si.com\nAlso-by: Marko Pascan marko.pascan@bosch-si.com\nAlso-by: Sebastian Poehn  sebastian.poehn@bosch-si.com"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6808fa8e972efd998203c587b50e280be0ec27e1", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/6808fa8e972efd998203c587b50e280be0ec27e1", "committedDate": "2020-04-02T11:57:28Z", "message": "[#1679] Add device registration and management service implementation.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e59b31988745f4e61df4f1b1b8fcb5612e2bc30", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/4e59b31988745f4e61df4f1b1b8fcb5612e2bc30", "committedDate": "2020-04-02T11:57:28Z", "message": "[#1679] Pull up a utility method to get the certificate of the device to be provisioned from the client context.\n\n- It also includes minor code improvements and other fixes.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372ee8e0811cbabbd1ce035df3e1f81c7c0f0c53", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/372ee8e0811cbabbd1ce035df3e1f81c7c0f0c53", "committedDate": "2020-04-02T11:57:28Z", "message": "[#1679] Use UUID for resource version, pull up utility methods and other minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a5f42bd1e00c41e6720d479204d072fe9547407", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/5a5f42bd1e00c41e6720d479204d072fe9547407", "committedDate": "2020-04-02T08:50:51Z", "message": "[#1679] Pull down a constant being used only by the mongodb based device registry.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "372ee8e0811cbabbd1ce035df3e1f81c7c0f0c53", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/372ee8e0811cbabbd1ce035df3e1f81c7c0f0c53", "committedDate": "2020-04-02T11:57:28Z", "message": "[#1679] Use UUID for resource version, pull up utility methods and other minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 806, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}