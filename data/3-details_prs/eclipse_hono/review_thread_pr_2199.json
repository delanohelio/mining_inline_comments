{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNTQxODc2", "number": 2199, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMToyMjoxMFrOEmh8hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMToyMjoxMFrOEmh8hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODM3NTA5OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/auth/device/CredentialsApiAuthProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMToyMjoxMFrOHWnF_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjozNDo1NlrOHWrCNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ3MTIyOA==", "bodyText": "authenticate(credentials, TracingHelper.extractSpanContext(tracer, authInfo), resultHandler) ?", "url": "https://github.com/eclipse/hono/pull/2199#discussion_r493471228", "createdAt": "2020-09-23T11:22:10Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/auth/device/CredentialsApiAuthProvider.java", "diffHunk": "@@ -206,47 +203,19 @@ public final void authenticate(\n \n     @Override\n     public final void authenticate(final JsonObject authInfo, final Handler<AsyncResult<User>> resultHandler) {\n-        final ExecutionContext executionContext = new GenericExecutionContext(\n-                TracingHelper.extractSpanContext(tracer, authInfo));\n-        authenticate(authInfo, executionContext, s -> {\n-            if (s.succeeded()) {\n-                resultHandler.handle(Future.succeededFuture(s.result()));\n-            } else {\n-                resultHandler.handle(Future.failedFuture(s.cause()));\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public final void authenticate(\n-            final JsonObject authInfo,\n-            final ExecutionContext executionContext,\n-            final Handler<AsyncResult<DeviceUser>> resultHandler) {\n \n-        Objects.requireNonNull(authInfo);\n-        Objects.requireNonNull(executionContext);\n-        Objects.requireNonNull(resultHandler);\n-\n-        final T credentials = getCredentials(authInfo);\n+        final T credentials = getCredentials(Objects.requireNonNull(authInfo));\n         if (credentials == null) {\n             resultHandler.handle(Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_UNAUTHORIZED, \"malformed credentials\")));\n         } else {\n-            authenticate(credentials, executionContext, resultHandler);\n+            authenticate(credentials, TracingHelper.extractSpanContext(tracer, authInfo), s -> {\n+                if (s.succeeded()) {\n+                    resultHandler.handle(Future.succeededFuture(s.result()));\n+                } else {\n+                    resultHandler.handle(Future.failedFuture(s.cause()));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54631938f08ba8f5686e4bd018e54485a2e94b97"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwOTcwOA==", "bodyText": "This won't work because of the generic AsyncResult type:\nresultHandler is of type Handler<AsyncResult<User>> (coming from the vert.x AuthProvider interface, whereas the DeviceCredentialsAuthProvider.authenticate method expects the more specific Handler<AsyncResult<DeviceUser>>.", "url": "https://github.com/eclipse/hono/pull/2199#discussion_r493509708", "createdAt": "2020-09-23T12:06:11Z", "author": {"login": "calohmn"}, "path": "service-base/src/main/java/org/eclipse/hono/service/auth/device/CredentialsApiAuthProvider.java", "diffHunk": "@@ -206,47 +203,19 @@ public final void authenticate(\n \n     @Override\n     public final void authenticate(final JsonObject authInfo, final Handler<AsyncResult<User>> resultHandler) {\n-        final ExecutionContext executionContext = new GenericExecutionContext(\n-                TracingHelper.extractSpanContext(tracer, authInfo));\n-        authenticate(authInfo, executionContext, s -> {\n-            if (s.succeeded()) {\n-                resultHandler.handle(Future.succeededFuture(s.result()));\n-            } else {\n-                resultHandler.handle(Future.failedFuture(s.cause()));\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public final void authenticate(\n-            final JsonObject authInfo,\n-            final ExecutionContext executionContext,\n-            final Handler<AsyncResult<DeviceUser>> resultHandler) {\n \n-        Objects.requireNonNull(authInfo);\n-        Objects.requireNonNull(executionContext);\n-        Objects.requireNonNull(resultHandler);\n-\n-        final T credentials = getCredentials(authInfo);\n+        final T credentials = getCredentials(Objects.requireNonNull(authInfo));\n         if (credentials == null) {\n             resultHandler.handle(Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_UNAUTHORIZED, \"malformed credentials\")));\n         } else {\n-            authenticate(credentials, executionContext, resultHandler);\n+            authenticate(credentials, TracingHelper.extractSpanContext(tracer, authInfo), s -> {\n+                if (s.succeeded()) {\n+                    resultHandler.handle(Future.succeededFuture(s.result()));\n+                } else {\n+                    resultHandler.handle(Future.failedFuture(s.cause()));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ3MTIyOA=="}, "originalCommit": {"oid": "54631938f08ba8f5686e4bd018e54485a2e94b97"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzNTc5OQ==", "bodyText": "I always get this wrong ;-)", "url": "https://github.com/eclipse/hono/pull/2199#discussion_r493535799", "createdAt": "2020-09-23T12:34:56Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/auth/device/CredentialsApiAuthProvider.java", "diffHunk": "@@ -206,47 +203,19 @@ public final void authenticate(\n \n     @Override\n     public final void authenticate(final JsonObject authInfo, final Handler<AsyncResult<User>> resultHandler) {\n-        final ExecutionContext executionContext = new GenericExecutionContext(\n-                TracingHelper.extractSpanContext(tracer, authInfo));\n-        authenticate(authInfo, executionContext, s -> {\n-            if (s.succeeded()) {\n-                resultHandler.handle(Future.succeededFuture(s.result()));\n-            } else {\n-                resultHandler.handle(Future.failedFuture(s.cause()));\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public final void authenticate(\n-            final JsonObject authInfo,\n-            final ExecutionContext executionContext,\n-            final Handler<AsyncResult<DeviceUser>> resultHandler) {\n \n-        Objects.requireNonNull(authInfo);\n-        Objects.requireNonNull(executionContext);\n-        Objects.requireNonNull(resultHandler);\n-\n-        final T credentials = getCredentials(authInfo);\n+        final T credentials = getCredentials(Objects.requireNonNull(authInfo));\n         if (credentials == null) {\n             resultHandler.handle(Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_UNAUTHORIZED, \"malformed credentials\")));\n         } else {\n-            authenticate(credentials, executionContext, resultHandler);\n+            authenticate(credentials, TracingHelper.extractSpanContext(tracer, authInfo), s -> {\n+                if (s.succeeded()) {\n+                    resultHandler.handle(Future.succeededFuture(s.result()));\n+                } else {\n+                    resultHandler.handle(Future.failedFuture(s.cause()));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ3MTIyOA=="}, "originalCommit": {"oid": "54631938f08ba8f5686e4bd018e54485a2e94b97"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3072, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}