{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDQxMTk5", "number": 1789, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowODowNFrODjA9Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowODozMlrODjA9zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQyNDAyOnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowODowNFrOFulbyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowODowNFrOFulbyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5MjEzNw==", "bodyText": "I would leave span related methods in the separate class, as they are used outside of these endpoints.", "url": "https://github.com/eclipse/hono/pull/1789#discussion_r384392137", "createdAt": "2020-02-26T10:08:04Z", "author": {"login": "dejanb"}, "path": "service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java", "diffHunk": "@@ -322,4 +294,146 @@ protected final CorsHandler createCorsHandler(final String allowedOrigin, final\n                 .allowedHeader(HttpHeaders.IF_MATCH.toString())\n                 .exposedHeader(HttpHeaders.ETAG.toString());\n     }\n+\n+    /**\n+     * Creates a new <em>OpenTracing</em> span for tracing the execution of a service operation.\n+     *\n+     * @param operationName The operation name that the span should be created for.\n+     * @param spanContext Existing span context.\n+     * @param tracer the Tracer instance.\n+     * @param className The class name to insert in the Span.\n+     * @return The new {@code Span}.\n+     * @throws NullPointerException if operationName is {@code null}.\n+     */\n+    public static final Span newChildSpan(final String operationName, final SpanContext spanContext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73041868744bb7aaf86d0dc61ecfe2ebec3d704b"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQyNTc0OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowODozMlrOFulc1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDowODozMlrOFulc1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5MjQwNg==", "bodyText": "These methods should stay here, but as regular protected methods.", "url": "https://github.com/eclipse/hono/pull/1789#discussion_r384392406", "createdAt": "2020-02-26T10:08:32Z", "author": {"login": "dejanb"}, "path": "service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java", "diffHunk": "@@ -322,4 +294,146 @@ protected final CorsHandler createCorsHandler(final String allowedOrigin, final\n                 .allowedHeader(HttpHeaders.IF_MATCH.toString())\n                 .exposedHeader(HttpHeaders.ETAG.toString());\n     }\n+\n+    /**\n+     * Creates a new <em>OpenTracing</em> span for tracing the execution of a service operation.\n+     *\n+     * @param operationName The operation name that the span should be created for.\n+     * @param spanContext Existing span context.\n+     * @param tracer the Tracer instance.\n+     * @param className The class name to insert in the Span.\n+     * @return The new {@code Span}.\n+     * @throws NullPointerException if operationName is {@code null}.\n+     */\n+    public static final Span newChildSpan(final String operationName, final SpanContext spanContext,\n+            final Tracer tracer, final String className) {\n+        return newChildSpan(operationName, spanContext, tracer, null, null, className);\n+\n+    }\n+\n+    /**\n+     * Creates a new <em>OpenTracing</em> span for tracing the execution of a service operation.\n+     * <p>\n+     * The returned span will already contain tags for the given tenant and device ids (if either is not {@code null}).\n+     *\n+     * @param operationName The operation name that the span should be created for.\n+     * @param spanContext Existing span context.\n+     * @param tracer the Tracer instance.\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param className The class name to insert in the Span.\n+     * @return The new {@code Span}.\n+     * @throws NullPointerException if operationName is {@code null}.\n+     */\n+    public static final Span newChildSpan(final String operationName, final SpanContext spanContext,\n+            final Tracer tracer, final String tenantId, final String deviceId, final String className) {\n+        Objects.requireNonNull(operationName);\n+        // we set the component tag to the class name because we have no access to\n+        // the name of the enclosing component we are running in\n+        final Tracer.SpanBuilder spanBuilder = TracingHelper.buildChildSpan(tracer, spanContext, operationName)\n+                .ignoreActiveSpan()\n+                .withTag(Tags.COMPONENT.getKey(), className)\n+                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_SERVER);\n+        if (tenantId != null) {\n+            spanBuilder.withTag(MessageHelper.APP_PROPERTY_TENANT_ID, tenantId);\n+        }\n+        if (deviceId != null) {\n+            spanBuilder.withTag(MessageHelper.APP_PROPERTY_DEVICE_ID, deviceId);\n+        }\n+        return spanBuilder.start();\n+    }\n+\n+    /**\n+     * Creates a new <em>OpenTracing</em> span for tracing the execution of a tenant service operation.\n+     * <p>\n+     * The returned span will already contain tags for the given tenant id (if not {@code null}).\n+     *\n+     * @param operationName The operation name that the span should be created for.\n+     * @param spanContext Existing span context.\n+     * @param tracer the Tracer instance.\n+     * @param tenantId The tenant id.\n+     * @param className The class name to insert in the Span.\n+     * @return The new {@code Span}.\n+     * @throws NullPointerException if operationName is {@code null}.\n+     */\n+    public static final Span newChildSpan(final String operationName, final SpanContext spanContext,\n+            final Tracer tracer,\n+            final String tenantId, final String className) {\n+        return newChildSpan(operationName, spanContext, tracer, tenantId, null, className);\n+    }\n+\n+    /**\n+     * Writes a response based on generic result.\n+     * <p>\n+     * The behavior is as follows:\n+     * <ol>\n+     * <li>Set the status code on the response.</li>\n+     * <li>If the status code represents an error condition (i.e. the code is &gt;= 400),\n+     * then the JSON object passed in the result is written to the response body.</li>\n+     * <li>If the result is created (the code is = 201), the JSON object is written to the response body and the given custom handler is\n+     * invoked (if not {@code null}).</li>\n+     * <li>Sets the status of the tracing span and finishes it.</li>\n+     * <li>Ends a response.</li>\n+     * </ol>\n+     *\n+     * @param ctx The routing context of the request.\n+     * @param result The generic result of the operation.\n+     * @param customHandler An (optional) handler for post processing successful HTTP response, e.g. to set any additional HTTP\n+     *                      headers. The handler <em>must not</em> write to response body. May be {@code null}.\n+     * @param span The active OpenTracing span for this operation. The status of the response is logged and span is finished.\n+     */\n+    public static final void writeResponse(final RoutingContext ctx, final Result<?> result, final Handler<HttpServerResponse> customHandler, final Span span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73041868744bb7aaf86d0dc61ecfe2ebec3d704b"}, "originalPosition": 170}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3450, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}