{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0ODI4MDg1", "number": 2223, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjowNjoyNlrOEo_8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozOTowMFrOEpArYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDI2MTE3OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjowNjoyNlrOHaaUEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjowNjoyNlrOHaaUEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1NjE0Ng==", "bodyText": "final?", "url": "https://github.com/eclipse/hono/pull/2223#discussion_r497456146", "createdAt": "2020-09-30T12:06:26Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -39,21 +37,6 @@\n @JsonTypeIdResolver(CredentialTypeResolver.class)\n public abstract class CommonCredential {\n \n-    /**\n-     * A predicate for matching authentication identifiers against the\n-     * {@linkplain CredentialsConstants#PATTERN_AUTH_ID_VALUE default pattern}.\n-     */\n-    protected static final Predicate<String> AUTH_ID_VALIDATOR_DEFAULT = authId -> {\n-        final Matcher matcher = CredentialsConstants.PATTERN_AUTH_ID_VALUE.matcher(authId);\n-        if (matcher.matches()) {\n-            return true;\n-        } else {\n-            throw new IllegalArgumentException(\"authentication identifier must match pattern \"\n-                    + CredentialsConstants.PATTERN_AUTH_ID_VALUE.pattern());\n-        }\n-    };\n-\n-    @JsonProperty(value = RegistryManagementConstants.FIELD_AUTH_ID)\n     private String authId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4a6a85828b37d5fabe3aff85f178cb1f4b6860"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDI5MjQ2OnYy", "diffSide": "LEFT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjoxNToyNVrOHaanZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzozMjozNFrOHaduPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ2MTA5NA==", "bodyText": "Now that is validator isn't used as default anymore and is only used for a PasswordCredential, I think the CredentialsConstants.PATTERN_AUTH_ID_VALUE constant should be moved to the PasswordCredential class as well, or the javadoc there should be adapted to not give the impression that this pattern is used for all auth-id values in all kinds of credentials.", "url": "https://github.com/eclipse/hono/pull/2223#discussion_r497461094", "createdAt": "2020-09-30T12:15:25Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -39,21 +37,6 @@\n @JsonTypeIdResolver(CredentialTypeResolver.class)\n public abstract class CommonCredential {\n \n-    /**\n-     * A predicate for matching authentication identifiers against the\n-     * {@linkplain CredentialsConstants#PATTERN_AUTH_ID_VALUE default pattern}.\n-     */\n-    protected static final Predicate<String> AUTH_ID_VALIDATOR_DEFAULT = authId -> {\n-        final Matcher matcher = CredentialsConstants.PATTERN_AUTH_ID_VALUE.matcher(authId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4a6a85828b37d5fabe3aff85f178cb1f4b6860"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxMTk5OA==", "bodyText": "I agree. I will move the constant to the PasswordCredential class.", "url": "https://github.com/eclipse/hono/pull/2223#discussion_r497511998", "createdAt": "2020-09-30T13:32:34Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -39,21 +37,6 @@\n @JsonTypeIdResolver(CredentialTypeResolver.class)\n public abstract class CommonCredential {\n \n-    /**\n-     * A predicate for matching authentication identifiers against the\n-     * {@linkplain CredentialsConstants#PATTERN_AUTH_ID_VALUE default pattern}.\n-     */\n-    protected static final Predicate<String> AUTH_ID_VALIDATOR_DEFAULT = authId -> {\n-        final Matcher matcher = CredentialsConstants.PATTERN_AUTH_ID_VALUE.matcher(authId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ2MTA5NA=="}, "originalCommit": {"oid": "7f4a6a85828b37d5fabe3aff85f178cb1f4b6860"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDMwMTEzOnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjoxNzo0N1rOHaasqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjoxNzo0N1rOHaasqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ2MjQ0Mw==", "bodyText": "With this change the javadoc mentioning the IllegalArgumentException in the PskCredential and GenericCredential constructors isn't correct anymore.", "url": "https://github.com/eclipse/hono/pull/2223#discussion_r497462443", "createdAt": "2020-09-30T12:17:47Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -110,23 +93,15 @@ protected CommonCredential(final String authId) {\n      * @return The predicate.\n      */\n     protected Predicate<String> getAuthIdValidator() {\n-        return AUTH_ID_VALIDATOR_DEFAULT;\n+        return s -> true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4a6a85828b37d5fabe3aff85f178cb1f4b6860"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDMyMTM4OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/credentials/CredentialsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjoyMzoyNVrOHaa5VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjoyMzoyNVrOHaa5VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ2NTY4NA==", "bodyText": "PATTERN_AUTH_ID_VALUE not generally used anymore, so I would suggest:\nInstead of \"to match the ...\", using something like \"to pass the corresponding authIdValidator check\".", "url": "https://github.com/eclipse/hono/pull/2223#discussion_r497465684", "createdAt": "2020-09-30T12:23:25Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/credentials/CredentialsTest.java", "diffHunk": "@@ -497,39 +492,38 @@ public void testMergeSucceedsForMatchingSecretIds() {\n     /**\n      * Verifies that a credentials object requires the authentication identifier to match\n      * the {@linkplain org.eclipse.hono.util.CredentialsConstants#PATTERN_AUTH_ID_VALUE auth id regex}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4a6a85828b37d5fabe3aff85f178cb1f4b6860"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDM1NDg2OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/credentials/CredentialsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozMjoxM1rOHabN9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozMjoxM1rOHabN9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3MDk2Ng==", "bodyText": "\"PSK credential\" not used in this test.", "url": "https://github.com/eclipse/hono/pull/2223#discussion_r497470966", "createdAt": "2020-09-30T12:32:13Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/credentials/CredentialsTest.java", "diffHunk": "@@ -497,39 +492,38 @@ public void testMergeSucceedsForMatchingSecretIds() {\n     /**\n      * Verifies that a credentials object requires the authentication identifier to match\n      * the {@linkplain org.eclipse.hono.util.CredentialsConstants#PATTERN_AUTH_ID_VALUE auth id regex}.\n-     *\n-     * @param illegalAuthId An auth-id that does not comply with the pattern.\n      */\n-    @MethodSource(\"illegalAuthIds\")\n-    @ParameterizedTest\n-    public void testInstantiationFailsForIllegalAuthId(final String illegalAuthId) {\n-        assertThatThrownBy(() -> new GenericCredential(\"custom\", illegalAuthId, List.of(new GenericSecret())))\n-            .isInstanceOf(IllegalArgumentException.class);\n-        assertThatThrownBy(() -> new PasswordCredential(illegalAuthId, List.of(new PasswordSecret())))\n-            .isInstanceOf(IllegalArgumentException.class);\n-        assertThatThrownBy(() -> new PskCredential(illegalAuthId, List.of(new PskSecret())))\n-            .isInstanceOf(IllegalArgumentException.class);\n-        assertThatThrownBy(() -> new X509CertificateCredential(illegalAuthId, List.of(new X509CertificateSecret())))\n+    @Test\n+    public void testInstantiationFailsForIllegalAuthId() {\n+\n+        illegalAuthIds().forEach(authId -> {\n+            assertThatThrownBy(() -> new PasswordCredential(authId, List.of(new PasswordSecret())))\n+                .isInstanceOf(IllegalArgumentException.class);\n+        });\n+\n+        assertThatThrownBy(() -> new X509CertificateCredential(\"not-a-subject-DN\", List.of(new X509CertificateSecret())))\n             .isInstanceOf(IllegalArgumentException.class);\n     }\n \n     /**\n      * Verifies that decoding of a JSON object to a PSK credential\n      * fails if the authentication identifier does not match the auth ID regex.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4a6a85828b37d5fabe3aff85f178cb1f4b6860"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDM3MTUxOnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/credentials/CredentialsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozNjozOVrOHabYvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozNjozOVrOHabYvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3MzcyNQ==", "bodyText": "The IllegalArgumentException thrown here doesn't seem to come from the auth-id validation (\"Missing required creator property 'secrets' (index 1)\").\nSame for the code below.", "url": "https://github.com/eclipse/hono/pull/2223#discussion_r497473725", "createdAt": "2020-09-30T12:36:39Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/credentials/CredentialsTest.java", "diffHunk": "@@ -497,39 +492,38 @@ public void testMergeSucceedsForMatchingSecretIds() {\n     /**\n      * Verifies that a credentials object requires the authentication identifier to match\n      * the {@linkplain org.eclipse.hono.util.CredentialsConstants#PATTERN_AUTH_ID_VALUE auth id regex}.\n-     *\n-     * @param illegalAuthId An auth-id that does not comply with the pattern.\n      */\n-    @MethodSource(\"illegalAuthIds\")\n-    @ParameterizedTest\n-    public void testInstantiationFailsForIllegalAuthId(final String illegalAuthId) {\n-        assertThatThrownBy(() -> new GenericCredential(\"custom\", illegalAuthId, List.of(new GenericSecret())))\n-            .isInstanceOf(IllegalArgumentException.class);\n-        assertThatThrownBy(() -> new PasswordCredential(illegalAuthId, List.of(new PasswordSecret())))\n-            .isInstanceOf(IllegalArgumentException.class);\n-        assertThatThrownBy(() -> new PskCredential(illegalAuthId, List.of(new PskSecret())))\n-            .isInstanceOf(IllegalArgumentException.class);\n-        assertThatThrownBy(() -> new X509CertificateCredential(illegalAuthId, List.of(new X509CertificateSecret())))\n+    @Test\n+    public void testInstantiationFailsForIllegalAuthId() {\n+\n+        illegalAuthIds().forEach(authId -> {\n+            assertThatThrownBy(() -> new PasswordCredential(authId, List.of(new PasswordSecret())))\n+                .isInstanceOf(IllegalArgumentException.class);\n+        });\n+\n+        assertThatThrownBy(() -> new X509CertificateCredential(\"not-a-subject-DN\", List.of(new X509CertificateSecret())))\n             .isInstanceOf(IllegalArgumentException.class);\n     }\n \n     /**\n      * Verifies that decoding of a JSON object to a PSK credential\n      * fails if the authentication identifier does not match the auth ID regex.\n-     *\n-     * @param illegalAuthId An auth-id that does not comply with the pattern.\n      */\n-    @MethodSource(\"illegalAuthIds\")\n-    @ParameterizedTest\n-    public void testDecodeFailsForIllegalAuthId(final String illegalAuthId) {\n+    @Test\n+    public void testDecodeFailsForIllegalAuthId() {\n \n-        Arrays.stream(CREDENTIAL_TYPES).forEach(type -> {\n+        illegalAuthIds().forEach(illegalAuthId -> {\n             final JsonObject jsonCredential = new JsonObject()\n-                    .put(RegistryManagementConstants.FIELD_TYPE, type)\n+                    .put(RegistryManagementConstants.FIELD_TYPE, RegistryManagementConstants.SECRETS_TYPE_HASHED_PASSWORD)\n                     .put(RegistryManagementConstants.FIELD_AUTH_ID, illegalAuthId);\n             assertThatThrownBy(() -> jsonCredential.mapTo(CommonCredential.class))\n                 .isInstanceOf(IllegalArgumentException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4a6a85828b37d5fabe3aff85f178cb1f4b6860"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDM4MTc4OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/credentials/CredentialsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozOTowMFrOHabfDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozOTowMFrOHabfDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3NTM0MQ==", "bodyText": "Maybe rename to illegalPasswordCredentialAuthIds to be more clear here.", "url": "https://github.com/eclipse/hono/pull/2223#discussion_r497475341", "createdAt": "2020-09-30T12:39:00Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/credentials/CredentialsTest.java", "diffHunk": "@@ -48,15 +44,14 @@\n  */\n public class CredentialsTest {\n \n-    private static final String[] CREDENTIAL_TYPES = { CredentialsConstants.SECRETS_TYPE_X509_CERT, CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD, CredentialsConstants.SECRETS_TYPE_PRESHARED_KEY, \"custom\" };\n     private static final String NOT_BEFORE_STRING = \"2020-08-11T11:38:00Z\";\n     private static final Instant NOT_BEFORE = Instant.parse(NOT_BEFORE_STRING);\n     private static final String NOT_AFTER_STRING = \"2031-09-11T11:38:00Z\";\n     private static final Instant NOT_AFTER = Instant.parse(NOT_AFTER_STRING);\n     private static final String SECRET_COMMENT = \"secret comment\";\n \n     static Stream<String> illegalAuthIds() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4a6a85828b37d5fabe3aff85f178cb1f4b6860"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3089, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}