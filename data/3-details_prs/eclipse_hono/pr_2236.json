{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5Nzc5ODI1", "number": 2236, "title": "[#2230] Support limiting resource usage in hono-client", "bodyText": "The client now supports setting\n\nthe max frame size that should be used for outgoing connections and\nthe max-message-size to be used for (receiver) links created by the\nclient and\nthe incoming window size of sessions created by the client.", "createdAt": "2020-10-08T09:19:46Z", "url": "https://github.com/eclipse/hono/pull/2236", "merged": true, "mergeCommit": {"oid": "6223c4147036dd7a52cbc53219ae8af602cd4e1d"}, "closed": true, "closedAt": "2020-10-14T09:35:40Z", "author": {"login": "sophokles73"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQzlangFqTUwNTQ3NjE3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSZxusgH2gAyNDk5Nzc5ODI1OjA1ZWRmY2U1MmY0ODhjMzMwMTRkZjU2NzAyMDI3OTUxNTMxNmVhZTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NDc2MTcx", "url": "https://github.com/eclipse/hono/pull/2236#pullrequestreview-505476171", "createdAt": "2020-10-09T08:42:09Z", "commit": {"oid": "f15438df774eb9a5d84bddeb190c56ea79531c16"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo0MjowOVrOHfAoJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDoyNDo0MFrOHfECdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI3ODE4MQ==", "bodyText": "Usage of \"client\" is a bit confusing here compared to the descriptions of the other properties - I guess it should be \"that the protocol adapter should accept\".\nBetter use AMQP frame singular - no cumulative size meant here.", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502278181", "createdAt": "2020-10-09T08:42:09Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/admin-guide/amqp-adapter-config.md", "diffHunk": "@@ -36,7 +36,7 @@ The following table provides an overview of the configuration variables and corr\n | `HONO_AMQP_KEY_STORE_PATH`<br>`--hono.amqp.keyStorePath` | no | - | The absolute path to the Java key store containing the private key and certificate that the protocol adapter should use for authenticating to clients. Either this option or the `HONO_AMQP_KEY_PATH` and `HONO_AMQP_CERT_PATH` options need to be set in order to enable TLS secured connections with clients. The key store format can be either `JKS` or `PKCS12` indicated by a `.jks` or `.p12` file suffix respectively. |\n | `HONO_AMQP_SNI`<br>`--hono.amqp.sni` | no | `false` | Set whether the server supports Server Name Indication. By default, the server will not support SNI and the option is `false`. However, if set to `true` then the key store format, `HONO_AMQP_KEY_STORE_PATH`,  should be either `JKS` or `PKCS12` indicated by a `.jks` or `.p12` file suffix respectively. |\n | `HONO_AMQP_MAX_CONNECTIONS`<br>`--hono.amqp.maxConnections` | no | `0` | The maximum number of concurrent connections that the protocol adapter should accept. If not set (or set to `0`), the protocol adapter determines a reasonable value based on the available resources like memory and CPU. |\n-| `HONO_AMQP_MAX_FRAME_SIZE`<br>`--hono.amqp.maxFrameSize` | no | `16384` | The maximum number of bytes that can be sent in an AMQP message delivery over the connection with a device. When a client sends an AMQP frame of larger size, the connection is closed. |\n+| `HONO_AMQP_MAX_FRAME_SIZE`<br>`--hono.amqp.maxFrameSize` | no | `16384` | The maximum size (in bytes) of AMQP frames that the client should accept from the device. When a device sends a bigger frame, the connection will be closed. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15438df774eb9a5d84bddeb190c56ea79531c16"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4MDE0OA==", "bodyText": "\"AMQP frames\" - singular instead?", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502280148", "createdAt": "2020-10-09T08:45:28Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/admin-guide/hono-client-configuration.md", "diffHunk": "@@ -39,6 +39,10 @@ delimiter,  e.g. the variable prefix `HONO_CREDENTIALS` corresponds to the comma\n | `${PREFIX}_KEYSTOREPASSWORD`<br>`--${prefix}.keyStorePassword` | no | - | The password required to read the contents of the key store. |\n | `${PREFIX}_KEYSTOREPATH`<br>`--${prefix}.keyStorePath` | no | - | The absolute path to the Java key store containing the private key and certificate that the client should use for authenticating to the server. Either this variable or the `${PREFIX}_KEYPATH` and `${PREFIX}_CERTPATH` variables need to be set in order to enable *SASL External* based authentication to the server. The key store format can be either `JKS` or `PKCS12` indicated by a `.jks` or `.p12` file suffix respectively. |\n | `${PREFIX}_LINKESTABLISMENTTIMEOUT`<br>`--${prefix}.linkEstablishmentTimeout` | no | `1000` | The maximum amount of time (milliseconds) that the client should wait for the service's *attach* frame during link establishment. This property can be used to tune the time period to wait according to the network latency involved with the communication link between the client and the service. |\n+| `${PREFIX}_MAXFRAMESIZE`<br>`--${prefix}.maxFrameSize` | no | `-1` | The maximum size (in bytes) of AMQP frames that the client should accept from the peer. When a peer sends a bigger frame, the connection will be closed. The default value of `-1` indicates that no limit is to be imposed. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15438df774eb9a5d84bddeb190c56ea79531c16"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4MDY5NQ==", "bodyText": "\"The maximum size of messages\" - singular instead?", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502280695", "createdAt": "2020-10-09T08:46:19Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/admin-guide/hono-client-configuration.md", "diffHunk": "@@ -39,6 +39,10 @@ delimiter,  e.g. the variable prefix `HONO_CREDENTIALS` corresponds to the comma\n | `${PREFIX}_KEYSTOREPASSWORD`<br>`--${prefix}.keyStorePassword` | no | - | The password required to read the contents of the key store. |\n | `${PREFIX}_KEYSTOREPATH`<br>`--${prefix}.keyStorePath` | no | - | The absolute path to the Java key store containing the private key and certificate that the client should use for authenticating to the server. Either this variable or the `${PREFIX}_KEYPATH` and `${PREFIX}_CERTPATH` variables need to be set in order to enable *SASL External* based authentication to the server. The key store format can be either `JKS` or `PKCS12` indicated by a `.jks` or `.p12` file suffix respectively. |\n | `${PREFIX}_LINKESTABLISMENTTIMEOUT`<br>`--${prefix}.linkEstablishmentTimeout` | no | `1000` | The maximum amount of time (milliseconds) that the client should wait for the service's *attach* frame during link establishment. This property can be used to tune the time period to wait according to the network latency involved with the communication link between the client and the service. |\n+| `${PREFIX}_MAXFRAMESIZE`<br>`--${prefix}.maxFrameSize` | no | `-1` | The maximum size (in bytes) of AMQP frames that the client should accept from the peer. When a peer sends a bigger frame, the connection will be closed. The default value of `-1` indicates that no limit is to be imposed. |\n+| `${PREFIX}_MAXMESSAGESIZE`<br>`--${prefix}.maxMessageSize` | no | `-1` | The maximum size of messages (in bytes) that the client should accept from a peer. The default value of `-1` indicates that messages of any size should be accepted. |\n+| `${PREFIX}_MINMESSAGESIZE`<br>`--${prefix}.minMessageSize` | no | `0` | The minimum size of messages (in bytes) that a peer is required to accept from the client. The default value of `0` indicates that no minimum size is required. (Sender) link establishment will fail, if the *max-message-size* conveyed by the peer in its *attach* frame is smaller than this property's value. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15438df774eb9a5d84bddeb190c56ea79531c16"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI5NjY3NA==", "bodyText": "Since the AMQP spec associates 0 with an unlimited size and requires a ulong, I think MAX_MESSAGE_SIZE_UNLIMITED should be 0 instead of   -1 (otherwise the attach frame would contain a value of 18446744073709551615 here, I guess).\nWith that, the condition above can be simplified to size < 0 and then the existing exception text also takes the unlimited case into account.", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502296674", "createdAt": "2020-10-09T09:14:18Z", "author": {"login": "calohmn"}, "path": "core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java", "diffHunk": "@@ -575,4 +603,140 @@ public final Pattern getAddressRewritePattern() {\n     public final String getAddressRewriteReplacement() {\n         return addressRewriteReplacement;\n     }\n+\n+    /**\n+     * Gets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n+     * <p>\n+     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * <p>\n+     * The value of this property will be used by the client during sender link establishment.\n+     * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n+     * frame that is smaller than the configured minimum message size.\n+     *\n+     * @return The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     */\n+    public final long getMinMessageSize() {\n+        return minMessageSize;\n+    }\n+\n+    /**\n+     * Sets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n+     * <p>\n+     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * <p>\n+     * The value of this property will be used by the client during sender link establishment.\n+     * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n+     * frame that is smaller than the configured minimum message size.\n+     *\n+     * @param size The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     * @throws IllegalArgumentException if size is &lt; 0.\n+     */\n+    public final void setMinMessageSize(final long size) {\n+        if (size < MIN_MESSAGE_SIZE_NONE) {\n+            throw new IllegalArgumentException(\"min message size must be >= 0\");\n+        }\n+        this.minMessageSize = size;\n+    }\n+\n+\n+    /**\n+     * Gets the maximum size of an AMQP 1.0 message that this client accepts from a peer.\n+     * <p>\n+     * The default value of this property is {@value #MAX_MESSAGE_SIZE_UNLIMITED}.\n+     *\n+     * @return The message size in bytes or {@value #MAX_MESSAGE_SIZE_UNLIMITED}, indicating messages of any size.\n+     */\n+    public final long getMaxMessageSize() {\n+        return maxMessageSize;\n+    }\n+\n+    /**\n+     * Sets the maximum size of an AMQP 1.0 message that this client should accept from a peer.\n+     * <p>\n+     * The default value of this property is {@value #MAX_MESSAGE_SIZE_UNLIMITED}.\n+     *\n+     * @param size The message size in bytes or {@value #MAX_MESSAGE_SIZE_UNLIMITED}, indicating messages of any size.\n+     * @throws IllegalArgumentException if size is &lt; 0 and not {@value #MAX_MESSAGE_SIZE_UNLIMITED}.\n+     */\n+    public final void setMaxMessageSize(final long size) {\n+        if (size != MAX_MESSAGE_SIZE_UNLIMITED && size < 0) {\n+            throw new IllegalArgumentException(\"max-message-size must be >= 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15438df774eb9a5d84bddeb190c56ea79531c16"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMDU0MA==", "bodyText": "I think this property is quite confusing. Just guessing from the name, I would think that with such a setting, messages with a smaller size than configured here would be dropped/rejected. However, its actual semantics would be described by a name like getMinimumRequiredPeerMaxMessageSize() (which is maybe a bit long), right?\nAlso the fact that getMaxMessageSize only applies to a receiver whereas getMinMessageSize is only for a sender makes things somewhat hard to grasp at first sight.\nCan there be a better name? Or, do we really need this property?", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502330540", "createdAt": "2020-10-09T10:17:35Z", "author": {"login": "calohmn"}, "path": "core/src/main/java/org/eclipse/hono/config/ClientConfigProperties.java", "diffHunk": "@@ -575,4 +603,140 @@ public final Pattern getAddressRewritePattern() {\n     public final String getAddressRewriteReplacement() {\n         return addressRewriteReplacement;\n     }\n+\n+    /**\n+     * Gets the minimum size of AMQP 1.0 messages that this client requires a peer to accept.\n+     * <p>\n+     * The default value of this property is {@value #MIN_MESSAGE_SIZE_NONE}.\n+     * <p>\n+     * The value of this property will be used by the client during sender link establishment.\n+     * Link establishment will fail, if the peer indicates a max-message-size in its <em>attach</em>\n+     * frame that is smaller than the configured minimum message size.\n+     *\n+     * @return The message size in bytes or {@value #MIN_MESSAGE_SIZE_NONE}, indicating no minimum size at all.\n+     */\n+    public final long getMinMessageSize() {\n+        return minMessageSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15438df774eb9a5d84bddeb190c56ea79531c16"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzNDA2OA==", "bodyText": "I think throwing a ClientErrorException here means that we have to adapt the code for sending telemetry messages for example by catching this ClientErrorException and rethrowing it back as a ServerErrorException, so that the device gets a 5xx error here.", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r502334068", "createdAt": "2020-10-09T10:24:40Z", "author": {"login": "calohmn"}, "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -769,9 +832,20 @@ public void closeAndFree(\n \n                     } else if (HonoProtonHelper.isLinkEstablished(sender)) {\n \n-                        log.debug(\"sender open [target: {}, sendQueueFull: {}]\", targetAddress, sender.sendQueueFull());\n-                        // wait on credits a little time, if not already given\n-                        if (sender.getCredit() <= 0) {\n+                        log.debug(\"sender open [target: {}, sendQueueFull: {}, remote max-message-size: {}]\",\n+                                targetAddress, sender.sendQueueFull(), sender.getRemoteMaxMessageSize());\n+                        final long remoteMaxMessageSize = Optional.ofNullable(sender.getRemoteMaxMessageSize())\n+                                .map(UnsignedLong::longValue)\n+                                .orElse(0L);\n+                        if (remoteMaxMessageSize < clientConfigProperties.getMinMessageSize()) {\n+                            // peer won't accept our (biggest) messages\n+                            sender.close();\n+                            log.debug(\"peer does not support minimum message size [required: {}, supported: {}\",\n+                                    clientConfigProperties.getMinMessageSize(), remoteMaxMessageSize);\n+                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED,\n+                                    \"peer does not meet sender's minimum max-message-size requirement\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15438df774eb9a5d84bddeb190c56ea79531c16"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NTY5ODA4", "url": "https://github.com/eclipse/hono/pull/2236#pullrequestreview-506569808", "createdAt": "2020-10-12T12:22:32Z", "commit": {"oid": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoyMjozMlrOHf8bPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyODo1MlrOHf-w-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NzkxNg==", "bodyText": "I think the connection should be closed in this case here (that was also the old behaviour triggered via the close handler of the ProtonConnectionImpl default session).\nOr the session should be recreated - but probably better to close the connection here, so that connection and session get recreated on reconnect.", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503257916", "createdAt": "2020-10-12T12:22:32Z", "author": {"login": "calohmn"}, "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -707,6 +718,58 @@ public void closeAndFree(\n         }\n     }\n \n+    private Future<ProtonSession> createDefaultSession(final ProtonConnection connection) {\n+\n+        final Promise<ProtonSession> result = Promise.promise();\n+        if (connection == null) {\n+            result.fail(new NullPointerException(\"connection must not be null\"));\n+        } else {\n+            log.debug(\"trying to establish AMQP session with server [{}:{}, role: {}]\",\n+                    connectionFactory.getHost(),\n+                    connectionFactory.getPort(),\n+                    connectionFactory.getServerRole());\n+            final ProtonSession session = connection.createSession();\n+            session.openHandler(beginAttempt -> {\n+                if (beginAttempt.succeeded()) {\n+                    log.debug(\"successfully established AMQP session with server [{}:{}, role: {}]\",\n+                            connectionFactory.getHost(),\n+                            connectionFactory.getPort(),\n+                            connectionFactory.getServerRole());\n+                    result.complete(session);\n+                } else {\n+                    log.debug(\"failed to establish AMQP session with server [{}:{}, role: {}]\",\n+                            connectionFactory.getHost(),\n+                            connectionFactory.getPort(),\n+                            connectionFactory.getServerRole(),\n+                            beginAttempt.cause());\n+                    result.fail(new ClientErrorException(\n+                            HttpURLConnection.HTTP_BAD_REQUEST,\n+                            \"failed to establish AMQP session with peer\",\n+                            beginAttempt.cause()));\n+                }\n+            });\n+            session.closeHandler(remoteClose -> {\n+                final ErrorCondition error = session.getRemoteCondition();\n+                if (error == null) {\n+                    log.debug(\"server [{}:{}, role: {}] closed session\",\n+                            connectionFactory.getHost(),\n+                            connectionFactory.getPort(),\n+                            connectionFactory.getServerRole());\n+                } else {\n+                    log.debug(\"server [{}:{}, role: {}] closed session with error [condition: {}, description: {}]\",\n+                            connectionFactory.getHost(),\n+                            connectionFactory.getPort(),\n+                            connectionFactory.getServerRole(),\n+                            error.getCondition(),\n+                            error.getDescription());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2NDUyMg==", "bodyText": "This line should also be added to AmqpCliClient#connectToAdapter() FMPOV.", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503264522", "createdAt": "2020-10-12T12:34:59Z", "author": {"login": "calohmn"}, "path": "core/src/main/java/org/eclipse/hono/connection/impl/ConnectionFactoryImpl.java", "diffHunk": "@@ -403,6 +403,7 @@ private ProtonClientOptions createClientOptions() {\n         final ProtonClientOptions options = new ProtonClientOptions();\n         options.setConnectTimeout(config.getConnectTimeout());\n         options.setHeartbeat(config.getHeartbeatInterval());\n+        options.setMaxFrameSize(config.getMaxFrameSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTkxMQ==", "bodyText": "Instead of failing all reconnect attempts like this, close the connection and call reconnect in the onFailure case here instead?", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503279911", "createdAt": "2020-10-12T13:01:07Z", "author": {"login": "calohmn"}, "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -436,8 +441,14 @@ private void connect(\n                                             connectionFactory.getPort(),\n                                             connectionFactory.getServerRole(),\n                                             newConnection.getRemoteContainer());\n-                                    setConnection(newConnection);\n-                                    wrappedConnectionHandler.handle(Future.succeededFuture(this));\n+                                    createDefaultSession(newConnection)\n+                                        .onSuccess(newSession -> {\n+                                            setConnection(newConnection, newSession);\n+                                            wrappedConnectionHandler.handle(Future.succeededFuture(this));\n+                                        })\n+                                        .onFailure(t -> {\n+                                            wrappedConnectionHandler.handle(Future.failedFuture(t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4Nzc0Mg==", "bodyText": "I think in the condition here there is an added remoteMaxMessageSize > 0 missing.", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503287742", "createdAt": "2020-10-12T13:14:37Z", "author": {"login": "calohmn"}, "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -769,9 +832,20 @@ public void closeAndFree(\n \n                     } else if (HonoProtonHelper.isLinkEstablished(sender)) {\n \n-                        log.debug(\"sender open [target: {}, sendQueueFull: {}]\", targetAddress, sender.sendQueueFull());\n-                        // wait on credits a little time, if not already given\n-                        if (sender.getCredit() <= 0) {\n+                        log.debug(\"sender open [target: {}, sendQueueFull: {}, remote max-message-size: {}]\",\n+                                targetAddress, sender.sendQueueFull(), sender.getRemoteMaxMessageSize());\n+                        final long remoteMaxMessageSize = Optional.ofNullable(sender.getRemoteMaxMessageSize())\n+                                .map(UnsignedLong::longValue)\n+                                .orElse(0L);\n+                        if (remoteMaxMessageSize < clientConfigProperties.getMinMaxMessageSize()) {\n+                            // peer won't accept our (biggest) messages\n+                            sender.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5NjI0OA==", "bodyText": "Maybe include the remoteMaxMessageSize in the exception text so that it appears in the surrounding tracing span (if one exists) via the logged error message? (So that the application doesn't needed to be restarted if not run with DEBUG log level in order to find out about the actual advertised value.)", "url": "https://github.com/eclipse/hono/pull/2236#discussion_r503296248", "createdAt": "2020-10-12T13:28:52Z", "author": {"login": "calohmn"}, "path": "client/src/main/java/org/eclipse/hono/client/impl/HonoConnectionImpl.java", "diffHunk": "@@ -769,9 +832,20 @@ public void closeAndFree(\n \n                     } else if (HonoProtonHelper.isLinkEstablished(sender)) {\n \n-                        log.debug(\"sender open [target: {}, sendQueueFull: {}]\", targetAddress, sender.sendQueueFull());\n-                        // wait on credits a little time, if not already given\n-                        if (sender.getCredit() <= 0) {\n+                        log.debug(\"sender open [target: {}, sendQueueFull: {}, remote max-message-size: {}]\",\n+                                targetAddress, sender.sendQueueFull(), sender.getRemoteMaxMessageSize());\n+                        final long remoteMaxMessageSize = Optional.ofNullable(sender.getRemoteMaxMessageSize())\n+                                .map(UnsignedLong::longValue)\n+                                .orElse(0L);\n+                        if (remoteMaxMessageSize < clientConfigProperties.getMinMaxMessageSize()) {\n+                            // peer won't accept our (biggest) messages\n+                            sender.close();\n+                            log.debug(\"peer does not support minimum message size [required: {}, supported: {}\",\n+                                    clientConfigProperties.getMinMaxMessageSize(), remoteMaxMessageSize);\n+                            senderPromise.tryFail(new ClientErrorException(HttpURLConnection.HTTP_PRECON_FAILED,\n+                                    \"peer does not meet sender's minimum max-message-size requirement\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c96618bdac058047a16ca01ccdc3b3dc9ddd45"}, "originalPosition": 159}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb18778c9db321b2bf60984639277dcc133a5401", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/bb18778c9db321b2bf60984639277dcc133a5401", "committedDate": "2020-10-13T06:58:53Z", "message": "Improve handling of failure to establish session\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}, "afterCommit": {"oid": "b4bdea071062c09031b995b1bc04c4b11a440fa9", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/b4bdea071062c09031b995b1bc04c4b11a440fa9", "committedDate": "2020-10-13T07:04:09Z", "message": "Improve handling of failure to establish session\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a619d68bfdc23c545015116c6313f713f8c48b40", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/a619d68bfdc23c545015116c6313f713f8c48b40", "committedDate": "2020-10-14T07:46:22Z", "message": "[#2230] Support limiting resource usage in hono-client\n\nThe client now supports setting\n- the max frame size that should be used for outgoing connections and\n- the max-message-size to be used for (receiver) links created by the\nclient and\n- the incoming window size of sessions created by the client.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35eb6c394763ee60306449ec1e04b8154641307e", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/35eb6c394763ee60306449ec1e04b8154641307e", "committedDate": "2020-10-14T07:46:22Z", "message": "Improve documentation\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a43d983674bc2845375a753a044586bcb192a3a", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/4a43d983674bc2845375a753a044586bcb192a3a", "committedDate": "2020-10-14T07:46:23Z", "message": "Incorporate feedback\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4536afff60810d708be199c652fc9e6fa33e0e74", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/4536afff60810d708be199c652fc9e6fa33e0e74", "committedDate": "2020-10-14T07:46:23Z", "message": "Improve handling of failure to establish session\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2c6bb313886735a40b043449c94d3fa35fcc403", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/b2c6bb313886735a40b043449c94d3fa35fcc403", "committedDate": "2020-10-14T07:46:23Z", "message": "Register a session close handler only\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc045232518326461b30bf44427ab0acbe4aaa8f", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/bc045232518326461b30bf44427ab0acbe4aaa8f", "committedDate": "2020-10-14T07:05:54Z", "message": "Register a session close handler only\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}, "afterCommit": {"oid": "b2c6bb313886735a40b043449c94d3fa35fcc403", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/b2c6bb313886735a40b043449c94d3fa35fcc403", "committedDate": "2020-10-14T07:46:23Z", "message": "Register a session close handler only\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTQ3MjUw", "url": "https://github.com/eclipse/hono/pull/2236#pullrequestreview-508147250", "createdAt": "2020-10-14T09:11:51Z", "commit": {"oid": "b2c6bb313886735a40b043449c94d3fa35fcc403"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05edfce52f488c33014df567020279515316eae6", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/05edfce52f488c33014df567020279515316eae6", "committedDate": "2020-10-14T09:29:49Z", "message": "Add entry to release notes\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 605, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}