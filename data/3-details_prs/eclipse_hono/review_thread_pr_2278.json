{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzY0NTEx", "number": 2278, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyNzozN1rOE01MmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1MjowMlrOE08Asg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODMyOTg1OnYy", "diffSide": "RIGHT", "path": "test-utils/service-base-test-utils/src/main/java/org/eclipse/hono/service/test/ProtocolAdapterTestSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyNzozN1rOHsxPBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyNzozN1rOHsxPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNjA1NQ==", "bodyText": "The {@link RegistrationClient} ref in the javadoc of this method can't be resolved. I guess the sentence there should be changed anyway.", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516706055", "createdAt": "2020-11-03T14:27:37Z", "author": {"login": "calohmn"}, "path": "test-utils/service-base-test-utils/src/main/java/org/eclipse/hono/service/test/ProtocolAdapterTestSupport.java", "diffHunk": "@@ -179,24 +174,20 @@ protected void createClientFactories() {\n      */\n     protected void createClients() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2170f3ba1b90f09d263b494bd045c789bb0237a"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODMzOTM3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyOTozNlrOHsxU8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyOTozNlrOHsxU8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNzU2OQ==", "bodyText": "\"public\" modifier is redundant here.", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516707569", "createdAt": "2020-11-03T14:29:36Z", "author": {"login": "calohmn"}, "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "diffHunk": "@@ -45,6 +52,53 @@\n  */\n public interface CommandTargetMapper {\n \n+    /**\n+     * Access to collaborators that the mapper needs for doing its work.\n+     *\n+     */\n+    public interface CommandTargetMapperContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2170f3ba1b90f09d263b494bd045c789bb0237a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODM3MTQzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDozNjowMVrOHsxpJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDozNjowMVrOHsxpJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxMjc0Mg==", "bodyText": "Block could be made shorter, inlining result and converting to expression lambda.", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516712742", "createdAt": "2020-11-03T14:36:01Z", "author": {"login": "calohmn"}, "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "diffHunk": "@@ -57,16 +111,67 @@ static CommandTargetMapper create(final Tracer tracer) {\n     }\n \n     /**\n-     * Initializes the CommandTargetMapper with the given components.\n+     * Creates a mapper context for client factories.\n      *\n-     * @param registrationClientFactory The factory to create a registration client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @param deviceConnectionClientFactory The factory to create a device connection client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @param registrationClientFactory The factory for creating Device Registration service clients.\n+     * @param deviceConnectionClientFactory The factory for creating Device Connection service clients.\n+     * @return The mapper context.\n+     */\n+    static CommandTargetMapperContext createContext(\n+            RegistrationClientFactory registrationClientFactory,\n+            BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {\n+\n+        Objects.requireNonNull(registrationClientFactory);\n+        Objects.requireNonNull(deviceConnectionClientFactory);\n+\n+        return new CommandTargetMapperContext() {\n+\n+            @Override\n+            public Future<List<String>> getViaGateways(\n+                    final String tenant,\n+                    final String deviceId,\n+                    final SpanContext context) {\n+\n+                Objects.requireNonNull(tenant);\n+                Objects.requireNonNull(deviceId);\n+\n+                return registrationClientFactory.getOrCreateRegistrationClient(tenant)\n+                        .compose(client -> client.assertRegistration(deviceId, null, context))\n+                        .map(json -> Optional.ofNullable(json.getJsonArray(RegistrationConstants.FIELD_VIA))\n+                                .map(array -> {\n+                                    final List<String> result = array.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2170f3ba1b90f09d263b494bd045c789bb0237a"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODQxOTM3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo0NToxNFrOHsyHCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo0NToxNFrOHsyHCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMDM5NA==", "bodyText": "final parameters.\nIt looks like a Checkstyle bug to me, that the FinalParameters rule doesn't take static interface methods into account.", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516720394", "createdAt": "2020-11-03T14:45:14Z", "author": {"login": "calohmn"}, "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "diffHunk": "@@ -57,16 +111,67 @@ static CommandTargetMapper create(final Tracer tracer) {\n     }\n \n     /**\n-     * Initializes the CommandTargetMapper with the given components.\n+     * Creates a mapper context for client factories.\n      *\n-     * @param registrationClientFactory The factory to create a registration client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @param deviceConnectionClientFactory The factory to create a device connection client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @param registrationClientFactory The factory for creating Device Registration service clients.\n+     * @param deviceConnectionClientFactory The factory for creating Device Connection service clients.\n+     * @return The mapper context.\n+     */\n+    static CommandTargetMapperContext createContext(\n+            RegistrationClientFactory registrationClientFactory,\n+            BasicDeviceConnectionClientFactory deviceConnectionClientFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2170f3ba1b90f09d263b494bd045c789bb0237a"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODg3NzkxOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/eclipse/hono/client/impl/CommandTargetMapperImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjoyNTozM1rOHs2pzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjoyNTozM1rOHs2pzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5NDgzMA==", "bodyText": "The \"Error getting registration assertion\" log message only looks correct if one knows what getViaGateways is doing internally. So, \"Error getting 'via' gateways\" would be more obvious here.", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516794830", "createdAt": "2020-11-03T16:25:33Z", "author": {"login": "calohmn"}, "path": "client/src/main/java/org/eclipse/hono/client/impl/CommandTargetMapperImpl.java", "diffHunk": "@@ -85,19 +77,12 @@ public void initialize(final RegistrationClientFactory registrationClientFactory\n                 .withTag(TracingHelper.TAG_DEVICE_ID, deviceId)\n                 .start();\n \n-        return registrationClientFactory.getOrCreateRegistrationClient(tenantId)\n-                .compose(client -> client.assertRegistration(deviceId, null, span.context()))\n+        return mapperContext.getViaGateways(tenantId, deviceId, span.context())\n                 .recover(t -> {\n                     LOG.debug(\"Error getting registration assertion\", t);\n                     return Future.failedFuture(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a899e661cfad1ac959ba4d42903795dfd3a238"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTM2NTIzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODoyODo0MFrOHs7aZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODoyODo0MFrOHs7aZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3MjgwNg==", "bodyText": "Missing info in JavaDoc regarding null checks.", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516872806", "createdAt": "2020-11-03T18:28:40Z", "author": {"login": "kaniyan"}, "path": "client/src/main/java/org/eclipse/hono/client/CommandTargetMapper.java", "diffHunk": "@@ -57,16 +111,67 @@ static CommandTargetMapper create(final Tracer tracer) {\n     }\n \n     /**\n-     * Initializes the CommandTargetMapper with the given components.\n+     * Creates a mapper context for client factories.\n      *\n-     * @param registrationClientFactory The factory to create a registration client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @param deviceConnectionClientFactory The factory to create a device connection client instance. Note that no\n-     *            initialization of this factory will be done here, that is supposed to be done by the calling method.\n-     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @param registrationClientFactory The factory for creating Device Registration service clients.\n+     * @param deviceConnectionClientFactory The factory for creating Device Connection service clients.\n+     * @return The mapper context.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2170f3ba1b90f09d263b494bd045c789bb0237a"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQzMjczOnYy", "diffSide": "RIGHT", "path": "clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo0ODoxMFrOHs8DrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo0ODoxMFrOHs8DrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4MzM3Mg==", "bodyText": "cacheProvider is not being null checked. How about @throws NullPointerException if any of the parameters other than cacheProvider are {@code null}.?", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516883372", "createdAt": "2020-11-03T18:48:10Z", "author": {"login": "kaniyan"}, "path": "clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.adapter.client.registry.amqp;\n+\n+import java.net.HttpURLConnection;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.adapter.client.registry.DeviceRegistrationClient;\n+import org.eclipse.hono.cache.CacheProvider;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.RegistrationClient;\n+import org.eclipse.hono.client.SendMessageSampler;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.eclipse.hono.client.impl.CachingClientFactory;\n+import org.eclipse.hono.client.impl.RegistrationClientImpl;\n+import org.eclipse.hono.config.ProtocolAdapterProperties;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.RegistrationAssertion;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.eventbus.Message;\n+import io.vertx.core.json.DecodeException;\n+\n+\n+/**\n+ * A vertx-proton based client of Hono's Device Registration service.\n+ *\n+ */\n+public class ProtonBasedDeviceRegistrationClient extends AbstractRequestResponseClient<RegistrationResult>\n+        implements DeviceRegistrationClient {\n+\n+    private final CachingClientFactory<org.eclipse.hono.client.RegistrationClient> clientFactory;\n+\n+    /**\n+     * Creates a new client for a connection.\n+     *\n+     * @param connection The connection to the Device Registration service.\n+     * @param samplerFactory The factory for creating samplers for tracing AMQP messages being sent.\n+     * @param adapterConfig The protocol adapter's configuration properties.\n+     * @param cacheProvider The cache provider to use for creating a cache for service responses.\n+     * @throws NullPointerException if any of the parameters are {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2170f3ba1b90f09d263b494bd045c789bb0237a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTQ0NjI2OnYy", "diffSide": "RIGHT", "path": "clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1MjowMlrOHs8MHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODo1MjowMlrOHs8MHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4NTUzMw==", "bodyText": "How about RequestResponseClient::isOpen instead of c-> c.isOpen()?", "url": "https://github.com/eclipse/hono/pull/2278#discussion_r516885533", "createdAt": "2020-11-03T18:52:02Z", "author": {"login": "kaniyan"}, "path": "clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/registry/amqp/ProtonBasedDeviceRegistrationClient.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.adapter.client.registry.amqp;\n+\n+import java.net.HttpURLConnection;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.adapter.client.registry.DeviceRegistrationClient;\n+import org.eclipse.hono.cache.CacheProvider;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.RegistrationClient;\n+import org.eclipse.hono.client.SendMessageSampler;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.eclipse.hono.client.impl.CachingClientFactory;\n+import org.eclipse.hono.client.impl.RegistrationClientImpl;\n+import org.eclipse.hono.config.ProtocolAdapterProperties;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.RegistrationAssertion;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.eventbus.Message;\n+import io.vertx.core.json.DecodeException;\n+\n+\n+/**\n+ * A vertx-proton based client of Hono's Device Registration service.\n+ *\n+ */\n+public class ProtonBasedDeviceRegistrationClient extends AbstractRequestResponseClient<RegistrationResult>\n+        implements DeviceRegistrationClient {\n+\n+    private final CachingClientFactory<org.eclipse.hono.client.RegistrationClient> clientFactory;\n+\n+    /**\n+     * Creates a new client for a connection.\n+     *\n+     * @param connection The connection to the Device Registration service.\n+     * @param samplerFactory The factory for creating samplers for tracing AMQP messages being sent.\n+     * @param adapterConfig The protocol adapter's configuration properties.\n+     * @param cacheProvider The cache provider to use for creating a cache for service responses.\n+     * @throws NullPointerException if any of the parameters are {@code null}.\n+     */\n+    public ProtonBasedDeviceRegistrationClient(\n+            final HonoConnection connection,\n+            final SendMessageSampler.Factory samplerFactory,\n+            final ProtocolAdapterProperties adapterConfig,\n+            final CacheProvider cacheProvider) {\n+        super(connection, samplerFactory, adapterConfig, cacheProvider);\n+        this.clientFactory = new CachingClientFactory<>(connection.getVertx(), c -> c.isOpen());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2170f3ba1b90f09d263b494bd045c789bb0237a"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2852, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}