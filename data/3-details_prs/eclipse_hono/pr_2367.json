{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2ODQ5MzI3", "number": 2367, "title": "[#2341] Improve AMQP adapter user guide", "bodyText": "The user guide for the AMQP adapter was unclear about which properties\nare required/optional in messages uploaded by clients.", "createdAt": "2020-12-11T12:12:39Z", "url": "https://github.com/eclipse/hono/pull/2367", "merged": true, "mergeCommit": {"oid": "88c606ce329e109a628efa2aaa57e962a9bf8296"}, "closed": true, "closedAt": "2020-12-14T12:39:38Z", "author": {"login": "sophokles73"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlG261gH2gAyNTM2ODQ5MzI3OjczYWFlZDIxZDFkZmY5MTFmZGJlYjBhODQ4NmFjZDAyMWRkZjVlN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmFB3LgFqTU1MTMyNTU4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "73aaed21d1dff911fdbeb0a8486acd021ddf5e7b", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/73aaed21d1dff911fdbeb0a8486acd021ddf5e7b", "committedDate": "2020-12-11T12:11:51Z", "message": "[#2341] Improve AMQP adapter user guide\n\nThe user guide for the AMQP adapter was unclear about which properties\nare required/optional in messages uploaded by clients.\n\nFixes #2341\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMTU0ODgw", "url": "https://github.com/eclipse/hono/pull/2367#pullrequestreview-551154880", "createdAt": "2020-12-14T08:52:37Z", "commit": {"oid": "73aaed21d1dff911fdbeb0a8486acd021ddf5e7b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1MjozN1rOIFF3Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDowNzo0MFrOIFI-Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwOTg0Mg==", "bodyText": "It's not completely arbitrary here. An AmqpValue  body may only have a byte array or String value.", "url": "https://github.com/eclipse/hono/pull/2367#discussion_r542209842", "createdAt": "2020-12-14T08:52:37Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/user-guide/amqp-adapter.md", "diffHunk": "@@ -141,39 +140,45 @@ There are two JAR files in the hono/cli/target directory. The JAR to use for the\n \n ## Publishing Telemetry Data\n \n-The client indicates the delivery mode to use when uploading telemetry messages by means of the *settled* and *rcv-settle-mode* properties of the AMQP *transfer* frame(s) it uses for uploading the message. The AMQP adapter will accept messages using a delivery mode according to the following table:\n+The client indicates the delivery mode to use when uploading telemetry messages by means of the *settled* and\n+*rcv-settle-mode* properties of the AMQP *transfer* frame(s) it uses for uploading the message.\n+The AMQP adapter will accept messages using a delivery mode according to the following table:\n \n-| settled                | rcv-settle-mode        | Delivery semantics |\n-| :--------------------- | :--------------------- | :----------------- |\n-| `false`               | `first`               | The adapter will forward the message to the downstream AMQP 1.0 Messaging Network and will forward any AMQP *disposition* frame received from the AMQP 1.0 Messaging Network to the client *as is*. It is up to the client's discretion if and how it processes the disposition frame. The adapter will accept any re-delivered message. Sending *unsettled* messages allows for clients to implement either *AT LEAST ONCE* or *AT MOST ONCE* delivery semantics, depending on whether a client actually waits for and considers the disposition frames it receives from the adapter or not. This is the recommended mode for uploading telemetry data. |\n-| `true`                | `first`                | The adapter will acknowledge and settle any received message spontaneously before forwarding it to the downstream AMQP 1.0 Messaging Network. The adapter will ignore any AMQP *disposition* frames it receives from the AMQP 1.0 Messaging Network. Sending *pre-settled* messages allows for clients to implement *AT MOST ONCE* delivery semantics only. This is the fastest mode of delivery but has the drawback of less reliable end-to-end flow control and potential loss of messages without notice. |\n+| settled | rcv-settle-mode | Delivery semantics |\n+| :------ | :-------------- | :----------------- |\n+| `false` | `first`          | The adapter will forward the message to the downstream AMQP 1.0 Messaging Network and will forward any AMQP *disposition* frame received from the AMQP 1.0 Messaging Network to the client *as is*. It is up to the client's discretion if and how it processes the disposition frame. The adapter will accept any re-delivered message. Sending *unsettled* messages allows for clients to implement either *AT LEAST ONCE* or *AT MOST ONCE* delivery semantics, depending on whether a client actually waits for and considers the disposition frames it receives from the adapter or not. This is the recommended mode for uploading telemetry data. |\n+| `true`  | `first`          | The adapter will acknowledge and settle any received message spontaneously before forwarding it to the downstream AMQP 1.0 Messaging Network. The adapter will ignore any AMQP *disposition* frames it receives from the AMQP 1.0 Messaging Network. Sending *pre-settled* messages allows for clients to implement *AT MOST ONCE* delivery semantics only. This is the fastest mode of delivery but has the drawback of less reliable end-to-end flow control and potential loss of messages without notice. |\n \n All other combinations are not supported by the adapter and will result in the message being ignored (pre-settled) or rejected (unsettled).\n \n ## Publish Telemetry Data (authenticated Device)\n \n-The AMQP adapter supports publishing of telemetry data to Hono's Telemetry API. Telemetry messages can be published using either *AT LEAST ONCE* or *AT MOST ONCE* delivery semantics.\n-\n-* Message Address: `telemetry` or `t`\n-  * This refers to the `to` property of the message.\n-* Settlement Mode: `presettled` (*AT MOST ONCE*) or `unsettled` (*AT LEAST ONCE*)\n * Authentication: SASL PLAIN or SASL EXTERNAL\n+* Message *properties*:\n+  * (required) `to`: either `telemetry` or `t`\n+  * (optional) `content-type`: The type of payload contained in the message body. The given content type will be used\n+    in the AMQP message being forwarded downstream if not empty. Otherwise, the content type of the downstream\n+    message will be set to `application/octet-stream` if the payload is not empty and no default content type has been\n+    defined for the origin device or its tenant (see [Downstream Meta Data]({{< relref \"#downstream-meta-data\" >}}).\n * Message Body:\n-  * (optional) Arbitrary payload\n-* Message properties:\n-  * (optional) Arbitrary properties (content-type, correlation-id, ...)\n-* Disposition Frames:\n-  * Accepted: Message successfully processed by the adapter.\n-  * Released: Message cannot be processed and should be redelivered.\n-  * Rejected: Adapter rejects the message due to one of the following:\n-        * (`hono:bad-request`): Request rejected due to a bad client request.\n-        * (`amqp:unauthorized-access`): Request rejected because the adapter is disabled for tenant.\n-        * (`amqp:precondition-failed`): Request does not fulfill certain requirements e.g adapter cannot assert device registration etc.\n-        * (`amqp:resource-limit-exceeded`): Request rejected because the message limit for the given tenant is exceeded.\n-\n-When a device publishes data to the `telemetry` address, the AMQP adapter automatically determines the device's identity and tenant during the authentication process.\n+  * (optional) Arbitrary payload contained in either a single AMQP *Data* or *AmqpValue* section.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aaed21d1dff911fdbeb0a8486acd021ddf5e7b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNTMyNA==", "bodyText": "So that means, support for adoption of application properties (#2341) will for now not be explicitly stated, and we may add this in the future, unifying properties support across protocol adapters then?", "url": "https://github.com/eclipse/hono/pull/2367#discussion_r542215324", "createdAt": "2020-12-14T09:01:04Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/user-guide/amqp-adapter.md", "diffHunk": "@@ -141,39 +140,45 @@ There are two JAR files in the hono/cli/target directory. The JAR to use for the\n \n ## Publishing Telemetry Data\n \n-The client indicates the delivery mode to use when uploading telemetry messages by means of the *settled* and *rcv-settle-mode* properties of the AMQP *transfer* frame(s) it uses for uploading the message. The AMQP adapter will accept messages using a delivery mode according to the following table:\n+The client indicates the delivery mode to use when uploading telemetry messages by means of the *settled* and\n+*rcv-settle-mode* properties of the AMQP *transfer* frame(s) it uses for uploading the message.\n+The AMQP adapter will accept messages using a delivery mode according to the following table:\n \n-| settled                | rcv-settle-mode        | Delivery semantics |\n-| :--------------------- | :--------------------- | :----------------- |\n-| `false`               | `first`               | The adapter will forward the message to the downstream AMQP 1.0 Messaging Network and will forward any AMQP *disposition* frame received from the AMQP 1.0 Messaging Network to the client *as is*. It is up to the client's discretion if and how it processes the disposition frame. The adapter will accept any re-delivered message. Sending *unsettled* messages allows for clients to implement either *AT LEAST ONCE* or *AT MOST ONCE* delivery semantics, depending on whether a client actually waits for and considers the disposition frames it receives from the adapter or not. This is the recommended mode for uploading telemetry data. |\n-| `true`                | `first`                | The adapter will acknowledge and settle any received message spontaneously before forwarding it to the downstream AMQP 1.0 Messaging Network. The adapter will ignore any AMQP *disposition* frames it receives from the AMQP 1.0 Messaging Network. Sending *pre-settled* messages allows for clients to implement *AT MOST ONCE* delivery semantics only. This is the fastest mode of delivery but has the drawback of less reliable end-to-end flow control and potential loss of messages without notice. |\n+| settled | rcv-settle-mode | Delivery semantics |\n+| :------ | :-------------- | :----------------- |\n+| `false` | `first`          | The adapter will forward the message to the downstream AMQP 1.0 Messaging Network and will forward any AMQP *disposition* frame received from the AMQP 1.0 Messaging Network to the client *as is*. It is up to the client's discretion if and how it processes the disposition frame. The adapter will accept any re-delivered message. Sending *unsettled* messages allows for clients to implement either *AT LEAST ONCE* or *AT MOST ONCE* delivery semantics, depending on whether a client actually waits for and considers the disposition frames it receives from the adapter or not. This is the recommended mode for uploading telemetry data. |\n+| `true`  | `first`          | The adapter will acknowledge and settle any received message spontaneously before forwarding it to the downstream AMQP 1.0 Messaging Network. The adapter will ignore any AMQP *disposition* frames it receives from the AMQP 1.0 Messaging Network. Sending *pre-settled* messages allows for clients to implement *AT MOST ONCE* delivery semantics only. This is the fastest mode of delivery but has the drawback of less reliable end-to-end flow control and potential loss of messages without notice. |\n \n All other combinations are not supported by the adapter and will result in the message being ignored (pre-settled) or rejected (unsettled).\n \n ## Publish Telemetry Data (authenticated Device)\n \n-The AMQP adapter supports publishing of telemetry data to Hono's Telemetry API. Telemetry messages can be published using either *AT LEAST ONCE* or *AT MOST ONCE* delivery semantics.\n-\n-* Message Address: `telemetry` or `t`\n-  * This refers to the `to` property of the message.\n-* Settlement Mode: `presettled` (*AT MOST ONCE*) or `unsettled` (*AT LEAST ONCE*)\n * Authentication: SASL PLAIN or SASL EXTERNAL\n+* Message *properties*:\n+  * (required) `to`: either `telemetry` or `t`\n+  * (optional) `content-type`: The type of payload contained in the message body. The given content type will be used\n+    in the AMQP message being forwarded downstream if not empty. Otherwise, the content type of the downstream\n+    message will be set to `application/octet-stream` if the payload is not empty and no default content type has been\n+    defined for the origin device or its tenant (see [Downstream Meta Data]({{< relref \"#downstream-meta-data\" >}}).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aaed21d1dff911fdbeb0a8486acd021ddf5e7b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1Nzc5Ng==", "bodyText": "I think \"by the adapter\" and \"at the infrastructure level\" are potentially misleading for the telemetry case here. The adapter could have forwarded it just fine, but the northbound application for example may not have sent a disposition update in time, leading to the (initially unsettled) message to get released.", "url": "https://github.com/eclipse/hono/pull/2367#discussion_r542257796", "createdAt": "2020-12-14T10:03:13Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/user-guide/amqp-adapter.md", "diffHunk": "@@ -141,39 +140,45 @@ There are two JAR files in the hono/cli/target directory. The JAR to use for the\n \n ## Publishing Telemetry Data\n \n-The client indicates the delivery mode to use when uploading telemetry messages by means of the *settled* and *rcv-settle-mode* properties of the AMQP *transfer* frame(s) it uses for uploading the message. The AMQP adapter will accept messages using a delivery mode according to the following table:\n+The client indicates the delivery mode to use when uploading telemetry messages by means of the *settled* and\n+*rcv-settle-mode* properties of the AMQP *transfer* frame(s) it uses for uploading the message.\n+The AMQP adapter will accept messages using a delivery mode according to the following table:\n \n-| settled                | rcv-settle-mode        | Delivery semantics |\n-| :--------------------- | :--------------------- | :----------------- |\n-| `false`               | `first`               | The adapter will forward the message to the downstream AMQP 1.0 Messaging Network and will forward any AMQP *disposition* frame received from the AMQP 1.0 Messaging Network to the client *as is*. It is up to the client's discretion if and how it processes the disposition frame. The adapter will accept any re-delivered message. Sending *unsettled* messages allows for clients to implement either *AT LEAST ONCE* or *AT MOST ONCE* delivery semantics, depending on whether a client actually waits for and considers the disposition frames it receives from the adapter or not. This is the recommended mode for uploading telemetry data. |\n-| `true`                | `first`                | The adapter will acknowledge and settle any received message spontaneously before forwarding it to the downstream AMQP 1.0 Messaging Network. The adapter will ignore any AMQP *disposition* frames it receives from the AMQP 1.0 Messaging Network. Sending *pre-settled* messages allows for clients to implement *AT MOST ONCE* delivery semantics only. This is the fastest mode of delivery but has the drawback of less reliable end-to-end flow control and potential loss of messages without notice. |\n+| settled | rcv-settle-mode | Delivery semantics |\n+| :------ | :-------------- | :----------------- |\n+| `false` | `first`          | The adapter will forward the message to the downstream AMQP 1.0 Messaging Network and will forward any AMQP *disposition* frame received from the AMQP 1.0 Messaging Network to the client *as is*. It is up to the client's discretion if and how it processes the disposition frame. The adapter will accept any re-delivered message. Sending *unsettled* messages allows for clients to implement either *AT LEAST ONCE* or *AT MOST ONCE* delivery semantics, depending on whether a client actually waits for and considers the disposition frames it receives from the adapter or not. This is the recommended mode for uploading telemetry data. |\n+| `true`  | `first`          | The adapter will acknowledge and settle any received message spontaneously before forwarding it to the downstream AMQP 1.0 Messaging Network. The adapter will ignore any AMQP *disposition* frames it receives from the AMQP 1.0 Messaging Network. Sending *pre-settled* messages allows for clients to implement *AT MOST ONCE* delivery semantics only. This is the fastest mode of delivery but has the drawback of less reliable end-to-end flow control and potential loss of messages without notice. |\n \n All other combinations are not supported by the adapter and will result in the message being ignored (pre-settled) or rejected (unsettled).\n \n ## Publish Telemetry Data (authenticated Device)\n \n-The AMQP adapter supports publishing of telemetry data to Hono's Telemetry API. Telemetry messages can be published using either *AT LEAST ONCE* or *AT MOST ONCE* delivery semantics.\n-\n-* Message Address: `telemetry` or `t`\n-  * This refers to the `to` property of the message.\n-* Settlement Mode: `presettled` (*AT MOST ONCE*) or `unsettled` (*AT LEAST ONCE*)\n * Authentication: SASL PLAIN or SASL EXTERNAL\n+* Message *properties*:\n+  * (required) `to`: either `telemetry` or `t`\n+  * (optional) `content-type`: The type of payload contained in the message body. The given content type will be used\n+    in the AMQP message being forwarded downstream if not empty. Otherwise, the content type of the downstream\n+    message will be set to `application/octet-stream` if the payload is not empty and no default content type has been\n+    defined for the origin device or its tenant (see [Downstream Meta Data]({{< relref \"#downstream-meta-data\" >}}).\n * Message Body:\n-  * (optional) Arbitrary payload\n-* Message properties:\n-  * (optional) Arbitrary properties (content-type, correlation-id, ...)\n-* Disposition Frames:\n-  * Accepted: Message successfully processed by the adapter.\n-  * Released: Message cannot be processed and should be redelivered.\n-  * Rejected: Adapter rejects the message due to one of the following:\n-        * (`hono:bad-request`): Request rejected due to a bad client request.\n-        * (`amqp:unauthorized-access`): Request rejected because the adapter is disabled for tenant.\n-        * (`amqp:precondition-failed`): Request does not fulfill certain requirements e.g adapter cannot assert device registration etc.\n-        * (`amqp:resource-limit-exceeded`): Request rejected because the message limit for the given tenant is exceeded.\n-\n-When a device publishes data to the `telemetry` address, the AMQP adapter automatically determines the device's identity and tenant during the authentication process.\n+  * (optional) Arbitrary payload contained in either a single AMQP *Data* or *AmqpValue* section.\n+* Outcomes:\n+  * `accepted`: The message has been successfully forwarded downstream.\n+  * `released`: The message could not be processed by the adapter due to a (temporary) problem at the infrastructure level.\n+    A common reason for this is that there is no active downstream consumer for messages from the device.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aaed21d1dff911fdbeb0a8486acd021ddf5e7b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2MDgwMw==", "bodyText": "The \"no active downstream consumer\" scenario doesn't usually apply for event messages here.", "url": "https://github.com/eclipse/hono/pull/2367#discussion_r542260803", "createdAt": "2020-12-14T10:07:40Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/user-guide/amqp-adapter.md", "diffHunk": "@@ -237,27 +247,36 @@ In this example, we are using message address `t/DEFAULT_TENANT/4711` which cont\n \n ## Publishing Events\n \n-The adapter supports *AT LEAST ONCE* delivery of *Event* messages only. A client therefore MUST set the *settled* property to `false` and the *rcv-settle-mode* property to `first` in all *transfer* frame(s) it uses for uploading events. All other combinations are not supported by the adapter and result in the message being rejected.\n+The adapter supports *AT LEAST ONCE* delivery of *Event* messages only. A client therefore MUST set the *settled*\n+property to `false` and the *rcv-settle-mode* property to `first` in all *transfer* frame(s) it uses for uploading events.\n+All other combinations are not supported by the adapter and result in the message being rejected.\n \n ## Publish an Event (authenticated Device)\n \n-* Message Address: `event` or `e`\n-* Settlement Mode: `unsettled` (AT LEAST ONCE)\n * Authentication: SASL PLAIN or SASL EXTERNAL\n+* Message *properties*:\n+  * (required) `to`: either `event` or `e`\n+  * (optional) `content-type`: The type of payload contained in the message body. The given content type will be used\n+    in the AMQP message being forwarded downstream if not empty. Otherwise, the content type of the downstream\n+    message will be set to `application/octet-stream` if the payload is not empty and no default content type has been\n+    defined for the origin device or its tenant (see [Downstream Meta Data]({{< relref \"#downstream-meta-data\" >}}).\n * Message Body:\n-  * (optional) Arbitrary payload\n-* Message properties:\n-  * (optional) Arbitrary properties (content-type, correlation-id, ...)\n-* Disposition Frames:\n-  * Accepted: Message successfully processed by the adapter.\n-  * Released: Message cannot be processed and should be redelivered.\n-  * Rejected: Adapter rejects the message due to:\n-        * (`hono:bad-request`): A bad client request (e.g invalid content-type).\n-        * (`amqp:unauthorized-access`): The adapter is disabled for tenant.\n-        * (`amqp:precondition-failed`): Request not fulfilling certain requirements.\n-        * (`amqp:resource-limit-exceeded`): Request rejected because the message limit for the given tenant is exceeded.\n-\n-This is the preferred way for devices to publish events. It is available only if the protocol adapter has been configured to require devices to authenticate (which is the default).\n+  * (optional) Arbitrary payload contained in either a single AMQP *Data* or *AmqpValue* section.\n+* Outcomes:\n+  * `accepted`: The message has been successfully forwarded downstream.\n+  * `released`: The message could not be processed by the adapter due to a (temporary) problem at the infrastructure level.\n+    A common reason for this is that there is no active downstream consumer for messages from the device.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73aaed21d1dff911fdbeb0a8486acd021ddf5e7b"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "832dc3a464346390bbd1e2c5678523f2a6038502", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/832dc3a464346390bbd1e2c5678523f2a6038502", "committedDate": "2020-12-14T12:20:53Z", "message": "Incorporate feedback\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMzI1NTgw", "url": "https://github.com/eclipse/hono/pull/2367#pullrequestreview-551325580", "createdAt": "2020-12-14T12:37:55Z", "commit": {"oid": "832dc3a464346390bbd1e2c5678523f2a6038502"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 487, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}