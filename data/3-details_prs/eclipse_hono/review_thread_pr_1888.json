{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODEwMDU0", "number": 1888, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTozNjowMVrODwQsdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoyNTozNFrODx95CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTMxNzY3OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTozNjowMVrOGDKM-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxOTowOFrOGFBSmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2NjA3Mw==", "bodyText": "Should be just 2020.", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r405966073", "createdAt": "2020-04-09T05:36:01Z", "author": {"login": "calohmn"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8bc23fd0e8fcef21dcc03454e2027fc21988d8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5NzE3OA==", "bodyText": ":-) right, I kept it private quite a while :-)", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r405997178", "createdAt": "2020-04-09T07:05:05Z", "author": {"login": "boaks"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2NjA3Mw=="}, "originalCommit": {"oid": "7a8bc23fd0e8fcef21dcc03454e2027fc21988d8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMDU5Mg==", "bodyText": "But not for 4 years, is it? ;)", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r407910592", "createdAt": "2020-04-14T07:05:46Z", "author": {"login": "calohmn"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2NjA3Mw=="}, "originalCommit": {"oid": "7a8bc23fd0e8fcef21dcc03454e2027fc21988d8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNzIwOA==", "bodyText": "I will set it to 2020 :-)", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r407917208", "createdAt": "2020-04-14T07:19:08Z", "author": {"login": "boaks"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2NjA3Mw=="}, "originalCommit": {"oid": "7a8bc23fd0e8fcef21dcc03454e2027fc21988d8"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTMxODcwOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTozNjozNlrOGDKNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzowNToxNFrOGDMGrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2NjIyNA==", "bodyText": "Missing @Override annotation.", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r405966224", "createdAt": "2020-04-09T05:36:36Z", "author": {"login": "calohmn"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client for statistic of received messages from via Hono's north bound Telemetry and/or Event API and\n+ * <p>\n+ * Messages are output to stdout.\n+ * <p>\n+ */\n+@Component\n+@Profile(\"statistic\")\n+public class ReceiverStatistics extends Receiver {\n+    private static final Logger LOG_STATISTIC = LoggerFactory.getLogger(ReceiverStatistics.class.getName() + \".statistic\");\n+    private static final long INTERVAL_MILLIS = 10000;\n+    private static final long INTERVAL_NANOS = TimeUnit.MILLISECONDS.toNanos(INTERVAL_MILLIS);\n+\n+    /**\n+     * The type of messages to create a consumer for.\n+     */\n+    @Value(value = \"${message.type}\")\n+    protected String messageType;\n+    /**\n+     * Overall statistic.\n+     */\n+    private Statistic total;\n+    /**\n+     * Current period statistic.\n+     */\n+    private Statistic current;\n+\n+    /**\n+     * Starts this component.\n+     * <p>\n+     * \n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    @PostConstruct\n+    Future<CompositeFuture> start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8bc23fd0e8fcef21dcc03454e2027fc21988d8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5NzIzMA==", "bodyText": "Ok", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r405997230", "createdAt": "2020-04-09T07:05:14Z", "author": {"login": "boaks"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client for statistic of received messages from via Hono's north bound Telemetry and/or Event API and\n+ * <p>\n+ * Messages are output to stdout.\n+ * <p>\n+ */\n+@Component\n+@Profile(\"statistic\")\n+public class ReceiverStatistics extends Receiver {\n+    private static final Logger LOG_STATISTIC = LoggerFactory.getLogger(ReceiverStatistics.class.getName() + \".statistic\");\n+    private static final long INTERVAL_MILLIS = 10000;\n+    private static final long INTERVAL_NANOS = TimeUnit.MILLISECONDS.toNanos(INTERVAL_MILLIS);\n+\n+    /**\n+     * The type of messages to create a consumer for.\n+     */\n+    @Value(value = \"${message.type}\")\n+    protected String messageType;\n+    /**\n+     * Overall statistic.\n+     */\n+    private Statistic total;\n+    /**\n+     * Current period statistic.\n+     */\n+    private Statistic current;\n+\n+    /**\n+     * Starts this component.\n+     * <p>\n+     * \n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    @PostConstruct\n+    Future<CompositeFuture> start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2NjIyNA=="}, "originalCommit": {"oid": "7a8bc23fd0e8fcef21dcc03454e2027fc21988d8"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTQyMTIwOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoyNzo1N1rOGDLLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoxMzo0NlrOGDMVyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MTk3Mg==", "bodyText": "Concerning the spring profile usage:\nI would have expected to use --spring.profiles.active=receiver,statistic here, having the statistic profile as kind of a modifier. Having to run --spring.profiles.active=statistic (without receiver) feels unintuitive. And having to define extra properties for the statistic profile (same way as for the receiver profile) in the application.yml also doesn't look like a good solution.\nHow about having the ReceiverStatistics class not extend Receiver. Instead, the Receiver class could offer a addMessageHandler method, with all the added handlers getting invoked in the handleMessage method.\nThen ReceiverStatistics could just be a bean that adds a handler via that addMessageHandler method, and the counting logic could be in that handler.", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r405981972", "createdAt": "2020-04-09T06:27:57Z", "author": {"login": "calohmn"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client for statistic of received messages from via Hono's north bound Telemetry and/or Event API and\n+ * <p>\n+ * Messages are output to stdout.\n+ * <p>\n+ */\n+@Component\n+@Profile(\"statistic\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8bc23fd0e8fcef21dcc03454e2027fc21988d8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwMDM2OQ==", "bodyText": "Though I'm not to common with spring (or what ever technique is used for that), that seems to be out of my possibilities ;-).", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r406000369", "createdAt": "2020-04-09T07:12:12Z", "author": {"login": "boaks"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client for statistic of received messages from via Hono's north bound Telemetry and/or Event API and\n+ * <p>\n+ * Messages are output to stdout.\n+ * <p>\n+ */\n+@Component\n+@Profile(\"statistic\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MTk3Mg=="}, "originalCommit": {"oid": "7a8bc23fd0e8fcef21dcc03454e2027fc21988d8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwMTA5Ng==", "bodyText": "Just as additional idea:\nCreate a common abstract base class, derive the receiver with logging and the statistic from that. Would that be also OK?", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r406001096", "createdAt": "2020-04-09T07:13:46Z", "author": {"login": "boaks"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client for statistic of received messages from via Hono's north bound Telemetry and/or Event API and\n+ * <p>\n+ * Messages are output to stdout.\n+ * <p>\n+ */\n+@Component\n+@Profile(\"statistic\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MTk3Mg=="}, "originalCommit": {"oid": "7a8bc23fd0e8fcef21dcc03454e2027fc21988d8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQwNDAzOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzowODowNFrOGFA89Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzowODowNFrOGFA89Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMTY2OQ==", "bodyText": "Can you adapt the javadoc here (class is not a receiver any more)?", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r407911669", "createdAt": "2020-04-14T07:08:04Z", "author": {"login": "calohmn"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client for statistic of received messages from via Hono's north bound Telemetry and/or Event API and\n+ * <p>\n+ * Messages are output to stdout.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "255502e977a05f8a0de0d6949749f8355522ac63"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQxNDg2OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/eclipse/hono/cli/app/Receiver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxMTozOVrOGFBDlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxMTozOVrOGFBDlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMzM2NQ==", "bodyText": "Typos (messge, endpont, recevied). Or javadoc can be removed again (method is again private now).", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r407913365", "createdAt": "2020-04-14T07:11:39Z", "author": {"login": "calohmn"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/Receiver.java", "diffHunk": "@@ -99,6 +120,14 @@ private CompositeFuture createConsumer(final HonoConnection connection) {\n         return CompositeFuture.all(consumerFutures);\n     }\n \n+    /**\n+     * Handle received messge.\n+     * \n+     * Write log messages to stdout.\n+     * \n+     * @param endpoint receiving endpont, \"telemetry\" or \"event\".\n+     * @param msg recevied message\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "255502e977a05f8a0de0d6949749f8355522ac63"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQxNjg1OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/eclipse/hono/cli/app/Receiver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxMjoxM1rOGFBEuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxMjoxM1rOGFBEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMzY1Nw==", "bodyText": "based on", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r407913657", "createdAt": "2020-04-14T07:12:13Z", "author": {"login": "calohmn"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/Receiver.java", "diffHunk": "@@ -52,6 +54,21 @@\n     @Value(value = \"${message.type}\")\n     protected String messageType;\n \n+    /**\n+     * Bi consumer to handle messages based one endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "255502e977a05f8a0de0d6949749f8355522ac63"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzIwODQxOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoyNTozNFrOGFvGZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1Nzo0MFrOGJ36CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2Nzc1MQ==", "bodyText": "This means that the total statistic is reset after having received no messages in a period of 2x interval, right?\nI think this might be confusing when the user just looks at the last log line after a long test run, not seeing that the total number might not be the actual grand total because it got reset a few times.", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r408667751", "createdAt": "2020-04-15T08:25:34Z", "author": {"login": "calohmn"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client extension to collect a statistic of received messages from via Hono's north bound Telemetry\n+ * and/or Event API and\n+ * <p>\n+ * Statistics are output to stdout.\n+ * <p>\n+ */\n+@Component\n+@Profile(\"statistic\")\n+public class ReceiverStatistics {\n+    private static final Logger LOG_STATISTIC = LoggerFactory.getLogger(ReceiverStatistics.class);\n+    private static final long INTERVAL_MILLIS = 10000;\n+\n+    /**\n+     * The statistics interval in milliseconds.\n+     */\n+    @Value(value = \"${statistic.interval}\")\n+    protected long interval = INTERVAL_MILLIS;\n+\n+    /**\n+     * Basic message receiver.\n+     */\n+    private final Receiver receiver;\n+    /**\n+     * The vert.x instance to run on.\n+     */\n+    private final Vertx vertx;\n+    /**\n+     * Overall statistic.\n+     */\n+    private Statistic total;\n+    /**\n+     * Current period statistic.\n+     */\n+    private Statistic current;\n+\n+    /**\n+     * Create new receiver statistics.\n+     * \n+     * @param receiver Receiver instance\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x or receiver is {@code null}.\n+     */\n+    @Autowired\n+    public ReceiverStatistics(final Receiver receiver, final Vertx vertx) {\n+        this.receiver = Objects.requireNonNull(receiver);\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Starts this component.\n+     * <p>\n+     * \n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    @PostConstruct\n+    Future<CompositeFuture> start() {\n+        vertx.setPeriodic(interval, this::statistic);\n+        receiver.setMessageHandler((endpoint, msg) -> handleMessage(endpoint, msg));\n+        return Future.succeededFuture();\n+    }\n+\n+    private void handleMessage(final String endpoint, final Message msg) {\n+        final String deviceId = MessageHelper.getDeviceId(msg);\n+\n+        final Buffer payload = MessageHelper.getPayload(msg);\n+\n+        if (LOG_STATISTIC.isInfoEnabled()) {\n+            final long now = System.nanoTime();\n+            final Statistic total;\n+            Statistic current;\n+            synchronized (this) {\n+                if (this.total == null) {\n+                    this.total = new Statistic(now);\n+                }\n+                total = this.total;\n+                if (this.current == null) {\n+                    this.current = new PeriodStatistic(now, interval);\n+                }\n+                current = this.current;\n+            }\n+            total.increment(now);\n+            if (!current.increment(now)) {\n+                if (current.isPrinting()) {\n+                    LOG_STATISTIC.info(\"statistic: total {}, last {}\", total, current);\n+                }\n+                synchronized (this) {\n+                    if (this.current == current) {\n+                        this.current = new PeriodStatistic(now, interval);\n+                    }\n+                    current = this.current;\n+                }\n+                current.increment(now);\n+            }\n+        }\n+\n+        LOG_STATISTIC.trace(\"received {} message [device: {}, content-type: {}]: {}\", endpoint, deviceId, msg.getContentType(),\n+                payload);\n+\n+        if (msg.getApplicationProperties() != null) {\n+            LOG_STATISTIC.trace(\"... with application properties: {}\", msg.getApplicationProperties().getValue());\n+        }\n+    }\n+\n+    private void statistic(final Long id) {\n+        final Statistic total;\n+        final Statistic current;\n+        synchronized (this) {\n+            total = this.total;\n+            current = this.current;\n+        }\n+        if (total != null) {\n+            final long now = System.nanoTime();\n+            if (current == null || current.finished(now)) {\n+                if (current == null) {\n+                    LOG_STATISTIC.info(\"statistic: total {}\", total);\n+                } else {\n+                    LOG_STATISTIC.info(\"statistic: total {}, last {}\", total, current);\n+                }\n+                synchronized (this) {\n+                    if (this.total == total && this.current == current) {\n+                        if (current == null) {\n+                            this.total = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9ca28a4b0e06598d9d37c45d65a629ce25f16c"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1NjE4Mw==", "bodyText": "That may be more a question of your usage. I start usually that client and then I focus on my own test via the protocol adapters. Sometimes I adapt my test and want to see the changes. Without the reset I sometimes (sometimes very frequently :-) ), I forgot the restart the statistic client and as result, I had to repeat the test again with restart statistic client. though the test are more a couple of minutes, I found the auto-reset the better idea.\nSo, should I add a config flag for autoReset in order to be able to select the behaviour?", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r409356183", "createdAt": "2020-04-16T07:57:40Z", "author": {"login": "boaks"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client extension to collect a statistic of received messages from via Hono's north bound Telemetry\n+ * and/or Event API and\n+ * <p>\n+ * Statistics are output to stdout.\n+ * <p>\n+ */\n+@Component\n+@Profile(\"statistic\")\n+public class ReceiverStatistics {\n+    private static final Logger LOG_STATISTIC = LoggerFactory.getLogger(ReceiverStatistics.class);\n+    private static final long INTERVAL_MILLIS = 10000;\n+\n+    /**\n+     * The statistics interval in milliseconds.\n+     */\n+    @Value(value = \"${statistic.interval}\")\n+    protected long interval = INTERVAL_MILLIS;\n+\n+    /**\n+     * Basic message receiver.\n+     */\n+    private final Receiver receiver;\n+    /**\n+     * The vert.x instance to run on.\n+     */\n+    private final Vertx vertx;\n+    /**\n+     * Overall statistic.\n+     */\n+    private Statistic total;\n+    /**\n+     * Current period statistic.\n+     */\n+    private Statistic current;\n+\n+    /**\n+     * Create new receiver statistics.\n+     * \n+     * @param receiver Receiver instance\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x or receiver is {@code null}.\n+     */\n+    @Autowired\n+    public ReceiverStatistics(final Receiver receiver, final Vertx vertx) {\n+        this.receiver = Objects.requireNonNull(receiver);\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Starts this component.\n+     * <p>\n+     * \n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    @PostConstruct\n+    Future<CompositeFuture> start() {\n+        vertx.setPeriodic(interval, this::statistic);\n+        receiver.setMessageHandler((endpoint, msg) -> handleMessage(endpoint, msg));\n+        return Future.succeededFuture();\n+    }\n+\n+    private void handleMessage(final String endpoint, final Message msg) {\n+        final String deviceId = MessageHelper.getDeviceId(msg);\n+\n+        final Buffer payload = MessageHelper.getPayload(msg);\n+\n+        if (LOG_STATISTIC.isInfoEnabled()) {\n+            final long now = System.nanoTime();\n+            final Statistic total;\n+            Statistic current;\n+            synchronized (this) {\n+                if (this.total == null) {\n+                    this.total = new Statistic(now);\n+                }\n+                total = this.total;\n+                if (this.current == null) {\n+                    this.current = new PeriodStatistic(now, interval);\n+                }\n+                current = this.current;\n+            }\n+            total.increment(now);\n+            if (!current.increment(now)) {\n+                if (current.isPrinting()) {\n+                    LOG_STATISTIC.info(\"statistic: total {}, last {}\", total, current);\n+                }\n+                synchronized (this) {\n+                    if (this.current == current) {\n+                        this.current = new PeriodStatistic(now, interval);\n+                    }\n+                    current = this.current;\n+                }\n+                current.increment(now);\n+            }\n+        }\n+\n+        LOG_STATISTIC.trace(\"received {} message [device: {}, content-type: {}]: {}\", endpoint, deviceId, msg.getContentType(),\n+                payload);\n+\n+        if (msg.getApplicationProperties() != null) {\n+            LOG_STATISTIC.trace(\"... with application properties: {}\", msg.getApplicationProperties().getValue());\n+        }\n+    }\n+\n+    private void statistic(final Long id) {\n+        final Statistic total;\n+        final Statistic current;\n+        synchronized (this) {\n+            total = this.total;\n+            current = this.current;\n+        }\n+        if (total != null) {\n+            final long now = System.nanoTime();\n+            if (current == null || current.finished(now)) {\n+                if (current == null) {\n+                    LOG_STATISTIC.info(\"statistic: total {}\", total);\n+                } else {\n+                    LOG_STATISTIC.info(\"statistic: total {}, last {}\", total, current);\n+                }\n+                synchronized (this) {\n+                    if (this.total == total && this.current == current) {\n+                        if (current == null) {\n+                            this.total = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2Nzc1MQ=="}, "originalCommit": {"oid": "fb9ca28a4b0e06598d9d37c45d65a629ce25f16c"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4MTkzNA==", "bodyText": "Yes, I think that would be good.", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r409381934", "createdAt": "2020-04-16T08:38:52Z", "author": {"login": "calohmn"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client extension to collect a statistic of received messages from via Hono's north bound Telemetry\n+ * and/or Event API and\n+ * <p>\n+ * Statistics are output to stdout.\n+ * <p>\n+ */\n+@Component\n+@Profile(\"statistic\")\n+public class ReceiverStatistics {\n+    private static final Logger LOG_STATISTIC = LoggerFactory.getLogger(ReceiverStatistics.class);\n+    private static final long INTERVAL_MILLIS = 10000;\n+\n+    /**\n+     * The statistics interval in milliseconds.\n+     */\n+    @Value(value = \"${statistic.interval}\")\n+    protected long interval = INTERVAL_MILLIS;\n+\n+    /**\n+     * Basic message receiver.\n+     */\n+    private final Receiver receiver;\n+    /**\n+     * The vert.x instance to run on.\n+     */\n+    private final Vertx vertx;\n+    /**\n+     * Overall statistic.\n+     */\n+    private Statistic total;\n+    /**\n+     * Current period statistic.\n+     */\n+    private Statistic current;\n+\n+    /**\n+     * Create new receiver statistics.\n+     * \n+     * @param receiver Receiver instance\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x or receiver is {@code null}.\n+     */\n+    @Autowired\n+    public ReceiverStatistics(final Receiver receiver, final Vertx vertx) {\n+        this.receiver = Objects.requireNonNull(receiver);\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Starts this component.\n+     * <p>\n+     * \n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    @PostConstruct\n+    Future<CompositeFuture> start() {\n+        vertx.setPeriodic(interval, this::statistic);\n+        receiver.setMessageHandler((endpoint, msg) -> handleMessage(endpoint, msg));\n+        return Future.succeededFuture();\n+    }\n+\n+    private void handleMessage(final String endpoint, final Message msg) {\n+        final String deviceId = MessageHelper.getDeviceId(msg);\n+\n+        final Buffer payload = MessageHelper.getPayload(msg);\n+\n+        if (LOG_STATISTIC.isInfoEnabled()) {\n+            final long now = System.nanoTime();\n+            final Statistic total;\n+            Statistic current;\n+            synchronized (this) {\n+                if (this.total == null) {\n+                    this.total = new Statistic(now);\n+                }\n+                total = this.total;\n+                if (this.current == null) {\n+                    this.current = new PeriodStatistic(now, interval);\n+                }\n+                current = this.current;\n+            }\n+            total.increment(now);\n+            if (!current.increment(now)) {\n+                if (current.isPrinting()) {\n+                    LOG_STATISTIC.info(\"statistic: total {}, last {}\", total, current);\n+                }\n+                synchronized (this) {\n+                    if (this.current == current) {\n+                        this.current = new PeriodStatistic(now, interval);\n+                    }\n+                    current = this.current;\n+                }\n+                current.increment(now);\n+            }\n+        }\n+\n+        LOG_STATISTIC.trace(\"received {} message [device: {}, content-type: {}]: {}\", endpoint, deviceId, msg.getContentType(),\n+                payload);\n+\n+        if (msg.getApplicationProperties() != null) {\n+            LOG_STATISTIC.trace(\"... with application properties: {}\", msg.getApplicationProperties().getValue());\n+        }\n+    }\n+\n+    private void statistic(final Long id) {\n+        final Statistic total;\n+        final Statistic current;\n+        synchronized (this) {\n+            total = this.total;\n+            current = this.current;\n+        }\n+        if (total != null) {\n+            final long now = System.nanoTime();\n+            if (current == null || current.finished(now)) {\n+                if (current == null) {\n+                    LOG_STATISTIC.info(\"statistic: total {}\", total);\n+                } else {\n+                    LOG_STATISTIC.info(\"statistic: total {}, last {}\", total, current);\n+                }\n+                synchronized (this) {\n+                    if (this.total == total && this.current == current) {\n+                        if (current == null) {\n+                            this.total = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2Nzc1MQ=="}, "originalCommit": {"oid": "fb9ca28a4b0e06598d9d37c45d65a629ce25f16c"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwNjM0NA==", "bodyText": "I added the config and disabled it by default.", "url": "https://github.com/eclipse/hono/pull/1888#discussion_r413006344", "createdAt": "2020-04-22T13:57:40Z", "author": {"login": "boaks"}, "path": "cli/src/main/java/org/eclipse/hono/cli/app/ReceiverStatistics.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.cli.app;\n+\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+\n+/**\n+ * A command line client extension to collect a statistic of received messages from via Hono's north bound Telemetry\n+ * and/or Event API and\n+ * <p>\n+ * Statistics are output to stdout.\n+ * <p>\n+ */\n+@Component\n+@Profile(\"statistic\")\n+public class ReceiverStatistics {\n+    private static final Logger LOG_STATISTIC = LoggerFactory.getLogger(ReceiverStatistics.class);\n+    private static final long INTERVAL_MILLIS = 10000;\n+\n+    /**\n+     * The statistics interval in milliseconds.\n+     */\n+    @Value(value = \"${statistic.interval}\")\n+    protected long interval = INTERVAL_MILLIS;\n+\n+    /**\n+     * Basic message receiver.\n+     */\n+    private final Receiver receiver;\n+    /**\n+     * The vert.x instance to run on.\n+     */\n+    private final Vertx vertx;\n+    /**\n+     * Overall statistic.\n+     */\n+    private Statistic total;\n+    /**\n+     * Current period statistic.\n+     */\n+    private Statistic current;\n+\n+    /**\n+     * Create new receiver statistics.\n+     * \n+     * @param receiver Receiver instance\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x or receiver is {@code null}.\n+     */\n+    @Autowired\n+    public ReceiverStatistics(final Receiver receiver, final Vertx vertx) {\n+        this.receiver = Objects.requireNonNull(receiver);\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Starts this component.\n+     * <p>\n+     * \n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    @PostConstruct\n+    Future<CompositeFuture> start() {\n+        vertx.setPeriodic(interval, this::statistic);\n+        receiver.setMessageHandler((endpoint, msg) -> handleMessage(endpoint, msg));\n+        return Future.succeededFuture();\n+    }\n+\n+    private void handleMessage(final String endpoint, final Message msg) {\n+        final String deviceId = MessageHelper.getDeviceId(msg);\n+\n+        final Buffer payload = MessageHelper.getPayload(msg);\n+\n+        if (LOG_STATISTIC.isInfoEnabled()) {\n+            final long now = System.nanoTime();\n+            final Statistic total;\n+            Statistic current;\n+            synchronized (this) {\n+                if (this.total == null) {\n+                    this.total = new Statistic(now);\n+                }\n+                total = this.total;\n+                if (this.current == null) {\n+                    this.current = new PeriodStatistic(now, interval);\n+                }\n+                current = this.current;\n+            }\n+            total.increment(now);\n+            if (!current.increment(now)) {\n+                if (current.isPrinting()) {\n+                    LOG_STATISTIC.info(\"statistic: total {}, last {}\", total, current);\n+                }\n+                synchronized (this) {\n+                    if (this.current == current) {\n+                        this.current = new PeriodStatistic(now, interval);\n+                    }\n+                    current = this.current;\n+                }\n+                current.increment(now);\n+            }\n+        }\n+\n+        LOG_STATISTIC.trace(\"received {} message [device: {}, content-type: {}]: {}\", endpoint, deviceId, msg.getContentType(),\n+                payload);\n+\n+        if (msg.getApplicationProperties() != null) {\n+            LOG_STATISTIC.trace(\"... with application properties: {}\", msg.getApplicationProperties().getValue());\n+        }\n+    }\n+\n+    private void statistic(final Long id) {\n+        final Statistic total;\n+        final Statistic current;\n+        synchronized (this) {\n+            total = this.total;\n+            current = this.current;\n+        }\n+        if (total != null) {\n+            final long now = System.nanoTime();\n+            if (current == null || current.finished(now)) {\n+                if (current == null) {\n+                    LOG_STATISTIC.info(\"statistic: total {}\", total);\n+                } else {\n+                    LOG_STATISTIC.info(\"statistic: total {}, last {}\", total, current);\n+                }\n+                synchronized (this) {\n+                    if (this.total == total && this.current == current) {\n+                        if (current == null) {\n+                            this.total = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2Nzc1MQ=="}, "originalCommit": {"oid": "fb9ca28a4b0e06598d9d37c45d65a629ce25f16c"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3333, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}