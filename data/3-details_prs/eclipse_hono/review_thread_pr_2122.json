{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMjc3MTcy", "number": 2122, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0MzoyN1rOEaWC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0NToyOVrOEaWGzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDU5NjA3OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/device/AbstractDeviceManagementSearchDevicesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0MzoyN1rOHDttrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0MzoyN1rOHDttrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1Njc0OQ==", "bodyText": "you should also mention that subclasses need to make sure to remove any fixture in the DB that has been created by individual test cases", "url": "https://github.com/eclipse/hono/pull/2122#discussion_r473656749", "createdAt": "2020-08-20T06:43:27Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/device/AbstractDeviceManagementSearchDevicesTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.util.Constants;\n+import org.junit.jupiter.api.Test;\n+\n+import io.opentracing.noop.NoopSpan;\n+import io.vertx.core.Future;\n+import io.vertx.junit5.VertxTestContext;\n+\n+/**\n+ * As suite of tests for verifying implementations of the Device management's \n+ * search devices operation.\n+ * <p>\n+ * Concrete subclasses need to provide the service implementations under test\n+ * by means of implementing the {@link #getDeviceManagementService()} method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5bc70024f9177907390bb30bd1d2aeacb500def"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDYwNjIyOnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/device/AbstractDeviceManagementSearchDevicesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0NToyOVrOHDtz9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0NToyOVrOHDtz9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1ODM1OA==", "bodyText": "how about using a random value for an ext property in order to make sure that the result set will always be scoped to devices that have this property? This should also safeguard against any side effects that might occur when running test cases concurrently.", "url": "https://github.com/eclipse/hono/pull/2122#discussion_r473658358", "createdAt": "2020-08-20T06:45:29Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/device/AbstractDeviceManagementSearchDevicesTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.util.Constants;\n+import org.junit.jupiter.api.Test;\n+\n+import io.opentracing.noop.NoopSpan;\n+import io.vertx.core.Future;\n+import io.vertx.junit5.VertxTestContext;\n+\n+/**\n+ * As suite of tests for verifying implementations of the Device management's \n+ * search devices operation.\n+ * <p>\n+ * Concrete subclasses need to provide the service implementations under test\n+ * by means of implementing the {@link #getDeviceManagementService()} method.\n+ */\n+public abstract class AbstractDeviceManagementSearchDevicesTest {\n+\n+    /**\n+     * The tenant used in tests.\n+     */\n+    protected static final String TENANT = Constants.DEFAULT_TENANT;\n+\n+    /**\n+     * Gets device management service being tested.\n+     *\n+     * @return The device management service\n+     */\n+    public abstract DeviceManagementService getDeviceManagementService();\n+\n+    private String randomDeviceId() {\n+        return UUID.randomUUID().toString();\n+    }\n+\n+    /**\n+     * Verifies that a request to search devices fails with a {@value HttpURLConnection#HTTP_NOT_FOUND}\n+     * when no matching devices are found.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testSearchDevicesWhenNoDevicesAreFound(final VertxTestContext ctx) {\n+        final int pageSize = 10;\n+        final int pageOffset = 0;\n+        final Filter filter = new Filter(\"/enabled\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5bc70024f9177907390bb30bd1d2aeacb500def"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2983, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}