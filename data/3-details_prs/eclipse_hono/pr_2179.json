{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NDk5ODQ2", "number": 2179, "title": "Add unit tests for HTTP 503 responses", "bodyText": "Add unit tests for HTTP adapter responses with status code 503.\nExtend ApplicationClientFactory with extra consumer methods to allow setting the delivery state explicitly.\nPreparation for #2166.", "createdAt": "2020-09-15T19:07:55Z", "url": "https://github.com/eclipse/hono/pull/2179", "merged": true, "mergeCommit": {"oid": "eb14c4a875a97af3a14270e4355bba861d199527"}, "closed": true, "closedAt": "2020-09-16T15:26:37Z", "author": {"login": "calohmn"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJVi06ABqjM3NzE0MDA1MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJdzybAFqTQ4OTcyNDQwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc1ee1b3c6ed2abb006f5f4f405b1497f39265e6", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/fc1ee1b3c6ed2abb006f5f4f405b1497f39265e6", "committedDate": "2020-09-15T19:04:53Z", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "c08d0695daca42fec9a1ccbc6474c0655087a0fa", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/c08d0695daca42fec9a1ccbc6474c0655087a0fa", "committedDate": "2020-09-16T05:28:22Z", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzI1Mjk4", "url": "https://github.com/eclipse/hono/pull/2179#pullrequestreview-489325298", "createdAt": "2020-09-16T06:55:46Z", "commit": {"oid": "c08d0695daca42fec9a1ccbc6474c0655087a0fa"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjo1NTo0NlrOHSitsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowMDowMVrOHSi1RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNTE3MQ==", "bodyText": "under which circumstances would you want to set this to false?", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489205171", "createdAt": "2020-09-16T06:55:46Z", "author": {"login": "sophokles73"}, "path": "client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java", "diffHunk": "@@ -56,6 +56,29 @@ static ApplicationClientFactory create(final HonoConnection connection, final Se\n      *\n      * @param tenantId The tenant to consume data for.\n      * @param telemetryConsumer The handler to invoke with every message received.\n+     * @param autoAccept {@code true} if received deliveries should be automatically accepted (and settled)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08d0695daca42fec9a1ccbc6474c0655087a0fa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNTc1Mg==", "bodyText": "why would you want to set this to false?", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489205752", "createdAt": "2020-09-16T06:57:09Z", "author": {"login": "sophokles73"}, "path": "client/src/main/java/org/eclipse/hono/client/ApplicationClientFactory.java", "diffHunk": "@@ -67,11 +90,32 @@ static ApplicationClientFactory create(final HonoConnection connection, final Se\n             Consumer<Message> telemetryConsumer,\n             Handler<Void> closeHandler);\n \n+    /**\n+     * Creates a client for consuming events from Hono's north bound <em>Event API</em>.\n+     *\n+     * @param tenantId The tenant to consume events for.\n+     * @param eventConsumer The handler to invoke with every event received.\n+     * @param closeHandler The handler invoked when the peer detaches the link.\n+     * @param autoAccept {@code true} if received deliveries should be automatically accepted (and settled)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08d0695daca42fec9a1ccbc6474c0655087a0fa"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNjk0NA==", "bodyText": "IMHO tests checking for literal string values produced elsewhere in the code base will be very flaky.\nFMPOV we can either check for a constant that is used in both places or remove this check.", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489206944", "createdAt": "2020-09-16T06:59:39Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java", "diffHunk": "@@ -125,4 +127,102 @@ public void testUploadMessageFailsForLargePayload(final VertxTestContext ctx) {\n             // THEN the message gets rejected by the HTTP adapter with a 413\n             .onComplete(ctx.completing());\n     }\n+\n+    /**\n+     * Verifies that the upload of a telemetry message fails with a 503 status code\n+     * when there is no consumer.\n+     *\n+     * @param ctx The test context\n+     */\n+    @Test\n+    public void testUploadMessageFailsForNoConsumer(final VertxTestContext ctx) {\n+\n+        // GIVEN a device\n+        final Tenant tenant = new Tenant();\n+\n+        helper.registry\n+                .addDeviceForTenant(tenantId, tenant, deviceId, PWD)\n+                .compose(ok -> {\n+\n+                    // WHEN the device tries to upload a telemetry message while there is no consumer for it\n+                    final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                            .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                            .add(HttpHeaders.AUTHORIZATION, authorization);\n+\n+                    return httpClient.create(\n+                            getEndpointUri(),\n+                            Buffer.buffer(\"hello\"),\n+                            requestHeaders,\n+                            ResponsePredicate.status(HttpURLConnection.HTTP_UNAVAILABLE));\n+\n+                })\n+                // THEN the message gets rejected by the HTTP adapter with a 503\n+                .onComplete(ctx.succeeding(response -> {\n+                    ctx.verify(() -> {\n+                        assertThat(response.bodyAsString()).isEqualTo(\"temporarily unavailable\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08d0695daca42fec9a1ccbc6474c0655087a0fa"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNzEwOQ==", "bodyText": "same here", "url": "https://github.com/eclipse/hono/pull/2179#discussion_r489207109", "createdAt": "2020-09-16T07:00:01Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/TelemetryHttpIT.java", "diffHunk": "@@ -125,4 +127,102 @@ public void testUploadMessageFailsForLargePayload(final VertxTestContext ctx) {\n             // THEN the message gets rejected by the HTTP adapter with a 413\n             .onComplete(ctx.completing());\n     }\n+\n+    /**\n+     * Verifies that the upload of a telemetry message fails with a 503 status code\n+     * when there is no consumer.\n+     *\n+     * @param ctx The test context\n+     */\n+    @Test\n+    public void testUploadMessageFailsForNoConsumer(final VertxTestContext ctx) {\n+\n+        // GIVEN a device\n+        final Tenant tenant = new Tenant();\n+\n+        helper.registry\n+                .addDeviceForTenant(tenantId, tenant, deviceId, PWD)\n+                .compose(ok -> {\n+\n+                    // WHEN the device tries to upload a telemetry message while there is no consumer for it\n+                    final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                            .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                            .add(HttpHeaders.AUTHORIZATION, authorization);\n+\n+                    return httpClient.create(\n+                            getEndpointUri(),\n+                            Buffer.buffer(\"hello\"),\n+                            requestHeaders,\n+                            ResponsePredicate.status(HttpURLConnection.HTTP_UNAVAILABLE));\n+\n+                })\n+                // THEN the message gets rejected by the HTTP adapter with a 503\n+                .onComplete(ctx.succeeding(response -> {\n+                    ctx.verify(() -> {\n+                        assertThat(response.bodyAsString()).isEqualTo(\"temporarily unavailable\");\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that the upload of a QoS 1 telemetry message fails with a 503 status code\n+     * when the consumer doesn't update the message delivery state and the\n+     * <em>sendMessageTimeout</em> has elapsed.\n+     *\n+     * @param ctx The test context\n+     * @throws InterruptedException if test is interrupted while running.\n+     */\n+    @Test\n+    public void testUploadQos1MessageFailsIfDeliveryStateNotUpdated(final VertxTestContext ctx)\n+            throws InterruptedException {\n+\n+        // GIVEN a device and a northbound message consumer that doesn't update the message delivery state\n+        final Tenant tenant = new Tenant();\n+        final Checkpoint messageReceived = ctx.checkpoint();\n+        final Checkpoint httpResponseReceived = ctx.checkpoint();\n+\n+        final VertxTestContext setup = new VertxTestContext();\n+        final Checkpoint setupDone = setup.checkpoint();\n+        helper.registry\n+                .addDeviceForTenant(tenantId, tenant, deviceId, PWD)\n+                .compose(ok -> helper.applicationClientFactory.createTelemetryConsumer(\n+                        tenantId, \n+                        (delivery, msg) -> {\n+                            logger.debug(\"received {}\", msg);\n+                            messageReceived.flag();\n+                            // don't update the delivery state here\n+                        },\n+                        false, \n+                        remoteClose -> {}))\n+                .onComplete(setup.succeeding(v -> setupDone.flag()));\n+\n+        assertThat(setup.awaitCompletion(helper.getTestSetupTimeout(), TimeUnit.SECONDS)).isTrue();\n+        if (setup.failed()) {\n+            ctx.failNow(setup.causeOfFailure());\n+            return;\n+        }\n+\n+        // WHEN the device tries to upload a telemetry message\n+        final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                .add(HttpHeaders.CONTENT_TYPE, \"binary/octet-stream\")\n+                .add(HttpHeaders.AUTHORIZATION, authorization)\n+                .add(HttpHeaders.ORIGIN, ORIGIN_URI)\n+                .add(Constants.HEADER_QOS_LEVEL, \"1\");\n+\n+        // THEN the message gets rejected by the HTTP adapter with a 503\n+        final Future<HttpResponse<Buffer>> httpResponseFuture = httpClient.create(\n+                getEndpointUri(),\n+                Buffer.buffer(\"hello\"),\n+                requestHeaders,\n+                ResponsePredicate.status(HttpURLConnection.HTTP_UNAVAILABLE));\n+\n+        httpResponseFuture\n+                .onComplete(ctx.succeeding(response -> {\n+                    ctx.verify(() -> {\n+                        assertThat(response.bodyAsString()).isEqualTo(\"temporarily unavailable\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08d0695daca42fec9a1ccbc6474c0655087a0fa"}, "originalPosition": 107}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c08d0695daca42fec9a1ccbc6474c0655087a0fa", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/c08d0695daca42fec9a1ccbc6474c0655087a0fa", "committedDate": "2020-09-16T05:28:22Z", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "00704c96a5b8fe370ca682350c262645b1c21563", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/00704c96a5b8fe370ca682350c262645b1c21563", "committedDate": "2020-09-16T08:21:05Z", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "committedDate": "2020-09-16T13:10:40Z", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00704c96a5b8fe370ca682350c262645b1c21563", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/00704c96a5b8fe370ca682350c262645b1c21563", "committedDate": "2020-09-16T08:21:05Z", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac", "committedDate": "2020-09-16T13:10:40Z", "message": "Add unit tests for HTTP 503 responses.\n\nExtend ApplicationClientFactory with extra consumer\nmethods to allow setting the delivery state explicitly.\nPreparation for #2166.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzI0NDAx", "url": "https://github.com/eclipse/hono/pull/2179#pullrequestreview-489724401", "createdAt": "2020-09-16T15:06:22Z", "commit": {"oid": "85c48e11c07c2ef2be31cbe8d4c7cc7c6b6d1fac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 568, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}