{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNDAwOTkx", "number": 2374, "title": "Make inclusion of tenant ID configurable", "bodyText": "This addresses #2363\nThe MQTT adapter now supports a tenant specific boolean configuration\nproperty that allows to always include the tenant ID in the topic name\nused for publishing command messages.\nThis can be used to allow protocol gateways to determine a device's\ntenant from the topic name.", "createdAt": "2020-12-18T08:46:16Z", "url": "https://github.com/eclipse/hono/pull/2374", "merged": true, "mergeCommit": {"oid": "2032cbb9f18d1560adb9bf27225d9874eea4d60f"}, "closed": true, "closedAt": "2020-12-22T07:56:43Z", "author": {"login": "sophokles73"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoWBR_gH2gAyNTQyNDAwOTkxOjhkYzQwNmNiZDZiZjQ3ZjI0YzFlY2NjNTNlOTU1MGQ5NGZhMjQ4ZDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdolXx4AFqTU1Njg3MDE0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8dc406cbd6bf47f24c1eccc53e9550d94fa248d4", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/8dc406cbd6bf47f24c1eccc53e9550d94fa248d4", "committedDate": "2020-12-21T13:33:31Z", "message": "Encapsulate creation of command topic\n\nThe topic name to use for publishing a command to a device is now\nencapsulated within the CommandSubscription where all relevant\ninformation is available.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "610e1cf4fbfa762da62f28dbd7a697a875dfb84a", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/610e1cf4fbfa762da62f28dbd7a697a875dfb84a", "committedDate": "2020-12-18T08:44:11Z", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now supports a tenant specific boolean configuration\nproperty that allows to always include the tenant ID in the topic name\nused for publishing command messages.\n\nThis can be used to allow protocol gateways to determine a device's\ntenant from the topic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}, "afterCommit": {"oid": "69d36739b16ef9d297564e6107c5deb3abc859b8", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/69d36739b16ef9d297564e6107c5deb3abc859b8", "committedDate": "2020-12-21T13:33:31Z", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDAwMTYw", "url": "https://github.com/eclipse/hono/pull/2374#pullrequestreview-556400160", "createdAt": "2020-12-21T14:02:18Z", "commit": {"oid": "69d36739b16ef9d297564e6107c5deb3abc859b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDowMjoxOFrOIJZQyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDowMjoxOFrOIJZQyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyMTk5Mw==", "bodyText": "Not needed anymore.", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546721993", "createdAt": "2020-12-21T14:02:18Z", "author": {"login": "calohmn"}, "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java", "diffHunk": "@@ -32,13 +33,19 @@\n  * <p>\n  * Examples:\n  * <ol>\n- * <li>{@code command/+/+/req/#} - authenticated device and verbose format</li>\n- * <li>{@code c/+/+/q/#} - authenticated device with short format</li>\n- * <li>{@code command/DEFAULT_TENANT/4711/req/#} unauthenticated device with verbose format</li>\n+ * <li>{@code command/DEFAULT_TENANT/4711/req/#} unauthenticated device</li>\n+ * <li>{@code command///req/#} - authenticated device</li>\n+ * <li>{@code c///q/#} - authenticated device using short names</li>\n  * </ol>\n  */\n public final class CommandSubscription {\n \n+    /**\n+     * The name of the MQTT adapter configuration property that defines if the tenant ID is\n+     * always included in the topic name that is used for publishing a command to a client.\n+     */\n+    public static final String CONFIG_PROPERTY_ALWAYS_INCLUDE_TENANT_ID = \"always-include-tenant-id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d36739b16ef9d297564e6107c5deb3abc859b8"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69d36739b16ef9d297564e6107c5deb3abc859b8", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/69d36739b16ef9d297564e6107c5deb3abc859b8", "committedDate": "2020-12-21T13:33:31Z", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}, "afterCommit": {"oid": "c181c3b2241919f58a8952b388b22e20b2d393a4", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/c181c3b2241919f58a8952b388b22e20b2d393a4", "committedDate": "2020-12-21T14:26:21Z", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDM1NDA3", "url": "https://github.com/eclipse/hono/pull/2374#pullrequestreview-556435407", "createdAt": "2020-12-21T14:52:39Z", "commit": {"oid": "c181c3b2241919f58a8952b388b22e20b2d393a4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDo1MjozOVrOIJa64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDo1NDoxMlrOIJa-hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0OTE1NA==", "bodyText": "Strictly speaking, usage of command//${device-id}/req/# would work as well. So, maybe better to just use\ncommand///req/#\ncommand/${tenant-id}/${device-id}/req/#\nnoting that in the latter case  either tenant or device id may either be set to the value of the authenticated device or may be kept empty.", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546749154", "createdAt": "2020-12-21T14:52:39Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/user-guide/mqtt-adapter.md", "diffHunk": "@@ -274,25 +274,38 @@ The following variables are used:\n \n ### Receiving Commands (authenticated Device)\n \n-An authenticated device MUST use the topic filter `command///req/#` to subscribe to commands.\n+An authenticated device MUST use one of the following topic filters for subscribing to commands:\n+\n+* `command///req/#`\n+* `command/${tenant-id}//req/#`\n+* `command/${tenant-id}/${device-id}/req/#`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c3b2241919f58a8952b388b22e20b2d393a4"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1MDA4NA==", "bodyText": "\"the the\" -> \"and the\"", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546750084", "createdAt": "2020-12-21T14:54:12Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/user-guide/mqtt-adapter.md", "diffHunk": "@@ -301,14 +314,45 @@ command///q/1010f8ab0b53-bd96-4d99-9d9c-56b868474a6a/setBrightness\n A corresponding *one-way* command might look like this:\n \n ```plaintext\n-command///q//setBrightness\n+command///req//setBrightness\n {\n   \"brightness\": 79\n }\n ```\n \n Note that the topic in the latter case doesn't contain a request identifier.\n \n+The following command can be used to subscribe to commands resulting in command messages being published to a\n+topic that includes the tenant ID:\n+\n+```sh\n+mosquitto_sub -v -u 'sensor1@DEFAULT_TENANT' -P hono-secret -t c/DEFAULT_TENANT//q/#\n+```\n+\n+Note the usage of the abbreviated names (`c` and `q` instead of `command` and `req`) the the inclusion of the tenant ID\n+in the topic filter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c3b2241919f58a8952b388b22e20b2d393a4"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDE2Mzg4", "url": "https://github.com/eclipse/hono/pull/2374#pullrequestreview-556416388", "createdAt": "2020-12-21T14:26:00Z", "commit": {"oid": "69d36739b16ef9d297564e6107c5deb3abc859b8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoyNjowMFrOIJaBlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDozMDoyMlrOIJaLZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNDQ4NA==", "bodyText": "Missing  null check information in JavaDoc.", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546734484", "createdAt": "2020-12-21T14:26:00Z", "author": {"login": "kaniyan"}, "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/CommandSubscription.java", "diffHunk": "@@ -252,15 +269,11 @@ public boolean isGatewaySubscriptionForSpecificDevice() {\n      */\n     public String getCommandPublishTopic(final Command command) {\n \n-        // build topic string; examples:\n-        // command///req/xyz/light (authenticated device)\n-        // command///req//light (authenticated device, one-way)\n-        // command/DEFAULT_TENANT/4711/req/xyz/light (unauthenticated device)\n-        // command//4712/req/xyz/light (authenticated gateway)\n+        Objects.requireNonNull(command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d36739b16ef9d297564e6107c5deb3abc859b8"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNjg5Mw==", "bodyText": "At the end of the line, there is an extra semicolon.", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546736893", "createdAt": "2020-12-21T14:30:12Z", "author": {"login": "kaniyan"}, "path": "adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java", "diffHunk": "@@ -30,177 +38,397 @@\n public class CommandSubscriptionTest {\n \n     private final Device device = new Device(\"tenant\", \"device\");\n+    private final Device gw = new Device(\"tenant\", \"gw\");\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and correct pattern.\n-     */\n-    @Test\n-    public void testSubscriptionUnauth() {\n+    static Stream<String> endpointNames() {\n+        return Stream.of(getCommandEndpoint(), getCommandEndpointShort());\n+    }\n \n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenant1/deviceA/req/#\", null);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(\"req\");\n+    static Stream<Arguments> endpointAndReqNames() {\n+        return Stream.of(\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT));\n     }\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and correct short pattern.\n-     */\n-    @Test\n-    public void testSubscriptionUnauthShort() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant1/deviceA/q/#\", null);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n-        assertThat(subscription.getEndpoint()).isEqualTo(CommandConstants.COMMAND_ENDPOINT_SHORT);\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT);\n+    static Stream<Arguments> endpointAndReqNamesWithQoS() {\n+        return Stream.of(\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_LEAST_ONCE));\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern.\n+     * Verifies that creating a subscription for a topic fails if the endpoint is neither\n+     * {@value CommandConstants#COMMAND_ENDPOINT} nor {@value CommandConstants#COMMAND_ENDPOINT_SHORT}.\n      */\n     @Test\n-    public void testSubscriptionAuth() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenant/device/req/#\", device);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+    public void testSubscriptionRequiresCorrectEndpoint() {\n+        final CommandSubscription subscription = CommandSubscription.fromTopic(\"cx/tenant/device/req/#\", null);\n+        assertThat(subscription).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device, correct pattern and valid qos.\n+     * Verifies that creating a subscription for a topic fails if the client is unauthenticated and neither\n+     * tenant nor device ID are specified explicitly.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithQoS() {\n-        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n-                getCommandEndpoint() + \"/+/+/req/#\", MqttQoS.AT_LEAST_ONCE);\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device,\n-                \"testMqttClient\");\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getTopic()).isEqualTo(getCommandEndpoint() + \"/+/+/req/#\");\n-        assertThat(subscription.getQos()).isEqualTo(MqttQoS.AT_LEAST_ONCE);\n-        assertThat(subscription.getClientId()).isEqualTo(\"testMqttClient\");\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresExplicitTenantAndDeviceIdForUnauthenticatedClient(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s///%s/#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s/+/+/%s/#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with auth device differing device id in topic.\n-     * This represents a scenario where a gateway subscribes on behalf of a device.\n+     * Verifies that creating a subscription for a topic fails if the request part in the topic is neither\n+     * {@value CommandConstants#COMMAND_RESPONSE_REQUEST_PART} nor {@value CommandConstants#COMMAND_RESPONSE_REQUEST_PART_SHORT}.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithDifferentDeviceId() {\n-        final String gatewayManagedDeviceId = \"gatewayManagedDevice\";\n-        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n-                getCommandEndpoint() + \"//\" + gatewayManagedDeviceId + \"/req/#\", MqttQoS.AT_LEAST_ONCE);\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device,\n-                \"testMqttClient\");\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(gatewayManagedDeviceId);\n-        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getTopic()).isEqualTo(getCommandEndpoint() + \"//\" + gatewayManagedDeviceId + \"/req/#\");\n-        assertThat(subscription.getQos()).isEqualTo(MqttQoS.AT_LEAST_ONCE);\n-        assertThat(subscription.getClientId()).isEqualTo(\"testMqttClient\");\n-        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(true);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointNames\")\n+    public void testSubscriptionRequiresValidReqPart(final String endpointName) {\n+\n+        String topic = String.format(\"%s/tenant/device/notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s///notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n+\n+        topic = String.format(\"%s/+/+/notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct short pattern.\n+     * Verifies that creating a subscription for a topic fails if the topic ends in something else than the <em>#</em>\n+     * character.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthShort() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/#\", device);\n-        assertThat(subscription).isNotNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresWildcardSegmentAtEnd(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s/tenant/device/%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s///%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n+\n+        topic = String.format(\"%s/+/+/%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern with different tenant/device as in\n-     * authentication is not allowed.\n+     * Verifies that creating a subscription for a topic fails if the topic contains\n+     * fewer or more than 5 segments.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthDeviceDifferent() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenantA/deviceB/req/#\", device);\n-        assertThat(subscription).isNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresTopicWithFiveSegments(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s/tenant/device/%s/#/additionalSegment\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s/tenant/device/%s\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n     }\n \n+\n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern without given tenant/device.\n+     * Verifies that an unauthenticated device can successfully subscribe for commands\n+     * using the default topic.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithPattern() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/+/+/req/#\", device);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForUnauthenticatedDevice(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant1/deviceA/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, null, \"clientId\");\n         assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device omitting tenant and device IDs.\n+     * Verifies that an authenticated device can successfully subscribe for commands\n+     * targeted at itself using all variants of topic names.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithoutTenantDevice() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"///req/#\", device);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForAuthenticatedDevice(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final Command command = mock(Command.class);\n+        when(command.isTargetedAtGateway()).thenReturn(false);\n+        when(command.getTenant()).thenReturn(device.getTenantId());\n+        when(command.getDeviceId()).thenReturn(device.getDeviceId());\n+        when(command.getRequestId()).thenReturn(\"requestId\");\n+        when(command.getName()).thenReturn(\"doSomething\");\n+\n+        // WHEN subscribing to commands using explicit topic\n+        MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant/device/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n         assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART);\n-    }\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include both the tenant and device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s/%s/%s/requestId/doSomething\",\n+                    endpointName, device.getTenantId(), device.getDeviceId(), reqPartName));\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and not given tenant/device is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionUnauthWithPattern() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/+/+/req/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        // WHEN subscribing to commands including tenant only\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant//%s/#\", endpointName, reqPartName),\n+                qos);\n \n-    /**\n-     * Verifies subscription pattern with other endpoint as c and control is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionEndpoint() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"cx/tenant/device/q/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include the tenant as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s//%s/requestId/doSomething\",\n+                    endpointName, device.getTenantId(), reqPartName));\n \n-    /**\n-     * Verifies subscription pattern with other req part as q and req is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionReq() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/qx/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        // WHEN subscribing to commands including device ID only\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s//device/%s/#\", endpointName, reqPartName),\n+                qos);\n \n-    /**\n-     * Verifies subscription pattern with other ending part as # is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionEnd() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/a\", null);\n-        assertThat(subscription).isNull();\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include the device ID as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, device.getDeviceId(), reqPartName));\n+\n+        // WHEN subscribing to commands using implicit topic\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s///%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does not include tenant nor device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s///%s/requestId/doSomething\",\n+                    endpointName, reqPartName));\n+\n+        // WHEN subscribing to commands using the deprecated topic filter\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/+/+/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does not include tenant nor device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s///%s/requestId/doSomething\",\n+                    endpointName, reqPartName));\n+\n+        // using a tenant other than the tenant that the device belongs to should fail\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/otherTenant/device/%s/#\", endpointName, reqPartName),\n+                qos);\n+        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\")).isNull();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c3b2241919f58a8952b388b22e20b2d393a4"}, "originalPosition": 407}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNjk5Ng==", "bodyText": "At the end of the line, there is an extra semicolon.", "url": "https://github.com/eclipse/hono/pull/2374#discussion_r546736996", "createdAt": "2020-12-21T14:30:22Z", "author": {"login": "kaniyan"}, "path": "adapters/mqtt-vertx-base/src/test/java/org/eclipse/hono/adapter/mqtt/CommandSubscriptionTest.java", "diffHunk": "@@ -30,177 +38,397 @@\n public class CommandSubscriptionTest {\n \n     private final Device device = new Device(\"tenant\", \"device\");\n+    private final Device gw = new Device(\"tenant\", \"gw\");\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and correct pattern.\n-     */\n-    @Test\n-    public void testSubscriptionUnauth() {\n+    static Stream<String> endpointNames() {\n+        return Stream.of(getCommandEndpoint(), getCommandEndpointShort());\n+    }\n \n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenant1/deviceA/req/#\", null);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(\"req\");\n+    static Stream<Arguments> endpointAndReqNames() {\n+        return Stream.of(\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT));\n     }\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and correct short pattern.\n-     */\n-    @Test\n-    public void testSubscriptionUnauthShort() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant1/deviceA/q/#\", null);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n-        assertThat(subscription.getEndpoint()).isEqualTo(CommandConstants.COMMAND_ENDPOINT_SHORT);\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT);\n+    static Stream<Arguments> endpointAndReqNamesWithQoS() {\n+        return Stream.of(\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpoint(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_LEAST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_MOST_ONCE),\n+                Arguments.of(getCommandEndpointShort(), CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT, MqttQoS.AT_LEAST_ONCE));\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern.\n+     * Verifies that creating a subscription for a topic fails if the endpoint is neither\n+     * {@value CommandConstants#COMMAND_ENDPOINT} nor {@value CommandConstants#COMMAND_ENDPOINT_SHORT}.\n      */\n     @Test\n-    public void testSubscriptionAuth() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenant/device/req/#\", device);\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n-        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+    public void testSubscriptionRequiresCorrectEndpoint() {\n+        final CommandSubscription subscription = CommandSubscription.fromTopic(\"cx/tenant/device/req/#\", null);\n+        assertThat(subscription).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device, correct pattern and valid qos.\n+     * Verifies that creating a subscription for a topic fails if the client is unauthenticated and neither\n+     * tenant nor device ID are specified explicitly.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithQoS() {\n-        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n-                getCommandEndpoint() + \"/+/+/req/#\", MqttQoS.AT_LEAST_ONCE);\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device,\n-                \"testMqttClient\");\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getTopic()).isEqualTo(getCommandEndpoint() + \"/+/+/req/#\");\n-        assertThat(subscription.getQos()).isEqualTo(MqttQoS.AT_LEAST_ONCE);\n-        assertThat(subscription.getClientId()).isEqualTo(\"testMqttClient\");\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresExplicitTenantAndDeviceIdForUnauthenticatedClient(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s///%s/#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s/+/+/%s/#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with auth device differing device id in topic.\n-     * This represents a scenario where a gateway subscribes on behalf of a device.\n+     * Verifies that creating a subscription for a topic fails if the request part in the topic is neither\n+     * {@value CommandConstants#COMMAND_RESPONSE_REQUEST_PART} nor {@value CommandConstants#COMMAND_RESPONSE_REQUEST_PART_SHORT}.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithDifferentDeviceId() {\n-        final String gatewayManagedDeviceId = \"gatewayManagedDevice\";\n-        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n-                getCommandEndpoint() + \"//\" + gatewayManagedDeviceId + \"/req/#\", MqttQoS.AT_LEAST_ONCE);\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device,\n-                \"testMqttClient\");\n-        assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(gatewayManagedDeviceId);\n-        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getTopic()).isEqualTo(getCommandEndpoint() + \"//\" + gatewayManagedDeviceId + \"/req/#\");\n-        assertThat(subscription.getQos()).isEqualTo(MqttQoS.AT_LEAST_ONCE);\n-        assertThat(subscription.getClientId()).isEqualTo(\"testMqttClient\");\n-        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(true);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointNames\")\n+    public void testSubscriptionRequiresValidReqPart(final String endpointName) {\n+\n+        String topic = String.format(\"%s/tenant/device/notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s///notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n+\n+        topic = String.format(\"%s/+/+/notReqNorQ/#\", endpointName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct short pattern.\n+     * Verifies that creating a subscription for a topic fails if the topic ends in something else than the <em>#</em>\n+     * character.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthShort() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/#\", device);\n-        assertThat(subscription).isNotNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresWildcardSegmentAtEnd(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s/tenant/device/%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s///%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n+\n+        topic = String.format(\"%s/+/+/%s/not#\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, device)).isNull();\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern with different tenant/device as in\n-     * authentication is not allowed.\n+     * Verifies that creating a subscription for a topic fails if the topic contains\n+     * fewer or more than 5 segments.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n      */\n-    @Test\n-    public void testSubscriptionAuthDeviceDifferent() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/tenantA/deviceB/req/#\", device);\n-        assertThat(subscription).isNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNames\")\n+    public void testSubscriptionRequiresTopicWithFiveSegments(\n+            final String endpointName,\n+            final String reqPartName) {\n+\n+        String topic = String.format(\"%s/tenant/device/%s/#/additionalSegment\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n+\n+        topic = String.format(\"%s/tenant/device/%s\", endpointName, reqPartName);\n+        assertThat(CommandSubscription.fromTopic(topic, null)).isNull();\n     }\n \n+\n     /**\n-     * Verifies subscription pattern with authenticated device and correct pattern without given tenant/device.\n+     * Verifies that an unauthenticated device can successfully subscribe for commands\n+     * using the default topic.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithPattern() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/+/+/req/#\", device);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForUnauthenticatedDevice(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant1/deviceA/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        final CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, null, \"clientId\");\n         assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant1\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"deviceA\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n     }\n \n     /**\n-     * Verifies subscription pattern with authenticated device omitting tenant and device IDs.\n+     * Verifies that an authenticated device can successfully subscribe for commands\n+     * targeted at itself using all variants of topic names.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionAuthWithoutTenantDevice() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"///req/#\", device);\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForAuthenticatedDevice(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final Command command = mock(Command.class);\n+        when(command.isTargetedAtGateway()).thenReturn(false);\n+        when(command.getTenant()).thenReturn(device.getTenantId());\n+        when(command.getDeviceId()).thenReturn(device.getDeviceId());\n+        when(command.getRequestId()).thenReturn(\"requestId\");\n+        when(command.getName()).thenReturn(\"doSomething\");\n+\n+        // WHEN subscribing to commands using explicit topic\n+        MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant/device/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n         assertThat(subscription).isNotNull();\n-        assertThat(subscription.getTenant()).isEqualTo(device.getTenantId());\n-        assertThat(subscription.getDeviceId()).isEqualTo(device.getDeviceId());\n-        assertThat(subscription.getEndpoint()).isEqualTo(getCommandEndpoint());\n-        assertThat(subscription.getRequestPart()).isEqualTo(CommandConstants.COMMAND_RESPONSE_REQUEST_PART);\n-    }\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include both the tenant and device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s/%s/%s/requestId/doSomething\",\n+                    endpointName, device.getTenantId(), device.getDeviceId(), reqPartName));\n \n-    /**\n-     * Verifies subscription pattern without authenticated device and not given tenant/device is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionUnauthWithPattern() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(getCommandEndpoint() + \"/+/+/req/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        // WHEN subscribing to commands including tenant only\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/tenant//%s/#\", endpointName, reqPartName),\n+                qos);\n \n-    /**\n-     * Verifies subscription pattern with other endpoint as c and control is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionEndpoint() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"cx/tenant/device/q/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include the tenant as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s//%s/requestId/doSomething\",\n+                    endpointName, device.getTenantId(), reqPartName));\n \n-    /**\n-     * Verifies subscription pattern with other req part as q and req is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionReq() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/qx/#\", null);\n-        assertThat(subscription).isNull();\n-    }\n+        // WHEN subscribing to commands including device ID only\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s//device/%s/#\", endpointName, reqPartName),\n+                qos);\n \n-    /**\n-     * Verifies subscription pattern with other ending part as # is not allowed.\n-     */\n-    @Test\n-    public void testSubscriptionEnd() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/a\", null);\n-        assertThat(subscription).isNull();\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does include the device ID as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, device.getDeviceId(), reqPartName));\n+\n+        // WHEN subscribing to commands using implicit topic\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s///%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does not include tenant nor device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s///%s/requestId/doSomething\",\n+                    endpointName, reqPartName));\n+\n+        // WHEN subscribing to commands using the deprecated topic filter\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/+/+/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(\"tenant\");\n+        assertThat(subscription.getDeviceId()).isEqualTo(\"device\");\n+        assertThat(subscription.getEndpoint()).isEqualTo(endpointName);\n+        assertThat(subscription.getRequestPart()).isEqualTo(reqPartName);\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        // THEN the command topic does not include tenant nor device ID\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s///%s/requestId/doSomething\",\n+                    endpointName, reqPartName));\n+\n+        // using a tenant other than the tenant that the device belongs to should fail\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/otherTenant/device/%s/#\", endpointName, reqPartName),\n+                qos);\n+        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, device, \"clientId\")).isNull();;\n     }\n \n     /**\n-     * Verifies subscription pattern with other then 5 parts is not allowed.\n+     * Verifies that an authenticated gateway can successfully subscribe for commands\n+     * targeted at one of devices that it is authorized to act on behalf of.\n+     *\n+     * @param endpointName The endpoint name used in the topic.\n+     * @param reqPartName The request part name used in the topic.\n+     * @param qos The requested QoS.\n      */\n-    @Test\n-    public void testSubscriptionParts() {\n-        final CommandSubscription subscription = CommandSubscription.fromTopic(\"c/tenant/device/q/#/x\", null);\n-        assertThat(subscription).isNull();\n-        final CommandSubscription subscription2 = CommandSubscription.fromTopic(\"c/tenant/device/q\", null);\n-        assertThat(subscription2).isNull();\n+    @ParameterizedTest\n+    @MethodSource(\"endpointAndReqNamesWithQoS\")\n+    public void testSubscriptionSucceedsForAuthenticatedGateway(\n+            final String endpointName,\n+            final String reqPartName,\n+            final MqttQoS qos) {\n+\n+        final String gatewayManagedDeviceId = \"gatewayManagedDevice\";\n+\n+        final Command command = mock(Command.class);\n+        when(command.isTargetedAtGateway()).thenReturn(true);\n+        when(command.getTenant()).thenReturn(gw.getTenantId());\n+        when(command.getDeviceId()).thenReturn(gw.getDeviceId());\n+        when(command.getOriginalDeviceId()).thenReturn(gatewayManagedDeviceId);\n+        when(command.getRequestId()).thenReturn(\"requestId\");\n+        when(command.getName()).thenReturn(\"doSomething\");\n+\n+        // WHEN subscribing to commands for a specific device omitting tenant\n+        MqttTopicSubscription mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s//%s/%s/#\", endpointName, gatewayManagedDeviceId, reqPartName),\n+                qos);\n+\n+        CommandSubscription subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gatewayManagedDeviceId);\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(true);\n+        // THEN the command topic does not include the tenant either\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, gatewayManagedDeviceId, reqPartName));\n+\n+        // WHEN subscribing to commands for a specific device including the tenant\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/%s/%s/%s/#\", endpointName, device.getTenantId(), gatewayManagedDeviceId, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gatewayManagedDeviceId);\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(true);\n+        // THEN the command topic does include the tenant as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s/%s/%s/requestId/doSomething\",\n+                    endpointName, gw.getTenantId(), gatewayManagedDeviceId, reqPartName));\n+\n+        // WHEN subscribing to commands for all devices omitting tenant\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s//+/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(false);\n+        // THEN the command topic does not include the tenant either\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, gatewayManagedDeviceId, reqPartName));\n+\n+        // WHEN subscribing to commands for all devices including the tenant\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/%s/+/%s/#\", endpointName, device.getTenantId(), reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(false);\n+        // THEN the command topic does include the tenant as well\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s/%s/%s/%s/requestId/doSomething\",\n+                    endpointName, gw.getTenantId(), gatewayManagedDeviceId, reqPartName));\n+\n+        // WHEN subscribing to commands for all devices using the deprecated topic filter\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/+/+/%s/#\", endpointName, reqPartName),\n+                qos);\n+\n+        subscription = CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\");\n+        assertThat(subscription).isNotNull();\n+        assertThat(subscription.getTenant()).isEqualTo(gw.getTenantId());\n+        assertThat(subscription.getDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getAuthenticatedDeviceId()).isEqualTo(gw.getDeviceId());\n+        assertThat(subscription.getQos()).isEqualTo(qos);\n+        assertThat(subscription.getClientId()).isEqualTo(\"clientId\");\n+        assertThat(subscription.isGatewaySubscriptionForSpecificDevice()).isEqualTo(false);\n+        // THEN the command topic does not include the tenant either\n+        assertThat(subscription.getCommandPublishTopic(command))\n+            .isEqualTo(String.format(\"%s//%s/%s/requestId/doSomething\",\n+                    endpointName, gatewayManagedDeviceId, reqPartName));\n+\n+        // using a tenant other than the tenant that the gateway belongs to should fail\n+        mqttTopicSubscription = new MqttTopicSubscriptionImpl(\n+                String.format(\"%s/otherTenant/+/%s/#\", endpointName, reqPartName),\n+                qos);\n+        assertThat(CommandSubscription.fromTopic(mqttTopicSubscription, gw, \"clientId\")).isNull();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c3b2241919f58a8952b388b22e20b2d393a4"}, "originalPosition": 536}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8cd9ace38c706590ea3410926cf97df03bf98e1", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/c8cd9ace38c706590ea3410926cf97df03bf98e1", "committedDate": "2020-12-21T17:34:45Z", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c181c3b2241919f58a8952b388b22e20b2d393a4", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/c181c3b2241919f58a8952b388b22e20b2d393a4", "committedDate": "2020-12-21T14:26:21Z", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}, "afterCommit": {"oid": "c8cd9ace38c706590ea3410926cf97df03bf98e1", "author": {"user": {"login": "sophokles73", "name": "Kai Hudalla"}}, "url": "https://github.com/eclipse/hono/commit/c8cd9ace38c706590ea3410926cf97df03bf98e1", "committedDate": "2020-12-21T17:34:45Z", "message": "[#2363] Support inclusion of tenant ID in command topic\n\nThe MQTT adapter now allows clients to indicate whether they want the\ntarget device's tenant and/or device IDs to be included in the topic\nused when publishing commands.\n\nThis can be helpful for implementing (multi-tenant) protocol gateways\nwhich can then determine a device's tenant and/or device ID from the\ntopic name.\n\nSigned-off-by: Kai Hudalla <kai.hudalla@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NTYwMzQx", "url": "https://github.com/eclipse/hono/pull/2374#pullrequestreview-556560341", "createdAt": "2020-12-21T17:53:16Z", "commit": {"oid": "c8cd9ace38c706590ea3410926cf97df03bf98e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODcwMTQ4", "url": "https://github.com/eclipse/hono/pull/2374#pullrequestreview-556870148", "createdAt": "2020-12-22T07:26:40Z", "commit": {"oid": "c8cd9ace38c706590ea3410926cf97df03bf98e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 492, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}