{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTY3ODQw", "number": 2034, "title": "Allow to use empty payloads with the TTN provider", "bodyText": "The TTN provider allows to send an empty payload message. This is indicated by an explicit null value in the payload_raw field.\nThis PR adds support for properly parsing and testing the TTN provider for this type of payload and also corrects the content type for that case for all providers.", "createdAt": "2020-06-16T12:01:48Z", "url": "https://github.com/eclipse/hono/pull/2034", "merged": true, "mergeCommit": {"oid": "ed316b54222fed5b96aeda675e33e3d5426004a7"}, "closed": true, "closedAt": "2020-06-18T08:18:51Z", "author": {"login": "ctron"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrz9S0AH2gAyNDM1MTY3ODQwOjcyMGRlMmQzNmEwNGRjMjZhNDE5MzhjNmU5YmUwZmU4NjgzYzNkMmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsZRR3gFqTQzMzAwNzczMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/720de2d36a04dc26a41938c6e9be0fe8683c3d2a", "committedDate": "2020-06-16T11:56:56Z", "message": "Allow to use empty payloads with the TTN provider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTA0Nzc3", "url": "https://github.com/eclipse/hono/pull/2034#pullrequestreview-432104777", "createdAt": "2020-06-17T06:50:08Z", "commit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1MDowOVrOGk36QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1Mjo0M1rOGk3-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzk1Mw==", "bodyText": "so far we have defined this content type for events only. However, the adapter sends all downstream messages using the Telemetry API ...", "url": "https://github.com/eclipse/hono/pull/2034#discussion_r441317953", "createdAt": "2020-06-17T06:50:09Z", "author": {"login": "sophokles73"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/impl/LoraProtocolAdapter.java", "diffHunk": "@@ -202,16 +203,21 @@ void handleProviderRoute(final RoutingContext ctx, final LoraProvider provider)\n                     final Buffer payload = uplinkMessage.getPayload();\n \n                     Optional.ofNullable(uplinkMessage.getNormalizedData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n+                            .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n \n                     Optional.ofNullable(uplinkMessage.getAdditionalData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n-\n-                    final String contentType = String.format(\n-                            \"%s%s%s\",\n-                            LoraConstants.CONTENT_TYPE_LORA_BASE,\n-                            provider.getProviderName(),\n-                            LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                            .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n+\n+                    final String contentType;\n+                    if (payload.length() > 0) {\n+                        contentType = String.format(\n+                                \"%s%s%s\",\n+                                LoraConstants.CONTENT_TYPE_LORA_BASE,\n+                                provider.getProviderName(),\n+                                LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                    } else {\n+                        contentType = EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxOTEyMw==", "bodyText": "nice \ud83d\udc4d", "url": "https://github.com/eclipse/hono/pull/2034#discussion_r441319123", "createdAt": "2020-06-17T06:52:43Z", "author": {"login": "sophokles73"}, "path": "adapters/lora-vertx/src/test/java/org/eclipse/hono/adapter/lora/providers/LoraTestUtil.java", "diffHunk": "@@ -38,14 +41,21 @@ private LoraTestUtil() {\n      *\n      * @param providerName The name of the provider to load the file for.\n      * @param type The type of message to load.\n+     * @param classifiers additional classifiers of the test file.\n      * @return the contents of the file.\n      * @throws IOException if the test file could not be loaded.\n      * @throws URISyntaxException if the test file could not be loaded.\n      */\n-    public static Buffer loadTestFile(final String providerName, final LoraMessageType type) throws IOException, URISyntaxException {\n+    public static Buffer loadTestFile(final String providerName, final LoraMessageType type, final String... classifiers) throws IOException, URISyntaxException {\n         Objects.requireNonNull(providerName);\n         Objects.requireNonNull(type);\n-        final URL location = LoraTestUtil.class.getResource(String.format(\"/payload/%s.%s.json\", providerName, type.name().toLowerCase()));\n+        final String name = Stream\n+                .<String>concat(\n+                        Stream.of(providerName, type.name().toLowerCase()),\n+                        Arrays.stream(classifiers))\n+                .collect(Collectors.joining(\".\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDA3NzMw", "url": "https://github.com/eclipse/hono/pull/2034#pullrequestreview-433007730", "createdAt": "2020-06-18T07:25:15Z", "commit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 668, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}