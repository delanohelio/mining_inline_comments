{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODY2MDIy", "number": 2204, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxMzozMVrOEnbiVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxNDo1MlrOEnbj3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgxMDc4OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxMzozMVrOHYBFVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzowMzozMFrOHYCs8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NTYyMg==", "bodyText": "does it make a big difference to handle the two cases differently? I would assume that MongoDB internally treats both cases the same anyway, i.e. wrapping a literal string with ^ and $, thus turning it into a regex.\nWe could then simply let DeviceRegistryUtils.getRegexExpressionForSearchOperation handle all filters ...", "url": "https://github.com/eclipse/hono/pull/2204#discussion_r494945622", "createdAt": "2020-09-25T12:13:31Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -142,10 +143,18 @@ public MongoDbDocumentBuilder withAuthId(final String authId) {\n     public MongoDbDocumentBuilder withDeviceFilters(final List<Filter> filters) {\n \n         filters.forEach(filter -> {\n-            // TODO: To implement when filter values contain patterns such as * or %\n-            document.put(mapDeviceField(filter.getField()), filter.getValue());\n+            if (filter.getValue() instanceof String) {\n+                final String value = (String) filter.getValue();\n+                if (value.contains(\"*\") || value.contains(\"?\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6de4c742aa404decb9d90f2d33411ffd0dbc051"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2NDcxNQ==", "bodyText": "I didn't find any official info on how it is being handled internally by MongoDB. Hence I used the above approach. If the value doesn't contain '*' or '?', then the query wouldn't involve regex keyword. Based on the above approach it would be {\"device-id\" : \"4711\"}}. Else it would be{\"field\",  {\"device-id\" : {\"regex\" : \"^4711$\"}}. If you think it doesn't make any difference, I can treat both the cases same.", "url": "https://github.com/eclipse/hono/pull/2204#discussion_r494964715", "createdAt": "2020-09-25T12:50:01Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -142,10 +143,18 @@ public MongoDbDocumentBuilder withAuthId(final String authId) {\n     public MongoDbDocumentBuilder withDeviceFilters(final List<Filter> filters) {\n \n         filters.forEach(filter -> {\n-            // TODO: To implement when filter values contain patterns such as * or %\n-            document.put(mapDeviceField(filter.getField()), filter.getValue());\n+            if (filter.getValue() instanceof String) {\n+                final String value = (String) filter.getValue();\n+                if (value.contains(\"*\") || value.contains(\"?\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NTYyMg=="}, "originalCommit": {"oid": "b6de4c742aa404decb9d90f2d33411ffd0dbc051"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3MjE0Nw==", "bodyText": "we can refactor it if we run into another place where we need to transform wildcards into a regex ...", "url": "https://github.com/eclipse/hono/pull/2204#discussion_r494972147", "createdAt": "2020-09-25T13:03:30Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -142,10 +143,18 @@ public MongoDbDocumentBuilder withAuthId(final String authId) {\n     public MongoDbDocumentBuilder withDeviceFilters(final List<Filter> filters) {\n \n         filters.forEach(filter -> {\n-            // TODO: To implement when filter values contain patterns such as * or %\n-            document.put(mapDeviceField(filter.getField()), filter.getValue());\n+            if (filter.getValue() instanceof String) {\n+                final String value = (String) filter.getValue();\n+                if (value.contains(\"*\") || value.contains(\"?\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NTYyMg=="}, "originalCommit": {"oid": "b6de4c742aa404decb9d90f2d33411ffd0dbc051"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgxNDY5OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxNDo1MlrOHYBHxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzowMjoyN1rOHYCq7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NjI0Nw==", "bodyText": "is there a particular reason why you want to use the brackets here?", "url": "https://github.com/eclipse/hono/pull/2204#discussion_r494946247", "createdAt": "2020-09-25T12:14:52Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -284,4 +287,36 @@ public static boolean matchesWithClientContext(final JsonObject credential,\n                         .orElse(true));\n \n     }\n+\n+    /**\n+     * Returns a regex expression based on the given filter value which can be used by the device registry \n+     * implementations to support wildcard matching during search operations.\n+     * <p>\n+     * The below wildcard characters are supported.\n+     * <ol>\n+     * <li>`*` will match zero or any number of characters.</li>\n+     * <li>`?` will match exactly one character.</li>\n+     * </ol>\n+     * @param filterValue The value corresponding to the field to use for filtering.\n+     * @return The regex expression to use for filtering.\n+     * @throws NullPointerException if the filterValue is {@code null}\n+     */\n+    public static String getRegexExpressionForSearchOperation(final String filterValue) {\n+        Objects.requireNonNull(filterValue);\n+\n+        return Collections.list(new StringTokenizer(filterValue, \"*?\", true))\n+                .stream()\n+                .map(token -> (String) token)\n+                .map(token -> {\n+                    if (token.equals(\"*\")) {\n+                        return \"(.*)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6de4c742aa404decb9d90f2d33411ffd0dbc051"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0OTEwNw==", "bodyText": "The grouping has no special meaning here. I personally find that it improves the readability in log statements.", "url": "https://github.com/eclipse/hono/pull/2204#discussion_r494949107", "createdAt": "2020-09-25T12:20:29Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -284,4 +287,36 @@ public static boolean matchesWithClientContext(final JsonObject credential,\n                         .orElse(true));\n \n     }\n+\n+    /**\n+     * Returns a regex expression based on the given filter value which can be used by the device registry \n+     * implementations to support wildcard matching during search operations.\n+     * <p>\n+     * The below wildcard characters are supported.\n+     * <ol>\n+     * <li>`*` will match zero or any number of characters.</li>\n+     * <li>`?` will match exactly one character.</li>\n+     * </ol>\n+     * @param filterValue The value corresponding to the field to use for filtering.\n+     * @return The regex expression to use for filtering.\n+     * @throws NullPointerException if the filterValue is {@code null}\n+     */\n+    public static String getRegexExpressionForSearchOperation(final String filterValue) {\n+        Objects.requireNonNull(filterValue);\n+\n+        return Collections.list(new StringTokenizer(filterValue, \"*?\", true))\n+                .stream()\n+                .map(token -> (String) token)\n+                .map(token -> {\n+                    if (token.equals(\"*\")) {\n+                        return \"(.*)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NjI0Nw=="}, "originalCommit": {"oid": "b6de4c742aa404decb9d90f2d33411ffd0dbc051"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3MTYyOQ==", "bodyText": "I would assume that it makes evaluating the regex more expensive because of the grouping, but that might be negligible", "url": "https://github.com/eclipse/hono/pull/2204#discussion_r494971629", "createdAt": "2020-09-25T13:02:27Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -284,4 +287,36 @@ public static boolean matchesWithClientContext(final JsonObject credential,\n                         .orElse(true));\n \n     }\n+\n+    /**\n+     * Returns a regex expression based on the given filter value which can be used by the device registry \n+     * implementations to support wildcard matching during search operations.\n+     * <p>\n+     * The below wildcard characters are supported.\n+     * <ol>\n+     * <li>`*` will match zero or any number of characters.</li>\n+     * <li>`?` will match exactly one character.</li>\n+     * </ol>\n+     * @param filterValue The value corresponding to the field to use for filtering.\n+     * @return The regex expression to use for filtering.\n+     * @throws NullPointerException if the filterValue is {@code null}\n+     */\n+    public static String getRegexExpressionForSearchOperation(final String filterValue) {\n+        Objects.requireNonNull(filterValue);\n+\n+        return Collections.list(new StringTokenizer(filterValue, \"*?\", true))\n+                .stream()\n+                .map(token -> (String) token)\n+                .map(token -> {\n+                    if (token.equals(\"*\")) {\n+                        return \"(.*)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NjI0Nw=="}, "originalCommit": {"oid": "b6de4c742aa404decb9d90f2d33411ffd0dbc051"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3080, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}