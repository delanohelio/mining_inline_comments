{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MzEyNTA5", "number": 2178, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDowOToxNVrOEjnIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxNzowNFrOEjnWiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzc2Njg4OnYy", "diffSide": "RIGHT", "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDowOToxNVrOHSDxrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDowOToxNVrOHSDxrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5ODI4NA==", "bodyText": "we should also remove the duplicate recording on the registrationClient for the variant that is no longer invoked by AbstractProtocolAdapterBase ...", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488698284", "createdAt": "2020-09-15T14:09:15Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "diffHunk": "@@ -359,20 +358,15 @@ public void testGetRegistrationAssertionSucceedsForExistingDevice(final VertxTes\n         when(registrationClient.assertRegistration(eq(\"device\"), any())).thenReturn(Future.succeededFuture(assertionResult));\n         when(registrationClient.assertRegistration(eq(\"device\"), any(), any())).thenReturn(Future.succeededFuture(assertionResult));\n \n-        final Checkpoint assertion = ctx.checkpoint();\n         // WHEN an assertion for the device is retrieved\n         adapter.getRegistrationAssertion(\"tenant\", \"device\", null, mock(SpanContext.class))\n-                .onComplete(ctx.succeeding(result -> ctx.verify(() -> {\n-            // THEN the result contains the registration assertion\n-            assertEquals(assertionResult, result);\n-            assertion.flag();\n-        })));\n-        adapter.getRegistrationAssertion(\"tenant\", \"device\", null, mock(SpanContext.class))\n-                .onComplete(ctx.succeeding(result -> ctx.verify(() -> {\n-            // THEN the result contains the registration assertion\n-            assertEquals(assertionResult, result);\n-            assertion.flag();\n-        })));\n+                .onComplete(ctx.succeeding(result -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzc3MjEwOnYy", "diffSide": "RIGHT", "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxMDoxOVrOHSD09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxMDoxOVrOHSD09Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5OTEyNQ==", "bodyText": "see above, remove duplicate recording ...", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488699125", "createdAt": "2020-09-15T14:10:19Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "diffHunk": "@@ -390,20 +384,15 @@ public void testGetRegistrationAssertionFailsWith404ForNonExistingDevice(final V\n         when(registrationClient.assertRegistration(eq(\"non-existent\"), any(), any())).thenReturn(\n                 Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND)));\n \n-        final Checkpoint assertion = ctx.checkpoint();\n         // WHEN an assertion for a non-existing device is retrieved\n         adapter.getRegistrationAssertion(\"tenant\", \"non-existent\", null, mock(SpanContext.class))\n-                .onComplete(ctx.failing(t -> ctx.verify(() -> {\n-            // THEN the request fails with a 404\n-            assertEquals(HttpURLConnection.HTTP_NOT_FOUND, ((ServiceInvocationException) t).getErrorCode());\n-            assertion.flag();\n-        })));\n-        adapter.getRegistrationAssertion(\"tenant\", \"non-existent\", null, mock(SpanContext.class))\n-                .onComplete(ctx.failing(t -> ctx.verify(() -> {\n-            // THEN the request fails with a 404\n-            assertEquals(HttpURLConnection.HTTP_NOT_FOUND, ((ServiceInvocationException) t).getErrorCode());\n-            assertion.flag();\n-        })));\n+                .onComplete(ctx.failing(t -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzc4MTY1OnYy", "diffSide": "RIGHT", "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxMjoyM1rOHSD6xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjowODoyN1rOHShfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMDYxMw==", "bodyText": "why should this change be necessary?", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488700613", "createdAt": "2020-09-15T14:12:23Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "diffHunk": "@@ -99,7 +99,7 @@ void testHealthCheckServerWithInsecureEndpoint(final Vertx vertx, final VertxTes\n             .map(ok -> getWebClient(vertx, server, false))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/liveness\"))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/readiness\"))\n-            .onComplete(ctx.completing());\n+            .onComplete(ctx.succeeding(v -> testsDone.flag()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1Nzg5Nw==", "bodyText": "Because registerHealthChecks(ctx, server, 1); a few lines above creates checkpoints (1 is the number of checkpoint passes).\nI've now renamed the method to registerHealthCheckCheckpoints to make this more obvious.", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488857897", "createdAt": "2020-09-15T17:53:47Z", "author": {"login": "calohmn"}, "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "diffHunk": "@@ -99,7 +99,7 @@ void testHealthCheckServerWithInsecureEndpoint(final Vertx vertx, final VertxTes\n             .map(ok -> getWebClient(vertx, server, false))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/liveness\"))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/readiness\"))\n-            .onComplete(ctx.completing());\n+            .onComplete(ctx.succeeding(v -> testsDone.flag()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMDYxMw=="}, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NTEyNw==", "bodyText": "Ah, my bad, didn't see that ...", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r489185127", "createdAt": "2020-09-16T06:08:27Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "diffHunk": "@@ -99,7 +99,7 @@ void testHealthCheckServerWithInsecureEndpoint(final Vertx vertx, final VertxTes\n             .map(ok -> getWebClient(vertx, server, false))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/liveness\"))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/readiness\"))\n-            .onComplete(ctx.completing());\n+            .onComplete(ctx.succeeding(v -> testsDone.flag()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMDYxMw=="}, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzc4MzEzOnYy", "diffSide": "RIGHT", "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxMjo0M1rOHSD7xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjowODozOVrOHShfpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMDg2OQ==", "bodyText": "why should this change be necessary?", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488700869", "createdAt": "2020-09-15T14:12:43Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "diffHunk": "@@ -128,7 +129,7 @@ void testHealthCheckServerWithSecureEndpoint(final Vertx vertx, final VertxTestC\n             .map(ok -> getWebClient(vertx, server, true))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/liveness\"))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/readiness\"))\n-            .onComplete(ctx.completing());\n+            .onComplete(ctx.succeeding(v -> testsDone.flag()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1ODQ1Mg==", "bodyText": "Because of the registerHealthChecks invocation before - see obvious.", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488858452", "createdAt": "2020-09-15T17:54:43Z", "author": {"login": "calohmn"}, "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "diffHunk": "@@ -128,7 +129,7 @@ void testHealthCheckServerWithSecureEndpoint(final Vertx vertx, final VertxTestC\n             .map(ok -> getWebClient(vertx, server, true))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/liveness\"))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/readiness\"))\n-            .onComplete(ctx.completing());\n+            .onComplete(ctx.succeeding(v -> testsDone.flag()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMDg2OQ=="}, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NTE4OA==", "bodyText": "I see", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r489185188", "createdAt": "2020-09-16T06:08:39Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "diffHunk": "@@ -128,7 +129,7 @@ void testHealthCheckServerWithSecureEndpoint(final Vertx vertx, final VertxTestC\n             .map(ok -> getWebClient(vertx, server, true))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/liveness\"))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/readiness\"))\n-            .onComplete(ctx.completing());\n+            .onComplete(ctx.succeeding(v -> testsDone.flag()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMDg2OQ=="}, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzc4MzkzOnYy", "diffSide": "RIGHT", "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxMjo1NFrOHSD8UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjowODo0N1rOHShfzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMTAwOA==", "bodyText": "why should this change be necessary?", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488701008", "createdAt": "2020-09-15T14:12:54Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "diffHunk": "@@ -158,7 +160,7 @@ void testHealthCheckServerWithSecureAndInsecureEndpoint(final Vertx vertx, final\n             .compose(result -> Future.succeededFuture(getWebClient(vertx, server, false)))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/liveness\"))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/readiness\"))\n-            .onComplete(ctx.completing());\n+            .onComplete(ctx.succeeding(v -> testsDone.flag()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1ODUwMg==", "bodyText": "Because of the registerHealthChecks invocation before - see obvious.", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488858502", "createdAt": "2020-09-15T17:54:48Z", "author": {"login": "calohmn"}, "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "diffHunk": "@@ -158,7 +160,7 @@ void testHealthCheckServerWithSecureAndInsecureEndpoint(final Vertx vertx, final\n             .compose(result -> Future.succeededFuture(getWebClient(vertx, server, false)))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/liveness\"))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/readiness\"))\n-            .onComplete(ctx.completing());\n+            .onComplete(ctx.succeeding(v -> testsDone.flag()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMTAwOA=="}, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NTIyOQ==", "bodyText": "I see", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r489185229", "createdAt": "2020-09-16T06:08:47Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/VertxBasedHealthCheckServerTest.java", "diffHunk": "@@ -158,7 +160,7 @@ void testHealthCheckServerWithSecureAndInsecureEndpoint(final Vertx vertx, final\n             .compose(result -> Future.succeededFuture(getWebClient(vertx, server, false)))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/liveness\"))\n             .compose(httpClient -> checkHealth(ctx, httpClient, \"/readiness\"))\n-            .onComplete(ctx.completing());\n+            .onComplete(ctx.succeeding(v -> testsDone.flag()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMTAwOA=="}, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzc4OTU1OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/CommandAndControlAmqpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxNDowOFrOHSD_5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxNDowOFrOHSD_5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMTkyNg==", "bodyText": "nice catch \ud83d\udc4d", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488701926", "createdAt": "2020-09-15T14:14:08Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/CommandAndControlAmqpIT.java", "diffHunk": "@@ -169,7 +170,7 @@ private void connectAndSubscribe(\n                 recv.flow(50);\n                 return null;\n             }))\n-        .onComplete(setup.completing());\n+        .onComplete(setup.succeeding(v -> setupDone.flag()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzgwMjA4OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/CommandAndControlAmqpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxNjo0NlrOHSEHxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxNjo0NlrOHSEHxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMzk0MA==", "bodyText": "nice catch", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488703940", "createdAt": "2020-09-15T14:16:46Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/CommandAndControlAmqpIT.java", "diffHunk": "@@ -535,7 +538,7 @@ public void testSendCommandFailsForMalformedMessage(\n             preconditions.flag();\n             return s;\n         })\n-        .onComplete(setup.completing());\n+        .onComplete(setup.succeeding(v -> setupDone.flag()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzgwMzYzOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/CommandAndControlAmqpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxNzowNFrOHSEIww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxNzowNFrOHSEIww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNDE5NQ==", "bodyText": "nice catch", "url": "https://github.com/eclipse/hono/pull/2178#discussion_r488704195", "createdAt": "2020-09-15T14:17:04Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/CommandAndControlAmqpIT.java", "diffHunk": "@@ -609,7 +613,7 @@ public void testSendCommandFailsWhenNoCredit(\n                 recv.flow(1); // just give 1 initial credit\n                 return null;\n             }))\n-        .onComplete(setup.completing());\n+        .onComplete(setup.succeeding(v -> setupDone.flag()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd176c78ead2def32c32707fb83e5d82e8c3cbb"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3053, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}