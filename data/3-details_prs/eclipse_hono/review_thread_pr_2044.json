{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3ODI3NDA1", "number": 2044, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo0OTo0MVrOEHlFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1MTo1NlrOEHlI6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzgyOTkzOnYy", "diffSide": "RIGHT", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/Location.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo0OTo0MVrOGnBdlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo0OTo0MVrOGnBdlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MTYwNA==", "bodyText": "I think when it comes to coordinates, there should be a very explicit definition of what the coordinate system is.", "url": "https://github.com/eclipse/hono/pull/2044#discussion_r443571604", "createdAt": "2020-06-22T13:49:41Z", "author": {"login": "ctron"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/Location.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.adapter.lora;\n+\n+import java.util.Objects;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A 3D geo-location that consists of longitude, latitude and (optional) altitude.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf91bdde13b121f6faf15e605125431e59bbe44e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzgzMzczOnYy", "diffSide": "RIGHT", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/LoraMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1MDozNlrOGnBf6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1MDozNlrOGnBf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MjIwMg==", "bodyText": "Same here, for every metric there should be a clear and explicit definition of the unit of measurement.", "url": "https://github.com/eclipse/hono/pull/2044#discussion_r443572202", "createdAt": "2020-06-22T13:50:36Z", "author": {"login": "ctron"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/LoraMetaData.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.adapter.lora;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A container for meta information contained in Lora\n+ * messages.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public final class LoraMetaData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf91bdde13b121f6faf15e605125431e59bbe44e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzgzOTc2OnYy", "diffSide": "RIGHT", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ActilityProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1MTo1NlrOGnBjlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1OToyN1rOGnB35w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MzE0MA==", "bodyText": "I would say, things like this belong into an enum.", "url": "https://github.com/eclipse/hono/pull/2044#discussion_r443573140", "createdAt": "2020-06-22T13:51:56Z", "author": {"login": "ctron"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ActilityProvider.java", "diffHunk": "@@ -87,145 +86,98 @@ protected Buffer extractPayload(final JsonObject loraMessage) {\n     }\n \n     @Override\n-    protected LoraMessageType extractMessageType(final JsonObject loraMessage) {\n+    protected LoraMessageType getMessageType(final JsonObject loraMessage) {\n         Objects.requireNonNull(loraMessage);\n         return getRootObject(loraMessage)\n                 .map(root -> LoraMessageType.UPLINK)\n                 .orElse(LoraMessageType.UNKNOWN);\n     }\n \n     @Override\n-    protected Map<String, Object> extractNormalizedData(final JsonObject loraMessage) {\n+    protected LoraMetaData getMetaData(final JsonObject loraMessage) {\n \n         Objects.requireNonNull(loraMessage);\n \n         return getRootObject(loraMessage)\n-            .map(this::getNormalizedData)\n-            .orElse(Map.of());\n+            .map(this::extractMetaData)\n+            .orElse(null);\n     }\n \n-    private Map<String, Object> getNormalizedData(final JsonObject rootObject) {\n-\n-        final Map<String, Object> data = new HashMap<>();\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LRR_RSSI,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_RSS,\n-                s -> Math.abs(Double.valueOf(s)),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_TX_POWER,\n-                Double.class,\n-                LoraConstants.APP_PROPERTY_TX_POWER,\n-                d -> d,\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_CHANNEL,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_CHANNEL,\n-                s -> s,\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_SUB_BAND,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_SUB_BAND,\n-                s -> s,\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_SPREADING_FACTOR,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_SPREADING_FACTOR,\n-                s -> Integer.valueOf(s),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LRR_SNR,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_SNR,\n-                s -> Math.abs(Double.valueOf(s)),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_FPORT,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_FUNCTION_PORT,\n-                s -> Integer.valueOf(s),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LATITUTDE,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_FUNCTION_LATITUDE,\n-                s -> Double.valueOf(s),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LONGITUDE,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_FUNCTION_LONGITUDE,\n-                s -> Double.valueOf(s),\n-                data);\n+    private LoraMetaData extractMetaData(final JsonObject rootObject) {\n+\n+        final LoraMetaData data = new LoraMetaData();\n+\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_SPREADING_FACTOR, String.class)\n+            .ifPresent(s -> data.setSpreadingFactor(Integer.valueOf(s)));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_FPORT, String.class)\n+            .ifPresent(s -> data.setFunctionPort(Integer.valueOf(s)));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_FRAME_COUNT_UPLINK, String.class)\n+            .ifPresent(s -> data.setFrameCount(Integer.valueOf(s)));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_ADR, String.class)\n+            .ifPresent(s -> data.setAdaptiveDataRateEnabled(s.equals(\"1\") ? Boolean.TRUE : Boolean.FALSE));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_CHANNEL, String.class)\n+            .map(this::getFrequency)\n+            .ifPresent(data::setFrequency);\n \n         LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LRRS, JsonObject.class)\n             .map(lrrs -> lrrs.getValue(FIELD_ACTILITY_LRR))\n             .filter(JsonArray.class::isInstance)\n             .map(JsonArray.class::cast)\n             .ifPresent(lrrList -> {\n-                final JsonArray normalizedGateways = lrrList.stream()\n+                final Optional<String> gwId = LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LRR_ID, String.class);\n+                lrrList.stream()\n                     .filter(JsonObject.class::isInstance)\n                     .map(JsonObject.class::cast)\n-                    .map(lrr -> {\n-                        final JsonObject normalizedGateway = new JsonObject();\n-                        LoraUtils.getChildObject(lrr, FIELD_ACTILITY_LRR_ID, String.class)\n-                            .ifPresent(s -> normalizedGateway.put(LoraConstants.GATEWAY_ID, s));\n-                        LoraUtils.getChildObject(lrr, FIELD_ACTILITY_LRR_RSSI, String.class)\n-                            .ifPresent(s -> normalizedGateway.put(LoraConstants.APP_PROPERTY_RSS, Math.abs(Double.valueOf(s))));\n-                        LoraUtils.getChildObject(lrr, FIELD_ACTILITY_LRR_SNR, String.class)\n-                        .ifPresent(s -> normalizedGateway.put(LoraConstants.APP_PROPERTY_SNR, Math.abs(Double.valueOf(s))));\n-                        return normalizedGateway;\n-                    })\n-                    .collect(() -> new JsonArray(), (array, value) -> array.add(value), (array1, array2) -> array1.addAll(array2));\n-                data.put(LoraConstants.GATEWAYS, normalizedGateways.toString());\n+                    .map(this::extractGatewayInfo)\n+                    .forEach(gateway -> {\n+                        Optional.ofNullable(gateway.getGatewayId())\n+                            .ifPresent(s -> gwId.ifPresent(id -> {\n+                                if (id.equals(s)) {\n+                                    Optional.ofNullable(LoraUtils.newLocationFromString(\n+                                            LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LONGITUDE, String.class),\n+                                            LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LATITUTDE, String.class),\n+                                            Optional.empty()))\n+                                        .ifPresent(gateway::setLocation);\n+                                }\n+                            }));\n+                        data.addGatewayInfo(gateway);\n+                    });\n             });\n-\n         return data;\n     }\n \n-    @Override\n-    protected JsonObject extractAdditionalData(final JsonObject loraMessage) {\n-        final JsonObject returnMessage = loraMessage.copy();\n-        if (returnMessage.containsKey(FIELD_ACTILITY_LRR_RSSI)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_RSS);\n-        }\n-        if (returnMessage.containsKey(FIELD_ACTILITY_TX_POWER)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_TX_POWER);\n-        }\n-        if (returnMessage.containsKey(FIELD_ACTILITY_CHANNEL)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_CHANNEL);\n-        }\n-        if (returnMessage.containsKey(FIELD_ACTILITY_SUB_BAND)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_SUB_BAND);\n+    /**\n+     * Gets the frequency corresponding to the channel ID used by Actility/ThingWork\n+     * as described in section 2.4 of the\n+     * <a href=\"https://partners.thingpark.com/sites/default/files/2017-11/AdvancedThingParkDeveloperGuide_V4.pdf\">\n+     * Advanced Developer Guide</a>.\n+     *\n+     * @param logicalChannelId The channel ID.\n+     * @return The frequency in MHz or {@code null} if the identifier is unknown.\n+     */\n+    private Double getFrequency(final String logicalChannelId) {\n+        switch (logicalChannelId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf91bdde13b121f6faf15e605125431e59bbe44e"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NzYxNQ==", "bodyText": "In general, I agree. However, I haven't found a (formal) definition of these channel IDs and I suspect that they are specific to each provider (if used at all). We could define a private enum but is that worth the effort?", "url": "https://github.com/eclipse/hono/pull/2044#discussion_r443577615", "createdAt": "2020-06-22T13:58:22Z", "author": {"login": "sophokles73"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ActilityProvider.java", "diffHunk": "@@ -87,145 +86,98 @@ protected Buffer extractPayload(final JsonObject loraMessage) {\n     }\n \n     @Override\n-    protected LoraMessageType extractMessageType(final JsonObject loraMessage) {\n+    protected LoraMessageType getMessageType(final JsonObject loraMessage) {\n         Objects.requireNonNull(loraMessage);\n         return getRootObject(loraMessage)\n                 .map(root -> LoraMessageType.UPLINK)\n                 .orElse(LoraMessageType.UNKNOWN);\n     }\n \n     @Override\n-    protected Map<String, Object> extractNormalizedData(final JsonObject loraMessage) {\n+    protected LoraMetaData getMetaData(final JsonObject loraMessage) {\n \n         Objects.requireNonNull(loraMessage);\n \n         return getRootObject(loraMessage)\n-            .map(this::getNormalizedData)\n-            .orElse(Map.of());\n+            .map(this::extractMetaData)\n+            .orElse(null);\n     }\n \n-    private Map<String, Object> getNormalizedData(final JsonObject rootObject) {\n-\n-        final Map<String, Object> data = new HashMap<>();\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LRR_RSSI,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_RSS,\n-                s -> Math.abs(Double.valueOf(s)),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_TX_POWER,\n-                Double.class,\n-                LoraConstants.APP_PROPERTY_TX_POWER,\n-                d -> d,\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_CHANNEL,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_CHANNEL,\n-                s -> s,\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_SUB_BAND,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_SUB_BAND,\n-                s -> s,\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_SPREADING_FACTOR,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_SPREADING_FACTOR,\n-                s -> Integer.valueOf(s),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LRR_SNR,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_SNR,\n-                s -> Math.abs(Double.valueOf(s)),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_FPORT,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_FUNCTION_PORT,\n-                s -> Integer.valueOf(s),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LATITUTDE,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_FUNCTION_LATITUDE,\n-                s -> Double.valueOf(s),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LONGITUDE,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_FUNCTION_LONGITUDE,\n-                s -> Double.valueOf(s),\n-                data);\n+    private LoraMetaData extractMetaData(final JsonObject rootObject) {\n+\n+        final LoraMetaData data = new LoraMetaData();\n+\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_SPREADING_FACTOR, String.class)\n+            .ifPresent(s -> data.setSpreadingFactor(Integer.valueOf(s)));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_FPORT, String.class)\n+            .ifPresent(s -> data.setFunctionPort(Integer.valueOf(s)));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_FRAME_COUNT_UPLINK, String.class)\n+            .ifPresent(s -> data.setFrameCount(Integer.valueOf(s)));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_ADR, String.class)\n+            .ifPresent(s -> data.setAdaptiveDataRateEnabled(s.equals(\"1\") ? Boolean.TRUE : Boolean.FALSE));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_CHANNEL, String.class)\n+            .map(this::getFrequency)\n+            .ifPresent(data::setFrequency);\n \n         LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LRRS, JsonObject.class)\n             .map(lrrs -> lrrs.getValue(FIELD_ACTILITY_LRR))\n             .filter(JsonArray.class::isInstance)\n             .map(JsonArray.class::cast)\n             .ifPresent(lrrList -> {\n-                final JsonArray normalizedGateways = lrrList.stream()\n+                final Optional<String> gwId = LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LRR_ID, String.class);\n+                lrrList.stream()\n                     .filter(JsonObject.class::isInstance)\n                     .map(JsonObject.class::cast)\n-                    .map(lrr -> {\n-                        final JsonObject normalizedGateway = new JsonObject();\n-                        LoraUtils.getChildObject(lrr, FIELD_ACTILITY_LRR_ID, String.class)\n-                            .ifPresent(s -> normalizedGateway.put(LoraConstants.GATEWAY_ID, s));\n-                        LoraUtils.getChildObject(lrr, FIELD_ACTILITY_LRR_RSSI, String.class)\n-                            .ifPresent(s -> normalizedGateway.put(LoraConstants.APP_PROPERTY_RSS, Math.abs(Double.valueOf(s))));\n-                        LoraUtils.getChildObject(lrr, FIELD_ACTILITY_LRR_SNR, String.class)\n-                        .ifPresent(s -> normalizedGateway.put(LoraConstants.APP_PROPERTY_SNR, Math.abs(Double.valueOf(s))));\n-                        return normalizedGateway;\n-                    })\n-                    .collect(() -> new JsonArray(), (array, value) -> array.add(value), (array1, array2) -> array1.addAll(array2));\n-                data.put(LoraConstants.GATEWAYS, normalizedGateways.toString());\n+                    .map(this::extractGatewayInfo)\n+                    .forEach(gateway -> {\n+                        Optional.ofNullable(gateway.getGatewayId())\n+                            .ifPresent(s -> gwId.ifPresent(id -> {\n+                                if (id.equals(s)) {\n+                                    Optional.ofNullable(LoraUtils.newLocationFromString(\n+                                            LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LONGITUDE, String.class),\n+                                            LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LATITUTDE, String.class),\n+                                            Optional.empty()))\n+                                        .ifPresent(gateway::setLocation);\n+                                }\n+                            }));\n+                        data.addGatewayInfo(gateway);\n+                    });\n             });\n-\n         return data;\n     }\n \n-    @Override\n-    protected JsonObject extractAdditionalData(final JsonObject loraMessage) {\n-        final JsonObject returnMessage = loraMessage.copy();\n-        if (returnMessage.containsKey(FIELD_ACTILITY_LRR_RSSI)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_RSS);\n-        }\n-        if (returnMessage.containsKey(FIELD_ACTILITY_TX_POWER)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_TX_POWER);\n-        }\n-        if (returnMessage.containsKey(FIELD_ACTILITY_CHANNEL)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_CHANNEL);\n-        }\n-        if (returnMessage.containsKey(FIELD_ACTILITY_SUB_BAND)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_SUB_BAND);\n+    /**\n+     * Gets the frequency corresponding to the channel ID used by Actility/ThingWork\n+     * as described in section 2.4 of the\n+     * <a href=\"https://partners.thingpark.com/sites/default/files/2017-11/AdvancedThingParkDeveloperGuide_V4.pdf\">\n+     * Advanced Developer Guide</a>.\n+     *\n+     * @param logicalChannelId The channel ID.\n+     * @return The frequency in MHz or {@code null} if the identifier is unknown.\n+     */\n+    private Double getFrequency(final String logicalChannelId) {\n+        switch (logicalChannelId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MzE0MA=="}, "originalCommit": {"oid": "cf91bdde13b121f6faf15e605125431e59bbe44e"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODM0Mw==", "bodyText": "Ok, in that case leaving it as is makes sense.", "url": "https://github.com/eclipse/hono/pull/2044#discussion_r443578343", "createdAt": "2020-06-22T13:59:27Z", "author": {"login": "ctron"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ActilityProvider.java", "diffHunk": "@@ -87,145 +86,98 @@ protected Buffer extractPayload(final JsonObject loraMessage) {\n     }\n \n     @Override\n-    protected LoraMessageType extractMessageType(final JsonObject loraMessage) {\n+    protected LoraMessageType getMessageType(final JsonObject loraMessage) {\n         Objects.requireNonNull(loraMessage);\n         return getRootObject(loraMessage)\n                 .map(root -> LoraMessageType.UPLINK)\n                 .orElse(LoraMessageType.UNKNOWN);\n     }\n \n     @Override\n-    protected Map<String, Object> extractNormalizedData(final JsonObject loraMessage) {\n+    protected LoraMetaData getMetaData(final JsonObject loraMessage) {\n \n         Objects.requireNonNull(loraMessage);\n \n         return getRootObject(loraMessage)\n-            .map(this::getNormalizedData)\n-            .orElse(Map.of());\n+            .map(this::extractMetaData)\n+            .orElse(null);\n     }\n \n-    private Map<String, Object> getNormalizedData(final JsonObject rootObject) {\n-\n-        final Map<String, Object> data = new HashMap<>();\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LRR_RSSI,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_RSS,\n-                s -> Math.abs(Double.valueOf(s)),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_TX_POWER,\n-                Double.class,\n-                LoraConstants.APP_PROPERTY_TX_POWER,\n-                d -> d,\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_CHANNEL,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_CHANNEL,\n-                s -> s,\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_SUB_BAND,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_SUB_BAND,\n-                s -> s,\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_SPREADING_FACTOR,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_SPREADING_FACTOR,\n-                s -> Integer.valueOf(s),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LRR_SNR,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_SNR,\n-                s -> Math.abs(Double.valueOf(s)),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_FPORT,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_FUNCTION_PORT,\n-                s -> Integer.valueOf(s),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LATITUTDE,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_FUNCTION_LATITUDE,\n-                s -> Double.valueOf(s),\n-                data);\n-        LoraUtils.addNormalizedValue(\n-                rootObject,\n-                FIELD_ACTILITY_LONGITUDE,\n-                String.class,\n-                LoraConstants.APP_PROPERTY_FUNCTION_LONGITUDE,\n-                s -> Double.valueOf(s),\n-                data);\n+    private LoraMetaData extractMetaData(final JsonObject rootObject) {\n+\n+        final LoraMetaData data = new LoraMetaData();\n+\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_SPREADING_FACTOR, String.class)\n+            .ifPresent(s -> data.setSpreadingFactor(Integer.valueOf(s)));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_FPORT, String.class)\n+            .ifPresent(s -> data.setFunctionPort(Integer.valueOf(s)));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_FRAME_COUNT_UPLINK, String.class)\n+            .ifPresent(s -> data.setFrameCount(Integer.valueOf(s)));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_ADR, String.class)\n+            .ifPresent(s -> data.setAdaptiveDataRateEnabled(s.equals(\"1\") ? Boolean.TRUE : Boolean.FALSE));\n+        LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_CHANNEL, String.class)\n+            .map(this::getFrequency)\n+            .ifPresent(data::setFrequency);\n \n         LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LRRS, JsonObject.class)\n             .map(lrrs -> lrrs.getValue(FIELD_ACTILITY_LRR))\n             .filter(JsonArray.class::isInstance)\n             .map(JsonArray.class::cast)\n             .ifPresent(lrrList -> {\n-                final JsonArray normalizedGateways = lrrList.stream()\n+                final Optional<String> gwId = LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LRR_ID, String.class);\n+                lrrList.stream()\n                     .filter(JsonObject.class::isInstance)\n                     .map(JsonObject.class::cast)\n-                    .map(lrr -> {\n-                        final JsonObject normalizedGateway = new JsonObject();\n-                        LoraUtils.getChildObject(lrr, FIELD_ACTILITY_LRR_ID, String.class)\n-                            .ifPresent(s -> normalizedGateway.put(LoraConstants.GATEWAY_ID, s));\n-                        LoraUtils.getChildObject(lrr, FIELD_ACTILITY_LRR_RSSI, String.class)\n-                            .ifPresent(s -> normalizedGateway.put(LoraConstants.APP_PROPERTY_RSS, Math.abs(Double.valueOf(s))));\n-                        LoraUtils.getChildObject(lrr, FIELD_ACTILITY_LRR_SNR, String.class)\n-                        .ifPresent(s -> normalizedGateway.put(LoraConstants.APP_PROPERTY_SNR, Math.abs(Double.valueOf(s))));\n-                        return normalizedGateway;\n-                    })\n-                    .collect(() -> new JsonArray(), (array, value) -> array.add(value), (array1, array2) -> array1.addAll(array2));\n-                data.put(LoraConstants.GATEWAYS, normalizedGateways.toString());\n+                    .map(this::extractGatewayInfo)\n+                    .forEach(gateway -> {\n+                        Optional.ofNullable(gateway.getGatewayId())\n+                            .ifPresent(s -> gwId.ifPresent(id -> {\n+                                if (id.equals(s)) {\n+                                    Optional.ofNullable(LoraUtils.newLocationFromString(\n+                                            LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LONGITUDE, String.class),\n+                                            LoraUtils.getChildObject(rootObject, FIELD_ACTILITY_LATITUTDE, String.class),\n+                                            Optional.empty()))\n+                                        .ifPresent(gateway::setLocation);\n+                                }\n+                            }));\n+                        data.addGatewayInfo(gateway);\n+                    });\n             });\n-\n         return data;\n     }\n \n-    @Override\n-    protected JsonObject extractAdditionalData(final JsonObject loraMessage) {\n-        final JsonObject returnMessage = loraMessage.copy();\n-        if (returnMessage.containsKey(FIELD_ACTILITY_LRR_RSSI)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_RSS);\n-        }\n-        if (returnMessage.containsKey(FIELD_ACTILITY_TX_POWER)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_TX_POWER);\n-        }\n-        if (returnMessage.containsKey(FIELD_ACTILITY_CHANNEL)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_CHANNEL);\n-        }\n-        if (returnMessage.containsKey(FIELD_ACTILITY_SUB_BAND)) {\n-            returnMessage.remove(LoraConstants.APP_PROPERTY_SUB_BAND);\n+    /**\n+     * Gets the frequency corresponding to the channel ID used by Actility/ThingWork\n+     * as described in section 2.4 of the\n+     * <a href=\"https://partners.thingpark.com/sites/default/files/2017-11/AdvancedThingParkDeveloperGuide_V4.pdf\">\n+     * Advanced Developer Guide</a>.\n+     *\n+     * @param logicalChannelId The channel ID.\n+     * @return The frequency in MHz or {@code null} if the identifier is unknown.\n+     */\n+    private Double getFrequency(final String logicalChannelId) {\n+        switch (logicalChannelId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MzE0MA=="}, "originalCommit": {"oid": "cf91bdde13b121f6faf15e605125431e59bbe44e"}, "originalPosition": 240}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3169, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}