{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NzkxODc1", "number": 1837, "title": "Add coap user-guide.", "bodyText": "Part 1, telemetry.\nSigned-off-by: Achim Kraus achim.kraus@bosch.io", "createdAt": "2020-03-13T13:59:34Z", "url": "https://github.com/eclipse/hono/pull/1837", "merged": true, "mergeCommit": {"oid": "273797d828860ffcf284d35860bb2d95642a3bb0"}, "closed": true, "closedAt": "2020-03-18T16:59:30Z", "author": {"login": "boaks"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOKf5pgFqTM3NTAxNzAxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO6Vn2AFqTM3NzA2MDUyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDE3MDE1", "url": "https://github.com/eclipse/hono/pull/1837#pullrequestreview-375017015", "createdAt": "2020-03-16T09:00:09Z", "commit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTowMDowOVrOF2qt5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOToxMzo1MFrOF2rJKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NzMwMw==", "bodyText": "is this actually the case?", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392867303", "createdAt": "2020-03-16T09:00:09Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NzQ4OA==", "bodyText": "the second sentence seems to be garbled ...", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392867488", "createdAt": "2020-03-16T09:00:30Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2ODk1OA==", "bodyText": "I wonder how this should work since there (currently?) is no way to map arbitrary content type strings provided by a downstream application to a CoAP content type option value, or is there?", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392868958", "createdAt": "2020-03-16T09:03:27Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.\n+* Response Options:\n+  * (optional) `content-type`: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2OTI4Nw==", "bodyText": "seems to be optional if there is a way to indicate that the request doesn't contain payload ...", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392869287", "createdAt": "2020-03-16T09:04:10Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MDAwNw==", "bodyText": "IMHO this needs to be 205 in the CoAP case?", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392870007", "createdAt": "2020-03-16T09:05:42Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.\n+* Response Options:\n+  * (optional) `content-type`: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MDI3Mg==", "bodyText": "please move this after 204 ... the notes regarding the difference between NON and CON should be included here as well, I guess.", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392870272", "createdAt": "2020-03-16T09:06:14Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.\n+* Response Options:\n+  * (optional) `content-type`: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.\n+  * (optional) Error details, if status code is >= 400.\n+* Status Codes:\n+  * 205 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MjgxNA==", "bodyText": "is there a QoS header?", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392872814", "createdAt": "2020-03-16T09:11:22Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.\n+* Response Options:\n+  * (optional) `content-type`: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.\n+  * (optional) Error details, if status code is >= 400.\n+* Status Codes:\n+  * 205 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.\n+  * 204 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with\n+    this status code.\n+  * 400 (Bad Request): The request cannot be processed. Possible reasons for this include:\n+        * The content type header is missing.\n+        * The request body is empty.\n+        * The QoS header value is invalid.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3Mjk0MA==", "bodyText": "content type option?", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392872940", "createdAt": "2020-03-16T09:11:35Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.\n+* Response Options:\n+  * (optional) `content-type`: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.\n+  * (optional) Error details, if status code is >= 400.\n+* Status Codes:\n+  * 205 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.\n+  * 204 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with\n+    this status code.\n+  * 400 (Bad Request): The request cannot be processed. Possible reasons for this include:\n+        * The content type header is missing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MzMxMA==", "bodyText": "the request itself never contains credentials, does it?", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392873310", "createdAt": "2020-03-16T09:12:09Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.\n+* Response Options:\n+  * (optional) `content-type`: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.\n+  * (optional) Error details, if status code is >= 400.\n+* Status Codes:\n+  * 205 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.\n+  * 204 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with\n+    this status code.\n+  * 400 (Bad Request): The request cannot be processed. Possible reasons for this include:\n+        * The content type header is missing.\n+        * The request body is empty.\n+        * The QoS header value is invalid.\n+  * 401 (Unauthorized): The request cannot be processed because the request does not contain valid credentials.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3Mzc0MA==", "bodyText": "there is no legacy control endpoint anymore ...", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392873740", "createdAt": "2020-03-16T09:12:54Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.\n+* Response Options:\n+  * (optional) `content-type`: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.\n+  * (optional) Error details, if status code is >= 400.\n+* Status Codes:\n+  * 205 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.\n+  * 204 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with\n+    this status code.\n+  * 400 (Bad Request): The request cannot be processed. Possible reasons for this include:\n+        * The content type header is missing.\n+        * The request body is empty.\n+        * The QoS header value is invalid.\n+  * 401 (Unauthorized): The request cannot be processed because the request does not contain valid credentials.\n+  * 403 (Forbidden): The request cannot be processed because the device's registration status cannot be asserted. Possible reasons for this include:\n+        * The given tenant is not allowed to use this protocol adapter.\n+  * 404 (Not Found): The request cannot be processed because the device is disabled or does not exist.\n+  * 429 (Too Many Requests): The request cannot be processed because the tenant's message limit for the current period is exceeded.\n+  * 503 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant connected to Hono.\n+\n+This is the preferred way for devices to publish telemetry data. It is available only if the protocol adapter is configured to require devices to authenticate (which is the default).\n+\n+If the `hono-ttd` URI-query option is set in order to receive a command and if the authenticated device is actually a gateway, the returned command will be the first command that the northbound application has sent to either the gateway itself or (if not using the legacy control endpoint) to *any* device that has last sent a telemetry or event message via this gateway.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NDI4Mw==", "bodyText": "please change this into a note", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r392874283", "createdAt": "2020-03-16T09:13:50Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.\n+* Response Options:\n+  * (optional) `content-type`: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.\n+  * (optional) Error details, if status code is >= 400.\n+* Status Codes:\n+  * 205 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.\n+  * 204 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with\n+    this status code.\n+  * 400 (Bad Request): The request cannot be processed. Possible reasons for this include:\n+        * The content type header is missing.\n+        * The request body is empty.\n+        * The QoS header value is invalid.\n+  * 401 (Unauthorized): The request cannot be processed because the request does not contain valid credentials.\n+  * 403 (Forbidden): The request cannot be processed because the device's registration status cannot be asserted. Possible reasons for this include:\n+        * The given tenant is not allowed to use this protocol adapter.\n+  * 404 (Not Found): The request cannot be processed because the device is disabled or does not exist.\n+  * 429 (Too Many Requests): The request cannot be processed because the tenant's message limit for the current period is exceeded.\n+  * 503 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant connected to Hono.\n+\n+This is the preferred way for devices to publish telemetry data. It is available only if the protocol adapter is configured to require devices to authenticate (which is the default).\n+\n+If the `hono-ttd` URI-query option is set in order to receive a command and if the authenticated device is actually a gateway, the returned command will be the first command that the northbound application has sent to either the gateway itself or (if not using the legacy control endpoint) to *any* device that has last sent a telemetry or event message via this gateway.\n+\n+**Examples**\n+\n+The coap-client contained in the linux package `libcoap-1-0-bin` unfortunately doesn't support DTLS 1.2. To use the coap-client with DTLS 1.2 therefore requires a own [local build](https://libcoap.net/install.html).\n+\n+Publish some JSON data for device `4711` (using default message type `CON` *at least once* QoS):\n+\n+~~~sh\n+./coap-client -u sensor1@DEFAULT_TENANT -k hono-secret -m POST coaps://hono.eclipseprojects.io/telemetry -t application/json -e '{\"temp\": 5}'\n+~~~\n+\n+(`./coap-client` reports only error response-codes, so the expected 2.04 will not be report!)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/7405fb66ba958a053c533b20f2fc2978e2b698e1", "committedDate": "2020-03-13T13:58:48Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}, "afterCommit": {"oid": "9711d2ab08da6be1c83dc83fb834f1ba3a3f1416", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/9711d2ab08da6be1c83dc83fb834f1ba3a3f1416", "committedDate": "2020-03-17T10:36:56Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9711d2ab08da6be1c83dc83fb834f1ba3a3f1416", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/9711d2ab08da6be1c83dc83fb834f1ba3a3f1416", "committedDate": "2020-03-17T10:36:56Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}, "afterCommit": {"oid": "9391dd822d43516f3bc291c7861a156dc9b1726a", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/9391dd822d43516f3bc291c7861a156dc9b1726a", "committedDate": "2020-03-17T10:39:27Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTU5MzEx", "url": "https://github.com/eclipse/hono/pull/1837#pullrequestreview-375959311", "createdAt": "2020-03-17T11:45:28Z", "commit": {"oid": "9391dd822d43516f3bc291c7861a156dc9b1726a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo0NToyOFrOF3Yp9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo0ODo1M1rOF3Ywyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxOTk1OA==", "bodyText": "IMHO we should set this to 225 so that it will appear right after the MQTT adapter", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393619958", "createdAt": "2020-03-17T11:45:28Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9391dd822d43516f3bc291c7861a156dc9b1726a"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMDEzOA==", "bodyText": "yes, I would propose to do so.", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393620138", "createdAt": "2020-03-17T11:45:52Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NzMwMw=="}, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMDc5MA==", "bodyText": "just remove the\n\n(if not using the legacy control endpoint)", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393620790", "createdAt": "2020-03-17T11:47:10Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (required) Arbitrary payload encoded according to the given content type.\n+* Response Options:\n+  * (optional) `content-type`: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.\n+  * (optional) Error details, if status code is >= 400.\n+* Status Codes:\n+  * 205 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.\n+  * 204 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with\n+    this status code.\n+  * 400 (Bad Request): The request cannot be processed. Possible reasons for this include:\n+        * The content type header is missing.\n+        * The request body is empty.\n+        * The QoS header value is invalid.\n+  * 401 (Unauthorized): The request cannot be processed because the request does not contain valid credentials.\n+  * 403 (Forbidden): The request cannot be processed because the device's registration status cannot be asserted. Possible reasons for this include:\n+        * The given tenant is not allowed to use this protocol adapter.\n+  * 404 (Not Found): The request cannot be processed because the device is disabled or does not exist.\n+  * 429 (Too Many Requests): The request cannot be processed because the tenant's message limit for the current period is exceeded.\n+  * 503 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant connected to Hono.\n+\n+This is the preferred way for devices to publish telemetry data. It is available only if the protocol adapter is configured to require devices to authenticate (which is the default).\n+\n+If the `hono-ttd` URI-query option is set in order to receive a command and if the authenticated device is actually a gateway, the returned command will be the first command that the northbound application has sent to either the gateway itself or (if not using the legacy control endpoint) to *any* device that has last sent a telemetry or event message via this gateway.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3Mzc0MA=="}, "originalCommit": {"oid": "7405fb66ba958a053c533b20f2fc2978e2b698e1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMTcwNw==", "bodyText": "how about using 65000 as the content format option value in this case?", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393621707", "createdAt": "2020-03-17T11:48:53Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,231 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 210\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit] ({{< relref \"/concepts/resource-limits.md\" >}}) is not exceeded. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (required) `content-type`: The type of payload contained in the request body.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9391dd822d43516f3bc291c7861a156dc9b1726a"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9391dd822d43516f3bc291c7861a156dc9b1726a", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/9391dd822d43516f3bc291c7861a156dc9b1726a", "committedDate": "2020-03-17T10:39:27Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}, "afterCommit": {"oid": "e3dcac18dcaadaefce797cc48a0e9e9a0b0483fc", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/e3dcac18dcaadaefce797cc48a0e9e9a0b0483fc", "committedDate": "2020-03-17T13:18:39Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3dcac18dcaadaefce797cc48a0e9e9a0b0483fc", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/e3dcac18dcaadaefce797cc48a0e9e9a0b0483fc", "committedDate": "2020-03-17T13:18:39Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}, "afterCommit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796", "committedDate": "2020-03-17T13:42:54Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MDU5MjMz", "url": "https://github.com/eclipse/hono/pull/1837#pullrequestreview-376059233", "createdAt": "2020-03-17T13:58:53Z", "commit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo1ODo1M1rOF3dd1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxMjo0M1rOF3eD6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5ODc3Mg==", "bodyText": "currently", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393698772", "createdAt": "2020-03-17T13:58:53Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,238 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currenlty assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwMjM3NQ==", "bodyText": "What about\n\nContent types that do not map to one of the registered CoAP content formats are ignored.", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393702375", "createdAt": "2020-03-17T14:04:04Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,238 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currenlty assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+The use of unsupported content types in messages sent to the device are ignored!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwMzU2MA==", "bodyText": "FMPOV this will never be returned and we should therefore remove it", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393703560", "createdAt": "2020-03-17T14:05:43Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,238 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currenlty assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+The use of unsupported content types in messages sent to the device are ignored!\n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (optional) `content-format`: The type of payload contained in the request body. Required, if request contains payload.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.\n+* Response Options:\n+  * (optional) `content-format`: A media type describing the semantics and format of payload contained in the response body. This option will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This option will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (CONTENT).\n+  * (optional) Error details, if status code is >= 4.00.\n+* Status Codes:\n+  * 2.04 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with this status code.\n+  * 2.05 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.\n+  * 4.00 (Bad Request): The request cannot be processed. Possible reasons for this include:\n+        * The content format option is missing.\n+        * The request body is empty without `URI-query: empty`.\n+  * 4.01 (Unauthorized): The request cannot be processed because invalid credentials. If PSK authentication fails, no response is receieved!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNDcxMw==", "bodyText": "... but the request body is not empty. However, the code suggests that in this case a 4.06 (Not Acceptable) is being returned ...", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393704713", "createdAt": "2020-03-17T14:07:18Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,238 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currenlty assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+The use of unsupported content types in messages sent to the device are ignored!\n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (optional) `content-format`: The type of payload contained in the request body. Required, if request contains payload.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.\n+* Response Options:\n+  * (optional) `content-format`: A media type describing the semantics and format of payload contained in the response body. This option will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This option will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (CONTENT).\n+  * (optional) Error details, if status code is >= 4.00.\n+* Status Codes:\n+  * 2.04 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with this status code.\n+  * 2.05 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.\n+  * 4.00 (Bad Request): The request cannot be processed. Possible reasons for this include:\n+        * The content format option is missing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwODI1OQ==", "bodyText": "... 2.05 (Content)", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393708259", "createdAt": "2020-03-17T14:12:22Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,238 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currenlty assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+The use of unsupported content types in messages sent to the device are ignored!\n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (optional) `content-format`: The type of payload contained in the request body. Required, if request contains payload.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.\n+* Response Options:\n+  * (optional) `content-format`: A media type describing the semantics and format of payload contained in the response body. This option will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This option will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (CONTENT).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwODQwNQ==", "bodyText": "2.04 (Changed):", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393708405", "createdAt": "2020-03-17T14:12:33Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,238 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currenlty assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+The use of unsupported content types in messages sent to the device are ignored!\n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (optional) `content-format`: The type of payload contained in the request body. Required, if request contains payload.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.\n+* Response Options:\n+  * (optional) `content-format`: A media type describing the semantics and format of payload contained in the response body. This option will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This option will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (CONTENT).\n+  * (optional) Error details, if status code is >= 4.00.\n+* Status Codes:\n+  * 2.04 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwODUyMQ==", "bodyText": "2.05 (Content):", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393708521", "createdAt": "2020-03-17T14:12:43Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,238 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currenlty assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+The use of unsupported content types in messages sent to the device are ignored!\n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (optional) `content-format`: The type of payload contained in the request body. Required, if request contains payload.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.\n+* Response Options:\n+  * (optional) `content-format`: A media type describing the semantics and format of payload contained in the response body. This option will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This option will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (CONTENT).\n+  * (optional) Error details, if status code is >= 4.00.\n+* Status Codes:\n+  * 2.04 (CHANGED): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with this status code.\n+  * 2.05 (CONTENT): The telemetry data has been accepted for processing. The response contains a command for the device to execute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/a8da6d8ac639c2307fb0855cc5ba0a2d7a0ca796", "committedDate": "2020-03-17T13:42:54Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}, "afterCommit": {"oid": "ff9502f67e32a8bf14ec04824ec52103b075c20e", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/ff9502f67e32a8bf14ec04824ec52103b075c20e", "committedDate": "2020-03-17T14:23:00Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff9502f67e32a8bf14ec04824ec52103b075c20e", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/ff9502f67e32a8bf14ec04824ec52103b075c20e", "committedDate": "2020-03-17T14:23:00Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}, "afterCommit": {"oid": "36e63e7e1f9670a505fb91957c25e70c92fda0ba", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/36e63e7e1f9670a505fb91957c25e70c92fda0ba", "committedDate": "2020-03-17T14:34:54Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MDk2MzI0", "url": "https://github.com/eclipse/hono/pull/1837#pullrequestreview-376096324", "createdAt": "2020-03-17T14:38:04Z", "commit": {"oid": "ff9502f67e32a8bf14ec04824ec52103b075c20e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NToxMFrOF3fhmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NjozOFrOF3fl-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMjUwNQ==", "bodyText": "IMHO we should make it more explicit that even if the response contains a command, the content format might still be empty, i.e. if the command sent by the application contained an unsupported (unmappable) content type.", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393732505", "createdAt": "2020-03-17T14:45:10Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,230 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currently assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+Content types that do not map to one of the registered CoAP content formats are ignored.\n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (optional) `content-format`: The type of payload contained in the request body. Required, if request contains payload.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.\n+* Response Options:\n+  * (optional) `content-format`: A media type describing the semantics and format of payload contained in the response body. This option will only be present if the response contains a command to be executed by the device which requires input data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e63e7e1f9670a505fb91957c25e70c92fda0ba"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMzYyNg==", "bodyText": "Based on the definition at https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html, 4.06 doesn't seem to be the right status code for this. Instead, we should use 4.00 as we do in the HTTP adapter. But this can be done in a separate PR.", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r393733626", "createdAt": "2020-03-17T14:46:38Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,230 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currently assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+Content types that do not map to one of the registered CoAP content formats are ignored.\n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (optional) `content-format`: The type of payload contained in the request body. Required, if request contains payload.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.\n+* Response Options:\n+  * (optional) `content-format`: A media type describing the semantics and format of payload contained in the response body. This option will only be present if the response contains a command to be executed by the device which requires input data.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This option will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.\n+* Response Body:\n+  * (optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (Content).\n+  * (optional) Error details, if status code is >= 4.00.\n+* Status Codes:\n+  * 2.04 (Changed): The telemetry data has been accepted for processing. Note that if the message type is `NON` (*at most once* semantics),\n+    this status code does **not** mean that the message has been delivered to any potential consumer. However, if the message type is `CON` (*at least once* semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with this status code.\n+  * 2.05 (Content): The telemetry data has been accepted for processing. The response contains a command for the device to execute.\n+  * 4.03 (Forbidden): The request cannot be processed because the device's registration status cannot be asserted. Possible reasons for this include:\n+        * The given tenant is not allowed to use this protocol adapter.\n+  * 4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.\n+  * 4.06 (Not Acceptable): The request body is empty without `URI-query: empty`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36e63e7e1f9670a505fb91957c25e70c92fda0ba"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fee66b225302d9dc07f3317c02d0307595970dc", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/5fee66b225302d9dc07f3317c02d0307595970dc", "committedDate": "2020-03-18T09:57:43Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36e63e7e1f9670a505fb91957c25e70c92fda0ba", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/36e63e7e1f9670a505fb91957c25e70c92fda0ba", "committedDate": "2020-03-17T14:34:54Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}, "afterCommit": {"oid": "5fee66b225302d9dc07f3317c02d0307595970dc", "author": {"user": {"login": "boaks", "name": "Achim Kraus"}}, "url": "https://github.com/eclipse/hono/commit/5fee66b225302d9dc07f3317c02d0307595970dc", "committedDate": "2020-03-18T09:57:43Z", "message": "Add coap user-guide.\n\nPart 1, telemetry.\n\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODIxNzg1", "url": "https://github.com/eclipse/hono/pull/1837#pullrequestreview-376821785", "createdAt": "2020-03-18T12:37:30Z", "commit": {"oid": "5fee66b225302d9dc07f3317c02d0307595970dc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjozNzozMVrOF4DBeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0MzoxOFrOF4DN4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNDEwNA==", "bodyText": "wouldn't it be sufficient to simply omit this option in case of a one-way command?", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r394314104", "createdAt": "2020-03-18T12:37:31Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,230 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currently assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+Content types that do not map to one of the registered CoAP content formats are ignored.\n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (optional) `content-format`: The type of payload contained in the request body. Required, if request contains payload.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.\n+* Response Options:\n+  * (optional) `content-format`: A media type describing the semantics and format of payload contained in the response body. This option will only be present if the response contains a command to be executed by the device which requires input data. If the command's content type do not map to one of the registered CoAP content formats, the option will not be present.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This option will only be present if the response contains a command to be executed by the device.\n+  * (optional) `location-path: ('command'|'command_response/'<command-request-id>)`: The location path contains `'command'` for one-way-commands, or `'command_response' / <command-request-id>`  for commands expecting  a response. In case of a expected response, the location-path contains exactly the URI-path expected for the response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fee66b225302d9dc07f3317c02d0307595970dc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNzI4Mg==", "bodyText": "I have to admit that I am not really fond of abusing existing option codes for conveying information that is not at all related to the option's original semantics. This brings me back to introducing our own content format and option codes in the > 65000 range. For the options, this merely requires documenting them here. For the content-formats, we could create a wrapper around Cf's MediaTypeRegistry class which contains these codes as well ...\nWDYT?", "url": "https://github.com/eclipse/hono/pull/1837#discussion_r394317282", "createdAt": "2020-03-18T12:43:18Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/user-guide/coap-adapter.md", "diffHunk": "@@ -0,0 +1,230 @@\n++++\n+title = \"CoAP Adapter\"\n+weight = 225\n++++\n+\n+The CoAP protocol adapter exposes [CoAP](https://tools.ietf.org/html/rfc7252) based endpoints for Eclipse Hono&trade;'s south bound Telemetry, Event and Command & Control APIs.\n+<!--more-->\n+\n+## Device Authentication\n+\n+The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports currently only [PSK](https://tools.ietf.org/html/rfc4279) as part of a DTLS handshake for that purpose. The other variants mentioned in [Securing CoAP](https://tools.ietf.org/html/rfc7252#section-9) may follow in the future.\n+\n+The adapter tries to authenticate the device using this mechanisms\n+\n+### PSK\n+\n+The *identity* provided in the ClientKeyExchange must have the form *auth-id@tenant*, e.g. `sensor1@DEFAULT_TENANT`. The adapter performs the handshake using the credentials the `configured Credentials service - (documentation pending)` has one record for the client. The adapter uses the Credentials API's *get* operation to retrieve the credentials on record with the *tenant* and *auth-id* provided by the device in the *identity* and `psk` as the *type* of secret as query parameters.\n+\n+The examples below refer to devices `4711` and `gw-1` of tenant `DEFAULT_TENANT` using *auth-ids* `sensor1` and `gw1` and corresponding passwords. The example deployment as described in the [Deployment Guides]({{< relref \"deployment\" >}}) comes pre-configured with the corresponding entities in its device registry component.\n+Please refer to the [Credentials API]({{< relref \"/api/credentials#standard-credential-types\" >}}) for details regarding the different types of secrets.\n+\n+**NB** There is a subtle difference between the *device identifier* (*device-id*) and the *auth-id* a device uses for authentication. See [Device Identity]({{< relref \"/concepts/device-identity.md\" >}}) for a discussion of the concepts.\n+\n+## Message Limits\n+\n+Before accepting any telemetry or event or command messages, the CoAP adapter verifies that the configured [message limit]({{< relref \"/concepts/resource-limits#messages-limit\" >}}) is not exceeded.\n+For CoAP currently only the messages limit is verified, the connections limit is not available. If the limit is exceeded then the incoming message is discarded with the status code `429 Too Many Requests`. \n+\n+## CoAP Content Formats\n+\n+CoAP doesn't use a textual identifier for content types. Instead numbers are used, which are maintained by the [IANA](https://www.iana.org/).\n+For the currently assigned numbers, please check [IANA - CoAP Content Formats](https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#content-formats).\n+Content types that do not map to one of the registered CoAP content formats are ignored.\n+\n+## Publish Telemetry Data (authenticated Device)\n+\n+The device is authenticated using PSK.\n+\n+* URI: `/telemetry`\n+* Method: `POST`\n+* Type:\n+  * `CON`: *at least once* (`1`) QoS levels\n+  * `NON`: *at most once* (`0`) QoS levels\n+* Request Options:\n+  * (optional) `content-format`: The type of payload contained in the request body. Required, if request contains payload.\n+  * (optional) `URI-query: hono-ttd`: The number of seconds the device will wait for the response.\n+  * (optional) `URI-query: empty`: If the request doesn't contain payload.\n+* Request Body:\n+  * (optional) Arbitrary payload encoded according to the given content type. Maybe empty, if `URI-query: empty` is provided.\n+* Response Options:\n+  * (optional) `content-format`: A media type describing the semantics and format of payload contained in the response body. This option will only be present if the response contains a command to be executed by the device which requires input data. If the command's content type do not map to one of the registered CoAP content formats, the option will not be present.\n+  * (optional) `location-query: hono-command`: The name of the command to execute. This option will only be present if the response contains a command to be executed by the device.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fee66b225302d9dc07f3317c02d0307595970dc"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDYwNTIw", "url": "https://github.com/eclipse/hono/pull/1837#pullrequestreview-377060520", "createdAt": "2020-03-18T16:59:09Z", "commit": {"oid": "5fee66b225302d9dc07f3317c02d0307595970dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 793, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}