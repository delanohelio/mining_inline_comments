{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTY3ODQw", "number": 2034, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1MDowOVrOEGN1OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1Mjo0M1rOEGN4Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTUzNTI4OnYy", "diffSide": "RIGHT", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/impl/LoraProtocolAdapter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1MDowOVrOGk36QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjozNTozM1rOGlDptg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzk1Mw==", "bodyText": "so far we have defined this content type for events only. However, the adapter sends all downstream messages using the Telemetry API ...", "url": "https://github.com/eclipse/hono/pull/2034#discussion_r441317953", "createdAt": "2020-06-17T06:50:09Z", "author": {"login": "sophokles73"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/impl/LoraProtocolAdapter.java", "diffHunk": "@@ -202,16 +203,21 @@ void handleProviderRoute(final RoutingContext ctx, final LoraProvider provider)\n                     final Buffer payload = uplinkMessage.getPayload();\n \n                     Optional.ofNullable(uplinkMessage.getNormalizedData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n+                            .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n \n                     Optional.ofNullable(uplinkMessage.getAdditionalData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n-\n-                    final String contentType = String.format(\n-                            \"%s%s%s\",\n-                            LoraConstants.CONTENT_TYPE_LORA_BASE,\n-                            provider.getProviderName(),\n-                            LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                            .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n+\n+                    final String contentType;\n+                    if (payload.length() > 0) {\n+                        contentType = String.format(\n+                                \"%s%s%s\",\n+                                LoraConstants.CONTENT_TYPE_LORA_BASE,\n+                                provider.getProviderName(),\n+                                LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                    } else {\n+                        contentType = EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTkyNA==", "bodyText": "True. However, currently there is way for the LoRaWAN adapter to send events. And, given the fact that LoRaWAN is very conservative what is being sent, I would say that transmissions might be more important, and maybe more events rather then telemetry. In any case, at the moment, a LoRaWAN device doesn't have the ability to send an empty payload. As it is a valid operation on the TTN provider side, I think it should be a valid operation in Hono as well.", "url": "https://github.com/eclipse/hono/pull/2034#discussion_r441341924", "createdAt": "2020-06-17T07:36:08Z", "author": {"login": "ctron"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/impl/LoraProtocolAdapter.java", "diffHunk": "@@ -202,16 +203,21 @@ void handleProviderRoute(final RoutingContext ctx, final LoraProvider provider)\n                     final Buffer payload = uplinkMessage.getPayload();\n \n                     Optional.ofNullable(uplinkMessage.getNormalizedData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n+                            .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n \n                     Optional.ofNullable(uplinkMessage.getAdditionalData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n-\n-                    final String contentType = String.format(\n-                            \"%s%s%s\",\n-                            LoraConstants.CONTENT_TYPE_LORA_BASE,\n-                            provider.getProviderName(),\n-                            LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                            .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n+\n+                    final String contentType;\n+                    if (payload.length() > 0) {\n+                        contentType = String.format(\n+                                \"%s%s%s\",\n+                                LoraConstants.CONTENT_TYPE_LORA_BASE,\n+                                provider.getProviderName(),\n+                                LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                    } else {\n+                        contentType = EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzk1Mw=="}, "originalCommit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MTE4MA==", "bodyText": "However, currently there is way for the LoRaWAN adapter to send events. And, given the fact that LoRaWAN is very conservative what is being sent, I would say that transmissions might be more important, and maybe more events rather then telemetry.\n\nNot sure if I am following. Are you suggesting to let the Lora adapter send events instead of telemetry messages downstream? I am open to the idea. We might also be able to use the ACK flag of uplink messages to determine whether data should be considered an event or telemetry.\n\nIn any case, at the moment, a LoRaWAN device doesn't have the ability to send an empty payload.\n\nYou mean because the Lora adapter doesn't support this?\n\nAs it is a valid operation on the TTN provider side, I think it should be a valid operation in Hono as well.\n\nIf that is a valid and reasonable use case for Lora devices, I agree.", "url": "https://github.com/eclipse/hono/pull/2034#discussion_r441351180", "createdAt": "2020-06-17T07:52:12Z", "author": {"login": "sophokles73"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/impl/LoraProtocolAdapter.java", "diffHunk": "@@ -202,16 +203,21 @@ void handleProviderRoute(final RoutingContext ctx, final LoraProvider provider)\n                     final Buffer payload = uplinkMessage.getPayload();\n \n                     Optional.ofNullable(uplinkMessage.getNormalizedData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n+                            .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n \n                     Optional.ofNullable(uplinkMessage.getAdditionalData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n-\n-                    final String contentType = String.format(\n-                            \"%s%s%s\",\n-                            LoraConstants.CONTENT_TYPE_LORA_BASE,\n-                            provider.getProviderName(),\n-                            LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                            .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n+\n+                    final String contentType;\n+                    if (payload.length() > 0) {\n+                        contentType = String.format(\n+                                \"%s%s%s\",\n+                                LoraConstants.CONTENT_TYPE_LORA_BASE,\n+                                provider.getProviderName(),\n+                                LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                    } else {\n+                        contentType = EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzk1Mw=="}, "originalCommit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwODEzMw==", "bodyText": "However, currently there is way for the LoRaWAN adapter to send events. And, given the fact that LoRaWAN is very conservative what is being sent, I would say that transmissions might be more important, and maybe more events rather then telemetry.\n\nNot sure if I am following. Are you suggesting to let the Lora adapter send events instead of telemetry messages downstream? I am open to the idea. We might also be able to use the ACK flag of uplink messages to determine whether data should be considered an event or telemetry.\n\nI simply think that at them moment, there is no way of choosing Event over Telemetry. Although Event sound like a reasonable feature in the context of LoRaWAN.\n\n\nIn any case, at the moment, a LoRaWAN device doesn't have the ability to send an empty payload.\n\nYou mean because the Lora adapter doesn't support this?\n\nExactly. I wouldn't simply switch, but as you mentioned above, find a nice way to let the user choose. Either through the URL, or a query parameter of the URL, through the LoraProvider interface, the device configuration, a part of the LoraMessage, or a mix of these options.\n\n\nAs it is a valid operation on the TTN provider side, I think it should be a valid operation in Hono as well.\n\nIf that is a valid and reasonable use case for Lora devices, I agree.\n\nSo I think a reasonable approach would be the finish this PR, and then start a new one, adding \"Events\" into the picture.", "url": "https://github.com/eclipse/hono/pull/2034#discussion_r441508133", "createdAt": "2020-06-17T12:31:42Z", "author": {"login": "ctron"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/impl/LoraProtocolAdapter.java", "diffHunk": "@@ -202,16 +203,21 @@ void handleProviderRoute(final RoutingContext ctx, final LoraProvider provider)\n                     final Buffer payload = uplinkMessage.getPayload();\n \n                     Optional.ofNullable(uplinkMessage.getNormalizedData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n+                            .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n \n                     Optional.ofNullable(uplinkMessage.getAdditionalData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n-\n-                    final String contentType = String.format(\n-                            \"%s%s%s\",\n-                            LoraConstants.CONTENT_TYPE_LORA_BASE,\n-                            provider.getProviderName(),\n-                            LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                            .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n+\n+                    final String contentType;\n+                    if (payload.length() > 0) {\n+                        contentType = String.format(\n+                                \"%s%s%s\",\n+                                LoraConstants.CONTENT_TYPE_LORA_BASE,\n+                                provider.getProviderName(),\n+                                LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                    } else {\n+                        contentType = EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzk1Mw=="}, "originalCommit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDMyNg==", "bodyText": "I added #2036 to track the Event discussion.", "url": "https://github.com/eclipse/hono/pull/2034#discussion_r441510326", "createdAt": "2020-06-17T12:35:33Z", "author": {"login": "ctron"}, "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/impl/LoraProtocolAdapter.java", "diffHunk": "@@ -202,16 +203,21 @@ void handleProviderRoute(final RoutingContext ctx, final LoraProvider provider)\n                     final Buffer payload = uplinkMessage.getPayload();\n \n                     Optional.ofNullable(uplinkMessage.getNormalizedData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n+                            .ifPresent(data -> ctx.put(LoraConstants.NORMALIZED_PROPERTIES, data));\n \n                     Optional.ofNullable(uplinkMessage.getAdditionalData())\n-                        .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n-\n-                    final String contentType = String.format(\n-                            \"%s%s%s\",\n-                            LoraConstants.CONTENT_TYPE_LORA_BASE,\n-                            provider.getProviderName(),\n-                            LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                            .ifPresent(data -> ctx.put(LoraConstants.ADDITIONAL_DATA, data));\n+\n+                    final String contentType;\n+                    if (payload.length() > 0) {\n+                        contentType = String.format(\n+                                \"%s%s%s\",\n+                                LoraConstants.CONTENT_TYPE_LORA_BASE,\n+                                provider.getProviderName(),\n+                                LoraConstants.CONTENT_TYPE_LORA_POST_FIX);\n+                    } else {\n+                        contentType = EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzk1Mw=="}, "originalCommit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTU0MzAyOnYy", "diffSide": "RIGHT", "path": "adapters/lora-vertx/src/test/java/org/eclipse/hono/adapter/lora/providers/LoraTestUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1Mjo0M1rOGk3-0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1Mjo0M1rOGk3-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxOTEyMw==", "bodyText": "nice \ud83d\udc4d", "url": "https://github.com/eclipse/hono/pull/2034#discussion_r441319123", "createdAt": "2020-06-17T06:52:43Z", "author": {"login": "sophokles73"}, "path": "adapters/lora-vertx/src/test/java/org/eclipse/hono/adapter/lora/providers/LoraTestUtil.java", "diffHunk": "@@ -38,14 +41,21 @@ private LoraTestUtil() {\n      *\n      * @param providerName The name of the provider to load the file for.\n      * @param type The type of message to load.\n+     * @param classifiers additional classifiers of the test file.\n      * @return the contents of the file.\n      * @throws IOException if the test file could not be loaded.\n      * @throws URISyntaxException if the test file could not be loaded.\n      */\n-    public static Buffer loadTestFile(final String providerName, final LoraMessageType type) throws IOException, URISyntaxException {\n+    public static Buffer loadTestFile(final String providerName, final LoraMessageType type, final String... classifiers) throws IOException, URISyntaxException {\n         Objects.requireNonNull(providerName);\n         Objects.requireNonNull(type);\n-        final URL location = LoraTestUtil.class.getResource(String.format(\"/payload/%s.%s.json\", providerName, type.name().toLowerCase()));\n+        final String name = Stream\n+                .<String>concat(\n+                        Stream.of(providerName, type.name().toLowerCase()),\n+                        Arrays.stream(classifiers))\n+                .collect(Collectors.joining(\".\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720de2d36a04dc26a41938c6e9be0fe8683c3d2a"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3159, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}