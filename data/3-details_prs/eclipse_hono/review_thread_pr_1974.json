{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNDY2MDgw", "number": 1974, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxODozOVrOD-8krQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoyOToyN1rOD-8x_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzMwNzMzOnYy", "diffSide": "RIGHT", "path": "examples/quickstart-python/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxODozOVrOGZWwRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MTozMlrOGZX2hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MDM4OQ==", "bodyText": "Eclipse", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429240389", "createdAt": "2020-05-22T13:18:39Z", "author": {"login": "sophokles73"}, "path": "examples/quickstart-python/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+<!--\n+    Copyright (c) 2020 Contributors to the Eclipse Foundation\n+\n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+\n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+\n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+# Eclispe Hono Quickstart tutorial", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODM3NA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429258374", "createdAt": "2020-05-22T13:51:32Z", "author": {"login": "JulianFeinauer"}, "path": "examples/quickstart-python/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+<!--\n+    Copyright (c) 2020 Contributors to the Eclipse Foundation\n+\n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+\n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+\n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+# Eclispe Hono Quickstart tutorial", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MDM4OQ=="}, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzMwOTMxOnYy", "diffSide": "RIGHT", "path": "examples/quickstart-python/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxOToyMFrOGZWxlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MTozNlrOGZX2sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MDcyNw==", "bodyText": "missing end-of-line", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429240727", "createdAt": "2020-05-22T13:19:20Z", "author": {"login": "sophokles73"}, "path": "examples/quickstart-python/pom.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2020 Contributors to the Eclipse Foundation\n+\n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+\n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+\n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.eclipse.hono</groupId>\n+        <artifactId>hono-example</artifactId>\n+        <version>1.3.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>hono-quickstart-python</artifactId>\n+    <version>1.3.0-SNAPSHOT</version>\n+\n+\n+    <name>Hono Quickstart Tutorial in Python</name>\n+    <description>This is a python example. See the Readme for more information.</description>\n+    <url>https://www.eclipse.org/hono</url>\n+\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODQxNg==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429258416", "createdAt": "2020-05-22T13:51:36Z", "author": {"login": "JulianFeinauer"}, "path": "examples/quickstart-python/pom.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2020 Contributors to the Eclipse Foundation\n+\n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+\n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+\n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.eclipse.hono</groupId>\n+        <artifactId>hono-example</artifactId>\n+        <version>1.3.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>hono-quickstart-python</artifactId>\n+    <version>1.3.0-SNAPSHOT</version>\n+\n+\n+    <name>Hono Quickstart Tutorial in Python</name>\n+    <description>This is a python example. See the Readme for more information.</description>\n+    <url>https://www.eclipse.org/hono</url>\n+\n+</project>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MDcyNw=="}, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzMxNjA0OnYy", "diffSide": "RIGHT", "path": "examples/quickstart-python/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoyMToyM1rOGZW16w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MTo0MlrOGZX29A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MTgzNQ==", "bodyText": "Eclipse", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429241835", "createdAt": "2020-05-22T13:21:23Z", "author": {"login": "sophokles73"}, "path": "examples/quickstart-python/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+<!--\n+    Copyright (c) 2020 Contributors to the Eclipse Foundation\n+\n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+\n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+\n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+# Eclispe Hono Quickstart tutorial", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODQ4NA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429258484", "createdAt": "2020-05-22T13:51:42Z", "author": {"login": "JulianFeinauer"}, "path": "examples/quickstart-python/README.md", "diffHunk": "@@ -0,0 +1,53 @@\n+<!--\n+    Copyright (c) 2020 Contributors to the Eclipse Foundation\n+\n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+\n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+\n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+# Eclispe Hono Quickstart tutorial", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MTgzNQ=="}, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzMzODE0OnYy", "diffSide": "RIGHT", "path": "examples/quickstart-python/src/main/python/quickstart.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoyODoyN1rOGZXDsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MjoxMVrOGZX4Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NTM2MQ==", "bodyText": "I do not think that you need to append /telemetry here ..", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429245361", "createdAt": "2020-05-22T13:28:27Z", "author": {"login": "sophokles73"}, "path": "examples/quickstart-python/src/main/python/quickstart.py", "diffHunk": "@@ -0,0 +1,131 @@\n+\n+#  Copyright (c) 2020 Contributors to the Eclipse Foundation\n+#\n+#  See the NOTICE file(s) distributed with this work for additional\n+#  information regarding copyright ownership.\n+#\n+#  This program and the accompanying materials are made available under the\n+#  terms of the Eclipse Public License 2.0 which is available at\n+#  http://www.eclipse.org/legal/epl-2.0\n+#\n+#  SPDX-License-Identifier: EPL-2.0\n+\n+from __future__ import print_function, unicode_literals\n+\n+import json\n+import threading\n+import time\n+\n+import requests\n+from paho.mqtt.publish import single\n+from proton.handlers import MessagingHandler\n+from proton.reactor import Container\n+from requests.auth import HTTPBasicAuth\n+\n+registryIp = \"hono.eclipseprojects.io\"\n+httpAdapterIp = \"hono.eclipseprojects.io\"\n+mqttAdapterIp = \"hono.eclipseprojects.io\"\n+amqpNetworkIp = \"hono.eclipseprojects.io\"\n+\n+# Register Tenant\n+tenant = requests.post(f'http://{registryIp}:28080/v1/tenants').json()\n+tenantId = tenant[\"id\"]\n+\n+print(f'Registered tenant {tenantId}')\n+\n+# Add Device to Tenant\n+device = requests.post(f'http://{registryIp}:28080/v1/devices/{tenantId}').json()\n+deviceId = device[\"id\"]\n+\n+print(f'Registered device {deviceId}')\n+\n+# Set Device Password\n+devicePassword = \"my-secret-password\"\n+\n+code = requests.put(f'http://{registryIp}:28080/v1/credentials/{tenantId}/{deviceId}',\n+                    headers={'content-type': 'application/json'},\n+                    data=json.dumps(\n+                        [{\"type\": \"hashed-password\", \"auth-id\": deviceId, \"secrets\": [{\"pwd-plain\": devicePassword}]}]))\n+\n+if code.status_code == 204:\n+    print(\"Password is set!\")\n+else:\n+    print(\"Unnable to set Password\")\n+\n+# Now we can start the client application\n+print(\"We could use the Hono Client now...\")\n+print()\n+cmd = f'java -jar hono-cli-*-exec.jar --hono.client.host={amqpNetworkIp} ' \\\n+    f'--hono.client.port=15672 --hono.client.username=consumer@HONO ' \\\n+    f'--hono.client.password=verysecret --spring.profiles.active=receiver ' \\\n+    f'--tenant.id={tenantId}'\n+print(cmd)\n+print()\n+\n+\n+# input(\"Press Enter to continue...\")\n+\n+class AmqpHandler(MessagingHandler):\n+    \"\"\"\n+    Handler for \"northbound side\" where Messages are received\n+    via AMQP.\n+    \"\"\"\n+    def __init__(self, server, address):\n+        super(AmqpHandler, self).__init__()\n+        self.server = server\n+        self.address = address\n+\n+    def on_start(self, event):\n+        conn = event.container.connect(self.server, user=\"consumer@HONO\", password=\"verysecret\")\n+        event.container.create_receiver(conn, self.address)\n+\n+    def on_connection_error(self, event):\n+        print(\"Connection Error\")\n+\n+    def on_link_error(self, event):\n+        print(\"Link Error\")\n+\n+    def on_message(self, event):\n+        print(\"Got a message:\")\n+        print(event.message.body)\n+\n+\n+# Prepare the container\n+uri = f'amqp://{amqpNetworkIp}:15672/telemetry'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODc2Nw==", "bodyText": "Indeed, it works without and I changed it accordingly.", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429258767", "createdAt": "2020-05-22T13:52:11Z", "author": {"login": "JulianFeinauer"}, "path": "examples/quickstart-python/src/main/python/quickstart.py", "diffHunk": "@@ -0,0 +1,131 @@\n+\n+#  Copyright (c) 2020 Contributors to the Eclipse Foundation\n+#\n+#  See the NOTICE file(s) distributed with this work for additional\n+#  information regarding copyright ownership.\n+#\n+#  This program and the accompanying materials are made available under the\n+#  terms of the Eclipse Public License 2.0 which is available at\n+#  http://www.eclipse.org/legal/epl-2.0\n+#\n+#  SPDX-License-Identifier: EPL-2.0\n+\n+from __future__ import print_function, unicode_literals\n+\n+import json\n+import threading\n+import time\n+\n+import requests\n+from paho.mqtt.publish import single\n+from proton.handlers import MessagingHandler\n+from proton.reactor import Container\n+from requests.auth import HTTPBasicAuth\n+\n+registryIp = \"hono.eclipseprojects.io\"\n+httpAdapterIp = \"hono.eclipseprojects.io\"\n+mqttAdapterIp = \"hono.eclipseprojects.io\"\n+amqpNetworkIp = \"hono.eclipseprojects.io\"\n+\n+# Register Tenant\n+tenant = requests.post(f'http://{registryIp}:28080/v1/tenants').json()\n+tenantId = tenant[\"id\"]\n+\n+print(f'Registered tenant {tenantId}')\n+\n+# Add Device to Tenant\n+device = requests.post(f'http://{registryIp}:28080/v1/devices/{tenantId}').json()\n+deviceId = device[\"id\"]\n+\n+print(f'Registered device {deviceId}')\n+\n+# Set Device Password\n+devicePassword = \"my-secret-password\"\n+\n+code = requests.put(f'http://{registryIp}:28080/v1/credentials/{tenantId}/{deviceId}',\n+                    headers={'content-type': 'application/json'},\n+                    data=json.dumps(\n+                        [{\"type\": \"hashed-password\", \"auth-id\": deviceId, \"secrets\": [{\"pwd-plain\": devicePassword}]}]))\n+\n+if code.status_code == 204:\n+    print(\"Password is set!\")\n+else:\n+    print(\"Unnable to set Password\")\n+\n+# Now we can start the client application\n+print(\"We could use the Hono Client now...\")\n+print()\n+cmd = f'java -jar hono-cli-*-exec.jar --hono.client.host={amqpNetworkIp} ' \\\n+    f'--hono.client.port=15672 --hono.client.username=consumer@HONO ' \\\n+    f'--hono.client.password=verysecret --spring.profiles.active=receiver ' \\\n+    f'--tenant.id={tenantId}'\n+print(cmd)\n+print()\n+\n+\n+# input(\"Press Enter to continue...\")\n+\n+class AmqpHandler(MessagingHandler):\n+    \"\"\"\n+    Handler for \"northbound side\" where Messages are received\n+    via AMQP.\n+    \"\"\"\n+    def __init__(self, server, address):\n+        super(AmqpHandler, self).__init__()\n+        self.server = server\n+        self.address = address\n+\n+    def on_start(self, event):\n+        conn = event.container.connect(self.server, user=\"consumer@HONO\", password=\"verysecret\")\n+        event.container.create_receiver(conn, self.address)\n+\n+    def on_connection_error(self, event):\n+        print(\"Connection Error\")\n+\n+    def on_link_error(self, event):\n+        print(\"Link Error\")\n+\n+    def on_message(self, event):\n+        print(\"Got a message:\")\n+        print(event.message.body)\n+\n+\n+# Prepare the container\n+uri = f'amqp://{amqpNetworkIp}:15672/telemetry'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NTM2MQ=="}, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzMzOTgyOnYy", "diffSide": "RIGHT", "path": "site/homepage/content/getting-started/index.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoyODo1OVrOGZXEyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MjoxNVrOGZX4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NTY0Mw==", "bodyText": "... the HTTP API.", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429245643", "createdAt": "2020-05-22T13:28:59Z", "author": {"login": "sophokles73"}, "path": "site/homepage/content/getting-started/index.md", "diffHunk": "@@ -35,6 +35,25 @@ The Hono command line client is used in this guide for simulating an application\n The client is available from [Hono's download page]({{< relref \"downloads\" >}}).\n Note that running the command line client requires a Java 11 runtime environment being installed locally.\n \n+#### Very quick Quickstart\n+\n+In the following all necessary commands and operations will be explained on how to register a tenant and a device via the HTTP Api.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODgwMA==", "bodyText": "Changed.", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429258800", "createdAt": "2020-05-22T13:52:15Z", "author": {"login": "JulianFeinauer"}, "path": "site/homepage/content/getting-started/index.md", "diffHunk": "@@ -35,6 +35,25 @@ The Hono command line client is used in this guide for simulating an application\n The client is available from [Hono's download page]({{< relref \"downloads\" >}}).\n Note that running the command line client requires a Java 11 runtime environment being installed locally.\n \n+#### Very quick Quickstart\n+\n+In the following all necessary commands and operations will be explained on how to register a tenant and a device via the HTTP Api.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NTY0Mw=="}, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzM0MTQzOnYy", "diffSide": "RIGHT", "path": "site/homepage/content/getting-started/index.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoyOToyN1rOGZXFxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MTo1NVrOGZX3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NTg5Mw==", "bodyText": "... via the HTTP and MQTT protocol adapters.", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429245893", "createdAt": "2020-05-22T13:29:27Z", "author": {"login": "sophokles73"}, "path": "site/homepage/content/getting-started/index.md", "diffHunk": "@@ -35,6 +35,25 @@ The Hono command line client is used in this guide for simulating an application\n The client is available from [Hono's download page]({{< relref \"downloads\" >}}).\n Note that running the command line client requires a Java 11 runtime environment being installed locally.\n \n+#### Very quick Quickstart\n+\n+In the following all necessary commands and operations will be explained on how to register a tenant and a device via the HTTP Api.\n+Then, it will be shown how messages can be sent via the HTTP and MQTT Endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODYxNw==", "bodyText": "Changed.", "url": "https://github.com/eclipse/hono/pull/1974#discussion_r429258617", "createdAt": "2020-05-22T13:51:55Z", "author": {"login": "JulianFeinauer"}, "path": "site/homepage/content/getting-started/index.md", "diffHunk": "@@ -35,6 +35,25 @@ The Hono command line client is used in this guide for simulating an application\n The client is available from [Hono's download page]({{< relref \"downloads\" >}}).\n Note that running the command line client requires a Java 11 runtime environment being installed locally.\n \n+#### Very quick Quickstart\n+\n+In the following all necessary commands and operations will be explained on how to register a tenant and a device via the HTTP Api.\n+Then, it will be shown how messages can be sent via the HTTP and MQTT Endpoint.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NTg5Mw=="}, "originalCommit": {"oid": "a8f40d50cce301cfb848ef7ef96069a9096810ce"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3121, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}