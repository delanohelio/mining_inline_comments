{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMDk1MTI4", "number": 2094, "title": "[#2053] Implementing auto provisioning of devices for gateways", "bodyText": "I am opening this PR (issue is still WIP) to get a first feedback on my approach.\nEspecially:\n\nI had to introduce a dependency to DeviceBackend in AbstractRegistrationService. Consequently there's now a circular dependency between FileBasedRegistrationService and FileBasedDeviceBackend. Unfortunately I do not see an obvious solution for it. Any hints?\nI tried to minimize the impact (in terms of amount of change and pretty similar, but not duplicated code) in protocol adapters. Is AbstractProtocolAdapterBase the right place for this protocol adapter independent code?\nAlso I had to put some \"flags\" in the execution context in order to set the same flags again when the downstream message is constructed. I also noticed some other methods like customizeDownstreamMessage. Not sure if I should have put it there? Or a complete different approach I missed?\nI decided to use an Empty Event (with a corresponding application property being set) in case a telemetry message lead to an auto provisioning. Does that make sense from your POV?", "createdAt": "2020-07-31T12:21:43Z", "url": "https://github.com/eclipse/hono/pull/2094", "merged": true, "mergeCommit": {"oid": "fe27f781158b4161c0aa03db796643ef667fa0a4"}, "closed": true, "closedAt": "2020-12-15T16:44:57Z", "author": {"login": "fkaltner"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7SfqEgFqTQ2MDA0MTk5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmdHQmAFqTU1MjY1MzM1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMDQxOTk3", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-460041997", "createdAt": "2020-08-03T13:50:01Z", "commit": {"oid": "49c1080d0b757b5f6992eec8aad7c564a83d1c73"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzo1MDowMVrOG66TBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzo1NzoyOVrOG66lRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQyNTczNA==", "bodyText": "FMPOV this should be a set ... and can we rename the field to authorities? Permissions are usually granted on a particular subject like you have permission READ on field address ...", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r464425734", "createdAt": "2020-08-03T13:50:01Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -68,6 +68,11 @@\n     @JsonProperty(RegistryManagementConstants.FIELD_MAPPER)\n     private String mapper;\n \n+    @JsonProperty(RegistryManagementConstants.PERMISSIONS)\n+    @JsonInclude(value = Include.NON_EMPTY)\n+    @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n+    private List<String> permissions = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c1080d0b757b5f6992eec8aad7c564a83d1c73"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQyNzI3Mw==", "bodyText": "I'd rather not allow for this variability. We define this as a JSON array of strings and that's it. No ambiguity there, right?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r464427273", "createdAt": "2020-08-03T13:52:29Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -68,6 +68,11 @@\n     @JsonProperty(RegistryManagementConstants.FIELD_MAPPER)\n     private String mapper;\n \n+    @JsonProperty(RegistryManagementConstants.PERMISSIONS)\n+    @JsonInclude(value = Include.NON_EMPTY)\n+    @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c1080d0b757b5f6992eec8aad7c564a83d1c73"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQzMDQwNw==", "bodyText": "how about adding an addEdgeDevice() method to AbstractRegistrationService instead? Subclasses can then either directly implement the logic to add the record to the persistent store or delegate to an existing collaborator.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r464430407", "createdAt": "2020-08-03T13:57:29Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -194,7 +213,36 @@ public final void setTenantInformationService(final TenantInformationService ten\n                                 final RegistrationResult deviceResult = deviceInfoTracker.result();\n                                 final RegistrationResult gatewayResult = gatewayInfoTracker.result();\n \n-                                if (!isDeviceEnabled(deviceResult)) {\n+                                if (deviceResult.isNotFound() && !gatewayResult.isNotFound()\n+                                        && isDeviceEnabled(gatewayResult) && hasPermissionForAutoRegistration(gatewayResult)) {\n+\n+                                    if (deviceBackend == null) {\n+                                        LOG.warn(\"cannot auto-provision device - no backend set\");\n+                                        return Future.succeededFuture(RegistrationResult.from(HttpURLConnection.HTTP_NOT_FOUND));\n+                                    }\n+\n+                                    final Device device = new Device()\n+                                        .setEnabled(true)\n+                                        .setVia(Collections.singletonList(gatewayId));\n+\n+                                    final JsonArray memberOf = gatewayResult.getPayload().getJsonObject(RegistrationConstants.FIELD_DATA)\n+                                            .getJsonArray(RegistrationConstants.FIELD_MEMBER_OF);\n+                                    if (memberOf != null && !memberOf.isEmpty()) {\n+                                        device.setViaGroups(memberOf.getList());\n+                                    }\n+\n+                                    LOG.debug(\"auto-provisioning device {} for gateway {}\", deviceId, gatewayId);\n+                                    return deviceBackend.createDevice(tenantId, Optional.ofNullable(deviceId), device, span)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c1080d0b757b5f6992eec8aad7c564a83d1c73"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTI5Njgx", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-460529681", "createdAt": "2020-08-04T06:30:54Z", "commit": {"oid": "49c1080d0b757b5f6992eec8aad7c564a83d1c73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNjozMDo1NFrOG7S3KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNjozMDo1NFrOG7S3KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgyODIwMA==", "bodyText": "we should add the value from the context, shouldn't we?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r464828200", "createdAt": "2020-08-04T06:30:54Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -1651,4 +1700,34 @@ public final ConnectionLimitManager getConnectionLimitManager() {\n     public final void setConnectionLimitManager(final ConnectionLimitManager connectionLimitManager) {\n         this.connectionLimitManager = connectionLimitManager;\n     }\n+\n+    private boolean wasAutoProvisioned(final JsonObject registrationInfo) {\n+        if (registrationInfo != null) {\n+            final JsonObject deviceDefaults = registrationInfo.getJsonObject(RequestResponseApiConstants.FIELD_PAYLOAD_DEFAULTS);\n+            if (deviceDefaults != null) {\n+                final String registrationStatus = deviceDefaults.getString(RegistrationConstants.REGISTRATION_STATUS.KEY);\n+                if (RegistrationConstants.REGISTRATION_STATUS.NEW.name().equalsIgnoreCase(registrationStatus)) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Adds auto-provisioning application properties to the given message, if present in the given context.\n+     *\n+     * @param msg The message for which the application properties shall be set.\n+     * @param context The context containing the properties set in the processing of the auto-provisionoing.\n+     */\n+    protected void addAutoProvisioningProperties(final Message msg, final ExecutionContext context) {\n+        if (context.get(MessageHelper.APP_PROPERTY_GATEWAY_ID, null) != null) {\n+            MessageHelper.addProperty(msg, MessageHelper.APP_PROPERTY_GATEWAY_ID, context.get(MessageHelper.APP_PROPERTY_GATEWAY_ID));\n+        }\n+\n+        if (context.get(RegistrationConstants.REGISTRATION_STATUS.KEY, null) != null) {\n+            MessageHelper.addProperty(msg, RegistrationConstants.REGISTRATION_STATUS.KEY, RegistrationConstants.REGISTRATION_STATUS.NEW.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c1080d0b757b5f6992eec8aad7c564a83d1c73"}, "originalPosition": 185}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "511d22f0fc7f4f6e7800f92cdcb585314c3bc1b7", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/511d22f0fc7f4f6e7800f92cdcb585314c3bc1b7", "committedDate": "2020-08-04T08:28:40Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nWIP\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "f69c5aabb6583abd35858392f043553bfb2fdc2f", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/f69c5aabb6583abd35858392f043553bfb2fdc2f", "committedDate": "2020-08-04T11:51:06Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nWIP\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNjE3MTg1", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-461617185", "createdAt": "2020-08-05T12:32:07Z", "commit": {"oid": "5a3046fb518d979acc553f6536f8651425947157"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjozMjowN1rOG8HjmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjozNDozNlrOG8Ho3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5MTU0NA==", "bodyText": "at this point we verify the registration status of the gateway itself. There is no need to handle auto provisioning as the device ID is the same as the authenticated (gateway) ID. In fact, the device ID is unknown at this point in time and will be (finally) established after the mapper has been invoked.\nThe auto provisioning will be handled in the uploadMessage method ...", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r465691544", "createdAt": "2020-08-05T12:32:07Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -102,10 +102,16 @@ public void setMessageMapping(final MessageMapping<MqttContext> messageMappingSe\n             final ResourceIdentifier targetAddress) {\n \n         return getRegistrationAssertion(\n-                targetAddress.getTenantId(),\n-                targetAddress.getResourceId(),\n-                ctx.authenticatedDevice(),\n-                ctx.getTracingContext())\n+                    targetAddress.getTenantId(),\n+                    targetAddress.getResourceId(),\n+                    ctx.authenticatedDevice(),\n+                    ctx.getTracingContext())\n+                .compose(handleAutoProvisioning(ctx,\n+                    ctx.endpoint(),\n+                    targetAddress.getTenantId(),\n+                    targetAddress.getResourceId(),\n+                    ctx.authenticatedDevice()\n+                ))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3046fb518d979acc553f6536f8651425947157"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5Mjg5Mg==", "bodyText": "so, in case of a telemetry message being used for auto-provisioning a device, the downstream application will receive two messages containing this property: the empty notification event and the telemetry message, right?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r465692892", "createdAt": "2020-08-05T12:34:36Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -1651,4 +1700,34 @@ public final ConnectionLimitManager getConnectionLimitManager() {\n     public final void setConnectionLimitManager(final ConnectionLimitManager connectionLimitManager) {\n         this.connectionLimitManager = connectionLimitManager;\n     }\n+\n+    private boolean wasAutoProvisioned(final JsonObject registrationInfo) {\n+        if (registrationInfo != null) {\n+            final JsonObject deviceDefaults = registrationInfo.getJsonObject(RequestResponseApiConstants.FIELD_PAYLOAD_DEFAULTS);\n+            if (deviceDefaults != null) {\n+                final String registrationStatus = deviceDefaults.getString(RegistrationConstants.REGISTRATION_STATUS.KEY);\n+                if (RegistrationConstants.REGISTRATION_STATUS.NEW.name().equalsIgnoreCase(registrationStatus)) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Adds auto-provisioning application properties to the given message, if present in the given context.\n+     *\n+     * @param msg The message for which the application properties shall be set.\n+     * @param context The context containing the properties set in the processing of the auto-provisionoing.\n+     */\n+    protected void addAutoProvisioningProperties(final Message msg, final ExecutionContext context) {\n+        if (context.get(MessageHelper.APP_PROPERTY_GATEWAY_ID, null) != null) {\n+            MessageHelper.addProperty(msg, MessageHelper.APP_PROPERTY_GATEWAY_ID, context.get(MessageHelper.APP_PROPERTY_GATEWAY_ID));\n+        }\n+\n+        if (context.get(RegistrationConstants.REGISTRATION_STATUS.KEY, null) != null) {\n+            MessageHelper.addProperty(msg, RegistrationConstants.REGISTRATION_STATUS.KEY, context.get(RegistrationConstants.REGISTRATION_STATUS.KEY));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3046fb518d979acc553f6536f8651425947157"}, "originalPosition": 186}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a3046fb518d979acc553f6536f8651425947157", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/5a3046fb518d979acc553f6536f8651425947157", "committedDate": "2020-08-05T12:01:18Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nWIP\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "b93e23aacf1361d116d750ccacb2cca26fdb83c9", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/b93e23aacf1361d116d750ccacb2cca26fdb83c9", "committedDate": "2020-08-11T10:22:50Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b93e23aacf1361d116d750ccacb2cca26fdb83c9", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/b93e23aacf1361d116d750ccacb2cca26fdb83c9", "committedDate": "2020-08-11T10:22:50Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "dad14130345309afd4bceebafcf231c9aa15744e", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/dad14130345309afd4bceebafcf231c9aa15744e", "committedDate": "2020-08-11T12:52:43Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dad14130345309afd4bceebafcf231c9aa15744e", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/dad14130345309afd4bceebafcf231c9aa15744e", "committedDate": "2020-08-11T12:52:43Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "8d9ee329e626f6014b1ba33b02893c041a52f6bd", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/8d9ee329e626f6014b1ba33b02893c041a52f6bd", "committedDate": "2020-08-11T12:58:18Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjYwMjY1", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-465660265", "createdAt": "2020-08-12T07:33:54Z", "commit": {"oid": "7c3428022dd51f442b9304cbef37bec8d3a4d540"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzozMzo1NFrOG_VUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzozMzo1NFrOG_VUXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2Mjc1MQ==", "bodyText": "why do you think that we need these?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r469062751", "createdAt": "2020-08-12T07:33:54Z", "author": {"login": "sophokles73"}, "path": "tests/pom.xml", "diffHunk": "@@ -612,6 +615,9 @@ Test cases are run against Docker images of Hono server + (Apache Qpid Dispatch\n                     </assembly>\n                   </build>\n                   <run>\n+                    <dependsOn>\n+                      <container>artemis</container>\n+                    </dependsOn>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3428022dd51f442b9304cbef37bec8d3a4d540"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c3428022dd51f442b9304cbef37bec8d3a4d540", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/7c3428022dd51f442b9304cbef37bec8d3a4d540", "committedDate": "2020-08-11T17:04:40Z", "message": "WIP: Trying to fix integration tests\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "bfdf16ed6a265066f9db2b84e47be82590e155b9", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/bfdf16ed6a265066f9db2b84e47be82590e155b9", "committedDate": "2020-08-12T09:09:43Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfdf16ed6a265066f9db2b84e47be82590e155b9", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/bfdf16ed6a265066f9db2b84e47be82590e155b9", "committedDate": "2020-08-12T09:09:43Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "fb17303a0071554e627bcabcb2b1373c2669eda2", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/fb17303a0071554e627bcabcb2b1373c2669eda2", "committedDate": "2020-08-12T12:13:34Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODE3NDUz", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-466817453", "createdAt": "2020-08-13T14:28:48Z", "commit": {"oid": "61e3955b9389002312011209fb46a90db8bd1161"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDoyODo0OVrOHAOLvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo1NDo0OFrOHAR47Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk5NDQzMA==", "bodyText": "why don't we simply provide DeviceRegistry as the adapter type name and keep the null check?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r469994430", "createdAt": "2020-08-13T14:28:49Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/MessageHelper.java", "diffHunk": "@@ -1123,7 +1120,9 @@ public static Message addProperties(\n         setCreationTime(msg);\n         msg.setAddress(ri.getBasePath());\n         addDeviceId(msg, ri.getResourceId());\n-        addProperty(msg, MessageHelper.APP_PROPERTY_ORIG_ADAPTER, adapterTypeName);\n+        if (adapterTypeName != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e3955b9389002312011209fb46a90db8bd1161"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk5NjUyNA==", "bodyText": "none of these are used in the Device Registration API, are they? If not, then they should be moved to RegistryManagementConstants or some other appropriate location...", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r469996524", "createdAt": "2020-08-13T14:31:30Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java", "diffHunk": "@@ -56,6 +56,32 @@\n      */\n     public static final String FIELD_MAPPER = \"mapper\";\n \n+    /**\n+     * The name of the field in a response to the <em>assert Device Registration</em> operation\n+     * that contains the authorities of a gateway.\n+     */\n+    public static final String FIELD_AUTHORITIES = \"authorities\";\n+\n+    /**\n+     * The name of the field in a response to the <em>assert Device Registration</em> operation\n+     * that contains the name of the gateway groups.\n+     */\n+    public static final String FIELD_MEMBER_OF = \"memberOf\";\n+\n+    /**\n+     * The name of the authority which authorizes a gateway to perform auto-provisioning.\n+     */\n+    public static final String AUTHORITY_AUTO_PROVISIONING_ENABLED = \"auto-provisioning-enabled\";\n+\n+    /**\n+     * The registration status of a device.\n+     */\n+    public enum REGISTRATION_STATUS {\n+        NEW;\n+\n+        public static final String KEY = \"hono_registration_status\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e3955b9389002312011209fb46a90db8bd1161"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1NDYxNw==", "bodyText": "why do we need this?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r470054617", "createdAt": "2020-08-13T15:53:59Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -55,8 +75,108 @@\n \n     private static final Logger LOG = LoggerFactory.getLogger(AbstractRegistrationService.class);\n \n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e3955b9389002312011209fb46a90db8bd1161"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1NDgzOA==", "bodyText": "why do we need this?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r470054838", "createdAt": "2020-08-13T15:54:18Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/tenant/AutowiredTenantInformationService.java", "diffHunk": "@@ -32,6 +37,7 @@\n public class AutowiredTenantInformationService implements TenantInformationService {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AutowiredTenantInformationService.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e3955b9389002312011209fb46a90db8bd1161"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1NTE0OQ==", "bodyText": "what if there is no such tenant?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r470055149", "createdAt": "2020-08-13T15:54:48Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/tenant/TenantInformationService.java", "diffHunk": "@@ -42,4 +44,16 @@\n      */\n      Future<Result<TenantKey>> tenantExists(String tenantId, Span span);\n \n+    /**\n+     * Gets the tenant identified by the given id.\n+     *\n+     * @param tenantId The id identifying the tenant to obtain.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method!\n+     *            An implementation should log (error) events on this span and it may set tags and use this span as the\n+     *            parent for any spans created in this method.\n+     *\n+     * @return A future whose outcome contains the requested tenant.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e3955b9389002312011209fb46a90db8bd1161"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NDY0NjE1", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-469464615", "createdAt": "2020-08-18T13:39:10Z", "commit": {"oid": "a6b467294d9babc281973504c66a24513396041e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzozOToxMVrOHCVDzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzo1MDozN1rOHCVjYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIwNDIzOA==", "bodyText": "We use standard camel case names for enums ...", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r472204238", "createdAt": "2020-08-18T13:39:11Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/EventConstants.java", "diffHunk": "@@ -37,6 +37,13 @@\n      */\n     public static final String CONTENT_TYPE_EMPTY_NOTIFICATION = \"application/vnd.eclipse-hono-empty-notification\";\n \n+    /**\n+     * The registration status of a device.\n+     */\n+    public enum REGISTRATION_STATUS {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b467294d9babc281973504c66a24513396041e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIwNzEwNg==", "bodyText": "We always use active form present tense for JavaDocs.\n\nAdds a new edge ...", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r472207106", "createdAt": "2020-08-18T13:43:12Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -159,6 +276,38 @@ public final void setTenantInformationService(final TenantInformationService ten\n         return assertRegistration(tenantId, deviceId, gatewayId, NoopSpan.INSTANCE);\n     }\n \n+    /**\n+     * Add a new edge device in the process of auto-provisioning of not yet registered edge devices sending data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b467294d9babc281973504c66a24513396041e"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIwODIwNQ==", "bodyText": "What will be contained in the future if the operation fails? Why should it fail?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r472208205", "createdAt": "2020-08-18T13:44:46Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -159,6 +276,38 @@ public final void setTenantInformationService(final TenantInformationService ten\n         return assertRegistration(tenantId, deviceId, gatewayId, NoopSpan.INSTANCE);\n     }\n \n+    /**\n+     * Add a new edge device in the process of auto-provisioning of not yet registered edge devices sending data\n+     * via a gateway.\n+     *\n+     * @param tenantId The tenant that the device belongs to.\n+     * @param deviceId The ID the device should be registered under.\n+     * @param device Device information, must not be {@code null}.\n+     * @param span The active OpenTracing span for this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     */\n+    protected abstract Future<OperationResult<Id>> addEdgeDevice(String tenantId, Optional<String> deviceId, Device device, Span span);\n+\n+    private Future<OperationResult<Id>> setAutoProvisioningNotificationSent(final String tenantId, final String deviceId, final JsonObject deviceJson, final Span span) {\n+        final Device device = deviceJson.mapTo(Device.class);\n+        device.setAutoProvisioningNotificationSent(true);\n+        return updateDevice(tenantId, deviceId, device, Optional.empty(), span);\n+    }\n+\n+    /**\n+     * Updates device registration data.\n+     *\n+     * @param tenantId The tenant the device belongs to.\n+     * @param deviceId The ID of the device to update the registration for.\n+     * @param device Device information, must not be {@code null}.\n+     * @param resourceVersion The identifier of the resource version to update.\n+     * @param span The active OpenTracing span for this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b467294d9babc281973504c66a24513396041e"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIwOTg4Nw==", "bodyText": "this will only work if the result has status 200 and thus the payload contains JSON .... see implementation of tenantExists ...", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r472209887", "createdAt": "2020-08-18T13:47:13Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/tenant/AutowiredTenantInformationService.java", "diffHunk": "@@ -53,6 +55,12 @@\n                 });\n     }\n \n+    @Override\n+    public Future<TenantResult<TenantObject>> getTenant(final String tenantId, final Span span) {\n+        return service.get(tenantId, span)\n+                .map(tenantJson -> TenantResult.from(HttpURLConnection.HTTP_OK, tenantJson.getPayload().mapTo(TenantObject.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b467294d9babc281973504c66a24513396041e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIxMjMyMA==", "bodyText": "IMHO these should better be moved to the device's status property because we do not want clients to be able to update these, right?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r472212320", "createdAt": "2020-08-18T13:50:37Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -38,6 +40,12 @@\n     @JsonProperty(RegistryManagementConstants.FIELD_ENABLED)\n     private Boolean enabled;\n \n+    @JsonProperty(RegistryManagementConstants.FIELD_AUTO_PROVISIONED)\n+    private Boolean autoProvisioned;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_AUTO_PROVISIONING_NOTIFICATION_SENT)\n+    private Boolean autoProvisioningNotificationSent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b467294d9babc281973504c66a24513396041e"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68fcb8eb28d448c4d0c183fbff8ccfc952dc4aa7", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/68fcb8eb28d448c4d0c183fbff8ccfc952dc4aa7", "committedDate": "2020-09-07T13:46:23Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "12cfb75b28b04c40e6d06ba7a9b8bafb99485672", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/12cfb75b28b04c40e6d06ba7a9b8bafb99485672", "committedDate": "2020-09-07T15:28:14Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12cfb75b28b04c40e6d06ba7a9b8bafb99485672", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/12cfb75b28b04c40e6d06ba7a9b8bafb99485672", "committedDate": "2020-09-07T15:28:14Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "4cfe0a6a35da900833b7016044b94aa216921fe1", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/4cfe0a6a35da900833b7016044b94aa216921fe1", "committedDate": "2020-09-08T07:55:23Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDc5NTc5", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-484079579", "createdAt": "2020-09-08T12:25:17Z", "commit": {"oid": "4cfe0a6a35da900833b7016044b94aa216921fe1"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoyNToxN1rOHOabJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoyNToxN1rOHOabJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3NTA0NQ==", "bodyText": "StatusCodeMapper.from(final int statusCode, final String detailMessage) should take care of this mapping.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r484875045", "createdAt": "2020-09-08T12:25:17Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -359,16 +367,24 @@ public final void setTenantInformationService(final TenantInformationService ten\n \n                                     LOG.debug(\"auto-provisioning device {} for gateway {}\", deviceId, gatewayId);\n                                     return addEdgeDevice(tenantId, Optional.ofNullable(deviceId), device, span)\n-                                            .compose(addDeviceOk -> sendEmptyEvent(tenantId, deviceId, gatewayId, span)\n-                                                .compose(sendEmptyEventOk -> processAssertRegistration(DeviceKey.from(tenantKey, deviceId), span)\n-                                                    .compose(deviceRegistrationData -> {\n-                                                        final JsonObject deviceData = deviceRegistrationData.getPayload()\n-                                                                .getJsonObject(RegistrationConstants.FIELD_DATA, new JsonObject());\n-                                                        return setAutoProvisioningNotificationSent(tenantId, deviceId, deviceData, span)\n-                                                            .compose(idOperationResult -> createSuccessfulRegistrationResult(tenantId, deviceId, deviceData, span));\n-                                                    })\n-                                                )\n-                                            );\n+                                            .compose(registrationResult -> {\n+                                                if (registrationResult.isError()) {\n+                                                    if (registrationResult.getStatus() < 400 || registrationResult.getStatus() >= 500) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfe0a6a35da900833b7016044b94aa216921fe1"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDQ1MzQy", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-487445342", "createdAt": "2020-09-14T06:23:32Z", "commit": {"oid": "4cfe0a6a35da900833b7016044b94aa216921fe1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoyMzozMlrOHRFXvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjozOTo1MVrOHRFw4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3NTgzNw==", "bodyText": "Concerning Optional.ofNullable(deviceId): deviceId can't be null here.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r487675837", "createdAt": "2020-09-14T06:23:32Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -194,7 +351,42 @@ public final void setTenantInformationService(final TenantInformationService ten\n                                 final RegistrationResult deviceResult = deviceInfoTracker.result();\n                                 final RegistrationResult gatewayResult = gatewayInfoTracker.result();\n \n-                                if (!isDeviceEnabled(deviceResult)) {\n+                                if (deviceResult.isNotFound() && !gatewayResult.isNotFound()\n+                                        && isDeviceEnabled(gatewayResult) && hasAuthorityForAutoRegistration(gatewayResult)) {\n+\n+                                    final Device device = new Device()\n+                                        .setEnabled(true)\n+                                        .setAutoProvisioned(true)\n+                                        .setVia(Collections.singletonList(gatewayId));\n+\n+                                    final JsonArray memberOf = gatewayResult.getPayload().getJsonObject(RegistrationConstants.FIELD_DATA)\n+                                            .getJsonArray(RegistryManagementConstants.FIELD_MEMBER_OF);\n+                                    if (memberOf != null && !memberOf.isEmpty()) {\n+                                        device.setViaGroups(memberOf.getList());\n+                                    }\n+\n+                                    LOG.debug(\"auto-provisioning device {} for gateway {}\", deviceId, gatewayId);\n+                                    return addEdgeDevice(tenantId, Optional.ofNullable(deviceId), device, span)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfe0a6a35da900833b7016044b94aa216921fe1"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MjI3Mg==", "bodyText": "I would be good to create a new child span here, and use it in this block (for everything except createSuccessfulRegistrationResult, I guess). That would allow filtering for that operation in the Tracing UI.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r487682272", "createdAt": "2020-09-14T06:39:51Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -194,7 +351,42 @@ public final void setTenantInformationService(final TenantInformationService ten\n                                 final RegistrationResult deviceResult = deviceInfoTracker.result();\n                                 final RegistrationResult gatewayResult = gatewayInfoTracker.result();\n \n-                                if (!isDeviceEnabled(deviceResult)) {\n+                                if (deviceResult.isNotFound() && !gatewayResult.isNotFound()\n+                                        && isDeviceEnabled(gatewayResult) && hasAuthorityForAutoRegistration(gatewayResult)) {\n+\n+                                    final Device device = new Device()\n+                                        .setEnabled(true)\n+                                        .setAutoProvisioned(true)\n+                                        .setVia(Collections.singletonList(gatewayId));\n+\n+                                    final JsonArray memberOf = gatewayResult.getPayload().getJsonObject(RegistrationConstants.FIELD_DATA)\n+                                            .getJsonArray(RegistryManagementConstants.FIELD_MEMBER_OF);\n+                                    if (memberOf != null && !memberOf.isEmpty()) {\n+                                        device.setViaGroups(memberOf.getList());\n+                                    }\n+\n+                                    LOG.debug(\"auto-provisioning device {} for gateway {}\", deviceId, gatewayId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfe0a6a35da900833b7016044b94aa216921fe1"}, "originalPosition": 226}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4cfe0a6a35da900833b7016044b94aa216921fe1", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/4cfe0a6a35da900833b7016044b94aa216921fe1", "committedDate": "2020-09-08T07:55:23Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "f0e8393655a7c6309fcc88671317efa3f9d0853a", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/f0e8393655a7c6309fcc88671317efa3f9d0853a", "committedDate": "2020-09-15T06:49:59Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDQyNzYz", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-517442763", "createdAt": "2020-10-27T08:20:47Z", "commit": {"oid": "f0e8393655a7c6309fcc88671317efa3f9d0853a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDg4ODcx", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-517488871", "createdAt": "2020-10-27T09:17:31Z", "commit": {"oid": "f0e8393655a7c6309fcc88671317efa3f9d0853a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxNzozMVrOHoyMkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxNzozMVrOHoyMkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNzUwNg==", "bodyText": "This span isn't getting finished below. And naming it \"perform auto-provisioning\" would fit the usual naming style better FMPOV.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r512527506", "createdAt": "2020-10-27T09:17:31Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -227,7 +405,41 @@ public final void setTenantInformationService(final TenantInformationService ten\n                                 final RegistrationResult deviceResult = deviceInfoTracker.result();\n                                 final RegistrationResult gatewayResult = gatewayInfoTracker.result();\n \n-                                if (!isDeviceEnabled(deviceResult)) {\n+                                if (deviceResult.isNotFound() && !gatewayResult.isNotFound()\n+                                        && isDeviceEnabled(gatewayResult) && hasAuthorityForAutoRegistration(gatewayResult)) {\n+\n+                                    final Device device = new Device()\n+                                        .setEnabled(true)\n+                                        .setAutoProvisioned(true)\n+                                        .setVia(Collections.singletonList(gatewayId));\n+\n+                                    final JsonArray memberOf = gatewayResult.getPayload().getJsonObject(RegistrationConstants.FIELD_DATA)\n+                                            .getJsonArray(RegistryManagementConstants.FIELD_MEMBER_OF);\n+                                    if (memberOf != null && !memberOf.isEmpty()) {\n+                                        device.setViaGroups(memberOf.getList());\n+                                    }\n+\n+                                    LOG.debug(\"auto-provisioning device {} for gateway {}\", deviceId, gatewayId);\n+                                    final Span childSpan = TracingHelper.buildChildSpan(tracer, span.context(), \"auto-provisioning\", Constants.PROTOCOL_ADAPTER_TYPE_DEVICE_REGISTRY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e8393655a7c6309fcc88671317efa3f9d0853a"}, "originalPosition": 254}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0e8393655a7c6309fcc88671317efa3f9d0853a", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/f0e8393655a7c6309fcc88671317efa3f9d0853a", "committedDate": "2020-09-15T06:49:59Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "a3467601a96b1383ffda871cfdcade7a3bf1b761", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/a3467601a96b1383ffda871cfdcade7a3bf1b761", "committedDate": "2020-11-09T13:30:21Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3467601a96b1383ffda871cfdcade7a3bf1b761", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/a3467601a96b1383ffda871cfdcade7a3bf1b761", "committedDate": "2020-11-09T13:30:21Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "e447f73f143721391a3055513c927a98dd117112", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/e447f73f143721391a3055513c927a98dd117112", "committedDate": "2020-11-24T10:12:15Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e447f73f143721391a3055513c927a98dd117112", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/e447f73f143721391a3055513c927a98dd117112", "committedDate": "2020-11-24T10:12:15Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3", "committedDate": "2020-11-24T11:28:45Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3OTkzNjI1", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-527993625", "createdAt": "2020-11-11T09:17:17Z", "commit": {"oid": "a3467601a96b1383ffda871cfdcade7a3bf1b761"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxNzoxOFrOHxEvsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoyN1rOH5DJmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDAxNg==", "bodyText": "Missing info about the null check of the opentracingTracer in the JavaDoc.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r521220016", "createdAt": "2020-11-11T09:17:18Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -56,8 +77,127 @@\n \n     private static final Logger LOG = LoggerFactory.getLogger(AbstractRegistrationService.class);\n \n+    /**\n+     * The OpenTracing {@code Tracer} for tracking processing of requests.\n+     */\n+    protected Tracer tracer = NoopTracerFactory.create();\n+\n     protected TenantInformationService tenantInformationService = new NoopTenantInformationService();\n \n+    protected DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    @Override\n+    public final Future<Void> start() {\n+        // Required since every endpoint may call the start() method of its referenced service leading to multiple calls\n+        // to start(). This results in an exception in the factory's connect() method.\n+        synchronized (this) {\n+            if (connectionAttempt == null) {\n+                connectionAttempt = downstreamSenderFactory.connect().map(c -> {\n+                    LOG.info(\"connected to AMQP network\");\n+                    return c;\n+                }).recover(t -> {\n+                    LOG.warn(\"failed to connect to AMQP network\", t);\n+                    return Future.failedFuture(t);\n+                });\n+            }\n+        }\n+\n+        return startInternal()\n+            .compose(ok -> connectionAttempt)\n+            .mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        return stopInternal();\n+    }\n+\n+    /**\n+     * Enables subclasses to add custom startup logic, see {@link Lifecycle#start()}.\n+     *\n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    protected Future<Void> startInternal() {\n+        return Future.succeededFuture();\n+    }\n+\n+    /**\n+     * Enables subclasses to add custom shutdown logic, see {@link Lifecycle#stop()}.\n+     *\n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    protected Future<Void> stopInternal() {\n+        return Future.succeededFuture();\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     *\n+     * @param factory The factory.#\n+     * @throws NullPointerException if the factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDownstreamSenderFactory(final DownstreamSenderFactory factory) {\n+        this.downstreamSenderFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3467601a96b1383ffda871cfdcade7a3bf1b761"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDA2Ng==", "bodyText": "Null check of opentracingTracer should precede the log statement. If opentracingTracer is null then  opentracingTracer.getClass() will throw NullPointerException.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r521220066", "createdAt": "2020-11-11T09:17:23Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -56,8 +77,127 @@\n \n     private static final Logger LOG = LoggerFactory.getLogger(AbstractRegistrationService.class);\n \n+    /**\n+     * The OpenTracing {@code Tracer} for tracking processing of requests.\n+     */\n+    protected Tracer tracer = NoopTracerFactory.create();\n+\n     protected TenantInformationService tenantInformationService = new NoopTenantInformationService();\n \n+    protected DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    @Override\n+    public final Future<Void> start() {\n+        // Required since every endpoint may call the start() method of its referenced service leading to multiple calls\n+        // to start(). This results in an exception in the factory's connect() method.\n+        synchronized (this) {\n+            if (connectionAttempt == null) {\n+                connectionAttempt = downstreamSenderFactory.connect().map(c -> {\n+                    LOG.info(\"connected to AMQP network\");\n+                    return c;\n+                }).recover(t -> {\n+                    LOG.warn(\"failed to connect to AMQP network\", t);\n+                    return Future.failedFuture(t);\n+                });\n+            }\n+        }\n+\n+        return startInternal()\n+            .compose(ok -> connectionAttempt)\n+            .mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        return stopInternal();\n+    }\n+\n+    /**\n+     * Enables subclasses to add custom startup logic, see {@link Lifecycle#start()}.\n+     *\n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    protected Future<Void> startInternal() {\n+        return Future.succeededFuture();\n+    }\n+\n+    /**\n+     * Enables subclasses to add custom shutdown logic, see {@link Lifecycle#stop()}.\n+     *\n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    protected Future<Void> stopInternal() {\n+        return Future.succeededFuture();\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     *\n+     * @param factory The factory.#\n+     * @throws NullPointerException if the factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDownstreamSenderFactory(final DownstreamSenderFactory factory) {\n+        this.downstreamSenderFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     */\n+    @Autowired(required = false)\n+    public final void setTracer(final Tracer opentracingTracer) {\n+        LOG.info(\"using OpenTracing Tracer implementation [{}]\", opentracingTracer.getClass().getName());\n+        this.tracer = Objects.requireNonNull(opentracingTracer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3467601a96b1383ffda871cfdcade7a3bf1b761"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDEwNA==", "bodyText": "This method is deprecated.  How about using newMessage(ResourceIdentifier, String, Buffer, TenantObject, Map, Map, boolean, boolean) instead.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r521220104", "createdAt": "2020-11-11T09:17:28Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -56,8 +77,127 @@\n \n     private static final Logger LOG = LoggerFactory.getLogger(AbstractRegistrationService.class);\n \n+    /**\n+     * The OpenTracing {@code Tracer} for tracking processing of requests.\n+     */\n+    protected Tracer tracer = NoopTracerFactory.create();\n+\n     protected TenantInformationService tenantInformationService = new NoopTenantInformationService();\n \n+    protected DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    @Override\n+    public final Future<Void> start() {\n+        // Required since every endpoint may call the start() method of its referenced service leading to multiple calls\n+        // to start(). This results in an exception in the factory's connect() method.\n+        synchronized (this) {\n+            if (connectionAttempt == null) {\n+                connectionAttempt = downstreamSenderFactory.connect().map(c -> {\n+                    LOG.info(\"connected to AMQP network\");\n+                    return c;\n+                }).recover(t -> {\n+                    LOG.warn(\"failed to connect to AMQP network\", t);\n+                    return Future.failedFuture(t);\n+                });\n+            }\n+        }\n+\n+        return startInternal()\n+            .compose(ok -> connectionAttempt)\n+            .mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        return stopInternal();\n+    }\n+\n+    /**\n+     * Enables subclasses to add custom startup logic, see {@link Lifecycle#start()}.\n+     *\n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    protected Future<Void> startInternal() {\n+        return Future.succeededFuture();\n+    }\n+\n+    /**\n+     * Enables subclasses to add custom shutdown logic, see {@link Lifecycle#stop()}.\n+     *\n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    protected Future<Void> stopInternal() {\n+        return Future.succeededFuture();\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     *\n+     * @param factory The factory.#\n+     * @throws NullPointerException if the factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDownstreamSenderFactory(final DownstreamSenderFactory factory) {\n+        this.downstreamSenderFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     */\n+    @Autowired(required = false)\n+    public final void setTracer(final Tracer opentracingTracer) {\n+        LOG.info(\"using OpenTracing Tracer implementation [{}]\", opentracingTracer.getClass().getName());\n+        this.tracer = Objects.requireNonNull(opentracingTracer);\n+    }\n+\n+    private Future<ProtonDelivery> sendEmptyEvent(\n+            final String tenant,\n+            final String deviceId,\n+            final String gatewayId,\n+            final Span span) {\n+\n+        Objects.requireNonNull(tenant);\n+        Objects.requireNonNull(deviceId);\n+\n+        LOG.debug(\"sending auto-provisioning event for device {} via gateway {}\", deviceId, gatewayId);\n+\n+        final Future<TenantResult<TenantObject>> tenantTracker = tenantInformationService.getTenant(tenant, span);\n+        final Future<DownstreamSender> senderTracker = downstreamSenderFactory.getOrCreateEventSender(tenant);\n+\n+        return CompositeFuture.all(tenantTracker, senderTracker).compose(ok -> {\n+            final Message msg = MessageHelper.newMessage(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3467601a96b1383ffda871cfdcade7a3bf1b761"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0NDQ4Nw==", "bodyText": "How about adding information about null check of parameters using @throws in the JavaDoc?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r521244487", "createdAt": "2020-11-11T09:58:56Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -192,6 +332,44 @@ public final void setTenantInformationService(final TenantInformationService ten\n         return assertRegistration(tenantId, deviceId, gatewayId, NoopSpan.INSTANCE);\n     }\n \n+    /**\n+     * Adds a new edge device in the process of auto-provisioning of not yet registered edge devices sending data\n+     * via a gateway.\n+     *\n+     * @param tenantId The tenant that the device belongs to.\n+     * @param deviceId The ID the device should be registered under.\n+     * @param device Device information, must not be {@code null}.\n+     * @param span The active OpenTracing span for this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *         The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/createDeviceRegistration\">\n+     *         Device Registry Management API - Create Device Registration </a>\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3467601a96b1383ffda871cfdcade7a3bf1b761"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0NTAyOQ==", "bodyText": "How about adding information about null check of parameters using @throws in the JavaDoc?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r521245029", "createdAt": "2020-11-11T09:59:51Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -192,6 +332,44 @@ public final void setTenantInformationService(final TenantInformationService ten\n         return assertRegistration(tenantId, deviceId, gatewayId, NoopSpan.INSTANCE);\n     }\n \n+    /**\n+     * Adds a new edge device in the process of auto-provisioning of not yet registered edge devices sending data\n+     * via a gateway.\n+     *\n+     * @param tenantId The tenant that the device belongs to.\n+     * @param deviceId The ID the device should be registered under.\n+     * @param device Device information, must not be {@code null}.\n+     * @param span The active OpenTracing span for this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *         The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/createDeviceRegistration\">\n+     *         Device Registry Management API - Create Device Registration </a>\n+     */\n+    protected abstract Future<OperationResult<Id>> addEdgeDevice(String tenantId, Optional<String> deviceId, Device device, Span span);\n+\n+    private Future<OperationResult<Id>> setAutoProvisioningNotificationSent(final String tenantId, final String deviceId, final JsonObject deviceJson, final Span span) {\n+        final Device device = deviceJson.mapTo(Device.class);\n+        device.setAutoProvisioningNotificationSent(true);\n+        return updateDevice(tenantId, deviceId, device, Optional.empty(), span);\n+    }\n+\n+    /**\n+     * Updates device registration data.\n+     *\n+     * @param tenantId The tenant the device belongs to.\n+     * @param deviceId The ID of the device to update the registration for.\n+     * @param device Device information, must not be {@code null}.\n+     * @param resourceVersion The identifier of the resource version to update.\n+     * @param span The active OpenTracing span for this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *         The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/updateRegistration\">\n+     *         Device Registry Management API - Update Device Registration </a>\n+     */\n+    public abstract Future<OperationResult<Id>> updateDevice(String tenantId, String deviceId, Device device, Optional<String> resourceVersion, Span span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3467601a96b1383ffda871cfdcade7a3bf1b761"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2MTEwMg==", "bodyText": "How about updating the JavaDoc of this method about auto provisioning of devices for gateways?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r521261102", "createdAt": "2020-11-11T10:27:46Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -227,7 +405,41 @@ public final void setTenantInformationService(final TenantInformationService ten\n                                 final RegistrationResult deviceResult = deviceInfoTracker.result();\n                                 final RegistrationResult gatewayResult = gatewayInfoTracker.result();\n \n-                                if (!isDeviceEnabled(deviceResult)) {\n+                                if (deviceResult.isNotFound() && !gatewayResult.isNotFound()\n+                                        && isDeviceEnabled(gatewayResult) && hasAuthorityForAutoRegistration(gatewayResult)) {\n+\n+                                    final Device device = new Device()\n+                                        .setEnabled(true)\n+                                        .setAutoProvisioned(true)\n+                                        .setVia(Collections.singletonList(gatewayId));\n+\n+                                    final JsonArray memberOf = gatewayResult.getPayload().getJsonObject(RegistrationConstants.FIELD_DATA)\n+                                            .getJsonArray(RegistryManagementConstants.FIELD_MEMBER_OF);\n+                                    if (memberOf != null && !memberOf.isEmpty()) {\n+                                        device.setViaGroups(memberOf.getList());\n+                                    }\n+\n+                                    LOG.debug(\"auto-provisioning device {} for gateway {}\", deviceId, gatewayId);\n+                                    final Span childSpan = TracingHelper.buildChildSpan(tracer, span.context(), \"auto-provisioning\", Constants.PROTOCOL_ADAPTER_TYPE_DEVICE_REGISTRY)\n+                                            .start();\n+                                    return addEdgeDevice(tenantId, Optional.of(deviceId), device, childSpan)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3467601a96b1383ffda871cfdcade7a3bf1b761"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMzc1Nw==", "bodyText": "How about adding information about null check of parameters in this public method?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r529523757", "createdAt": "2020-11-24T12:55:41Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -192,6 +332,45 @@ public final void setTenantInformationService(final TenantInformationService ten\n         return assertRegistration(tenantId, deviceId, gatewayId, NoopSpan.INSTANCE);\n     }\n \n+    /**\n+     * Adds a new edge device in the process of auto-provisioning of not yet registered edge devices sending data\n+     * via a gateway.\n+     *\n+     * @param tenantId The tenant that the device belongs to.\n+     * @param deviceId The ID the device should be registered under.\n+     * @param device Device information, must not be {@code null}.\n+     * @param span The active OpenTracing span for this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *         The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/createDeviceRegistration\">\n+     *         Device Registry Management API - Create Device Registration </a>\n+     */\n+    protected abstract Future<OperationResult<Id>> addEdgeDevice(String tenantId, Optional<String> deviceId, Device device, Span span);\n+\n+    private Future<OperationResult<Id>> setAutoProvisioningNotificationSent(final String tenantId, final String deviceId, final JsonObject deviceJson, final Span span) {\n+        final Device device = deviceJson.mapTo(Device.class);\n+        return updateDevice(tenantId, deviceId, Optional.of(true), device, Optional.empty(), span);\n+    }\n+\n+    /**\n+     * Updates device registration data.\n+     *\n+     * @param tenantId The tenant the device belongs to.\n+     * @param deviceId The ID of the device to update the registration for.\n+     * @param autoProvisioningNotificationSent Marks the auto-provisioning notification for this device as sent.\n+     *                                         If set to {@link Optional#empty()} the value will not be updated.\n+     * @param device Device information, must not be {@code null}.\n+     * @param resourceVersion The identifier of the resource version to update.\n+     * @param span The active OpenTracing span for this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *         The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/updateRegistration\">\n+     *         Device Registry Management API - Update Device Registration </a>\n+     */\n+    public abstract Future<OperationResult<Id>> updateDevice(String tenantId, String deviceId, Optional<Boolean> autoProvisioningNotificationSent, Device device,  Optional<String> resourceVersion, Span span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2ODQ1Mw==", "bodyText": "How about adding info about null checks in the JavaDoc  * @throws NullPointerException if any of the parameters are {@code null}.?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r529568453", "createdAt": "2020-11-24T14:03:58Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/tenant/TenantInformationService.java", "diffHunk": "@@ -42,4 +44,22 @@\n      */\n      Future<Result<TenantKey>> tenantExists(String tenantId, Span span);\n \n+    /**\n+     * Gets the tenant identified by the given id.\n+     *\n+     * @param tenantId The id identifying the tenant to obtain.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method!\n+     *            An implementation should log (error) events on this span and it may set tags and use this span as the\n+     *            parent for any spans created in this method.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *             The <em>status</em> will be\n+     *             <ul>\n+     *             <li><em>200 OK</em> if a tenant with the given ID is registered.\n+     *             The <em>payload</em> will contain the tenant's configuration information.</li>\n+     *             <li><em>404 Not Found</em> if no tenant with the given identifier exists.</li>\n+     *             </ul>\n+     */\n+     Future<TenantResult<TenantObject>> getTenant(String tenantId, Span span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU3NzE5MA==", "bodyText": "There are many longer lines as the one above and could be formatted to fit the Hono code style provided in\nhono/eclipse/hono-code-style.xml. I have my IDE's code formatter configured to use the hono-code-style.xml.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r529577190", "createdAt": "2020-11-24T14:16:10Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -227,7 +406,40 @@ public final void setTenantInformationService(final TenantInformationService ten\n                                 final RegistrationResult deviceResult = deviceInfoTracker.result();\n                                 final RegistrationResult gatewayResult = gatewayInfoTracker.result();\n \n-                                if (!isDeviceEnabled(deviceResult)) {\n+                                if (deviceResult.isNotFound() && !gatewayResult.isNotFound()\n+                                        && isDeviceEnabled(gatewayResult) && hasAuthorityForAutoRegistration(gatewayResult)) {\n+\n+                                    final Device device = new Device()\n+                                        .setEnabled(true)\n+                                        .setVia(Collections.singletonList(gatewayId));\n+\n+                                    final JsonArray memberOf = gatewayResult.getPayload().getJsonObject(RegistrationConstants.FIELD_DATA)\n+                                            .getJsonArray(RegistryManagementConstants.FIELD_MEMBER_OF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjIzNw==", "bodyText": "I think it has been accidentally misspelt as authorties instead of authorities.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r529582237", "createdAt": "2020-11-24T14:23:06Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -433,10 +653,27 @@ private boolean isDeviceEnabled(final RegistrationResult registrationResult) {\n                 isDeviceEnabled(registrationResult.getPayload().getJsonObject(RegistrationConstants.FIELD_DATA));\n     }\n \n+    private boolean wasDeviceAutoProvisioned(final JsonObject registrationData) {\n+        return registrationData.getJsonObject(RegistryManagementConstants.FIELD_STATUS, new JsonObject())\n+                .getBoolean(RegistrationConstants.FIELD_AUTO_PROVISIONED, Boolean.FALSE);\n+    }\n+\n+    private boolean wasAutoProvisioningNotificationSent(final JsonObject registrationData) {\n+        return registrationData.getJsonObject(RegistryManagementConstants.FIELD_STATUS, new JsonObject())\n+                .getBoolean(RegistrationConstants.FIELD_AUTO_PROVISIONING_NOTIFICATION_SENT, Boolean.FALSE);\n+    }\n+\n     private boolean isDeviceEnabled(final JsonObject registrationData) {\n         return registrationData.getBoolean(RegistrationConstants.FIELD_ENABLED, Boolean.TRUE);\n     }\n \n+    private boolean hasAuthorityForAutoRegistration(final RegistrationResult registrationResult) {\n+        final JsonArray authorties = registrationResult.getPayload().getJsonObject(RegistrationConstants.FIELD_DATA)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQ5MQ==", "bodyText": "I think it has been accidentally misspelt as authorties instead of authorities.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r529582491", "createdAt": "2020-11-24T14:23:27Z", "author": {"login": "kaniyan"}, "path": "site/documentation/content/api/management/device-registry-v1.yaml", "diffHunk": "@@ -988,6 +988,14 @@ components:\n                description: |\n                   The IDs of the gateway groups that this device is a member of.\n                   Note that neither \"via\" nor \"viaGroups\" must be set if \"memberOf\" is set.\n+            \"authorities\":\n+               type: array\n+               items:\n+                  type: string\n+               description: |\n+                  The authorties granted to a device. Applies to gateways only currently: the authority", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3", "committedDate": "2020-11-24T11:28:45Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "76025722054b401bc51583b28a8ddda51aa6877c", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/76025722054b401bc51583b28a8ddda51aa6877c", "committedDate": "2020-11-30T16:14:59Z", "message": "Adding integration tests.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76025722054b401bc51583b28a8ddda51aa6877c", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/76025722054b401bc51583b28a8ddda51aa6877c", "committedDate": "2020-11-30T16:14:59Z", "message": "Adding integration tests.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "ec01306e52184d89c6fb36b94219eaaecd796e7e", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/ec01306e52184d89c6fb36b94219eaaecd796e7e", "committedDate": "2020-12-01T15:57:24Z", "message": "Adding integration tests.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec01306e52184d89c6fb36b94219eaaecd796e7e", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/ec01306e52184d89c6fb36b94219eaaecd796e7e", "committedDate": "2020-12-01T15:57:24Z", "message": "Adding integration tests.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "4558ac2223b6568e53230215448863f7830fa0c4", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/4558ac2223b6568e53230215448863f7830fa0c4", "committedDate": "2020-12-01T16:35:26Z", "message": "Adding integration tests.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21429aab6a2da93039f83073315a9e9633ba6a2e", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/21429aab6a2da93039f83073315a9e9633ba6a2e", "committedDate": "2020-12-03T15:07:41Z", "message": "- Taking care of possible conflicts when adding a device in the course of auto-provisioning\n- Refactoring into a separate method\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "abcaec5f876db01960e8f75a292ad169c438244e", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/abcaec5f876db01960e8f75a292ad169c438244e", "committedDate": "2020-12-03T15:21:37Z", "message": "- Taking care of possible conflicts when adding a device in the course of auto-provisioning\n- Refactoring into a separate method\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abcaec5f876db01960e8f75a292ad169c438244e", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/abcaec5f876db01960e8f75a292ad169c438244e", "committedDate": "2020-12-03T15:21:37Z", "message": "- Taking care of possible conflicts when adding a device in the course of auto-provisioning\n- Refactoring into a separate method\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "664f109a5c98c1b620542ba7f82fa82c413982df", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/664f109a5c98c1b620542ba7f82fa82c413982df", "committedDate": "2020-12-04T12:07:20Z", "message": "- Taking care of possible conflicts when adding a device in the course of auto-provisioning\n- Refactoring into a separate method\n- Taking care of failed assertion requests\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "664f109a5c98c1b620542ba7f82fa82c413982df", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/664f109a5c98c1b620542ba7f82fa82c413982df", "committedDate": "2020-12-04T12:07:20Z", "message": "- Taking care of possible conflicts when adding a device in the course of auto-provisioning\n- Refactoring into a separate method\n- Taking care of failed assertion requests\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "7b5ce6b7865ddaf2038eb5f86f3870491370cdc0", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/7b5ce6b7865ddaf2038eb5f86f3870491370cdc0", "committedDate": "2020-12-04T15:00:25Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b5ce6b7865ddaf2038eb5f86f3870491370cdc0", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/7b5ce6b7865ddaf2038eb5f86f3870491370cdc0", "committedDate": "2020-12-04T15:00:25Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "86c4f7a084d2bdce41239db4a1bb64dada69641f", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/86c4f7a084d2bdce41239db4a1bb64dada69641f", "committedDate": "2020-12-04T16:11:19Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a43a6d34ae867eed17882ed12cd938ead5bfcb4", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/6a43a6d34ae867eed17882ed12cd938ead5bfcb4", "committedDate": "2020-12-08T09:46:00Z", "message": "Fix import\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "802225739750527d3dd786af75769fb3b51d0883", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/802225739750527d3dd786af75769fb3b51d0883", "committedDate": "2020-12-08T12:19:07Z", "message": "[#2053] Adding integration tests for gateway-based auto provisioning.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd4522d20304236aeeb14a3e89791643daf3bec5", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/cd4522d20304236aeeb14a3e89791643daf3bec5", "committedDate": "2020-12-08T13:57:39Z", "message": "Further cleanup and refactoring\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "479d5276895cdc0314b6d4a715b3bba6ec290693", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/479d5276895cdc0314b6d4a715b3bba6ec290693", "committedDate": "2020-12-08T15:31:08Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "479d5276895cdc0314b6d4a715b3bba6ec290693", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/479d5276895cdc0314b6d4a715b3bba6ec290693", "committedDate": "2020-12-08T15:31:08Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "ea5ba45d19a5d80dbc673f6684c87fe179898372", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/ea5ba45d19a5d80dbc673f6684c87fe179898372", "committedDate": "2020-12-08T16:11:56Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea5ba45d19a5d80dbc673f6684c87fe179898372", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/ea5ba45d19a5d80dbc673f6684c87fe179898372", "committedDate": "2020-12-08T16:11:56Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "c1e0fb99921a83e95f882453799faab012512ef9", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/c1e0fb99921a83e95f882453799faab012512ef9", "committedDate": "2020-12-08T16:30:45Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1e0fb99921a83e95f882453799faab012512ef9", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/c1e0fb99921a83e95f882453799faab012512ef9", "committedDate": "2020-12-08T16:30:45Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "6e11c9e947e8dacc8a928c29a0b65b59f13057ec", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/6e11c9e947e8dacc8a928c29a0b65b59f13057ec", "committedDate": "2020-12-08T16:43:10Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e11c9e947e8dacc8a928c29a0b65b59f13057ec", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/6e11c9e947e8dacc8a928c29a0b65b59f13057ec", "committedDate": "2020-12-08T16:43:10Z", "message": "[#2053] Implementing auto provisioning of devices for gateways\n\nBased on newly introduced authorities for a registered device a gateway is now enabled to perform auto-provisioning of edge devices. Applications are notified of auto-provisioned devices by receiving an empty event with corresponding application properties set.\n\nThis fixes #2053\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/50592ff8f74a36e6bde7f314a0ab4b2d1564e809", "committedDate": "2020-12-08T17:01:25Z", "message": "[#2053] Adding capability to auto-provision devices to registration service base classes.\n\nBuilding upon the implementation of auto-provisioning edge devices in the registration service bases classes, Hono's device registry implementation can be adapted to support auto-provisioning of edge devices which send telemetry data via gateway.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3ODc1MDg0", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-547875084", "createdAt": "2020-12-09T06:29:58Z", "commit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoyOTo1OFrOICEmCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjo1NzowNVrOICFRVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0MzMzOQ==", "bodyText": "Missing Javadoc.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r539043339", "createdAt": "2020-12-09T06:29:58Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -73,27 +111,24 @@ public final void setTenantInformationService(final TenantInformationService ten\n         this.tenantInformationService = tenantInformationService;\n     }\n \n+    public TenantInformationService getTenantInformationService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0MzY0Mw==", "bodyText": "Add comma: \"If set,\"", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r539043643", "createdAt": "2020-12-09T06:30:50Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -73,27 +111,24 @@ public final void setTenantInformationService(final TenantInformationService ten\n         this.tenantInformationService = tenantInformationService;\n     }\n \n+    public TenantInformationService getTenantInformationService() {\n+        return tenantInformationService;\n+    }\n+\n     /**\n-     * Gets device registration data by device ID.\n+     * Sets the AutoProvisioner to use.\n+     * <p>\n+     * If set gateway based auto-provisioning will be performed. Defaults to {@code null} meaning auto-provisioning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0NDA2MA==", "bodyText": "deviceManagementService and deviceRegistrationInformationService can be final.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r539044060", "createdAt": "2020-12-09T06:31:55Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AutoProvisioner.class);\n+\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    private DeviceManagementService deviceManagementService;\n+\n+    private DeviceRegistrationInformationService deviceRegistrationInformationService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0ODA3MA==", "bodyText": "In almost all of Hono (except for the JDBC packages), Future.compose instead of Future.flatMap is used (flatMap is an alias for compose here). Therefore I would prefer that here for better readability.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r539048070", "createdAt": "2020-12-09T06:41:39Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/tenant/AutowiredTenantInformationService.java", "diffHunk": "@@ -53,6 +55,18 @@\n                 });\n     }\n \n+    @Override\n+    public Future<TenantResult<TenantObject>> getTenant(final String tenantId, final Span span) {\n+        return service.get(tenantId, span)\n+                .flatMap(result -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1MTMyNQ==", "bodyText": "According to the Javadoc in the interface, this method returns a succeeded Future with 404 status if no corresponding tenant was found. So, a result.isNotFound() case, returning a succeeded Future, seems to be missing here.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r539051325", "createdAt": "2020-12-09T06:49:29Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/tenant/AutowiredTenantInformationService.java", "diffHunk": "@@ -53,6 +55,18 @@\n                 });\n     }\n \n+    @Override\n+    public Future<TenantResult<TenantObject>> getTenant(final String tenantId, final Span span) {\n+        return service.get(tenantId, span)\n+                .flatMap(result -> {\n+                    if (result.isOk()) {\n+                        return Future.succeededFuture(TenantResult.from(HttpURLConnection.HTTP_OK, result.getPayload().mapTo(TenantObject.class)));\n+                    } else {\n+                        return Future.failedFuture(\"cannot get tenant [\" + tenantId + \"]: \" + result.getStatus() + \" \" + result.getPayload());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1MjA0Mw==", "bodyText": "\"device's\" - same in getter below.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r539052043", "createdAt": "2020-12-09T06:51:20Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -302,4 +311,25 @@ public final Device setStatus(final DeviceStatus status) {\n     public final DeviceStatus getStatus() {\n         return status;\n     }\n+\n+    /**\n+     * Sets the authorities granted to this device.\n+     *\n+     * @param authorities The devices' authorities.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1Mzg5Ng==", "bodyText": "To make this more robust, I would suggest adding:\nif (!deviceId.isPresent()) return Future.failedFuture(\"missing device id\");", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r539053896", "createdAt": "2020-12-09T06:55:48Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationServiceTest.java", "diffHunk": "@@ -113,6 +165,255 @@ public void testAssertRegistrationContainsDeviceInfo(final VertxTestContext ctx)\n             }));\n     }\n \n+    /**\n+     * Verifies that a device is auto-provisioned when an authorized gateway sends data on behalf of it.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testAssertRegistrationPerformsAutoProvisioningForAuthorizedGateway(final VertxTestContext ctx) {\n+        mockAssertRegistration(GATEWAY_ID, Collections.singletonList(GATEWAY_GROUP_ID), Collections.singletonList(RegistryManagementConstants.AUTHORITY_AUTO_PROVISIONING_ENABLED));\n+        mockAssertRegistration(DEVICE_ID, true);\n+        mockAddEdgeDevice(HttpURLConnection.HTTP_CREATED);\n+\n+        service.assertRegistration(Constants.DEFAULT_TENANT, DEVICE_ID, GATEWAY_ID, span)\n+                .onComplete(ctx.succeeding(result -> {\n+                    ctx.verify(() -> {\n+                        verifySuccessfulAutoProvisioning(result);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    private void mockAssertRegistration(final String deviceId, final List<String> memberOf, final List<String> authorities) {\n+        final JsonObject registeredGateway = new JsonObject()\n+                .put(RegistryManagementConstants.FIELD_MEMBER_OF, new JsonArray(memberOf))\n+                .put(RegistryManagementConstants.FIELD_AUTHORITIES, new JsonArray(authorities));\n+\n+        when(service.processAssertRegistration(eq(DeviceKey.from(TenantKey.from(Constants.DEFAULT_TENANT), deviceId)), any(Span.class)))\n+                .thenReturn(Future.succeededFuture(RegistrationResult.from(HttpURLConnection.HTTP_OK,\n+                        new JsonObject().put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n+                                .put(RegistrationConstants.FIELD_DATA, registeredGateway))));\n+\n+    }\n+\n+    private void mockAssertRegistration(final String deviceId, final boolean autoProvisioningNotificationSent) {\n+        when(service.processAssertRegistration(eq(DeviceKey.from(TenantKey.from(Constants.DEFAULT_TENANT), deviceId)), any(Span.class)))\n+                .thenReturn(Future.succeededFuture(RegistrationResult.from(HttpURLConnection.HTTP_NOT_FOUND)))\n+                .thenReturn(Future.succeededFuture(newRegistrationResult(deviceId, autoProvisioningNotificationSent)));\n+\n+    }\n+\n+    private RegistrationResult newRegistrationResult(final String deviceId, final boolean autoProvisioningNotificationSent) {\n+        return RegistrationResult.from(HttpURLConnection.HTTP_OK,\n+                new JsonObject().put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n+                        .put(RegistrationConstants.FIELD_DATA, new JsonObject()\n+                                .put(RegistrationConstants.FIELD_VIA, AbstractRegistrationServiceTest.GATEWAY_ID)\n+                                .put(RegistryManagementConstants.FIELD_STATUS, new JsonObject()\n+                                        .put(RegistrationConstants.FIELD_AUTO_PROVISIONED, true)\n+                                        .put(RegistrationConstants.FIELD_AUTO_PROVISIONING_NOTIFICATION_SENT, autoProvisioningNotificationSent))));\n+    }\n+\n+    /**\n+     * Verifies that auto-provisioning still succeeds if the device to be auto-provisioned has already been created\n+     * (e.g. by a concurrently running request) and the notification has already been sent.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testAssertRegistrationCanAutoProvisionForAlreadyPresentEdgeDevice(final VertxTestContext ctx) {\n+        mockAssertRegistration(GATEWAY_ID, Collections.singletonList(GATEWAY_GROUP_ID), Collections.singletonList(RegistryManagementConstants.AUTHORITY_AUTO_PROVISIONING_ENABLED));\n+        mockAssertRegistration(DEVICE_ID, true);\n+        mockAddEdgeDevice(HttpURLConnection.HTTP_CONFLICT);\n+\n+        service.assertRegistration(Constants.DEFAULT_TENANT, DEVICE_ID, GATEWAY_ID, span)\n+                .onComplete(ctx.succeeding(result -> {\n+                    ctx.verify(() -> {\n+                        assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_OK);\n+\n+                        verify(service).createDevice(any(), any(), any(), any());\n+\n+                        verify(sender, never()).sendAndWaitForOutcome(any(), any());\n+                        verify(service, never()).updateDevice(eq(Constants.DEFAULT_TENANT), eq(DEVICE_ID), any(), any(), any());\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    private void mockAddEdgeDevice(final int httpOk) {\n+        when(service.createDevice(any(), any(), any(), any()))\n+                .thenAnswer((Answer<Future<OperationResult<Id>>>) invocation -> {\n+                    final Optional<String> deviceId = invocation.getArgument(1);\n+                    return Future.succeededFuture(OperationResult.ok(httpOk, Id.of(deviceId.get()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1NDQyMg==", "bodyText": "Just 2020.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r539054422", "createdAt": "2020-12-09T06:57:05Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/DeviceRegistrationInformationService.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50592ff8f74a36e6bde7f314a0ab4b2d1564e809"}, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d675bfbb4b5bdabce1f65ba842274a1ca8353ebe", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/d675bfbb4b5bdabce1f65ba842274a1ca8353ebe", "committedDate": "2020-12-09T10:25:17Z", "message": "Review suggestions calohmn\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/7465b5c73a33c8a529eeb7e292ef6f1670a4f645", "committedDate": "2020-12-09T10:30:04Z", "message": "[#2053] Adding capability to auto-provision devices to registration service base classes.\n\nBuilding upon the implementation of auto-provisioning edge devices in the registration service bases classes, Hono's device registry implementation can be adapted to support auto-provisioning of edge devices which send telemetry data via gateway.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDY5NTk5", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-549469599", "createdAt": "2020-12-10T18:07:40Z", "commit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODowNzo0MVrOIDWlrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODozMjowM1rOIDXkWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4NjczNA==", "bodyText": "What will happen to opentracingTracer.getClass().getName() when opentracingTracer is null? The null check in the next line should be done first.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r540386734", "createdAt": "2020-12-10T18:07:41Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AutoProvisioner.class);\n+\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    private final DeviceManagementService deviceManagementService;\n+\n+    private final DeviceRegistrationInformationService deviceRegistrationInformationService;\n+\n+    private TenantInformationService tenantInformationService = new NoopTenantInformationService();\n+\n+    private DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    private Vertx vertx;\n+\n+    private AutoProvisionerConfigProperties config;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param deviceManagementService The device management service to be used.\n+     * @param deviceRegistrationInformationService The device registration information service to be used.\n+     */\n+    public AutoProvisioner(\n+            final DeviceManagementService deviceManagementService,\n+            final DeviceRegistrationInformationService deviceRegistrationInformationService) {\n+        this.deviceManagementService = deviceManagementService;\n+        this.deviceRegistrationInformationService = deviceRegistrationInformationService;\n+    }\n+\n+    @Override\n+    public final Future<Void> start() {\n+        // Required since every endpoint may call the start() method of its referenced service leading to multiple calls\n+        // to start(). This results in an exception in the factory's connect() method.\n+        synchronized (this) {\n+            if (connectionAttempt == null) {\n+                connectionAttempt = downstreamSenderFactory.connect().map(connection -> {\n+                    LOG.info(\"connected to AMQP network\");\n+                    if (vertx == null && connection != null) {\n+                        vertx = connection.getVertx();\n+                    }\n+                    return connection;\n+                }).recover(t -> {\n+                    LOG.warn(\"failed to connect to AMQP network\", t);\n+                    return Future.failedFuture(t);\n+                });\n+            }\n+        }\n+\n+        return connectionAttempt.mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        final Promise<Void> result = Promise.promise();\n+        downstreamSenderFactory.disconnect(result);\n+        return result.future();\n+    }\n+\n+    /**\n+     * Sets the vert.x instance.\n+     *\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x is {@code null}.\n+     */\n+    @Autowired\n+    public final void setVertx(final Vertx vertx) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     *\n+     * @param factory The factory.\n+     * @throws NullPointerException if the factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDownstreamSenderFactory(final DownstreamSenderFactory factory) {\n+        this.downstreamSenderFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the service to use for checking existence of tenants.\n+     * <p>\n+     * If not set, tenant existence will not be verified.\n+     *\n+     * @param tenantInformationService The tenant information service.\n+     * @throws NullPointerException if service is {@code null};\n+     */\n+    @Autowired(required = false)\n+    public final void setTenantInformationService(final TenantInformationService tenantInformationService) {\n+        this.tenantInformationService = Objects.requireNonNull(tenantInformationService);\n+        LOG.info(\"using {}\", tenantInformationService);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     * @throws NullPointerException if the opentracingTracer is {@code null}.\n+     */\n+    @Autowired(required = false)\n+    public final void setTracer(final Tracer opentracingTracer) {\n+        LOG.info(\"using OpenTracing Tracer implementation [{}]\", opentracingTracer.getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4OTExOQ==", "bodyText": "AutoProvisionerConfigProperties#DEFAULT_RETRY_EVENT_SENDING_DELAY is inaccessible from here as it is declared as private.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r540389119", "createdAt": "2020-12-10T18:11:14Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AutoProvisioner.class);\n+\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    private final DeviceManagementService deviceManagementService;\n+\n+    private final DeviceRegistrationInformationService deviceRegistrationInformationService;\n+\n+    private TenantInformationService tenantInformationService = new NoopTenantInformationService();\n+\n+    private DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    private Vertx vertx;\n+\n+    private AutoProvisionerConfigProperties config;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param deviceManagementService The device management service to be used.\n+     * @param deviceRegistrationInformationService The device registration information service to be used.\n+     */\n+    public AutoProvisioner(\n+            final DeviceManagementService deviceManagementService,\n+            final DeviceRegistrationInformationService deviceRegistrationInformationService) {\n+        this.deviceManagementService = deviceManagementService;\n+        this.deviceRegistrationInformationService = deviceRegistrationInformationService;\n+    }\n+\n+    @Override\n+    public final Future<Void> start() {\n+        // Required since every endpoint may call the start() method of its referenced service leading to multiple calls\n+        // to start(). This results in an exception in the factory's connect() method.\n+        synchronized (this) {\n+            if (connectionAttempt == null) {\n+                connectionAttempt = downstreamSenderFactory.connect().map(connection -> {\n+                    LOG.info(\"connected to AMQP network\");\n+                    if (vertx == null && connection != null) {\n+                        vertx = connection.getVertx();\n+                    }\n+                    return connection;\n+                }).recover(t -> {\n+                    LOG.warn(\"failed to connect to AMQP network\", t);\n+                    return Future.failedFuture(t);\n+                });\n+            }\n+        }\n+\n+        return connectionAttempt.mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        final Promise<Void> result = Promise.promise();\n+        downstreamSenderFactory.disconnect(result);\n+        return result.future();\n+    }\n+\n+    /**\n+     * Sets the vert.x instance.\n+     *\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x is {@code null}.\n+     */\n+    @Autowired\n+    public final void setVertx(final Vertx vertx) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     *\n+     * @param factory The factory.\n+     * @throws NullPointerException if the factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDownstreamSenderFactory(final DownstreamSenderFactory factory) {\n+        this.downstreamSenderFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the service to use for checking existence of tenants.\n+     * <p>\n+     * If not set, tenant existence will not be verified.\n+     *\n+     * @param tenantInformationService The tenant information service.\n+     * @throws NullPointerException if service is {@code null};\n+     */\n+    @Autowired(required = false)\n+    public final void setTenantInformationService(final TenantInformationService tenantInformationService) {\n+        this.tenantInformationService = Objects.requireNonNull(tenantInformationService);\n+        LOG.info(\"using {}\", tenantInformationService);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     * @throws NullPointerException if the opentracingTracer is {@code null}.\n+     */\n+    @Autowired(required = false)\n+    public final void setTracer(final Tracer opentracingTracer) {\n+        LOG.info(\"using OpenTracing Tracer implementation [{}]\", opentracingTracer.getClass().getName());\n+        this.tracer = Objects.requireNonNull(opentracingTracer);\n+    }\n+\n+    /**\n+     * Sets the configuration to use for auto-provisioning.\n+     *\n+     * @param config The configuration to set.\n+     * @throws NullPointerException if the config is {@code null}.\n+     */\n+    @Autowired\n+    public void setConfig(final AutoProvisionerConfigProperties config) {\n+        this.config = Objects.requireNonNull(config);\n+    }\n+\n+    private Future<ProtonDelivery> sendAutoProvisioningEvent(\n+            final String tenantId,\n+            final String deviceId,\n+            final String gatewayId,\n+            final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        LOG.debug(\"sending auto-provisioning event for device [{}] created via gateway [{}] [tenant-id: {}]\", deviceId, gatewayId, tenantId);\n+\n+        final Future<TenantResult<TenantObject>> tenantTracker = tenantInformationService.getTenant(tenantId, span);\n+        final Future<DownstreamSender> senderTracker = downstreamSenderFactory.getOrCreateEventSender(tenantId);\n+\n+        return CompositeFuture.all(tenantTracker, senderTracker).compose(ok -> {\n+            final Map<String, Object> props = new HashMap<>();\n+            props.put(MessageHelper.APP_PROPERTY_QOS, QoS.AT_LEAST_ONCE.ordinal());\n+            props.put(MessageHelper.APP_PROPERTY_DEVICE_ID, deviceId);\n+            props.put(MessageHelper.APP_PROPERTY_TENANT_ID, tenantId);\n+            props.put(MessageHelper.APP_PROPERTY_GATEWAY_ID, gatewayId);\n+            props.put(MessageHelper.APP_PROPERTY_REGISTRATION_STATUS, EventConstants.RegistrationStatus.NEW.name());\n+            props.put(MessageHelper.APP_PROPERTY_ORIG_ADAPTER, Constants.PROTOCOL_ADAPTER_TYPE_DEVICE_REGISTRY);\n+            props.put(MessageHelper.APP_PROPERTY_ORIG_ADDRESS, EventConstants.EVENT_ENDPOINT);\n+\n+            final Message msg = MessageHelper.newMessage(\n+                    ResourceIdentifier.from(EventConstants.EVENT_ENDPOINT, tenantId, deviceId),\n+                    EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION,\n+                    null,\n+                    tenantTracker.result().getPayload(),\n+                    props,\n+                    null,\n+                    false,\n+                    false);\n+\n+            final DownstreamSender sender = senderTracker.result();\n+            return sender.sendAndWaitForOutcome(msg, span.context())\n+                    .onFailure(t -> LOG.info(\"error sending auto-provisioning event for device [{}] created via gateway [{}] [tenant-id: {}]\", deviceId, gatewayId, tenantId));\n+        });\n+    }\n+\n+    /**\n+     * Auto-provisions the edge device using the given device id and the given registration data.\n+     *\n+     * @param tenantId The id of the tenant for which the edge device should be provisioned.\n+     * @param deviceId The id of the edge device which should be provisioned.\n+     * @param gatewayId The id of the edge device's gateway.\n+     * @param device The registration data for the device to be auto-provisioned.\n+     * @param spanContext The tracing context to be used by this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     */\n+    public Future<JsonObject> performAutoProvisioning(final String tenantId, final String deviceId,\n+            final String gatewayId, final Device device, final SpanContext spanContext) {\n+\n+        final Span span = TracingHelper\n+                .buildChildSpan(tracer, spanContext, \"auto-provision device for gateway\", Constants.PROTOCOL_ADAPTER_TYPE_DEVICE_REGISTRY)\n+                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n+                .withTag(TracingHelper.TAG_GATEWAY_ID, gatewayId)\n+                .start();\n+        TracingHelper.setDeviceTags(span, tenantId, deviceId);\n+\n+        return deviceManagementService.createDevice(tenantId, Optional.of(deviceId), device, span)\n+                // make sure an HTTP_CONFLICT result is handled as an OperationResult\n+                .recover(thr -> ServiceInvocationException.extractStatusCode(thr) == HttpURLConnection.HTTP_CONFLICT\n+                        ? Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_CONFLICT))\n+                        : Future.failedFuture(thr))\n+                .compose(addEdgeDeviceResult -> {\n+                    if (addEdgeDeviceResult.isError()) {\n+                        if (addEdgeDeviceResult.getStatus() != HttpURLConnection.HTTP_CONFLICT) {\n+                            return Future.failedFuture(StatusCodeMapper.from(addEdgeDeviceResult.getStatus(),\n+                                    String.format(\"failed to add edge device (status %d)\", addEdgeDeviceResult.getStatus())));\n+                        }\n+\n+                        // handle HTTP_CONFLICT, meaning the device already exists\n+                        span.log(\"device already exists\");\n+                        LOG.debug(\"device [{}] for gateway [{}] already created by concurrent auto-provisioning [tenant-id: {}]\",\n+                                deviceId, gatewayId, tenantId);\n+                        return deviceRegistrationInformationService.processAssertRegistration(DeviceKey.from(TenantKey.from(tenantId), deviceId), span)\n+                                .compose(assertRegistrationResult -> {\n+                                    final JsonObject deviceData = assertRegistrationResult.getPayload()\n+                                            .getJsonObject(RegistrationConstants.FIELD_DATA, new JsonObject());\n+                                    // ensure that a notification event gets sent (even if we might send duplicate events)\n+                                    return sendDelayedAutoProvisioningNotificationIfNeeded(tenantId, deviceId, gatewayId, deviceData, span)\n+                                            .map(deviceData);\n+                                });\n+                    }\n+\n+                    span.log(\"device created\");\n+                    LOG.trace(\"device [{}] for gateway [{}] successfully created by auto-provisioning [tenant-id: {}]\",\n+                            deviceId, gatewayId, tenantId);\n+                    return sendAutoProvisioningEvent(tenantId, deviceId, gatewayId, span)\n+                            .compose(sendEmptyEventOk -> deviceRegistrationInformationService.processAssertRegistration(DeviceKey.from((TenantKey.from(tenantId)), deviceId), span)\n+                                    .compose(deviceRegistrationData -> {\n+                                        if (!deviceRegistrationData.isOk()) {\n+                                            span.log(\"update of notification flag failed\");\n+                                            LOG.warn(\"notification flag of device [{}] for gateway [{}] of tenant [tenant-id: {}] could not be updated\",\n+                                                    deviceId, gatewayId, tenantId);\n+                                            return Future.failedFuture(StatusCodeMapper.from(deviceRegistrationData.getStatus(),\n+                                                    String.format(\"update of notification flag failed (status %d)\", deviceRegistrationData.getStatus())));\n+                                        }\n+\n+                                        final JsonObject deviceData = deviceRegistrationData.getPayload()\n+                                                .getJsonObject(RegistrationConstants.FIELD_DATA, new JsonObject());\n+                                        return setAutoProvisioningNotificationSent(tenantId, deviceId, deviceData, span)\n+                                                .map(deviceData);\n+                                    }));\n+                })\n+                .onFailure(thr -> TracingHelper.logError(span, thr))\n+                .onComplete(ar -> span.finish());\n+    }\n+\n+    /**\n+     * Notify northbound applications of an auto-provisioned device.\n+     *\n+     * @param tenantId The id of the tenant for which the edge device should be provisioned.\n+     * @param deviceId The id of the edge device which should be provisioned.\n+     * @param gatewayId The id of the edge device's gateway.\n+     * @param deviceData The data of the edge device.\n+     * @param span The span to be used for tracing this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *\n+     * @see AutoProvisionerConfigProperties#DEFAULT_RETRY_EVENT_SENDING_DELAY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645"}, "originalPosition": 312}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MTc2MA==", "bodyText": "Missing null check for both arguments.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r540391760", "createdAt": "2020-12-10T18:15:14Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AutoProvisioner.class);\n+\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    private final DeviceManagementService deviceManagementService;\n+\n+    private final DeviceRegistrationInformationService deviceRegistrationInformationService;\n+\n+    private TenantInformationService tenantInformationService = new NoopTenantInformationService();\n+\n+    private DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    private Vertx vertx;\n+\n+    private AutoProvisionerConfigProperties config;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param deviceManagementService The device management service to be used.\n+     * @param deviceRegistrationInformationService The device registration information service to be used.\n+     */\n+    public AutoProvisioner(\n+            final DeviceManagementService deviceManagementService,\n+            final DeviceRegistrationInformationService deviceRegistrationInformationService) {\n+        this.deviceManagementService = deviceManagementService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5Mjk0Mg==", "bodyText": "Also the span should be null checked, otherwise span.context() will throw error.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r540392942", "createdAt": "2020-12-10T18:17:05Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AutoProvisioner.class);\n+\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    private final DeviceManagementService deviceManagementService;\n+\n+    private final DeviceRegistrationInformationService deviceRegistrationInformationService;\n+\n+    private TenantInformationService tenantInformationService = new NoopTenantInformationService();\n+\n+    private DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    private Vertx vertx;\n+\n+    private AutoProvisionerConfigProperties config;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param deviceManagementService The device management service to be used.\n+     * @param deviceRegistrationInformationService The device registration information service to be used.\n+     */\n+    public AutoProvisioner(\n+            final DeviceManagementService deviceManagementService,\n+            final DeviceRegistrationInformationService deviceRegistrationInformationService) {\n+        this.deviceManagementService = deviceManagementService;\n+        this.deviceRegistrationInformationService = deviceRegistrationInformationService;\n+    }\n+\n+    @Override\n+    public final Future<Void> start() {\n+        // Required since every endpoint may call the start() method of its referenced service leading to multiple calls\n+        // to start(). This results in an exception in the factory's connect() method.\n+        synchronized (this) {\n+            if (connectionAttempt == null) {\n+                connectionAttempt = downstreamSenderFactory.connect().map(connection -> {\n+                    LOG.info(\"connected to AMQP network\");\n+                    if (vertx == null && connection != null) {\n+                        vertx = connection.getVertx();\n+                    }\n+                    return connection;\n+                }).recover(t -> {\n+                    LOG.warn(\"failed to connect to AMQP network\", t);\n+                    return Future.failedFuture(t);\n+                });\n+            }\n+        }\n+\n+        return connectionAttempt.mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        final Promise<Void> result = Promise.promise();\n+        downstreamSenderFactory.disconnect(result);\n+        return result.future();\n+    }\n+\n+    /**\n+     * Sets the vert.x instance.\n+     *\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x is {@code null}.\n+     */\n+    @Autowired\n+    public final void setVertx(final Vertx vertx) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     *\n+     * @param factory The factory.\n+     * @throws NullPointerException if the factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDownstreamSenderFactory(final DownstreamSenderFactory factory) {\n+        this.downstreamSenderFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the service to use for checking existence of tenants.\n+     * <p>\n+     * If not set, tenant existence will not be verified.\n+     *\n+     * @param tenantInformationService The tenant information service.\n+     * @throws NullPointerException if service is {@code null};\n+     */\n+    @Autowired(required = false)\n+    public final void setTenantInformationService(final TenantInformationService tenantInformationService) {\n+        this.tenantInformationService = Objects.requireNonNull(tenantInformationService);\n+        LOG.info(\"using {}\", tenantInformationService);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     * @throws NullPointerException if the opentracingTracer is {@code null}.\n+     */\n+    @Autowired(required = false)\n+    public final void setTracer(final Tracer opentracingTracer) {\n+        LOG.info(\"using OpenTracing Tracer implementation [{}]\", opentracingTracer.getClass().getName());\n+        this.tracer = Objects.requireNonNull(opentracingTracer);\n+    }\n+\n+    /**\n+     * Sets the configuration to use for auto-provisioning.\n+     *\n+     * @param config The configuration to set.\n+     * @throws NullPointerException if the config is {@code null}.\n+     */\n+    @Autowired\n+    public void setConfig(final AutoProvisionerConfigProperties config) {\n+        this.config = Objects.requireNonNull(config);\n+    }\n+\n+    private Future<ProtonDelivery> sendAutoProvisioningEvent(\n+            final String tenantId,\n+            final String deviceId,\n+            final String gatewayId,\n+            final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5Nzk0NQ==", "bodyText": "It is a public method and FMPOV the arguments should be null checked if applicable.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r540397945", "createdAt": "2020-12-10T18:24:50Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AutoProvisioner.class);\n+\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    private final DeviceManagementService deviceManagementService;\n+\n+    private final DeviceRegistrationInformationService deviceRegistrationInformationService;\n+\n+    private TenantInformationService tenantInformationService = new NoopTenantInformationService();\n+\n+    private DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    private Vertx vertx;\n+\n+    private AutoProvisionerConfigProperties config;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param deviceManagementService The device management service to be used.\n+     * @param deviceRegistrationInformationService The device registration information service to be used.\n+     */\n+    public AutoProvisioner(\n+            final DeviceManagementService deviceManagementService,\n+            final DeviceRegistrationInformationService deviceRegistrationInformationService) {\n+        this.deviceManagementService = deviceManagementService;\n+        this.deviceRegistrationInformationService = deviceRegistrationInformationService;\n+    }\n+\n+    @Override\n+    public final Future<Void> start() {\n+        // Required since every endpoint may call the start() method of its referenced service leading to multiple calls\n+        // to start(). This results in an exception in the factory's connect() method.\n+        synchronized (this) {\n+            if (connectionAttempt == null) {\n+                connectionAttempt = downstreamSenderFactory.connect().map(connection -> {\n+                    LOG.info(\"connected to AMQP network\");\n+                    if (vertx == null && connection != null) {\n+                        vertx = connection.getVertx();\n+                    }\n+                    return connection;\n+                }).recover(t -> {\n+                    LOG.warn(\"failed to connect to AMQP network\", t);\n+                    return Future.failedFuture(t);\n+                });\n+            }\n+        }\n+\n+        return connectionAttempt.mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        final Promise<Void> result = Promise.promise();\n+        downstreamSenderFactory.disconnect(result);\n+        return result.future();\n+    }\n+\n+    /**\n+     * Sets the vert.x instance.\n+     *\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x is {@code null}.\n+     */\n+    @Autowired\n+    public final void setVertx(final Vertx vertx) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     *\n+     * @param factory The factory.\n+     * @throws NullPointerException if the factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDownstreamSenderFactory(final DownstreamSenderFactory factory) {\n+        this.downstreamSenderFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the service to use for checking existence of tenants.\n+     * <p>\n+     * If not set, tenant existence will not be verified.\n+     *\n+     * @param tenantInformationService The tenant information service.\n+     * @throws NullPointerException if service is {@code null};\n+     */\n+    @Autowired(required = false)\n+    public final void setTenantInformationService(final TenantInformationService tenantInformationService) {\n+        this.tenantInformationService = Objects.requireNonNull(tenantInformationService);\n+        LOG.info(\"using {}\", tenantInformationService);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     * @throws NullPointerException if the opentracingTracer is {@code null}.\n+     */\n+    @Autowired(required = false)\n+    public final void setTracer(final Tracer opentracingTracer) {\n+        LOG.info(\"using OpenTracing Tracer implementation [{}]\", opentracingTracer.getClass().getName());\n+        this.tracer = Objects.requireNonNull(opentracingTracer);\n+    }\n+\n+    /**\n+     * Sets the configuration to use for auto-provisioning.\n+     *\n+     * @param config The configuration to set.\n+     * @throws NullPointerException if the config is {@code null}.\n+     */\n+    @Autowired\n+    public void setConfig(final AutoProvisionerConfigProperties config) {\n+        this.config = Objects.requireNonNull(config);\n+    }\n+\n+    private Future<ProtonDelivery> sendAutoProvisioningEvent(\n+            final String tenantId,\n+            final String deviceId,\n+            final String gatewayId,\n+            final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        LOG.debug(\"sending auto-provisioning event for device [{}] created via gateway [{}] [tenant-id: {}]\", deviceId, gatewayId, tenantId);\n+\n+        final Future<TenantResult<TenantObject>> tenantTracker = tenantInformationService.getTenant(tenantId, span);\n+        final Future<DownstreamSender> senderTracker = downstreamSenderFactory.getOrCreateEventSender(tenantId);\n+\n+        return CompositeFuture.all(tenantTracker, senderTracker).compose(ok -> {\n+            final Map<String, Object> props = new HashMap<>();\n+            props.put(MessageHelper.APP_PROPERTY_QOS, QoS.AT_LEAST_ONCE.ordinal());\n+            props.put(MessageHelper.APP_PROPERTY_DEVICE_ID, deviceId);\n+            props.put(MessageHelper.APP_PROPERTY_TENANT_ID, tenantId);\n+            props.put(MessageHelper.APP_PROPERTY_GATEWAY_ID, gatewayId);\n+            props.put(MessageHelper.APP_PROPERTY_REGISTRATION_STATUS, EventConstants.RegistrationStatus.NEW.name());\n+            props.put(MessageHelper.APP_PROPERTY_ORIG_ADAPTER, Constants.PROTOCOL_ADAPTER_TYPE_DEVICE_REGISTRY);\n+            props.put(MessageHelper.APP_PROPERTY_ORIG_ADDRESS, EventConstants.EVENT_ENDPOINT);\n+\n+            final Message msg = MessageHelper.newMessage(\n+                    ResourceIdentifier.from(EventConstants.EVENT_ENDPOINT, tenantId, deviceId),\n+                    EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION,\n+                    null,\n+                    tenantTracker.result().getPayload(),\n+                    props,\n+                    null,\n+                    false,\n+                    false);\n+\n+            final DownstreamSender sender = senderTracker.result();\n+            return sender.sendAndWaitForOutcome(msg, span.context())\n+                    .onFailure(t -> LOG.info(\"error sending auto-provisioning event for device [{}] created via gateway [{}] [tenant-id: {}]\", deviceId, gatewayId, tenantId));\n+        });\n+    }\n+\n+    /**\n+     * Auto-provisions the edge device using the given device id and the given registration data.\n+     *\n+     * @param tenantId The id of the tenant for which the edge device should be provisioned.\n+     * @param deviceId The id of the edge device which should be provisioned.\n+     * @param gatewayId The id of the edge device's gateway.\n+     * @param device The registration data for the device to be auto-provisioned.\n+     * @param spanContext The tracing context to be used by this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     */\n+    public Future<JsonObject> performAutoProvisioning(final String tenantId, final String deviceId,\n+            final String gatewayId, final Device device, final SpanContext spanContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5ODEyOQ==", "bodyText": "It is a public method and FMPOV the arguments should be null checked if applicable.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r540398129", "createdAt": "2020-12-10T18:25:07Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AutoProvisioner.class);\n+\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    private final DeviceManagementService deviceManagementService;\n+\n+    private final DeviceRegistrationInformationService deviceRegistrationInformationService;\n+\n+    private TenantInformationService tenantInformationService = new NoopTenantInformationService();\n+\n+    private DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    private Vertx vertx;\n+\n+    private AutoProvisionerConfigProperties config;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param deviceManagementService The device management service to be used.\n+     * @param deviceRegistrationInformationService The device registration information service to be used.\n+     */\n+    public AutoProvisioner(\n+            final DeviceManagementService deviceManagementService,\n+            final DeviceRegistrationInformationService deviceRegistrationInformationService) {\n+        this.deviceManagementService = deviceManagementService;\n+        this.deviceRegistrationInformationService = deviceRegistrationInformationService;\n+    }\n+\n+    @Override\n+    public final Future<Void> start() {\n+        // Required since every endpoint may call the start() method of its referenced service leading to multiple calls\n+        // to start(). This results in an exception in the factory's connect() method.\n+        synchronized (this) {\n+            if (connectionAttempt == null) {\n+                connectionAttempt = downstreamSenderFactory.connect().map(connection -> {\n+                    LOG.info(\"connected to AMQP network\");\n+                    if (vertx == null && connection != null) {\n+                        vertx = connection.getVertx();\n+                    }\n+                    return connection;\n+                }).recover(t -> {\n+                    LOG.warn(\"failed to connect to AMQP network\", t);\n+                    return Future.failedFuture(t);\n+                });\n+            }\n+        }\n+\n+        return connectionAttempt.mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        final Promise<Void> result = Promise.promise();\n+        downstreamSenderFactory.disconnect(result);\n+        return result.future();\n+    }\n+\n+    /**\n+     * Sets the vert.x instance.\n+     *\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x is {@code null}.\n+     */\n+    @Autowired\n+    public final void setVertx(final Vertx vertx) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     *\n+     * @param factory The factory.\n+     * @throws NullPointerException if the factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDownstreamSenderFactory(final DownstreamSenderFactory factory) {\n+        this.downstreamSenderFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the service to use for checking existence of tenants.\n+     * <p>\n+     * If not set, tenant existence will not be verified.\n+     *\n+     * @param tenantInformationService The tenant information service.\n+     * @throws NullPointerException if service is {@code null};\n+     */\n+    @Autowired(required = false)\n+    public final void setTenantInformationService(final TenantInformationService tenantInformationService) {\n+        this.tenantInformationService = Objects.requireNonNull(tenantInformationService);\n+        LOG.info(\"using {}\", tenantInformationService);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     * @throws NullPointerException if the opentracingTracer is {@code null}.\n+     */\n+    @Autowired(required = false)\n+    public final void setTracer(final Tracer opentracingTracer) {\n+        LOG.info(\"using OpenTracing Tracer implementation [{}]\", opentracingTracer.getClass().getName());\n+        this.tracer = Objects.requireNonNull(opentracingTracer);\n+    }\n+\n+    /**\n+     * Sets the configuration to use for auto-provisioning.\n+     *\n+     * @param config The configuration to set.\n+     * @throws NullPointerException if the config is {@code null}.\n+     */\n+    @Autowired\n+    public void setConfig(final AutoProvisionerConfigProperties config) {\n+        this.config = Objects.requireNonNull(config);\n+    }\n+\n+    private Future<ProtonDelivery> sendAutoProvisioningEvent(\n+            final String tenantId,\n+            final String deviceId,\n+            final String gatewayId,\n+            final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        LOG.debug(\"sending auto-provisioning event for device [{}] created via gateway [{}] [tenant-id: {}]\", deviceId, gatewayId, tenantId);\n+\n+        final Future<TenantResult<TenantObject>> tenantTracker = tenantInformationService.getTenant(tenantId, span);\n+        final Future<DownstreamSender> senderTracker = downstreamSenderFactory.getOrCreateEventSender(tenantId);\n+\n+        return CompositeFuture.all(tenantTracker, senderTracker).compose(ok -> {\n+            final Map<String, Object> props = new HashMap<>();\n+            props.put(MessageHelper.APP_PROPERTY_QOS, QoS.AT_LEAST_ONCE.ordinal());\n+            props.put(MessageHelper.APP_PROPERTY_DEVICE_ID, deviceId);\n+            props.put(MessageHelper.APP_PROPERTY_TENANT_ID, tenantId);\n+            props.put(MessageHelper.APP_PROPERTY_GATEWAY_ID, gatewayId);\n+            props.put(MessageHelper.APP_PROPERTY_REGISTRATION_STATUS, EventConstants.RegistrationStatus.NEW.name());\n+            props.put(MessageHelper.APP_PROPERTY_ORIG_ADAPTER, Constants.PROTOCOL_ADAPTER_TYPE_DEVICE_REGISTRY);\n+            props.put(MessageHelper.APP_PROPERTY_ORIG_ADDRESS, EventConstants.EVENT_ENDPOINT);\n+\n+            final Message msg = MessageHelper.newMessage(\n+                    ResourceIdentifier.from(EventConstants.EVENT_ENDPOINT, tenantId, deviceId),\n+                    EventConstants.CONTENT_TYPE_EMPTY_NOTIFICATION,\n+                    null,\n+                    tenantTracker.result().getPayload(),\n+                    props,\n+                    null,\n+                    false,\n+                    false);\n+\n+            final DownstreamSender sender = senderTracker.result();\n+            return sender.sendAndWaitForOutcome(msg, span.context())\n+                    .onFailure(t -> LOG.info(\"error sending auto-provisioning event for device [{}] created via gateway [{}] [tenant-id: {}]\", deviceId, gatewayId, tenantId));\n+        });\n+    }\n+\n+    /**\n+     * Auto-provisions the edge device using the given device id and the given registration data.\n+     *\n+     * @param tenantId The id of the tenant for which the edge device should be provisioned.\n+     * @param deviceId The id of the edge device which should be provisioned.\n+     * @param gatewayId The id of the edge device's gateway.\n+     * @param device The registration data for the device to be auto-provisioned.\n+     * @param spanContext The tracing context to be used by this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     */\n+    public Future<JsonObject> performAutoProvisioning(final String tenantId, final String deviceId,\n+            final String gatewayId, final Device device, final SpanContext spanContext) {\n+\n+        final Span span = TracingHelper\n+                .buildChildSpan(tracer, spanContext, \"auto-provision device for gateway\", Constants.PROTOCOL_ADAPTER_TYPE_DEVICE_REGISTRY)\n+                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n+                .withTag(TracingHelper.TAG_GATEWAY_ID, gatewayId)\n+                .start();\n+        TracingHelper.setDeviceTags(span, tenantId, deviceId);\n+\n+        return deviceManagementService.createDevice(tenantId, Optional.of(deviceId), device, span)\n+                // make sure an HTTP_CONFLICT result is handled as an OperationResult\n+                .recover(thr -> ServiceInvocationException.extractStatusCode(thr) == HttpURLConnection.HTTP_CONFLICT\n+                        ? Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_CONFLICT))\n+                        : Future.failedFuture(thr))\n+                .compose(addEdgeDeviceResult -> {\n+                    if (addEdgeDeviceResult.isError()) {\n+                        if (addEdgeDeviceResult.getStatus() != HttpURLConnection.HTTP_CONFLICT) {\n+                            return Future.failedFuture(StatusCodeMapper.from(addEdgeDeviceResult.getStatus(),\n+                                    String.format(\"failed to add edge device (status %d)\", addEdgeDeviceResult.getStatus())));\n+                        }\n+\n+                        // handle HTTP_CONFLICT, meaning the device already exists\n+                        span.log(\"device already exists\");\n+                        LOG.debug(\"device [{}] for gateway [{}] already created by concurrent auto-provisioning [tenant-id: {}]\",\n+                                deviceId, gatewayId, tenantId);\n+                        return deviceRegistrationInformationService.processAssertRegistration(DeviceKey.from(TenantKey.from(tenantId), deviceId), span)\n+                                .compose(assertRegistrationResult -> {\n+                                    final JsonObject deviceData = assertRegistrationResult.getPayload()\n+                                            .getJsonObject(RegistrationConstants.FIELD_DATA, new JsonObject());\n+                                    // ensure that a notification event gets sent (even if we might send duplicate events)\n+                                    return sendDelayedAutoProvisioningNotificationIfNeeded(tenantId, deviceId, gatewayId, deviceData, span)\n+                                            .map(deviceData);\n+                                });\n+                    }\n+\n+                    span.log(\"device created\");\n+                    LOG.trace(\"device [{}] for gateway [{}] successfully created by auto-provisioning [tenant-id: {}]\",\n+                            deviceId, gatewayId, tenantId);\n+                    return sendAutoProvisioningEvent(tenantId, deviceId, gatewayId, span)\n+                            .compose(sendEmptyEventOk -> deviceRegistrationInformationService.processAssertRegistration(DeviceKey.from((TenantKey.from(tenantId)), deviceId), span)\n+                                    .compose(deviceRegistrationData -> {\n+                                        if (!deviceRegistrationData.isOk()) {\n+                                            span.log(\"update of notification flag failed\");\n+                                            LOG.warn(\"notification flag of device [{}] for gateway [{}] of tenant [tenant-id: {}] could not be updated\",\n+                                                    deviceId, gatewayId, tenantId);\n+                                            return Future.failedFuture(StatusCodeMapper.from(deviceRegistrationData.getStatus(),\n+                                                    String.format(\"update of notification flag failed (status %d)\", deviceRegistrationData.getStatus())));\n+                                        }\n+\n+                                        final JsonObject deviceData = deviceRegistrationData.getPayload()\n+                                                .getJsonObject(RegistrationConstants.FIELD_DATA, new JsonObject());\n+                                        return setAutoProvisioningNotificationSent(tenantId, deviceId, deviceData, span)\n+                                                .map(deviceData);\n+                                    }));\n+                })\n+                .onFailure(thr -> TracingHelper.logError(span, thr))\n+                .onComplete(ar -> span.finish());\n+    }\n+\n+    /**\n+     * Notify northbound applications of an auto-provisioned device.\n+     *\n+     * @param tenantId The id of the tenant for which the edge device should be provisioned.\n+     * @param deviceId The id of the edge device which should be provisioned.\n+     * @param gatewayId The id of the edge device's gateway.\n+     * @param deviceData The data of the edge device.\n+     * @param span The span to be used for tracing this operation.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *\n+     * @see AutoProvisionerConfigProperties#DEFAULT_RETRY_EVENT_SENDING_DELAY\n+     */\n+    public Future<Void> sendDelayedAutoProvisioningNotificationIfNeeded(final String tenantId,\n+            final String deviceId, final String gatewayId, final JsonObject deviceData, final Span span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMDQ2Ng==", "bodyText": "IllegalArgumentException is thrown when the retryEventSendingDelay is less than 0 but the error message doesn't match that.\nHow about retryEventSendingDelay must not be negative or retryEventSendingDelay must be >= 0?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r540400466", "createdAt": "2020-12-10T18:28:45Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisionerConfigProperties.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import org.eclipse.hono.util.RegistrationConstants;\n+\n+/**\n+ * Configuration properties for Hono's gateway-based auto-provisioning.\n+ */\n+public class AutoProvisionerConfigProperties {\n+\n+    /**\n+     * Delay in milliseconds before trying to send the auto-provisioning notification if the initial attempt\n+     * to send the event hasn't completed yet.\n+     * <p>\n+     * This will only be invoked for requests that have <i>not</i> triggered the auto-provisioning,\n+     * but instead have found the {@link RegistrationConstants#FIELD_AUTO_PROVISIONING_NOTIFICATION_SENT} flag\n+     * in the device data to be {@code false}. Assuming that such a request has occurred very shortly after\n+     * the auto-provisioning, with the notification event still in the process of getting sent, the intention\n+     * here is to wait some time til the event was most probably sent. After the delay, the flag is checked\n+     * again and only if the flag is still {@code false}, meaning there was possibly an error sending the event\n+     * during auto-provisioning, the event will be sent as part of that request.\n+     */\n+    private static final long DEFAULT_RETRY_EVENT_SENDING_DELAY = 50;\n+\n+    private long retryEventSendingDelay = DEFAULT_RETRY_EVENT_SENDING_DELAY;\n+\n+    /**\n+     * Gets the delay when sending auto-provisioning notifications.\n+     *\n+     * @return The delay.\n+     */\n+    public long getRetryEventSendingDelay() {\n+        return retryEventSendingDelay;\n+    }\n+\n+    /**\n+     * Sets the delay when sending auto-provisioning notifications.\n+     *\n+     * @param retryEventSendingDelay The delay to be set.\n+     * @throws IllegalArgumentException if the number of devices is &lt; 0.\n+     */\n+    public void setRetryEventSendingDelay(final long retryEventSendingDelay) {\n+        if (retryEventSendingDelay < 0) {\n+            throw new IllegalArgumentException(\"retryEventSendingDelay must be > 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTQ0NQ==", "bodyText": "IMHO the method name processAssertRegistration doesn't suit this context. As I understood, this method will return the registration information of a device. It can be something like getRegistration or getDeviceRegistration  as we have getTenant in the TenantInformationService. WDYT?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r540401445", "createdAt": "2020-12-10T18:30:08Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/DeviceRegistrationInformationService.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import org.eclipse.hono.util.RegistrationResult;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A service which provides device registration information to internal service implementations.\n+ */\n+public interface DeviceRegistrationInformationService {\n+\n+    /**\n+     * Gets device registration data by device ID.\n+     *\n+     * @param deviceKey The ID of the device to get registration data for.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n+     *            implementation should log (error) events on this span and it may set tags and use this span as the\n+     *            parent for any spans created in this method.\n+     * @return A future indicating the outcome of the operation. The <em>status</em> will be\n+     *            <ul>\n+     *            <li><em>200 OK</em>, if a device with the given ID is registered for the tenant.<br>\n+     *            The <em>payload</em> will contain a JSON object with the following properties:\n+     *              <ul>\n+     *              <li><em>device-id</em> - the device identifier</li>\n+     *              <li><em>data</em> - the information registered for the device</li>\n+     *              </ul>\n+     *            </li>\n+     *            <li><em>404 Not Found</em>, if no device with the given identifier is registered for the tenant.</li>\n+     *            </ul>\n+     * @throws NullPointerException if any of the parameters are {@code null}.\n+     */\n+    Future<RegistrationResult> processAssertRegistration(DeviceKey deviceKey, Span span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7465b5c73a33c8a529eeb7e292ef6f1670a4f645"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMjc3OQ==", "bodyText": "How about adding info about null checks in the JavaDoc * @throws NullPointerException if any of the parameters are {@code null}.?\n\nAny update on this?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r540402779", "createdAt": "2020-12-10T18:32:03Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/tenant/TenantInformationService.java", "diffHunk": "@@ -42,4 +44,22 @@\n      */\n      Future<Result<TenantKey>> tenantExists(String tenantId, Span span);\n \n+    /**\n+     * Gets the tenant identified by the given id.\n+     *\n+     * @param tenantId The id identifying the tenant to obtain.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method!\n+     *            An implementation should log (error) events on this span and it may set tags and use this span as the\n+     *            parent for any spans created in this method.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *             The <em>status</em> will be\n+     *             <ul>\n+     *             <li><em>200 OK</em> if a tenant with the given ID is registered.\n+     *             The <em>payload</em> will contain the tenant's configuration information.</li>\n+     *             <li><em>404 Not Found</em> if no tenant with the given identifier exists.</li>\n+     *             </ul>\n+     */\n+     Future<TenantResult<TenantObject>> getTenant(String tenantId, Span span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2ODQ1Mw=="}, "originalCommit": {"oid": "1cc4fbbd9f67104e089bd2bb3e2d1be222bff8a3"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96798c11fe9721a6c3ccc54d6f33cb7c17823fdb", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/96798c11fe9721a6c3ccc54d6f33cb7c17823fdb", "committedDate": "2020-12-11T09:04:00Z", "message": "Review suggestions kaniyan, calohmn\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "7d2c0666e620dfd5234d2f9d54ee746d1be4fab0", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/7d2c0666e620dfd5234d2f9d54ee746d1be4fab0", "committedDate": "2020-12-11T09:46:19Z", "message": "Review suggestions kaniyan, calohmn\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7513bad16292118a1e04ebd28f07018824b3b0d7", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/7513bad16292118a1e04ebd28f07018824b3b0d7", "committedDate": "2020-12-11T13:18:36Z", "message": "Review suggestions kaniyan:\n - applied formatter to changed parts in AbstractRegistrationService\n - applied formatter to AutoProvisioner\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/60f734809e115a0f0825dcc7b7b8162d58d46892", "committedDate": "2020-12-11T15:59:03Z", "message": "[#2053] Adding capability to auto-provision devices to registration service base classes.\n\nBuilding upon the implementation of auto-provisioning edge devices in the registration service bases classes, Hono's device registry implementation can be adapted to support auto-provisioning of edge devices which send telemetry data via gateway.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDg3NjY5", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-551087669", "createdAt": "2020-12-14T07:02:02Z", "commit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDk4MTU5", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-551098159", "createdAt": "2020-12-14T07:25:01Z", "commit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzoyNTowMlrOIFC_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODoxNzowOVrOIFEiVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2MjcyMA==", "bodyText": "this looks a little misleading as the device registry clearly is not a protocol adapter, is it?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542162720", "createdAt": "2020-12-14T07:25:02Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/Constants.java", "diffHunk": "@@ -77,6 +77,10 @@\n      * The type of the sigfox protocol adapter.\n      */\n     public static final String PROTOCOL_ADAPTER_TYPE_SIGFOX = \"hono-sigfox\";\n+    /**\n+     * The type of the protocol adapter which actually denotes the device registry.\n+     */\n+    public static final String PROTOCOL_ADAPTER_TYPE_DEVICE_REGISTRY = \"hono-device-registry\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2NjQwNg==", "bodyText": "If this field becomes a part of the Device object, it needs to be added to the Device Registry Management API spec as well.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542166406", "createdAt": "2020-12-14T07:33:37Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -70,6 +72,10 @@\n     @JsonProperty(RegistryManagementConstants.FIELD_MAPPER)\n     private String mapper;\n \n+    @JsonProperty(RegistryManagementConstants.FIELD_AUTHORITIES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2NzA1MA==", "bodyText": "in order to prevent hard to find problems when the parameter is being changed after invoking this method, the field should better be set to a copy of the given set ...", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542167050", "createdAt": "2020-12-14T07:34:53Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -302,4 +311,25 @@ public final Device setStatus(final DeviceStatus status) {\n     public final DeviceStatus getStatus() {\n         return status;\n     }\n+\n+    /**\n+     * Sets the authorities granted to this device.\n+     *\n+     * @param authorities The device's authorities.\n+     *\n+     * @return A reference to this for fluent use.\n+     */\n+    public final Device setAuthorities(final Set<String> authorities) {\n+        this.authorities = authorities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2NzQxOA==", "bodyText": "IMHO it would be safer to return an unmodifiable view on the set in order to prevent alteration by the client", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542167418", "createdAt": "2020-12-14T07:35:44Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -302,4 +311,25 @@ public final Device setStatus(final DeviceStatus status) {\n     public final DeviceStatus getStatus() {\n         return status;\n     }\n+\n+    /**\n+     * Sets the authorities granted to this device.\n+     *\n+     * @param authorities The device's authorities.\n+     *\n+     * @return A reference to this for fluent use.\n+     */\n+    public final Device setAuthorities(final Set<String> authorities) {\n+        this.authorities = authorities;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the authorities granted to this device.\n+     *\n+     * @return The device's authorities.\n+     */\n+    public final Set<String> getAuthorities() {\n+        return authorities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2ODc4MQ==", "bodyText": "IMHO we should replace should with may here and we should also provide an indication of how an implementing class might verify if the device has the required authority (which one is that, by the way?) ...\nThis additional paragraph should also be added to the other variant of this method which doesn't require a Span, or is only relevant to this variant?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542168781", "createdAt": "2020-12-14T07:38:36Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/registration/RegistrationService.java", "diffHunk": "@@ -114,6 +114,9 @@\n      * Such a check might be based on a specific role that the client needs to have or on an\n      * explicitly defined relation between the gateway and the device(s).\n      * <p>\n+     * Also they should perform an automatic provisioning of edge devices, if the gateway which sends telemetry on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE3MzU0OA==", "bodyText": "can the returned future be failed as well?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542173548", "createdAt": "2020-12-14T07:48:46Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/tenant/TenantInformationService.java", "diffHunk": "@@ -42,4 +44,24 @@\n      */\n      Future<Result<TenantKey>> tenantExists(String tenantId, Span span);\n \n+    /**\n+     * Gets the tenant identified by the given id.\n+     *\n+     * @param tenantId The id identifying the tenant to obtain, must not be {@code null}.\n+     * @param span The active OpenTracing span for this operation, must not be {@code null}.\n+     *            It is not to be closed in this method! An implementation should log (error) events on this span and\n+     *            it may set tags and use this span as the parent for any spans created in this method.\n+     *\n+     * @return A future indicating the outcome of the operation.\n+     *             The <em>status</em> will be\n+     *             <ul>\n+     *             <li><em>200 OK</em> if a tenant with the given ID is registered.\n+     *             The <em>payload</em> will contain the tenant's configuration information.</li>\n+     *             <li><em>404 Not Found</em> if no tenant with the given identifier exists.</li>\n+     *             </ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE3NzkzOQ==", "bodyText": "is it really necessary to implement this functionality as a component with its own life cycle?\nHow about turning this into an interface and let its methods accept the necessary collaborators as parameters (maybe hidden behind a context object facade?). That way we can test it much easier and we would be more flexible regarding the implementation of the required collaborators. We have applied this pattern in org.eclipse.hono.client.CommandTargetMapper where it turned out very helpful.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542177939", "createdAt": "2020-12-14T07:57:26Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,416 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE4NDQyOA==", "bodyText": "I don't quite get why some (required) collaborators are passed in via the constructor while others are injected by means of a setter. Is there a pattern that I don't see?\nWhy do we need a dedicated DeviceRegistrationInformationService? Can't we simply use the existing RegistrationService for this purpose?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542184428", "createdAt": "2020-12-14T08:10:31Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,416 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AutoProvisioner.class);\n+\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    private final DeviceManagementService deviceManagementService;\n+\n+    private final DeviceRegistrationInformationService deviceRegistrationInformationService;\n+\n+    private TenantInformationService tenantInformationService = new NoopTenantInformationService();\n+\n+    private DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    private Vertx vertx;\n+\n+    private AutoProvisionerConfigProperties config;\n+\n+    /**\n+     * Constructs a new instance.\n+     *\n+     * @param deviceManagementService The device management service to be used.\n+     * @param deviceRegistrationInformationService The device registration information service to be used.\n+     *\n+     * @throws NullPointerException if any argument is {@code null}.\n+     */\n+    public AutoProvisioner(\n+            final DeviceManagementService deviceManagementService,\n+            final DeviceRegistrationInformationService deviceRegistrationInformationService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE4ODExOA==", "bodyText": "I do not see why we need this additional interface. Does it provide anything different from what the existing RegistrationService does?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542188118", "createdAt": "2020-12-14T08:17:09Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/DeviceRegistrationInformationService.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import org.eclipse.hono.util.RegistrationResult;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A service which provides device registration information to internal service implementations.\n+ */\n+public interface DeviceRegistrationInformationService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMzUwNzQ0", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-551350744", "createdAt": "2020-12-14T13:12:27Z", "commit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzoxMjoyN1rOIFPwoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzoxMjoyN1rOIFPwoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM3MjAwMQ==", "bodyText": "\"shutdown process\"", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542372001", "createdAt": "2020-12-14T13:12:27Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -58,6 +62,40 @@\n \n     protected TenantInformationService tenantInformationService = new NoopTenantInformationService();\n \n+    private AutoProvisioner autoProvisioner;\n+\n+    @Override\n+    public final Future<Void> start() {\n+        return startInternal()\n+            .compose(ok -> supportsAutoProvisioning() ? autoProvisioner.start() : Future.succeededFuture())\n+            .mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        return stopInternal()\n+            .compose(ok -> supportsAutoProvisioning() ? autoProvisioner.stop() : Future.succeededFuture())\n+            .mapEmpty();\n+    }\n+\n+    /**\n+     * Enables subclasses to add custom startup logic, see {@link Lifecycle#start()}.\n+     *\n+     * @return A future indicating the outcome of the startup process.\n+     */\n+    protected Future<Void> startInternal() {\n+        return Future.succeededFuture();\n+    }\n+\n+    /**\n+     * Enables subclasses to add custom shutdown logic, see {@link Lifecycle#stop()}.\n+     *\n+     * @return A future indicating the outcome of the startup process.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMzU3MjIw", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-551357220", "createdAt": "2020-12-14T13:20:45Z", "commit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzoyMDo0NVrOIFQFvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzoyMDo0NVrOIFQFvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM3NzQwNw==", "bodyText": "This configuration block isn't needed by the changes in this PR, right? In fact I think it shouldn't be needed.\nTherefore the block could be omitted here for now and added with the followup PRs where integration tests for the auto-provisioning feature get added.\nSame for the other device registry yaml.", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r542377407", "createdAt": "2020-12-14T13:20:45Z", "author": {"login": "calohmn"}, "path": "tests/src/test/resources/deviceregistry-mongodb/application.yml", "diffHunk": "@@ -5,6 +5,17 @@ hono:\n   healthCheck:\n     insecurePortBindAddress: 0.0.0.0\n     insecurePort: ${vertx.health.port}\n+  messaging:\n+    name: 'Hono Device Registry MongoDb'\n+    host: ${hono.amqp-network.host}\n+    port: 5673\n+    amqpHostname: hono-internal\n+    keyPath: /etc/hono/certs/device-registry-key.pem\n+    certPath: /etc/hono/certs/device-registry-cert.pem\n+    trustStorePath: /etc/hono/certs/trusted-certs.pem\n+    linkEstablishmentTimeout: ${link.establishment.timeout}\n+    flowLatency: ${flow.latency}\n+    requestTimeout: ${request.timeout}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "285fede816cc85413fe6495321cfe93c11376c12", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/285fede816cc85413fe6495321cfe93c11376c12", "committedDate": "2020-12-14T16:02:18Z", "message": "[#2053] Adding capability to auto-provision devices to registration service base classes.\n\nBuilding upon the implementation of auto-provisioning edge devices in the registration service bases classes, Hono's device registry implementation can be adapted to support auto-provisioning of edge devices which send telemetry data via gateway.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00cb3f3823b046519c409716636186245451b471", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/00cb3f3823b046519c409716636186245451b471", "committedDate": "2020-12-14T19:01:19Z", "message": "Review suggestions calohmn and sophokles73.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60f734809e115a0f0825dcc7b7b8162d58d46892", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/60f734809e115a0f0825dcc7b7b8162d58d46892", "committedDate": "2020-12-11T15:59:03Z", "message": "[#2053] Adding capability to auto-provision devices to registration service base classes.\n\nBuilding upon the implementation of auto-provisioning edge devices in the registration service bases classes, Hono's device registry implementation can be adapted to support auto-provisioning of edge devices which send telemetry data via gateway.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}, "afterCommit": {"oid": "00cb3f3823b046519c409716636186245451b471", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/00cb3f3823b046519c409716636186245451b471", "committedDate": "2020-12-14T19:01:19Z", "message": "Review suggestions calohmn and sophokles73.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjIzODA5", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-552223809", "createdAt": "2020-12-15T08:49:29Z", "commit": {"oid": "00cb3f3823b046519c409716636186245451b471"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo0OToyOVrOIF_iOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1NDozMFrOIF_vqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NDc0NA==", "bodyText": "I believe that this is not (yet) required as the registries do not support auto-provisioning yet, right?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r543154744", "createdAt": "2020-12-15T08:49:29Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/resources/qpid/qdrouterd-with-broker.json", "diffHunk": "@@ -110,7 +110,7 @@\n       \"maxConnections\": 40,\n       \"groups\": {\n         \"Hono\": {\n-          \"users\": \"Eclipse IoT;Hono;http-adapter,Eclipse IoT;Hono;mqtt-adapter,Eclipse IoT;Hono;amqp-adapter,Eclipse IoT;Hono;coap-adapter,Eclipse IoT;Hono;command-router\",\n+          \"users\": \"Eclipse IoT;Hono;http-adapter,Eclipse IoT;Hono;mqtt-adapter,Eclipse IoT;Hono;amqp-adapter,Eclipse IoT;Hono;coap-adapter,Eclipse IoT;Hono;command-router,Eclipse IoT;Hono;device-registry\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00cb3f3823b046519c409716636186245451b471"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTg3Nw==", "bodyText": "this means that the property will always be included in the JSON document. Is that what you want to achieve?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r543155877", "createdAt": "2020-12-15T08:51:10Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceStatus.java", "diffHunk": "@@ -39,6 +37,7 @@\n      *\n      * @return {@code true} if this device was auto-provisioned.\n      */\n+    @JsonProperty(RegistryManagementConstants.FIELD_AUTO_PROVISIONED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00cb3f3823b046519c409716636186245451b471"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1ODE4Nw==", "bodyText": "if we already have a DeviceManagementService then why do we also need a DeviceRegistrationInformationService? Couldn't we simply use DeviceManagementService.readDevice()?", "url": "https://github.com/eclipse/hono/pull/2094#discussion_r543158187", "createdAt": "2020-12-15T08:54:30Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AutoProvisioner.java", "diffHunk": "@@ -0,0 +1,425 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.hono.deviceregistry.service.device;\n+\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.DownstreamSender;\n+import org.eclipse.hono.client.DownstreamSenderFactory;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.deviceregistry.service.tenant.NoopTenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantInformationService;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.EventConstants;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.QoS;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.eclipse.hono.util.TenantObject;\n+import org.eclipse.hono.util.TenantResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * Implements gateway based auto-provisioning.\n+ */\n+public class AutoProvisioner implements Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AutoProvisioner.class);\n+\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    private DeviceManagementService deviceManagementService;\n+\n+    private DeviceRegistrationInformationService deviceRegistrationInformationService;\n+\n+    private TenantInformationService tenantInformationService = new NoopTenantInformationService();\n+\n+    private DownstreamSenderFactory downstreamSenderFactory;\n+\n+    private Future<HonoConnection> connectionAttempt;\n+\n+    private Vertx vertx;\n+\n+    private AutoProvisionerConfigProperties config;\n+\n+    @Override\n+    public final Future<Void> start() {\n+        // Required since every endpoint may call the start() method of its referenced service leading to multiple calls\n+        // to start(). This results in an exception in the factory's connect() method.\n+        synchronized (this) {\n+            if (connectionAttempt == null) {\n+                connectionAttempt = downstreamSenderFactory.connect().map(connection -> {\n+                    LOG.info(\"connected to AMQP network\");\n+                    if (vertx == null && connection != null) {\n+                        vertx = connection.getVertx();\n+                    }\n+                    return connection;\n+                }).recover(t -> {\n+                    LOG.warn(\"failed to connect to AMQP network\", t);\n+                    return Future.failedFuture(t);\n+                });\n+            }\n+        }\n+\n+        return connectionAttempt.mapEmpty();\n+    }\n+\n+    @Override\n+    public final Future<Void> stop() {\n+        final Promise<Void> result = Promise.promise();\n+        downstreamSenderFactory.disconnect(result);\n+        return result.future();\n+    }\n+\n+    /**\n+     * Sets the vert.x instance.\n+     *\n+     * @param vertx The vert.x instance.\n+     * @throws NullPointerException if vert.x is {@code null}.\n+     */\n+    @Autowired\n+    public final void setVertx(final Vertx vertx) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     *\n+     * @param factory The factory.\n+     * @throws NullPointerException if the factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDownstreamSenderFactory(final DownstreamSenderFactory factory) {\n+        this.downstreamSenderFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the {@link DeviceManagementService} to use.\n+     *\n+     * @param deviceManagementService The service to set.\n+     *\n+     * @throws NullPointerException if the service is {@code null}.\n+     */\n+    @Autowired\n+    public void setDeviceManagementService(final DeviceManagementService deviceManagementService) {\n+        this.deviceManagementService = Objects.requireNonNull(deviceManagementService);\n+    }\n+\n+    /**\n+     * Sets the {@link DeviceRegistrationInformationService} to use.\n+     *\n+     * @param deviceRegistrationInformationService The service to set.\n+     *\n+     * @throws NullPointerException if the service is {@code null}.\n+     */\n+    @Autowired\n+    public void setDeviceRegistrationInformationService(final DeviceRegistrationInformationService deviceRegistrationInformationService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00cb3f3823b046519c409716636186245451b471"}, "originalPosition": 156}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17ca3c0eecdddcbf232b78d8be26f83110efab39", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/17ca3c0eecdddcbf232b78d8be26f83110efab39", "committedDate": "2020-12-15T09:47:02Z", "message": "Review suggestions sophokles73.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f643f81d4b3250748b14ea15f02daa578552ff7b", "author": {"user": {"login": "fkaltner", "name": "Florian Kaltner"}}, "url": "https://github.com/eclipse/hono/commit/f643f81d4b3250748b14ea15f02daa578552ff7b", "committedDate": "2020-12-15T16:07:25Z", "message": "Review suggestions sophokles73.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjUzMzU2", "url": "https://github.com/eclipse/hono/pull/2094#pullrequestreview-552653356", "createdAt": "2020-12-15T16:41:32Z", "commit": {"oid": "f643f81d4b3250748b14ea15f02daa578552ff7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 732, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}