{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzOTQ1NjU3", "number": 2168, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo1MzoyNlrOEik6Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjowMjo1OVrOErBg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjkxODE1OnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo1MzoyNlrOHQiOyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODozODoxMVrOHR3B7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMDEwNQ==", "bodyText": "I am not sure what the idea is of having two methods here. Do AMQP-based clients only implement the method that returns Future<ProtonDelivery> and other clients only the other one? If so, how does the invocation look like in the protocol adapter? Btw., I used Future<?> as return type there in the refactorings I did for my experiments with Kafka. This way I can return always a result, at the price that I have to check it with instanceof in the calling code.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r487100105", "createdAt": "2020-09-11T14:53:26Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<Void> sendEvent(\n+            String tenantId,\n+            String deviceId,\n+            Buffer payload,\n+            String contentType,\n+            SpanContext context);\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param properties Additional meta data that should be included in the downstream message.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream.\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the data\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<ProtonDelivery> sendEvent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4OTQ1Mw==", "bodyText": "This is a typo. Both variants should return a Future.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r488489453", "createdAt": "2020-09-15T08:38:11Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<Void> sendEvent(\n+            String tenantId,\n+            String deviceId,\n+            Buffer payload,\n+            String contentType,\n+            SpanContext context);\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param properties Additional meta data that should be included in the downstream message.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream.\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the data\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<ProtonDelivery> sendEvent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMDEwNQ=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjkyODIwOnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo1NTo0NVrOHQiU4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOToyMjo0NVrOHfCDWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMTY2Ng==", "bodyText": "Why does this method does not have the properties parameter? In the other method, it is optional anyway. For Kafka I would also want to set metadata, 'Map<String, ?>' would work (although I am thinking about limiting the values to strings).", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r487101666", "createdAt": "2020-09-11T14:55:45Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<Void> sendEvent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5MDgzMw==", "bodyText": "That is indeed arguable. So we either make the properties param in the second variant mandatory or we keep the first variant only. Which one would you prefer?", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r488490833", "createdAt": "2020-09-15T08:40:18Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<Void> sendEvent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMTY2Ng=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzQ0Nw==", "bodyText": "I expect metadata to be set wherever messages are sent in the protocol adapters. Then the variant without the properties parameter would be obsolete. But I am having a hard time figuring out all the metadata currently set in the messages, so I could be wrong about their usage frequency.\nIn general, I would provide as few overloaded methods as possible in advance and prefer to extend the interface later, if the need arises.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r489177447", "createdAt": "2020-09-16T05:47:10Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<Void> sendEvent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMTY2Ng=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI3OTc3Mg==", "bodyText": "Ok, then let's remove the variant without the properties for the time being and allow the properties map to be null.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r502279772", "createdAt": "2020-10-09T08:44:52Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<Void> sendEvent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMTY2Ng=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMTUyOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r502301528", "createdAt": "2020-10-09T09:22:45Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<Void> sendEvent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMTY2Ng=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjkzNTg5OnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/registry/CredentialsClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo1Nzo0NFrOHQiZwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo0MTozM1rOHR3Kkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMjkxMw==", "bodyText": "I do not see why this method is necessary when the parameter clientContext is optional in the other one.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r487102913", "createdAt": "2020-09-11T14:57:44Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/registry/CredentialsClient.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client.registry;\n+\n+import org.eclipse.hono.util.CredentialsObject;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A client for accessing Hono's Credentials API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">\n+ * Credentials API</a> for a description of the status codes returned.\n+ * </p>\n+ */\n+public interface CredentialsClient {\n+\n+    /**\n+     * Gets credentials for a device by type and authentication identifier.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param type The type of credentials to retrieve.\n+     * @param authId The authentication identifier used in the credentials to retrieve.\n+     * @param spanContext The currently active OpenTracing span (may be {@code null}). An implementation\n+     *                    should use this as the parent for any span it creates for tracing\n+     *                    the execution of this operation.\n+     * @return A future indicating the result of the operation.\n+     *         <p>\n+     *         The future will succeed if a response with a status code in the [200, 300) range\n+     *         has been received from the Credentials service. The JSON object will then contain values as\n+     *         defined in <a href=\"https://www.eclipse.org/hono/docs/api/credentials/#get-credentials\">\n+     *         Get Credentials</a>.\n+     *         <p>\n+     *         Otherwise, the future will fail with a {@link org.eclipse.hono.client.ServiceInvocationException}\n+     *         containing the (error) status code returned by the service.\n+     * @throws NullPointerException if tenant ID, type or auth ID are {@code null}.\n+     */\n+    Future<CredentialsObject> get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5MTY2Nw==", "bodyText": "It is not strictly necessary but its presence allows invoking a method that is specific to the use case at hand without providing null params ...", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r488491667", "createdAt": "2020-09-15T08:41:33Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/registry/CredentialsClient.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client.registry;\n+\n+import org.eclipse.hono.util.CredentialsObject;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A client for accessing Hono's Credentials API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">\n+ * Credentials API</a> for a description of the status codes returned.\n+ * </p>\n+ */\n+public interface CredentialsClient {\n+\n+    /**\n+     * Gets credentials for a device by type and authentication identifier.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param type The type of credentials to retrieve.\n+     * @param authId The authentication identifier used in the credentials to retrieve.\n+     * @param spanContext The currently active OpenTracing span (may be {@code null}). An implementation\n+     *                    should use this as the parent for any span it creates for tracing\n+     *                    the execution of this operation.\n+     * @return A future indicating the result of the operation.\n+     *         <p>\n+     *         The future will succeed if a response with a status code in the [200, 300) range\n+     *         has been received from the Credentials service. The JSON object will then contain values as\n+     *         defined in <a href=\"https://www.eclipse.org/hono/docs/api/credentials/#get-credentials\">\n+     *         Get Credentials</a>.\n+     *         <p>\n+     *         Otherwise, the future will fail with a {@link org.eclipse.hono.client.ServiceInvocationException}\n+     *         containing the (error) status code returned by the service.\n+     * @throws NullPointerException if tenant ID, type or auth ID are {@code null}.\n+     */\n+    Future<CredentialsObject> get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMjkxMw=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njk1MDc0OnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/registry/DeviceRegistrationClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTowMTozNVrOHQijDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo0MjoxNlrOHR3MNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwNTI5Mw==", "bodyText": "I haven't spent much time on the interfaces for the registry clients. We haven't talked about whether we want registry clients with other transport protocols. But the way the interfaces look, there is nothing AMQP-specific in them anyway.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r487105293", "createdAt": "2020-09-11T15:01:35Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/registry/DeviceRegistrationClient.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.registry;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A client for accessing Hono's Device Registration API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">\n+ * Device Registration API</a> for a description of the status codes returned.\n+ */\n+public interface DeviceRegistrationClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5MjA4Ng==", "bodyText": "Yes, that was the intention. So, in the future we might as well implement the interfaces based on HTTP ...", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r488492086", "createdAt": "2020-09-15T08:42:16Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/registry/DeviceRegistrationClient.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.registry;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A client for accessing Hono's Device Registration API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">\n+ * Device Registration API</a> for a description of the status codes returned.\n+ */\n+public interface DeviceRegistrationClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwNTI5Mw=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njk1NjQ5OnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponseSender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTowMjo1MVrOHQimUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo0MzoxMFrOHR3Ojg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwNjEzMA==", "bodyText": "The interfaces in the upstream package still depend heavily on AMQP. Do we change them completely again if we want to support Kafka for commands? I think that if you use Kafka for downstream messaging, you might want to use Hono in the future entirely without AMQP.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r487106130", "createdAt": "2020-09-11T15:02:51Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponseSender.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.client.upstream;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing a device's response to a command received from a downstream application.\n+ */\n+public interface CommandResponseSender {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5MjY4Ng==", "bodyText": "Yes, that is true. We might want to create Command and CommandResponse to be independent from the underlying transport.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r488492686", "createdAt": "2020-09-15T08:43:10Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponseSender.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.client.upstream;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing a device's response to a command received from a downstream application.\n+ */\n+public interface CommandResponseSender {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwNjEzMA=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjY4NTYwOnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozMDoyMlrOHRT35Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo0Njo0OFrOHR3Xyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxMzQ0NQ==", "bodyText": "I would expect that the content type is optional but the payload required (empty events could provide an empty buffer). At least for MQTT, the content type is usually null in the current code.\nAnd my expectation is that optional parameters come after the required ones.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r487913445", "createdAt": "2020-09-14T13:30:22Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5NTA1MA==", "bodyText": "Currently, the Telemetry API defines the content-type to be mandatory. If a device wants to send an empty notification, then the content-type to use is application/vnd.eclipse-hono-empty-notification. If a (device) transport does not support content type, then the protocol adapter should use application/octet-stream ...", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r488495050", "createdAt": "2020-09-15T08:46:48Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxMzQ0NQ=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjY5NzQxOnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozMTo1OFrOHRT-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo0ODoyM1rOHR3bgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNTIyNA==", "bodyText": "What about adding a close method to EventSender and TelemetrySender (or extending a separate interface defining it)? That way there would be no need to depend on the implementation type to close the sender.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r487915224", "createdAt": "2020-09-14T13:31:58Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5NjAwMA==", "bodyText": "Yes, that might be a good idea. I would prefer extending a separate interface for that purpose.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r488496000", "createdAt": "2020-09-15T08:48:23Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNTIyNA=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjcwNjg3OnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozMzoxN1rOHRUETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozMzoxN1rOHRUETg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNjYyMg==", "bodyText": "JavaDoc is missing for context.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r487916622", "createdAt": "2020-09-14T13:33:17Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/EventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing events originating from devices to downstream consumers.\n+ */\n+public interface EventSender {\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream .\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the event\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<Void> sendEvent(\n+            String tenantId,\n+            String deviceId,\n+            Buffer payload,\n+            String contentType,\n+            SpanContext context);\n+\n+    /**\n+     * Sends an event originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param properties Additional meta data that should be included in the downstream message.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the event has been sent downstream.\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the data\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     */\n+    Future<ProtonDelivery> sendEvent(\n+            String tenantId,\n+            String deviceId,\n+            Map<String, ?> properties,\n+            Buffer payload,\n+            String contentType,\n+            SpanContext context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjg0MzI0OnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/TelemetrySender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo1MjoxOFrOHRVR-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo1NjozM1rOHR3wNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkzNjUwNA==", "bodyText": "A boolean or an enum instead of the int would be more obvious for me (the QoS numbers are only obvious if one knows MQTT).", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r487936504", "createdAt": "2020-09-14T13:52:18Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/TelemetrySender.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing telemetry data originating from devices to downstream consumers.\n+ */\n+public interface TelemetrySender {\n+\n+    /**\n+     * Sends telemetry data originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @param qos The delivery semantics to use for sending the data.\n+     *            A value of 0 indicates <em>at most once</em> semantics while\n+     *            1 indicates <em>at least once</em> semantics.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the data has been sent downstream according to\n+     *         the delivery semantics indicated by the qos parameter.\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the data\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     * @throws IllegalArgumentException if qos is neither 0 nor 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTMwMQ==", "bodyText": "That is true. We should probably define an enum ...", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r488501301", "createdAt": "2020-09-15T08:56:33Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/TelemetrySender.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+import java.util.Map;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.proton.ProtonDelivery;\n+\n+/**\n+ * A client for publishing telemetry data originating from devices to downstream consumers.\n+ */\n+public interface TelemetrySender {\n+\n+    /**\n+     * Sends telemetry data originating from a device to downstream consumers.\n+     *\n+     * @param tenantId The ID of the tenant that the device belongs to.\n+     * @param deviceId The ID of the device that the data originates from.\n+     * @param payload The data to send.\n+     * @param contentType The content type of the data.\n+     * @param qos The delivery semantics to use for sending the data.\n+     *            A value of 0 indicates <em>at most once</em> semantics while\n+     *            1 indicates <em>at least once</em> semantics.\n+     * @return A future indicating the outcome of the operation.\n+     *         <p>\n+     *         The future will be succeeded if the data has been sent downstream according to\n+     *         the delivery semantics indicated by the qos parameter.\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServerErrorException} if the data\n+     *         could not be sent. The error code contained in the exception indicates the\n+     *         cause of the failure.\n+     * @throws NullPointerException tenant ID, device ID or contentType are {@code null}.\n+     * @throws IllegalArgumentException if qos is neither 0 nor 1.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkzNjUwNA=="}, "originalCommit": {"oid": "d828cf3f93418a85beb0147e83e698661ed07195"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3NDk2OnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponse.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDozNVrOHT_ozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo0ODoyMFrOHfNDFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzYyOA==", "bodyText": "Sticking to the downstream/upstream structure, I think this class as well as CommandResponseSender should be in the downstream package.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r490727628", "createdAt": "2020-09-18T06:24:35Z", "author": {"login": "calohmn"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponse.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client.upstream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzMjgzMg==", "bodyText": "I see your point. However, my idea was not so much to organize by technical aspects but rather by means of communication patterns. Most devices will support the telemetry (downstream) direction, i.e. they will report sensor readings etc. Some will additionally support receiving commands (upstream) and (optionally) responding to commands.\nMaybe it would be better to rename the packages to org.eclipse.hono.client.telemetry and org.eclipse.hono.client.command respectively? WDYT @calohmn", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r491832832", "createdAt": "2020-09-21T07:15:54Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponse.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client.upstream;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzYyOA=="}, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAyMTU2MA==", "bodyText": "I think I would still prefer the downstream/upstream packages, with \"CommandResponseSender\" in the downstream package.\nTo me, grouping classes by message flow direction offers more value here than using the communication pattern as the grouping theme. For the request/response pattern (#1276) we might also reuse the existing senders/consumers, so the Hono communication patterns wouldn't be directly reflected in the packages here anyway.\nAnd having org.eclipse.hono.client.telemetry contain telemetry and event senders is also a bit odd. A different term encompassing both telemetry and events would be better, although I guess we don't have that.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r492021560", "createdAt": "2020-09-21T12:55:32Z", "author": {"login": "calohmn"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponse.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client.upstream;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzYyOA=="}, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNTY4NA==", "bodyText": "And having org.eclipse.hono.client.telemetry contain telemetry and event senders is also a bit odd. A different term encompassing both telemetry and events would be better, although I guess we don't have that.\n\nWe have been calling it the telemetry direction from the very beginning ...\n\nFor the request/response pattern (#1276) we might also reuse the existing senders/consumers, so the Hono communication patterns wouldn't be directly reflected in the packages here anyway.\n\nWell, FMPOV re-designing the client provides us with the opportunity to provide interfaces that are taylored to the the use case at hand. If we want to support a request/response pattern then FMPOV we should add a new package with new interfaces that contain method names and wording describing the actual problem being addressed. This should make it much easier to understand the exchange pattern compared to re-using the Telemetry and Command related interfaces for this purpose.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r495925684", "createdAt": "2020-09-28T13:09:38Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponse.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client.upstream;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzYyOA=="}, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4MzAwOA==", "bodyText": "@calohmn can we agree to group the interfaces into packages based on semantics instead of (technical) message flow direction? And then rename packages downstream and upstream to telemetry and command respectively for the time being and see if we find better names in the future?", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r502283008", "createdAt": "2020-10-09T08:50:15Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponse.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client.upstream;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzYyOA=="}, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4MTY4NA==", "bodyText": "Yes, I'm ok with using telemetry and command for now.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r502481684", "createdAt": "2020-10-09T14:48:20Z", "author": {"login": "calohmn"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/upstream/CommandResponse.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client.upstream;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzYyOA=="}, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQ5MDMyOnYy", "diffSide": "RIGHT", "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/QoS.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjowMjo1OVrOHdjwVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjowMjoxN1rOHdv4Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NjU2Ng==", "bodyText": "Just stumbled upon this via #2216 : there's already a QoS class in org.eclipse.hono.util (and another one in org.eclipse.hono.service.metric). I think we could use the one in org.eclipse.hono.util here. It looks similar to me.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r500756566", "createdAt": "2020-10-07T06:02:59Z", "author": {"login": "fkaltner"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/QoS.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+\n+/**\n+ * A definition of the delivery semantics used for transferring messages.\n+ *\n+ */\n+public enum QoS {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2ODUzNw==", "bodyText": "nice catch \ud83d\udc4d I'll replace it with the org.eclipse.hono.util.QoS enum", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r500768537", "createdAt": "2020-10-07T06:35:17Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/QoS.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+\n+/**\n+ * A definition of the delivery semantics used for transferring messages.\n+ *\n+ */\n+public enum QoS {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NjU2Ng=="}, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzMTYzMw==", "bodyText": "I thought you created a new one on purpose because they are actually quite different: org.eclipse.hono.util.QoS additionally contains UNKNOWN. I think you should set a valid QoS when invoking the client and I do not see value in opening the possibility of a new error case.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r500831633", "createdAt": "2020-10-07T08:30:16Z", "author": {"login": "b-abel"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/QoS.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+\n+/**\n+ * A definition of the delivery semantics used for transferring messages.\n+ *\n+ */\n+public enum QoS {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NjU2Ng=="}, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2OTQxMw==", "bodyText": "@b-abel That might be true. However, I think we can also easily get rid of the existing QoS.UNKNOWN value as it doesn't add much value anyway.", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r500869413", "createdAt": "2020-10-07T09:28:54Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/QoS.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+\n+/**\n+ * A definition of the delivery semantics used for transferring messages.\n+ *\n+ */\n+public enum QoS {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NjU2Ng=="}, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1NTEzOA==", "bodyText": "See #2233", "url": "https://github.com/eclipse/hono/pull/2168#discussion_r500955138", "createdAt": "2020-10-07T12:02:17Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/client/downstream/QoS.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.client.downstream;\n+\n+\n+/**\n+ * A definition of the delivery semantics used for transferring messages.\n+ *\n+ */\n+public enum QoS {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NjU2Ng=="}, "originalCommit": {"oid": "e632b951cadfac3fbcd703b9b716c29de6cbae62"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3045, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}