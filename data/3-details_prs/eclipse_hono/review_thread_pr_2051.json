{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTg2MTgz", "number": 2051, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxNTozOFrOEIYrCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxNTozOFrOEIYrCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI4Mjk3OnYy", "diffSide": "RIGHT", "path": "adapters/amqp-vertx/src/test/java/org/eclipse/hono/adapter/amqp/impl/VertxBasedAmqpProtocolAdapterTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxNTozOFrOGoUIBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDo1NDoxMlrOGoV8iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNTk1OA==", "bodyText": "FMPOV this check should be done immediately after the openHandler has been invoked", "url": "https://github.com/eclipse/hono/pull/2051#discussion_r444925958", "createdAt": "2020-06-24T14:15:38Z", "author": {"login": "sophokles73"}, "path": "adapters/amqp-vertx/src/test/java/org/eclipse/hono/adapter/amqp/impl/VertxBasedAmqpProtocolAdapterTest.java", "diffHunk": "@@ -1189,10 +1191,17 @@ public void testConnectionFailsIfAdapterLevelConnectionLimitIsExceeded() {\n                 .forClass(Handler.class);\n         verify(deviceConnection).openHandler(openHandler.capture());\n         openHandler.getValue().handle(Future.succeededFuture(deviceConnection));\n-        // THEN the adapter does not accept the incoming connection request. \n+        // THEN the adapter closes the connection right after it opened it\n+        final ArgumentCaptor<Handler<AsyncResult<ProtonConnection>>> closeHandler = ArgumentCaptor.forClass(Handler.class);\n+        verify(deviceConnection).closeHandler(closeHandler.capture());\n+        closeHandler.getValue().handle(Future.succeededFuture());\n         final ArgumentCaptor<ErrorCondition> errorConditionCaptor = ArgumentCaptor.forClass(ErrorCondition.class);\n         verify(deviceConnection).setCondition(errorConditionCaptor.capture());\n         assertEquals(AmqpError.UNAUTHORIZED_ACCESS, errorConditionCaptor.getValue().getCondition());\n+        // AND increments and decrements the connection count accordingly\n+        final InOrder metricsInOrderVerifier = inOrder(metrics);\n+        metricsInOrderVerifier.verify(metrics).incrementConnections(TEST_TENANT_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c97cb8c7a8a63d108655f3eeda61598bd3dc4bb0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1MzgyMQ==", "bodyText": "Okay for me. By this we'll make sure that the increment is actually made in the open handler and not accidentally called in the closed handler together with the decrement (would be very weird - but you never know... )", "url": "https://github.com/eclipse/hono/pull/2051#discussion_r444953821", "createdAt": "2020-06-24T14:51:40Z", "author": {"login": "fkaltner"}, "path": "adapters/amqp-vertx/src/test/java/org/eclipse/hono/adapter/amqp/impl/VertxBasedAmqpProtocolAdapterTest.java", "diffHunk": "@@ -1189,10 +1191,17 @@ public void testConnectionFailsIfAdapterLevelConnectionLimitIsExceeded() {\n                 .forClass(Handler.class);\n         verify(deviceConnection).openHandler(openHandler.capture());\n         openHandler.getValue().handle(Future.succeededFuture(deviceConnection));\n-        // THEN the adapter does not accept the incoming connection request. \n+        // THEN the adapter closes the connection right after it opened it\n+        final ArgumentCaptor<Handler<AsyncResult<ProtonConnection>>> closeHandler = ArgumentCaptor.forClass(Handler.class);\n+        verify(deviceConnection).closeHandler(closeHandler.capture());\n+        closeHandler.getValue().handle(Future.succeededFuture());\n         final ArgumentCaptor<ErrorCondition> errorConditionCaptor = ArgumentCaptor.forClass(ErrorCondition.class);\n         verify(deviceConnection).setCondition(errorConditionCaptor.capture());\n         assertEquals(AmqpError.UNAUTHORIZED_ACCESS, errorConditionCaptor.getValue().getCondition());\n+        // AND increments and decrements the connection count accordingly\n+        final InOrder metricsInOrderVerifier = inOrder(metrics);\n+        metricsInOrderVerifier.verify(metrics).incrementConnections(TEST_TENANT_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNTk1OA=="}, "originalCommit": {"oid": "c97cb8c7a8a63d108655f3eeda61598bd3dc4bb0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1NTc4NA==", "bodyText": "exactly", "url": "https://github.com/eclipse/hono/pull/2051#discussion_r444955784", "createdAt": "2020-06-24T14:54:12Z", "author": {"login": "sophokles73"}, "path": "adapters/amqp-vertx/src/test/java/org/eclipse/hono/adapter/amqp/impl/VertxBasedAmqpProtocolAdapterTest.java", "diffHunk": "@@ -1189,10 +1191,17 @@ public void testConnectionFailsIfAdapterLevelConnectionLimitIsExceeded() {\n                 .forClass(Handler.class);\n         verify(deviceConnection).openHandler(openHandler.capture());\n         openHandler.getValue().handle(Future.succeededFuture(deviceConnection));\n-        // THEN the adapter does not accept the incoming connection request. \n+        // THEN the adapter closes the connection right after it opened it\n+        final ArgumentCaptor<Handler<AsyncResult<ProtonConnection>>> closeHandler = ArgumentCaptor.forClass(Handler.class);\n+        verify(deviceConnection).closeHandler(closeHandler.capture());\n+        closeHandler.getValue().handle(Future.succeededFuture());\n         final ArgumentCaptor<ErrorCondition> errorConditionCaptor = ArgumentCaptor.forClass(ErrorCondition.class);\n         verify(deviceConnection).setCondition(errorConditionCaptor.capture());\n         assertEquals(AmqpError.UNAUTHORIZED_ACCESS, errorConditionCaptor.getValue().getCondition());\n+        // AND increments and decrements the connection count accordingly\n+        final InOrder metricsInOrderVerifier = inOrder(metrics);\n+        metricsInOrderVerifier.verify(metrics).incrementConnections(TEST_TENANT_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNTk1OA=="}, "originalCommit": {"oid": "c97cb8c7a8a63d108655f3eeda61598bd3dc4bb0"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3179, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}