{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NjkyNzY3", "number": 2293, "title": "[#2029] Add Command Router client", "bodyText": "This is for #2029.", "createdAt": "2020-11-12T07:51:58Z", "url": "https://github.com/eclipse/hono/pull/2293", "merged": true, "mergeCommit": {"oid": "2f93cf2c3f1666d66c6d8cc77bcddb3d9bde22a2"}, "closed": true, "closedAt": "2020-11-13T08:29:30Z", "author": {"login": "calohmn"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbuaCmABqjM5ODc0NDczNTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcCoK0AFqTUyOTg1MjE5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/0b4dbfb1419ceb396f7feb0455b5b480afcf8124", "committedDate": "2020-11-12T07:50:36Z", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "committedDate": "2020-11-12T08:37:05Z", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODUwODI1", "url": "https://github.com/eclipse/hono/pull/2293#pullrequestreview-528850825", "createdAt": "2020-11-12T08:29:39Z", "commit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODoyOTozOVrOHxvqSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODo0NjoyMVrOHxwRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMzE0NA==", "bodyText": "just out of curiosity: when would an adapter need to invoke this method with gatewayId = deviceId?", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521923144", "createdAt": "2020-11-12T08:29:39Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMzk2Nw==", "bodyText": "or tenant id", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521923967", "createdAt": "2020-11-12T08:30:50Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNDQ0Nw==", "bodyText": "how about\n\n... if the device is currently mapped to the given adapter instance.", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521924447", "createdAt": "2020-11-12T08:31:39Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.\n+     */\n+    Future<Void> registerCommandConsumer(String tenantId, String deviceId, String adapterInstanceId, Duration lifespan,\n+            SpanContext context);\n+\n+    /**\n+     * Unregisters a command consumer for a device.\n+     * <p>\n+     * The registration entry is only deleted if its value contains the given protocol adapter instance id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNDUzNw==", "bodyText": "or tenant id", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521924537", "createdAt": "2020-11-12T08:31:49Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.\n+     */\n+    Future<Void> registerCommandConsumer(String tenantId, String deviceId, String adapterInstanceId, Duration lifespan,\n+            SpanContext context);\n+\n+    /**\n+     * Unregisters a command consumer for a device.\n+     * <p>\n+     * The registration entry is only deleted if its value contains the given protocol adapter instance id.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id that the entry to be removed has to contain.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating the outcome of the operation, with its value indicating whether the protocol\n+     *         adapter instance value was removed or not.\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServiceInvocationException} if there\n+     *         was an error removing the value.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNDgzNg==", "bodyText": "The future will be failed with a {@code org.eclipse.hono.client.ServiceInvocationException} if there", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521924836", "createdAt": "2020-11-12T08:32:16Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or adapter instance id is {@code null}.\n+     */\n+    Future<Void> registerCommandConsumer(String tenantId, String deviceId, String adapterInstanceId, Duration lifespan,\n+            SpanContext context);\n+\n+    /**\n+     * Unregisters a command consumer for a device.\n+     * <p>\n+     * The registration entry is only deleted if its value contains the given protocol adapter instance id.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id that the entry to be removed has to contain.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating the outcome of the operation, with its value indicating whether the protocol\n+     *         adapter instance value was removed or not.\n+     *         <p>\n+     *         The future will be failed with a {@link org.eclipse.hono.client.ServiceInvocationException} if there", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNTM1Nw==", "bodyText": "IMHO we could/should be a little more specific about the type of exception that the future might be failed with", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521925357", "createdAt": "2020-11-12T08:33:17Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNTQyMg==", "bodyText": "IMHO we could/should be a little more specific about the type of exception that the future might be failed with", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521925422", "createdAt": "2020-11-12T08:33:25Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.\n+     */\n+    Future<Void> setLastKnownGatewayForDevice(String tenantId, String deviceId, String gatewayId, SpanContext context);\n+\n+    /**\n+     * Registers a protocol adapter instance as the consumer of command & control messages\n+     * for a device.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param adapterInstanceId The protocol adapter instance id.\n+     * @param lifespan The lifespan of the registration entry. Using a negative duration or {@code null} here is\n+     *                 interpreted as an unlimited lifespan. Only the number of seconds in the given duration\n+     *                 will be taken into account.\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNTcxMg==", "bodyText": "do we need this?", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521925712", "createdAt": "2020-11-12T08:33:58Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/CommandRouterConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;\n+\n+/**\n+ * Constants &amp; utility methods used throughout the Command Router API.\n+ */\n+\n+public final class CommandRouterConstants extends RequestResponseApiConstants {\n+\n+    /**\n+     * The name of the Command Router API endpoint.\n+     */\n+    public static final String COMMAND_ROUTER_ENDPOINT = \"cmd_router\";\n+\n+    /**\n+     * Request actions that belong to the Command Router API.\n+     */\n+    public enum CommandRouterAction {\n+        /**\n+         * The <em>set last known gateway for device</em> operation.\n+         */\n+        SET_LAST_KNOWN_GATEWAY(\"set-last-known-gw\"),\n+        /**\n+         * The <em>register command consumer</em> operation.\n+         */\n+        REGISTER_COMMAND_CONSUMER(\"register-command-consumer\"),\n+        /**\n+         * The <em>unregister command consumer</em> operation.\n+         */\n+        UNREGISTER_COMMAND_CONSUMER(\"unregister-command-consumer\"),\n+        /**\n+         * The <em>unknown</em> operation.\n+         */\n+        UNKNOWN(\"unknown\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjE2NQ==", "bodyText": "is this class required to be in the core module? IMHO it will only ever be needed in the context of the client itself, or am I mistaken?", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521926165", "createdAt": "2020-11-12T08:34:47Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/CommandRouterConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNjk0MA==", "bodyText": "is this class required to be in the core module? IMHO it will only ever be needed in the context of the client itself, or am I mistaken?", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521926940", "createdAt": "2020-11-12T08:36:10Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/CommandRouterResult.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4dbfb1419ceb396f7feb0455b5b480afcf8124"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMDE4Mg==", "bodyText": "there is no cache provider param ...", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521930182", "createdAt": "2020-11-12T08:41:38Z", "author": {"login": "sophokles73"}, "path": "clients/adapter-amqp/src/main/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClient.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command.amqp;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.SendMessageSampler;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.client.StatusCodeMapper;\n+import org.eclipse.hono.client.impl.AbstractRequestResponseClient;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CacheDirective;\n+import org.eclipse.hono.util.CommandRouterConstants;\n+import org.eclipse.hono.util.CommandRouterResult;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.proton.ProtonDelivery;\n+import io.vertx.proton.ProtonReceiver;\n+import io.vertx.proton.ProtonSender;\n+\n+/**\n+ * A Vertx-Proton based client for Hono's Command Router API, scoped to a specific tenant.\n+ *\n+ */\n+class ProtonBasedTenantCommandRouterClient extends AbstractRequestResponseClient<CommandRouterResult> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ProtonBasedTenantCommandRouterClient.class);\n+\n+    /**\n+     * Creates a new client for accessing the Command Router service.\n+     * <p>\n+     * The client will be ready to use after invoking {@link #createLinks()} or\n+     * {@link #createLinks(Handler, Handler)} only.\n+     *\n+     * @param connection The connection to the Command Router service.\n+     * @param tenantId The identifier of the tenant for which the client should be created.\n+     * @param sampler The sampler to use.\n+     */\n+    protected ProtonBasedTenantCommandRouterClient(final HonoConnection connection, final String tenantId, final SendMessageSampler sampler) {\n+        super(connection, tenantId, sampler);\n+    }\n+\n+    /**\n+     * Creates a new client for accessing the Command Router service.\n+     *\n+     * @param connection The connection to the Command Router service.\n+     * @param tenantId The identifier of the tenant for which the client should be created.\n+     * @param sender The AMQP link to use for sending requests to the service.\n+     * @param receiver The AMQP link to use for receiving responses from the service.\n+     * @param sampler The sampler to use.\n+     */\n+    protected ProtonBasedTenantCommandRouterClient(\n+            final HonoConnection connection,\n+            final String tenantId,\n+            final ProtonSender sender,\n+            final ProtonReceiver receiver,\n+            final SendMessageSampler sampler) {\n+\n+        super(connection, tenantId, sender, receiver, sampler);\n+    }\n+\n+    /**\n+     * Gets the AMQP <em>target</em> address to use for sending requests to Hono's Command Router API endpoint.\n+     *\n+     * @param tenantId The tenant to upload data for.\n+     * @return The target address.\n+     * @throws NullPointerException if tenant is {@code null}.\n+     */\n+    public static final String getTargetAddress(final String tenantId) {\n+        return String.format(\"%s/%s\", CommandRouterConstants.COMMAND_ROUTER_ENDPOINT, Objects.requireNonNull(tenantId));\n+    }\n+\n+    @Override\n+    protected final String getName() {\n+        return CommandRouterConstants.COMMAND_ROUTER_ENDPOINT;\n+    }\n+\n+    @Override\n+    protected final String createMessageId() {\n+        return String.format(\"cmd-router-client-%s\", UUID.randomUUID());\n+    }\n+\n+    @Override\n+    protected final CommandRouterResult getResult(\n+            final int status,\n+            final String contentType,\n+            final Buffer payload,\n+            final CacheDirective cacheDirective,\n+            final ApplicationProperties applicationProperties) {\n+\n+        if (payload == null) {\n+            return CommandRouterResult.from(status, null, null, applicationProperties);\n+        } else {\n+            try {\n+                // ignoring given cacheDirective param here - command router results shall not be cached\n+                return CommandRouterResult.from(status, new JsonObject(payload), CacheDirective.noCacheDirective(), applicationProperties);\n+            } catch (final DecodeException e) {\n+                LOG.warn(\"received malformed payload from Command Router service\", e);\n+                return CommandRouterResult.from(HttpURLConnection.HTTP_INTERNAL_ERROR, null, null, applicationProperties);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates a new command router client for a tenant.\n+     *\n+     * @param con The connection to the server.\n+     * @param tenantId The tenant to consumer events for.\n+     * @param sampler The sampler to use.\n+     * @param senderCloseHook A handler to invoke if the peer closes the sender link unexpectedly.\n+     * @param receiverCloseHook A handler to invoke if the peer closes the receiver link unexpectedly.\n+     * @return A future indicating the outcome of the creation attempt.\n+     * @throws NullPointerException if any of the parameters other than cache provider is {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjQyNA==", "bodyText": "we do not return a boolean value here, do we?", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521932424", "createdAt": "2020-11-12T08:45:14Z", "author": {"login": "sophokles73"}, "path": "clients/adapter-amqp/src/test/java/org/eclipse/hono/adapter/client/command/amqp/ProtonBasedTenantCommandRouterClientTest.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command.amqp;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+\n+import org.apache.qpid.proton.amqp.messaging.Rejected;\n+import org.apache.qpid.proton.amqp.transport.Target;\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.HonoConnection;\n+import org.eclipse.hono.client.RequestResponseClientConfigProperties;\n+import org.eclipse.hono.client.SendMessageSampler;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.config.ClientConfigProperties;\n+import org.eclipse.hono.test.TracingMockSupport;\n+import org.eclipse.hono.test.VertxMockSupport;\n+import org.eclipse.hono.util.CacheDirective;\n+import org.eclipse.hono.util.CommandRouterConstants.CommandRouterAction;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import io.vertx.proton.ProtonDelivery;\n+import io.vertx.proton.ProtonHelper;\n+import io.vertx.proton.ProtonQoS;\n+import io.vertx.proton.ProtonReceiver;\n+import io.vertx.proton.ProtonSender;\n+\n+\n+/**\n+ * Tests verifying behavior of {@link ProtonBasedTenantCommandRouterClient}.\n+ *\n+ */\n+@ExtendWith(VertxExtension.class)\n+public class ProtonBasedTenantCommandRouterClientTest {\n+\n+    private ProtonSender sender;\n+    private ProtonBasedTenantCommandRouterClient client;\n+    private Span span;\n+\n+    /**\n+     * Sets up the fixture.\n+     */\n+    @BeforeEach\n+    public void setUp() {\n+\n+        span = TracingMockSupport.mockSpan();\n+        final Tracer tracer = TracingMockSupport.mockTracer(span);\n+\n+        final Vertx vertx = mock(Vertx.class);\n+        final ProtonReceiver receiver = mockProtonReceiver();\n+        sender = mockProtonSender();\n+\n+        final RequestResponseClientConfigProperties config = new RequestResponseClientConfigProperties();\n+        final HonoConnection connection = mockHonoConnection(vertx, config, tracer);\n+        when(connection.getTracer()).thenReturn(tracer);\n+\n+        client = new ProtonBasedTenantCommandRouterClient(connection, Constants.DEFAULT_TENANT, sender, receiver, SendMessageSampler.noop());\n+    }\n+\n+    /**\n+     * Verifies that the client handles the response of the <em>set-last-known-gateway</em> operation from the\n+     * Command Router service.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testSetLastKnownGatewayForDeviceSuccess(final VertxTestContext ctx) {\n+\n+        // WHEN setting the last known gateway\n+        client.setLastKnownGatewayForDevice(\"deviceId\", \"gatewayId\", span.context())\n+                .onComplete(ctx.succeeding(r -> {\n+                    ctx.verify(() -> {\n+                        // THEN the response has been handled and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+\n+        final Message sentMessage = verifySenderSend();\n+        final Message response = createNoContentResponseMessage(sentMessage.getMessageId());\n+        client.doHandleResponse(mock(ProtonDelivery.class), response);\n+    }\n+\n+    /**\n+     * Verifies that the client handles the response of the <em>register-command-consumer</em> operation from the\n+     * Command Router service.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testRegisterCommandConsumer(final VertxTestContext ctx) {\n+\n+        // WHEN registering the command consumer\n+        client.registerCommandConsumer(\"deviceId\", \"adapterInstanceId\", null, span.context())\n+                .onComplete(ctx.succeeding(r -> {\n+                    ctx.verify(() -> {\n+                        // THEN the response has been handled and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+\n+        final Message sentMessage = verifySenderSend();\n+        final Message response = createNoContentResponseMessage(sentMessage.getMessageId());\n+        client.doHandleResponse(mock(ProtonDelivery.class), response);\n+    }\n+\n+    /**\n+     * Verifies that the client handles the response of the <em>unregister-command-consumer</em> operation from the\n+     * Command Router service.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testUnregisterCommandConsumer(final VertxTestContext ctx) {\n+\n+        // WHEN unregistering the command consumer\n+        client.unregisterCommandConsumer(\"deviceId\", \"adapterInstanceId\", span.context())\n+                .onComplete(ctx.succeeding(r -> {\n+                    ctx.verify(() -> {\n+                        // THEN the response has been handled and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+\n+        final Message sentMessage = verifySenderSend();\n+        final Message response = createNoContentResponseMessage(sentMessage.getMessageId());\n+        client.doHandleResponse(mock(ProtonDelivery.class), response);\n+    }\n+\n+    /**\n+     * Verifies that a client invocation of the <em>set-last-known-gateway</em> operation fails\n+     * if the command router service cannot be reached.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testSetLastKnownGatewayForDeviceFailsWithSendError(final VertxTestContext ctx) {\n+\n+        // GIVEN a client with no credit left\n+        when(sender.sendQueueFull()).thenReturn(true);\n+\n+        // WHEN setting last known gateway information\n+        client.setLastKnownGatewayForDevice(\"deviceId\", \"gatewayId\", span.context())\n+                .onComplete(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        // THEN the invocation fails and the span is marked as erroneous\n+                        verify(span).setTag(eq(Tags.ERROR.getKey()), eq(Boolean.TRUE));\n+                        // and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a client invocation of the <em>register-command-consumer</em> operation fails\n+     * if the command router service cannot be reached.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testRegisterCommandConsumerFailsWithSendError(final VertxTestContext ctx) {\n+\n+        // GIVEN a client with no credit left\n+        when(sender.sendQueueFull()).thenReturn(true);\n+\n+        // WHEN registering the command consumer\n+        client.registerCommandConsumer(\"deviceId\", \"adapterInstanceId\", null, span.context())\n+                .onComplete(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        // THEN the invocation fails and the span is marked as erroneous\n+                        verify(span).setTag(eq(Tags.ERROR.getKey()), eq(Boolean.TRUE));\n+                        // and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a client invocation of the <em>unregister-command-consumer</em> operation fails\n+     * if the command router service cannot be reached.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void testUnregisterCommandConsumerFailsWithSendError(final VertxTestContext ctx) {\n+\n+        // GIVEN a client with no credit left\n+        when(sender.sendQueueFull()).thenReturn(true);\n+\n+        // WHEN unregistering the command consumer\n+        client.unregisterCommandConsumer(\"deviceId\", \"adapterInstanceId\", span.context())\n+                .onComplete(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        // THEN the invocation fails and the span is marked as erroneous\n+                        verify(span).setTag(eq(Tags.ERROR.getKey()), eq(Boolean.TRUE));\n+                        // and the span is finished\n+                        verify(span).finish();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a client invocation of the <em>unregister-command-consumer</em> operation\n+     * returns a <em>Boolean.FALSE</em> value if a <em>PRECON_FAILED</em> response was returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMzA3MQ==", "bodyText": "or tenant id", "url": "https://github.com/eclipse/hono/pull/2293#discussion_r521933071", "createdAt": "2020-11-12T08:46:21Z", "author": {"login": "sophokles73"}, "path": "clients/adapter/src/main/java/org/eclipse/hono/adapter/client/command/CommandRouterClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.client.command;\n+\n+import java.time.Duration;\n+\n+import org.eclipse.hono.util.Lifecycle;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+\n+/**\n+ * A client for accessing Hono's Command Router API.\n+ * <p>\n+ * See Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router\">\n+ * Command Router API</a> for a description of the status codes returned.\n+ */\n+public interface CommandRouterClient extends Lifecycle {\n+\n+    /**\n+     * Sets the given gateway as the last gateway that acted on behalf of the given device.\n+     * <p>\n+     * If a device connects directly instead of through a gateway, the device identifier itself is to be used as value\n+     * for the <em>gatewayId</em> parameter.\n+     *\n+     * @param tenantId The tenant id.\n+     * @param deviceId The device id.\n+     * @param gatewayId The gateway id (or the device id if the last message came from the device directly).\n+     * @param context The currently active OpenTracing span context or {@code null} if no span is currently active.\n+     *            An implementation should use this as the parent for any span it creates for tracing\n+     *            the execution of this operation.\n+     * @return A future indicating whether the operation succeeded or not.\n+     * @throws NullPointerException if device id or gateway id is {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/ace3c0d6baccf4e4e0f6c379c0fb1a956c42b9c9", "committedDate": "2020-11-12T08:37:05Z", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "f5ec1fa240b30083fda54d7a3e34cf75282dd98a", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/f5ec1fa240b30083fda54d7a3e34cf75282dd98a", "committedDate": "2020-11-12T13:35:55Z", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5ec1fa240b30083fda54d7a3e34cf75282dd98a", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/f5ec1fa240b30083fda54d7a3e34cf75282dd98a", "committedDate": "2020-11-12T13:35:55Z", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "c01147f7c0e30489254774f4475b9cf3ef214e8f", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/c01147f7c0e30489254774f4475b9cf3ef214e8f", "committedDate": "2020-11-13T06:57:10Z", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61e97b4c7b9620fdf83062f3ddc7ed6b540360bf", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/61e97b4c7b9620fdf83062f3ddc7ed6b540360bf", "committedDate": "2020-11-13T07:26:27Z", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c01147f7c0e30489254774f4475b9cf3ef214e8f", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/c01147f7c0e30489254774f4475b9cf3ef214e8f", "committedDate": "2020-11-13T06:57:10Z", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "61e97b4c7b9620fdf83062f3ddc7ed6b540360bf", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/61e97b4c7b9620fdf83062f3ddc7ed6b540360bf", "committedDate": "2020-11-13T07:26:27Z", "message": "[#2029] Add Command Router client.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODUyMTk1", "url": "https://github.com/eclipse/hono/pull/2293#pullrequestreview-529852195", "createdAt": "2020-11-13T08:10:48Z", "commit": {"oid": "61e97b4c7b9620fdf83062f3ddc7ed6b540360bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 435, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}