{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3Nzg1ODUy", "number": 2149, "title": "Refactor tests for JDBC device registry", "bodyText": "", "createdAt": "2020-09-02T12:29:46Z", "url": "https://github.com/eclipse/hono/pull/2149", "merged": true, "mergeCommit": {"oid": "a815ee1b29688afea56d4b9c9ee0daa1289580c4"}, "closed": true, "closedAt": "2020-09-03T11:59:26Z", "author": {"login": "ctron"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFLQnvABqjM3MjMyNDk2MDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFPJvGAFqTQ4MTc1NzQ3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/a982468522aaed53e6f257cf755e02d85940914e", "committedDate": "2020-09-02T12:26:11Z", "message": "refactor tests for JDBC"}, "afterCommit": {"oid": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "committedDate": "2020-09-03T07:13:44Z", "message": "refactor tests for JDBC"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTM2Mzg3", "url": "https://github.com/eclipse/hono/pull/2149#pullrequestreview-481536387", "createdAt": "2020-09-03T06:45:29Z", "commit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0NToyOVrOHMYJ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0MToxMFrOHMaFaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MDczNA==", "bodyText": "A PSK as used in TLS is always a byte array. In a UI it might be entered as a string but IMHO the parameter type here should be byte[] or the method should at least be overloaded accordingly ...", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482740734", "createdAt": "2020-09-03T06:45:29Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.credentials;\n+\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.hono.auth.EncodedPassword;\n+import org.eclipse.hono.auth.SpringBasedHonoPasswordEncoder;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordSecret;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.PskSecret;\n+\n+/**\n+ * Helper methods for working with credentials.\n+ */\n+public final class Credentials {\n+\n+    private Credentials() {\n+    }\n+\n+    /**\n+     * Creates a PSK type based credential containing a psk secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param psk The psk to use.\n+     * @return The fully populated secret.\n+     */\n+    public static PskCredential createPSKCredential(final String authId, final String psk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTIyMQ==", "bodyText": "since this is a new file it should probably be 2020 only, right?", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482741221", "createdAt": "2020-09-03T06:46:36Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTM2NA==", "bodyText": "Creates ...", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482741364", "createdAt": "2020-09-03T06:46:55Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.credentials;\n+\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.hono.auth.EncodedPassword;\n+import org.eclipse.hono.auth.SpringBasedHonoPasswordEncoder;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordSecret;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.PskSecret;\n+\n+/**\n+ * Helper methods for working with credentials.\n+ */\n+public final class Credentials {\n+\n+    private Credentials() {\n+    }\n+\n+    /**\n+     * Creates a PSK type based credential containing a psk secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param psk The psk to use.\n+     * @return The fully populated secret.\n+     */\n+    public static PskCredential createPSKCredential(final String authId, final String psk) {\n+        final PskCredential p = new PskCredential(authId);\n+\n+        final PskSecret s = new PskSecret();\n+        s.setKey(psk.getBytes());\n+\n+        p.setSecrets(Collections.singletonList(s));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Creates a password type based credential containing a hashed password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @param maxBcryptIterations max bcrypt iterations to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPasswordCredential(final String authId, final String password,\n+                                                        final OptionalInt maxBcryptIterations) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        p.setSecrets(Collections.singletonList(createPasswordSecret(password, maxBcryptIterations)));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a plain password secret.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTQyMA==", "bodyText": "Creates ...", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482741420", "createdAt": "2020-09-03T06:47:04Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.credentials;\n+\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.hono.auth.EncodedPassword;\n+import org.eclipse.hono.auth.SpringBasedHonoPasswordEncoder;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordSecret;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.PskSecret;\n+\n+/**\n+ * Helper methods for working with credentials.\n+ */\n+public final class Credentials {\n+\n+    private Credentials() {\n+    }\n+\n+    /**\n+     * Creates a PSK type based credential containing a psk secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param psk The psk to use.\n+     * @return The fully populated secret.\n+     */\n+    public static PskCredential createPSKCredential(final String authId, final String psk) {\n+        final PskCredential p = new PskCredential(authId);\n+\n+        final PskSecret s = new PskSecret();\n+        s.setKey(psk.getBytes());\n+\n+        p.setSecrets(Collections.singletonList(s));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Creates a password type based credential containing a hashed password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @param maxBcryptIterations max bcrypt iterations to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPasswordCredential(final String authId, final String password,\n+                                                        final OptionalInt maxBcryptIterations) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        p.setSecrets(Collections.singletonList(createPasswordSecret(password, maxBcryptIterations)));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a plain password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPlainPasswordCredential(final String authId, final String password) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        final PasswordSecret secret = new PasswordSecret();\n+        secret.setPasswordPlain(password);\n+\n+        p.setSecrets(Collections.singletonList(secret));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a password secret.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTQ5Ng==", "bodyText": "Creates ..", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482741496", "createdAt": "2020-09-03T06:47:14Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.credentials;\n+\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.hono.auth.EncodedPassword;\n+import org.eclipse.hono.auth.SpringBasedHonoPasswordEncoder;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordSecret;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.PskSecret;\n+\n+/**\n+ * Helper methods for working with credentials.\n+ */\n+public final class Credentials {\n+\n+    private Credentials() {\n+    }\n+\n+    /**\n+     * Creates a PSK type based credential containing a psk secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param psk The psk to use.\n+     * @return The fully populated secret.\n+     */\n+    public static PskCredential createPSKCredential(final String authId, final String psk) {\n+        final PskCredential p = new PskCredential(authId);\n+\n+        final PskSecret s = new PskSecret();\n+        s.setKey(psk.getBytes());\n+\n+        p.setSecrets(Collections.singletonList(s));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Creates a password type based credential containing a hashed password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @param maxBcryptIterations max bcrypt iterations to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPasswordCredential(final String authId, final String password,\n+                                                        final OptionalInt maxBcryptIterations) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        p.setSecrets(Collections.singletonList(createPasswordSecret(password, maxBcryptIterations)));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a plain password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPlainPasswordCredential(final String authId, final String password) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        final PasswordSecret secret = new PasswordSecret();\n+        secret.setPasswordPlain(password);\n+\n+        p.setSecrets(Collections.singletonList(secret));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPasswordCredential(final String authId, final String password) {\n+        return createPasswordCredential(authId, password, OptionalInt.empty());\n+    }\n+\n+    /**\n+     * Create a new password secret.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjkzNA==", "bodyText": "Asserts ...", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482742934", "createdAt": "2020-09-03T06:50:33Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/tenant/AbstractTenantServiceTest.java", "diffHunk": "@@ -581,13 +579,21 @@ public void testUpdateTenantFailsForDuplicateCa(final VertxTestContext ctx) {\n      * @param tenant The tenant.\n      * @return A succeeded future if the tenant does not exist.\n      */\n-    protected static Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n+    default Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n             final TenantManagementService svc,\n             final String tenant) {\n \n         return assertGet(svc, tenant, HttpURLConnection.HTTP_NOT_FOUND);\n     }\n \n+    /**\n+     * Assert a get operation result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzEyOQ==", "bodyText": "empty line between description and params?", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482743129", "createdAt": "2020-09-03T06:50:57Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/tenant/AbstractTenantServiceTest.java", "diffHunk": "@@ -581,13 +579,21 @@ public void testUpdateTenantFailsForDuplicateCa(final VertxTestContext ctx) {\n      * @param tenant The tenant.\n      * @return A succeeded future if the tenant does not exist.\n      */\n-    protected static Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n+    default Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n             final TenantManagementService svc,\n             final String tenant) {\n \n         return assertGet(svc, tenant, HttpURLConnection.HTTP_NOT_FOUND);\n     }\n \n+    /**\n+     * Assert a get operation result.\n+     * @param svc The service to use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzIxNg==", "bodyText": "remove empty line", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482743216", "createdAt": "2020-09-03T06:51:07Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/tenant/AbstractTenantServiceTest.java", "diffHunk": "@@ -581,13 +579,21 @@ public void testUpdateTenantFailsForDuplicateCa(final VertxTestContext ctx) {\n      * @param tenant The tenant.\n      * @return A succeeded future if the tenant does not exist.\n      */\n-    protected static Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n+    default Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n             final TenantManagementService svc,\n             final String tenant) {\n \n         return assertGet(svc, tenant, HttpURLConnection.HTTP_NOT_FOUND);\n     }\n \n+    /**\n+     * Assert a get operation result.\n+     * @param svc The service to use.\n+     * @param tenantId The ID of the tenant.\n+     * @param expectedStatusCode The expected status code.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzY1MA==", "bodyText": "Asserts ...", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482743650", "createdAt": "2020-09-03T06:52:00Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java", "diffHunk": "@@ -415,6 +332,11 @@ public void testCreatePlainPasswordSecret(final VertxTestContext ctx) {\n                                 }))))));\n     }\n \n+    /**\n+     * Assert if the resource version is present.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NDQ4Mg==", "bodyText": "Asserts ...", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482744482", "createdAt": "2020-09-03T06:53:41Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java", "diffHunk": "@@ -1354,6 +1279,18 @@ public void testSecretMetadataDeletion(final VertxTestContext ctx) {\n         return assertGet(svc, tenant, authId, type, HttpURLConnection.HTTP_NOT_FOUND);\n     }\n \n+    /**\n+     * Assert a get operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 535}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NjUzOA==", "bodyText": "The future will fail with the exception thrown by the first failing predicate, but that will not be a ServiceInvocationException. FMPOV you can simply omit the ... with a ServiceInvocationExpception as we do in all the other methods.", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482746538", "createdAt": "2020-09-03T06:57:49Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/DeviceRegistryHttpClient.java", "diffHunk": "@@ -318,6 +319,21 @@ private static String registrationWithoutIdUri(final String tenant) {\n         return removeTenant(tenantId, HttpURLConnection.HTTP_NO_CONTENT);\n     }\n \n+    /**\n+     * Removes configuration information for a tenant.\n+     * <p>\n+     * This method simply invokes {@link #removeTenant(String, int)} with {@link HttpURLConnection#HTTP_NO_CONTENT} as\n+     * the expected status code.\n+     *\n+     * @param tenantId The tenant to remove.\n+     * @param ignoreMissing Ignore a missing tenant.\n+     * @return A future indicating the outcome of the operation. The future will succeed if the tenant has been removed.\n+     *         Otherwise the future will fail with a {@link org.eclipse.hono.client.ServiceInvocationException}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NjkxNg==", "bodyText": "whitespace before uri param ...", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482746916", "createdAt": "2020-09-03T06:58:40Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/DeviceRegistryHttpClient.java", "diffHunk": "@@ -327,11 +343,21 @@ private static String registrationWithoutIdUri(final String tenant) {\n      *         expected status code. Otherwise the future will fail.\n      */\n     public Future<HttpResponse<Buffer>> removeTenant(final String tenantId, final int expectedStatusCode) {\n+        return removeTenant(tenantId, ResponsePredicate.status(expectedStatusCode));\n+    }\n \n+    /**\n+     * Removes configuration information for a tenant.\n+     *\n+     * @param tenantId The tenant to remove.\n+     * @param successPredicates Checks on the HTTP response that need to pass for the request\n+     *                          to be considered successful.\n+     * @return A future indicating the outcome of the operation. The future will succeed if the response contained the\n+     *         expected status code. Otherwise the future will fail.\n+     */\n+    public Future<HttpResponse<Buffer>> removeTenant(final String tenantId, final ResponsePredicate ... successPredicates) {\n         final String uri = tenantInstanceUri(tenantId);\n-        return httpClient.delete(\n-                uri,\n-                ResponsePredicate.status(expectedStatusCode));\n+        return httpClient.delete( uri, successPredicates);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1MTU5NQ==", "bodyText": "what's wrong with the code that already exists and has worked for months?", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482751595", "createdAt": "2020-09-03T07:03:56Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/IntegrationTestSupport.java", "diffHunk": "@@ -639,30 +636,58 @@ public boolean isGatewayModeSupported() {\n     /**\n      * Deletes all temporary objects from the Device Registry which\n      * have been created during the last test execution.\n+     * <p>\n+     * <strong>Note:</strong> This wil consume the test context.\n      *\n      * @param ctx The vert.x context.\n      */\n     public void deleteObjects(final VertxTestContext ctx) {\n \n-        if (!devicesToDelete.isEmpty()) {\n-            devicesToDelete.forEach((tenantId, devices) -> {\n-                final Checkpoint deviceDeletion = ctx.checkpoint(devices.size());\n-                devices.forEach(deviceId -> {\n-                    registry.deregisterDevice(tenantId, deviceId).onComplete(ok -> deviceDeletion.flag());\n-                });\n-                LOGGER.debug(\"deleted {} devices from tenant {}\", devicesToDelete.size(), tenantId);\n-            });\n-            devicesToDelete.clear();\n-        }\n+        // first delete devices", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1MjU3Nw==", "bodyText": "nice \ud83d\udc4d", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482752577", "createdAt": "2020-09-03T07:04:47Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/IntegrationTestSupport.java", "diffHunk": "@@ -745,16 +770,8 @@ public String setupGatewayDeviceBlocking(\n             final String gatewayId,\n             final int timeoutSeconds) {\n \n-        final CompletableFuture<String> result = new CompletableFuture<>();\n-\n-        setupGatewayDevice(tenantId, gatewayId)\n-        .onComplete(attempt -> {\n-            if (attempt.succeeded()) {\n-                result.complete(attempt.result());\n-            } else {\n-                result.completeExceptionally(attempt.cause());\n-            }\n-        });\n+        final var result = setupGatewayDevice(tenantId, gatewayId)\n+                .toCompletionStage().toCompletableFuture();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a982468522aaed53e6f257cf755e02d85940914e"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2NjY5NQ==", "bodyText": "disconnect()?", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482766695", "createdAt": "2020-09-03T07:31:43Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/HttpTestBase.java", "diffHunk": "@@ -197,6 +197,16 @@ public void deleteObjects(final VertxTestContext ctx) {\n         if (deviceCert != null) {\n             deviceCert.delete();\n         }\n+\n+    }\n+\n+    /**\n+     * Disconnect helper.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @AfterEach\n+    public void cleanup(final VertxTestContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODA0Nw==", "bodyText": "the JavaDoc of the postTest method should be updated accordingly ...", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482768047", "createdAt": "2020-09-03T07:34:14Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/mqtt/MqttTestBase.java", "diffHunk": "@@ -80,6 +80,18 @@ public void setUp(final TestInfo testInfo, final VertxTestContext ctx) {\n         helper.init().onComplete(ctx.completing());\n     }\n \n+    /**\n+     * Deletes all temporary objects from the Device Registry which\n+     * have been created during the last test execution.\n+     *\n+     *\n+     * @param ctx The vert.x context.\n+     */\n+    @AfterEach\n+    public void deleteObjects(final VertxTestContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTUyOQ==", "bodyText": "can we use a tenant with a random ID instead?", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482769529", "createdAt": "2020-09-03T07:36:40Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsAmqpIT.java", "diffHunk": "@@ -59,6 +60,20 @@ public static void prepareDeviceRegistry(final VertxTestContext ctx) {\n                                 IntegrationTestSupport.HONO_PWD)));\n \n         client.connect().onComplete(ctx.completing());\n+\n+    }\n+\n+    /**\n+     * Setup device registry.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @BeforeEach\n+    public void setupDeviceRegistry(final VertxTestContext ctx) {\n+        helper.addTenantIdForRemoval(Constants.DEFAULT_TENANT);\n+        helper.registry\n+                .addTenant(Constants.DEFAULT_TENANT)\n+                .onComplete(ctx.completing());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTg1MA==", "bodyText": "random tenant ID?", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482769850", "createdAt": "2020-09-03T07:37:07Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsJmsIT.java", "diffHunk": "@@ -69,6 +69,20 @@ public static void init(final VertxTestContext ctx) {\n \n         connection = JmsBasedHonoConnection.newConnection(props);\n         connection.connect().onComplete(ctx.completing());\n+\n+    }\n+\n+    /**\n+     * Setup device registry.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @BeforeEach\n+    public void setupDeviceRegistry(final VertxTestContext ctx) {\n+        helper.addTenantIdForRemoval(Constants.DEFAULT_TENANT);\n+        helper.registry\n+                .addTenant(Constants.DEFAULT_TENANT)\n+                .onComplete(ctx.completing());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MTY2Nw==", "bodyText": "random tenant ID?", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482771667", "createdAt": "2020-09-03T07:40:06Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/registry/DeviceRegistrationAmqpIT.java", "diffHunk": "@@ -58,6 +60,19 @@ public static void init(final VertxTestContext ctx) {\n         registrationClientFactory.connect().onComplete(ctx.completing());\n     }\n \n+    /**\n+     * Setup device registry.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @BeforeEach\n+    public void setupDeviceRegistry(final VertxTestContext ctx) {\n+        helper.addTenantIdForRemoval(Constants.DEFAULT_TENANT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjMzMQ==", "bodyText": "random tenant ID?", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482772331", "createdAt": "2020-09-03T07:41:10Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/registry/DeviceRegistrationJmsIT.java", "diffHunk": "@@ -68,6 +69,19 @@ public static void init(final VertxTestContext ctx) {\n         registrationConnection.connect().onComplete(ctx.completing());\n     }\n \n+    /**\n+     * Setup device registry.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @BeforeEach\n+    public void setupDeviceRegistry(final VertxTestContext ctx) {\n+        helper.addTenantIdForRemoval(Constants.DEFAULT_TENANT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "committedDate": "2020-09-03T07:13:44Z", "message": "refactor tests for JDBC"}, "afterCommit": {"oid": "2d2dd3084d680c85e7ade6dd26ccfd2e51b35b57", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/2d2dd3084d680c85e7ade6dd26ccfd2e51b35b57", "committedDate": "2020-09-03T08:06:18Z", "message": "refactor tests for JDBC"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d2dd3084d680c85e7ade6dd26ccfd2e51b35b57", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/2d2dd3084d680c85e7ade6dd26ccfd2e51b35b57", "committedDate": "2020-09-03T08:06:18Z", "message": "refactor tests for JDBC"}, "afterCommit": {"oid": "0814d13a347de8749eae6aa89287c372ba1dbd47", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/0814d13a347de8749eae6aa89287c372ba1dbd47", "committedDate": "2020-09-03T08:09:16Z", "message": "refactor tests for JDBC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e109710e702ec40c60e35852ffbd5d84cfc658a", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/0e109710e702ec40c60e35852ffbd5d84cfc658a", "committedDate": "2020-09-03T08:13:28Z", "message": "refactor tests for JDBC"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0814d13a347de8749eae6aa89287c372ba1dbd47", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/0814d13a347de8749eae6aa89287c372ba1dbd47", "committedDate": "2020-09-03T08:09:16Z", "message": "refactor tests for JDBC"}, "afterCommit": {"oid": "0e109710e702ec40c60e35852ffbd5d84cfc658a", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/0e109710e702ec40c60e35852ffbd5d84cfc658a", "committedDate": "2020-09-03T08:13:28Z", "message": "refactor tests for JDBC"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNzU3NDc4", "url": "https://github.com/eclipse/hono/pull/2149#pullrequestreview-481757478", "createdAt": "2020-09-03T11:46:04Z", "commit": {"oid": "0e109710e702ec40c60e35852ffbd5d84cfc658a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 542, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}