{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTc4Nzkx", "number": 2046, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNToxNlrOEH5DwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNToxNlrOEH5DwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzEwMzM2OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNToxNlrOGnhTUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo1ODoyMFrOGniIbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzI2NA==", "bodyText": "What if we make validator a function? Then you can pass any logic to verify your parameter value, like pattern matching, optional, etc. It would make 'optional' field obsolete as well.", "url": "https://github.com/eclipse/hono/pull/2046#discussion_r444093264", "createdAt": "2020-06-23T09:35:16Z", "author": {"login": "dejanb"}, "path": "service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java", "diffHunk": "@@ -201,6 +205,58 @@ protected final String getDeviceIdParam(final RoutingContext ctx) {\n         return ctx.request().getParam(PARAM_DEVICE_ID);\n     }\n \n+    /**\n+     * Gets the value of a request parameter.\n+     *\n+     * @param ctx The routing context to get the parameter from.\n+     * @param paramName The name of the parameter.\n+     * @param validator A predicate to use for validating the parameter value or\n+     *                  {@code null} if the value should not be validated.\n+     * @param optional {@code true} if parameter is not mandatory.\n+     * @return A future indicating the outcome of the operation.\n+     *         If the request does not contain a parameter with the given name, the future will be\n+     *         <ul>\n+     *         <li>completed with an empty optional if the <em>optional</em> flag is {@code true}, or</li>\n+     *         <li>failed with a {@link ClientErrorException} with status 400 if the flag is {@code false}.</li>\n+     *         </ul>\n+     *         If the request does contain a parameter with the given name, the future will be\n+     *         <ul>\n+     *         <li>failed with a {@link ClientErrorException} with status 400 if a predicate has been\n+     *         given and the predicate evaluates to {@code false}, or</li>\n+     *         <li>otherwise be completed with the parameter value.</li>\n+     *         </ul>\n+     * @throws NullPointerException If ctx or paramName are {@code null}.\n+     */\n+    protected final Future<Optional<String>> getRequestParameter(\n+            final RoutingContext ctx,\n+            final String paramName,\n+            final Pattern validator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526767bcc9f934c76b676b53a2a1a075f1af6636"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNjg2Mw==", "bodyText": "That might work if the function's return type is a Future<String> so that we can handle the cause for failures properly. Let me think about it ...", "url": "https://github.com/eclipse/hono/pull/2046#discussion_r444106863", "createdAt": "2020-06-23T09:58:20Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/http/AbstractHttpEndpoint.java", "diffHunk": "@@ -201,6 +205,58 @@ protected final String getDeviceIdParam(final RoutingContext ctx) {\n         return ctx.request().getParam(PARAM_DEVICE_ID);\n     }\n \n+    /**\n+     * Gets the value of a request parameter.\n+     *\n+     * @param ctx The routing context to get the parameter from.\n+     * @param paramName The name of the parameter.\n+     * @param validator A predicate to use for validating the parameter value or\n+     *                  {@code null} if the value should not be validated.\n+     * @param optional {@code true} if parameter is not mandatory.\n+     * @return A future indicating the outcome of the operation.\n+     *         If the request does not contain a parameter with the given name, the future will be\n+     *         <ul>\n+     *         <li>completed with an empty optional if the <em>optional</em> flag is {@code true}, or</li>\n+     *         <li>failed with a {@link ClientErrorException} with status 400 if the flag is {@code false}.</li>\n+     *         </ul>\n+     *         If the request does contain a parameter with the given name, the future will be\n+     *         <ul>\n+     *         <li>failed with a {@link ClientErrorException} with status 400 if a predicate has been\n+     *         given and the predicate evaluates to {@code false}, or</li>\n+     *         <li>otherwise be completed with the parameter value.</li>\n+     *         </ul>\n+     * @throws NullPointerException If ctx or paramName are {@code null}.\n+     */\n+    protected final Future<Optional<String>> getRequestParameter(\n+            final RoutingContext ctx,\n+            final String paramName,\n+            final Pattern validator,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzI2NA=="}, "originalCommit": {"oid": "526767bcc9f934c76b676b53a2a1a075f1af6636"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3173, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}