{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjEzNDAy", "number": 1900, "title": "[#1679] Avoid conversion from Device to JsonObject in MongoDB based assertRegistration", "bodyText": "In the existing  processAssertRegistration(...) implementation of the device registry, the retrieved device is first mapped to a JsonObject  before creating a RegistrationResult. In this PR, this device mapping to JsonObject has been avoided considering the potential performance setback. @sophokles73 Would you mind taking a look?", "createdAt": "2020-04-14T14:18:16Z", "url": "https://github.com/eclipse/hono/pull/1900", "merged": true, "mergeCommit": {"oid": "f12e55bb107ea4afce85834a389bd9b37e6d2947"}, "closed": true, "closedAt": "2020-04-15T09:43:04Z", "author": {"login": "kaniyan"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXyx02gFqTM5MzUwMjc2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX0VOLgBqjMyMzQ1NTQzMzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTAyNzY0", "url": "https://github.com/eclipse/hono/pull/1900#pullrequestreview-393502764", "createdAt": "2020-04-15T07:00:07Z", "commit": {"oid": "8d1df8b3e8d6cfabbb4c7516c059470f7651908c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzowMDowN1rOGFsR5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxNTo0MlrOGFsucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMTU0MQ==", "bodyText": "why not fail the promise with a ClientErrorException(404) here instead of checking for a null result everywhere else?", "url": "https://github.com/eclipse/hono/pull/1900#discussion_r408621541", "createdAt": "2020-04-15T07:00:07Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -196,32 +198,32 @@ public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n         return processResolveGroupMembers(tenantId, viaGroups, span);\n     }\n \n-    private JsonObject convertDevice(final String deviceId, final Device payload) {\n-\n-        if (payload == null) {\n-            return null;\n-        }\n-\n-        final JsonObject data = JsonObject.mapFrom(payload);\n-\n-        return new JsonObject()\n-                .put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n-                .put(\"data\", data);\n+    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+        return findDeviceDocument(tenantId, deviceId)\n+                .compose(result -> Optional.ofNullable(result)\n+                        .map(ok -> result.mapTo(DeviceDto.class))\n+                        .map(Future::succeededFuture)\n+                        .orElseGet(() -> Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND,\n+                                String.format(\"Device [%s] not found.\", deviceId)))));\n     }\n \n-    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+    private Future<JsonObject> findDeviceDocument(final String tenantId, final String deviceId) {\n         final JsonObject findDeviceQuery = new MongoDbDocumentBuilder()\n                 .withTenantId(tenantId)\n                 .withDeviceId(deviceId)\n                 .document();\n         final Promise<JsonObject> readDevicePromise = Promise.promise();\n         mongoClient.findOne(config.getCollectionName(), findDeviceQuery, null, readDevicePromise);\n-        return readDevicePromise.future()\n-                .compose(result -> Optional.ofNullable(result)\n-                        .map(ok -> result.mapTo(DeviceDto.class))\n-                        .map(Future::succeededFuture)\n-                        .orElseGet(() -> Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND,\n-                                String.format(\"Device [%s] not found.\", deviceId)))));\n+        return readDevicePromise.future();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1df8b3e8d6cfabbb4c7516c059470f7651908c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMzA3MA==", "bodyText": "IMHO we don't need this as it seems to be a re-declaration of RegistrationConstants.FIELD_DATA, isn't it?", "url": "https://github.com/eclipse/hono/pull/1900#discussion_r408623070", "createdAt": "2020-04-15T07:03:36Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDeviceRegistryUtils.java", "diffHunk": "@@ -35,6 +35,14 @@\n  */\n public final class MongoDbDeviceRegistryUtils {\n \n+    /**\n+     * The name of the JSON property containing the device identifier.\n+     */\n+    public static final String FIELD_DEVICE = \"device\";\n+    /**\n+     * The name of the JSON property containing the data.\n+     */\n+    public static final String FIELD_DATA = \"data\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1df8b3e8d6cfabbb4c7516c059470f7651908c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyODMxOQ==", "bodyText": "IMHO this should be RegistrationConstants.FIELD_DATA", "url": "https://github.com/eclipse/hono/pull/1900#discussion_r408628319", "createdAt": "2020-04-15T07:14:33Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -196,32 +198,32 @@ public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n         return processResolveGroupMembers(tenantId, viaGroups, span);\n     }\n \n-    private JsonObject convertDevice(final String deviceId, final Device payload) {\n-\n-        if (payload == null) {\n-            return null;\n-        }\n-\n-        final JsonObject data = JsonObject.mapFrom(payload);\n-\n-        return new JsonObject()\n-                .put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n-                .put(\"data\", data);\n+    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+        return findDeviceDocument(tenantId, deviceId)\n+                .compose(result -> Optional.ofNullable(result)\n+                        .map(ok -> result.mapTo(DeviceDto.class))\n+                        .map(Future::succeededFuture)\n+                        .orElseGet(() -> Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND,\n+                                String.format(\"Device [%s] not found.\", deviceId)))));\n     }\n \n-    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+    private Future<JsonObject> findDeviceDocument(final String tenantId, final String deviceId) {\n         final JsonObject findDeviceQuery = new MongoDbDocumentBuilder()\n                 .withTenantId(tenantId)\n                 .withDeviceId(deviceId)\n                 .document();\n         final Promise<JsonObject> readDevicePromise = Promise.promise();\n         mongoClient.findOne(config.getCollectionName(), findDeviceQuery, null, readDevicePromise);\n-        return readDevicePromise.future()\n-                .compose(result -> Optional.ofNullable(result)\n-                        .map(ok -> result.mapTo(DeviceDto.class))\n-                        .map(Future::succeededFuture)\n-                        .orElseGet(() -> Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND,\n-                                String.format(\"Device [%s] not found.\", deviceId)))));\n+        return readDevicePromise.future();\n+    }\n+\n+    private RegistrationResult getRegistrationResult(final String deviceId, final JsonObject devicePayload) {\n+        return RegistrationResult.from(HttpURLConnection.HTTP_OK,\n+                Optional.ofNullable(devicePayload)\n+                        .map(ok -> new JsonObject()\n+                                .put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n+                                .put(MongoDbDeviceRegistryUtils.FIELD_DATA, devicePayload))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1df8b3e8d6cfabbb4c7516c059470f7651908c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyODg0OQ==", "bodyText": "is this field really used for the device identifier? Or is it used for the device data itself?", "url": "https://github.com/eclipse/hono/pull/1900#discussion_r408628849", "createdAt": "2020-04-15T07:15:42Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDeviceRegistryUtils.java", "diffHunk": "@@ -35,6 +35,14 @@\n  */\n public final class MongoDbDeviceRegistryUtils {\n \n+    /**\n+     * The name of the JSON property containing the device identifier.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1df8b3e8d6cfabbb4c7516c059470f7651908c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTE2MjI2", "url": "https://github.com/eclipse/hono/pull/1900#pullrequestreview-393516226", "createdAt": "2020-04-15T07:23:03Z", "commit": {"oid": "8d1df8b3e8d6cfabbb4c7516c059470f7651908c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMzowM1rOGFs9MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMzowM1rOGFs9MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMjYyNQ==", "bodyText": "IMHO this should be RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID as the result being prepared here is defined by the Device Registration API", "url": "https://github.com/eclipse/hono/pull/1900#discussion_r408632625", "createdAt": "2020-04-15T07:23:03Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -196,32 +198,32 @@ public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n         return processResolveGroupMembers(tenantId, viaGroups, span);\n     }\n \n-    private JsonObject convertDevice(final String deviceId, final Device payload) {\n-\n-        if (payload == null) {\n-            return null;\n-        }\n-\n-        final JsonObject data = JsonObject.mapFrom(payload);\n-\n-        return new JsonObject()\n-                .put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n-                .put(\"data\", data);\n+    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+        return findDeviceDocument(tenantId, deviceId)\n+                .compose(result -> Optional.ofNullable(result)\n+                        .map(ok -> result.mapTo(DeviceDto.class))\n+                        .map(Future::succeededFuture)\n+                        .orElseGet(() -> Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND,\n+                                String.format(\"Device [%s] not found.\", deviceId)))));\n     }\n \n-    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+    private Future<JsonObject> findDeviceDocument(final String tenantId, final String deviceId) {\n         final JsonObject findDeviceQuery = new MongoDbDocumentBuilder()\n                 .withTenantId(tenantId)\n                 .withDeviceId(deviceId)\n                 .document();\n         final Promise<JsonObject> readDevicePromise = Promise.promise();\n         mongoClient.findOne(config.getCollectionName(), findDeviceQuery, null, readDevicePromise);\n-        return readDevicePromise.future()\n-                .compose(result -> Optional.ofNullable(result)\n-                        .map(ok -> result.mapTo(DeviceDto.class))\n-                        .map(Future::succeededFuture)\n-                        .orElseGet(() -> Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND,\n-                                String.format(\"Device [%s] not found.\", deviceId)))));\n+        return readDevicePromise.future();\n+    }\n+\n+    private RegistrationResult getRegistrationResult(final String deviceId, final JsonObject devicePayload) {\n+        return RegistrationResult.from(HttpURLConnection.HTTP_OK,\n+                Optional.ofNullable(devicePayload)\n+                        .map(ok -> new JsonObject()\n+                                .put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1df8b3e8d6cfabbb4c7516c059470f7651908c"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ac1c89265f5b08ce38c19c7ac906a589ba3c27e", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/9ac1c89265f5b08ce38c19c7ac906a589ba3c27e", "committedDate": "2020-04-15T08:41:23Z", "message": "[#1679] Avoid conversion from Device to JsonObject during assertRegistration.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d1df8b3e8d6cfabbb4c7516c059470f7651908c", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/8d1df8b3e8d6cfabbb4c7516c059470f7651908c", "committedDate": "2020-04-14T13:53:56Z", "message": "[#1679] Avoid conversion from Device to JsonObject during assertRegistration.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "9ac1c89265f5b08ce38c19c7ac906a589ba3c27e", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/9ac1c89265f5b08ce38c19c7ac906a589ba3c27e", "committedDate": "2020-04-15T08:41:23Z", "message": "[#1679] Avoid conversion from Device to JsonObject during assertRegistration.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 870, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}