{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3OTM1NDI1", "number": 2113, "title": "[#2112] Part 1: Extend device registry base classes for search devices operation", "bodyText": "This PR focuses on extending the device registry base classes to support the implementation of the search devices operation in the MongoDB based device registry.", "createdAt": "2020-08-14T11:36:18Z", "url": "https://github.com/eclipse/hono/pull/2113", "merged": true, "mergeCommit": {"oid": "79e80c1dcaec897e594731090335ae9f541c3f22"}, "closed": true, "closedAt": "2020-08-18T06:12:42Z", "author": {"login": "kaniyan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-y_j-AH2gAyNDY3OTM1NDI1OmYwYzEyMWJiZGNkMTliNjg2NzdlNTc0NTA3MTc1YThkYmFkYzJjYjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAAyZegFqTQ2OTAxNzM4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/f0c121bbdcd19b68677e574507175a8dbadc2cb8", "committedDate": "2020-08-14T11:34:04Z", "message": "[#2112] Extend device registry base classes for search devices operation.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NTI2OTMz", "url": "https://github.com/eclipse/hono/pull/2113#pullrequestreview-467526933", "createdAt": "2020-08-14T12:14:14Z", "commit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMjoxNDoxNFrOHAyXug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMjozMToyOFrOHAy1vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4NzMyMg==", "bodyText": "these are query params, thus I guess we should name them starting with PARAM_ ...", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470587322", "createdAt": "2020-08-14T12:14:14Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -104,6 +104,46 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the field that contains the JSON pointer corresponding to the field used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_FIELD = \"field\";\n+\n+    /**\n+     * The name of the field that contains the filter JSON object for search devices operation.\n+     */\n+    public static final String FIELD_FILTER_JSON = \"filterJson\";\n+\n+    /**\n+     * The name of the field that contains the operator used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_OPERATOR = \"op\";\n+\n+    /**\n+     * The name of the field that contains the value used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_VALUE = \"value\";\n+\n+    /**\n+     * The name of the field that contains the page offset for search devices operation.\n+     */\n+    public static final String FIELD_PAGE_OFFSET = \"pageOffset\";\n+\n+    /**\n+     * The name of the field that contains the page size for search devices operation.\n+     */\n+    public static final String FIELD_PAGE_SIZE = \"pageSize\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4NzU0NQ==", "bodyText": "this is a query param, thus I guess we should name it starting with PARAM_ .", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470587545", "createdAt": "2020-08-14T12:14:43Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -104,6 +104,46 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the field that contains the JSON pointer corresponding to the field used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_FIELD = \"field\";\n+\n+    /**\n+     * The name of the field that contains the filter JSON object for search devices operation.\n+     */\n+    public static final String FIELD_FILTER_JSON = \"filterJson\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4NzU5MA==", "bodyText": "this is a query param, thus I guess we should name it starting with PARAM_ .", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470587590", "createdAt": "2020-08-14T12:14:51Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -104,6 +104,46 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the field that contains the JSON pointer corresponding to the field used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_FIELD = \"field\";\n+\n+    /**\n+     * The name of the field that contains the filter JSON object for search devices operation.\n+     */\n+    public static final String FIELD_FILTER_JSON = \"filterJson\";\n+\n+    /**\n+     * The name of the field that contains the operator used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_OPERATOR = \"op\";\n+\n+    /**\n+     * The name of the field that contains the value used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_VALUE = \"value\";\n+\n+    /**\n+     * The name of the field that contains the page offset for search devices operation.\n+     */\n+    public static final String FIELD_PAGE_OFFSET = \"pageOffset\";\n+\n+    /**\n+     * The name of the field that contains the page size for search devices operation.\n+     */\n+    public static final String FIELD_PAGE_SIZE = \"pageSize\";\n+\n+    /**\n+     * The name of the field that contains sort direction used by search devices operation to sort the result set.\n+     */\n+    public static final String FIELD_SORT_DIRECTION = \"direction\";\n+\n+    /**\n+     * The name of the field that contains the sort JSON object used by search devices operation to sort the result set.\n+     */\n+    public static final String FIELD_SORT_JSON = \"sortJson\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODMxNA==", "bodyText": "I do not think that we need to check the tenant ID here as we are merely using it as a query parameter, right? We do not need to prevent creation of a tenant with an illegal ID here,", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470588314", "createdAt": "2020-08-14T12:16:32Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -135,6 +143,39 @@ private void doGetDevice(final RoutingContext ctx) {\n             .onComplete(s -> span.finish());\n     }\n \n+    private void doSearchDevices(final RoutingContext ctx) {\n+        final Span span = TracingHelper.buildServerChildSpan(\n+                tracer,\n+                TracingHandler.serverSpanContext(ctx),\n+                SPAN_NAME_SEARCH_DEVICES,\n+                getClass().getSimpleName()).start();\n+\n+        final Future<String> tenantId = getRequestParameter(ctx, PARAM_TENANT_ID,\n+                getPredicate(config.getTenantIdPattern(), false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODU2MA==", "bodyText": "what if it's a float?", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470588560", "createdAt": "2020-08-14T12:17:06Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -135,6 +143,39 @@ private void doGetDevice(final RoutingContext ctx) {\n             .onComplete(s -> span.finish());\n     }\n \n+    private void doSearchDevices(final RoutingContext ctx) {\n+        final Span span = TracingHelper.buildServerChildSpan(\n+                tracer,\n+                TracingHandler.serverSpanContext(ctx),\n+                SPAN_NAME_SEARCH_DEVICES,\n+                getClass().getSimpleName()).start();\n+\n+        final Future<String> tenantId = getRequestParameter(ctx, PARAM_TENANT_ID,\n+                getPredicate(config.getTenantIdPattern(), false));\n+        final Optional<Integer> pageSize = Optional\n+                .ofNullable(ctx.request().getParam(RegistryManagementConstants.FIELD_PAGE_SIZE))\n+                .map(Integer::parseInt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODY0Mg==", "bodyText": "what if it's a float?", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470588642", "createdAt": "2020-08-14T12:17:18Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -135,6 +143,39 @@ private void doGetDevice(final RoutingContext ctx) {\n             .onComplete(s -> span.finish());\n     }\n \n+    private void doSearchDevices(final RoutingContext ctx) {\n+        final Span span = TracingHelper.buildServerChildSpan(\n+                tracer,\n+                TracingHandler.serverSpanContext(ctx),\n+                SPAN_NAME_SEARCH_DEVICES,\n+                getClass().getSimpleName()).start();\n+\n+        final Future<String> tenantId = getRequestParameter(ctx, PARAM_TENANT_ID,\n+                getPredicate(config.getTenantIdPattern(), false));\n+        final Optional<Integer> pageSize = Optional\n+                .ofNullable(ctx.request().getParam(RegistryManagementConstants.FIELD_PAGE_SIZE))\n+                .map(Integer::parseInt);\n+        final Optional<Integer> pageOffset = Optional\n+                .ofNullable(ctx.request().getParam(RegistryManagementConstants.FIELD_PAGE_OFFSET))\n+                .map(Integer::parseInt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4OTczMg==", "bodyText": "Finds devices ...", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470589732", "createdAt": "2020-08-14T12:19:46Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -67,6 +71,51 @@\n      */\n     Future<OperationResult<Device>> readDevice(String tenantId, String deviceId, Span span);\n \n+    /**\n+     * Search devices belonging to the given tenant with optional filters, paging and sorting options.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MDE2MA==", "bodyText": "how about\nreturn Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_NOT_IMPLEMENTED));", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470590160", "createdAt": "2020-08-14T12:20:43Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -67,6 +71,51 @@\n      */\n     Future<OperationResult<Device>> readDevice(String tenantId, String deviceId, Span span);\n \n+    /**\n+     * Search devices belonging to the given tenant with optional filters, paging and sorting options.\n+     * <p>\n+     * This search operation is considered as optional since it is not required for the normal functioning of Hono and\n+     * is more of a convenient operation. Hence here it is declared as a default method which returns\n+     * {@link HttpURLConnection#HTTP_NOT_IMPLEMENTED}. It is upto the implementors of this interface to offer an\n+     * implementation of this service or not.\n+     *\n+     * @param tenantId The tenant that the devices belong to.\n+     * @param pageSize The maximum number of results to include in a response.\n+     * @param pageOffset The offset into the result set from which to include objects in the response. This allows to\n+     *                   retrieve the whole result set page by page.\n+     * @param filters A list of filters. The filters are predicates that objects in the result set must match.\n+     * @param sortOptions A list of sort options. The sortOptions specify properties to sort the result set by.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n+     *            implementation should log (error) events on this span and it may set tags and use this span as the\n+     *            parent for any spans created in this method.\n+     * @return A future indicating the outcome of the operation. The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\"> Device\n+     *         Registry Management API - Search Devices</a>\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\"> Device Registry\n+     *      Management API - Search Devices</a>\n+     */\n+    default Future<OperationResult<List<DeviceWithId>>> searchDevices(\n+            final String tenantId,\n+            final Optional<Integer> pageSize,\n+            final Optional<Integer> pageOffset,\n+            final Optional<List<Filter>> filters,\n+            final Optional<List<Sort>> sortOptions,\n+            final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(pageSize);\n+        Objects.requireNonNull(pageOffset);\n+        Objects.requireNonNull(filters);\n+        Objects.requireNonNull(sortOptions);\n+        Objects.requireNonNull(span);\n+\n+        final Promise<OperationResult<List<DeviceWithId>>> defaultSearchDevicesResult = Promise.promise();\n+        defaultSearchDevicesResult.complete(OperationResult.empty(HttpURLConnection.HTTP_NOT_IMPLEMENTED));\n+\n+        return defaultSearchDevicesResult.future();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MTUxNg==", "bodyText": "how about failing the result with a ClientErrorExecption in case the JSON cannot be parsed?", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470591516", "createdAt": "2020-08-14T12:23:53Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -244,4 +285,23 @@ private void doDeleteDevice(final RoutingContext ctx) {\n                     () -> result.complete(new Device()));\n         return result.future();\n     }\n+\n+    private <T> Future<Optional<List<T>>> decodeJsonFromRequestParameter(final RoutingContext ctx,\n+            final String paramKey, final Class<T> clazz) {\n+\n+        Objects.requireNonNull(ctx);\n+        Objects.requireNonNull(paramKey);\n+        Objects.requireNonNull(clazz);\n+\n+        final Promise<Optional<List<T>>> result = Promise.promise();\n+        final Optional<List<T>> values = Optional.ofNullable(ctx.request().params()\n+                .getAll(paramKey))\n+                .map(jsons -> jsons\n+                        .stream()\n+                        .map(json -> Json.decodeValue(json, clazz))\n+                        .collect(Collectors.toList()));\n+        result.complete(values);\n+\n+        return result.future();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5Mjc4NA==", "bodyText": "Operator", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470592784", "createdAt": "2020-08-14T12:26:42Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Filter.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.vertx.core.json.pointer.JsonPointer;\n+\n+/**\n+ * Filter to apply during search operation in Device Registry Management API.\n+ *\n+ * @param <T> The filter value type.\n+ */\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public final class Filter<T> {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_FIELD)\n+    private JsonPointer field;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_VALUE)\n+    private T value;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_OPERATOR)\n+    private OPERATOR operator = OPERATOR.eq;\n+\n+    /**\n+     * An enum defining supported filter operators.\n+     */\n+    public enum OPERATOR {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MzE2OQ==", "bodyText": "Direction", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470593169", "createdAt": "2020-08-14T12:27:31Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Sort.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.vertx.core.json.pointer.JsonPointer;\n+\n+/**\n+ * It specifies properties to sort the result set during search operation\n+ * in Device Registry Management API.\n+ */\n+public final class Sort {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_FIELD)\n+    private JsonPointer field;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_SORT_DIRECTION)\n+    private DIRECTION direction = DIRECTION.asc;\n+\n+    /**\n+     * An enum defining the sort directions.\n+     */\n+    public enum DIRECTION {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NDU5NQ==", "bodyText": "can we add a constructor that accepts the mandatory field property and remove the setField method and make field final?", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470594595", "createdAt": "2020-08-14T12:30:41Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Sort.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.vertx.core.json.pointer.JsonPointer;\n+\n+/**\n+ * It specifies properties to sort the result set during search operation\n+ * in Device Registry Management API.\n+ */\n+public final class Sort {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_FIELD)\n+    private JsonPointer field;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_SORT_DIRECTION)\n+    private DIRECTION direction = DIRECTION.asc;\n+\n+    /**\n+     * An enum defining the sort directions.\n+     */\n+    public enum DIRECTION {\n+        asc,\n+        desc\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTAwNg==", "bodyText": "can we add a constructor accepting the mandatory properties and remove setField and setValue?", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470595006", "createdAt": "2020-08-14T12:31:28Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Filter.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.vertx.core.json.pointer.JsonPointer;\n+\n+/**\n+ * Filter to apply during search operation in Device Registry Management API.\n+ *\n+ * @param <T> The filter value type.\n+ */\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public final class Filter<T> {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_FIELD)\n+    private JsonPointer field;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_VALUE)\n+    private T value;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_OPERATOR)\n+    private OPERATOR operator = OPERATOR.eq;\n+\n+    /**\n+     * An enum defining supported filter operators.\n+     */\n+    public enum OPERATOR {\n+        eq\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b041f24fb2da9a697af062dc10422bd2edab66", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/80b041f24fb2da9a697af062dc10422bd2edab66", "committedDate": "2020-08-14T16:27:38Z", "message": "Changes based on review comments\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ac04550c921255a39e9d1f2f80c26fe6435e28d", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/1ac04550c921255a39e9d1f2f80c26fe6435e28d", "committedDate": "2020-08-14T16:23:17Z", "message": "Changes based on review comments\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "80b041f24fb2da9a697af062dc10422bd2edab66", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/80b041f24fb2da9a697af062dc10422bd2edab66", "committedDate": "2020-08-14T16:27:38Z", "message": "Changes based on review comments\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjAwMTg1", "url": "https://github.com/eclipse/hono/pull/2113#pullrequestreview-468200185", "createdAt": "2020-08-17T06:45:31Z", "commit": {"oid": "80b041f24fb2da9a697af062dc10422bd2edab66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo0NTozMVrOHBbjhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo0NTozMVrOHBbjhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MjA4NQ==", "bodyText": "what about checking the min/max values and returning a default value?", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r471262085", "createdAt": "2020-08-17T06:45:31Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -244,4 +282,46 @@ private void doDeleteDevice(final RoutingContext ctx) {\n                     () -> result.complete(new Device()));\n         return result.future();\n     }\n+\n+    private <T> Future<Optional<List<T>>> decodeJsonFromRequestParameter(final RoutingContext ctx,\n+            final String paramKey, final Class<T> clazz) {\n+\n+        Objects.requireNonNull(ctx);\n+        Objects.requireNonNull(paramKey);\n+        Objects.requireNonNull(clazz);\n+\n+        final Promise<Optional<List<T>>> result = Promise.promise();\n+        try {\n+            final Optional<List<T>> values = Optional.ofNullable(ctx.request().params()\n+                    .getAll(paramKey))\n+                    .map(jsons -> jsons\n+                            .stream()\n+                            .map(json -> Json.decodeValue(json, clazz))\n+                            .collect(Collectors.toList()));\n+            result.complete(values);\n+        } catch (final DecodeException e) {\n+            result.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST,\n+                    String.format(\"error parsing json value of parameter [%s]\", paramKey), e));\n+        }\n+\n+        return result.future();\n+    }\n+\n+    private Future<Optional<Integer>> getRequestParameterIntegerValue(final RoutingContext ctx,\n+            final String paramKey) {\n+        Objects.requireNonNull(ctx);\n+        Objects.requireNonNull(paramKey);\n+\n+        final Promise<Optional<Integer>> result = Promise.promise();\n+        try {\n+            final Optional<Integer> value = Optional.ofNullable(ctx.request().params().get(paramKey))\n+                    .map(Integer::parseInt);\n+            result.complete(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b041f24fb2da9a697af062dc10422bd2edab66"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5261b64e7c11f961056766fb681edcf6065fd7de", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/5261b64e7c11f961056766fb681edcf6065fd7de", "committedDate": "2020-08-17T16:43:18Z", "message": "Validate and set default value for the current page size and page offset\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e716f1180a575aa6f1a49daecd4cc5e431e104e9", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/e716f1180a575aa6f1a49daecd4cc5e431e104e9", "committedDate": "2020-08-17T15:03:43Z", "message": "Validate and set default value for the current page size and page offset.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "5261b64e7c11f961056766fb681edcf6065fd7de", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/5261b64e7c11f961056766fb681edcf6065fd7de", "committedDate": "2020-08-17T16:43:18Z", "message": "Validate and set default value for the current page size and page offset\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MDE3Mzg4", "url": "https://github.com/eclipse/hono/pull/2113#pullrequestreview-469017388", "createdAt": "2020-08-18T06:12:17Z", "commit": {"oid": "5261b64e7c11f961056766fb681edcf6065fd7de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 506, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}