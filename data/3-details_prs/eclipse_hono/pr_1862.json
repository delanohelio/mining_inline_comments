{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NTI1Mjk3", "number": 1862, "title": "custom mapper", "bodyText": "WIP on the custom mapper: #1790\nRemarks welcome to get this done correctly instead of one big commit which requires a lot of refactoring/rework.", "createdAt": "2020-03-30T09:33:29Z", "url": "https://github.com/eclipse/hono/pull/1862", "merged": true, "mergeCommit": {"oid": "ab282e5e31b7676c05ac8d424a4981bb3db37981"}, "closed": true, "closedAt": "2020-05-18T11:52:06Z", "author": {"login": "BobClaerhout"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSrKY1gBqjMxNzc3MzM3ODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcieazSAFqTQxMzQ0MTY5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca30b24a95ef17b868f723e91bf764ce07103b06", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/ca30b24a95ef17b868f723e91bf764ce07103b06", "committedDate": "2020-03-30T09:31:22Z", "message": "initial commit custom mapper"}, "afterCommit": {"oid": "4d8fc4f95818e23ed27d0d394462ff552a60eb2c", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/4d8fc4f95818e23ed27d0d394462ff552a60eb2c", "committedDate": "2020-03-30T09:33:43Z", "message": "initial commit custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e5b38615e3601fcd4f3120c4d8fa7186b7d93ae", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/1e5b38615e3601fcd4f3120c4d8fa7186b7d93ae", "committedDate": "2020-03-30T09:47:16Z", "message": "revert test"}, "afterCommit": {"oid": "5c47966bf1ba9804eeed245a148c36210bdda369", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/5c47966bf1ba9804eeed245a148c36210bdda369", "committedDate": "2020-03-30T09:48:12Z", "message": "revert test\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNzYwOTcw", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-383760970", "createdAt": "2020-03-30T11:26:39Z", "commit": {"oid": "b5456ff998a4329b915ba5b5352a4e14e0733fc6"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyNjozOVrOF9lPig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTo0MTo0NFrOF9luSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzY0Mg==", "bodyText": "how do you set these?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400117642", "createdAt": "2020-03-30T11:26:39Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -229,4 +231,15 @@ public Duration getTenantIdleTimeout() {\n     public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n         this.tenantIdleTimeout = Objects.requireNonNull(tenantIdleTimeout);\n     }\n+\n+    /**\n+     * Gets the configured mappers for this adapter\n+     * <p>\n+     * The default value of this property is an empty hashMap. Ths results in not having custom mapping at all.\n+     *\n+     * @return HashMap of mapper endpoints\n+     */\n+    public HashMap<String, MapperEndpoint> getMapperEndpoints() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5456ff998a4329b915ba5b5352a4e14e0733fc6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExODI1NA==", "bodyText": "This seems to be the description of the memberOf field ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400118254", "createdAt": "2020-03-30T11:27:47Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java", "diffHunk": "@@ -71,6 +71,14 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the field in a device registration information that contains the identifier of the names\n+     * of the groups in which the device is member of (either as string value or inside a JSON array).\n+     * Note, that it is only possible to either set the 'via' or the 'memberOf' property since groups of groups\n+     * are currently not supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5456ff998a4329b915ba5b5352a4e14e0733fc6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMDc5NA==", "bodyText": "better use com.google.common.io.BaseEncoding.base16().encode(byte[])", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400120794", "createdAt": "2020-03-30T11:32:55Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -14,27 +14,42 @@\n package org.eclipse.hono.adapter.mqtt.impl;\n \n import java.net.HttpURLConnection;\n+import java.util.HashMap;\n \n import org.eclipse.hono.adapter.mqtt.AbstractVertxBasedMqttProtocolAdapter;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.service.metric.MetricsTags;\n import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.core.Future;\n import io.vertx.core.Promise;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n \n /**\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n \n+    private static final String HEXES = \"0123456789ABCDEF\";\n+\n+    static String getHex(final byte[] raw) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5456ff998a4329b915ba5b5352a4e14e0733fc6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzM1OQ==", "bodyText": "The response to get Registration Assertion only contains the default properties to be included in all downstream messages. I don't think that this field should be configured as a default property, though ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400123359", "createdAt": "2020-03-30T11:37:44Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +112,38 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n+            final Promise<ResourceIdentifier> result = Promise.promise();\n+            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5456ff998a4329b915ba5b5352a4e14e0733fc6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNDcwOA==", "bodyText": "I would rather do a POST and include the payload as a plain byte array in the request body so that there is no need to encode the data to a HEX string.", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400124708", "createdAt": "2020-03-30T11:40:14Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +112,38 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n+            final Promise<ResourceIdentifier> result = Promise.promise();\n+            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+            if (mapper.isBlank()) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();\n+            if (!mapperEndpoints.containsKey(mapper)) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final MapperEndpoint mapperEndpoint = mapperEndpoints.get(mapper);\n+            final WebClient webClient = WebClient.create(vertx);\n+            webClient.get(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n+                    .addQueryParam(\"payload\", getHex(message.payload().getBytes()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5456ff998a4329b915ba5b5352a4e14e0733fc6"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNTUxMg==", "bodyText": "Do we really need to configure the mapping endpoints per device? Will they be different for all devices or can't we simply configure the (limited set of) mapper endpoints at the tenant level instead?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400125512", "createdAt": "2020-03-30T11:41:44Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +112,38 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n+            final Promise<ResourceIdentifier> result = Promise.promise();\n+            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+            if (mapper.isBlank()) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5456ff998a4329b915ba5b5352a4e14e0733fc6"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NDMxODcx", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-384431871", "createdAt": "2020-03-31T06:24:16Z", "commit": {"oid": "f4a7a6be5150d40db9fa14927256859d6ab5546a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjoyNDoxN1rOF-G7Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjoyNDoxN1rOF-G7Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2OTUxOQ==", "bodyText": "Environment variable names are upper case and use an underscore instead of .", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400669519", "createdAt": "2020-03-31T06:24:17Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/admin-guide/mqtt-adapter-config.md", "diffHunk": "@@ -40,6 +40,9 @@ The following table provides an overview of the configuration variables and corr\n | `HONO_MQTT_PORT`<br>`--hono.mqtt.port` | no | `8883` | The secure port that the protocol adapter should listen on.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n | `HONO_MQTT_SECURE_PROTOCOLS`<br>`--hono.mqtt.secureProtocols` | no | `TLSv1.2` | A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the [vert.x documentation](https://vertx.io/docs/vertx-core/java/#ssl) for a list of supported protocol names. |\n | `HONO_MQTT_TENANT_IDLE_TIMEOUT`<br>`--hono.mqtt.tenantIdleTimeout` | no | `0ms` | The duration after which the protocol adapter removes local state of the tenant (e.g. open AMQP links) with an amount and a unit, e.g. `2h` for 2 hours. See the [Spring Boot documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config-conversion-duration) for an explanation of the format. The value `0ms` disables the timeout. |\n+| `hono.mqtt.mapperEndpoints.<mapperName>.host`<br>`--hono.mqtt.mapperEndpoints.<mapperName>.host` | no | `mapper-hono.svc` | The host to which the adapter should connect to call the custom mapper. Replace `<mapperName>` with the name of the mapper to configure. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a7a6be5150d40db9fa14927256859d6ab5546a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjMxNTQ3", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-384631547", "createdAt": "2020-03-31T11:14:43Z", "commit": {"oid": "3681cb1f36571d78ae5a3792f17b766cd610916e"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToxNDo0NFrOF-QyQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjowMTo1M1rOF-SVLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzMTA0Mg==", "bodyText": "MessageHelper.APP_PROPERTY_DEVICE_ID", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400831042", "createdAt": "2020-03-31T11:14:44Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -36,6 +40,11 @@\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n+    /**\n+     * The name of the AMQP 1.0 message application property containing the id of the device that has reported the data\n+     * belongs to.\n+     */\n+    public static final String APP_PROPERTY_DEVICE_ID = \"device_id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3681cb1f36571d78ae5a3792f17b766cd610916e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NDQwOQ==", "bodyText": "I do not really see the value of defining default values here since I need to specify (at least one of) the properties anyway in order to create the key (mapperName) ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400854409", "createdAt": "2020-03-31T11:58:27Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/admin-guide/mqtt-adapter-config.md", "diffHunk": "@@ -40,6 +40,9 @@ The following table provides an overview of the configuration variables and corr\n | `HONO_MQTT_PORT`<br>`--hono.mqtt.port` | no | `8883` | The secure port that the protocol adapter should listen on.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n | `HONO_MQTT_SECURE_PROTOCOLS`<br>`--hono.mqtt.secureProtocols` | no | `TLSv1.2` | A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the [vert.x documentation](https://vertx.io/docs/vertx-core/java/#ssl) for a list of supported protocol names. |\n | `HONO_MQTT_TENANT_IDLE_TIMEOUT`<br>`--hono.mqtt.tenantIdleTimeout` | no | `0ms` | The duration after which the protocol adapter removes local state of the tenant (e.g. open AMQP links) with an amount and a unit, e.g. `2h` for 2 hours. See the [Spring Boot documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config-conversion-duration) for an explanation of the format. The value `0ms` disables the timeout. |\n+| `HONO_MQTT_MAPPERENDPOINTS_<mapperName>_HOST`<br>`--hono.mqtt.mapperEndpoints.<mapperName>.host` | no | `mapper-hono.svc` | The host to which the adapter should connect to call the custom mapper. Replace `<mapperName>` with the name of the mapper to configure. |\n+| `HONO_MQTT_MAPPERENDPOINTS_<mapperName>_PORT`<br>`--hono.mqtt.mapperEndpoints.<mapperName>.port` | no | `80` | The port to which the adapter should connect to call the custom mapper. Replace `<mapperName>` with the name of the mapper to configure. |\n+| `HONO_MQTT_MAPPERENDPOINTS_<mapperName>_URI`<br>`--hono.mqtt.mapperEndpoints.<mapperName>.uri` | no | `/map` | The used uri to append to the host to call the mapping method on the mapping server. Replace `<mapperName>` with the name of the mapper to configure. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NDkzNw==", "bodyText": "... configured for the adapter ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400854937", "createdAt": "2020-03-31T11:59:14Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/RegistrationConstants.java", "diffHunk": "@@ -71,6 +71,12 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the mapper used. This mapper should be configured in on the adapter and can be referenced using", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NTQzNQ==", "bodyText": "can you also add a setter so that this can be used in unit tests without requiring reflection?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400855435", "createdAt": "2020-03-31T12:00:07Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -229,4 +231,15 @@ public Duration getTenantIdleTimeout() {\n     public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n         this.tenantIdleTimeout = Objects.requireNonNull(tenantIdleTimeout);\n     }\n+\n+    /**\n+     * Gets the configured mappers for this adapter\n+     * <p>\n+     * The default value of this property is an empty hashMap. Ths results in not having custom mapping at all.\n+     *\n+     * @return HashMap of mapper endpoints\n+     */\n+    public HashMap<String, MapperEndpoint> getMapperEndpoints() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NTYxNA==", "bodyText": "please also make the getter and setter final", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400855614", "createdAt": "2020-03-31T12:00:27Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -229,4 +231,15 @@ public Duration getTenantIdleTimeout() {\n     public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n         this.tenantIdleTimeout = Objects.requireNonNull(tenantIdleTimeout);\n     }\n+\n+    /**\n+     * Gets the configured mappers for this adapter\n+     * <p>\n+     * The default value of this property is an empty hashMap. Ths results in not having custom mapping at all.\n+     *\n+     * @return HashMap of mapper endpoints\n+     */\n+    public HashMap<String, MapperEndpoint> getMapperEndpoints() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NTQzNQ=="}, "originalCommit": {"oid": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NTkwOA==", "bodyText": "final?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400855908", "createdAt": "2020-03-31T12:01:01Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.config;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for custom mappers.\n+ */\n+public class MapperEndpoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NjM2Ng==", "bodyText": "how about making this class immutable and provide a static factory method that accepts all three properties?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400856366", "createdAt": "2020-03-31T12:01:53Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.config;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for custom mappers.\n+ */\n+public class MapperEndpoint {\n+    private String host;\n+    private Integer port;\n+    private String uri;\n+\n+    /**\n+     * Gets the host name or IP address of this mapper.\n+     *\n+     * @return The host name.\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the host name or IP address of this mapper.\n+     *\n+     * @param host The host name or IP address.\n+     * @throws NullPointerException if host is {@code null}.\n+     */\n+    public void setHost(final String host) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NzgzNTUw", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-384783550", "createdAt": "2020-03-31T14:21:41Z", "commit": {"oid": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoyMTo0MlrOF-YQFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoyNDowMlrOF-YXhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1MzM2Ng==", "bodyText": "This seems to be a class that is only used within this package so I propose to declare it and its properties package private in order to prevent other code to start using an depending on it ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400953366", "createdAt": "2020-03-31T14:21:42Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+public class MappedMessage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1NDkyOA==", "bodyText": "I see. However, instead of exposing the Map to this class here, what about adding a getMapperEndpoint(String) to the ProtocolAdapterProperties class instead?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400954928", "createdAt": "2020-03-31T14:23:38Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +112,38 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+    private Future<ResourceIdentifier> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress, final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n+            final Promise<ResourceIdentifier> result = Promise.promise();\n+            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+            if (mapper.isBlank()) {\n+                result.complete(targetAddress);\n+                return result.future();\n+            }\n+            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNTUxMg=="}, "originalCommit": {"oid": "b5456ff998a4329b915ba5b5352a4e14e0733fc6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1NTI2OQ==", "bodyText": "this should probably go into its own method ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r400955269", "createdAt": "2020-03-31T14:24:02Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +111,48 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+    private Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                 final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> {\n+            final Promise<MappedMessage> result = Promise.promise();\n+            if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                result.complete(new MappedMessage(ctx, targetAddress, message));\n+                return result.future();\n+            }\n+            final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+            if (mapper.isBlank()) {\n+                result.complete(new MappedMessage(ctx, targetAddress, message));\n+                return result.future();\n+            }\n+            final HashMap<String, MapperEndpoint> mapperEndpoints = getConfig().getMapperEndpoints();\n+            if (!mapperEndpoints.containsKey(mapper)) {\n+                result.complete(new MappedMessage(ctx, targetAddress, message));\n+                return result.future();\n+            }\n+            final MapperEndpoint mapperEndpoint = mapperEndpoints.get(mapper);\n+            final WebClient webClient = WebClient.create(vertx);\n+            webClient.post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n+                    .sendBuffer(message.payload(), httpResponseAsyncResult -> {\n+                        if (httpResponseAsyncResult.succeeded()) {\n+                            final HttpResponse<Buffer> httpResponse = httpResponseAsyncResult.result();\n+                            final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n+                                    ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n+                                    httpResponse.bodyAsBuffer().getByteBuf());\n+                            final MultiMap headers = httpResponse.headers();\n+                            String deviceId = targetAddress.getResourceId();\n+                            if (headers.contains(APP_PROPERTY_DEVICE_ID)){\n+                                deviceId = headers.get(APP_PROPERTY_DEVICE_ID);\n+                            }\n+                            result.complete(\n+                                    new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n+                                            targetAddress.getTenantId(), deviceId), mqttPublishMessage)\n+                            );\n+                        }\n+                    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d8c938de86b8c2c11a11c691d9f5d3d40431a8"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0ODc4OTYz", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-384878963", "createdAt": "2020-03-31T15:59:10Z", "commit": {"oid": "a828b7aaa0d69dd0536d75902fd00c45ec182447"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo1OToxMVrOF-c6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjowMTo0OVrOF-dBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyOTY5OA==", "bodyText": "remove the setters?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401029698", "createdAt": "2020-03-31T15:59:11Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/MapperEndpoint.java", "diffHunk": "@@ -79,4 +79,20 @@ public String getUri() {\n     public void setUri(final String uri) {\n         this.uri = Objects.requireNonNull(uri);\n     }\n+\n+    /**\n+     * Gets mapperEndpoint configuration object from the different configuration parts.\n+     *\n+     * @param host The host to connect to\n+     * @param port The port to connect to\n+     * @param uri The uri to use when requesting a mapping\n+     * @return the mapperEndpoint configuration\n+     */\n+    public static MapperEndpoint from(final String host, final int port, final String uri) {\n+        final MapperEndpoint ep = new MapperEndpoint();\n+        ep.host = host;\n+        ep.port = port;\n+        ep.uri = uri;\n+        return ep;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a828b7aaa0d69dd0536d75902fd00c45ec182447"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyOTkxNw==", "bodyText": "final ?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401029917", "createdAt": "2020-03-31T15:59:29Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -254,4 +243,17 @@ public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n     public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n         this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);\n     }\n+\n+    /**\n+     * Gets the configured mapper for the given key.\n+     *\n+     * @param key The key to identify the mapper\n+     * @return the mapperEndpoint. If not found, will return {@code null}.\n+     */\n+    public MapperEndpoint getMapperEndpoint(final String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a828b7aaa0d69dd0536d75902fd00c45ec182447"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzMTU3Nw==", "bodyText": "I would assume that this can be safely removed, can't it?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401031577", "createdAt": "2020-03-31T16:01:49Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -254,4 +243,17 @@ public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n     public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n         this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);\n     }\n+\n+    /**\n+     * Gets the configured mapper for the given key.\n+     *\n+     * @param key The key to identify the mapper\n+     * @return the mapperEndpoint. If not found, will return {@code null}.\n+     */\n+    public MapperEndpoint getMapperEndpoint(final String key) {\n+        if (!mapperEndpoints.containsKey(key)) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a828b7aaa0d69dd0536d75902fd00c45ec182447"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzEyMjM3", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-385312237", "createdAt": "2020-04-01T07:02:38Z", "commit": {"oid": "5368d97f73b63c15b0b7589eaaf6f2dfac5d3694"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowMjozOFrOF-zSQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowNTo0N1rOF-zXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NjI4OA==", "bodyText": "I'd rather have a single combination of qos and endpoint but have a real test instead of all combinations without any assertions.\nFor that, I guess the WebClient needs to be a field of the adapter so that we can easily use a mock in order to verify the adapter's interactions with it ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401396288", "createdAt": "2020-04-01T07:02:38Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java", "diffHunk": "@@ -257,6 +257,47 @@ public void testMapTopicSupportsShortAndLongTopicNames(final VertxTestContext ct\n \n     }\n \n+    /**\n+     * Verifies that the adapter calls the mapper if configured. Also the updated payload and deviceId is checked.\n+     *\n+     * @param ctx The helper to use for running tests on vert.x.\n+     */\n+    @Test\n+    public void testMapperShouldUpdatePayloadAndDeviceId(final VertxTestContext ctx) {\n+        //TODO: change test to address mapping.\n+        givenAnAdapter();\n+\n+        MqttPublishMessage message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT);\n+        MqttContext context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n+            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.EVENT));\n+        }));\n+\n+        message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT_SHORT);\n+        context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n+            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.EVENT));\n+        }));\n+\n+        message = newMessage(MqttQoS.AT_LEAST_ONCE, TelemetryConstants.TELEMETRY_ENDPOINT);\n+        context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n+            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.TELEMETRY));\n+        }));\n+\n+        message = newMessage(MqttQoS.AT_LEAST_ONCE, TelemetryConstants.TELEMETRY_ENDPOINT_SHORT);\n+        context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.succeeding(address -> {\n+            ctx.verify(() -> assertThat(MetricsTags.EndpointType.fromString(address.getEndpoint())).isEqualTo(MetricsTags.EndpointType.TELEMETRY));\n+        }));\n+\n+        message = newMessage(MqttQoS.AT_LEAST_ONCE, \"unknown\");\n+        context = newContext(message, null);\n+        adapter.mapTopic(context).setHandler(ctx.failing());\n+        ctx.completeNow();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5368d97f73b63c15b0b7589eaaf6f2dfac5d3694"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NzYxNA==", "bodyText": "please do not look up the key twice ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401397614", "createdAt": "2020-04-01T07:05:47Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -343,6 +343,10 @@ private JsonArray convertObjectToJsonArray(final Object object) {\n                     if (!via.isEmpty()) {\n                         result.put(RegistrationConstants.FIELD_VIA, via);\n                     }\n+                    if (registrationInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+                        result.put(RegistrationConstants.FIELD_MAPPER,\n+                                registrationInfo.getString(RegistrationConstants.FIELD_MAPPER));\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5368d97f73b63c15b0b7589eaaf6f2dfac5d3694"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzI1MjE0", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-385725214", "createdAt": "2020-04-01T15:57:00Z", "commit": {"oid": "0b245ad3cfeeeae962f1596443a24738e331ffd6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1NzowMFrOF_HZuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1ODo1MlrOF_HfLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTg4MA==", "bodyText": "this should be autowired and injected via Spring FMPOV", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401725880", "createdAt": "2020-04-01T15:57:00Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -49,6 +52,23 @@ protected String getTypeName() {\n         return Constants.PROTOCOL_ADAPTER_TYPE_MQTT;\n     }\n \n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(vertx);\n+        }\n+        return webClient;\n+    }\n+\n+    /**\n+     * Sets the vertx webClient to use when mapping payload.\n+     *\n+     * @param webClient the webClient to set\n+     */\n+    public void setWebClient(final WebClient webClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b245ad3cfeeeae962f1596443a24738e331ffd6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNzI3OQ==", "bodyText": "In fact, I believe that it makes a lot of sense to create a dedicated interface for message mapping that hides away the specifics of how the mapper is invoked (HTTP in this case) and which also encapsulates the configuration of the supported mapper endpoints. WDYT?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r401727279", "createdAt": "2020-04-01T15:58:52Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -49,6 +52,23 @@ protected String getTypeName() {\n         return Constants.PROTOCOL_ADAPTER_TYPE_MQTT;\n     }\n \n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(vertx);\n+        }\n+        return webClient;\n+    }\n+\n+    /**\n+     * Sets the vertx webClient to use when mapping payload.\n+     *\n+     * @param webClient the webClient to set\n+     */\n+    public void setWebClient(final WebClient webClient) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTg4MA=="}, "originalCommit": {"oid": "0b245ad3cfeeeae962f1596443a24738e331ffd6"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzczNzgx", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-386373781", "createdAt": "2020-04-02T12:25:33Z", "commit": {"oid": "a5877f5d38e95794a65c65686232fd0aa101a06e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoyNTozM1rOF_oweQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoyNTozM1rOF_oweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MjM3Nw==", "bodyText": "what is this good for?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r402272377", "createdAt": "2020-04-02T12:25:33Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -147,28 +148,33 @@ public void setWebClient(final WebClient webClient) {\n                 return result.future();\n             }\n \n-            return mapMessageRequest(ctx, targetAddress, message, mapperEndpoint);\n+            final VertxHttpHeaders headers = new VertxHttpHeaders();\n+            registratonInfo.iterator().forEachRemaining(stringObjectEntry -> headers.add(stringObjectEntry.getKey(),\n+                    stringObjectEntry.getValue()));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5877f5d38e95794a65c65686232fd0aa101a06e"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzY3OTI5", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-387367929", "createdAt": "2020-04-03T15:38:21Z", "commit": {"oid": "d6c6896d27cc53470db15fdb75d61ca3c7db947b"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozODoyMVrOGAa3lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0MzoxOFrOGAbEPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MzM5Nw==", "bodyText": "we don't need this FMPOV", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403093397", "createdAt": "2020-04-03T15:38:21Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(null);\n+        }\n+        return webClient;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6896d27cc53470db15fdb75d61ca3c7db947b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MzgzOA==", "bodyText": "IMHO we should inject this via the class' constructor so we can be sure that it will always be set.", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403093838", "createdAt": "2020-04-03T15:38:54Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(null);\n+        }\n+        return webClient;\n+    }\n+\n+    /**\n+     * Sets the vertx webClient to use when mapping payload.\n+     *\n+     * @param webClient the webClient to set\n+     */\n+    @Autowired\n+    public void setWebClient(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6896d27cc53470db15fdb75d61ca3c7db947b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NDA1Mw==", "bodyText": "final?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403094053", "createdAt": "2020-04-03T15:39:12Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6896d27cc53470db15fdb75d61ca3c7db947b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTA0NQ==", "bodyText": "I'd rather not annotate this but instead create an instance of it in the Config class", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403095045", "createdAt": "2020-04-03T15:40:42Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6896d27cc53470db15fdb75d61ca3c7db947b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTEzNQ==", "bodyText": "public ?\ncould also use a proper JavaDoc comment", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403095135", "createdAt": "2020-04-03T15:40:51Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(null);\n+        }\n+        return webClient;\n+    }\n+\n+    /**\n+     * Sets the vertx webClient to use when mapping payload.\n+     *\n+     * @param webClient the webClient to set\n+     */\n+    @Autowired\n+    public void setWebClient(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6896d27cc53470db15fdb75d61ca3c7db947b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTI3OA==", "bodyText": "private?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403095278", "createdAt": "2020-04-03T15:41:06Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+@Component\n+public class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    private WebClient getWebClient() {\n+        if (webClient == null) {\n+            webClient = WebClient.create(null);\n+        }\n+        return webClient;\n+    }\n+\n+    /**\n+     * Sets the vertx webClient to use when mapping payload.\n+     *\n+     * @param webClient the webClient to set\n+     */\n+    @Autowired\n+    public void setWebClient(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registratonInfo, final MqttProtocolAdapterProperties config) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        if (!registratonInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+        final String mapper = registratonInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+        if (mapper.isBlank()) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final MapperEndpoint mapperEndpoint = config.getMapperEndpoint(mapper);\n+        if (mapperEndpoint == null) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final VertxHttpHeaders headers = new VertxHttpHeaders();\n+        registratonInfo.iterator().forEachRemaining(stringObjectEntry -> headers.add(stringObjectEntry.getKey(),\n+                stringObjectEntry.getValue()));\n+\n+        return mapMessageRequest(ctx, targetAddress, message, mapperEndpoint, headers);\n+    }\n+\n+    Future<MappedMessage> mapMessageRequest(final MqttContext ctx, final ResourceIdentifier targetAddress,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6896d27cc53470db15fdb75d61ca3c7db947b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTc2MQ==", "bodyText": "private", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403095761", "createdAt": "2020-04-03T15:41:58Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -19,29 +19,21 @@\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.client.ClientErrorException;\n-import org.eclipse.hono.config.MapperEndpoint;\n import org.eclipse.hono.service.metric.MetricsTags;\n import org.eclipse.hono.util.Constants;\n-import org.eclipse.hono.util.MessageHelper;\n-import org.eclipse.hono.util.RegistrationConstants;\n import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.core.Future;\n-import io.vertx.core.MultiMap;\n import io.vertx.core.Promise;\n-import io.vertx.core.buffer.Buffer;\n-import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n-import io.vertx.ext.web.client.HttpResponse;\n-import io.vertx.ext.web.client.WebClient;\n import io.vertx.mqtt.messages.MqttPublishMessage;\n-import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n /**\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n-\n-    private WebClient webClient;\n+    MessageMapping messageMapping;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6896d27cc53470db15fdb75d61ca3c7db947b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NjYzNg==", "bodyText": "what if no MessageMapping instance has been set?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r403096636", "createdAt": "2020-04-03T15:43:18Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -88,6 +73,12 @@ public void setWebClient(final WebClient webClient) {\n                 });\n     }\n \n+    private Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                 final MqttPublishMessage message) {\n+        return getRegistrationAssertion(targetAddress.getTenantId(), targetAddress.getResourceId(),\n+                ctx.authenticatedDevice(), ctx.getTracingContext()).compose(registratonInfo -> messageMapping.mapMessage(ctx, targetAddress, message, registratonInfo, getConfig()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6896d27cc53470db15fdb75d61ca3c7db947b"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzA2MTE0", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-389706114", "createdAt": "2020-04-08T07:11:38Z", "commit": {"oid": "46a8a6df37e2b5223fa86a894fbbd9e9adc59a5d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzoxMTozOFrOGCh1sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzoxNTo1OVrOGCh96w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwNDc1Mw==", "bodyText": "it looks like the result will never be completed if the HTTP request fails ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r405304753", "createdAt": "2020-04-08T07:11:38Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -87,7 +86,7 @@ public void setWebClient(final WebClient webClient) {\n     Future<MappedMessage> mapMessageRequest(final MqttContext ctx, final ResourceIdentifier targetAddress,\n                                             final MqttPublishMessage message, final MapperEndpoint mapperEndpoint, final VertxHttpHeaders headers) {\n         final Promise<MappedMessage> result = Promise.promise();\n-        getWebClient().post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n+        webClient.post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a8a6df37e2b5223fa86a894fbbd9e9adc59a5d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwNjg1OQ==", "bodyText": "is the MessageMapping bean required or not? In the Confiugration you create the bean so it will get injected. The setMessageMapping method's @Autowired annotation also requires a mapping to be injected (otherwise it should be @Autowired(required = false). That setter should also throw a NullPointerException if the given mapping is null ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r405306859", "createdAt": "2020-04-08T07:15:59Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -75,6 +75,11 @@ public void setMessageMapping(final MessageMapping messageMapping) {\n \n     private Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n                                  final MqttPublishMessage message) {\n+        if (messageMapping == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a8a6df37e2b5223fa86a894fbbd9e9adc59a5d"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46a8a6df37e2b5223fa86a894fbbd9e9adc59a5d", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/46a8a6df37e2b5223fa86a894fbbd9e9adc59a5d", "committedDate": "2020-04-06T10:21:21Z", "message": "fixed injection + remarks\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "c5a7f8e67b04119aae27f0d297413bdad956e507", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/c5a7f8e67b04119aae27f0d297413bdad956e507", "committedDate": "2020-04-20T14:52:25Z", "message": "initial commit custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDcyMDg0", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-397072084", "createdAt": "2020-04-21T07:47:53Z", "commit": {"oid": "c9a1c5b67e4da736f1352a4d052c2f37906e4bd4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzo0Nzo1M1rOGI3oRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzo0Nzo1M1rOGI3oRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1MzIyMg==", "bodyText": "this probably deserves a (debug) log statement?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r411953222", "createdAt": "2020-04-21T07:47:53Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -103,6 +103,8 @@ public MessageMapping(final WebClient webClient) {\n                                 new MappedMessage(ctx, ResourceIdentifier.from(targetAddress,\n                                         targetAddress.getTenantId(), deviceId), mqttPublishMessage, responseHeaders)\n                         );\n+                    } else {\n+                        result.complete(new MappedMessage(ctx, targetAddress, message));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a1c5b67e4da736f1352a4d052c2f37906e4bd4"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c6b28afe1b55945a8eefaf6f4b10debec77988d", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/6c6b28afe1b55945a8eefaf6f4b10debec77988d", "committedDate": "2020-04-21T12:52:38Z", "message": "add extra check on statuscode and configurable ssl\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/d4b08994beb81813efdda829aeedaa9a1eeefcd1", "committedDate": "2020-04-21T13:04:28Z", "message": "add extra check on statuscode and configurable ssl\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODc0MDEy", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-397874012", "createdAt": "2020-04-22T06:20:12Z", "commit": {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoyMDoxMlrOGJlQXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjozOTo1OVrOGJl1PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMDc2Ng==", "bodyText": "formatting", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412700766", "createdAt": "2020-04-22T06:20:12Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+    private final MultiMap mapperResponseHeaders;\n+    private final boolean mappedExternally;\n+\n+    private MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message,\n+                    final MultiMap mapperResponseHeaders, final boolean mappedExternally) {\n+        this.ctx = ctx;\n+        this.resource = resource;\n+        this.message = message;\n+        this.mapperResponseHeaders = mapperResponseHeaders;\n+        this.mappedExternally = mappedExternally;\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage which is actually not mapped by an external service.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMDgzMg==", "bodyText": "formatting", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412700832", "createdAt": "2020-04-22T06:20:20Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+    private final MultiMap mapperResponseHeaders;\n+    private final boolean mappedExternally;\n+\n+    private MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message,\n+                    final MultiMap mapperResponseHeaders, final boolean mappedExternally) {\n+        this.ctx = ctx;\n+        this.resource = resource;\n+        this.message = message;\n+        this.mapperResponseHeaders = mapperResponseHeaders;\n+        this.mappedExternally = mappedExternally;\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage which is actually not mapped by an external service.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     * @param mapperResponseHeaders The headers returned from the mapper service\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message, final MultiMap mapperResponseHeaders) {\n+        this(ctx, resource, message, mapperResponseHeaders, true);\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage.\n+     *  @param ctx The context used for this message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTAwMg==", "bodyText": "formatting", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412701002", "createdAt": "2020-04-22T06:20:44Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+    private final MultiMap mapperResponseHeaders;\n+    private final boolean mappedExternally;\n+\n+    private MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message,\n+                    final MultiMap mapperResponseHeaders, final boolean mappedExternally) {\n+        this.ctx = ctx;\n+        this.resource = resource;\n+        this.message = message;\n+        this.mapperResponseHeaders = mapperResponseHeaders;\n+        this.mappedExternally = mappedExternally;\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage which is actually not mapped by an external service.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     * @param mapperResponseHeaders The headers returned from the mapper service\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message, final MultiMap mapperResponseHeaders) {\n+        this(ctx, resource, message, mapperResponseHeaders, true);\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message) {\n+        this(ctx, resource, message, null, false);\n+    }\n+        /**\n+         * Gets the context.\n+         *\n+         * @return the context\n+         */\n+    MqttContext getCtx() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTIwMA==", "bodyText": "formatting", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412701200", "createdAt": "2020-04-22T06:21:05Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+    private final MultiMap mapperResponseHeaders;\n+    private final boolean mappedExternally;\n+\n+    private MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message,\n+                    final MultiMap mapperResponseHeaders, final boolean mappedExternally) {\n+        this.ctx = ctx;\n+        this.resource = resource;\n+        this.message = message;\n+        this.mapperResponseHeaders = mapperResponseHeaders;\n+        this.mappedExternally = mappedExternally;\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage which is actually not mapped by an external service.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     * @param mapperResponseHeaders The headers returned from the mapper service\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message, final MultiMap mapperResponseHeaders) {\n+        this(ctx, resource, message, mapperResponseHeaders, true);\n+    }\n+\n+    /**\n+     * Creates a new mappedMessage.\n+     *  @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload\n+     */\n+    MappedMessage(final MqttContext ctx, final ResourceIdentifier resource, final MqttPublishMessage message) {\n+        this(ctx, resource, message, null, false);\n+    }\n+        /**\n+         * Gets the context.\n+         *\n+         * @return the context\n+         */\n+    MqttContext getCtx() {\n+        return ctx;\n+    }\n+\n+    /**\n+     * Gets the resourceIdentifier.\n+     *\n+     * @return the resourceIdentifier\n+     */\n+    ResourceIdentifier getResource() {\n+        return resource;\n+    }\n+\n+    /**\n+     * Gets the message.\n+     *\n+     * @return the actual message\n+     */\n+    MqttPublishMessage getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Gets the headers returned by the mapper.\n+     *\n+     * @return headers returned from the mapper service\n+     */\n+\n+    public MultiMap getMapperResponseHeaders() {\n+        return mapperResponseHeaders;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTc2OA==", "bodyText": "Please provide a more meaningful description which indicates the purpose of this class. Nobody knows what a mapping component is ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412701768", "createdAt": "2020-04-22T06:22:18Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwNjAxOQ==", "bodyText": "this will throw a ClassCastException if the property is not a string. IMHO you should use a more defensive approach here ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412706019", "createdAt": "2020-04-22T06:31:32Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+public final class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registrationInfo, final MqttProtocolAdapterProperties config) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        if (!registrationInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+        final String mapper = registrationInfo.getString(RegistrationConstants.FIELD_MAPPER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxMDIwNA==", "bodyText": "If I am not mistaken this should try to retrieve the (mapped) device ID from the response headers, shouldn't it?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r412710204", "createdAt": "2020-04-22T06:39:59Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component.\n+ */\n+public final class MessageMapping {\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registrationInfo, final MqttProtocolAdapterProperties config) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        if (!registrationInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+        final String mapper = registrationInfo.getString(RegistrationConstants.FIELD_MAPPER);\n+        if (mapper.isBlank()) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final MapperEndpoint mapperEndpoint = config.getMapperEndpoint(mapper);\n+        if (mapperEndpoint == null) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final VertxHttpHeaders headers = new VertxHttpHeaders();\n+        registrationInfo.iterator().forEachRemaining(stringObjectEntry -> headers.add(stringObjectEntry.getKey(),\n+                stringObjectEntry.getValue()));\n+\n+        return mapMessageRequest(ctx, targetAddress, message, mapperEndpoint, headers);\n+    }\n+\n+    Future<MappedMessage> mapMessageRequest(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                            final MqttPublishMessage message, final MapperEndpoint mapperEndpoint, final VertxHttpHeaders headers) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        webClient.post(mapperEndpoint.getPort(), mapperEndpoint.getHost(), mapperEndpoint.getUri())\n+                .putHeaders(headers)\n+                .ssl(mapperEndpoint.ssl)\n+                .sendBuffer(message.payload(), httpResponseAsyncResult -> {\n+                    if (httpResponseAsyncResult.succeeded()) {\n+                        final HttpResponse<Buffer> httpResponse = httpResponseAsyncResult.result();\n+                        if (httpResponse.statusCode() == 200) {\n+                            final MqttPublishMessageImpl mqttPublishMessage = new MqttPublishMessageImpl(ctx.message().messageId(), ctx.message().qosLevel(),\n+                                    ctx.message().isDup(), ctx.message().isRetain(), ctx.message().topicName(),\n+                                    httpResponse.bodyAsBuffer().getByteBuf());\n+                            final MultiMap responseHeaders = httpResponse.headers();\n+                            String deviceId = targetAddress.getResourceId();\n+                            if (headers.contains(MessageHelper.APP_PROPERTY_DEVICE_ID)) {\n+                                deviceId = headers.get(MessageHelper.APP_PROPERTY_DEVICE_ID);\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b08994beb81813efdda829aeedaa9a1eeefcd1"}, "originalPosition": 103}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b13949a08fece8e665ad4261a7179336dac6e22", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/4b13949a08fece8e665ad4261a7179336dac6e22", "committedDate": "2020-04-23T10:10:40Z", "message": "map mapper headers to downstream message\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "6120e090899a2291a54856ae38c745ce2f9eea3b", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/6120e090899a2291a54856ae38c745ce2f9eea3b", "committedDate": "2020-04-23T11:43:01Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6120e090899a2291a54856ae38c745ce2f9eea3b", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/6120e090899a2291a54856ae38c745ce2f9eea3b", "committedDate": "2020-04-23T11:43:01Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "381e46532311d07aa7c531f57f601d848319205c", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/381e46532311d07aa7c531f57f601d848319205c", "committedDate": "2020-04-23T11:44:10Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "381e46532311d07aa7c531f57f601d848319205c", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/381e46532311d07aa7c531f57f601d848319205c", "committedDate": "2020-04-23T11:44:10Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "d4c2c01c23f3bf0e97aeac6c66c60f32de2ed5f2", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/d4c2c01c23f3bf0e97aeac6c66c60f32de2ed5f2", "committedDate": "2020-05-07T12:13:35Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4c2c01c23f3bf0e97aeac6c66c60f32de2ed5f2", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/d4c2c01c23f3bf0e97aeac6c66c60f32de2ed5f2", "committedDate": "2020-05-07T12:13:35Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "a49b8f2bdc5b053270d0879b26034b1770a2160f", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/a49b8f2bdc5b053270d0879b26034b1770a2160f", "committedDate": "2020-05-07T12:27:37Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a49b8f2bdc5b053270d0879b26034b1770a2160f", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/a49b8f2bdc5b053270d0879b26034b1770a2160f", "committedDate": "2020-05-07T12:27:37Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "f84876e21919aa52e3d8900844f782243e71664f", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/f84876e21919aa52e3d8900844f782243e71664f", "committedDate": "2020-05-07T12:31:16Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f84876e21919aa52e3d8900844f782243e71664f", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/f84876e21919aa52e3d8900844f782243e71664f", "committedDate": "2020-05-07T12:31:16Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/a8d9a50e5b214414b90d22a153e25607a43a0dc9", "committedDate": "2020-05-07T12:41:09Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTI4MDc4", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-407528078", "createdAt": "2020-05-07T14:27:53Z", "commit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoyNzo1M1rOGSBRZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDo1NDo0OVrOGSClUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0ODM5MA==", "bodyText": "????", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421548390", "createdAt": "2020-05-07T14:27:53Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ * Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0ODc3NA==", "bodyText": "I think you can do better than this ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421548774", "createdAt": "2020-05-07T14:28:21Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/Config.java", "diffHunk": "@@ -122,4 +123,15 @@ public ObjectFactoryCreatingFactoryBean serviceFactory() {\n         factory.setTargetBeanName(BEAN_NAME_VERTX_BASED_MQTT_PROTOCOL_ADAPTER);\n         return factory;\n     }\n+\n+    /**\n+     * Constructs messageMapping.\n+     *\n+     * @return Returns constructed messageMapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0OTI2MA==", "bodyText": "final ?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421549260", "createdAt": "2020-05-07T14:28:58Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MDMwNg==", "bodyText": "I think you can do better than this.\nAlso, please insert an empty line between description and params.\nPlease finish the param description with a .", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421550306", "createdAt": "2020-05-07T14:30:18Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MappedMessage.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * Structure to provide a mapped message.\n+ */\n+class MappedMessage {\n+    private final MqttContext ctx;\n+    private final ResourceIdentifier resource;\n+    private final MqttPublishMessage message;\n+\n+    /**\n+     * Creates a new mappedMessage.\n+     * @param ctx The context used for this message\n+     * @param resource The resourceIdentifier used for this message\n+     * @param message The actual message with its payload", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTE2Ng==", "bodyText": "It would be helpful to understand what is being mapped and why, e.g. describe a common use case.", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421551166", "createdAt": "2020-05-07T14:31:25Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTQ1OQ==", "bodyText": "make this static", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421551459", "createdAt": "2020-05-07T14:31:48Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTYyMA==", "bodyText": "final", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421551620", "createdAt": "2020-05-07T14:31:59Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTg3OA==", "bodyText": "what if webclient is null?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421551878", "createdAt": "2020-05-07T14:32:19Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MjY0Nw==", "bodyText": "are the params allowed to be null?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421552647", "createdAt": "2020-05-07T14:33:18Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MzM0MQ==", "bodyText": "it would be much easier to test the interaction of the protocol adapter with the mapping service if this were an interface which can then be mocked in unit tests ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421553341", "createdAt": "2020-05-07T14:34:08Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1NDgzNg==", "bodyText": "why do we want to pass in the static adapter config properties to each method invocation instead of keeping them in a field populated by the constructor?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421554836", "createdAt": "2020-05-07T14:35:42Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registrationInfo, final MqttProtocolAdapterProperties config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1NzU2Mg==", "bodyText": "use io.vertx.core.MultiMap instead ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421557562", "createdAt": "2020-05-07T14:39:05Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private WebClient webClient;\n+\n+    /**\n+     * Constructs the messageMapping client used to call external/custom messageMapping.\n+     *\n+     * @param webClient Vert.x webclient to use in the messageMapping\n+     */\n+    public MessageMapping(final WebClient webClient) {\n+        this.webClient = webClient;\n+    }\n+\n+    /**\n+     * Fetches the mapper if configured and calls the external mapping service.\n+     *\n+     * @param ctx The mqtt context\n+     * @param targetAddress The resourceIdentifier with the current targetAddress\n+     * @param message Received message\n+     * @param registrationInfo information retrieved from the device registry\n+     * @param config Mqtt protocol adapter properties\n+     * @return Mapped message\n+     */\n+    public Future<MappedMessage> mapMessage(final MqttContext ctx, final ResourceIdentifier targetAddress,\n+                                     final MqttPublishMessage message, final JsonObject registrationInfo, final MqttProtocolAdapterProperties config) {\n+        final Promise<MappedMessage> result = Promise.promise();\n+        if (!registrationInfo.containsKey(RegistrationConstants.FIELD_MAPPER)) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final Object mapperObject = registrationInfo.getValue(RegistrationConstants.FIELD_MAPPER);\n+        if (!(mapperObject instanceof String)) {\n+            log.debug(\"Mapper configuration is a string. Not requesting mapping\");\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+        final String mapper = (String) mapperObject;\n+        if (mapper.isBlank()) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final MapperEndpoint mapperEndpoint = config.getMapperEndpoint(mapper);\n+        if (mapperEndpoint == null) {\n+            result.complete(new MappedMessage(ctx, targetAddress, message));\n+            return result.future();\n+        }\n+\n+        final VertxHttpHeaders headers = new VertxHttpHeaders();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MTMwNw==", "bodyText": "??", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421561307", "createdAt": "2020-05-07T14:43:48Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -96,4 +144,8 @@ protected String getTypeName() {\n         }\n         return result.future();\n     }\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MzMyNw==", "bodyText": "use Map as parameter type", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421563327", "createdAt": "2020-05-07T14:46:18Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -229,4 +231,26 @@ public Duration getTenantIdleTimeout() {\n     public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n         this.tenantIdleTimeout = Objects.requireNonNull(tenantIdleTimeout);\n     }\n+\n+    /**\n+     * Sets the configured mappers for this adapter\n+     * <p>\n+     * Setting this property to an empty hashMap will disable mapping for this adapter.\n+     *\n+     * @param mapperEndpoints The new hashMap with mapper endpoints\n+     * @throws NullPointerException if parameter is {@code null}.\n+     */\n+    public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MzU2NA==", "bodyText": "use Map as type", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421563564", "createdAt": "2020-05-07T14:46:35Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -34,6 +35,7 @@\n     private long eventLoopBlockedCheckTimeout = 5000L;\n     private int maxConnections = 0;\n     private Duration tenantIdleTimeout = DEFAULT_TENANT_IDLE_TIMEOUT;\n+    private HashMap<String, MapperEndpoint> mapperEndpoints = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NTAzOA==", "bodyText": "you should better copy all elements, i.e.\nthis.mapperEndpoints.clear();\nthis.mapperEndpoints.addAll(mapperEndpoints);\n\nso that future modifications of the passed in map have no impact on this config class", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421565038", "createdAt": "2020-05-07T14:48:31Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/config/ProtocolAdapterProperties.java", "diffHunk": "@@ -229,4 +231,26 @@ public Duration getTenantIdleTimeout() {\n     public void setTenantIdleTimeout(final Duration tenantIdleTimeout) {\n         this.tenantIdleTimeout = Objects.requireNonNull(tenantIdleTimeout);\n     }\n+\n+    /**\n+     * Sets the configured mappers for this adapter\n+     * <p>\n+     * Setting this property to an empty hashMap will disable mapping for this adapter.\n+     *\n+     * @param mapperEndpoints The new hashMap with mapper endpoints\n+     * @throws NullPointerException if parameter is {@code null}.\n+     */\n+    public final void setMapperEndpoints(final HashMap<String, MapperEndpoint> mapperEndpoints) {\n+        this.mapperEndpoints = Objects.requireNonNull(mapperEndpoints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2Nzg1Nw==", "bodyText": "does this really need to be configured at the device instead of the tenant level?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421567857", "createdAt": "2020-05-07T14:52:13Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -54,6 +54,9 @@\n     @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n     private List<String> memberOf = new LinkedList<>();\n \n+    @JsonInclude(value = Include.NON_EMPTY)\n+    private String mapper = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2ODU3Ng==", "bodyText": "IMHO this should be Include.NON_NULL and the field should be null by default.", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421568576", "createdAt": "2020-05-07T14:53:09Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -54,6 +54,9 @@\n     @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n     private List<String> memberOf = new LinkedList<>();\n \n+    @JsonInclude(value = Include.NON_EMPTY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTAyNQ==", "bodyText": "setMapper\nfinal?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421569025", "createdAt": "2020-05-07T14:53:44Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -235,4 +239,24 @@ public Device setMemberOf(final List<String> memberOf) {\n         return this;\n     }\n \n+    /**\n+     * Sets the mapper property for this device.\n+     *\n+     * @param mapper The mapper property to set.\n+     * @return        a reference to this for fluent use.\n+     */\n+    public Device setmapper(final String mapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTI0Mw==", "bodyText": "what is the purpose of this property?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421569243", "createdAt": "2020-05-07T14:54:00Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -235,4 +239,24 @@ public Device setMemberOf(final List<String> memberOf) {\n         return this;\n     }\n \n+    /**\n+     * Sets the mapper property for this device.\n+     *\n+     * @param mapper The mapper property to set.\n+     * @return        a reference to this for fluent use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2OTg3Mg==", "bodyText": "final?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r421569872", "createdAt": "2020-05-07T14:54:49Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -235,4 +239,24 @@ public Device setMemberOf(final List<String> memberOf) {\n         return this;\n     }\n \n+    /**\n+     * Sets the mapper property for this device.\n+     *\n+     * @param mapper The mapper property to set.\n+     * @return        a reference to this for fluent use.\n+     */\n+    public Device setmapper(final String mapper) {\n+        this.mapper = mapper;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the mapper for this devices.\n+     *\n+     * @return mapper for this device.\n+     */\n+    public String getMapper() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/a8d9a50e5b214414b90d22a153e25607a43a0dc9", "committedDate": "2020-05-07T12:41:09Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "7d377605af15af64b4936fb3bf272211eaad9ce8", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/7d377605af15af64b4936fb3bf272211eaad9ce8", "committedDate": "2020-05-08T09:45:46Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d377605af15af64b4936fb3bf272211eaad9ce8", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/7d377605af15af64b4936fb3bf272211eaad9ce8", "committedDate": "2020-05-08T09:45:46Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "4dca1f6641a9e707ec415742fa66b9b8d2642176", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/4dca1f6641a9e707ec415742fa66b9b8d2642176", "committedDate": "2020-05-08T10:06:18Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODk4OTg5", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-408898989", "createdAt": "2020-05-11T06:45:25Z", "commit": {"oid": "4dca1f6641a9e707ec415742fa66b9b8d2642176"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjo0NToyNVrOGTOqPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjo1OTowNFrOGTPBPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxNjMxNw==", "bodyText": "We do not use this naming pattern to indicate an interface. This is simply the MessageMapping interface and your implementation might be the HttpBasedMessageMapping or something indicating its particular strategy for mapping the messages.", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422816317", "createdAt": "2020-05-11T06:45:25Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * A message mapping interface. This component requests mapping from another server is configured properly. The\n+ * headers are overwritten with the result of the mapper (which includes the resourceId).\n+ * E.g.: when the deviceId is in the payload of the message, the deviceId can be deducted in the custom mapper and\n+ * the payload can be changed accordingly to the payload originally received by the gateway.\n+ */\n+public interface IMessageMapping {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dca1f6641a9e707ec415742fa66b9b8d2642176"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxODY2OQ==", "bodyText": "The first sentence is supposed to tell the reader a little about the nature of this class/interface. IMHO you should simply remove the first sentence.\nHere is a nice introduction to how to write good JavaDoc comments ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422818669", "createdAt": "2020-05-11T06:51:01Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/IMessageMapping.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n+/**\n+ * A message mapping interface. This component requests mapping from another server is configured properly. The", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dca1f6641a9e707ec415742fa66b9b8d2642176"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxOTI3MQ==", "bodyText": "try LoggerFactory.getLogger(MessageMapping.class)", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422819271", "createdAt": "2020-05-11T06:52:27Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/MessageMapping.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt.impl;\n+\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n+import org.eclipse.hono.adapter.mqtt.MqttContext;\n+import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n+import org.eclipse.hono.config.MapperEndpoint;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Promise;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import io.vertx.core.json.Json;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+import io.vertx.mqtt.messages.impl.MqttPublishMessageImpl;\n+\n+/**\n+ * A Vert.x based message mapping component. This component requests mapping from another server over HTTP(S) if this\n+ * is configured properly. The headers are overwritten with the result of the mapper (which includes the resourceId).\n+ */\n+public final class MessageMapping {\n+\n+    private final Logger log = LoggerFactory.getLogger(getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MTQ1OQ=="}, "originalCommit": {"oid": "a8d9a50e5b214414b90d22a153e25607a43a0dc9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxOTcxMw==", "bodyText": "parameter names always start with a lower case letter ..", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422819713", "createdAt": "2020-05-11T06:53:32Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/main/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapter.java", "diffHunk": "@@ -14,48 +14,96 @@\n package org.eclipse.hono.adapter.mqtt.impl;\n \n import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.Objects;\n \n+import org.apache.qpid.proton.message.Message;\n import org.eclipse.hono.adapter.mqtt.AbstractVertxBasedMqttProtocolAdapter;\n+import org.eclipse.hono.adapter.mqtt.MqttConstants;\n import org.eclipse.hono.adapter.mqtt.MqttContext;\n import org.eclipse.hono.adapter.mqtt.MqttProtocolAdapterProperties;\n import org.eclipse.hono.client.ClientErrorException;\n import org.eclipse.hono.service.metric.MetricsTags;\n import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.MessageHelper;\n import org.eclipse.hono.util.ResourceIdentifier;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n import io.netty.handler.codec.mqtt.MqttQoS;\n import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n import io.vertx.core.Promise;\n+import io.vertx.core.json.Json;\n+import io.vertx.mqtt.messages.MqttPublishMessage;\n+\n \n /**\n  * A Vert.x based Hono protocol adapter for publishing messages to Hono's Telemetry and Event APIs using MQTT.\n  */\n public final class VertxBasedMqttProtocolAdapter extends AbstractVertxBasedMqttProtocolAdapter<MqttProtocolAdapterProperties> {\n+    private IMessageMapping IMessageMapping;\n \n     /**\n      * {@inheritDoc}\n-     * \n+     *\n      * @return {@link Constants#PROTOCOL_ADAPTER_TYPE_MQTT}\n      */\n     @Override\n     protected String getTypeName() {\n         return Constants.PROTOCOL_ADAPTER_TYPE_MQTT;\n     }\n \n+    /**\n+     * Sets the messageMapping for this adapter.\n+     *\n+     * @param IMessageMapping the messageMapping\n+     * @throws NullPointerException if messageMapping is {@code null}.\n+     */\n+    @Autowired\n+    public void setMessageMapping(final IMessageMapping IMessageMapping) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dca1f6641a9e707ec415742fa66b9b8d2642176"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgyMTE1OA==", "bodyText": "This actually seems to be a test for the MessageMapping class but not for the protocol adapter, doesn't it?\nAlso, it doesn't seem to test anything as there are no assertions, or am I mistaken?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422821158", "createdAt": "2020-05-11T06:56:44Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java", "diffHunk": "@@ -257,37 +306,58 @@ public void testMapTopicSupportsShortAndLongTopicNames(final VertxTestContext ct\n \n     }\n \n-    private void givenAnAdapter() {\n-\n-        config = new MqttProtocolAdapterProperties();\n-        adapter = new VertxBasedMqttProtocolAdapter();\n-        adapter.setConfig(config);\n-    }\n-\n-    private static MqttPublishMessage newMessage(final MqttQoS qosLevel, final String topic) {\n-        return newMessage(qosLevel, topic, Buffer.buffer(\"test\"));\n-    }\n+    /**\n+     * Verifies that the adapter calls the mapper if configured. Also the updated payload and deviceId is checked.\n+     *\n+     * @param ctx The helper to use for running tests on vert.x.\n+     */\n+    @Test\n+    public void testMapperShouldUpdatePayloadAndDeviceId(final VertxTestContext ctx) {\n+        givenAnAdapterWithMapper();\n+        final MessageMapping messageMapping = new MessageMapping(mapperWebClient, config);\n+\n+        final ResourceIdentifier targetAddress = ResourceIdentifier.from(TelemetryConstants.TELEMETRY_ENDPOINT, TEST_TENANT_ID, TEST_DEVICE);\n+        final HttpRequest httpRequest = mock(HttpRequest.class);\n+        when(mapperWebClient.post(any(int.class), any(String.class), any(String.class))).thenReturn(httpRequest);\n+        when(httpRequest.putHeaders(any(MultiMap.class))).thenReturn(httpRequest);\n+        when(httpRequest.ssl(any(Boolean.class))).thenReturn(httpRequest);\n+        final AsyncResult asyncResult = mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        final HttpResponse httpResponse = mock(HttpResponse.class);\n+        when(asyncResult.result()).thenReturn(httpResponse);\n+        final VertxHttpHeaders headers = new VertxHttpHeaders();\n+        final String newDeviceId = \"new-device\";\n+        headers.add(MessageHelper.APP_PROPERTY_DEVICE_ID, newDeviceId);\n+        when(httpResponse.headers()).thenReturn(headers);\n+        final Buffer changedBuffer = Buffer.buffer(\"changed\");\n+        when(httpResponse.bodyAsBuffer()).thenReturn(changedBuffer);\n+\n+        final MqttPublishMessage message = newMessage(MqttQoS.AT_LEAST_ONCE, EventConstants.EVENT_ENDPOINT);\n+        final MqttContext context = newContext(message, null);\n+        final MapperEndpoint mapperEndpoint = MapperEndpoint.from(\"host\", 1234, \"/uri\", false);\n+        messageMapping.mapMessageRequest(context, targetAddress, message, mapperEndpoint, headers).onComplete(ctx.succeeding(mappedMessage -> {\n+        }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dca1f6641a9e707ec415742fa66b9b8d2642176"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgyMjIwNQ==", "bodyText": "just for reference, in Java you do not need to explicitly initialize with null as it is the default. It doesn't harm to make it explicit, though, of course ...", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r422822205", "createdAt": "2020-05-11T06:59:04Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -54,6 +54,9 @@\n     @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n     private List<String> memberOf = new LinkedList<>();\n \n+    @JsonInclude(value = Include.NON_NULL)\n+    private String mapper = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dca1f6641a9e707ec415742fa66b9b8d2642176"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4dca1f6641a9e707ec415742fa66b9b8d2642176", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/4dca1f6641a9e707ec415742fa66b9b8d2642176", "committedDate": "2020-05-08T10:06:18Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "253da7f00b447217f7a1b224cafdfc903e55cb56", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/253da7f00b447217f7a1b224cafdfc903e55cb56", "committedDate": "2020-05-11T13:00:07Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MTYwODYx", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-409160861", "createdAt": "2020-05-11T13:16:56Z", "commit": {"oid": "253da7f00b447217f7a1b224cafdfc903e55cb56"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoxNjo1NlrOGTbxCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoxNjo1NlrOGTbxCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzMTA0OA==", "bodyText": "this doesn't seem to be testing any functionality of the MQTT adapter, i.e. this should be a test case of HttpBasedMessageMappingTest, right?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r423031048", "createdAt": "2020-05-11T13:16:56Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx/src/test/java/org/eclipse/hono/adapter/mqtt/impl/VertxBasedMqttProtocolAdapterTest.java", "diffHunk": "@@ -257,37 +306,60 @@ public void testMapTopicSupportsShortAndLongTopicNames(final VertxTestContext ct\n \n     }\n \n-    private void givenAnAdapter() {\n+    /**\n+     * Verifies that the adapter calls the mapper if configured. Also the updated payload and deviceId is checked.\n+     *\n+     * @param ctx The helper to use for running tests on vert.x.\n+     */\n+    @Test\n+    public void testMapperShouldUpdatePayloadAndDeviceId(final VertxTestContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "253da7f00b447217f7a1b224cafdfc903e55cb56"}, "originalPosition": 173}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "253da7f00b447217f7a1b224cafdfc903e55cb56", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/253da7f00b447217f7a1b224cafdfc903e55cb56", "committedDate": "2020-05-11T13:00:07Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "d4a5d28341aea00476948ee50d508a59532f7422", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/d4a5d28341aea00476948ee50d508a59532f7422", "committedDate": "2020-05-11T13:34:33Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4a5d28341aea00476948ee50d508a59532f7422", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/d4a5d28341aea00476948ee50d508a59532f7422", "committedDate": "2020-05-11T13:34:33Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "8cb6e48af41388808d7b64f0ffafaee16788a8fc", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/8cb6e48af41388808d7b64f0ffafaee16788a8fc", "committedDate": "2020-05-11T13:37:45Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzU2NTE0", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-409356514", "createdAt": "2020-05-11T16:58:12Z", "commit": {"oid": "8cb6e48af41388808d7b64f0ffafaee16788a8fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo1ODoxM1rOGTlC6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo1ODoxM1rOGTlC6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4MzA4MQ==", "bodyText": "can you move these to the correct position based on alphabetical order?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r423183081", "createdAt": "2020-05-11T16:58:13Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/admin-guide/mqtt-adapter-config.md", "diffHunk": "@@ -41,6 +41,9 @@ The following table provides an overview of the configuration variables and corr\n | `HONO_MQTT_PORT`<br>`--hono.mqtt.port` | no | `8883` | The secure port that the protocol adapter should listen on.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n | `HONO_MQTT_SECURE_PROTOCOLS`<br>`--hono.mqtt.secureProtocols` | no | `TLSv1.2` | A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the [vert.x documentation](https://vertx.io/docs/vertx-core/java/#ssl) for a list of supported protocol names. |\n | `HONO_MQTT_TENANT_IDLE_TIMEOUT`<br>`--hono.mqtt.tenantIdleTimeout` | no | `0ms` | The duration after which the protocol adapter removes local state of the tenant (e.g. open AMQP links) with an amount and a unit, e.g. `2h` for 2 hours. See the [Spring Boot documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config-conversion-duration) for an explanation of the format. The value `0ms` disables the timeout. |\n+| `HONO_MQTT_MAPPERENDPOINTS_<mapperName>_HOST`<br>`--hono.mqtt.mapperEndpoints.<mapperName>.host` | no | - | The host to which the adapter should connect to call the custom mapper. Replace `<mapperName>` with the name of the mapper to configure. |\n+| `HONO_MQTT_MAPPERENDPOINTS_<mapperName>_PORT`<br>`--hono.mqtt.mapperEndpoints.<mapperName>.port` | no | - | The port to which the adapter should connect to call the custom mapper. Replace `<mapperName>` with the name of the mapper to configure. |\n+| `HONO_MQTT_MAPPERENDPOINTS_<mapperName>_URI`<br>`--hono.mqtt.mapperEndpoints.<mapperName>.uri` | no | - | The used uri to append to the host to call the mapping method on the mapping server. Replace `<mapperName>` with the name of the mapper to configure. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb6e48af41388808d7b64f0ffafaee16788a8fc"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff1582ea7e47dfa698ffe46c4f97e2c682916b3a", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/ff1582ea7e47dfa698ffe46c4f97e2c682916b3a", "committedDate": "2020-05-12T06:40:20Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cb6e48af41388808d7b64f0ffafaee16788a8fc", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/8cb6e48af41388808d7b64f0ffafaee16788a8fc", "committedDate": "2020-05-11T13:37:45Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}, "afterCommit": {"oid": "ff1582ea7e47dfa698ffe46c4f97e2c682916b3a", "author": {"user": {"login": "BobClaerhout", "name": "Bob Claerhout"}}, "url": "https://github.com/eclipse/hono/commit/ff1582ea7e47dfa698ffe46c4f97e2c682916b3a", "committedDate": "2020-05-12T06:40:20Z", "message": "ability to use custom mapper\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDQxNjk2", "url": "https://github.com/eclipse/hono/pull/1862#pullrequestreview-413441696", "createdAt": "2020-05-18T09:53:11Z", "commit": {"oid": "ff1582ea7e47dfa698ffe46c4f97e2c682916b3a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MzoxMVrOGWv4WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MzoxMVrOGWv4WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNjMyOQ==", "bodyText": "JavaDoc?", "url": "https://github.com/eclipse/hono/pull/1862#discussion_r426506329", "createdAt": "2020-05-18T09:53:11Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttConstants.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.mqtt;\n+\n+/**\n+ * Constants used in the mqtt adapter.\n+ */\n+public class MqttConstants {\n+\n+    public static final String MAPPER_DATA = \"mapper_data\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1582ea7e47dfa698ffe46c4f97e2c682916b3a"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 838, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}