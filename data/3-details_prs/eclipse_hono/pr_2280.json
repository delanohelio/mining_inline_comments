{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MjU5MzQw", "number": 2280, "title": "[#2029] Add Command Router API specification", "bodyText": "This is for #2029.\nAdds the specification for a new Command Router API, providing methods to configure the Command Router component so that it can route command & control messages to their target.", "createdAt": "2020-11-04T09:40:15Z", "url": "https://github.com/eclipse/hono/pull/2280", "merged": true, "mergeCommit": {"oid": "1d8242a2d5a330ead9c5f59c3292539023f101cf"}, "closed": true, "closedAt": "2020-11-12T07:45:19Z", "author": {"login": "calohmn"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbFJrMgFqTUyNjk1NDI4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbZeyrgBqjM5ODI2NjA3MTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2OTU0Mjgx", "url": "https://github.com/eclipse/hono/pull/2280#pullrequestreview-526954281", "createdAt": "2020-11-10T08:21:51Z", "commit": {"oid": "322a4732f99e38164fc5f3939a08287f1504ed2b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODoyMTo1MlrOHwQ6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODozMjozOVrOHwRUIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3MDgwNQ==", "bodyText": "I do not think that the adapters configure the component itself, that would be done by environment variables during startup, wouldn't it?\nHow about\n\nProtocol Adapters use the Command Router API to supply information during run time that a Command Router service component uses to route command & control messages ...", "url": "https://github.com/eclipse/hono/pull/2280#discussion_r520370805", "createdAt": "2020-11-10T08:21:52Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/command-router/index.md", "diffHunk": "@@ -0,0 +1,174 @@\n+---\n+title: \"Command Router API Specification\"\n+linkTitle: \"Command Router API\"\n+weight: 425\n+resources:\n+  - src: preconditions.svg\n+  - src: register_cmd_consumer.svg\n+  - src: unregister_cmd_consumer.svg\n+  - src: set_last_known_gateway_success.svg\n+---\n+\n+The *Command Router API* is used by *Protocol Adapters* to configure the Command Router service component, enabling it to route command & control messages to the protocol adapters that the target devices are connected to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322a4732f99e38164fc5f3939a08287f1504ed2b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3MTEyMw==", "bodyText": "needs to connect to the service component?", "url": "https://github.com/eclipse/hono/pull/2280#discussion_r520371123", "createdAt": "2020-11-10T08:22:19Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/command-router/index.md", "diffHunk": "@@ -0,0 +1,174 @@\n+---\n+title: \"Command Router API Specification\"\n+linkTitle: \"Command Router API\"\n+weight: 425\n+resources:\n+  - src: preconditions.svg\n+  - src: register_cmd_consumer.svg\n+  - src: unregister_cmd_consumer.svg\n+  - src: set_last_known_gateway_success.svg\n+---\n+\n+The *Command Router API* is used by *Protocol Adapters* to configure the Command Router service component, enabling it to route command & control messages to the protocol adapters that the target devices are connected to.\n+<!--more-->\n+\n+The Command Router API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using an AMQP 1.0 client in order to invoke operations of the API as described in the following sections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322a4732f99e38164fc5f3939a08287f1504ed2b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3Mjg4MA==", "bodyText": "This sounds like the consumer and the protocol adapter instance are different things here. How about\n\nClients use this command to register a protocol adapter instance as the consumer of command & control messages for a device or gateway that is currently connected to that particular adapter instance.", "url": "https://github.com/eclipse/hono/pull/2280#discussion_r520372880", "createdAt": "2020-11-10T08:25:17Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/command-router/index.md", "diffHunk": "@@ -0,0 +1,174 @@\n+---\n+title: \"Command Router API Specification\"\n+linkTitle: \"Command Router API\"\n+weight: 425\n+resources:\n+  - src: preconditions.svg\n+  - src: register_cmd_consumer.svg\n+  - src: unregister_cmd_consumer.svg\n+  - src: set_last_known_gateway_success.svg\n+---\n+\n+The *Command Router API* is used by *Protocol Adapters* to configure the Command Router service component, enabling it to route command & control messages to the protocol adapters that the target devices are connected to.\n+<!--more-->\n+\n+The Command Router API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using an AMQP 1.0 client in order to invoke operations of the API as described in the following sections.\n+\n+<a name=\"preconditions\"></a>\n+## Preconditions for invoking the Command Router API\n+\n+1. Client has established an AMQP connection with the Command Router service.\n+1. Client has established an AMQP link in role *sender* on the connection using target address `cmd_router/${tenant_id}`. This link is used by the client to send request messages to the Command Router service.\n+1. Client has established an AMQP link in role *receiver* on the connection using source address `cmd_router/${tenant_id}/${reply-to}` where *reply-to* may be any arbitrary string chosen by the client. This link is used by the client to receive responses to the requests it has sent to the Command Router service. This link's source address is also referred to as the *reply-to* address for the request messages.\n+\n+{{< figure src=\"preconditions.svg\" alt=\"A client establishes an AMQP connection and the links required to invoke operations of the Command Router service\" title=\"Client connecting to Command Router service\" >}}\n+\n+## Register command consumer for device\n+\n+Clients use this command to *register* a consumer for command & control messages for a device, providing the protocol adapter instance that the given device or gateway is currently connected to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322a4732f99e38164fc5f3939a08287f1504ed2b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3NTg3Ng==", "bodyText": "may we can add an example here for a sequence of actions that might lead to 412 being returned, e.g. a device losing its connection and re-connecting to a different adapter instance?", "url": "https://github.com/eclipse/hono/pull/2280#discussion_r520375876", "createdAt": "2020-11-10T08:30:19Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/command-router/index.md", "diffHunk": "@@ -0,0 +1,174 @@\n+---\n+title: \"Command Router API Specification\"\n+linkTitle: \"Command Router API\"\n+weight: 425\n+resources:\n+  - src: preconditions.svg\n+  - src: register_cmd_consumer.svg\n+  - src: unregister_cmd_consumer.svg\n+  - src: set_last_known_gateway_success.svg\n+---\n+\n+The *Command Router API* is used by *Protocol Adapters* to configure the Command Router service component, enabling it to route command & control messages to the protocol adapters that the target devices are connected to.\n+<!--more-->\n+\n+The Command Router API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using an AMQP 1.0 client in order to invoke operations of the API as described in the following sections.\n+\n+<a name=\"preconditions\"></a>\n+## Preconditions for invoking the Command Router API\n+\n+1. Client has established an AMQP connection with the Command Router service.\n+1. Client has established an AMQP link in role *sender* on the connection using target address `cmd_router/${tenant_id}`. This link is used by the client to send request messages to the Command Router service.\n+1. Client has established an AMQP link in role *receiver* on the connection using source address `cmd_router/${tenant_id}/${reply-to}` where *reply-to* may be any arbitrary string chosen by the client. This link is used by the client to receive responses to the requests it has sent to the Command Router service. This link's source address is also referred to as the *reply-to* address for the request messages.\n+\n+{{< figure src=\"preconditions.svg\" alt=\"A client establishes an AMQP connection and the links required to invoke operations of the Command Router service\" title=\"Client connecting to Command Router service\" >}}\n+\n+## Register command consumer for device\n+\n+Clients use this command to *register* a consumer for command & control messages for a device, providing the protocol adapter instance that the given device or gateway is currently connected to.\n+\n+Clients can provide an optional `lifespan` parameter to make the registration entry expire after the given number of seconds. Note that implementations of this API have to support this feature, otherwise the Command Router service component might fail to correctly route command messages.\n+\n+This API doesn't mandate checks on the validity of the given device in order not to introduce a dependency on the *Device Registration API*. However, implementations of this API may choose to perform such checks or impose a restriction on the overall amount of data that can be stored per tenant in order to protect against malicious requests.\n+\n+**Message Flow**\n+\n+\n+{{< figure src=\"register_cmd_consumer.svg\" title=\"Client registers the command consumer for a device\" alt=\"A client sends a request message for registering the command consumer and receives a response containing a confirmation\" >}}\n+\n+**Request Message Format**\n+\n+The following table provides an overview of the properties a client needs to set on a message to register the command consumer for a device in addition to the [Standard Request Properties]({{< relref \"#standard-request-properties\" >}}).\n+\n+| Name                  | Mandatory | Location                 | AMQP Type | Description |\n+| :-------------------- | :-------: | :----------------------- | :-------- | :---------- |\n+| *subject*             | yes       | *properties*             | *string*  | MUST be set to `register-cmd-consumer`. |\n+| *adapter_instance_id* | yes       | *application-properties* | *string*  | The identifier of the protocol adapter instance that currently handles commands for the device or gateway identified by the *device_id* property. |\n+| *lifespan*            | no        | *application-properties* | *int*     | The lifespan of the mapping entry in seconds. After that period, the registration entry shall be treated as non-existent by the Command Router service component. A negative value, as well as an omitted property, is interpreted as an unlimited lifespan. |\n+\n+The body of the message SHOULD be empty and will be ignored if it is not.\n+\n+**Response Message Format**\n+\n+A response to a *register command consumer for device* request contains the [Standard Response Properties]({{< relref \"#standard-response-properties\" >}}).\n+\n+The response message's *status* property may contain the following codes:\n+\n+| Code  | Description |\n+| :---- | :---------- |\n+| *204* | OK, the command consumer registration entry for the device has been created or updated. |\n+| *400* | Bad Request, the command consumer registration entry for the device has not been created or updated due to invalid or missing data in the request. |\n+\n+Implementors of this API may return a *404* status code in order to indicate that no device with the given identifier exists for the given tenant. However, performing such a check is optional.\n+\n+For status codes indicating an error (codes in the `400 - 499` range) the message body MAY contain a detailed description of the error that occurred.\n+\n+## Unregister command consumer for device\n+\n+Clients use this command to *unregister* a command consumer for the given device. The consumer registration entry to be removed is identified by the provided protocol adapter instance handling command & control messages for a given device. The registration entry for the device is only removed, if the adapter instance identifier of the current registration entry matches the one given in the request.\n+\n+This API doesn't mandate checks on the validity of the given device in order not to introduce a dependency on the *Device Registration API*. However, implementations of this API may choose to perform such checks or impose a restriction on the overall amount of data that can be stored per tenant in order to protect against malicious requests.\n+\n+**Message Flow**\n+\n+\n+{{< figure src=\"unregister_cmd_consumer.svg\" title=\"Client unregisters the command consumer for a device\" alt=\"A client sends a request message for removing the consumer registration entry and receives a response containing a confirmation\" >}}\n+\n+**Request Message Format**\n+\n+The following table provides an overview of the properties a client needs to set on a message to remove the consumer registration entry for a device in addition to the [Standard Request Properties]({{< relref \"#standard-request-properties\" >}}).\n+\n+| Name                  | Mandatory | Location                 | AMQP Type | Description |\n+| :-------------------- | :-------: | :----------------------- | :-------- | :---------- |\n+| *subject*             | yes       | *properties*             | *string*  | MUST be set to `unregister-cmd-consumer`. |\n+| *adapter_instance_id* | yes       | *application-properties* | *string*  | The identifier of the protocol adapter instance to remove the registration entry for. Only if this adapter instance is currently associated with the device or gateway identified by the *device_id* property, the registration entry will be removed. |\n+\n+The body of the message SHOULD be empty and will be ignored if it is not.\n+\n+**Response Message Format**\n+\n+A response to a *unregister command consumer for device* request contains the [Standard Response Properties]({{< relref \"#standard-response-properties\" >}}).\n+\n+The response message's *status* property may contain the following codes:\n+\n+| Code  | Description |\n+| :---- | :---------- |\n+| *204* | OK, the command consumer registration entry for the device has been removed. |\n+| *400* | Bad Request, the request message does not contain all required properties. |\n+| *412* | Precondition failed, the registration entry for the device has not been removed because there is no command consumer registration entry matching the adapter instance assigned to the device. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322a4732f99e38164fc5f3939a08287f1504ed2b"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3NzM3OA==", "bodyText": "I think we can make the last sentence a little more explicit. How about\n\nFor a device that connects to the adapter directly instead of through a gateway, the value of this property MUST be the same as the value of the device_id application property.", "url": "https://github.com/eclipse/hono/pull/2280#discussion_r520377378", "createdAt": "2020-11-10T08:32:39Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/command-router/index.md", "diffHunk": "@@ -0,0 +1,174 @@\n+---\n+title: \"Command Router API Specification\"\n+linkTitle: \"Command Router API\"\n+weight: 425\n+resources:\n+  - src: preconditions.svg\n+  - src: register_cmd_consumer.svg\n+  - src: unregister_cmd_consumer.svg\n+  - src: set_last_known_gateway_success.svg\n+---\n+\n+The *Command Router API* is used by *Protocol Adapters* to configure the Command Router service component, enabling it to route command & control messages to the protocol adapters that the target devices are connected to.\n+<!--more-->\n+\n+The Command Router API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using an AMQP 1.0 client in order to invoke operations of the API as described in the following sections.\n+\n+<a name=\"preconditions\"></a>\n+## Preconditions for invoking the Command Router API\n+\n+1. Client has established an AMQP connection with the Command Router service.\n+1. Client has established an AMQP link in role *sender* on the connection using target address `cmd_router/${tenant_id}`. This link is used by the client to send request messages to the Command Router service.\n+1. Client has established an AMQP link in role *receiver* on the connection using source address `cmd_router/${tenant_id}/${reply-to}` where *reply-to* may be any arbitrary string chosen by the client. This link is used by the client to receive responses to the requests it has sent to the Command Router service. This link's source address is also referred to as the *reply-to* address for the request messages.\n+\n+{{< figure src=\"preconditions.svg\" alt=\"A client establishes an AMQP connection and the links required to invoke operations of the Command Router service\" title=\"Client connecting to Command Router service\" >}}\n+\n+## Register command consumer for device\n+\n+Clients use this command to *register* a consumer for command & control messages for a device, providing the protocol adapter instance that the given device or gateway is currently connected to.\n+\n+Clients can provide an optional `lifespan` parameter to make the registration entry expire after the given number of seconds. Note that implementations of this API have to support this feature, otherwise the Command Router service component might fail to correctly route command messages.\n+\n+This API doesn't mandate checks on the validity of the given device in order not to introduce a dependency on the *Device Registration API*. However, implementations of this API may choose to perform such checks or impose a restriction on the overall amount of data that can be stored per tenant in order to protect against malicious requests.\n+\n+**Message Flow**\n+\n+\n+{{< figure src=\"register_cmd_consumer.svg\" title=\"Client registers the command consumer for a device\" alt=\"A client sends a request message for registering the command consumer and receives a response containing a confirmation\" >}}\n+\n+**Request Message Format**\n+\n+The following table provides an overview of the properties a client needs to set on a message to register the command consumer for a device in addition to the [Standard Request Properties]({{< relref \"#standard-request-properties\" >}}).\n+\n+| Name                  | Mandatory | Location                 | AMQP Type | Description |\n+| :-------------------- | :-------: | :----------------------- | :-------- | :---------- |\n+| *subject*             | yes       | *properties*             | *string*  | MUST be set to `register-cmd-consumer`. |\n+| *adapter_instance_id* | yes       | *application-properties* | *string*  | The identifier of the protocol adapter instance that currently handles commands for the device or gateway identified by the *device_id* property. |\n+| *lifespan*            | no        | *application-properties* | *int*     | The lifespan of the mapping entry in seconds. After that period, the registration entry shall be treated as non-existent by the Command Router service component. A negative value, as well as an omitted property, is interpreted as an unlimited lifespan. |\n+\n+The body of the message SHOULD be empty and will be ignored if it is not.\n+\n+**Response Message Format**\n+\n+A response to a *register command consumer for device* request contains the [Standard Response Properties]({{< relref \"#standard-response-properties\" >}}).\n+\n+The response message's *status* property may contain the following codes:\n+\n+| Code  | Description |\n+| :---- | :---------- |\n+| *204* | OK, the command consumer registration entry for the device has been created or updated. |\n+| *400* | Bad Request, the command consumer registration entry for the device has not been created or updated due to invalid or missing data in the request. |\n+\n+Implementors of this API may return a *404* status code in order to indicate that no device with the given identifier exists for the given tenant. However, performing such a check is optional.\n+\n+For status codes indicating an error (codes in the `400 - 499` range) the message body MAY contain a detailed description of the error that occurred.\n+\n+## Unregister command consumer for device\n+\n+Clients use this command to *unregister* a command consumer for the given device. The consumer registration entry to be removed is identified by the provided protocol adapter instance handling command & control messages for a given device. The registration entry for the device is only removed, if the adapter instance identifier of the current registration entry matches the one given in the request.\n+\n+This API doesn't mandate checks on the validity of the given device in order not to introduce a dependency on the *Device Registration API*. However, implementations of this API may choose to perform such checks or impose a restriction on the overall amount of data that can be stored per tenant in order to protect against malicious requests.\n+\n+**Message Flow**\n+\n+\n+{{< figure src=\"unregister_cmd_consumer.svg\" title=\"Client unregisters the command consumer for a device\" alt=\"A client sends a request message for removing the consumer registration entry and receives a response containing a confirmation\" >}}\n+\n+**Request Message Format**\n+\n+The following table provides an overview of the properties a client needs to set on a message to remove the consumer registration entry for a device in addition to the [Standard Request Properties]({{< relref \"#standard-request-properties\" >}}).\n+\n+| Name                  | Mandatory | Location                 | AMQP Type | Description |\n+| :-------------------- | :-------: | :----------------------- | :-------- | :---------- |\n+| *subject*             | yes       | *properties*             | *string*  | MUST be set to `unregister-cmd-consumer`. |\n+| *adapter_instance_id* | yes       | *application-properties* | *string*  | The identifier of the protocol adapter instance to remove the registration entry for. Only if this adapter instance is currently associated with the device or gateway identified by the *device_id* property, the registration entry will be removed. |\n+\n+The body of the message SHOULD be empty and will be ignored if it is not.\n+\n+**Response Message Format**\n+\n+A response to a *unregister command consumer for device* request contains the [Standard Response Properties]({{< relref \"#standard-response-properties\" >}}).\n+\n+The response message's *status* property may contain the following codes:\n+\n+| Code  | Description |\n+| :---- | :---------- |\n+| *204* | OK, the command consumer registration entry for the device has been removed. |\n+| *400* | Bad Request, the request message does not contain all required properties. |\n+| *412* | Precondition failed, the registration entry for the device has not been removed because there is no command consumer registration entry matching the adapter instance assigned to the device. |\n+\n+Implementors of this API may return a *404* status code in order to indicate that no device with the given identifier exists for the given tenant. However, performing such a check is optional.\n+\n+For status codes indicating an error (codes in the `400 - 499` range) the message body MAY contain a detailed description of the error that occurred.\n+\n+## Set last known Gateway for Device\n+\n+Clients use this command to *set* the gateway that last acted on behalf of a given device.\n+\n+As this operation is invoked frequently by Hono's components, implementors may choose to keep this information in memory. This API doesn't mandate checks on the validity of the given device or gateway IDs in order not to introduce a dependency on the *Device Registration API*. However, implementations of this API may choose to perform such checks or impose a restriction on the overall amount of data that can be stored per tenant in order to protect against malicious requests.\n+\n+**Message Flow**\n+\n+\n+{{< figure src=\"set_last_known_gateway_success.svg\" title=\"Client sets the last known gateway for a device\" alt=\"A client sends a request message for setting the last known gateway and receives a response containing a confirmation\" >}}\n+\n+**Request Message Format**\n+\n+The following table provides an overview of the properties a client needs to set on a message to set the last known gateway for a device in addition to the [Standard Request Properties]({{< relref \"#standard-request-properties\" >}}).\n+\n+| Name         | Mandatory | Location                 | AMQP Type | Description |\n+| :----------- | :-------: | :----------------------- | :-------- | :---------- |\n+| *subject*    | yes       | *properties*             | *string*  | MUST be set to `set-last-gw`. |\n+| *gateway_id* | yes       | *application-properties* | *string*  | The identifier of the gateway that last acted on behalf of the device identified by the *device_id* property. If a device connects directly instead of through a gateway, the device's identifier MUST be specified here. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322a4732f99e38164fc5f3939a08287f1504ed2b"}, "originalPosition": 122}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "322a4732f99e38164fc5f3939a08287f1504ed2b", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/322a4732f99e38164fc5f3939a08287f1504ed2b", "committedDate": "2020-11-04T09:36:00Z", "message": "[#2029] Add Command Router API specification.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "a0297a8f22a7ceb86936d6682bd6b8a3be1fe2f5", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/a0297a8f22a7ceb86936d6682bd6b8a3be1fe2f5", "committedDate": "2020-11-10T09:42:33Z", "message": "[#2029] Add Command Router API specification."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MTIwODg2", "url": "https://github.com/eclipse/hono/pull/2280#pullrequestreview-527120886", "createdAt": "2020-11-10T11:45:13Z", "commit": {"oid": "a0297a8f22a7ceb86936d6682bd6b8a3be1fe2f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b66acf2e9f81f1dd9fef54fbd48b89486106f17", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/1b66acf2e9f81f1dd9fef54fbd48b89486106f17", "committedDate": "2020-11-11T08:14:02Z", "message": "[#2029] Add Command Router API specification.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0297a8f22a7ceb86936d6682bd6b8a3be1fe2f5", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/a0297a8f22a7ceb86936d6682bd6b8a3be1fe2f5", "committedDate": "2020-11-10T09:42:33Z", "message": "[#2029] Add Command Router API specification."}, "afterCommit": {"oid": "1b66acf2e9f81f1dd9fef54fbd48b89486106f17", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/1b66acf2e9f81f1dd9fef54fbd48b89486106f17", "committedDate": "2020-11-11T08:14:02Z", "message": "[#2029] Add Command Router API specification.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 424, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}