{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzUyNjcy", "number": 1936, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxMDowNVrOD447HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo0MTozNlrOD5sAnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTc5NDg1OnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Cache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxMDowNVrOGP2ZHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMToyNjo1N1rOGP8QRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3Mjk5MQ==", "bodyText": "what if any of the params are null?", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419272991", "createdAt": "2020-05-04T08:10:05Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Cache.java", "diffHunk": "@@ -61,6 +61,19 @@\n      */\n     Future<V> put(K key, V value, long lifespan, TimeUnit lifespanUnit);\n \n+    /**\n+     * Replaces the entry for a key only if currently mapped to a given value.\n+     *\n+     * @param key The key.\n+     * @param oldValue The value to overwrite.\n+     * @param newValue The value to store.\n+     * @param lifespan The lifespan of the entry. A negative value is interpreted as an unlimited lifespan.\n+     * @param lifespanUnit The time unit for the lifespan.\n+     * @return A succeeded future containing a boolean, indicating whether the value was replaced or not.\n+     *         A failed future if the value could not be stored in the cache.\n+     */\n+    Future<Boolean> replace(K key, V oldValue, V newValue, long lifespan, TimeUnit lifespanUnit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2OTAyOA==", "bodyText": "I've added checks and adapted the javadoc (also for the other methods).", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419369028", "createdAt": "2020-05-04T11:26:57Z", "author": {"login": "calohmn"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Cache.java", "diffHunk": "@@ -61,6 +61,19 @@\n      */\n     Future<V> put(K key, V value, long lifespan, TimeUnit lifespanUnit);\n \n+    /**\n+     * Replaces the entry for a key only if currently mapped to a given value.\n+     *\n+     * @param key The key.\n+     * @param oldValue The value to overwrite.\n+     * @param newValue The value to store.\n+     * @param lifespan The lifespan of the entry. A negative value is interpreted as an unlimited lifespan.\n+     * @param lifespanUnit The time unit for the lifespan.\n+     * @return A succeeded future containing a boolean, indicating whether the value was replaced or not.\n+     *         A failed future if the value could not be stored in the cache.\n+     */\n+    Future<Boolean> replace(K key, V oldValue, V newValue, long lifespan, TimeUnit lifespanUnit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3Mjk5MQ=="}, "originalCommit": {"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTgxMjM5OnYy", "diffSide": "RIGHT", "path": "site/documentation/content/api/device-connection/index.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxNTo1M1rOGP2jxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowNTowM1rOGP7qyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NTcxNg==", "bodyText": "can we please rename this parameter to update_only?", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419275716", "createdAt": "2020-05-04T08:15:53Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/device-connection/index.md", "diffHunk": "@@ -129,6 +129,7 @@ The following table provides an overview of the properties a client needs to set\n | *subject*             | yes       | *properties*             | *string*  | MUST be set to `set-cmd-handling-adapter-instance`. |\n | *adapter_instance_id* | yes       | *application-properties* | *string*  | The identifier of the protocol adapter instance that currently handles commands for the device or gateway identified by the *device_id* property. |\n | *lifespan*            | no        | *application-properties* | *int*     | The lifespan of the mapping entry in seconds. After that period, the mapping entry shall be treated as non-existent by the *Device Registration API* methods. A negative value, as well as an omitted property, is interpreted as an unlimited lifespan. |\n+| *only_update*         | no        | *application-properties* | *boolean* | If set to `true`, the command will only update an existing mapping entry with the given lifespan, provided such an entry with the given device id and adapter instance id exists. If the property is omitted or set to `false`, the mapping entry will be set regardless whether an entry with the given adapter instance id exists or not. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1OTQzMw==", "bodyText": "yes, I've changed that (also renamed the method parameter).", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419359433", "createdAt": "2020-05-04T11:05:03Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/api/device-connection/index.md", "diffHunk": "@@ -129,6 +129,7 @@ The following table provides an overview of the properties a client needs to set\n | *subject*             | yes       | *properties*             | *string*  | MUST be set to `set-cmd-handling-adapter-instance`. |\n | *adapter_instance_id* | yes       | *application-properties* | *string*  | The identifier of the protocol adapter instance that currently handles commands for the device or gateway identified by the *device_id* property. |\n | *lifespan*            | no        | *application-properties* | *int*     | The lifespan of the mapping entry in seconds. After that period, the mapping entry shall be treated as non-existent by the *Device Registration API* methods. A negative value, as well as an omitted property, is interpreted as an unlimited lifespan. |\n+| *only_update*         | no        | *application-properties* | *boolean* | If set to `true`, the command will only update an existing mapping entry with the given lifespan, provided such an entry with the given device id and adapter instance id exists. If the property is omitted or set to `false`, the mapping entry will be set regardless whether an entry with the given adapter instance id exists or not. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NTcxNg=="}, "originalCommit": {"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTgxODkzOnYy", "diffSide": "RIGHT", "path": "site/documentation/content/api/device-connection/index.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxNzo1NVrOGP2nwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo0NzozMFrOGQDz2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NjczNw==", "bodyText": "FMPOV this should be returned if no entry has been found for the given device ID, regardless of the value of update_only.\nWe should then expicitly list 412 as the value to be returned for update_only = true and a non-matching orig-value. I do not see why the registry implementation should return 404 or 412 in that case, given that we expect the registry to explicitly support this property anyway ...", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419276737", "createdAt": "2020-05-04T08:17:55Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/device-connection/index.md", "diffHunk": "@@ -141,9 +142,11 @@ The response message's *status* property may contain the following codes:\n | Code  | Description |\n | :---- | :---------- |\n | *204* | OK, the adapter instance for the device has been updated. |\n-| *400* | Bad Request, the command-handling adapter instance has not been updated due to invalid or missing data in the request. |\n+| *400* | Bad Request, the command-handling adapter instance has not been set or updated due to invalid or missing data in the request. |\n+| *404* | Not Found, entry to be updated was not found. This applies to requests with *only_update* set to `true`. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1OTI4Nw==", "bodyText": "FMPOV this should be returned if no entry has been found for the given device ID, regardless of the value of update_only.\n\nBut, whether an entry for the given device ID is found or not, only matters if update_only is true (if update_only is false, a new mapping entry with the device ID will just be created).\n\nWe should then expicitly list 412 as the value to be returned for update_only = true and a non-matching orig-value. I do not see why the registry implementation should return 404 or 412 in that case, given that we expect the registry to explicitly support this property anyway ...\n\nTwo things made me go for choosing 404 as the default for both the key-not-found and adapter-instance-not-matching cases here:\n\nthe removeCommandHandlingAdapterInstance command also requires the adapterInstanceId to match. For that command we have defined 404 as the default if no matching entry was found, and 412 as an optional alternative to 404.\na straightforward implementation might use a replace(key, oldValue, newValue) method here. With that, there is no distinction, whether an entry for the key wasn't found or whether the oldValue didn't match. In fact for the cache based implementation, I've used the corresponding cache.replaceAsync() method. (That could of course be changed to use cache.computeIfAbsentAsync where a distinction between return values can be made then.)\n\nTherefore, for the sake of keeping in sync with the other API methods and for making it easier for implementations (not requiring the key-not-found vs adapter-instance-not-matching distinction, which also isn't needed in the code using the API), I would rather keep the API definition as is.", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419359287", "createdAt": "2020-05-04T11:04:40Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/api/device-connection/index.md", "diffHunk": "@@ -141,9 +142,11 @@ The response message's *status* property may contain the following codes:\n | Code  | Description |\n | :---- | :---------- |\n | *204* | OK, the adapter instance for the device has been updated. |\n-| *400* | Bad Request, the command-handling adapter instance has not been updated due to invalid or missing data in the request. |\n+| *400* | Bad Request, the command-handling adapter instance has not been set or updated due to invalid or missing data in the request. |\n+| *404* | Not Found, entry to be updated was not found. This applies to requests with *only_update* set to `true`. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NjczNw=="}, "originalCommit": {"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTUyNQ==", "bodyText": "But, whether an entry for the given device ID is found or not, only matters if update_only is true (if update_only is false, a new mapping entry with the device ID will just be created).\n\ntrue, based on that it would probably make sense to never return 404 but to return 412 if update_only = true and either no entry for the given device ID exists at all or the expected value doesn't match.\n\nthe removeCommandHandlingAdapterInstance command also requires the adapterInstanceId to match. For that command we have defined 404 as the default if no matching entry was found, and 412 as an optional alternative to 404.\n\nmaybe we should change that as well. I don't really like the fact that a client needs to support both status codes but still doesn't really know what the problem is ...", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419399525", "createdAt": "2020-05-04T12:30:07Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/device-connection/index.md", "diffHunk": "@@ -141,9 +142,11 @@ The response message's *status* property may contain the following codes:\n | Code  | Description |\n | :---- | :---------- |\n | *204* | OK, the adapter instance for the device has been updated. |\n-| *400* | Bad Request, the command-handling adapter instance has not been updated due to invalid or missing data in the request. |\n+| *400* | Bad Request, the command-handling adapter instance has not been set or updated due to invalid or missing data in the request. |\n+| *404* | Not Found, entry to be updated was not found. This applies to requests with *only_update* set to `true`. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NjczNw=="}, "originalCommit": {"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0ODIxMQ==", "bodyText": "I would be fine with always returning 412 (and not having the distinction between the two cases).\nTo be consistent, I agree that removeCommandHandlingAdapterInstance should then be changed as well. I think, regarding compatibility, we can do this in 1.3, since \"412\" is already defined there as a possible return value.\nAnother thing would be changing the 404 status code for the optional \"device-doesn't-exist-for-tenant\" check in the set/remove operations. I would like to change that to 412 as well. But since setLastKnownGateway doesn't define 412 as possible return code as of now, I think we can only do this in Hono 2.0.\nTherefore I would keep the 404 as the common status code for the \"device-doesn't-exist-for-tenant\" check in all methods for now.", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419448211", "createdAt": "2020-05-04T13:46:32Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/api/device-connection/index.md", "diffHunk": "@@ -141,9 +142,11 @@ The response message's *status* property may contain the following codes:\n | Code  | Description |\n | :---- | :---------- |\n | *204* | OK, the adapter instance for the device has been updated. |\n-| *400* | Bad Request, the command-handling adapter instance has not been updated due to invalid or missing data in the request. |\n+| *400* | Bad Request, the command-handling adapter instance has not been set or updated due to invalid or missing data in the request. |\n+| *404* | Not Found, entry to be updated was not found. This applies to requests with *only_update* set to `true`. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NjczNw=="}, "originalCommit": {"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5MjgyNA==", "bodyText": "I've updated the documentation accordingly.\n(Changes concerning removeCommandHandlingAdapterInstance will go in a separate PR then.)", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419492824", "createdAt": "2020-05-04T14:47:30Z", "author": {"login": "calohmn"}, "path": "site/documentation/content/api/device-connection/index.md", "diffHunk": "@@ -141,9 +142,11 @@ The response message's *status* property may contain the following codes:\n | Code  | Description |\n | :---- | :---------- |\n | *204* | OK, the adapter instance for the device has been updated. |\n-| *400* | Bad Request, the command-handling adapter instance has not been updated due to invalid or missing data in the request. |\n+| *400* | Bad Request, the command-handling adapter instance has not been set or updated due to invalid or missing data in the request. |\n+| *404* | Not Found, entry to be updated was not found. This applies to requests with *only_update* set to `true`. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NjczNw=="}, "originalCommit": {"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA0NDg3OnYy", "diffSide": "RIGHT", "path": "site/documentation/content/api/device-connection/index.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODowMzozOVrOGQeiFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODowMzozOVrOGQeiFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzMDY0Ng==", "bodyText": "how about\n\nPrecondition failed, the adapter instance for the device has not been set or updated. This status is returned if the update_only property is set to true but no matching entry for the given device ID and adapter instance value exists.", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419930646", "createdAt": "2020-05-05T08:03:39Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/device-connection/index.md", "diffHunk": "@@ -140,8 +141,9 @@ The response message's *status* property may contain the following codes:\n \n | Code  | Description |\n | :---- | :---------- |\n-| *204* | OK, the adapter instance for the device has been updated. |\n-| *400* | Bad Request, the command-handling adapter instance has not been updated due to invalid or missing data in the request. |\n+| *204* | OK, the command-handling adapter instance for the device has been updated. |\n+| *400* | Bad Request, the adapter instance for the device has not been set or updated due to invalid or missing data in the request. |\n+| *412* | Precondition failed, the to be updated adapter instance entry for the device doesn't exist, or its adapter instance value doesn't match. This applies to requests with *update_only* set to `true`. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA3MTUzOnYy", "diffSide": "RIGHT", "path": "client/src/test/java/org/eclipse/hono/client/impl/ProtocolAdapterCommandConsumerFactoryImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxMToxM1rOGQeySA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxMToxM1rOGQeySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNDc5Mg==", "bodyText": "don't we expect the updateOnly param to be false here?", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419934792", "createdAt": "2020-05-05T08:11:13Z", "author": {"login": "sophokles73"}, "path": "client/src/test/java/org/eclipse/hono/client/impl/ProtocolAdapterCommandConsumerFactoryImplTest.java", "diffHunk": "@@ -187,7 +187,7 @@ public void testCreateCommandConsumerSucceeds(final VertxTestContext ctx) {\n                 ctx.verify(() -> {\n                     verify(connection).createReceiver(eq(tenantCommandAddress), eq(ProtonQoS.AT_LEAST_ONCE), any(), anyInt(),\n                             eq(false), any());\n-                    verify(devConClient).setCommandHandlingAdapterInstance(eq(deviceId), anyString(), any(), any());\n+                    verify(devConClient).setCommandHandlingAdapterInstance(eq(deviceId), anyString(), any(), anyBoolean(), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA3MjM3OnYy", "diffSide": "RIGHT", "path": "client/src/test/java/org/eclipse/hono/client/impl/ProtocolAdapterCommandConsumerFactoryImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxMToyOFrOGQeyzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxMToyOFrOGQeyzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNDkyNg==", "bodyText": "don't we expect the updateOnly param to be false here?", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419934926", "createdAt": "2020-05-05T08:11:28Z", "author": {"login": "sophokles73"}, "path": "client/src/test/java/org/eclipse/hono/client/impl/ProtocolAdapterCommandConsumerFactoryImplTest.java", "diffHunk": "@@ -211,7 +211,7 @@ public void testCreateTimeLimitedCommandConsumerSucceeds(final VertxTestContext\n             ctx.verify(() -> {\n                 verify(connection).createReceiver(eq(tenantCommandAddress), eq(ProtonQoS.AT_LEAST_ONCE), any(), anyInt(),\n                         eq(false), any());\n-                verify(devConClient).setCommandHandlingAdapterInstance(eq(deviceId), anyString(), any(), any());\n+                verify(devConClient).setCommandHandlingAdapterInstance(eq(deviceId), anyString(), any(), anyBoolean(), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA4MDgyOnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/deviceconnection/DelegatingDeviceConnectionAmqpEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxNDowMVrOGQe36Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxNDowMVrOGQe36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjIzMw==", "bodyText": "how about\nfinal boolean updateOnly = Optional.ofNullable(MessageHelper.getApplicationProperty(request.getApplicationProperties(), MessageHelper.APP_PROPERTY_UPDATE_ONLY, Boolean.class))\n  .orElse(false);", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419936233", "createdAt": "2020-05-05T08:14:01Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/deviceconnection/DelegatingDeviceConnectionAmqpEndpoint.java", "diffHunk": "@@ -241,6 +241,7 @@ public DelegatingDeviceConnectionAmqpEndpoint(final Vertx vertx, final S service\n         final String deviceId = MessageHelper.getDeviceId(request);\n         final String adapterInstanceId = MessageHelper.getApplicationProperty(request.getApplicationProperties(), MessageHelper.APP_PROPERTY_ADAPTER_INSTANCE_ID, String.class);\n         final Integer lifespanSecondsOrNull = MessageHelper.getApplicationProperty(request.getApplicationProperties(), MessageHelper.APP_PROPERTY_LIFESPAN, Integer.class);\n+        final Boolean updateOnlyOrNull = MessageHelper.getApplicationProperty(request.getApplicationProperties(), MessageHelper.APP_PROPERTY_UPDATE_ONLY, Boolean.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA5NjI0OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoxODo0MlrOGQfBXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDoyMjo1MVrOGQr2pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw==", "bodyText": "I think we need to also remove an expired existing value if the adapter instance doesn't match ...", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419938653", "createdAt": "2020-05-05T08:18:42Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -128,9 +129,26 @@ public MapBasedDeviceConnectionsConfigProperties getConfig() {\n         final int currentMapSize = adapterInstancesForTenantMap.size();\n         if (currentMapSize < getConfig().getMaxDevicesPerTenant()\n                 || (currentMapSize == getConfig().getMaxDevicesPerTenant() && adapterInstancesForTenantMap.containsKey(deviceId))) {\n-            adapterInstancesForTenantMap.put(deviceId,\n-                    new ExpiringValue<>(createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan)));\n-            result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+            final ExpiringValue<JsonObject> newValue = new ExpiringValue<>(\n+                    createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan));\n+            if (updateOnly) {\n+                final ExpiringValue<JsonObject> resultingValue = adapterInstancesForTenantMap\n+                        .computeIfPresent(deviceId, (key, oldValue) -> {\n+                            if (protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(oldValue.getValue()))) {\n+                                return newValue;\n+                            } else {\n+                                return oldValue;\n+                            }\n+                        });\n+                if (resultingValue != null && protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(resultingValue.getValue()))) {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+                } else {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_PRECON_FAILED);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MDE0Nw==", "bodyText": "@calohmn WDYT?", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420080147", "createdAt": "2020-05-05T12:45:49Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -128,9 +129,26 @@ public MapBasedDeviceConnectionsConfigProperties getConfig() {\n         final int currentMapSize = adapterInstancesForTenantMap.size();\n         if (currentMapSize < getConfig().getMaxDevicesPerTenant()\n                 || (currentMapSize == getConfig().getMaxDevicesPerTenant() && adapterInstancesForTenantMap.containsKey(deviceId))) {\n-            adapterInstancesForTenantMap.put(deviceId,\n-                    new ExpiringValue<>(createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan)));\n-            result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+            final ExpiringValue<JsonObject> newValue = new ExpiringValue<>(\n+                    createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan));\n+            if (updateOnly) {\n+                final ExpiringValue<JsonObject> resultingValue = adapterInstancesForTenantMap\n+                        .computeIfPresent(deviceId, (key, oldValue) -> {\n+                            if (protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(oldValue.getValue()))) {\n+                                return newValue;\n+                            } else {\n+                                return oldValue;\n+                            }\n+                        });\n+                if (resultingValue != null && protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(resultingValue.getValue()))) {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+                } else {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_PRECON_FAILED);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MzAwMg==", "bodyText": "Removing an expired entry here is something I don't quite understand - the removal of an expired entry is done under the hood by the Caffeine cache.\nHowever, I've found two other issues here: one (updated lifespan wasn't taken into account) is already fixed (along with an added test), the other (a failed update influences lifespan of existing entry) is something I'm currently working on.", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420083002", "createdAt": "2020-05-05T12:50:27Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -128,9 +129,26 @@ public MapBasedDeviceConnectionsConfigProperties getConfig() {\n         final int currentMapSize = adapterInstancesForTenantMap.size();\n         if (currentMapSize < getConfig().getMaxDevicesPerTenant()\n                 || (currentMapSize == getConfig().getMaxDevicesPerTenant() && adapterInstancesForTenantMap.containsKey(deviceId))) {\n-            adapterInstancesForTenantMap.put(deviceId,\n-                    new ExpiringValue<>(createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan)));\n-            result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+            final ExpiringValue<JsonObject> newValue = new ExpiringValue<>(\n+                    createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan));\n+            if (updateOnly) {\n+                final ExpiringValue<JsonObject> resultingValue = adapterInstancesForTenantMap\n+                        .computeIfPresent(deviceId, (key, oldValue) -> {\n+                            if (protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(oldValue.getValue()))) {\n+                                return newValue;\n+                            } else {\n+                                return oldValue;\n+                            }\n+                        });\n+                if (resultingValue != null && protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(resultingValue.getValue()))) {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+                } else {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_PRECON_FAILED);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjgyOA==", "bodyText": "But we are using a simple Map here for keeping the data, not a Caffeine Cache, or am I mistaken?", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420086828", "createdAt": "2020-05-05T12:56:41Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -128,9 +129,26 @@ public MapBasedDeviceConnectionsConfigProperties getConfig() {\n         final int currentMapSize = adapterInstancesForTenantMap.size();\n         if (currentMapSize < getConfig().getMaxDevicesPerTenant()\n                 || (currentMapSize == getConfig().getMaxDevicesPerTenant() && adapterInstancesForTenantMap.containsKey(deviceId))) {\n-            adapterInstancesForTenantMap.put(deviceId,\n-                    new ExpiringValue<>(createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan)));\n-            result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+            final ExpiringValue<JsonObject> newValue = new ExpiringValue<>(\n+                    createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan));\n+            if (updateOnly) {\n+                final ExpiringValue<JsonObject> resultingValue = adapterInstancesForTenantMap\n+                        .computeIfPresent(deviceId, (key, oldValue) -> {\n+                            if (protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(oldValue.getValue()))) {\n+                                return newValue;\n+                            } else {\n+                                return oldValue;\n+                            }\n+                        });\n+                if (resultingValue != null && protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(resultingValue.getValue()))) {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+                } else {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_PRECON_FAILED);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5MTQ0MQ==", "bodyText": "The adapterInstancesForTenantMap is a Caffeine Cache under the hood (using cache.asMap()).", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420091441", "createdAt": "2020-05-05T13:04:02Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -128,9 +129,26 @@ public MapBasedDeviceConnectionsConfigProperties getConfig() {\n         final int currentMapSize = adapterInstancesForTenantMap.size();\n         if (currentMapSize < getConfig().getMaxDevicesPerTenant()\n                 || (currentMapSize == getConfig().getMaxDevicesPerTenant() && adapterInstancesForTenantMap.containsKey(deviceId))) {\n-            adapterInstancesForTenantMap.put(deviceId,\n-                    new ExpiringValue<>(createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan)));\n-            result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+            final ExpiringValue<JsonObject> newValue = new ExpiringValue<>(\n+                    createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan));\n+            if (updateOnly) {\n+                final ExpiringValue<JsonObject> resultingValue = adapterInstancesForTenantMap\n+                        .computeIfPresent(deviceId, (key, oldValue) -> {\n+                            if (protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(oldValue.getValue()))) {\n+                                return newValue;\n+                            } else {\n+                                return oldValue;\n+                            }\n+                        });\n+                if (resultingValue != null && protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(resultingValue.getValue()))) {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+                } else {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_PRECON_FAILED);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMDk4MA==", "bodyText": "I see", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420110980", "createdAt": "2020-05-05T13:32:08Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -128,9 +129,26 @@ public MapBasedDeviceConnectionsConfigProperties getConfig() {\n         final int currentMapSize = adapterInstancesForTenantMap.size();\n         if (currentMapSize < getConfig().getMaxDevicesPerTenant()\n                 || (currentMapSize == getConfig().getMaxDevicesPerTenant() && adapterInstancesForTenantMap.containsKey(deviceId))) {\n-            adapterInstancesForTenantMap.put(deviceId,\n-                    new ExpiringValue<>(createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan)));\n-            result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+            final ExpiringValue<JsonObject> newValue = new ExpiringValue<>(\n+                    createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan));\n+            if (updateOnly) {\n+                final ExpiringValue<JsonObject> resultingValue = adapterInstancesForTenantMap\n+                        .computeIfPresent(deviceId, (key, oldValue) -> {\n+                            if (protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(oldValue.getValue()))) {\n+                                return newValue;\n+                            } else {\n+                                return oldValue;\n+                            }\n+                        });\n+                if (resultingValue != null && protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(resultingValue.getValue()))) {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+                } else {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_PRECON_FAILED);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE0ODkwMQ==", "bodyText": "2nd issue is fixed now.", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420148901", "createdAt": "2020-05-05T14:22:51Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -128,9 +129,26 @@ public MapBasedDeviceConnectionsConfigProperties getConfig() {\n         final int currentMapSize = adapterInstancesForTenantMap.size();\n         if (currentMapSize < getConfig().getMaxDevicesPerTenant()\n                 || (currentMapSize == getConfig().getMaxDevicesPerTenant() && adapterInstancesForTenantMap.containsKey(deviceId))) {\n-            adapterInstancesForTenantMap.put(deviceId,\n-                    new ExpiringValue<>(createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan)));\n-            result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+            final ExpiringValue<JsonObject> newValue = new ExpiringValue<>(\n+                    createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan));\n+            if (updateOnly) {\n+                final ExpiringValue<JsonObject> resultingValue = adapterInstancesForTenantMap\n+                        .computeIfPresent(deviceId, (key, oldValue) -> {\n+                            if (protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(oldValue.getValue()))) {\n+                                return newValue;\n+                            } else {\n+                                return oldValue;\n+                            }\n+                        });\n+                if (resultingValue != null && protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(resultingValue.getValue()))) {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+                } else {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_PRECON_FAILED);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, "originalCommit": {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODE2MzkzOnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo0MToxOFrOGRFz1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo0NzoyNFrOGRF8nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDE2NA==", "bodyText": "My understanding is that we do not want to change an existing value's lifespan on reading, right? Does currentDuration contain the object's remaining lifetime based on the lifetime determined at creation/update time?", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420574164", "createdAt": "2020-05-06T06:41:18Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -159,13 +171,13 @@ public long expireAfterCreate(final String key, final ExpiringValue<JsonObject>\n                     @Override\n                     public long expireAfterUpdate(final String key, final ExpiringValue<JsonObject> value,\n                             final long currentTime, final long currentDuration) {\n-                        return Long.MAX_VALUE;\n+                        return value.getLifespanNanos();\n                     }\n \n                     @Override\n                     public long expireAfterRead(final String key, final ExpiringValue<JsonObject> value,\n                             final long currentTime, final long currentDuration) {\n-                        return Long.MAX_VALUE;\n+                        return currentDuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5641b3c7c8fd008beda6e9c2ffdb120026437d4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NjQxNQ==", "bodyText": "Yes. As the javadoc states: The {@code currentDuration} may be returned to not modify the expiration time.. So using Long.MAX_VALUE was wrong here.", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420576415", "createdAt": "2020-05-06T06:47:24Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -159,13 +171,13 @@ public long expireAfterCreate(final String key, final ExpiringValue<JsonObject>\n                     @Override\n                     public long expireAfterUpdate(final String key, final ExpiringValue<JsonObject> value,\n                             final long currentTime, final long currentDuration) {\n-                        return Long.MAX_VALUE;\n+                        return value.getLifespanNanos();\n                     }\n \n                     @Override\n                     public long expireAfterRead(final String key, final ExpiringValue<JsonObject> value,\n                             final long currentTime, final long currentDuration) {\n-                        return Long.MAX_VALUE;\n+                        return currentDuration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDE2NA=="}, "originalCommit": {"oid": "b5641b3c7c8fd008beda6e9c2ffdb120026437d4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODE2NDc5OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo0MTozNlrOGRF0TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo1NjoyMFrOGRGJ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDI4NQ==", "bodyText": "java.util.function.Predicate ?", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420574285", "createdAt": "2020-05-06T06:41:36Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -300,6 +312,22 @@ private String getAdapterInstanceIdFromJson(final JsonObject adapterInstanceIdJs\n         return expiringValue != null ? expiringValue.getValue() : null;\n     }\n \n+    /**\n+     * Replaces the entry for a key only if the matching function applied to the current value returns {@code true}.\n+     */\n+    private static <V, K> boolean replaceIfMatching(final ConcurrentMap<K, V> map, final K key, final V newValue,\n+            final Function<? super V, Boolean> matchingFunction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5641b3c7c8fd008beda6e9c2ffdb120026437d4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3OTgxOQ==", "bodyText": "Yes, that's better.", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420579819", "createdAt": "2020-05-06T06:56:20Z", "author": {"login": "calohmn"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -300,6 +312,22 @@ private String getAdapterInstanceIdFromJson(final JsonObject adapterInstanceIdJs\n         return expiringValue != null ? expiringValue.getValue() : null;\n     }\n \n+    /**\n+     * Replaces the entry for a key only if the matching function applied to the current value returns {@code true}.\n+     */\n+    private static <V, K> boolean replaceIfMatching(final ConcurrentMap<K, V> map, final K key, final V newValue,\n+            final Function<? super V, Boolean> matchingFunction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDI4NQ=="}, "originalCommit": {"oid": "b5641b3c7c8fd008beda6e9c2ffdb120026437d4"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3378, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}