{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTY5MDkz", "number": 2328, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozNjo0MFrOE951oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0MDozMVrOE956QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ2MjA5OnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/EmbeddedCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozNjo0MFrOH61RgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozNjo0MFrOH61RgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1MjI4OQ==", "bodyText": "maybe this method should also be renamed to connectToCache?", "url": "https://github.com/eclipse/hono/pull/2328#discussion_r531452289", "createdAt": "2020-11-27T08:36:40Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/EmbeddedCache.java", "diffHunk": "@@ -104,10 +99,22 @@ protected boolean isStarted() {\n                 connecting.set(false);\n             });\n         } else {\n-            LOG.info(\"already trying to establish connection to data grid\");\n-            result.fail(\"already trying to establish connection to data grid\");\n+            LOG.info(\"already trying to establish connection to cache\");\n+            result.fail(\"already trying to establish connection to cache\");\n         }\n         return result.future();\n     }\n \n+    @Override\n+    public Future<JsonObject> checkForCacheAvailability() {\n+\n+        if (isStarted()) {\n+            return Future.succeededFuture(new JsonObject());\n+        } else {\n+            // try to (re-)establish connection\n+            connectToGrid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c339e841fe7741185684baa94e806f567f0a742"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ3MzkyOnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0MDozMVrOH61YzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1MjoxNlrOH654Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NDE1Nw==", "bodyText": "IMHO invoking the super class implementation is an anti pattern as you have no control over what is happening there.\nFMPOV withCache should be declared final and should be changed to invoke e.g. a postCacheAccess(Handler<AsyncResult<?>>) method with the outcome of the cache access. Subclasses can then override this method or not. But its purpose is well defined in any case ...", "url": "https://github.com/eclipse/hono/pull/2328#discussion_r531454157", "createdAt": "2020-11-27T08:40:31Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -127,4 +145,80 @@ protected boolean isStarted() {\n         });\n     }\n \n+    @Override\n+    protected <T> Future<T> withCache(\n+            final Function<org.infinispan.commons.api.BasicCache<K, V>, CompletionStage<T>> futureSupplier) {\n+        return super.withCache(futureSupplier)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c339e841fe7741185684baa94e806f567f0a742"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNzc2Mg==", "bodyText": "Yes, that's better. I've changed it accordingly.", "url": "https://github.com/eclipse/hono/pull/2328#discussion_r531527762", "createdAt": "2020-11-27T10:52:16Z", "author": {"login": "calohmn"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -127,4 +145,80 @@ protected boolean isStarted() {\n         });\n     }\n \n+    @Override\n+    protected <T> Future<T> withCache(\n+            final Function<org.infinispan.commons.api.BasicCache<K, V>, CompletionStage<T>> futureSupplier) {\n+        return super.withCache(futureSupplier)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NDE1Nw=="}, "originalCommit": {"oid": "1c339e841fe7741185684baa94e806f567f0a742"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2913, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}