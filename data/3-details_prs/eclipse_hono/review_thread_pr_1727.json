{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NDQ3MzY2", "number": 1727, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDo0MjoxOVrODfkkHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyNDo1OVrODf7QNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDMxNTE2OnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDo0MjoxOVrOFpWXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMToxMDoxNFrOFpzPkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMjQ0MA==", "bodyText": "I find having another cache abstraction on top of the existing one a bit of over-complication. We have an abstraction in enmasse of CacheProvider, which adds necessary cache handling but then services use infinispan interfaces directly.\nhttps://github.com/EnMasseProject/enmasse/blob/master/iot/iot-infinispan-base/src/main/java/io/enmasse/iot/infinispan/cache/AbstractCacheProvider.java\nMaybe at some point we can align two implementations more.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r378902440", "createdAt": "2020-02-13T14:42:19Z", "author": {"login": "dejanb"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.hono.client.ConnectionLifecycle;\n+import org.eclipse.hono.client.DisconnectListener;\n+import org.eclipse.hono.client.ReconnectListener;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.commons.api.BasicCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A HotrodCache.\n+ *\n+ * @param <K> The type of keys used by the cache.\n+ * @param <V> The type of values stored in the cache.\n+ */\n+public final class HotrodCache<K, V> implements ConnectionLifecycle<HotrodCache<K, V>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwMzU2OA==", "bodyText": "The HotrodCache is adding the connection checking capability that we need for the readiness and liveness checks. Apart from that, it doesn't have much value. But we do need these checks in multiple places so I thought it would be a good idea to have them implemented in a single place.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379003568", "createdAt": "2020-02-13T17:17:57Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.hono.client.ConnectionLifecycle;\n+import org.eclipse.hono.client.DisconnectListener;\n+import org.eclipse.hono.client.ReconnectListener;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.commons.api.BasicCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A HotrodCache.\n+ *\n+ * @param <K> The type of keys used by the cache.\n+ * @param <V> The type of values stored in the cache.\n+ */\n+public final class HotrodCache<K, V> implements ConnectionLifecycle<HotrodCache<K, V>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMjQ0MA=="}, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NTUwNA==", "bodyText": "Yeah, we created some separate components for infinispan registry that does the same. The only thing here is that this abstraction now \"narrows\" the original cache api, which the introduce one more thing to maintain going forward.\nMaybe another topic for F2F at BCX to see if we can get two implementations more inlined. And maintained at one place.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379375504", "createdAt": "2020-02-14T11:10:14Z", "author": {"login": "dejanb"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.hono.client.ConnectionLifecycle;\n+import org.eclipse.hono.client.DisconnectListener;\n+import org.eclipse.hono.client.ReconnectListener;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.commons.api.BasicCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A HotrodCache.\n+ *\n+ * @param <K> The type of keys used by the cache.\n+ * @param <V> The type of values stored in the cache.\n+ */\n+public final class HotrodCache<K, V> implements ConnectionLifecycle<HotrodCache<K, V>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMjQ0MA=="}, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDMxNjA2OnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDo0MjozMFrOFpWYMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo1MDozN1rOFp0McA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMjU3Nw==", "bodyText": "I'm not sure this module should be the \"root\" one of the whole Hono project. I'm not sure yet what would be the best place for it. Maybe put it in the \"client\" one, or as a part of the service implementation. Or even refactor the client one to have submodules like adapters and services.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r378902577", "createdAt": "2020-02-13T14:42:30Z", "author": {"login": "dejanb"}, "path": "client-device-connection-infinispan/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNjc5Mw==", "bodyText": "We definitely need to refactor the client module. For the time being, I did not want to put it in there because it has a dependency on service-base, which client doesn't have so far. But I agree, this is far from optimal and we might be able to come up with a better layout if we move some of the more generic interfaces from service-base to core. Maybe we can talk about this next week at BCX.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379006793", "createdAt": "2020-02-13T17:23:55Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMjU3Nw=="}, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NTgzMw==", "bodyText": "Sure. The only concern is that once we release with the module having it's maven coordinates defined. Later changes would be braking.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379375833", "createdAt": "2020-02-14T11:11:02Z", "author": {"login": "dejanb"}, "path": "client-device-connection-infinispan/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMjU3Nw=="}, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM5MTA4OA==", "bodyText": "This module is only used by the protocol adapters anyway so I do not see a big issue there.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379391088", "createdAt": "2020-02-14T11:50:37Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMjU3Nw=="}, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDMyMDMyOnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDo0MzoyNFrOFpWaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMToxMjoxNVrOFpzSxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMzIwMg==", "bodyText": "Why not use RemoteCache or AdvanceCache interfaces and then use \"async\" variant of the calls instead of handling this manually?", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r378903202", "createdAt": "2020-02-13T14:43:24Z", "author": {"login": "dejanb"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.hono.client.ConnectionLifecycle;\n+import org.eclipse.hono.client.DisconnectListener;\n+import org.eclipse.hono.client.ReconnectListener;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.commons.api.BasicCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A HotrodCache.\n+ *\n+ * @param <K> The type of keys used by the cache.\n+ * @param <V> The type of values stored in the cache.\n+ */\n+public final class HotrodCache<K, V> implements ConnectionLifecycle<HotrodCache<K, V>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(HotrodCache.class);\n+\n+    private final AtomicBoolean connecting = new AtomicBoolean(false);\n+    private final Vertx vertx;\n+    private final RemoteCacheManager cacheManager;\n+    private final String cacheName;\n+    private final K connectionCheckKey;\n+    private final V connectionCheckValue;\n+\n+    private RemoteCache<K, V> cache;\n+\n+    /**\n+     * @param vertx The vert.x instance to run on.\n+     * @param cacheManager The connection to the remote cache.\n+     * @param name The name of the (remote) cache.\n+     * @param connectionCheckKey The key to use for checking the connection\n+     *                           to the data grid.\n+     * @param connectionCheckValue The value to use for checking the connection\n+     *                           to the data grid.\n+     */\n+    public HotrodCache(\n+            final Vertx vertx,\n+            final RemoteCacheManager cacheManager,\n+            final String name,\n+            final K connectionCheckKey,\n+            final V connectionCheckValue) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+        this.cacheManager = Objects.requireNonNull(cacheManager);\n+        this.cacheName = Objects.requireNonNull(name);\n+        this.connectionCheckKey = Objects.requireNonNull(connectionCheckKey);\n+        this.connectionCheckValue = Objects.requireNonNull(connectionCheckValue);\n+    }\n+\n+    public BasicCache<K, V> getCache() {\n+        return cache;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Future<HotrodCache<K, V>> connect() {\n+        return connectToGrid().map(ok -> this);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Future<Void> isConnected() {\n+        return checkForCacheAvailability().mapEmpty();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void disconnect() {\n+        disconnect(r -> {});\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void disconnect(final Handler<AsyncResult<Void>> completionHandler) {\n+\n+        vertx.executeBlocking(r -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNDYxOA==", "bodyText": "I originally had that but the code is not much different because you still need to adapt the standard Java CompletableFuture to vert.x Promise ...", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379004618", "createdAt": "2020-02-13T17:19:53Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.hono.client.ConnectionLifecycle;\n+import org.eclipse.hono.client.DisconnectListener;\n+import org.eclipse.hono.client.ReconnectListener;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.commons.api.BasicCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A HotrodCache.\n+ *\n+ * @param <K> The type of keys used by the cache.\n+ * @param <V> The type of values stored in the cache.\n+ */\n+public final class HotrodCache<K, V> implements ConnectionLifecycle<HotrodCache<K, V>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(HotrodCache.class);\n+\n+    private final AtomicBoolean connecting = new AtomicBoolean(false);\n+    private final Vertx vertx;\n+    private final RemoteCacheManager cacheManager;\n+    private final String cacheName;\n+    private final K connectionCheckKey;\n+    private final V connectionCheckValue;\n+\n+    private RemoteCache<K, V> cache;\n+\n+    /**\n+     * @param vertx The vert.x instance to run on.\n+     * @param cacheManager The connection to the remote cache.\n+     * @param name The name of the (remote) cache.\n+     * @param connectionCheckKey The key to use for checking the connection\n+     *                           to the data grid.\n+     * @param connectionCheckValue The value to use for checking the connection\n+     *                           to the data grid.\n+     */\n+    public HotrodCache(\n+            final Vertx vertx,\n+            final RemoteCacheManager cacheManager,\n+            final String name,\n+            final K connectionCheckKey,\n+            final V connectionCheckValue) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+        this.cacheManager = Objects.requireNonNull(cacheManager);\n+        this.cacheName = Objects.requireNonNull(name);\n+        this.connectionCheckKey = Objects.requireNonNull(connectionCheckKey);\n+        this.connectionCheckValue = Objects.requireNonNull(connectionCheckValue);\n+    }\n+\n+    public BasicCache<K, V> getCache() {\n+        return cache;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Future<HotrodCache<K, V>> connect() {\n+        return connectToGrid().map(ok -> this);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Future<Void> isConnected() {\n+        return checkForCacheAvailability().mapEmpty();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void disconnect() {\n+        disconnect(r -> {});\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void disconnect(final Handler<AsyncResult<Void>> completionHandler) {\n+\n+        vertx.executeBlocking(r -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMzIwMg=="}, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NjMyNQ==", "bodyText": "OK, makes sense.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379376325", "createdAt": "2020-02-14T11:12:15Z", "author": {"login": "dejanb"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCache.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.hono.client.ConnectionLifecycle;\n+import org.eclipse.hono.client.DisconnectListener;\n+import org.eclipse.hono.client.ReconnectListener;\n+import org.eclipse.hono.client.ServerErrorException;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.commons.api.BasicCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A HotrodCache.\n+ *\n+ * @param <K> The type of keys used by the cache.\n+ * @param <V> The type of values stored in the cache.\n+ */\n+public final class HotrodCache<K, V> implements ConnectionLifecycle<HotrodCache<K, V>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(HotrodCache.class);\n+\n+    private final AtomicBoolean connecting = new AtomicBoolean(false);\n+    private final Vertx vertx;\n+    private final RemoteCacheManager cacheManager;\n+    private final String cacheName;\n+    private final K connectionCheckKey;\n+    private final V connectionCheckValue;\n+\n+    private RemoteCache<K, V> cache;\n+\n+    /**\n+     * @param vertx The vert.x instance to run on.\n+     * @param cacheManager The connection to the remote cache.\n+     * @param name The name of the (remote) cache.\n+     * @param connectionCheckKey The key to use for checking the connection\n+     *                           to the data grid.\n+     * @param connectionCheckValue The value to use for checking the connection\n+     *                           to the data grid.\n+     */\n+    public HotrodCache(\n+            final Vertx vertx,\n+            final RemoteCacheManager cacheManager,\n+            final String name,\n+            final K connectionCheckKey,\n+            final V connectionCheckValue) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+        this.cacheManager = Objects.requireNonNull(cacheManager);\n+        this.cacheName = Objects.requireNonNull(name);\n+        this.connectionCheckKey = Objects.requireNonNull(connectionCheckKey);\n+        this.connectionCheckValue = Objects.requireNonNull(connectionCheckValue);\n+    }\n+\n+    public BasicCache<K, V> getCache() {\n+        return cache;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Future<HotrodCache<K, V>> connect() {\n+        return connectToGrid().map(ok -> this);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Future<Void> isConnected() {\n+        return checkForCacheAvailability().mapEmpty();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void disconnect() {\n+        disconnect(r -> {});\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void disconnect(final Handler<AsyncResult<Void>> completionHandler) {\n+\n+        vertx.executeBlocking(r -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMzIwMg=="}, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzc5ODUzOnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/DeviceConnectionInfoCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDoxODoyMVrOFp3-mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDoxODoyMVrOFp3-mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1MzA4Mw==", "bodyText": "This name very much implies there being only one cache for the device connection data. However, for #1272 there will be other data added (mapping between device id and id of the protocol adapter instance that has a command consumer for that device). I would rather put this data in a separate Infinispan cache. So then there would be 2 Infinispan caches used for device connection data.\nSo, for now the name is Ok, for #1272 I think it will better be renamed to something like LastKnownGatewayInfoCache.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379453083", "createdAt": "2020-02-14T14:18:21Z", "author": {"login": "calohmn"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/DeviceConnectionInfoCache.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A repository for keeping connection information about devices.\n+ *\n+ */\n+public interface DeviceConnectionInfoCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzk4NTc3OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxMTo0NVrOFp5xfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxMTo0NVrOFp5xfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MjQ5NQ==", "bodyText": "I think the type parameter T should better be renamed so that it doesn't hide the T parameter of the enclosing class.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379482495", "createdAt": "2020-02-14T15:11:45Z", "author": {"login": "calohmn"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -719,8 +744,9 @@ protected void doStop(final Promise<Void> stopPromise) {\n      *         connection cannot be established.\n      * @throws NullPointerException if serviceName is {@code null}.\n      * @throws IllegalArgumentException if factory is {@code null}.\n+     * @param <T> The type of connection that the factory uses.\n      */\n-    protected final Future<HonoConnection> connectToService(final ConnectionLifecycle<HonoConnection> factory, final String serviceName) {\n+    protected final <T> Future<T> connectToService(final ConnectionLifecycle<T> factory, final String serviceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzk4NzE1OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxMjowOFrOFp5yWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxMjowOFrOFp5yWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MjcxNA==", "bodyText": "I think the type parameter T should better be renamed so that it doesn't hide the T parameter of the enclosing class.", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379482714", "createdAt": "2020-02-14T15:12:08Z", "author": {"login": "calohmn"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -738,12 +764,13 @@ protected void doStop(final Promise<Void> stopPromise) {\n      *         connection cannot be established.\n      * @throws NullPointerException if serviceName is {@code null}.\n      * @throws IllegalArgumentException if factory is {@code null}.\n+     * @param <T> The type of connection that the factory uses.\n      */\n-    protected final Future<HonoConnection> connectToService(\n-            final ConnectionLifecycle<HonoConnection> factory,\n+    protected final <T> Future<T> connectToService(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzk5MzQzOnYy", "diffSide": "RIGHT", "path": "services/device-connection/src/main/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxMzo1OVrOFp52ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxMzo1OVrOFp52ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4Mzc0OQ==", "bodyText": "final?", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379483749", "createdAt": "2020-02-14T15:13:59Z", "author": {"login": "calohmn"}, "path": "services/device-connection/src/main/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionService.java", "diffHunk": "@@ -46,100 +37,16 @@\n  */\n public class RemoteCacheBasedDeviceConnectionService extends EventBusDeviceConnectionAdapter implements DeviceConnectionService, HealthCheckProvider {\n \n-    private static final String CACHE_NAME = \"device-connection\";\n-\n-    private RemoteCacheContainer cacheManager;\n-    private BasicCache<String, String> cache;\n-    private AtomicBoolean connecting = new AtomicBoolean(false);\n+    private DeviceConnectionInfoCache cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODAzMjUyOnYy", "diffSide": "RIGHT", "path": "adapters/amqp-vertx/src/main/resources/logback-spring.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyNDo1OVrOFp6Ong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyNDo1OVrOFp6Ong==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4OTk1MA==", "bodyText": "How about adding the added logger definitions also to the other adapters?", "url": "https://github.com/eclipse/hono/pull/1727#discussion_r379489950", "createdAt": "2020-02-14T15:24:59Z", "author": {"login": "calohmn"}, "path": "adapters/amqp-vertx/src/main/resources/logback-spring.xml", "diffHunk": "@@ -41,6 +42,7 @@\n     <logger name=\"org.eclipse.hono.client\" level=\"DEBUG\"/>\n     <logger name=\"org.eclipse.hono.client.impl.AbstractRequestResponseClient\" level=\"DEBUG\"/>\n     <logger name=\"org.eclipse.hono.connection\" level=\"DEBUG\"/>\n+    <logger name=\"org.eclipse.hono.deviceconnection.infinispan.client\" level=\"DEBUG\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd15f72ebe5ca45debcd2b54169b5d286c8903fd"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3408, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}