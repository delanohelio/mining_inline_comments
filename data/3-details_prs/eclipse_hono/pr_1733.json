{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MjIzNTIw", "number": 1733, "title": "[#1346] Remove event bus from tenant management endpoint", "bodyText": "First stab at converting Tenant API to direct implementation. Note that this is merely conversion of existing code. I think we can do more work in aligning and improving implementation across services, but I would leave that for the separate PR considering the time we have for the release", "createdAt": "2020-01-30T18:32:27Z", "url": "https://github.com/eclipse/hono/pull/1733", "merged": true, "mergeCommit": {"oid": "213ab301844b4d09228d85b1484cc4976fd9f084"}, "closed": true, "closedAt": "2020-02-10T16:50:12Z", "author": {"login": "dejanb"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_qelxgFqTM1MTMzNjg2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcC__K-gFqTM1NjA5MzkwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzM2ODYx", "url": "https://github.com/eclipse/hono/pull/1733#pullrequestreview-351336861", "createdAt": "2020-01-31T07:50:11Z", "commit": {"oid": "221983eef30c39f53a5266d1312aaf4e2fd142d2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzo1MDoxMlrOFkDkCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzo1ODoyMlrOFkDsyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1MTQzMw==", "bodyText": "I do not think that this is true ..", "url": "https://github.com/eclipse/hono/pull/1733#discussion_r373351433", "createdAt": "2020-01-31T07:50:12Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.Util;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing tenant information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/tenant/\">Tenant API</a>.\n+ * It receives HTTP requests representing operation invocations and sends them to an address on the vertx\n+ * event bus for processing. The outcome is then returned to the peer in the HTTP response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "221983eef30c39f53a5266d1312aaf4e2fd142d2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1MzY3NA==", "bodyText": "according to the HTTP Management API, the request body is required. However, none of its properties are mandatory, so I wonder why that is. The user guide posts an empty request for creating a Tenant. The existing implementation does not require a request body. FMPOV we need to do some tidying up before we can proceed.", "url": "https://github.com/eclipse/hono/pull/1733#discussion_r373353674", "createdAt": "2020-01-31T07:58:22Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.Util;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing tenant information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/tenant/\">Tenant API</a>.\n+ * It receives HTTP requests representing operation invocations and sends them to an address on the vertx\n+ * event bus for processing. The outcome is then returned to the peer in the HTTP response.\n+ */\n+public abstract class AbstractTenantManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+    private static final String SPAN_NAME_GET_TENANT = \"get Tenant from management API\";\n+    private static final String SPAN_NAME_CREATE_TENANT = \"create Tenant from management API\";\n+    private static final String SPAN_NAME_UPDATE_TENANT = \"update Tenant from management API\";\n+    private static final String SPAN_NAME_REMOVE_TENANT= \"remove Tenant from management API\";\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractTenantManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    @Override\n+    protected String getEventBusAddress() {\n+        return RegistryManagementConstants.EVENT_BUS_ADDRESS_TENANT_MANAGEMENT_IN;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return String.format(\"%s/%s\",\n+                RegistryManagementConstants.API_VERSION,\n+                RegistryManagementConstants.TENANT_HTTP_ENDPOINT);\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String path = String.format(\"/%s\", getName());\n+        final String pathWithTenant = String.format(\"/%s/:%s\", getName(), PARAM_TENANT_ID);\n+\n+        // Add CORS handler\n+        router.route(path).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.POST)));\n+        router.route(pathWithTenant).handler(createDefaultCorsHandler(config.getCorsAllowedOrigin()));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // ADD tenant with auto-generated ID\n+        router.post(path).handler(bodyHandler);\n+        router.post(path).handler(this::extractOptionalJsonPayload);\n+        router.post(path).handler(this::createTenant);\n+\n+        // ADD tenant\n+        router.post(pathWithTenant).handler(bodyHandler);\n+        router.post(pathWithTenant).handler(this::extractOptionalJsonPayload);\n+        router.post(pathWithTenant).handler(this::updatePayloadWithTenantId);\n+        router.post(pathWithTenant).handler(this::createTenant);\n+\n+        // GET tenant\n+        router.get(pathWithTenant).handler(this::getTenant);\n+\n+        // UPDATE tenant\n+        router.put(pathWithTenant).handler(bodyHandler);\n+        router.put(pathWithTenant).handler(this::extractRequiredJsonPayload);\n+        router.put(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenant).handler(this::updateTenant);\n+\n+        // REMOVE tenant\n+        router.delete(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.delete(pathWithTenant).handler(this::deleteTenant);\n+    }\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract TenantManagementService getService();\n+\n+    /**\n+     * Check that the tenantId value is not blank then\n+     * update the payload (that was put to the RoutingContext ctx with the\n+     * key {@link #KEY_REQUEST_BODY}) with the tenant value retrieved from the RoutingContext.\n+     * The tenantId value is associated with the key {@link RegistryManagementConstants#FIELD_PAYLOAD_TENANT_ID}.\n+     *\n+     * @param ctx The routing context to retrieve the JSON request body from.\n+     */\n+    protected void updatePayloadWithTenantId(final RoutingContext ctx) {\n+\n+        final JsonObject payload = ctx.get(KEY_REQUEST_BODY);\n+        final String tenantId = getTenantIdFromContext(ctx);\n+\n+        if (tenantId.isBlank()) {\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST,\n+                    String.format(\"'%s' param cannot be empty\", RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID)));\n+        }\n+\n+        payload.put(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, tenantId);\n+        ctx.put(KEY_REQUEST_BODY, payload);\n+        ctx.next();\n+    }\n+\n+    private String getTenantIdFromContext(final RoutingContext ctx) {\n+        final JsonObject payload = ctx.get(KEY_REQUEST_BODY);\n+        return Optional.ofNullable(getTenantParam(ctx)).orElse(getTenantParamFromPayload(payload));\n+    }\n+\n+    private void createTenant(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_CREATE_TENANT, TracingHandler.serverSpanContext(ctx), tracer, getClass().getSimpleName());\n+\n+        final String tenantId = getRequestParam(PARAM_TENANT_ID, ctx, span, true);\n+\n+        final JsonObject payload = ctx.get(KEY_REQUEST_BODY);\n+        if (payload == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "221983eef30c39f53a5266d1312aaf4e2fd142d2"}, "originalPosition": 162}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "221983eef30c39f53a5266d1312aaf4e2fd142d2", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/221983eef30c39f53a5266d1312aaf4e2fd142d2", "committedDate": "2020-01-30T18:30:23Z", "message": "[#1346] Remove event bus from tenant management endpoint"}, "afterCommit": {"oid": "b1784369a1dc3ca81ef9cd07c41d21c4c569e3c1", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/b1784369a1dc3ca81ef9cd07c41d21c4c569e3c1", "committedDate": "2020-01-31T15:30:37Z", "message": "[#1346] Remove event bus from tenant management endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1784369a1dc3ca81ef9cd07c41d21c4c569e3c1", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/b1784369a1dc3ca81ef9cd07c41d21c4c569e3c1", "committedDate": "2020-01-31T15:30:37Z", "message": "[#1346] Remove event bus from tenant management endpoint"}, "afterCommit": {"oid": "95ff3f78ef13cad0cd676db8672c5ddb52d96cd4", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/95ff3f78ef13cad0cd676db8672c5ddb52d96cd4", "committedDate": "2020-01-31T15:44:34Z", "message": "[#1346] Remove event bus from tenant management endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjA2OTc1", "url": "https://github.com/eclipse/hono/pull/1733#pullrequestreview-351606975", "createdAt": "2020-01-31T16:04:51Z", "commit": {"oid": "95ff3f78ef13cad0cd676db8672c5ddb52d96cd4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjowNDo1MVrOFkQDLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjowNDo1MVrOFkQDLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU1NjAxMw==", "bodyText": "Maybe this can moved to AbstractHttpEndpoint as the other endpoints do the same check ?", "url": "https://github.com/eclipse/hono/pull/1733#discussion_r373556013", "createdAt": "2020-01-31T16:04:51Z", "author": {"login": "jbtrystram"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.Util;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing tenant information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/tenant/\">Tenant API</a>.\n+ * It receives HTTP requests representing operation invocations and executes the matching service implementation methods.\n+ * The outcome is then returned to the peer in the HTTP response.\n+ */\n+public abstract class AbstractTenantManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+    private static final String SPAN_NAME_GET_TENANT = \"get Tenant from management API\";\n+    private static final String SPAN_NAME_CREATE_TENANT = \"create Tenant from management API\";\n+    private static final String SPAN_NAME_UPDATE_TENANT = \"update Tenant from management API\";\n+    private static final String SPAN_NAME_REMOVE_TENANT= \"remove Tenant from management API\";\n+\n+    private static final String TENANT_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+            RegistryManagementConstants.API_VERSION,\n+            RegistryManagementConstants.TENANT_HTTP_ENDPOINT);\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractTenantManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return TENANT_MANAGEMENT_ENDPOINT_NAME;\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String path = String.format(\"/%s\", getName());\n+        final String pathWithTenant = String.format(\"/%s/:%s\", getName(), PARAM_TENANT_ID);\n+\n+        // Add CORS handler\n+        router.route(path).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.POST)));\n+        router.route(pathWithTenant).handler(createDefaultCorsHandler(config.getCorsAllowedOrigin()));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // ADD tenant with auto-generated ID\n+        router.post(path).handler(bodyHandler);\n+        router.post(path).handler(this::extractOptionalJsonPayload);\n+        router.post(path).handler(this::createTenant);\n+\n+        // ADD tenant\n+        router.post(pathWithTenant).handler(bodyHandler);\n+        router.post(pathWithTenant).handler(this::extractOptionalJsonPayload);\n+        router.post(pathWithTenant).handler(this::updatePayloadWithTenantId);\n+        router.post(pathWithTenant).handler(this::createTenant);\n+\n+        // GET tenant\n+        router.get(pathWithTenant).handler(this::getTenant);\n+\n+        // UPDATE tenant\n+        router.put(pathWithTenant).handler(bodyHandler);\n+        router.put(pathWithTenant).handler(this::extractRequiredJsonPayload);\n+        router.put(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenant).handler(this::updateTenant);\n+\n+        // REMOVE tenant\n+        router.delete(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.delete(pathWithTenant).handler(this::deleteTenant);\n+    }\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract TenantManagementService getService();\n+\n+    /**\n+     * Check that the tenantId value is not blank then\n+     * update the payload (that was put to the RoutingContext ctx with the\n+     * key {@link #KEY_REQUEST_BODY}) with the tenant value retrieved from the RoutingContext.\n+     * The tenantId value is associated with the key {@link RegistryManagementConstants#FIELD_PAYLOAD_TENANT_ID}.\n+     *\n+     * @param ctx The routing context to retrieve the JSON request body from.\n+     */\n+    protected void updatePayloadWithTenantId(final RoutingContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95ff3f78ef13cad0cd676db8672c5ddb52d96cd4"}, "originalPosition": 140}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95ff3f78ef13cad0cd676db8672c5ddb52d96cd4", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/95ff3f78ef13cad0cd676db8672c5ddb52d96cd4", "committedDate": "2020-01-31T15:44:34Z", "message": "[#1346] Remove event bus from tenant management endpoint"}, "afterCommit": {"oid": "7084d459c720c0e036267e29f1bda1d33d95275f", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/7084d459c720c0e036267e29f1bda1d33d95275f", "committedDate": "2020-01-31T16:17:12Z", "message": "[#1346] Remove event bus from tenant management endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTY2OTY2", "url": "https://github.com/eclipse/hono/pull/1733#pullrequestreview-352166966", "createdAt": "2020-02-03T10:51:19Z", "commit": {"oid": "7084d459c720c0e036267e29f1bda1d33d95275f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo1MToxOVrOFktWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTowMjowNlrOFktpQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzNTk3Nw==", "bodyText": "Are you sure that you want to deprecate this newly created class?", "url": "https://github.com/eclipse/hono/pull/1733#discussion_r374035977", "createdAt": "2020-02-03T10:51:19Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.Util;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing tenant information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/tenant/\">Tenant API</a>.\n+ * It receives HTTP requests representing operation invocations and executes the matching service implementation methods.\n+ * The outcome is then returned to the peer in the HTTP response.\n+ * @deprecated This class will be removed in future versions as HTTP endpoint does not use event bus anymore.\n+ *             Please use {@link org.eclipse.hono.service.management.tenant.AbstractTenantManagementHttpEndpoint} based implementation in the future.\n+ */\n+@Deprecated(forRemoval = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7084d459c720c0e036267e29f1bda1d33d95275f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzNjY4Mg==", "bodyText": "is this supposed to be overridden?", "url": "https://github.com/eclipse/hono/pull/1733#discussion_r374036682", "createdAt": "2020-02-03T10:52:52Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.Util;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing tenant information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/tenant/\">Tenant API</a>.\n+ * It receives HTTP requests representing operation invocations and executes the matching service implementation methods.\n+ * The outcome is then returned to the peer in the HTTP response.\n+ * @deprecated This class will be removed in future versions as HTTP endpoint does not use event bus anymore.\n+ *             Please use {@link org.eclipse.hono.service.management.tenant.AbstractTenantManagementHttpEndpoint} based implementation in the future.\n+ */\n+@Deprecated(forRemoval = true)\n+public abstract class AbstractTenantManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+    private static final String SPAN_NAME_GET_TENANT = \"get Tenant from management API\";\n+    private static final String SPAN_NAME_CREATE_TENANT = \"create Tenant from management API\";\n+    private static final String SPAN_NAME_UPDATE_TENANT = \"update Tenant from management API\";\n+    private static final String SPAN_NAME_REMOVE_TENANT= \"remove Tenant from management API\";\n+\n+    private static final String TENANT_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+            RegistryManagementConstants.API_VERSION,\n+            RegistryManagementConstants.TENANT_HTTP_ENDPOINT);\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractTenantManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return TENANT_MANAGEMENT_ENDPOINT_NAME;\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String path = String.format(\"/%s\", getName());\n+        final String pathWithTenant = String.format(\"/%s/:%s\", getName(), PARAM_TENANT_ID);\n+\n+        // Add CORS handler\n+        router.route(path).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.POST)));\n+        router.route(pathWithTenant).handler(createDefaultCorsHandler(config.getCorsAllowedOrigin()));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // ADD tenant with auto-generated ID\n+        router.post(path).handler(bodyHandler);\n+        router.post(path).handler(this::extractOptionalJsonPayload);\n+        router.post(path).handler(this::createTenant);\n+\n+        // ADD tenant\n+        router.post(pathWithTenant).handler(bodyHandler);\n+        router.post(pathWithTenant).handler(this::extractOptionalJsonPayload);\n+        router.post(pathWithTenant).handler(this::updatePayloadWithTenantId);\n+        router.post(pathWithTenant).handler(this::createTenant);\n+\n+        // GET tenant\n+        router.get(pathWithTenant).handler(this::getTenant);\n+\n+        // UPDATE tenant\n+        router.put(pathWithTenant).handler(bodyHandler);\n+        router.put(pathWithTenant).handler(this::extractRequiredJsonPayload);\n+        router.put(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenant).handler(this::updateTenant);\n+\n+        // REMOVE tenant\n+        router.delete(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.delete(pathWithTenant).handler(this::deleteTenant);\n+    }\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract TenantManagementService getService();\n+\n+    /**\n+     * Check that the tenantId value is not blank then\n+     * update the payload (that was put to the RoutingContext ctx with the\n+     * key {@link #KEY_REQUEST_BODY}) with the tenant value retrieved from the RoutingContext.\n+     * The tenantId value is associated with the key {@link RegistryManagementConstants#FIELD_PAYLOAD_TENANT_ID}.\n+     *\n+     * @param ctx The routing context to retrieve the JSON request body from.\n+     */\n+    protected void updatePayloadWithTenantId(final RoutingContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7084d459c720c0e036267e29f1bda1d33d95275f"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzOTAxNQ==", "bodyText": "IMHO we should have a better message for the case where the client didn't provide an ID", "url": "https://github.com/eclipse/hono/pull/1733#discussion_r374039015", "createdAt": "2020-02-03T10:57:59Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.Util;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing tenant information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/tenant/\">Tenant API</a>.\n+ * It receives HTTP requests representing operation invocations and executes the matching service implementation methods.\n+ * The outcome is then returned to the peer in the HTTP response.\n+ * @deprecated This class will be removed in future versions as HTTP endpoint does not use event bus anymore.\n+ *             Please use {@link org.eclipse.hono.service.management.tenant.AbstractTenantManagementHttpEndpoint} based implementation in the future.\n+ */\n+@Deprecated(forRemoval = true)\n+public abstract class AbstractTenantManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+    private static final String SPAN_NAME_GET_TENANT = \"get Tenant from management API\";\n+    private static final String SPAN_NAME_CREATE_TENANT = \"create Tenant from management API\";\n+    private static final String SPAN_NAME_UPDATE_TENANT = \"update Tenant from management API\";\n+    private static final String SPAN_NAME_REMOVE_TENANT= \"remove Tenant from management API\";\n+\n+    private static final String TENANT_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+            RegistryManagementConstants.API_VERSION,\n+            RegistryManagementConstants.TENANT_HTTP_ENDPOINT);\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractTenantManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return TENANT_MANAGEMENT_ENDPOINT_NAME;\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String path = String.format(\"/%s\", getName());\n+        final String pathWithTenant = String.format(\"/%s/:%s\", getName(), PARAM_TENANT_ID);\n+\n+        // Add CORS handler\n+        router.route(path).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.POST)));\n+        router.route(pathWithTenant).handler(createDefaultCorsHandler(config.getCorsAllowedOrigin()));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // ADD tenant with auto-generated ID\n+        router.post(path).handler(bodyHandler);\n+        router.post(path).handler(this::extractOptionalJsonPayload);\n+        router.post(path).handler(this::createTenant);\n+\n+        // ADD tenant\n+        router.post(pathWithTenant).handler(bodyHandler);\n+        router.post(pathWithTenant).handler(this::extractOptionalJsonPayload);\n+        router.post(pathWithTenant).handler(this::updatePayloadWithTenantId);\n+        router.post(pathWithTenant).handler(this::createTenant);\n+\n+        // GET tenant\n+        router.get(pathWithTenant).handler(this::getTenant);\n+\n+        // UPDATE tenant\n+        router.put(pathWithTenant).handler(bodyHandler);\n+        router.put(pathWithTenant).handler(this::extractRequiredJsonPayload);\n+        router.put(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenant).handler(this::updateTenant);\n+\n+        // REMOVE tenant\n+        router.delete(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.delete(pathWithTenant).handler(this::deleteTenant);\n+    }\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract TenantManagementService getService();\n+\n+    /**\n+     * Check that the tenantId value is not blank then\n+     * update the payload (that was put to the RoutingContext ctx with the\n+     * key {@link #KEY_REQUEST_BODY}) with the tenant value retrieved from the RoutingContext.\n+     * The tenantId value is associated with the key {@link RegistryManagementConstants#FIELD_PAYLOAD_TENANT_ID}.\n+     *\n+     * @param ctx The routing context to retrieve the JSON request body from.\n+     */\n+    protected void updatePayloadWithTenantId(final RoutingContext ctx) {\n+\n+        final JsonObject payload = ctx.get(KEY_REQUEST_BODY);\n+        final String tenantId = getTenantIdFromContext(ctx);\n+\n+        if (tenantId.isBlank()) {\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST,\n+                    String.format(\"'%s' param cannot be empty\", RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID)));\n+        }\n+\n+        payload.put(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, tenantId);\n+        ctx.put(KEY_REQUEST_BODY, payload);\n+        ctx.next();\n+    }\n+\n+    private String getTenantIdFromContext(final RoutingContext ctx) {\n+        final JsonObject payload = ctx.get(KEY_REQUEST_BODY);\n+        return Optional.ofNullable(getTenantParam(ctx)).orElse(getTenantParamFromPayload(payload));\n+    }\n+\n+    private void createTenant(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_CREATE_TENANT, TracingHandler.serverSpanContext(ctx), tracer, getClass().getSimpleName());\n+\n+        final String tenantId = getRequestParam(PARAM_TENANT_ID, ctx, span, true);\n+\n+        final JsonObject payload = Util.getRequestPayload(ctx.get(KEY_REQUEST_BODY));\n+\n+        if (isValidRequestPayload(payload)) {\n+            logger.debug(\"creating tenant [{}]\", tenantId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7084d459c720c0e036267e29f1bda1d33d95275f"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzOTcwMQ==", "bodyText": "the orElse method seems to suggest that the id can actually be null but that is not the case, is it?", "url": "https://github.com/eclipse/hono/pull/1733#discussion_r374039701", "createdAt": "2020-02-03T10:59:28Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.Util;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing tenant information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/tenant/\">Tenant API</a>.\n+ * It receives HTTP requests representing operation invocations and executes the matching service implementation methods.\n+ * The outcome is then returned to the peer in the HTTP response.\n+ * @deprecated This class will be removed in future versions as HTTP endpoint does not use event bus anymore.\n+ *             Please use {@link org.eclipse.hono.service.management.tenant.AbstractTenantManagementHttpEndpoint} based implementation in the future.\n+ */\n+@Deprecated(forRemoval = true)\n+public abstract class AbstractTenantManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+    private static final String SPAN_NAME_GET_TENANT = \"get Tenant from management API\";\n+    private static final String SPAN_NAME_CREATE_TENANT = \"create Tenant from management API\";\n+    private static final String SPAN_NAME_UPDATE_TENANT = \"update Tenant from management API\";\n+    private static final String SPAN_NAME_REMOVE_TENANT= \"remove Tenant from management API\";\n+\n+    private static final String TENANT_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+            RegistryManagementConstants.API_VERSION,\n+            RegistryManagementConstants.TENANT_HTTP_ENDPOINT);\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractTenantManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return TENANT_MANAGEMENT_ENDPOINT_NAME;\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String path = String.format(\"/%s\", getName());\n+        final String pathWithTenant = String.format(\"/%s/:%s\", getName(), PARAM_TENANT_ID);\n+\n+        // Add CORS handler\n+        router.route(path).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.POST)));\n+        router.route(pathWithTenant).handler(createDefaultCorsHandler(config.getCorsAllowedOrigin()));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // ADD tenant with auto-generated ID\n+        router.post(path).handler(bodyHandler);\n+        router.post(path).handler(this::extractOptionalJsonPayload);\n+        router.post(path).handler(this::createTenant);\n+\n+        // ADD tenant\n+        router.post(pathWithTenant).handler(bodyHandler);\n+        router.post(pathWithTenant).handler(this::extractOptionalJsonPayload);\n+        router.post(pathWithTenant).handler(this::updatePayloadWithTenantId);\n+        router.post(pathWithTenant).handler(this::createTenant);\n+\n+        // GET tenant\n+        router.get(pathWithTenant).handler(this::getTenant);\n+\n+        // UPDATE tenant\n+        router.put(pathWithTenant).handler(bodyHandler);\n+        router.put(pathWithTenant).handler(this::extractRequiredJsonPayload);\n+        router.put(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenant).handler(this::updateTenant);\n+\n+        // REMOVE tenant\n+        router.delete(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.delete(pathWithTenant).handler(this::deleteTenant);\n+    }\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract TenantManagementService getService();\n+\n+    /**\n+     * Check that the tenantId value is not blank then\n+     * update the payload (that was put to the RoutingContext ctx with the\n+     * key {@link #KEY_REQUEST_BODY}) with the tenant value retrieved from the RoutingContext.\n+     * The tenantId value is associated with the key {@link RegistryManagementConstants#FIELD_PAYLOAD_TENANT_ID}.\n+     *\n+     * @param ctx The routing context to retrieve the JSON request body from.\n+     */\n+    protected void updatePayloadWithTenantId(final RoutingContext ctx) {\n+\n+        final JsonObject payload = ctx.get(KEY_REQUEST_BODY);\n+        final String tenantId = getTenantIdFromContext(ctx);\n+\n+        if (tenantId.isBlank()) {\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST,\n+                    String.format(\"'%s' param cannot be empty\", RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID)));\n+        }\n+\n+        payload.put(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, tenantId);\n+        ctx.put(KEY_REQUEST_BODY, payload);\n+        ctx.next();\n+    }\n+\n+    private String getTenantIdFromContext(final RoutingContext ctx) {\n+        final JsonObject payload = ctx.get(KEY_REQUEST_BODY);\n+        return Optional.ofNullable(getTenantParam(ctx)).orElse(getTenantParamFromPayload(payload));\n+    }\n+\n+    private void createTenant(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_CREATE_TENANT, TracingHandler.serverSpanContext(ctx), tracer, getClass().getSimpleName());\n+\n+        final String tenantId = getRequestParam(PARAM_TENANT_ID, ctx, span, true);\n+\n+        final JsonObject payload = Util.getRequestPayload(ctx.get(KEY_REQUEST_BODY));\n+\n+        if (isValidRequestPayload(payload)) {\n+            logger.debug(\"creating tenant [{}]\", tenantId);\n+\n+            addNotPresentFieldsWithDefaultValuesForTenant(payload);\n+\n+            final Promise<OperationResult<Id>> result = Promise.promise();\n+            result.future().setHandler(handler -> {\n+                final OperationResult<Id> operationResult = handler.result();\n+\n+                final String createdTenantId = Optional.ofNullable(operationResult.getPayload()).map(Id::getId).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7084d459c720c0e036267e29f1bda1d33d95275f"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0MDg5OA==", "bodyText": "is this supposed to be overridden?", "url": "https://github.com/eclipse/hono/pull/1733#discussion_r374040898", "createdAt": "2020-02-03T11:02:06Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.tenant;\n+\n+import io.opentracing.Span;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.http.AbstractHttpEndpoint;\n+import org.eclipse.hono.service.http.HttpUtils;\n+import org.eclipse.hono.service.http.TracingHandler;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.Util;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import java.net.HttpURLConnection;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * An {@code HttpEndpoint} for managing tenant information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/tenant/\">Tenant API</a>.\n+ * It receives HTTP requests representing operation invocations and executes the matching service implementation methods.\n+ * The outcome is then returned to the peer in the HTTP response.\n+ * @deprecated This class will be removed in future versions as HTTP endpoint does not use event bus anymore.\n+ *             Please use {@link org.eclipse.hono.service.management.tenant.AbstractTenantManagementHttpEndpoint} based implementation in the future.\n+ */\n+@Deprecated(forRemoval = true)\n+public abstract class AbstractTenantManagementHttpEndpoint extends AbstractHttpEndpoint<ServiceConfigProperties> {\n+\n+    private static final String SPAN_NAME_GET_TENANT = \"get Tenant from management API\";\n+    private static final String SPAN_NAME_CREATE_TENANT = \"create Tenant from management API\";\n+    private static final String SPAN_NAME_UPDATE_TENANT = \"update Tenant from management API\";\n+    private static final String SPAN_NAME_REMOVE_TENANT= \"remove Tenant from management API\";\n+\n+    private static final String TENANT_MANAGEMENT_ENDPOINT_NAME = String.format(\"%s/%s\",\n+            RegistryManagementConstants.API_VERSION,\n+            RegistryManagementConstants.TENANT_HTTP_ENDPOINT);\n+\n+    /**\n+     * Creates an endpoint for a Vertx instance.\n+     *\n+     * @param vertx The Vertx instance to use.\n+     * @throws NullPointerException if vertx is {@code null};\n+     */\n+    @Autowired\n+    public AbstractTenantManagementHttpEndpoint(final Vertx vertx) {\n+        super(Objects.requireNonNull(vertx));\n+    }\n+\n+    /**\n+     * Returns an empty String as this implementation does not use event bus.\n+     */\n+    @Override\n+    protected String getEventBusAddress() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return TENANT_MANAGEMENT_ENDPOINT_NAME;\n+    }\n+\n+    @Override\n+    public void addRoutes(final Router router) {\n+\n+        final String path = String.format(\"/%s\", getName());\n+        final String pathWithTenant = String.format(\"/%s/:%s\", getName(), PARAM_TENANT_ID);\n+\n+        // Add CORS handler\n+        router.route(path).handler(createCorsHandler(config.getCorsAllowedOrigin(), EnumSet.of(HttpMethod.POST)));\n+        router.route(pathWithTenant).handler(createDefaultCorsHandler(config.getCorsAllowedOrigin()));\n+\n+        final BodyHandler bodyHandler = BodyHandler.create();\n+        bodyHandler.setBodyLimit(config.getMaxPayloadSize());\n+\n+        // ADD tenant with auto-generated ID\n+        router.post(path).handler(bodyHandler);\n+        router.post(path).handler(this::extractOptionalJsonPayload);\n+        router.post(path).handler(this::createTenant);\n+\n+        // ADD tenant\n+        router.post(pathWithTenant).handler(bodyHandler);\n+        router.post(pathWithTenant).handler(this::extractOptionalJsonPayload);\n+        router.post(pathWithTenant).handler(this::updatePayloadWithTenantId);\n+        router.post(pathWithTenant).handler(this::createTenant);\n+\n+        // GET tenant\n+        router.get(pathWithTenant).handler(this::getTenant);\n+\n+        // UPDATE tenant\n+        router.put(pathWithTenant).handler(bodyHandler);\n+        router.put(pathWithTenant).handler(this::extractRequiredJsonPayload);\n+        router.put(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.put(pathWithTenant).handler(this::updateTenant);\n+\n+        // REMOVE tenant\n+        router.delete(pathWithTenant).handler(this::extractIfMatchVersionParam);\n+        router.delete(pathWithTenant).handler(this::deleteTenant);\n+    }\n+\n+    /**\n+     * The service to forward requests to.\n+     *\n+     * @return The service to bind to, must never return {@code null}.\n+     */\n+    protected abstract TenantManagementService getService();\n+\n+    /**\n+     * Check that the tenantId value is not blank then\n+     * update the payload (that was put to the RoutingContext ctx with the\n+     * key {@link #KEY_REQUEST_BODY}) with the tenant value retrieved from the RoutingContext.\n+     * The tenantId value is associated with the key {@link RegistryManagementConstants#FIELD_PAYLOAD_TENANT_ID}.\n+     *\n+     * @param ctx The routing context to retrieve the JSON request body from.\n+     */\n+    protected void updatePayloadWithTenantId(final RoutingContext ctx) {\n+\n+        final JsonObject payload = ctx.get(KEY_REQUEST_BODY);\n+        final String tenantId = getTenantIdFromContext(ctx);\n+\n+        if (tenantId.isBlank()) {\n+            ctx.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST,\n+                    String.format(\"'%s' param cannot be empty\", RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID)));\n+        }\n+\n+        payload.put(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, tenantId);\n+        ctx.put(KEY_REQUEST_BODY, payload);\n+        ctx.next();\n+    }\n+\n+    private String getTenantIdFromContext(final RoutingContext ctx) {\n+        final JsonObject payload = ctx.get(KEY_REQUEST_BODY);\n+        return Optional.ofNullable(getTenantParam(ctx)).orElse(getTenantParamFromPayload(payload));\n+    }\n+\n+    private void createTenant(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_CREATE_TENANT, TracingHandler.serverSpanContext(ctx), tracer, getClass().getSimpleName());\n+\n+        final String tenantId = getRequestParam(PARAM_TENANT_ID, ctx, span, true);\n+\n+        final JsonObject payload = Util.getRequestPayload(ctx.get(KEY_REQUEST_BODY));\n+\n+        if (isValidRequestPayload(payload)) {\n+            logger.debug(\"creating tenant [{}]\", tenantId);\n+\n+            addNotPresentFieldsWithDefaultValuesForTenant(payload);\n+\n+            final Promise<OperationResult<Id>> result = Promise.promise();\n+            result.future().setHandler(handler -> {\n+                final OperationResult<Id> operationResult = handler.result();\n+\n+                final String createdTenantId = Optional.ofNullable(operationResult.getPayload()).map(Id::getId).orElse(null);\n+                Util.writeOperationResponse(\n+                        ctx,\n+                        operationResult,\n+                        (response) -> response.putHeader(\n+                                HttpHeaders.LOCATION,\n+                                String.format(\"/%s/%s\", getName(), createdTenantId)),\n+                        span);\n+            });\n+\n+            getService().add(Optional.ofNullable(tenantId), payload, span, result);\n+        } else {\n+            final String msg = \"request contains malformed payload\";\n+            logger.debug(msg);\n+            TracingHelper.logError(span, msg);\n+            Tags.HTTP_STATUS.set(span, HttpURLConnection.HTTP_BAD_REQUEST);\n+            HttpUtils.badRequest(ctx, msg);\n+            span.finish();\n+        }\n+    }\n+\n+    private void getTenant(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_GET_TENANT, TracingHandler.serverSpanContext(ctx), tracer, getClass().getSimpleName());\n+        final String tenantId = getMandatoryRequestParam(PARAM_TENANT_ID, ctx, span);\n+\n+        final HttpServerResponse response = ctx.response();\n+\n+        logger.debug(\"retrieving tenant [id: {}]\", tenantId);\n+        final Promise<OperationResult<Tenant>> result = Promise.promise();\n+        result.future().setHandler(handler -> {\n+            final OperationResult<Tenant> operationResult = handler.result();\n+            final int status = operationResult.getStatus();\n+            response.setStatusCode(status);\n+            switch (status) {\n+                case HttpURLConnection.HTTP_OK:\n+                    operationResult.getResourceVersion().ifPresent(v -> response.putHeader(HttpHeaders.ETAG, v));\n+                    HttpUtils.setResponseBody(response, JsonObject.mapFrom(operationResult.getPayload()));\n+                    // falls through intentionally\n+                default:\n+                    Tags.HTTP_STATUS.set(span, status);\n+                    span.finish();\n+                    response.end();\n+            }\n+        });\n+        getService().read(tenantId, span, result);\n+    }\n+\n+    private void updateTenant(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_UPDATE_TENANT, TracingHandler.serverSpanContext(ctx), tracer, getClass().getSimpleName());\n+\n+        final String tenantId = getMandatoryRequestParam(PARAM_TENANT_ID, ctx, span);\n+        final JsonObject payload = Util.getRequestPayload(ctx.get(KEY_REQUEST_BODY));\n+        if (payload != null) {\n+            payload.remove(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID);\n+        }\n+\n+        if (isValidRequestPayload(payload)) {\n+            logger.debug(\"updating tenant [{}]\", tenantId);\n+\n+            addNotPresentFieldsWithDefaultValuesForTenant(payload);\n+\n+            final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n+\n+            final Promise<OperationResult<Void>> result = Promise.promise();\n+\n+            result.future().setHandler(handler -> {\n+                Util.writeOperationResponse(ctx, handler.result(), null, span);\n+            });\n+\n+            getService().update(tenantId, payload, resourceVersion, span, result);\n+        } else {\n+            final String msg = \"request contains malformed payload\";\n+            logger.debug(msg);\n+            TracingHelper.logError(span, msg);\n+            Tags.HTTP_STATUS.set(span, HttpURLConnection.HTTP_BAD_REQUEST);\n+            HttpUtils.badRequest(ctx, msg);\n+            span.finish();\n+        }\n+    }\n+\n+    private void deleteTenant(final RoutingContext ctx) {\n+\n+        final Span span = Util.newChildSpan(SPAN_NAME_REMOVE_TENANT, TracingHandler.serverSpanContext(ctx), tracer, getClass().getSimpleName());\n+\n+        final String tenantId = getMandatoryRequestParam(PARAM_TENANT_ID, ctx, span);\n+\n+        logger.debug(\"removing tenant [{}]\", tenantId);\n+\n+        final Optional<String> resourceVersion = Optional.ofNullable(ctx.get(KEY_RESOURCE_VERSION));\n+\n+        final Promise<Result<Void>> result = Promise.promise();\n+\n+        result.future().setHandler(handler -> {\n+                    Util.writeResponse(ctx, handler.result(), null, span);\n+                });\n+\n+        getService().remove(tenantId, resourceVersion, span, result);\n+    }\n+\n+    private static String getTenantParamFromPayload(final JsonObject payload) {\n+        return (payload != null ? (String) payload.remove(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID) : null);\n+    }\n+\n+    /**\n+     * Checks the request payload for validity.\n+     *\n+     * @param payload The payload to check.\n+     * @return boolean The result of the check : {@link Boolean#TRUE} if the payload is valid, {@link Boolean#FALSE} otherwise.\n+     * @throws NullPointerException If the payload is {@code null}.\n+     */\n+    boolean isValidRequestPayload(final JsonObject payload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7084d459c720c0e036267e29f1bda1d33d95275f"}, "originalPosition": 292}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7084d459c720c0e036267e29f1bda1d33d95275f", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/7084d459c720c0e036267e29f1bda1d33d95275f", "committedDate": "2020-01-31T16:17:12Z", "message": "[#1346] Remove event bus from tenant management endpoint"}, "afterCommit": {"oid": "bb4afa832aa7040d3a41551e847cc798a06d9687", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/bb4afa832aa7040d3a41551e847cc798a06d9687", "committedDate": "2020-02-10T11:57:53Z", "message": "[#1346] Remove event bus from tenant management endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTY2Njk5", "url": "https://github.com/eclipse/hono/pull/1733#pullrequestreview-355966699", "createdAt": "2020-02-10T14:14:06Z", "commit": {"oid": "bb4afa832aa7040d3a41551e847cc798a06d9687"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoxNDowN1rOFnng1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoxNDowN1rOFnng1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4NjE2Ng==", "bodyText": "can you please review the method's description in the JavaDoc? I don't think that it reflects the behavior of this method. It refers to a returned handler but the method returns void. It also doesn't mention that the body is only written and the handler is only invoked if the status code is 201 Created. IMHO the status code to check for should also be passed in as a parameter in order to make this method more useful. WDYT?", "url": "https://github.com/eclipse/hono/pull/1733#discussion_r377086166", "createdAt": "2020-02-10T14:14:07Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/Util.java", "diffHunk": "@@ -121,7 +123,7 @@ public static final Span newChildSpan(final String operationName, final SpanCont\n      *\n      * @param ctx The routing context of the request.\n      * @param result The generic result of the operation.\n-     * @param customHandler An (optional) handler for post processing the HTTP response, e.g. to set any additional HTTP\n+     * @param customHandler An (optional) handler for post processing successful HTTP response, e.g. to set any additional HTTP", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb4afa832aa7040d3a41551e847cc798a06d9687"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7ec663955afbf03ca15d320e971d3e4bf10d1b4", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/b7ec663955afbf03ca15d320e971d3e4bf10d1b4", "committedDate": "2020-02-10T15:45:26Z", "message": "[#1346] Remove event bus from tenant management endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb4afa832aa7040d3a41551e847cc798a06d9687", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/bb4afa832aa7040d3a41551e847cc798a06d9687", "committedDate": "2020-02-10T11:57:53Z", "message": "[#1346] Remove event bus from tenant management endpoint"}, "afterCommit": {"oid": "b7ec663955afbf03ca15d320e971d3e4bf10d1b4", "author": {"user": {"login": "dejanb", "name": "Dejan Bosanac"}}, "url": "https://github.com/eclipse/hono/commit/b7ec663955afbf03ca15d320e971d3e4bf10d1b4", "committedDate": "2020-02-10T15:45:26Z", "message": "[#1346] Remove event bus from tenant management endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MDkzOTAz", "url": "https://github.com/eclipse/hono/pull/1733#pullrequestreview-356093903", "createdAt": "2020-02-10T16:46:57Z", "commit": {"oid": "b7ec663955afbf03ca15d320e971d3e4bf10d1b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 944, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}