{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MzMyMzI5", "number": 716, "title": "Use InjectableValue to provide response info", "bodyText": "Description\nJackson can do binding of injected values for us rather than needing to special case them.\nA continuation of this change would be to remove most of the initialization wrapUp(root) methods and add a binding for GitHub member.\nBefore submitting a PR:\nWe love getting PRs, but we hate asking people for the same basic changes every time.\n\n Push your changes to a branch other than master. Create your PR from that branch.\n Add JavaDocs and other comments\n Write tests that run and pass in CI. See CONTRIBUTING.md for details on how to capture snapshot data.\n Run mvn -D enable-ci clean install site locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.", "createdAt": "2020-02-25T02:35:00Z", "url": "https://github.com/hub4j/github-api/pull/716", "merged": true, "mergeCommit": {"oid": "eb3ebdbf520c83fdb7af9d5462d34b736716b1bb"}, "closed": true, "closedAt": "2020-02-25T04:04:41Z", "author": {"login": "bitwiseman"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHpcU6ABqjMwNjc4MTU1MDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHqCC-AFqTM2Mzg1Nzc0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c671262a9c88a7c8bacd0ea9b54686217771fa5c", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/c671262a9c88a7c8bacd0ea9b54686217771fa5c", "committedDate": "2020-02-25T02:30:25Z", "message": "Use InjectableValue to provide response info"}, "afterCommit": {"oid": "73d3c6c42a94b19ede6163e9f7e8c01081f11e33", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/73d3c6c42a94b19ede6163e9f7e8c01081f11e33", "committedDate": "2020-02-25T03:20:25Z", "message": "Use InjectableValue to provide response info"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73d3c6c42a94b19ede6163e9f7e8c01081f11e33", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/73d3c6c42a94b19ede6163e9f7e8c01081f11e33", "committedDate": "2020-02-25T03:20:25Z", "message": "Use InjectableValue to provide response info"}, "afterCommit": {"oid": "9d7e79621a4bb6f6c55ee6dceec33c39a77881f1", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/9d7e79621a4bb6f6c55ee6dceec33c39a77881f1", "committedDate": "2020-02-25T03:48:10Z", "message": "Use InjectableValue to provide response info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/f8c2cda2573eea98fbc512771aa17658f0d49d1c", "committedDate": "2020-02-25T03:54:40Z", "message": "Use InjectableValue to provide response info"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d7e79621a4bb6f6c55ee6dceec33c39a77881f1", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/9d7e79621a4bb6f6c55ee6dceec33c39a77881f1", "committedDate": "2020-02-25T03:48:10Z", "message": "Use InjectableValue to provide response info"}, "afterCommit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/f8c2cda2573eea98fbc512771aa17658f0d49d1c", "committedDate": "2020-02-25T03:54:40Z", "message": "Use InjectableValue to provide response info"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODU3MTU1", "url": "https://github.com/hub4j/github-api/pull/716#pullrequestreview-363857155", "createdAt": "2020-02-25T03:59:23Z", "commit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo1OToyM1rOFt39mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo1OToyM1rOFt39mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NzEzMA==", "bodyText": "This is the special case code that we had before.", "url": "https://github.com/hub4j/github-api/pull/716#discussion_r383647130", "createdAt": "2020-02-25T03:59:23Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "diffHunk": "@@ -443,30 +445,6 @@ private static IOException interpretApiError(IOException e,\n         return e;\n     }\n \n-    /**\n-     * Sets the response headers on objects that need it. Ideally this would be handled by the objects themselves, but\n-     * currently they do not have access to {@link GitHubResponse.ResponseInfo} after the\n-     *\n-     * @param responseInfo\n-     *            the response info\n-     * @param readValue\n-     *            the object to consider adding headers to.\n-     * @param <T>\n-     *            type of the object\n-     */\n-    private static <T> void setResponseHeaders(GitHubResponse.ResponseInfo responseInfo, T readValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODU3Mzc2", "url": "https://github.com/hub4j/github-api/pull/716#pullrequestreview-363857376", "createdAt": "2020-02-25T04:00:16Z", "commit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowMDoxNlrOFt3-PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowMDoxNlrOFt3-PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NzI5Mw==", "bodyText": "This is what we do instead of the special case.", "url": "https://github.com/hub4j/github-api/pull/716#discussion_r383647293", "createdAt": "2020-02-25T04:00:16Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHObject.java", "diffHunk": "@@ -33,6 +34,19 @@\n     GHObject() {\n     }\n \n+    /**\n+     * Called by Jackson\n+     * \n+     * @param responseInfo\n+     *            the {@link GitHubResponse.ResponseInfo} to get headers from.\n+     */\n+    @JacksonInject\n+    protected void setResponseHeaderFields(@CheckForNull GitHubResponse.ResponseInfo responseInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODU3NzQy", "url": "https://github.com/hub4j/github-api/pull/716#pullrequestreview-363857742", "createdAt": "2020-02-25T04:01:48Z", "commit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowMTo0OFrOFt3_gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowMTo0OFrOFt3_gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NzYxOQ==", "bodyText": "Also, since we now have the the responseInfo injected during binding, we can make Record fully immutable.  We don't have \"recalculate\" after creation.", "url": "https://github.com/hub4j/github-api/pull/716#discussion_r383647619", "createdAt": "2020-02-25T04:01:48Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHRateLimit.java", "diffHunk": "@@ -308,31 +306,37 @@ private UnknownLimitRecord() {\n          * @param resetEpochSeconds\n          *            the reset epoch seconds\n          */\n-        @JsonCreator\n         public Record(@JsonProperty(value = \"limit\", required = true) int limit,\n                 @JsonProperty(value = \"remaining\", required = true) int remaining,\n                 @JsonProperty(value = \"reset\", required = true) long resetEpochSeconds) {\n             this(limit, remaining, resetEpochSeconds, null);\n         }\n \n         /**\n-         * Instantiates a new Record.\n+         * Instantiates a new Record. Called by Jackson data binding or during header parsing.\n          *\n          * @param limit\n          *            the limit\n          * @param remaining\n          *            the remaining\n          * @param resetEpochSeconds\n          *            the reset epoch seconds\n-         * @param updatedAt\n-         *            the updated at\n+         * @param responseInfo\n+         *            the response info\n          */\n-        @SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Deprecated\")\n-        public Record(int limit, int remaining, long resetEpochSeconds, @CheckForNull String updatedAt) {\n+        @JsonCreator\n+        Record(@JsonProperty(value = \"limit\", required = true) int limit,\n+                @JsonProperty(value = \"remaining\", required = true) int remaining,\n+                @JsonProperty(value = \"reset\", required = true) long resetEpochSeconds,\n+                @JacksonInject @CheckForNull GitHubResponse.ResponseInfo responseInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1682, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}