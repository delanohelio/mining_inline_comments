{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDQwMzMx", "number": 706, "title": "Add basic rate limit checker ", "bodyText": "This is a stripped down rate limit checking implementation that handles the infrastructure\nof deciding how to get rate limit information and leaves it to other implementers to\ndecided what kind of checks they want to do and how long they want to wait.\nThe implementation supports checkers that sleep less than the full time until the\nrate limit is expected to reset, allowing for polling and notifying clients of why their query\nis not returning.\nA basic checker which sleeps until the rate limit is expected to reset is included as working example..\nDescription\n** Describe your change here**\nBefore submitting a PR:\nWe love getting PRs, but we hate asking people for the same basic changes every time.\n\n Push your changes to a branch other than master. Create your PR from that branch.\n Add JavaDocs and other comments\n Write tests that run and pass in CI. See CONTRIBUTING.md for details on how to capture snapshot data.\n Run mvn -D enable-ci clean install site locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.", "createdAt": "2020-02-21T00:08:56Z", "url": "https://github.com/hub4j/github-api/pull/706", "merged": true, "mergeCommit": {"oid": "064206fb9a486cefad177d3dd8fde1a1e6e0cf09"}, "closed": true, "closedAt": "2020-02-21T21:06:51Z", "author": {"login": "bitwiseman"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGUOrtAH2gAyMzc4MDQwMzMxOmI3MGI5MjRkYjQxZTA4MjNiYjFjNTUzOGI2M2EzNTExNGRlY2JmNDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeaVQVYAFqTY2ODM2MTA2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b70b924db41e0823bb1c5538b63a35114decbf42", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/b70b924db41e0823bb1c5538b63a35114decbf42", "committedDate": "2020-02-21T00:03:46Z", "message": "Inital implmentation of RateLimitChecker\n\nThis is a stripped down rate limit checking implmentation that handles the infrastructure\nof deciding how to get rate limit information and leaves it to other implementers to\ndecided what kind of checks they want to do and how long they want to wait.\n\nThe implmentation supports checkers that sleep less than the full time until the\nrate limit is expected to reset, allowing for polling and notifying clients of why their query\nis not returning.\n\nA basic checker which sleeps until the rate limit is expected to reset is included as working example.."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9e3635d1b656ea4277b51ee02a00acb477ecc12", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/e9e3635d1b656ea4277b51ee02a00acb477ecc12", "committedDate": "2020-02-21T02:36:38Z", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing."}, "afterCommit": {"oid": "e9e690ef6089f386913856784aa674a36fded80f", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/e9e690ef6089f386913856784aa674a36fded80f", "committedDate": "2020-02-21T02:43:32Z", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9e690ef6089f386913856784aa674a36fded80f", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/e9e690ef6089f386913856784aa674a36fded80f", "committedDate": "2020-02-21T02:43:32Z", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing."}, "afterCommit": {"oid": "3affedd1b101b2a6465d5110f424fcba3e49d302", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/3affedd1b101b2a6465d5110f424fcba3e49d302", "committedDate": "2020-02-21T02:50:08Z", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "158a31e9246cd50a8b1e4c22ad124d6b45ae86e4", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/158a31e9246cd50a8b1e4c22ad124d6b45ae86e4", "committedDate": "2020-02-21T02:53:13Z", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3affedd1b101b2a6465d5110f424fcba3e49d302", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/3affedd1b101b2a6465d5110f424fcba3e49d302", "committedDate": "2020-02-21T02:50:08Z", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing."}, "afterCommit": {"oid": "158a31e9246cd50a8b1e4c22ad124d6b45ae86e4", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/158a31e9246cd50a8b1e4c22ad124d6b45ae86e4", "committedDate": "2020-02-21T02:53:13Z", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDIwOTM1", "url": "https://github.com/hub4j/github-api/pull/706#pullrequestreview-362420935", "createdAt": "2020-02-21T06:26:48Z", "commit": {"oid": "b70b924db41e0823bb1c5538b63a35114decbf42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyNjo0OFrOFss0aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyNjo0OFrOFss0aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQxNTk3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * exceeding their rate limit. Consider add a {@link RateLimitChecker} to automatically check the rate limit for\n          \n          \n            \n                 * exceeding their rate limit. Consider adding a {@link RateLimitChecker} to automatically check the rate limit for", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r382415977", "createdAt": "2020-02-21T06:26:48Z", "author": {"login": "car-roll"}, "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -311,19 +314,32 @@ public GitHubBuilder withConnector(HttpConnector connector) {\n     }\n \n     /**\n-     * With rate limit handler git hub builder.\n+     * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n+     * number of requests remaining is returned in the response header and can also be requested using\n+     * {@link GitHub#getRateLimit()}. This request per interval is referred to as the \"rate limit\". When the remaining\n+     * number of requests reaches zero, the next request will return a error. If this happens, the\n+     * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n+     * <P>\n+     * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid\n+     * exceeding their rate limit. Consider add a {@link RateLimitChecker} to automatically check the rate limit for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b70b924db41e0823bb1c5538b63a35114decbf42"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1904c82941e31c68d28e9b6c595371de7f3bbbf0", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/1904c82941e31c68d28e9b6c595371de7f3bbbf0", "committedDate": "2020-02-21T18:52:28Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a68fe3b39d39a05565299e6d5e764f4cf22f3505", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/a68fe3b39d39a05565299e6d5e764f4cf22f3505", "committedDate": "2020-02-21T20:04:25Z", "message": "More javadoc because words are hard"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTAwNTM1", "url": "https://github.com/hub4j/github-api/pull/706#pullrequestreview-362900535", "createdAt": "2020-02-21T20:34:55Z", "commit": {"oid": "1904c82941e31c68d28e9b6c595371de7f3bbbf0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDozNDo1NVrOFtD1Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDozNDo1NVrOFtD1Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5MzA2Mw==", "bodyText": "Looks like this can be removed entirely.", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r382793063", "createdAt": "2020-02-21T20:34:55Z", "author": {"login": "kshultzCB"}, "path": "src/test/java/org/kohsuke/github/RateLimitCheckerTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.kohsuke.github;\n+\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.helpers.HandlebarsCurrentDateHelper;\n+import org.junit.Test;\n+import wiremock.com.github.jknack.handlebars.Helper;\n+import wiremock.com.github.jknack.handlebars.Options;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+\n+/**\n+ * Test showing the behavior of the {@link GitHubRateLimitChecker} and {@link RateLimitChecker.LiteralValue}.\n+ *\n+ * This is a very simple test but covers the key features: Checks occur automatically and are retried until they\n+ * indicate it is safe to proceed.\n+ */\n+public class RateLimitCheckerTest extends AbstractGitHubWireMockTest {\n+\n+    GHRateLimit rateLimit = null;\n+    GHRateLimit previousLimit = null;\n+    Date testStartDate = new Date();\n+\n+    public RateLimitCheckerTest() {\n+        useDefaultGitHub = false;\n+    }\n+\n+    @Override\n+    protected WireMockConfiguration getWireMockOptions() {\n+\n+        return super.getWireMockOptions().extensions(ResponseTemplateTransformer.builder()\n+                .global(true)\n+                .maxCacheEntries(0L)\n+                .helper(\"testStartDate\", new Helper<Object>() {\n+                    private HandlebarsCurrentDateHelper helper = new HandlebarsCurrentDateHelper();\n+                    @Override\n+                    public Object apply(final Object context, final Options options) throws IOException {\n+                        return this.helper.apply(RateLimitCheckerTest.this.testStartDate, options);\n+                    }\n+                })\n+                .build());\n+    }\n+\n+    @Test\n+    public void testGitHubRateLimit() throws Exception {\n+        // Customized response that templates the date to keep things working\n+        snapshotNotAllowed();\n+\n+        assertThat(mockGitHub.getRequestCount(), equalTo(0));\n+\n+        // // 4897 is just the what the limit was when the snapshot was taken\n+        // previousLimit = GHRateLimit\n+        // .fromHeaderRecord(new GHRateLimit.Record(5000, 4897, System.currentTimeMillis() / 1000L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1904c82941e31c68d28e9b6c595371de7f3bbbf0"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTEyMjEy", "url": "https://github.com/hub4j/github-api/pull/706#pullrequestreview-362912212", "createdAt": "2020-02-21T20:57:43Z", "commit": {"oid": "a68fe3b39d39a05565299e6d5e764f4cf22f3505"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY4MzYxMDY0", "url": "https://github.com/hub4j/github-api/pull/706#pullrequestreview-668361064", "createdAt": "2021-05-25T20:56:16Z", "commit": {"oid": "a68fe3b39d39a05565299e6d5e764f4cf22f3505"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQyMDo1NjoxNlrOJhlmuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQyMDo1NjoxNlrOJhlmuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE5ODkwNA==", "bodyText": "Is there an official source out there that expresses this?", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r639198904", "createdAt": "2021-05-25T20:56:16Z", "author": {"login": "steve-thousand"}, "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -311,19 +314,39 @@ public GitHubBuilder withConnector(HttpConnector connector) {\n     }\n \n     /**\n-     * With rate limit handler git hub builder.\n+     * Adds a {@link RateLimitHandler} to this {@link GitHubBuilder}.\n+     * <p>\n+     * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n+     * number of requests remaining is returned in the response header and can also be requested using\n+     * {@link GitHub#getRateLimit()}. This requests per interval is referred to as the \"rate limit\".\n+     * </p>\n+     * <p>\n+     * When the remaining number of requests reaches zero, the next request will return an error. If this happens,\n+     * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n+     * </p>\n+     * <p>\n+     * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68fe3b39d39a05565299e6d5e764f4cf22f3505"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1676, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}