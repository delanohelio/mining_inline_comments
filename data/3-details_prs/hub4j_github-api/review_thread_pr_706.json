{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDQwMzMx", "number": 706, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyNjo0OFrODhxt3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQyMDo1NjoxNlrOGClEbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzQ0MTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyNjo0OFrOFss0aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyNjo0OFrOFss0aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQxNTk3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * exceeding their rate limit. Consider add a {@link RateLimitChecker} to automatically check the rate limit for\n          \n          \n            \n                 * exceeding their rate limit. Consider adding a {@link RateLimitChecker} to automatically check the rate limit for", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r382415977", "createdAt": "2020-02-21T06:26:48Z", "author": {"login": "car-roll"}, "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -311,19 +314,32 @@ public GitHubBuilder withConnector(HttpConnector connector) {\n     }\n \n     /**\n-     * With rate limit handler git hub builder.\n+     * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n+     * number of requests remaining is returned in the response header and can also be requested using\n+     * {@link GitHub#getRateLimit()}. This request per interval is referred to as the \"rate limit\". When the remaining\n+     * number of requests reaches zero, the next request will return a error. If this happens, the\n+     * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n+     * <P>\n+     * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid\n+     * exceeding their rate limit. Consider add a {@link RateLimitChecker} to automatically check the rate limit for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b70b924db41e0823bb1c5538b63a35114decbf42"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTgzMDYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/kohsuke/github/RateLimitCheckerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDozNDo1NVrOFtD1Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDozNDo1NVrOFtD1Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5MzA2Mw==", "bodyText": "Looks like this can be removed entirely.", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r382793063", "createdAt": "2020-02-21T20:34:55Z", "author": {"login": "kshultzCB"}, "path": "src/test/java/org/kohsuke/github/RateLimitCheckerTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.kohsuke.github;\n+\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.helpers.HandlebarsCurrentDateHelper;\n+import org.junit.Test;\n+import wiremock.com.github.jknack.handlebars.Helper;\n+import wiremock.com.github.jknack.handlebars.Options;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+\n+/**\n+ * Test showing the behavior of the {@link GitHubRateLimitChecker} and {@link RateLimitChecker.LiteralValue}.\n+ *\n+ * This is a very simple test but covers the key features: Checks occur automatically and are retried until they\n+ * indicate it is safe to proceed.\n+ */\n+public class RateLimitCheckerTest extends AbstractGitHubWireMockTest {\n+\n+    GHRateLimit rateLimit = null;\n+    GHRateLimit previousLimit = null;\n+    Date testStartDate = new Date();\n+\n+    public RateLimitCheckerTest() {\n+        useDefaultGitHub = false;\n+    }\n+\n+    @Override\n+    protected WireMockConfiguration getWireMockOptions() {\n+\n+        return super.getWireMockOptions().extensions(ResponseTemplateTransformer.builder()\n+                .global(true)\n+                .maxCacheEntries(0L)\n+                .helper(\"testStartDate\", new Helper<Object>() {\n+                    private HandlebarsCurrentDateHelper helper = new HandlebarsCurrentDateHelper();\n+                    @Override\n+                    public Object apply(final Object context, final Options options) throws IOException {\n+                        return this.helper.apply(RateLimitCheckerTest.this.testStartDate, options);\n+                    }\n+                })\n+                .build());\n+    }\n+\n+    @Test\n+    public void testGitHubRateLimit() throws Exception {\n+        // Customized response that templates the date to keep things working\n+        snapshotNotAllowed();\n+\n+        assertThat(mockGitHub.getRequestCount(), equalTo(0));\n+\n+        // // 4897 is just the what the limit was when the snapshot was taken\n+        // previousLimit = GHRateLimit\n+        // .fromHeaderRecord(new GHRateLimit.Record(5000, 4897, System.currentTimeMillis() / 1000L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1904c82941e31c68d28e9b6c595371de7f3bbbf0"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA1MzU3Njc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQyMDo1NjoxNlrOJhlmuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNlQyMzo0NDo1M1rOJiiNOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE5ODkwNA==", "bodyText": "Is there an official source out there that expresses this?", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r639198904", "createdAt": "2021-05-25T20:56:16Z", "author": {"login": "steve-thousand"}, "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -311,19 +314,39 @@ public GitHubBuilder withConnector(HttpConnector connector) {\n     }\n \n     /**\n-     * With rate limit handler git hub builder.\n+     * Adds a {@link RateLimitHandler} to this {@link GitHubBuilder}.\n+     * <p>\n+     * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n+     * number of requests remaining is returned in the response header and can also be requested using\n+     * {@link GitHub#getRateLimit()}. This requests per interval is referred to as the \"rate limit\".\n+     * </p>\n+     * <p>\n+     * When the remaining number of requests reaches zero, the next request will return an error. If this happens,\n+     * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n+     * </p>\n+     * <p>\n+     * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68fe3b39d39a05565299e6d5e764f4cf22f3505"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTI1MTQ2Ng==", "bodyText": "https://docs.github.com/en/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r639251466", "createdAt": "2021-05-25T22:33:16Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -311,19 +314,39 @@ public GitHubBuilder withConnector(HttpConnector connector) {\n     }\n \n     /**\n-     * With rate limit handler git hub builder.\n+     * Adds a {@link RateLimitHandler} to this {@link GitHubBuilder}.\n+     * <p>\n+     * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n+     * number of requests remaining is returned in the response header and can also be requested using\n+     * {@link GitHub#getRateLimit()}. This requests per interval is referred to as the \"rate limit\".\n+     * </p>\n+     * <p>\n+     * When the remaining number of requests reaches zero, the next request will return an error. If this happens,\n+     * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n+     * </p>\n+     * <p>\n+     * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE5ODkwNA=="}, "originalCommit": {"oid": "a68fe3b39d39a05565299e6d5e764f4cf22f3505"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTc2NDAwNQ==", "bodyText": "So then \"GitHub treats clients ... harshly\" refers to the further abuse rate limit apart from the regular rate limit?\nMy understanding is that the abuse rate limit is intended to limit something entirely different (too fast/concurrent calls/expensive calls vs exceeding total allowed calls per minute/hour).", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r639764005", "createdAt": "2021-05-26T14:09:32Z", "author": {"login": "steve-thousand"}, "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -311,19 +314,39 @@ public GitHubBuilder withConnector(HttpConnector connector) {\n     }\n \n     /**\n-     * With rate limit handler git hub builder.\n+     * Adds a {@link RateLimitHandler} to this {@link GitHubBuilder}.\n+     * <p>\n+     * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n+     * number of requests remaining is returned in the response header and can also be requested using\n+     * {@link GitHub#getRateLimit()}. This requests per interval is referred to as the \"rate limit\".\n+     * </p>\n+     * <p>\n+     * When the remaining number of requests reaches zero, the next request will return an error. If this happens,\n+     * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n+     * </p>\n+     * <p>\n+     * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE5ODkwNA=="}, "originalCommit": {"oid": "a68fe3b39d39a05565299e6d5e764f4cf22f3505"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDE5MTgwMw==", "bodyText": "Ah sorry, it is this:\nhttps://docs.github.com/en/rest/guides/best-practices-for-integrators#dealing-with-rate-limits\n\nIf you hit a rate limit, it's expected that you back off from making requests and try again later when you're permitted to do so. Failure to do so may result in the banning of your app.", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r640191803", "createdAt": "2021-05-26T23:44:53Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -311,19 +314,39 @@ public GitHubBuilder withConnector(HttpConnector connector) {\n     }\n \n     /**\n-     * With rate limit handler git hub builder.\n+     * Adds a {@link RateLimitHandler} to this {@link GitHubBuilder}.\n+     * <p>\n+     * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n+     * number of requests remaining is returned in the response header and can also be requested using\n+     * {@link GitHub#getRateLimit()}. This requests per interval is referred to as the \"rate limit\".\n+     * </p>\n+     * <p>\n+     * When the remaining number of requests reaches zero, the next request will return an error. If this happens,\n+     * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n+     * </p>\n+     * <p>\n+     * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE5ODkwNA=="}, "originalCommit": {"oid": "a68fe3b39d39a05565299e6d5e764f4cf22f3505"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1861, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}