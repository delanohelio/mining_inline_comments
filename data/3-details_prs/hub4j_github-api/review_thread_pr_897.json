{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyNjEzMTcz", "number": 897, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1OTo0MlrOETknQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoxNDowMFrOETk56w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU4MjcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1OTo0MlrOG5YPkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzo0MToxNFrOG89xLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTIxNg==", "bodyText": "@bonnie-young  Could you tell me why we need two new constructors?\nCould we add an templateRepository(boolean) method to the builder instead?", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462819216", "createdAt": "2020-07-30T07:59:42Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java", "diffHunk": "@@ -20,6 +22,22 @@\n         this.builder.with(\"name\", name);\n     }\n \n+    GHCreateRepositoryBuilder(GitHub root, String apiUrlTail, String name, Boolean isTemplate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTc1OQ==", "bodyText": "yes, you are right! sorry for my carelessness.", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r466579759", "createdAt": "2020-08-06T17:41:14Z", "author": {"login": "bonnie-young"}, "path": "src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java", "diffHunk": "@@ -20,6 +22,22 @@\n         this.builder.with(\"name\", name);\n     }\n \n+    GHCreateRepositoryBuilder(GitHub root, String apiUrlTail, String name, Boolean isTemplate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTIxNg=="}, "originalCommit": {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU5Njg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODowNDowOFrOG5YYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowODozM1rOG8-tPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMTQ4MA==", "bodyText": "Similar to my previous comment could we have a fromTemplateRepository(String templateOwner, String templateRepo) method?   I think the create() method could have .withPreview(BAPTISE) set in general without any negative effect, but I could be wrong.", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462821480", "createdAt": "2020-07-30T08:04:08Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java", "diffHunk": "@@ -211,4 +229,15 @@ public GHRepository create() throws IOException {\n         return builder.method(\"POST\").withUrlPath(apiUrlTail).fetch(GHRepository.class).wrap(root);\n     }\n \n+    /**\n+     * Creates a repository with all the parameters, and with Preview BAPTISE for template repo.\n+     *\n+     * @return the gh repository\n+     * @throws IOException\n+     *             if repsitory cannot be created\n+     */\n+    public GHRepository createWithTemplate() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NTEzNA==", "bodyText": "According to the  official doc , I don't think we can add an fromTemplateRepository(String templateOwner, String templateRepo) to the builder, Because templateOwner and templateRepo are parts of the request url not parameters. anyway,  I will try it out, and find the result.\n\"create() method could have .withPreview(BAPTISE) set in general without any negative effect\" \u2014\u2014 I will try it later also, thanks for your idea.", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r466595134", "createdAt": "2020-08-06T18:08:33Z", "author": {"login": "bonnie-young"}, "path": "src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java", "diffHunk": "@@ -211,4 +229,15 @@ public GHRepository create() throws IOException {\n         return builder.method(\"POST\").withUrlPath(apiUrlTail).fetch(GHRepository.class).wrap(root);\n     }\n \n+    /**\n+     * Creates a repository with all the parameters, and with Preview BAPTISE for template repo.\n+     *\n+     * @return the gh repository\n+     * @throws IOException\n+     *             if repsitory cannot be created\n+     */\n+    public GHRepository createWithTemplate() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMTQ4MA=="}, "originalCommit": {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTYwOTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHOrganization.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODowNzo1MlrOG5YgiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxNDo0NDoyOFrOG97j6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzU2MA==", "bodyText": "Ah, I see.  The create from template repository has almost none of the parameters of general repository creation.\nStill I think that limitation is something that could be explained in the javadoc for fromTemplateRepository(String templateOwner, String templateRepo) and include a link to the GitHub docs.\nWhat you've done is good: guiding users to the a non-failure path.  However, in this case, I'd rather reduce the surface area and added code in this library.\nAlso add @Preview and @Deprecated annotations to the methods that call GitHub Preview APIs.", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462823560", "createdAt": "2020-07-30T08:07:52Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHOrganization.java", "diffHunk": "@@ -100,6 +100,50 @@ public GHCreateRepositoryBuilder createRepository(String name) {\n         return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name);\n     }\n \n+    /**\n+     * Starts a builder that creates a new repository.\n+     *\n+     * <p>\n+     * You use the returned builder to set various properties, then call {@link GHCreateRepositoryBuilder#create()} to\n+     * finally create a repository.\n+     *\n+     * @param name\n+     *            the name\n+     * @param isTemplate\n+     *            the is_template\n+     * @return the gh create repository builder\n+     */\n+    public GHCreateRepositoryBuilder createRepositoryWithParametersIsTemplate(String name, Boolean isTemplate) {\n+        return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name, isTemplate);\n+    }\n+\n+    /**\n+     * Starts a builder that creates a new repository.\n+     *\n+     * <p>\n+     * You use the returned builder to set various properties, then call\n+     * {@link GHCreateRepositoryBuilder#createWithTemplate()} to finally create a repository.\n+     *\n+     * @param templateOwner\n+     *            the owner of template repository\n+     * @param templateRepo\n+     *            the template repository\n+     * @param name\n+     *            the name of repository to be created\n+     * @param owner\n+     *            the organization of repository to be created\n+     * @return the gh create repository builder\n+     */\n+    public GHCreateRepositoryBuilder createRepositoryWithTemplate(String templateRepo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMTMyMg==", "bodyText": "\u201cAlso add @Preview and @deprecated annotations to the methods that call GitHub Preview APIs.\u201d \u2014\u2014 I see. Thank you for reminding me. But I don't know why need to add the @deprecated annotation.", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r466601322", "createdAt": "2020-08-06T18:19:56Z", "author": {"login": "bonnie-young"}, "path": "src/main/java/org/kohsuke/github/GHOrganization.java", "diffHunk": "@@ -100,6 +100,50 @@ public GHCreateRepositoryBuilder createRepository(String name) {\n         return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name);\n     }\n \n+    /**\n+     * Starts a builder that creates a new repository.\n+     *\n+     * <p>\n+     * You use the returned builder to set various properties, then call {@link GHCreateRepositoryBuilder#create()} to\n+     * finally create a repository.\n+     *\n+     * @param name\n+     *            the name\n+     * @param isTemplate\n+     *            the is_template\n+     * @return the gh create repository builder\n+     */\n+    public GHCreateRepositoryBuilder createRepositoryWithParametersIsTemplate(String name, Boolean isTemplate) {\n+        return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name, isTemplate);\n+    }\n+\n+    /**\n+     * Starts a builder that creates a new repository.\n+     *\n+     * <p>\n+     * You use the returned builder to set various properties, then call\n+     * {@link GHCreateRepositoryBuilder#createWithTemplate()} to finally create a repository.\n+     *\n+     * @param templateOwner\n+     *            the owner of template repository\n+     * @param templateRepo\n+     *            the template repository\n+     * @param name\n+     *            the name of repository to be created\n+     * @param owner\n+     *            the organization of repository to be created\n+     * @return the gh create repository builder\n+     */\n+    public GHCreateRepositoryBuilder createRepositoryWithTemplate(String templateRepo,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzU2MA=="}, "originalCommit": {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5MjE2OQ==", "bodyText": "\u201cAlso add @Preview and @deprecated annotations to the methods that call GitHub Preview APIs.\u201d \u2014\u2014 I see. Thank you for reminding me. But I don't know why need to add the @deprecated annotation.\n\nI found the answer from oracle official doc:\nWhen to Deprecate\nWhen you design an API, carefully consider whether it supersedes an old API. If it does, and you wish to encourage developers (users of the API) to migrate to the new API, then deprecate the old API. Valid reasons to deprecate an API include:\n\nIt is insecure, buggy, or highly inefficient (I got  this point)\nIt is going away in a future release\nIt encourages bad coding practices", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r467592169", "createdAt": "2020-08-09T14:44:28Z", "author": {"login": "bonnie-young"}, "path": "src/main/java/org/kohsuke/github/GHOrganization.java", "diffHunk": "@@ -100,6 +100,50 @@ public GHCreateRepositoryBuilder createRepository(String name) {\n         return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name);\n     }\n \n+    /**\n+     * Starts a builder that creates a new repository.\n+     *\n+     * <p>\n+     * You use the returned builder to set various properties, then call {@link GHCreateRepositoryBuilder#create()} to\n+     * finally create a repository.\n+     *\n+     * @param name\n+     *            the name\n+     * @param isTemplate\n+     *            the is_template\n+     * @return the gh create repository builder\n+     */\n+    public GHCreateRepositoryBuilder createRepositoryWithParametersIsTemplate(String name, Boolean isTemplate) {\n+        return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name, isTemplate);\n+    }\n+\n+    /**\n+     * Starts a builder that creates a new repository.\n+     *\n+     * <p>\n+     * You use the returned builder to set various properties, then call\n+     * {@link GHCreateRepositoryBuilder#createWithTemplate()} to finally create a repository.\n+     *\n+     * @param templateOwner\n+     *            the owner of template repository\n+     * @param templateRepo\n+     *            the template repository\n+     * @param name\n+     *            the name of repository to be created\n+     * @param owner\n+     *            the organization of repository to be created\n+     * @return the gh create repository builder\n+     */\n+    public GHCreateRepositoryBuilder createRepositoryWithTemplate(String templateRepo,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzU2MA=="}, "originalCommit": {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTYxOTc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/kohsuke/github/GHOrganizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoxMDo0NlrOG5Ym6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoxMDo0NlrOG5Ym6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNTE5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GHRepository repository = org.createRepositoryWithParametersIsTemplate(GITHUB_API_TEMPLATE_TEST, true)\n          \n          \n            \n                            .description(\"a test template repository used to test kohsuke's github-api\")\n          \n          \n            \n                    GHRepository repository = org.createRepository(GITHUB_API_TEMPLATE_TEST)\n          \n          \n            \n                            .templateRepository(true)\n          \n          \n            \n                            .description(\"a test template repository used to test kohsuke's github-api\")", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462825192", "createdAt": "2020-07-30T08:10:46Z", "author": {"login": "bitwiseman"}, "path": "src/test/java/org/kohsuke/github/GHOrganizationTest.java", "diffHunk": "@@ -56,6 +57,38 @@ public void testCreateRepositoryWithAutoInitialization() throws IOException {\n         Assert.assertNotNull(repository.getReadme());\n     }\n \n+    @Test\n+    public void testCreateRepositoryWithParametersIsTemplate() throws IOException {\n+        cleanupRepository(GITHUB_API_TEST_ORG + '/' + GITHUB_API_TEMPLATE_TEST);\n+\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+        GHRepository repository = org.createRepositoryWithParametersIsTemplate(GITHUB_API_TEMPLATE_TEST, true)\n+                .description(\"a test template repository used to test kohsuke's github-api\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTYzMDUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/kohsuke/github/GHOrganizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoxNDowMFrOG5Yt2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoxNDowMFrOG5Yt2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNjk3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GHRepository repository = org\n          \n          \n            \n                            .createRepositoryWithTemplate(GITHUB_API_TEMPLATE_TEST,\n          \n          \n            \n                                    GITHUB_API_TEST_ORG,\n          \n          \n            \n                                    GITHUB_API_TEST,\n          \n          \n            \n                                    GITHUB_API_TEST_ORG)\n          \n          \n            \n                            .createWithTemplate();\n          \n          \n            \n                    GHRepository repository = org.createRepository(GITHUB_API_TEST) \n          \n          \n            \n                            .owner(GITHUB_API_TEST_ORG)\n          \n          \n            \n                            .fromTemplateRepository(GITHUB_API_TEST_ORG, GITHUB_API_TEMPLATE_TEST)\n          \n          \n            \n                            .create();", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462826970", "createdAt": "2020-07-30T08:14:00Z", "author": {"login": "bitwiseman"}, "path": "src/test/java/org/kohsuke/github/GHOrganizationTest.java", "diffHunk": "@@ -56,6 +57,38 @@ public void testCreateRepositoryWithAutoInitialization() throws IOException {\n         Assert.assertNotNull(repository.getReadme());\n     }\n \n+    @Test\n+    public void testCreateRepositoryWithParametersIsTemplate() throws IOException {\n+        cleanupRepository(GITHUB_API_TEST_ORG + '/' + GITHUB_API_TEMPLATE_TEST);\n+\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+        GHRepository repository = org.createRepositoryWithParametersIsTemplate(GITHUB_API_TEMPLATE_TEST, true)\n+                .description(\"a test template repository used to test kohsuke's github-api\")\n+                .homepage(\"http://github-api.kohsuke.org/\")\n+                .team(org.getTeamByName(\"Core Developers\"))\n+                .autoInit(true)\n+                .create();\n+\n+        Assert.assertNotNull(repository);\n+        Assert.assertNotNull(repository.getReadme());\n+    }\n+\n+    @Test\n+    public void testCreateRepositoryWithTemplate() throws IOException {\n+        cleanupRepository(GITHUB_API_TEST_ORG + '/' + GITHUB_API_TEST);\n+\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+        GHRepository repository = org\n+                .createRepositoryWithTemplate(GITHUB_API_TEMPLATE_TEST,\n+                        GITHUB_API_TEST_ORG,\n+                        GITHUB_API_TEST,\n+                        GITHUB_API_TEST_ORG)\n+                .createWithTemplate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1810, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}