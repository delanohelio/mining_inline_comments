{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTA1NTg3", "number": 665, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwODozNTozM1rODXxEeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwODozNTozM1rODXxEeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjQ3ODAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwODozNTozM1rOFdPfAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwODozNTozM1rOFdPfAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIwNjcyMw==", "bodyText": "This refers to https://github.com/github-api/github-api/pull/665/files#diff-02b86edbc1ffd10d08e7049e7a842fc8R9.", "url": "https://github.com/hub4j/github-api/pull/665#discussion_r366206723", "createdAt": "2020-01-14T08:35:33Z", "author": {"login": "bitwiseman"}, "path": "src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.kohsuke.github.extras.okhttp3;\n+\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import okhttp3.Cache;\n+import okhttp3.OkHttpClient;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.kohsuke.github.AbstractGitHubWireMockTest;\n+import org.kohsuke.github.GHContent;\n+import org.kohsuke.github.GHException;\n+import org.kohsuke.github.GHFileNotFoundException;\n+import org.kohsuke.github.GHIssueState;\n+import org.kohsuke.github.GHPullRequest;\n+import org.kohsuke.github.GHRef;\n+import org.kohsuke.github.GHRepository;\n+import org.kohsuke.github.GitHub;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.hamcrest.core.Is.is;\n+\n+/**\n+ * Test showing the behavior of OkHttpConnector cache with GitHub 404 responses.\n+ *\n+ * @author Liam Newman\n+ */\n+public class GitHubCachingTest extends AbstractGitHubWireMockTest {\n+\n+    public GitHubCachingTest() {\n+        useDefaultGitHub = false;\n+    }\n+\n+    String testRefName = \"heads/test/content_ref_cache\";\n+\n+    @Override\n+    protected WireMockConfiguration getWireMockOptions() {\n+        return super.getWireMockOptions()\n+                .extensions(ResponseTemplateTransformer.builder().global(true).maxCacheEntries(0L).build());\n+    }\n+\n+    @Before\n+    public void setupRepo() throws Exception {\n+        if (mockGitHub.isUseProxy()) {\n+            for (GHPullRequest pr : getRepository(this.gitHubBeforeAfter).getPullRequests(GHIssueState.OPEN)) {\n+                pr.close();\n+            }\n+            try {\n+                GHRef ref = getRepository(this.gitHubBeforeAfter).getRef(testRefName);\n+                ref.delete();\n+            } catch (IOException e) {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void OkHttpConnector_Cache_MaxAgeDefault_Zero_GitHubRef_Error_runnable() throws Exception {\n+\n+        requireProxy(\"This test method can be run locally for debugging and analyzing.\");\n+        OkHttpConnector_Cache_MaxAgeDefault_Zero_GitHubRef_Error();\n+    }\n+\n+    @Ignore(\"The wiremock snapshot files attached to this test method show what was sent to and from the server during a run, but they aren't re-runnable - not templated.\")\n+    @Test\n+    public void OkHttpConnector_Cache_MaxAgeDefault_Zero_GitHubRef_Error() throws Exception {\n+\n+        // requireProxy(\"For clarity. Will switch to snapshot shortly.\");\n+        // snapshotNotAllowed();\n+\n+        OkHttpClient client = createClient(true);\n+        OkHttpConnector connector = new OkHttpConnector(client);\n+\n+        this.gitHub = getGitHubBuilder().withEndpoint(mockGitHub.apiServer().baseUrl())\n+                .withConnector(connector)\n+                .build();\n+\n+        // Alternate client also doing caching but staying in a good state\n+        // We use this to do sanity checks and other information gathering\n+        GitHub gitHub2 = getGitHubBuilder().withEndpoint(mockGitHub.apiServer().baseUrl())\n+                .withConnector(new OkHttpConnector(createClient(true)))\n+                .build();\n+\n+        // Create a branch from a known conflicting branch\n+        GHRepository repo = getRepository(gitHub);\n+\n+        String baseSha = repo.getRef(\"heads/test/unmergeable\").getObject().getSha();\n+\n+        GHRef ref;\n+        ref = repo.createRef(\"refs/\" + testRefName, baseSha);\n+\n+        // Verify we can query the created ref\n+        ref = repo.getRef(testRefName);\n+\n+        // Verify we can query the created ref from cache\n+        ref = repo.getRef(testRefName);\n+\n+        // Delete the ref\n+        ref.delete();\n+\n+        // This is just to show this isn't a race condition\n+        Thread.sleep(2000);\n+\n+        // Try to get the non-existant ref (GHFileNotFound)\n+        try {\n+            repo.getRef(testRefName);\n+            fail();\n+        } catch (GHFileNotFoundException e) {\n+            // expected\n+\n+            // FYI: Querying again when the item is actually not present does not produce a 304\n+            // It produces another 404,\n+            // Try to get the non-existant ref (GHFileNotFound)\n+            try {\n+                repo.getRef(testRefName);\n+                fail();\n+            } catch (GHFileNotFoundException ex) {\n+                // expected\n+            }\n+\n+        }\n+\n+        // This is just to show this isn't a race condition\n+        Thread.sleep(2000);\n+\n+        ref = repo.createRef(\"refs/\" + testRefName, baseSha);\n+\n+        // Verify ref exists and can be queried from uncached connection\n+        // Expected: success\n+        // Actual: still GHFileNotFound due to caching: GitHub incorrectly returns 304\n+        // even though contents of the ref have changed.\n+        //\n+        // There source of this issue seems to be that 404's do not return an ETAG,\n+        // so the cache falls back to using \"If-Modified-Since\" which is erroneously returns a 304.\n+        //\n+        // NOTE: This is even worse than you might think: 404 responses don't return an ETAG, but 304 responses do.\n+        //\n+        // Due erroneous 304 returned from \"If-Modified-Since\", the ETAG returned by the first 304", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72aedbb76c8a212e654c211a193625e311b452c3"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1839, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}