{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MzMyMzI5", "number": 716, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo1OToyM1rODijvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowMTo0OFrODijwng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTYzNzM5OnYy", "diffSide": "LEFT", "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo1OToyM1rOFt39mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo1OToyM1rOFt39mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NzEzMA==", "bodyText": "This is the special case code that we had before.", "url": "https://github.com/hub4j/github-api/pull/716#discussion_r383647130", "createdAt": "2020-02-25T03:59:23Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "diffHunk": "@@ -443,30 +445,6 @@ private static IOException interpretApiError(IOException e,\n         return e;\n     }\n \n-    /**\n-     * Sets the response headers on objects that need it. Ideally this would be handled by the objects themselves, but\n-     * currently they do not have access to {@link GitHubResponse.ResponseInfo} after the\n-     *\n-     * @param responseInfo\n-     *            the response info\n-     * @param readValue\n-     *            the object to consider adding headers to.\n-     * @param <T>\n-     *            type of the object\n-     */\n-    private static <T> void setResponseHeaders(GitHubResponse.ResponseInfo responseInfo, T readValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTYzODQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHObject.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowMDoxNlrOFt3-PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowMDoxNlrOFt3-PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NzI5Mw==", "bodyText": "This is what we do instead of the special case.", "url": "https://github.com/hub4j/github-api/pull/716#discussion_r383647293", "createdAt": "2020-02-25T04:00:16Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHObject.java", "diffHunk": "@@ -33,6 +34,19 @@\n     GHObject() {\n     }\n \n+    /**\n+     * Called by Jackson\n+     * \n+     * @param responseInfo\n+     *            the {@link GitHubResponse.ResponseInfo} to get headers from.\n+     */\n+    @JacksonInject\n+    protected void setResponseHeaderFields(@CheckForNull GitHubResponse.ResponseInfo responseInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTY0MDYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHRateLimit.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowMTo0OFrOFt3_gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDowMTo0OFrOFt3_gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NzYxOQ==", "bodyText": "Also, since we now have the the responseInfo injected during binding, we can make Record fully immutable.  We don't have \"recalculate\" after creation.", "url": "https://github.com/hub4j/github-api/pull/716#discussion_r383647619", "createdAt": "2020-02-25T04:01:48Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHRateLimit.java", "diffHunk": "@@ -308,31 +306,37 @@ private UnknownLimitRecord() {\n          * @param resetEpochSeconds\n          *            the reset epoch seconds\n          */\n-        @JsonCreator\n         public Record(@JsonProperty(value = \"limit\", required = true) int limit,\n                 @JsonProperty(value = \"remaining\", required = true) int remaining,\n                 @JsonProperty(value = \"reset\", required = true) long resetEpochSeconds) {\n             this(limit, remaining, resetEpochSeconds, null);\n         }\n \n         /**\n-         * Instantiates a new Record.\n+         * Instantiates a new Record. Called by Jackson data binding or during header parsing.\n          *\n          * @param limit\n          *            the limit\n          * @param remaining\n          *            the remaining\n          * @param resetEpochSeconds\n          *            the reset epoch seconds\n-         * @param updatedAt\n-         *            the updated at\n+         * @param responseInfo\n+         *            the response info\n          */\n-        @SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Deprecated\")\n-        public Record(int limit, int remaining, long resetEpochSeconds, @CheckForNull String updatedAt) {\n+        @JsonCreator\n+        Record(@JsonProperty(value = \"limit\", required = true) int limit,\n+                @JsonProperty(value = \"remaining\", required = true) int remaining,\n+                @JsonProperty(value = \"reset\", required = true) long resetEpochSeconds,\n+                @JacksonInject @CheckForNull GitHubResponse.ResponseInfo responseInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1865, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}