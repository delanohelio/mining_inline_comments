{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxOTg1Njg5", "number": 694, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0MToxMVrODd1wfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1ODowOVrODd4aGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjE2MDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/Requester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0MToxMVrOFmrLCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0MToxMVrOFmrLCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NzU0NA==", "bodyText": "It is better to view this in split diff view.  Two methods got squashed down and blended.", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376097544", "createdAt": "2020-02-06T21:41:11Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,81 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1234c2e99e8265e87cc22eab6476e4f1fc77f2d1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjE2MzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/Requester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0MjoxOFrOFmrM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0MjoxOFrOFmrM5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5ODAyMw==", "bodyText": "This ensures that on retry we don't somehow accidentally use the connection from the previous loop.", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376098023", "createdAt": "2020-02-06T21:42:18Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,81 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1234c2e99e8265e87cc22eab6476e4f1fc77f2d1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjE3OTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/Requester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0Nzo1NVrOFmrW5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo0Nzo1NVrOFmrW5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwMDU4Mw==", "bodyText": "We note the rate limit change as soon as we have confidence that we have enough information to do so.\nBetter for race conditions.", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376100583", "createdAt": "2020-02-06T21:47:55Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,81 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;\n             uc = setupConnection(url);\n \n             try {\n-                return _fetchOrRetry(supplier, CONNECTION_ERROR_RETRIES);\n-            } catch (IOException e) {\n-                handleApiError(e);\n-            } finally {\n+                // This is where the request is sent and response is processing starts\n+                responseCode = uc.getResponseCode();\n+                responseMessage = uc.getResponseMessage();\n                 noteRateLimit(tailApiUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1234c2e99e8265e87cc22eab6476e4f1fc77f2d1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI0NzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/Requester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoxMTo1OVrOFmsBDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoxMTo1OVrOFmsBDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExMTM3NA==", "bodyText": "If we have an error condition that we can detect early, skip calling the lambda.", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376111374", "createdAt": "2020-02-06T22:11:59Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,89 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;\n             uc = setupConnection(url);\n \n             try {\n-                return _fetchOrRetry(supplier, CONNECTION_ERROR_RETRIES);\n-            } catch (IOException e) {\n-                handleApiError(e);\n-            } finally {\n+                // This is where the request is sent and response is processing starts\n+                responseCode = uc.getResponseCode();\n+                responseMessage = uc.getResponseMessage();\n                 noteRateLimit(tailApiUrl);\n+\n+                // for this workaround, we can retry now\n+                if (isInvalidCached404Response(responseCode)) {\n+                    continue;\n+                }\n+                if (!(isRateLimitResponse(responseCode) || isAbuseLimitResponse(responseCode))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825c36c15eb427fb2fd4366e95da0111722bc6da"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI1MTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/Requester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoxMzo0MVrOFmsD2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoxMzo0MVrOFmsD2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExMjA4OA==", "bodyText": "If the error is not transient, process it if needed and throw.", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376112088", "createdAt": "2020-02-06T22:13:41Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,89 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;\n             uc = setupConnection(url);\n \n             try {\n-                return _fetchOrRetry(supplier, CONNECTION_ERROR_RETRIES);\n-            } catch (IOException e) {\n-                handleApiError(e);\n-            } finally {\n+                // This is where the request is sent and response is processing starts\n+                responseCode = uc.getResponseCode();\n+                responseMessage = uc.getResponseMessage();\n                 noteRateLimit(tailApiUrl);\n+\n+                // for this workaround, we can retry now\n+                if (isInvalidCached404Response(responseCode)) {\n+                    continue;\n+                }\n+                if (!(isRateLimitResponse(responseCode) || isAbuseLimitResponse(responseCode))) {\n+                    return supplier.get();\n+                }\n+            } catch (IOException e) {\n+                // For transient errors, retry\n+                if (handledTransientConnectionError(e, url, retries)) {\n+                    continue;\n+                }\n+\n+                throw interpretApiError(e, responseCode, responseMessage, url, retries);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825c36c15eb427fb2fd4366e95da0111722bc6da"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI2NDA2OnYy", "diffSide": "LEFT", "path": "src/main/java/org/kohsuke/github/Requester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoxODo0OVrOFmsLsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoxODo0OVrOFmsLsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNDA5Ng==", "bodyText": "This case is handled in the main _fetch method now.  We pass in the best known values and don't have to guard against bad state here.", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376114096", "createdAt": "2020-02-06T22:18:49Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -1023,57 +1039,36 @@ private InputStream wrapStream(InputStream in) throws IOException {\n     /**\n      * Handle API error by either throwing it or by returning normally to retry.\n      */\n-    void handleApiError(IOException e) throws IOException {\n-        int responseCode;\n-        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825c36c15eb427fb2fd4366e95da0111722bc6da"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjU5NDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/Requester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1ODowOVrOFmvTdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1ODowOVrOFmvTdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NTIzOA==", "bodyText": "All of these were move from handleApiError.", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376165238", "createdAt": "2020-02-07T00:58:09Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,101 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;\n             uc = setupConnection(url);\n \n             try {\n-                return _fetchOrRetry(supplier, CONNECTION_ERROR_RETRIES);\n-            } catch (IOException e) {\n-                handleApiError(e);\n-            } finally {\n+                // This is where the request is sent and response is processing starts\n+                responseCode = uc.getResponseCode();\n+                responseMessage = uc.getResponseMessage();\n                 noteRateLimit(tailApiUrl);\n+                detectOTPRequired(responseCode);\n+\n+                // for this workaround, we can retry now\n+                if (isInvalidCached404Response(responseCode)) {\n+                    continue;\n+                }\n+                if (!(isRateLimitResponse(responseCode) || isAbuseLimitResponse(responseCode))) {\n+                    return supplier.get();\n+                }\n+            } catch (IOException e) {\n+                // For transient errors, retry\n+                if (handledTransientConnectionError(e, url, retries)) {\n+                    continue;\n+                }\n+\n+                throw interpretApiError(e, responseCode, responseMessage, url, retries);\n             }\n-        }\n-    }\n \n-    private <T> T _fetchOrRetry(SupplierThrows<T, IOException> supplier, int retries) throws IOException {\n-        int responseCode = -1;\n-        String responseMessage = null;\n-        // When retries equal 0 the previous call must return or throw, not retry again\n-        if (retries < 0) {\n-            throw new IllegalArgumentException(\"'retries' cannot be less than 0\");\n-        }\n+            handleLimitingErrors(responseCode);\n \n-        try {\n-            // This is where the request is sent and response is processing starts\n-            responseCode = uc.getResponseCode();\n-            responseMessage = uc.getResponseMessage();\n+        } while (--retries >= 0);\n \n-            // If we are caching and get an invalid cached 404, retry it.\n-            if (!retryInvalidCached404Response(responseCode, retries)) {\n-                return supplier.get();\n-            }\n-        } catch (FileNotFoundException e) {\n-            // java.net.URLConnection handles 404 exception as FileNotFoundException,\n-            // don't wrap exception in HttpException to preserve backward compatibility\n-            throw e;\n-        } catch (IOException e) {\n+        throw new GHIOException(\"Ran out of retries for URL: \" + url.toString());\n+    }\n \n-            if (!retryConnectionError(e, retries)) {\n-                throw new HttpException(responseCode, responseMessage, uc.getURL(), e);\n+    private void detectOTPRequired(int responseCode) throws GHIOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fb8d3730135aacafe20d102983698567b2786a"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1854, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}