{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDAyMDU5", "number": 719, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoxOTo1N1rODjoa4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NjozNlrODkUjuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njg4OTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHIssue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoxOTo1N1rOFvjP2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoxOTo1N1rOFvjP2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNDg4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // for backward compatibility with < 1.63, this collection needs to hold instances of Label, not GHLabel", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385404889", "createdAt": "2020-02-27T22:19:57Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHIssue.java", "diffHunk": "@@ -64,22 +64,14 @@\n     @SkipFromToString\n     protected String body;\n     // for backward compatibility with < 1.63, this collection needs to hold instances of Label, not GHLabel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5708d8d4db9c08e1e02b6c4310437b07bc7bff"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njg5MzEzOnYy", "diffSide": "LEFT", "path": "src/main/java/org/kohsuke/github/GHIssue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMTowNFrOFvjRzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMTowNFrOFvjRzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNTM5MQ==", "bodyText": "v1.63 is 5 years ago.", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385405391", "createdAt": "2020-02-27T22:21:04Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHIssue.java", "diffHunk": "@@ -63,23 +63,14 @@\n     protected int comments;\n     @SkipFromToString\n     protected String body;\n-    // for backward compatibility with < 1.63, this collection needs to hold instances of Label, not GHLabel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njg5NTQyOnYy", "diffSide": "LEFT", "path": "src/main/java/org/kohsuke/github/GHIssue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMTo1N1rOFvjTLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMTo1N1rOFvjTLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNTc0MQ==", "bodyText": "This is publicly visible, but not returned from any properties.  It exists in one spot (above).", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385405741", "createdAt": "2020-02-27T22:21:57Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHIssue.java", "diffHunk": "@@ -63,23 +63,14 @@\n     protected int comments;\n     @SkipFromToString\n     protected String body;\n-    // for backward compatibility with < 1.63, this collection needs to hold instances of Label, not GHLabel\n-    protected List<Label> labels;\n+    protected List<GHLabel> labels;\n     protected GHUser user;\n     protected String title, html_url;\n     protected GHIssue.PullRequest pull_request;\n     protected GHMilestone milestone;\n     protected GHUser closed_by;\n     protected boolean locked;\n \n-    /**\n-     * The type Label.\n-     *\n-     * @deprecated use {@link GHLabel}\n-     */\n-    public static class Label extends GHLabel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njg5Njg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHPerson.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMjozMVrOFvjUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMjozMVrOFvjUFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNTk3NA==", "bodyText": "Clean up to use even more of the existing code base.  Still behaves the same.", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385405974", "createdAt": "2020-02-27T22:22:31Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHPerson.java", "diffHunk": "@@ -115,31 +114,27 @@ protected synchronized void populate() throws IOException {\n      */\n     @Deprecated\n     public synchronized Iterable<List<GHRepository>> iterateRepositories(final int pageSize) {\n-        return new Iterable<List<GHRepository>>() {\n-            public Iterator<List<GHRepository>> iterator() {\n-                final Iterator<GHRepository[]> pager;\n-                try {\n-                    pager = GitHubPageIterator.create(root.getClient(),\n-                            GHRepository[].class,\n-                            root.createRequest().withUrlPath(\"users\", login, \"repos\").build(),\n-                            pageSize);\n-                } catch (MalformedURLException e) {\n-                    throw new GHException(\"Unable to build GitHub API URL\", e);\n+        return () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njg5ODAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHPerson.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMjo1OFrOFvjUzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMjo1OFrOFvjUzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNjE1OQ==", "bodyText": "This always returns \"\" anyway.  So, let's be explicit about it.", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385406159", "createdAt": "2020-02-27T22:22:58Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHPerson.java", "diffHunk": "@@ -178,22 +173,18 @@ public GHRepository getRepository(String name) throws IOException {\n      * @return the gravatar id\n      * @deprecated No longer available in the v3 API.\n      */\n+    @Deprecated\n     public String getGravatarId() {\n-        return gravatar_id;\n+        return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjkwMDgxOnYy", "diffSide": "LEFT", "path": "src/main/java/org/kohsuke/github/GHPerson.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMzo1OFrOFvjWcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyMzo1OFrOFvjWcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNjU3Nw==", "bodyText": "If this is null, it is still more meaningful that the \"\" returned from gravatar.", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385406577", "createdAt": "2020-02-27T22:23:58Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHPerson.java", "diffHunk": "@@ -178,22 +173,18 @@ public GHRepository getRepository(String name) throws IOException {\n      * @return the gravatar id\n      * @deprecated No longer available in the v3 API.\n      */\n+    @Deprecated\n     public String getGravatarId() {\n-        return gravatar_id;\n+        return \"\";\n     }\n \n     /**\n-     * Returns a string like 'https://secure.gravatar.com/avatar/0cb9832a01c22c083390f3c5dcb64105' that indicates the\n-     * avatar image URL.\n+     * Returns a string of the avatar image URL.\n      *\n      * @return the avatar url\n      */\n     public String getAvatarUrl() {\n-        if (avatar_url != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjkwMzE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyNDo1MlrOFvjX5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjoyNDo1MlrOFvjX5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNjk0OQ==", "bodyText": "Found a way to do this without dynamic classes.", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385406949", "createdAt": "2020-02-27T22:24:52Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -396,11 +398,7 @@ public GitHubBuilder withRateLimitChecker(@Nonnull RateLimitChecker coreRateLimi\n      * @return the git hub builder\n      */\n     public GitHubBuilder withProxy(final Proxy p) {\n-        return withConnector(new ImpatientHttpConnector(new HttpConnector() {\n-            public HttpURLConnection connect(URL url) throws IOException {\n-                return (HttpURLConnection) url.openConnection(p);\n-            }\n-        }));\n+        return withConnector(new ImpatientHttpConnector(url -> (HttpURLConnection) url.openConnection(p)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA1MDQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/kohsuke/github/AppTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0MToxMVrOFwkPZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo0NToxNFrOFwm2aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTczNA==", "bodyText": "Are these commented out intentionally?", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r386469734", "createdAt": "2020-03-02T15:41:11Z", "author": {"login": "kshultzCB"}, "path": "src/test/java/org/kohsuke/github/AppTest.java", "diffHunk": "@@ -861,10 +862,27 @@ public void notifications() throws Exception {\n         for (GHThread t : gitHub.listNotifications().nonBlocking(true).read(true)) {\n             if (!found) {\n                 found = true;\n+                // both thread an unread are included\n+                assertThat(t.getTitle(), is(\"Create a Jenkinsfile for Librecores CI in mor1kx\"));\n+                assertThat(t.getLastReadAt(), notNullValue());\n+                assertThat(t.isRead(), equalTo(true));\n+\n                 t.markAsRead(); // test this by calling it once on old notfication\n             }\n-            assertNotNull(t.getTitle());\n-            assertNotNull(t.getReason());\n+            assertThat(t.getReason(), oneOf(\"subscribed\", \"mention\", \"review_requested\", \"comment\"));\n+            assertThat(t.getTitle(), notNullValue());\n+            assertThat(t.getLastCommentUrl(), notNullValue());\n+            assertThat(t.getRepository(), notNullValue());\n+            assertThat(t.getUpdatedAt(), notNullValue());\n+            assertThat(t.getType(), oneOf(\"Issue\", \"PullRequest\"));\n+\n+            // both thread an unread are included\n+            // assertThat(t.getLastReadAt(), notNullValue());\n+            // assertThat(t.isRead(), equalTo(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMjQ4OQ==", "bodyText": "Yes, I meant this as a note to say, \"This query doesn't return only records where isRead() is true.\"", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r386512489", "createdAt": "2020-03-02T16:45:14Z", "author": {"login": "bitwiseman"}, "path": "src/test/java/org/kohsuke/github/AppTest.java", "diffHunk": "@@ -861,10 +862,27 @@ public void notifications() throws Exception {\n         for (GHThread t : gitHub.listNotifications().nonBlocking(true).read(true)) {\n             if (!found) {\n                 found = true;\n+                // both thread an unread are included\n+                assertThat(t.getTitle(), is(\"Create a Jenkinsfile for Librecores CI in mor1kx\"));\n+                assertThat(t.getLastReadAt(), notNullValue());\n+                assertThat(t.isRead(), equalTo(true));\n+\n                 t.markAsRead(); // test this by calling it once on old notfication\n             }\n-            assertNotNull(t.getTitle());\n-            assertNotNull(t.getReason());\n+            assertThat(t.getReason(), oneOf(\"subscribed\", \"mention\", \"review_requested\", \"comment\"));\n+            assertThat(t.getTitle(), notNullValue());\n+            assertThat(t.getLastCommentUrl(), notNullValue());\n+            assertThat(t.getRepository(), notNullValue());\n+            assertThat(t.getUpdatedAt(), notNullValue());\n+            assertThat(t.getType(), oneOf(\"Issue\", \"PullRequest\"));\n+\n+            // both thread an unread are included\n+            // assertThat(t.getLastReadAt(), notNullValue());\n+            // assertThat(t.isRead(), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTczNA=="}, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEwMzA2OnYy", "diffSide": "LEFT", "path": "src/main/java/org/kohsuke/github/GHRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1Mjo0OFrOFwkvLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1Mjo0OFrOFwkvLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzg2OA==", "bodyText": "It took me a few eye blinks to see this \ud83d\udcaf", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r386477868", "createdAt": "2020-03-02T15:52:48Z", "author": {"login": "kshultzCB"}, "path": "src/main/java/org/kohsuke/github/GHRepository.java", "diffHunk": "@@ -217,16 +219,6 @@ public String getHttpTransportUrl() {\n         return clone_url;\n     }\n \n-    /**\n-     * Git http transport url string.\n-     *\n-     * @return the string\n-     * @deprecated Typo of {@link #getHttpTransportUrl()}\n-     */\n-    public String gitHttpTransportUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEyMTU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/kohsuke/github/AppTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NjozNlrOFwk6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NjozNlrOFwk6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MDc1Ng==", "bodyText": "I think this is a typo. It shows up again on 879. Probably meant to be this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // both thread an unread are included\n          \n          \n            \n                            // both read and unread are included", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r386480756", "createdAt": "2020-03-02T15:56:36Z", "author": {"login": "kshultzCB"}, "path": "src/test/java/org/kohsuke/github/AppTest.java", "diffHunk": "@@ -861,10 +862,27 @@ public void notifications() throws Exception {\n         for (GHThread t : gitHub.listNotifications().nonBlocking(true).read(true)) {\n             if (!found) {\n                 found = true;\n+                // both thread an unread are included", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1868, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}