{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0Njc2MzQx", "number": 697, "title": "Refactor `Requester` into multiple smaller classes", "bodyText": "Description\nRefactoring from GitHub and Requester being monolithic centers of work to having the work split among smaller classes.  GitHub is still the root of interactions, but holds a reference to a GitHubClient that has all the connection and communication. Requester still remains as a thin helper that will be removed in a future change.\nImprovements\n\nAbstraction/encapsulation of  HttpUrlConnection interactions in GitHubHttpUrlConnectionClient\nBuilders and mostly immutable instances - better thread safety and clarity\nClient/Request/Response model in line with modern Http frameworks\nPagedIterable is the sole entry point for retrieval of all item arrays, lists, or iterables.\n*Iterable and *Iterator classes encapsulate all the work done to retrieve pages of items\n\nThis change encapsulates most of the dependencies on HttpUrlConnection as much as possible, to allow moving to other more modern frameworks at some point.  This also separates the concerns more clearly.\nThere's still some work to be done here, but this change is more than enough for now.", "createdAt": "2020-02-13T05:24:04Z", "url": "https://github.com/hub4j/github-api/pull/697", "merged": true, "mergeCommit": {"oid": "9018d72e97394abe9ab52ada3aad8013f28054f0"}, "closed": true, "closedAt": "2020-02-20T23:59:12Z", "author": {"login": "bitwiseman"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD0jSsABqjMwMzM1MzA4MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFlAnmAH2gAyMzc0Njc2MzQxOjFkYjRmY2E5ZGJjMGVlYjg0YzRhYWVlMDA3Zjg5MTU5ZThhNmE0MjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62d3cb8939ed7a9f3fc71ec44547b693de25cdbb", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/62d3cb8939ed7a9f3fc71ec44547b693de25cdbb", "committedDate": "2020-02-13T05:17:11Z", "message": "More JavaDocs"}, "afterCommit": {"oid": "653300a91a5b3d4b3596be5c69791d9ad534b8f7", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/653300a91a5b3d4b3596be5c69791d9ad534b8f7", "committedDate": "2020-02-13T06:00:31Z", "message": "JavaDocs and refactoring"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "653300a91a5b3d4b3596be5c69791d9ad534b8f7", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/653300a91a5b3d4b3596be5c69791d9ad534b8f7", "committedDate": "2020-02-13T06:00:31Z", "message": "JavaDocs and refactoring"}, "afterCommit": {"oid": "62eb088b8ec9bd7fc31dd976d3b746fe826230e8", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/62eb088b8ec9bd7fc31dd976d3b746fe826230e8", "committedDate": "2020-02-13T06:03:38Z", "message": "JavaDocs and refactoring"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62eb088b8ec9bd7fc31dd976d3b746fe826230e8", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/62eb088b8ec9bd7fc31dd976d3b746fe826230e8", "committedDate": "2020-02-13T06:03:38Z", "message": "JavaDocs and refactoring"}, "afterCommit": {"oid": "759121541d2d91285b1cf8083ed57444a16fb424", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/759121541d2d91285b1cf8083ed57444a16fb424", "committedDate": "2020-02-13T06:10:19Z", "message": "JavaDocs and refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTc1OTA4", "url": "https://github.com/hub4j/github-api/pull/697#pullrequestreview-357975908", "createdAt": "2020-02-13T06:16:32Z", "commit": {"oid": "759121541d2d91285b1cf8083ed57444a16fb424"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxNjozMlrOFpIITw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxNjozMlrOFpIITw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2OTEzNQ==", "bodyText": "This is the really the summary of this change - a refactoring from GitHub and Requester being monolithic centers of work to having the work split between GitHubClient, GitHubRequest, GitHubRequest.Builder, GitHubResponse, GitHubResponse.ResponseInfo, and various *Iterables and *Iterators.  Requester still remains as a thin helper and GitHub is still large but is mostly customer facing methods with GitHubClient handling internals.", "url": "https://github.com/hub4j/github-api/pull/697#discussion_r378669135", "createdAt": "2020-02-13T06:16:32Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -23,368 +23,24 @@\n  */\n package org.kohsuke.github;\n \n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.StringUtils;\n-\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.InterruptedIOException;\n-import java.io.Reader;\n-import java.io.UnsupportedEncodingException;\n-import java.lang.reflect.Array;\n-import java.lang.reflect.Field;\n-import java.net.HttpURLConnection;\n-import java.net.MalformedURLException;\n-import java.net.ProtocolException;\n-import java.net.SocketException;\n-import java.net.SocketTimeoutException;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.net.URL;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.NoSuchElementException;\n-import java.util.Objects;\n import java.util.function.Consumer;\n-import java.util.logging.Logger;\n-import java.util.zip.GZIPInputStream;\n \n-import javax.annotation.CheckForNull;\n import javax.annotation.Nonnull;\n-import javax.annotation.WillClose;\n-import javax.net.ssl.SSLHandshakeException;\n-\n-import static java.util.Arrays.asList;\n-import static java.util.logging.Level.*;\n-import static org.apache.commons.lang3.StringUtils.defaultString;\n-import static org.kohsuke.github.GitHub.MAPPER;\n-import static org.kohsuke.github.GitHub.connect;\n \n /**\n- * A builder pattern for making HTTP call and parsing its output.\n+ * A thin helper for {@link GitHubRequest.Builder} that includes {@link GitHubClient}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759121541d2d91285b1cf8083ed57444a16fb424"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b1258e33a6242de688386add8015958714d1c75", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/6b1258e33a6242de688386add8015958714d1c75", "committedDate": "2020-02-13T06:42:12Z", "message": "Major rewrite of Requester"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd68252b44adbe7951bd1dec3c08c63562e3919f", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/bd68252b44adbe7951bd1dec3c08c63562e3919f", "committedDate": "2020-02-13T06:42:12Z", "message": "Test cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82276837ac938a749c6dc639a4abae5864c3f008", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/82276837ac938a749c6dc639a4abae5864c3f008", "committedDate": "2020-02-13T06:42:12Z", "message": "Created Client/Request/Response classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7310a7074343740e6b81afc98f8abb1d20d44683", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/7310a7074343740e6b81afc98f8abb1d20d44683", "committedDate": "2020-02-13T06:42:12Z", "message": "Disable two tests due to spurious mocking failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd9245f6f2f230fa065a25bc21c87fdd0fe05847", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/dd9245f6f2f230fa065a25bc21c87fdd0fe05847", "committedDate": "2020-02-13T06:42:12Z", "message": "Progress commit on moving to Client/Request/Response refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6c75e1f993d032793d16a33da6861a4502bfb6a", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/f6c75e1f993d032793d16a33da6861a4502bfb6a", "committedDate": "2020-02-13T06:42:12Z", "message": "More refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60c045a71324f8a3fcb4315b91aecd0bce0b97a7", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/60c045a71324f8a3fcb4315b91aecd0bce0b97a7", "committedDate": "2020-02-13T06:42:12Z", "message": "Delete mocking test that is just too brittle to live"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad45a74f875c775d99974434c9c4849ee7f85ffd", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/ad45a74f875c775d99974434c9c4849ee7f85ffd", "committedDate": "2020-02-13T06:42:12Z", "message": "Further clean up of refactored classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90489e439207056356f7052f3ecba294307d9dc8", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/90489e439207056356f7052f3ecba294307d9dc8", "committedDate": "2020-02-13T06:42:12Z", "message": "JavaDocs and refactoring"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "759121541d2d91285b1cf8083ed57444a16fb424", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/759121541d2d91285b1cf8083ed57444a16fb424", "committedDate": "2020-02-13T06:10:19Z", "message": "JavaDocs and refactoring"}, "afterCommit": {"oid": "90489e439207056356f7052f3ecba294307d9dc8", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/90489e439207056356f7052f3ecba294307d9dc8", "committedDate": "2020-02-13T06:42:12Z", "message": "JavaDocs and refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c6959cb4afe1838ef8c3540d3eb54858d4fd7cc", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/0c6959cb4afe1838ef8c3540d3eb54858d4fd7cc", "committedDate": "2020-02-13T07:52:45Z", "message": "Merge remote-tracking branch 'github-api/master' into tast/response-info"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MDEzNzcx", "url": "https://github.com/hub4j/github-api/pull/697#pullrequestreview-358013771", "createdAt": "2020-02-13T07:58:50Z", "commit": {"oid": "0c6959cb4afe1838ef8c3540d3eb54858d4fd7cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo1ODo1MFrOFpKBBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo1ODo1MFrOFpKBBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMDAzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                GHMyself getMyself() throws IOException {\n          \n          \n            \n                public GHMyself getMyself() throws IOException {", "url": "https://github.com/hub4j/github-api/pull/697#discussion_r378700039", "createdAt": "2020-02-13T07:58:50Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GitHub.java", "diffHunk": "@@ -535,17 +403,21 @@ public GHRateLimit rateLimit() throws IOException {\n      *             the io exception\n      */\n     @WithBridgeMethods(GHUser.class)\n-    public GHMyself getMyself() throws IOException {\n-        requireCredential();\n+    GHMyself getMyself() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6959cb4afe1838ef8c3540d3eb54858d4fd7cc"}, "originalPosition": 291}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9da4781759b9e02bac271b0fb44985280acd7f4d", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/9da4781759b9e02bac271b0fb44985280acd7f4d", "committedDate": "2020-02-13T07:59:15Z", "message": "Update src/main/java/org/kohsuke/github/GitHub.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/dc33e28452532b94c6d46e435c192ae043849ca9", "committedDate": "2020-02-13T16:37:07Z", "message": "Create GitHubHttpUrlConnectionClient to encapsulate interactions with HttpUrlConnection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDI3Mzk5", "url": "https://github.com/hub4j/github-api/pull/697#pullrequestreview-359427399", "createdAt": "2020-02-16T20:35:04Z", "commit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDozNTowNFrOFqVKuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDozNTowNFrOFqVKuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMTMyMw==", "bodyText": "Is there a circumstance where tailApiUrl will not start with a \"/\"? I didn't see any tests in GitHubConnectionTest that behave this way, so just wondering how we'd run up against this, and what it looks like when we do.", "url": "https://github.com/hub4j/github-api/pull/697#discussion_r379931323", "createdAt": "2020-02-16T20:35:04Z", "author": {"login": "kshultzCB"}, "path": "src/main/java/org/kohsuke/github/GitHubRequest.java", "diffHunk": "@@ -0,0 +1,651 @@\n+package org.kohsuke.github;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nonnull;\n+import javax.annotation.WillClose;\n+\n+import static java.util.Arrays.asList;\n+\n+/**\n+ * Class {@link GitHubRequest} represents an immutable instance used by the client to determine what information to\n+ * retrieve from a GitHub server. Use the {@link Builder} construct a {@link GitHubRequest}.\n+ * <p>\n+ * NOTE: {@link GitHubRequest} should include the data type to be returned. Any use cases where the same request should\n+ * be used to return different types of data could be handled in some other way. However, the return type is currently\n+ * not specified until late in the building process, so this is still untyped.\n+ * </p>\n+ */\n+class GitHubRequest {\n+\n+    private static final List<String> METHODS_WITHOUT_BODY = asList(\"GET\", \"DELETE\");\n+    private final List<Entry> args;\n+    private final Map<String, String> headers;\n+    private final String apiUrl;\n+    private final String urlPath;\n+    private final String method;\n+    private final InputStream body;\n+    private final boolean forceBody;\n+\n+    private final URL url;\n+\n+    private GitHubRequest(@Nonnull List<Entry> args,\n+            @Nonnull Map<String, String> headers,\n+            @Nonnull String apiUrl,\n+            @Nonnull String urlPath,\n+            @Nonnull String method,\n+            @CheckForNull InputStream body,\n+            boolean forceBody) throws MalformedURLException {\n+        this.args = Collections.unmodifiableList(new ArrayList<>(args));\n+        this.headers = Collections.unmodifiableMap(new LinkedHashMap<>(headers));\n+        this.apiUrl = apiUrl;\n+        this.urlPath = urlPath;\n+        this.method = method;\n+        this.body = body;\n+        this.forceBody = forceBody;\n+        String tailApiUrl = buildTailApiUrl();\n+        url = getApiURL(apiUrl, tailApiUrl);\n+    }\n+\n+    /**\n+     * Create a new {@link Builder}.\n+     * \n+     * @return a new {@link Builder}.\n+     */\n+    public static Builder<?> newBuilder() {\n+        return new Builder<>();\n+    }\n+\n+    /**\n+     * Gets the final GitHub API URL.\n+     */\n+    @Nonnull\n+    static URL getApiURL(String apiUrl, String tailApiUrl) throws MalformedURLException {\n+        if (tailApiUrl.startsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDI4NDUw", "url": "https://github.com/hub4j/github-api/pull/697#pullrequestreview-359428450", "createdAt": "2020-02-16T20:53:51Z", "commit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDo1Mzo1MVrOFqVPhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDo1Mzo1MVrOFqVPhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMjU0OQ==", "bodyText": "Comments like this are super helpful. :)\nAre there other places where we might need to do such a conversion? I only see one instance of replace('_', '-') in the whole plugin. Might be fine, it just surprised me that there aren't more.", "url": "https://github.com/hub4j/github-api/pull/697#discussion_r379932549", "createdAt": "2020-02-16T20:53:51Z", "author": {"login": "kshultzCB"}, "path": "src/main/java/org/kohsuke/github/GitHubRequest.java", "diffHunk": "@@ -0,0 +1,651 @@\n+package org.kohsuke.github;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nonnull;\n+import javax.annotation.WillClose;\n+\n+import static java.util.Arrays.asList;\n+\n+/**\n+ * Class {@link GitHubRequest} represents an immutable instance used by the client to determine what information to\n+ * retrieve from a GitHub server. Use the {@link Builder} construct a {@link GitHubRequest}.\n+ * <p>\n+ * NOTE: {@link GitHubRequest} should include the data type to be returned. Any use cases where the same request should\n+ * be used to return different types of data could be handled in some other way. However, the return type is currently\n+ * not specified until late in the building process, so this is still untyped.\n+ * </p>\n+ */\n+class GitHubRequest {\n+\n+    private static final List<String> METHODS_WITHOUT_BODY = asList(\"GET\", \"DELETE\");\n+    private final List<Entry> args;\n+    private final Map<String, String> headers;\n+    private final String apiUrl;\n+    private final String urlPath;\n+    private final String method;\n+    private final InputStream body;\n+    private final boolean forceBody;\n+\n+    private final URL url;\n+\n+    private GitHubRequest(@Nonnull List<Entry> args,\n+            @Nonnull Map<String, String> headers,\n+            @Nonnull String apiUrl,\n+            @Nonnull String urlPath,\n+            @Nonnull String method,\n+            @CheckForNull InputStream body,\n+            boolean forceBody) throws MalformedURLException {\n+        this.args = Collections.unmodifiableList(new ArrayList<>(args));\n+        this.headers = Collections.unmodifiableMap(new LinkedHashMap<>(headers));\n+        this.apiUrl = apiUrl;\n+        this.urlPath = urlPath;\n+        this.method = method;\n+        this.body = body;\n+        this.forceBody = forceBody;\n+        String tailApiUrl = buildTailApiUrl();\n+        url = getApiURL(apiUrl, tailApiUrl);\n+    }\n+\n+    /**\n+     * Create a new {@link Builder}.\n+     * \n+     * @return a new {@link Builder}.\n+     */\n+    public static Builder<?> newBuilder() {\n+        return new Builder<>();\n+    }\n+\n+    /**\n+     * Gets the final GitHub API URL.\n+     */\n+    @Nonnull\n+    static URL getApiURL(String apiUrl, String tailApiUrl) throws MalformedURLException {\n+        if (tailApiUrl.startsWith(\"/\")) {\n+            if (\"github.com\".equals(apiUrl)) {// backward compatibility\n+                return new URL(GitHubClient.GITHUB_URL + tailApiUrl);\n+            } else {\n+                return new URL(apiUrl + tailApiUrl);\n+            }\n+        } else {\n+            return new URL(tailApiUrl);\n+        }\n+    }\n+\n+    /**\n+     * Transform Java Enum into Github constants given its conventions\n+     *\n+     * @param en\n+     *            Enum to be transformed\n+     * @return a String containing the value of a Github constant\n+     */\n+    static String transformEnum(Enum<?> en) {\n+        // by convention Java constant names are upper cases, but github uses\n+        // lower-case constants. GitHub also uses '-', which in Java we always\n+        // replace with '_'\n+        return en.toString().toLowerCase(Locale.ENGLISH).replace('_', '-');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDI4NzI4", "url": "https://github.com/hub4j/github-api/pull/697#pullrequestreview-359428728", "createdAt": "2020-02-16T20:58:35Z", "commit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDo1ODozNlrOFqVQ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDo1ODozNlrOFqVQ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMjg4MA==", "bodyText": "This is a somewhat arbitrary place for me to put this question, but it's as good as any. There are a lot of with(thing, thing) methods here with different parameters. Why is that? I mean, I'm sure there's a perfectly good reason for it, I just am having trouble putting it together on my own.", "url": "https://github.com/hub4j/github-api/pull/697#discussion_r379932880", "createdAt": "2020-02-16T20:58:36Z", "author": {"login": "kshultzCB"}, "path": "src/main/java/org/kohsuke/github/GitHubRequest.java", "diffHunk": "@@ -0,0 +1,651 @@\n+package org.kohsuke.github;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nonnull;\n+import javax.annotation.WillClose;\n+\n+import static java.util.Arrays.asList;\n+\n+/**\n+ * Class {@link GitHubRequest} represents an immutable instance used by the client to determine what information to\n+ * retrieve from a GitHub server. Use the {@link Builder} construct a {@link GitHubRequest}.\n+ * <p>\n+ * NOTE: {@link GitHubRequest} should include the data type to be returned. Any use cases where the same request should\n+ * be used to return different types of data could be handled in some other way. However, the return type is currently\n+ * not specified until late in the building process, so this is still untyped.\n+ * </p>\n+ */\n+class GitHubRequest {\n+\n+    private static final List<String> METHODS_WITHOUT_BODY = asList(\"GET\", \"DELETE\");\n+    private final List<Entry> args;\n+    private final Map<String, String> headers;\n+    private final String apiUrl;\n+    private final String urlPath;\n+    private final String method;\n+    private final InputStream body;\n+    private final boolean forceBody;\n+\n+    private final URL url;\n+\n+    private GitHubRequest(@Nonnull List<Entry> args,\n+            @Nonnull Map<String, String> headers,\n+            @Nonnull String apiUrl,\n+            @Nonnull String urlPath,\n+            @Nonnull String method,\n+            @CheckForNull InputStream body,\n+            boolean forceBody) throws MalformedURLException {\n+        this.args = Collections.unmodifiableList(new ArrayList<>(args));\n+        this.headers = Collections.unmodifiableMap(new LinkedHashMap<>(headers));\n+        this.apiUrl = apiUrl;\n+        this.urlPath = urlPath;\n+        this.method = method;\n+        this.body = body;\n+        this.forceBody = forceBody;\n+        String tailApiUrl = buildTailApiUrl();\n+        url = getApiURL(apiUrl, tailApiUrl);\n+    }\n+\n+    /**\n+     * Create a new {@link Builder}.\n+     * \n+     * @return a new {@link Builder}.\n+     */\n+    public static Builder<?> newBuilder() {\n+        return new Builder<>();\n+    }\n+\n+    /**\n+     * Gets the final GitHub API URL.\n+     */\n+    @Nonnull\n+    static URL getApiURL(String apiUrl, String tailApiUrl) throws MalformedURLException {\n+        if (tailApiUrl.startsWith(\"/\")) {\n+            if (\"github.com\".equals(apiUrl)) {// backward compatibility\n+                return new URL(GitHubClient.GITHUB_URL + tailApiUrl);\n+            } else {\n+                return new URL(apiUrl + tailApiUrl);\n+            }\n+        } else {\n+            return new URL(tailApiUrl);\n+        }\n+    }\n+\n+    /**\n+     * Transform Java Enum into Github constants given its conventions\n+     *\n+     * @param en\n+     *            Enum to be transformed\n+     * @return a String containing the value of a Github constant\n+     */\n+    static String transformEnum(Enum<?> en) {\n+        // by convention Java constant names are upper cases, but github uses\n+        // lower-case constants. GitHub also uses '-', which in Java we always\n+        // replace with '_'\n+        return en.toString().toLowerCase(Locale.ENGLISH).replace('_', '-');\n+    }\n+\n+    /**\n+     * The method for this request, such as \"GET\", \"PATCH\", or \"DELETE\".\n+     *\n+     * @return the request method.\n+     */\n+    @Nonnull\n+    public String method() {\n+        return method;\n+    }\n+\n+    /**\n+     * The arguments for this request. Depending on the {@link #method()} and {@code #inBody()} these maybe added to the\n+     * url or to the request body.\n+     *\n+     * @return the {@link List<Entry>} of arguments\n+     */\n+    @Nonnull\n+    public List<Entry> args() {\n+        return args;\n+    }\n+\n+    /**\n+     * The headers for this request.\n+     *\n+     * @return the {@link Map} of headers\n+     */\n+    @Nonnull\n+    public Map<String, String> headers() {\n+        return headers;\n+    }\n+\n+    /**\n+     * The base GitHub API URL for this request represented as a {@link String}\n+     * \n+     * @return the url string\n+     */\n+    @Nonnull\n+    public String apiUrl() {\n+        return apiUrl;\n+    }\n+\n+    /**\n+     * The url path to be added to the {@link #apiUrl()} for this request. If this does not start with a \"/\", it instead\n+     * represents the full url string for this request.\n+     * \n+     * @return a url path or full url string\n+     */\n+    @Nonnull\n+    public String urlPath() {\n+        return urlPath;\n+    }\n+\n+    /**\n+     * The content type to to be sent by this request.\n+     * \n+     * @return the content type.\n+     */\n+    @Nonnull\n+    public String contentType() {\n+        return headers.get(\"Content-type\");\n+    }\n+\n+    /**\n+     * The {@link InputStream} to be sent as the body of this request.\n+     * \n+     * @return the {@link InputStream}.\n+     */\n+    @CheckForNull\n+    public InputStream body() {\n+        return body;\n+    }\n+\n+    /**\n+     * The {@link URL} for this request. This is the actual URL the {@link GitHubClient} will send this request to.\n+     * \n+     * @return the request {@link URL}\n+     */\n+    @Nonnull\n+    public URL url() {\n+        return url;\n+    }\n+\n+    /**\n+     * Whether arguments for this request should be included in the URL or in the body of the request.\n+     * \n+     * @return true if the arguements should be sent in the body of the request.\n+     */\n+    public boolean inBody() {\n+        return forceBody || !METHODS_WITHOUT_BODY.contains(method);\n+    }\n+\n+    /**\n+     * Create a {@link Builder} from this request. Initial values of the builder will be the same as this\n+     * {@link GitHubRequest}.\n+     * \n+     * @return a {@link Builder} based on this request.\n+     */\n+    public Builder<?> toBuilder() {\n+        return new Builder<>(args, headers, apiUrl, urlPath, method, body, forceBody);\n+    }\n+\n+    private String buildTailApiUrl() {\n+        String tailApiUrl = urlPath;\n+        if (!inBody() && !args.isEmpty() && tailApiUrl.startsWith(\"/\")) {\n+            try {\n+                StringBuilder argString = new StringBuilder();\n+                boolean questionMarkFound = tailApiUrl.indexOf('?') != -1;\n+                argString.append(questionMarkFound ? '&' : '?');\n+\n+                for (Iterator<Entry> it = args.listIterator(); it.hasNext();) {\n+                    Entry arg = it.next();\n+                    argString.append(URLEncoder.encode(arg.key, StandardCharsets.UTF_8.name()));\n+                    argString.append('=');\n+                    argString.append(URLEncoder.encode(arg.value.toString(), StandardCharsets.UTF_8.name()));\n+                    if (it.hasNext()) {\n+                        argString.append('&');\n+                    }\n+                }\n+                tailApiUrl += argString;\n+            } catch (UnsupportedEncodingException e) {\n+                throw new GHException(\"UTF-8 encoding required\", e);\n+            }\n+        }\n+        return tailApiUrl;\n+    }\n+\n+    /**\n+     * Class {@link Builder} follows the builder pattern for {@link GitHubRequest}.\n+     *\n+     * @param <B>\n+     *            The type of {@link Builder} to return from the various \"with*\" methods.\n+     */\n+    static class Builder<B extends Builder<B>> {\n+\n+        @Nonnull\n+        private final List<Entry> args;\n+\n+        /**\n+         * The header values for this request.\n+         */\n+        @Nonnull\n+        private final Map<String, String> headers;\n+\n+        /**\n+         * The base GitHub API for this request.\n+         */\n+        @Nonnull\n+        private String apiUrl;\n+\n+        @Nonnull\n+        private String urlPath;\n+        /**\n+         * Request method.\n+         */\n+        @Nonnull\n+        private String method;\n+        private InputStream body;\n+        private boolean forceBody;\n+\n+        /**\n+         * Create a new {@link GitHubRequest.Builder}\n+         */\n+        protected Builder() {\n+            this(new ArrayList<>(), new LinkedHashMap<>(), GitHubClient.GITHUB_URL, \"/\", \"GET\", null, false);\n+        }\n+\n+        private Builder(@Nonnull List<Entry> args,\n+                @Nonnull Map<String, String> headers,\n+                @Nonnull String apiUrl,\n+                @Nonnull String urlPath,\n+                @Nonnull String method,\n+                @CheckForNull @WillClose InputStream body,\n+                boolean forceBody) {\n+            this.args = new ArrayList<>(args);\n+            this.headers = new LinkedHashMap<>(headers);\n+            this.apiUrl = apiUrl;\n+            this.urlPath = urlPath;\n+            this.method = method;\n+            this.body = body;\n+            this.forceBody = forceBody;\n+        }\n+\n+        /**\n+         * Builds a {@link GitHubRequest} from this builder.\n+         * \n+         * @return a {@link GitHubRequest}\n+         * @throws MalformedURLException\n+         *             if the GitHub API URL cannot be constructed\n+         */\n+        public GitHubRequest build() throws MalformedURLException {\n+            return new GitHubRequest(args, headers, apiUrl, urlPath, method, body, forceBody);\n+        }\n+\n+        /**\n+         * Creates {@link PagedIterable <R>} from this builder using the provided {@link Consumer<R>}. This method and\n+         * the {@link PagedIterable <R>} do not actually begin fetching data until {@link Iterator#next()} or\n+         * {@link Iterator#hasNext()} are called.\n+         *\n+         * @param client\n+         *            the {@link GitHubClient} to be used for this {@link PagedIterable<R>}\n+         * @param type\n+         *            the type of the pages to retrieve.\n+         * @param itemInitializer\n+         *            the consumer to execute on each paged item retrieved.\n+         * @param <R>\n+         *            the element type for the pages returned from\n+         * @return the {@link PagedIterable} for this builder.\n+         */\n+        public <R> PagedIterable<R> toIterable(GitHubClient client, Class<R[]> type, Consumer<R> itemInitializer) {\n+            try {\n+                return new GitHubPageContentsIterable<>(client, build(), type, itemInitializer);\n+            } catch (MalformedURLException e) {\n+                throw new GHException(e.getMessage(), e);\n+            }\n+        }\n+\n+        /**\n+         * With header requester.\n+         *\n+         * @param url\n+         *            the url\n+         * @return the request builder\n+         */\n+        public B withApiUrl(String url) {\n+            this.apiUrl = url;\n+            return (B) this;\n+        }\n+\n+        /**\n+         * Sets the request HTTP header.\n+         * <p>\n+         * If a header of the same name is already set, this method overrides it.\n+         *\n+         * @param name\n+         *            the name\n+         * @param value\n+         *            the value\n+         */\n+        public void setHeader(String name, String value) {\n+            headers.put(name, value);\n+        }\n+\n+        /**\n+         * With header requester.\n+         *\n+         * @param name\n+         *            the name\n+         * @param value\n+         *            the value\n+         * @return the request builder\n+         */\n+        public B withHeader(String name, String value) {\n+            setHeader(name, value);\n+            return (B) this;\n+        }\n+\n+        public B withPreview(String name) {\n+            return withHeader(\"Accept\", name);\n+        }\n+\n+        /**\n+         * With requester.\n+         *\n+         * @param key\n+         *            the key\n+         * @param value\n+         *            the value\n+         * @return the request builder\n+         */\n+        public B with(String key, int value) {\n+            return with(key, (Object) value);\n+        }\n+\n+        /**\n+         * With requester.\n+         *\n+         * @param key\n+         *            the key\n+         * @param value\n+         *            the value\n+         * @return the request builder\n+         */\n+        public B with(String key, long value) {\n+            return with(key, (Object) value);\n+        }\n+\n+        /**\n+         * With requester.\n+         *\n+         * @param key\n+         *            the key\n+         * @param value\n+         *            the value\n+         * @return the request builder\n+         */\n+        public B with(String key, boolean value) {\n+            return with(key, (Object) value);\n+        }\n+\n+        /**\n+         * With requester.\n+         *\n+         * @param key\n+         *            the key\n+         * @param e\n+         *            the e\n+         * @return the request builder\n+         */\n+        public B with(String key, Enum<?> e) {\n+            if (e == null)\n+                return with(key, (Object) null);\n+            return with(key, transformEnum(e));\n+        }\n+\n+        /**\n+         * With requester.\n+         *\n+         * @param key\n+         *            the key\n+         * @param value\n+         *            the value\n+         * @return the request builder\n+         */\n+        public B with(String key, String value) {\n+            return with(key, (Object) value);\n+        }\n+\n+        /**\n+         * With requester.\n+         *\n+         * @param key\n+         *            the key\n+         * @param value\n+         *            the value\n+         * @return the request builder\n+         */\n+        public B with(String key, Collection<?> value) {\n+            return with(key, (Object) value);\n+        }\n+\n+        /**\n+         * With requester.\n+         *\n+         * @param key\n+         *            the key\n+         * @param value\n+         *            the value\n+         * @return the request builder\n+         */\n+        public B with(String key, Map<?, ?> value) {\n+            return with(key, (Object) value);\n+        }\n+\n+        /**\n+         * With requester.\n+         *\n+         * @param body\n+         *            the body\n+         * @return the request builder\n+         */\n+        public B with(@WillClose /* later */ InputStream body) {\n+            this.body = body;\n+            return (B) this;\n+        }\n+\n+        /**\n+         * With nullable requester.\n+         *\n+         * @param key\n+         *            the key\n+         * @param value\n+         *            the value\n+         * @return the request builder\n+         */\n+        public B withNullable(String key, Object value) {\n+            args.add(new Entry(key, value));\n+            return (B) this;\n+        }\n+\n+        /**\n+         * With requester.\n+         *\n+         * @param key\n+         *            the key\n+         * @param value\n+         *            the value\n+         * @return the request builder\n+         */\n+        public B with(String key, Object value) {\n+            if (value != null) {\n+                args.add(new Entry(key, value));\n+            }\n+            return (B) this;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9"}, "originalPosition": 503}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDI5NjM2", "url": "https://github.com/hub4j/github-api/pull/697#pullrequestreview-359429636", "createdAt": "2020-02-16T21:14:34Z", "commit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxNDozNFrOFqVUvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxNDozNFrOFqVUvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzg4Nw==", "bodyText": "Not really specific to this PR, but, I could use a quick overview of the relationships between current, pos, and base. I thought I had it figured out for a minute but I guess I don't.", "url": "https://github.com/hub4j/github-api/pull/697#discussion_r379933887", "createdAt": "2020-02-16T21:14:34Z", "author": {"login": "kshultzCB"}, "path": "src/main/java/org/kohsuke/github/PagedIterator.java", "diffHunk": "@@ -38,29 +42,23 @@\n \n     public boolean hasNext() {\n         fetch();\n-        return current != null;\n+        return current.length > pos;\n     }\n \n     public T next() {\n-        fetch();\n-        if (current == null)\n+        if (!hasNext())\n             throw new NoSuchElementException();\n         return current[pos++];\n     }\n \n     private void fetch() {\n-        while (current == null || current.length <= pos) {\n-            if (!base.hasNext()) {// no more to retrieve\n-                current = null;\n-                pos = 0;\n-                return;\n-            }\n-\n-            current = base.next();\n-            wrapUp(current);\n+        if ((current == null || current.length <= pos) && base.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDI5ODk4", "url": "https://github.com/hub4j/github-api/pull/697#pullrequestreview-359429898", "createdAt": "2020-02-16T21:19:56Z", "commit": {"oid": "dc33e28452532b94c6d46e435c192ae043849ca9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7af635a9a7a2634598d44c9fee4b76d01f0f616", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/b7af635a9a7a2634598d44c9fee4b76d01f0f616", "committedDate": "2020-02-17T05:33:19Z", "message": "Address PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acc5a89dff9e1a41ee35379e40ccd4e6ba3198d0", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/acc5a89dff9e1a41ee35379e40ccd4e6ba3198d0", "committedDate": "2020-02-17T20:55:44Z", "message": "Class clean up\n\nWe don't need two layers of PageIterator just to get the final response.\nAlso made iterators thread-safe.\nAnd added more detailed comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dade4c4cc47011c25a1a88a25c07e8dbc7172cde", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/dade4c4cc47011c25a1a88a25c07e8dbc7172cde", "committedDate": "2020-02-17T21:11:00Z", "message": "Bump spotbugs to 4.0.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5OTcwODU5", "url": "https://github.com/hub4j/github-api/pull/697#pullrequestreview-359970859", "createdAt": "2020-02-17T21:24:11Z", "commit": {"oid": "acc5a89dff9e1a41ee35379e40ccd4e6ba3198d0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMToyNDoxMVrOFqv94Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMToyOTowMFrOFqwCkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MDQwMQ==", "bodyText": "Pedantic documentation hat, engage: replace \"need\" with \"needed.\"", "url": "https://github.com/hub4j/github-api/pull/697#discussion_r380370401", "createdAt": "2020-02-17T21:24:11Z", "author": {"login": "kshultzCB"}, "path": "src/main/java/org/kohsuke/github/GitHubPageIterator.java", "diffHunk": "@@ -52,37 +76,104 @@ public GitHubPageIterator(GitHubClient client, Class<T> type, GitHubRequest requ\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean hasNext() {\n-        return delegate.hasNext();\n+        synchronized (this) {\n+            fetch();\n+            return next != null;\n+        }\n     }\n \n     /**\n      * Gets the next page.\n-     * \n+     *\n      * @return the next page.\n      */\n     @Nonnull\n     public T next() {\n-        return Objects.requireNonNull(nextResponse().body());\n+        synchronized (this) {\n+            fetch();\n+            T result = next;\n+            if (result == null)\n+                throw new NoSuchElementException();\n+            // If this is the last page, keep the response\n+            next = null;\n+            return result;\n+        }\n     }\n \n     /**\n-     * Gets the next response page.\n-     * \n-     * @return the next response page.\n+     * On rare occasions the final response from iterating is needed.\n+     *\n+     * @return the final response of the iterator.\n      */\n-    @Nonnull\n-    public GitHubResponse<T> nextResponse() {\n-        GitHubResponse<T> result = Objects.requireNonNull(delegate.next());\n-        lastResponse = result;\n-        return result;\n+    public GitHubResponse<T> finalResponse() {\n+        if (hasNext()) {\n+            throw new GHException(\"Final response is not available until after iterator is done.\");\n+        }\n+        return finalResponse;\n     }\n \n     public void remove() {\n         throw new UnsupportedOperationException();\n     }\n \n-    public GitHubResponse<T> lastResponse() {\n-        return lastResponse;\n+    /**\n+     * Fetch is called at the start of {@link #hasNext()} or {@link #next()} to fetch another page of data if it is\n+     * needed.\n+     * <p>\n+     * If {@link #next} is not {@code null}, no further action is need. If {@link #next} is {@code null} and\n+     * {@link #nextRequest} is {@code null}, there are no more pages to fetch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc5a89dff9e1a41ee35379e40ccd4e6ba3198d0"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MTYwMA==", "bodyText": "Pedantic documentation hat once more: replace \"check\" with \"checked.\"", "url": "https://github.com/hub4j/github-api/pull/697#discussion_r380371600", "createdAt": "2020-02-17T21:29:00Z", "author": {"login": "kshultzCB"}, "path": "src/main/java/org/kohsuke/github/GitHubPageIterator.java", "diffHunk": "@@ -52,37 +76,104 @@ public GitHubPageIterator(GitHubClient client, Class<T> type, GitHubRequest requ\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean hasNext() {\n-        return delegate.hasNext();\n+        synchronized (this) {\n+            fetch();\n+            return next != null;\n+        }\n     }\n \n     /**\n      * Gets the next page.\n-     * \n+     *\n      * @return the next page.\n      */\n     @Nonnull\n     public T next() {\n-        return Objects.requireNonNull(nextResponse().body());\n+        synchronized (this) {\n+            fetch();\n+            T result = next;\n+            if (result == null)\n+                throw new NoSuchElementException();\n+            // If this is the last page, keep the response\n+            next = null;\n+            return result;\n+        }\n     }\n \n     /**\n-     * Gets the next response page.\n-     * \n-     * @return the next response page.\n+     * On rare occasions the final response from iterating is needed.\n+     *\n+     * @return the final response of the iterator.\n      */\n-    @Nonnull\n-    public GitHubResponse<T> nextResponse() {\n-        GitHubResponse<T> result = Objects.requireNonNull(delegate.next());\n-        lastResponse = result;\n-        return result;\n+    public GitHubResponse<T> finalResponse() {\n+        if (hasNext()) {\n+            throw new GHException(\"Final response is not available until after iterator is done.\");\n+        }\n+        return finalResponse;\n     }\n \n     public void remove() {\n         throw new UnsupportedOperationException();\n     }\n \n-    public GitHubResponse<T> lastResponse() {\n-        return lastResponse;\n+    /**\n+     * Fetch is called at the start of {@link #hasNext()} or {@link #next()} to fetch another page of data if it is\n+     * needed.\n+     * <p>\n+     * If {@link #next} is not {@code null}, no further action is need. If {@link #next} is {@code null} and\n+     * {@link #nextRequest} is {@code null}, there are no more pages to fetch.\n+     * </p>\n+     * <p>\n+     * Otherwise, a new response page is fetched using {@link #nextRequest}. The response is then check to see if there", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc5a89dff9e1a41ee35379e40ccd4e6ba3198d0"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd0e0cdfa476ee01c1392d21f48936e9ad850be0", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/bd0e0cdfa476ee01c1392d21f48936e9ad850be0", "committedDate": "2020-02-18T04:08:52Z", "message": "Revert synchronization in iterators\n\nThese were not synchronized before we should leave them fix this in a future change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDA0OTYy", "url": "https://github.com/hub4j/github-api/pull/697#pullrequestreview-360404962", "createdAt": "2020-02-18T14:56:36Z", "commit": {"oid": "bd0e0cdfa476ee01c1392d21f48936e9ad850be0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1db4fca9dbc0eeb84c4aaee007f89159e8a6a425", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/1db4fca9dbc0eeb84c4aaee007f89159e8a6a425", "committedDate": "2020-02-18T17:02:52Z", "message": "Comment tweaks"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1673, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}