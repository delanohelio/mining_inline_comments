{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMzcwODQ3", "number": 753, "title": "GHRepository.createCheckRun", "bodyText": "Description\nContinues #723 & #740 to create a check run. Partially addresses #520.\nI am leery of building this on top of #724, which I can barely understand but anyway does not feel appropriate here since for example a GHCheckRun is not a complete model object: it has an Output nested object with an annotationsCount & annotationsUrl but there is not currently any separate model for the actual annotation data. Some sort of builder pattern is needed, but I find the style used here (inspired by GHPullRequestReviewBuilder) more intuitive and straightforward and it is clear what Java method actually corresponds to the REST call.\nBefore submitting a PR:\n\n Push your changes to a branch other than master. Create your PR from that branch.\n Add JavaDocs and other comments\n Write tests that run and pass in CI. See CONTRIBUTING.md for details on how to capture snapshot data.\n Run mvn -D enable-ci clean install site locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.", "createdAt": "2020-03-25T03:59:22Z", "url": "https://github.com/hub4j/github-api/pull/753", "merged": true, "mergeCommit": {"oid": "dd55e8a22c0c828b60a26f98e8a088d77188f747"}, "closed": true, "closedAt": "2020-03-30T20:46:31Z", "author": {"login": "jglick"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ_RKRAH2gAyMzkzMzcwODQ3OjdkNWEzOWVkODk2NzA4Nzg3YjBhYmM1MGYwNjlhYTE1MTdjNGZkOGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS0vl9AFqTM4NDIxNTI4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7d5a39ed896708787b0abc50f069aa1517c4fd8b", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/7d5a39ed896708787b0abc50f069aa1517c4fd8b", "committedDate": "2020-03-25T03:51:38Z", "message": "GHRepository.createCheckRun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ab2a889fe4a52c103c6a0603081271f059c9ec", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/36ab2a889fe4a52c103c6a0603081271f059c9ec", "committedDate": "2020-03-25T17:14:06Z", "message": "Redesigned using a fluent builder idiom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b715e0cef7fea6aaf9b3aa47a6fe1850bc09cee2", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/b715e0cef7fea6aaf9b3aa47a6fe1850bc09cee2", "committedDate": "2020-03-25T17:18:11Z", "message": "Reformatted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "572ff9df19cd0148662f24a8d0cda74aec84091f", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/572ff9df19cd0148662f24a8d0cda74aec84091f", "committedDate": "2020-03-25T17:20:33Z", "message": "I guess nullability annotations can be omitted from internal members"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7fb390c3801b0d5a16270b3917f01e391daefe5", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/c7fb390c3801b0d5a16270b3917f01e391daefe5", "committedDate": "2020-03-25T17:40:00Z", "message": "Introduced enums"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMzkwMDM2", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-381390036", "createdAt": "2020-03-25T17:45:33Z", "commit": {"oid": "c7fb390c3801b0d5a16270b3917f01e391daefe5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzo0NTozNFrOF7nBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzo0NTo0NFrOF7nCCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0OTY5OA==", "bodyText": "queued actually", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r398049698", "createdAt": "2020-03-25T17:45:34Z", "author": {"login": "jglick"}, "path": "src/main/java/org/kohsuke/github/GHCheckRun.java", "diffHunk": "@@ -51,19 +51,20 @@ GHCheckRun wrap(GitHub root) {\n     }\n \n     /**\n-     * Gets status of the check run. It can be one of \"queue\", \"in_progress\", or \"completed\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7fb390c3801b0d5a16270b3917f01e391daefe5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0OTgwMg==", "bodyText": "timed_out actually", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r398049802", "createdAt": "2020-03-25T17:45:44Z", "author": {"login": "jglick"}, "path": "src/main/java/org/kohsuke/github/GHCheckRun.java", "diffHunk": "@@ -51,19 +51,20 @@ GHCheckRun wrap(GitHub root) {\n     }\n \n     /**\n-     * Gets status of the check run. It can be one of \"queue\", \"in_progress\", or \"completed\"\n+     * Gets status of the check run.\n      *\n      * @return Status of the check run\n+     * @see GHCheckRunStatus\n      */\n     public String getStatus() {\n         return status;\n     }\n \n     /**\n-     * Gets conclusion of a completed check run. It can be one of \"success\", \"failure\", \"neutral\", \"cancelled\",\n-     * \"time_out\", or \"action_required\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7fb390c3801b0d5a16270b3917f01e391daefe5"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNDQwMTcy", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-381440172", "createdAt": "2020-03-25T18:48:04Z", "commit": {"oid": "c7fb390c3801b0d5a16270b3917f01e391daefe5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo0ODowNFrOF7phuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo0ODowNFrOF7phuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5MDY4Mw==", "bodyText": "Out of curiosity, why not make this an inner class of GHCheckRun?  (GHCheckRun.AnnotationLevel)", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r398090683", "createdAt": "2020-03-25T18:48:04Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCheckRunAnnotationLevel.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+public enum GHCheckRunAnnotationLevel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7fb390c3801b0d5a16270b3917f01e391daefe5"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd7963b30d2f0b26ae6720ecacc3f8e43f284c77", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/cd7963b30d2f0b26ae6720ecacc3f8e43f284c77", "committedDate": "2020-03-25T21:52:32Z", "message": "Acc to https://github.com/github-api/github-api/blob/7a650132c52d40c50173268b3cee368c009b7637/src/main/java/org/kohsuke/github/GitHubBuilder.java#L221 it is GITHUB_LOGIN not GITHUB_USER"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8b4de00d218d64fdb5b170009e04cebaf99befd", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/e8b4de00d218d64fdb5b170009e04cebaf99befd", "committedDate": "2020-03-25T23:18:11Z", "message": "WireMock coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjA2MDAz", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-381606003", "createdAt": "2020-03-25T23:20:47Z", "commit": {"oid": "e8b4de00d218d64fdb5b170009e04cebaf99befd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoyMDo0N1rOF7x-bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoyMDo0N1rOF7x-bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTEwMQ==", "bodyText": "The formatter plugin obliterates attempts to indent this readably.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r398229101", "createdAt": "2020-03-25T23:20:47Z", "author": {"login": "jglick"}, "path": "src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+@SuppressWarnings(\"deprecation\") // preview\n+public class GHCheckRunBuilderTest extends AbstractGitHubWireMockTest {\n+\n+    @Test\n+    public void createCheckRun() throws Exception {\n+        GHCheckRun checkRun = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"foo\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withStatus(GHCheckRunStatus.COMPLETED)\n+                .withConclusion(GHCheckRunConclusion.SUCCESS)\n+                .withDetailsURL(\"http://nowhere.net/stuff\")\n+                .withExternalID(\"whatever\")\n+                .withStartedAt(new Date(999_999_000))\n+                .withCompletedAt(new Date(999_999_999))\n+                .withOutput(\"Some Title\", \"what happened\u2026\")\n+                .withAnnotation(\"stuff.txt\", 1, GHCheckRunAnnotationLevel.NOTICE, \"hello to you too\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b4de00d218d64fdb5b170009e04cebaf99befd"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae96388e3bcc255c0bf1f162462b23a5f6ca712", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/7ae96388e3bcc255c0bf1f162462b23a5f6ca712", "committedDate": "2020-03-25T23:21:46Z", "message": "Merge branch 'master' of github.com:github-api/github-api into createCheckRun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c41f22b57c190d4112c41f71136407d87f53357", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/6c41f22b57c190d4112c41f71136407d87f53357", "committedDate": "2020-03-25T23:59:42Z", "message": "Coverage of DraftImage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03de12c2213e6afa7dd1c367db0de0e494b4fa5b", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/03de12c2213e6afa7dd1c367db0de0e494b4fa5b", "committedDate": "2020-03-26T00:03:18Z", "message": "SpotBugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26b80821550f1a54bf167a75af31fc0e11f46fe2", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/26b80821550f1a54bf167a75af31fc0e11f46fe2", "committedDate": "2020-03-26T20:14:39Z", "message": "Handle >50 annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5dc3c4366e964db170fdab3be5d5deb5ba70a97", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/b5dc3c4366e964db170fdab3be5d5deb5ba70a97", "committedDate": "2020-03-26T20:22:04Z", "message": "Added some Javadoc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8274ac2d4dec2e283034cc60d70fe16d42a5433", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/d8274ac2d4dec2e283034cc60d70fe16d42a5433", "committedDate": "2020-03-26T20:26:52Z", "message": "Merge branch 'javadoc' into createCheckRun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd3c36a259be250b9325df97fa1fa2c766f6bfa1", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/fd3c36a259be250b9325df97fa1fa2c766f6bfa1", "committedDate": "2020-03-26T20:33:57Z", "message": "IMHO treating Javadoc warnings as fatal makes sources less legible and does not improve API comprehension at all"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c4a05f3bd903254dacc4ac9dc5de3c4da80645", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/b4c4a05f3bd903254dacc4ac9dc5de3c4da80645", "committedDate": "2020-03-26T20:44:01Z", "message": "Moving enums inside GHCheckRun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2c513ea4256035bfe039ea2120ff6ddf4fed499", "author": {"user": {"login": "bitwiseman", "name": "Liam Newman"}}, "url": "https://github.com/hub4j/github-api/commit/b2c513ea4256035bfe039ea2120ff6ddf4fed499", "committedDate": "2020-03-26T21:10:29Z", "message": "Merge branch 'master' into createCheckRun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01f3f5e8ace2279a797d9fb391f798354101241", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/c01f3f5e8ace2279a797d9fb391f798354101241", "committedDate": "2020-03-26T23:07:35Z", "message": "NPE when there are no annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c499c73dccdaf2cc808d84de9efe7ea84fbb0659", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/c499c73dccdaf2cc808d84de9efe7ea84fbb0659", "committedDate": "2020-03-26T23:09:13Z", "message": "Merge branch 'master' of github.com:github-api/github-api into createCheckRun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/8b51a44b7c7536b5cbb7f24de32a6519126224ad", "committedDate": "2020-03-26T23:10:29Z", "message": "Merge branch 'createCheckRun' of github.com:jglick/github-api into createCheckRun"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTQ4Njg0", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-382948684", "createdAt": "2020-03-27T15:13:01Z", "commit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToxMzowMlrOF81miA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToxMzowMlrOF81miA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzNzA5Ng==", "bodyText": "Add links to the pertinent GitHub docs, such as https://developer.github.com/v3/checks/runs/#actions-object.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r399337096", "createdAt": "2020-03-27T15:13:02Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCheckRunBuilder.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * Drafts a check run.\n+ *\n+ * @see GHCheckRun\n+ * @see GHRepository#createCheckRun\n+ * @see <a href=\"https://developer.github.com/v3/checks/runs/\">documentation</a>\n+ */\n+@SuppressFBWarnings(value = \"URF_UNREAD_FIELD\", justification = \"Jackson serializes these even without a getter\")\n+@Preview\n+@Deprecated\n+public final class GHCheckRunBuilder {\n+\n+    private final GHRepository repo;\n+    private final Requester requester;\n+    DraftOutput output;\n+    List<DraftAction> actions;\n+\n+    GHCheckRunBuilder(GHRepository repo, String name, String headSHA) {\n+        this.repo = repo;\n+        requester = repo.root.createRequest()\n+                .withPreview(Previews.ANTIOPE)\n+                .method(\"POST\")\n+                .with(\"name\", name)\n+                .with(\"head_sha\", headSHA)\n+                .withUrlPath(repo.getApiTailUrl(\"check-runs\"));\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withDetailsURL(@CheckForNull String detailsURL) {\n+        requester.with(\"details_url\", detailsURL);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withExternalID(@CheckForNull String externalID) {\n+        requester.with(\"external_id\", externalID);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStatus(@CheckForNull GHCheckRun.Status status) {\n+        if (status != null) {\n+            // Do *not* use the overload taking Enum, as that s/_/-/g which would be wrong here.\n+            requester.with(\"status\", status.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withConclusion(@CheckForNull GHCheckRun.Conclusion conclusion) {\n+        if (conclusion != null) {\n+            requester.with(\"conclusion\", conclusion.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStartedAt(@CheckForNull Date startedAt) {\n+        if (startedAt != null) {\n+            requester.with(\"started_at\", GitHubClient.printDate(startedAt));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withCompletedAt(@CheckForNull Date completedAt) {\n+        if (completedAt != null) {\n+            requester.with(\"completed_at\", GitHubClient.printDate(completedAt));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Drafts the output section.\n+     *\n+     * @param title\n+     *            as in GitHub documentation\n+     * @param summary\n+     *            as in GitHub documentation\n+     * @return use {@link DraftOutput#done} to continue\n+     */\n+    public @NonNull DraftOutput withOutput(@NonNull String title, @NonNull String summary) {\n+        return new DraftOutput(this, title, summary);\n+    }\n+\n+    /**\n+     * Drafts an action section.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTU5ODM4", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-382959838", "createdAt": "2020-03-27T15:25:11Z", "commit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyNToxMVrOF82IoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyNToxMVrOF82IoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NTgyNA==", "bodyText": "Since this is an inner class could this be shortened to Output?", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r399345824", "createdAt": "2020-03-27T15:25:11Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCheckRunBuilder.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * Drafts a check run.\n+ *\n+ * @see GHCheckRun\n+ * @see GHRepository#createCheckRun\n+ * @see <a href=\"https://developer.github.com/v3/checks/runs/\">documentation</a>\n+ */\n+@SuppressFBWarnings(value = \"URF_UNREAD_FIELD\", justification = \"Jackson serializes these even without a getter\")\n+@Preview\n+@Deprecated\n+public final class GHCheckRunBuilder {\n+\n+    private final GHRepository repo;\n+    private final Requester requester;\n+    DraftOutput output;\n+    List<DraftAction> actions;\n+\n+    GHCheckRunBuilder(GHRepository repo, String name, String headSHA) {\n+        this.repo = repo;\n+        requester = repo.root.createRequest()\n+                .withPreview(Previews.ANTIOPE)\n+                .method(\"POST\")\n+                .with(\"name\", name)\n+                .with(\"head_sha\", headSHA)\n+                .withUrlPath(repo.getApiTailUrl(\"check-runs\"));\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withDetailsURL(@CheckForNull String detailsURL) {\n+        requester.with(\"details_url\", detailsURL);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withExternalID(@CheckForNull String externalID) {\n+        requester.with(\"external_id\", externalID);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStatus(@CheckForNull GHCheckRun.Status status) {\n+        if (status != null) {\n+            // Do *not* use the overload taking Enum, as that s/_/-/g which would be wrong here.\n+            requester.with(\"status\", status.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withConclusion(@CheckForNull GHCheckRun.Conclusion conclusion) {\n+        if (conclusion != null) {\n+            requester.with(\"conclusion\", conclusion.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStartedAt(@CheckForNull Date startedAt) {\n+        if (startedAt != null) {\n+            requester.with(\"started_at\", GitHubClient.printDate(startedAt));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withCompletedAt(@CheckForNull Date completedAt) {\n+        if (completedAt != null) {\n+            requester.with(\"completed_at\", GitHubClient.printDate(completedAt));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Drafts the output section.\n+     *\n+     * @param title\n+     *            as in GitHub documentation\n+     * @param summary\n+     *            as in GitHub documentation\n+     * @return use {@link DraftOutput#done} to continue\n+     */\n+    public @NonNull DraftOutput withOutput(@NonNull String title, @NonNull String summary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTk1NjI5", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-382995629", "createdAt": "2020-03-27T16:05:33Z", "commit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowNTozM1rOF832wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowNTozM1rOF832wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NDAxNg==", "bodyText": "Check OutputSummary as well.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r399374016", "createdAt": "2020-03-27T16:05:33Z", "author": {"login": "bitwiseman"}, "path": "src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+@SuppressWarnings(\"deprecation\") // preview\n+public class GHCheckRunBuilderTest extends AbstractGitHubWireMockTest {\n+\n+    @Test\n+    public void createCheckRun() throws Exception {\n+        GHCheckRun checkRun = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"foo\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withStatus(GHCheckRun.Status.COMPLETED)\n+                .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n+                .withDetailsURL(\"http://nowhere.net/stuff\")\n+                .withExternalID(\"whatever\")\n+                .withStartedAt(new Date(999_999_000))\n+                .withCompletedAt(new Date(999_999_999))\n+                .withOutput(\"Some Title\", \"what happened\u2026\")\n+                .withAnnotation(\"stuff.txt\", 1, GHCheckRun.AnnotationLevel.NOTICE, \"hello to you too\")\n+                .withTitle(\"Look here\")\n+                .done()\n+                .withImage(\"Unikitty\", \"https://i.pinimg.com/474x/9e/65/c0/9e65c0972294f1e10f648c9780a79fab.jpg\")\n+                .withCaption(\"Princess Unikitty\")\n+                .done()\n+                .done()\n+                .withAction(\"Help\", \"what I need help with\", \"doit\")\n+                .create();\n+        assertEquals(\"completed\", checkRun.getStatus());\n+        assertEquals(1, checkRun.getOutput().getAnnotationsCount());\n+        assertEquals(535049329, checkRun.id);\n+    }\n+\n+    @Test\n+    public void createCheckRunManyAnnotations() throws Exception {\n+        GHCheckRunBuilder.DraftOutput output = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"big\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n+                .withOutput(\"Big Run\", \"Lots of stuff here \u00bb\");\n+        for (int i = 0; i < 101; i++) {\n+            output.withAnnotation(\"stuff.txt\", 1, GHCheckRun.AnnotationLevel.NOTICE, \"hello #\" + i).done();\n+        }\n+        GHCheckRun checkRun = output.done().create();\n+        assertEquals(\"completed\", checkRun.getStatus());\n+        assertEquals(\"Big Run\", checkRun.getOutput().getTitle());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTk2NDk0", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-382996494", "createdAt": "2020-03-27T16:06:34Z", "commit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowNjozNVrOF835Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowNjozNVrOF835Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NDY1OQ==", "bodyText": "Conclusion is optional when competedAt is not set.  need test for that.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r399374659", "createdAt": "2020-03-27T16:06:35Z", "author": {"login": "bitwiseman"}, "path": "src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+@SuppressWarnings(\"deprecation\") // preview\n+public class GHCheckRunBuilderTest extends AbstractGitHubWireMockTest {\n+\n+    @Test\n+    public void createCheckRun() throws Exception {\n+        GHCheckRun checkRun = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"foo\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withStatus(GHCheckRun.Status.COMPLETED)\n+                .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n+                .withDetailsURL(\"http://nowhere.net/stuff\")\n+                .withExternalID(\"whatever\")\n+                .withStartedAt(new Date(999_999_000))\n+                .withCompletedAt(new Date(999_999_999))\n+                .withOutput(\"Some Title\", \"what happened\u2026\")\n+                .withAnnotation(\"stuff.txt\", 1, GHCheckRun.AnnotationLevel.NOTICE, \"hello to you too\")\n+                .withTitle(\"Look here\")\n+                .done()\n+                .withImage(\"Unikitty\", \"https://i.pinimg.com/474x/9e/65/c0/9e65c0972294f1e10f648c9780a79fab.jpg\")\n+                .withCaption(\"Princess Unikitty\")\n+                .done()\n+                .done()\n+                .withAction(\"Help\", \"what I need help with\", \"doit\")\n+                .create();\n+        assertEquals(\"completed\", checkRun.getStatus());\n+        assertEquals(1, checkRun.getOutput().getAnnotationsCount());\n+        assertEquals(535049329, checkRun.id);\n+    }\n+\n+    @Test\n+    public void createCheckRunManyAnnotations() throws Exception {\n+        GHCheckRunBuilder.DraftOutput output = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"big\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n+                .withOutput(\"Big Run\", \"Lots of stuff here \u00bb\");\n+        for (int i = 0; i < 101; i++) {\n+            output.withAnnotation(\"stuff.txt\", 1, GHCheckRun.AnnotationLevel.NOTICE, \"hello #\" + i).done();\n+        }\n+        GHCheckRun checkRun = output.done().create();\n+        assertEquals(\"completed\", checkRun.getStatus());\n+        assertEquals(\"Big Run\", checkRun.getOutput().getTitle());\n+        assertEquals(101, checkRun.getOutput().getAnnotationsCount());\n+        assertEquals(537614832, checkRun.id);\n+    }\n+\n+    @Test\n+    public void createCheckRunNoAnnotations() throws Exception {\n+        GHCheckRun checkRun = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"quick\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withConclusion(GHCheckRun.Conclusion.NEUTRAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTk4Mzk4", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-382998398", "createdAt": "2020-03-27T16:08:46Z", "commit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowODo0NlrOF83-_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjowODo0NlrOF83-_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NjEyNw==", "bodyText": "Image only has one optional field maybe it doesn't need a builder?\nAre images not readable via api? I didn't see them...", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r399376127", "createdAt": "2020-03-27T16:08:46Z", "author": {"login": "bitwiseman"}, "path": "src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+@SuppressWarnings(\"deprecation\") // preview\n+public class GHCheckRunBuilderTest extends AbstractGitHubWireMockTest {\n+\n+    @Test\n+    public void createCheckRun() throws Exception {\n+        GHCheckRun checkRun = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"foo\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withStatus(GHCheckRun.Status.COMPLETED)\n+                .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n+                .withDetailsURL(\"http://nowhere.net/stuff\")\n+                .withExternalID(\"whatever\")\n+                .withStartedAt(new Date(999_999_000))\n+                .withCompletedAt(new Date(999_999_999))\n+                .withOutput(\"Some Title\", \"what happened\u2026\")\n+                .withAnnotation(\"stuff.txt\", 1, GHCheckRun.AnnotationLevel.NOTICE, \"hello to you too\")\n+                .withTitle(\"Look here\")\n+                .done()\n+                .withImage(\"Unikitty\", \"https://i.pinimg.com/474x/9e/65/c0/9e65c0972294f1e10f648c9780a79fab.jpg\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDA2MDk2", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-383006096", "createdAt": "2020-03-27T16:17:57Z", "commit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxNzo1N1rOF84WtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxNzo1N1rOF84WtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4MjE5Nw==", "bodyText": "maybe .addAnnotation(...) or even addAnnotations(DraftAnnotation... annotations).  Then you wouldn't need to be calling done() after each one.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r399382197", "createdAt": "2020-03-27T16:17:57Z", "author": {"login": "bitwiseman"}, "path": "src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+@SuppressWarnings(\"deprecation\") // preview\n+public class GHCheckRunBuilderTest extends AbstractGitHubWireMockTest {\n+\n+    @Test\n+    public void createCheckRun() throws Exception {\n+        GHCheckRun checkRun = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"foo\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withStatus(GHCheckRun.Status.COMPLETED)\n+                .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n+                .withDetailsURL(\"http://nowhere.net/stuff\")\n+                .withExternalID(\"whatever\")\n+                .withStartedAt(new Date(999_999_000))\n+                .withCompletedAt(new Date(999_999_999))\n+                .withOutput(\"Some Title\", \"what happened\u2026\")\n+                .withAnnotation(\"stuff.txt\", 1, GHCheckRun.AnnotationLevel.NOTICE, \"hello to you too\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDgwMTYw", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-383080160", "createdAt": "2020-03-27T17:52:23Z", "commit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d792d6e1f44bb800ec5bd3d29a1b74a0468367", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/30d792d6e1f44bb800ec5bd3d29a1b74a0468367", "committedDate": "2020-03-27T18:04:42Z", "message": "Remove \u2018Draft\u2019 from nested data class names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/89a6664e4507aef8a6f9605baec10ae9e464442f", "committedDate": "2020-03-27T18:07:40Z", "message": "More links to GH docs from Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjYyNzM0", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-383262734", "createdAt": "2020-03-28T00:28:08Z", "commit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjY0NTA1", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-383264505", "createdAt": "2020-03-28T00:39:58Z", "commit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMDozOTo1OFrOF9FWsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMDozOTo1OFrOF9FWsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5NTE4NQ==", "bodyText": "What happens when the max size of this is exceeded?  Not mentioning that limit here will cause more pain for consumers of this library.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r399595185", "createdAt": "2020-03-28T00:39:58Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCheckRunBuilder.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * Drafts a check run.\n+ *\n+ * @see GHCheckRun\n+ * @see GHRepository#createCheckRun\n+ * @see <a href=\"https://developer.github.com/v3/checks/runs/#create-a-check-run\">documentation</a>\n+ */\n+@SuppressFBWarnings(value = \"URF_UNREAD_FIELD\", justification = \"Jackson serializes these even without a getter\")\n+@Preview\n+@Deprecated\n+public final class GHCheckRunBuilder {\n+\n+    private final GHRepository repo;\n+    private final Requester requester;\n+    Output output;\n+    List<Action> actions;\n+\n+    GHCheckRunBuilder(GHRepository repo, String name, String headSHA) {\n+        this.repo = repo;\n+        requester = repo.root.createRequest()\n+                .withPreview(Previews.ANTIOPE)\n+                .method(\"POST\")\n+                .with(\"name\", name)\n+                .with(\"head_sha\", headSHA)\n+                .withUrlPath(repo.getApiTailUrl(\"check-runs\"));\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withDetailsURL(@CheckForNull String detailsURL) {\n+        requester.with(\"details_url\", detailsURL);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withExternalID(@CheckForNull String externalID) {\n+        requester.with(\"external_id\", externalID);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStatus(@CheckForNull GHCheckRun.Status status) {\n+        if (status != null) {\n+            // Do *not* use the overload taking Enum, as that s/_/-/g which would be wrong here.\n+            requester.with(\"status\", status.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withConclusion(@CheckForNull GHCheckRun.Conclusion conclusion) {\n+        if (conclusion != null) {\n+            requester.with(\"conclusion\", conclusion.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStartedAt(@CheckForNull Date startedAt) {\n+        if (startedAt != null) {\n+            requester.with(\"started_at\", GitHubClient.printDate(startedAt));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withCompletedAt(@CheckForNull Date completedAt) {\n+        if (completedAt != null) {\n+            requester.with(\"completed_at\", GitHubClient.printDate(completedAt));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Drafts the output section.\n+     *\n+     * @param title\n+     *            as in GitHub documentation\n+     * @param summary\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull Output withOutput(@NonNull String title, @NonNull String summary) {\n+        return new Output(this, title, summary);\n+    }\n+\n+    /**\n+     * Drafts an action section.\n+     *\n+     * @param label\n+     *            as in GitHub documentation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjY1MDc2", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-383265076", "createdAt": "2020-03-28T00:43:45Z", "commit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMDo0Mzo0NVrOF9FZFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMDo0Mzo0NVrOF9FZFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5NTc5OA==", "bodyText": "Does this need to be public?  It is never needed by users.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r399595798", "createdAt": "2020-03-28T00:43:45Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCheckRunBuilder.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * Drafts a check run.\n+ *\n+ * @see GHCheckRun\n+ * @see GHRepository#createCheckRun\n+ * @see <a href=\"https://developer.github.com/v3/checks/runs/#create-a-check-run\">documentation</a>\n+ */\n+@SuppressFBWarnings(value = \"URF_UNREAD_FIELD\", justification = \"Jackson serializes these even without a getter\")\n+@Preview\n+@Deprecated\n+public final class GHCheckRunBuilder {\n+\n+    private final GHRepository repo;\n+    private final Requester requester;\n+    Output output;\n+    List<Action> actions;\n+\n+    GHCheckRunBuilder(GHRepository repo, String name, String headSHA) {\n+        this.repo = repo;\n+        requester = repo.root.createRequest()\n+                .withPreview(Previews.ANTIOPE)\n+                .method(\"POST\")\n+                .with(\"name\", name)\n+                .with(\"head_sha\", headSHA)\n+                .withUrlPath(repo.getApiTailUrl(\"check-runs\"));\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withDetailsURL(@CheckForNull String detailsURL) {\n+        requester.with(\"details_url\", detailsURL);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withExternalID(@CheckForNull String externalID) {\n+        requester.with(\"external_id\", externalID);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStatus(@CheckForNull GHCheckRun.Status status) {\n+        if (status != null) {\n+            // Do *not* use the overload taking Enum, as that s/_/-/g which would be wrong here.\n+            requester.with(\"status\", status.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withConclusion(@CheckForNull GHCheckRun.Conclusion conclusion) {\n+        if (conclusion != null) {\n+            requester.with(\"conclusion\", conclusion.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStartedAt(@CheckForNull Date startedAt) {\n+        if (startedAt != null) {\n+            requester.with(\"started_at\", GitHubClient.printDate(startedAt));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withCompletedAt(@CheckForNull Date completedAt) {\n+        if (completedAt != null) {\n+            requester.with(\"completed_at\", GitHubClient.printDate(completedAt));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Drafts the output section.\n+     *\n+     * @param title\n+     *            as in GitHub documentation\n+     * @param summary\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull Output withOutput(@NonNull String title, @NonNull String summary) {\n+        return new Output(this, title, summary);\n+    }\n+\n+    /**\n+     * Drafts an action section.\n+     *\n+     * @param label\n+     *            as in GitHub documentation\n+     * @param description\n+     *            as in GitHub documentation\n+     * @param identifier\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull GHCheckRunBuilder withAction(@NonNull String label,\n+            @NonNull String description,\n+            @NonNull String identifier) {\n+        if (actions == null) {\n+            actions = new LinkedList<>();\n+        }\n+        actions.add(new Action(label, description, identifier));\n+        return this;\n+    }\n+\n+    private static final int MAX_ANNOTATIONS = 50;\n+    /**\n+     * Actually creates the check run. (If more than fifty annotations were requested, this is done in batches.)\n+     *\n+     * @return the resulting run\n+     * @throws IOException\n+     *             for the usual reasons\n+     */\n+    public @NonNull GHCheckRun create() throws IOException {\n+        List<Annotation> extraAnnotations;\n+        if (output != null && output.annotations != null && output.annotations.size() > MAX_ANNOTATIONS) {\n+            extraAnnotations = output.annotations.subList(MAX_ANNOTATIONS, output.annotations.size());\n+            output.annotations = output.annotations.subList(0, MAX_ANNOTATIONS);\n+        } else {\n+            extraAnnotations = Collections.emptyList();\n+        }\n+        GHCheckRun run = requester.with(\"output\", output).with(\"actions\", actions).fetch(GHCheckRun.class).wrap(repo);\n+        while (!extraAnnotations.isEmpty()) {\n+            Output output2 = new Output(null, output.title, output.summary);\n+            int i = Math.min(extraAnnotations.size(), MAX_ANNOTATIONS);\n+            output2.annotations = extraAnnotations.subList(0, i);\n+            extraAnnotations = extraAnnotations.subList(i, extraAnnotations.size());\n+            run = repo.root.createRequest()\n+                    .withPreview(Previews.ANTIOPE)\n+                    .method(\"PATCH\")\n+                    .with(\"output\", output2)\n+                    .withUrlPath(repo.getApiTailUrl(\"check-runs/\" + run.id))\n+                    .fetch(GHCheckRun.class)\n+                    .wrap(repo);\n+        }\n+        return run;\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#output-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Output {\n+\n+        private final transient GHCheckRunBuilder builder;\n+        private final String title;\n+        private final String summary;\n+        private String text;\n+        List<Annotation> annotations;\n+        List<Image> images;\n+\n+        Output(GHCheckRunBuilder builder, String title, String summary) {\n+            this.builder = builder;\n+            this.title = title;\n+            this.summary = summary;\n+        }\n+\n+        public @NonNull Output withText(@CheckForNull String text) {\n+            this.text = text;\n+            return this;\n+        }\n+\n+        /**\n+         * Drafts a single-line annotation section.\n+         *\n+         * @param path\n+         *            as in GitHub documentation\n+         * @param line\n+         *            {@code startLine} and {@code endLine} together\n+         * @param annotationLevel\n+         *            as in GitHub documentation\n+         * @param message\n+         *            as in GitHub documentation\n+         * @return use {@link Annotation#done} to continue\n+         */\n+        public @NonNull Annotation withAnnotation(@NonNull String path,\n+                int line,\n+                @NonNull GHCheckRun.AnnotationLevel annotationLevel,\n+                @NonNull String message) {\n+            return withAnnotation(path, line, line, annotationLevel, message);\n+        }\n+\n+        /**\n+         * Drafts a potentially multiline annotation section.\n+         *\n+         * @param path\n+         *            as in GitHub documentation\n+         * @param startLine\n+         *            as in GitHub documentation\n+         * @param endLine\n+         *            as in GitHub documentation\n+         * @param annotationLevel\n+         *            as in GitHub documentation\n+         * @param message\n+         *            as in GitHub documentation\n+         * @return use {@link Annotation#done} to continue\n+         */\n+        public @NonNull Annotation withAnnotation(@NonNull String path,\n+                int startLine,\n+                int endLine,\n+                @NonNull GHCheckRun.AnnotationLevel annotationLevel,\n+                @NonNull String message) {\n+            return new Annotation(this, path, startLine, endLine, annotationLevel, message);\n+        }\n+\n+        /**\n+         * Drafts an image section.\n+         *\n+         * @param alt\n+         *            as in GitHub documentation\n+         * @param imageURL\n+         *            as in GitHub documentation\n+         * @return use {@link Image#done} to continue\n+         */\n+        public @NonNull Image withImage(@NonNull String alt, @NonNull String imageURL) {\n+            return new Image(this, alt, imageURL);\n+        }\n+\n+        public @NonNull GHCheckRunBuilder done() {\n+            builder.output = this;\n+            return builder;\n+        }\n+\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#annotations-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Annotation {\n+\n+        private final transient Output output;\n+        private final String path;\n+        private final int start_line;\n+        private final int end_line;\n+        private final String annotation_level;\n+        private final String message;\n+        private Integer start_column;\n+        private Integer end_column;\n+        private String title;\n+        private String raw_details;\n+\n+        Annotation(Output output,\n+                String path,\n+                int start_line,\n+                int end_line,\n+                GHCheckRun.AnnotationLevel annotation_level,\n+                String message) {\n+            this.output = output;\n+            this.path = path;\n+            this.start_line = start_line;\n+            this.end_line = end_line;\n+            this.annotation_level = annotation_level.toString().toLowerCase(Locale.ROOT);\n+            this.message = message;\n+        }\n+\n+        public @NonNull Annotation withStartColumn(@CheckForNull Integer startColumn) {\n+            start_column = startColumn;\n+            return this;\n+        }\n+\n+        public @NonNull Annotation withEndColumn(@CheckForNull Integer endColumn) {\n+            end_column = endColumn;\n+            return this;\n+        }\n+\n+        public @NonNull Annotation withTitle(@CheckForNull String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        public @NonNull Annotation withRawDetails(@CheckForNull String rawDetails) {\n+            raw_details = rawDetails;\n+            return this;\n+        }\n+\n+        public @NonNull Output done() {\n+            if (output.annotations == null) {\n+                output.annotations = new LinkedList<>();\n+            }\n+            output.annotations.add(this);\n+            return output;\n+        }\n+\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#images-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Image {\n+\n+        private final transient Output output;\n+        private final String alt;\n+        private final String image_url;\n+        private String caption;\n+\n+        Image(Output output, String alt, String image_url) {\n+            this.output = output;\n+            this.alt = alt;\n+            this.image_url = image_url;\n+        }\n+\n+        public @NonNull Image withCaption(@CheckForNull String caption) {\n+            this.caption = caption;\n+            return this;\n+        }\n+\n+        public @NonNull Output done() {\n+            if (output.images == null) {\n+                output.images = new LinkedList<>();\n+            }\n+            output.images.add(this);\n+            return output;\n+        }\n+\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#actions-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Action {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "originalPosition": 356}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzM1MzEy", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-383335312", "createdAt": "2020-03-28T18:03:13Z", "commit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxODowMzoxM1rOF9LOQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxODowMzoxM1rOF9LOQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5MTMzMA==", "bodyText": "Max limit for annotations ?", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r399691330", "createdAt": "2020-03-28T18:03:13Z", "author": {"login": "sladyn98"}, "path": "src/main/java/org/kohsuke/github/GHCheckRunBuilder.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * Drafts a check run.\n+ *\n+ * @see GHCheckRun\n+ * @see GHRepository#createCheckRun\n+ * @see <a href=\"https://developer.github.com/v3/checks/runs/#create-a-check-run\">documentation</a>\n+ */\n+@SuppressFBWarnings(value = \"URF_UNREAD_FIELD\", justification = \"Jackson serializes these even without a getter\")\n+@Preview\n+@Deprecated\n+public final class GHCheckRunBuilder {\n+\n+    private final GHRepository repo;\n+    private final Requester requester;\n+    Output output;\n+    List<Action> actions;\n+\n+    GHCheckRunBuilder(GHRepository repo, String name, String headSHA) {\n+        this.repo = repo;\n+        requester = repo.root.createRequest()\n+                .withPreview(Previews.ANTIOPE)\n+                .method(\"POST\")\n+                .with(\"name\", name)\n+                .with(\"head_sha\", headSHA)\n+                .withUrlPath(repo.getApiTailUrl(\"check-runs\"));\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withDetailsURL(@CheckForNull String detailsURL) {\n+        requester.with(\"details_url\", detailsURL);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withExternalID(@CheckForNull String externalID) {\n+        requester.with(\"external_id\", externalID);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStatus(@CheckForNull GHCheckRun.Status status) {\n+        if (status != null) {\n+            // Do *not* use the overload taking Enum, as that s/_/-/g which would be wrong here.\n+            requester.with(\"status\", status.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withConclusion(@CheckForNull GHCheckRun.Conclusion conclusion) {\n+        if (conclusion != null) {\n+            requester.with(\"conclusion\", conclusion.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStartedAt(@CheckForNull Date startedAt) {\n+        if (startedAt != null) {\n+            requester.with(\"started_at\", GitHubClient.printDate(startedAt));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withCompletedAt(@CheckForNull Date completedAt) {\n+        if (completedAt != null) {\n+            requester.with(\"completed_at\", GitHubClient.printDate(completedAt));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Drafts the output section.\n+     *\n+     * @param title\n+     *            as in GitHub documentation\n+     * @param summary\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull Output withOutput(@NonNull String title, @NonNull String summary) {\n+        return new Output(this, title, summary);\n+    }\n+\n+    /**\n+     * Drafts an action section.\n+     *\n+     * @param label\n+     *            as in GitHub documentation\n+     * @param description\n+     *            as in GitHub documentation\n+     * @param identifier\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull GHCheckRunBuilder withAction(@NonNull String label,\n+            @NonNull String description,\n+            @NonNull String identifier) {\n+        if (actions == null) {\n+            actions = new LinkedList<>();\n+        }\n+        actions.add(new Action(label, description, identifier));\n+        return this;\n+    }\n+\n+    private static final int MAX_ANNOTATIONS = 50;\n+    /**\n+     * Actually creates the check run. (If more than fifty annotations were requested, this is done in batches.)\n+     *\n+     * @return the resulting run\n+     * @throws IOException\n+     *             for the usual reasons\n+     */\n+    public @NonNull GHCheckRun create() throws IOException {\n+        List<Annotation> extraAnnotations;\n+        if (output != null && output.annotations != null && output.annotations.size() > MAX_ANNOTATIONS) {\n+            extraAnnotations = output.annotations.subList(MAX_ANNOTATIONS, output.annotations.size());\n+            output.annotations = output.annotations.subList(0, MAX_ANNOTATIONS);\n+        } else {\n+            extraAnnotations = Collections.emptyList();\n+        }\n+        GHCheckRun run = requester.with(\"output\", output).with(\"actions\", actions).fetch(GHCheckRun.class).wrap(repo);\n+        while (!extraAnnotations.isEmpty()) {\n+            Output output2 = new Output(null, output.title, output.summary);\n+            int i = Math.min(extraAnnotations.size(), MAX_ANNOTATIONS);\n+            output2.annotations = extraAnnotations.subList(0, i);\n+            extraAnnotations = extraAnnotations.subList(i, extraAnnotations.size());\n+            run = repo.root.createRequest()\n+                    .withPreview(Previews.ANTIOPE)\n+                    .method(\"PATCH\")\n+                    .with(\"output\", output2)\n+                    .withUrlPath(repo.getApiTailUrl(\"check-runs/\" + run.id))\n+                    .fetch(GHCheckRun.class)\n+                    .wrap(repo);\n+        }\n+        return run;\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#output-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Output {\n+\n+        private final transient GHCheckRunBuilder builder;\n+        private final String title;\n+        private final String summary;\n+        private String text;\n+        List<Annotation> annotations;\n+        List<Image> images;\n+\n+        Output(GHCheckRunBuilder builder, String title, String summary) {\n+            this.builder = builder;\n+            this.title = title;\n+            this.summary = summary;\n+        }\n+\n+        public @NonNull Output withText(@CheckForNull String text) {\n+            this.text = text;\n+            return this;\n+        }\n+\n+        /**\n+         * Drafts a single-line annotation section.\n+         *\n+         * @param path\n+         *            as in GitHub documentation\n+         * @param line\n+         *            {@code startLine} and {@code endLine} together\n+         * @param annotationLevel\n+         *            as in GitHub documentation\n+         * @param message\n+         *            as in GitHub documentation\n+         * @return use {@link Annotation#done} to continue\n+         */\n+        public @NonNull Annotation withAnnotation(@NonNull String path,\n+                int line,\n+                @NonNull GHCheckRun.AnnotationLevel annotationLevel,\n+                @NonNull String message) {\n+            return withAnnotation(path, line, line, annotationLevel, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTIzNzEy", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-383923712", "createdAt": "2020-03-30T14:40:09Z", "commit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo0MDowOVrOF9tCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo0OTowOVrOF9tepw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NTQ0MQ==", "bodyText": "I would rather not duplicate backend logic here. It is up to callers to read the GitHub documentation and supply appropriate parameters accordingly. The limits may change over time, remember, and since Checks is still in preview there could be new restrictions later. The library should limit itself to collecting data and shipping it off.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r400245441", "createdAt": "2020-03-30T14:40:09Z", "author": {"login": "jglick"}, "path": "src/main/java/org/kohsuke/github/GHCheckRunBuilder.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * Drafts a check run.\n+ *\n+ * @see GHCheckRun\n+ * @see GHRepository#createCheckRun\n+ * @see <a href=\"https://developer.github.com/v3/checks/runs/#create-a-check-run\">documentation</a>\n+ */\n+@SuppressFBWarnings(value = \"URF_UNREAD_FIELD\", justification = \"Jackson serializes these even without a getter\")\n+@Preview\n+@Deprecated\n+public final class GHCheckRunBuilder {\n+\n+    private final GHRepository repo;\n+    private final Requester requester;\n+    Output output;\n+    List<Action> actions;\n+\n+    GHCheckRunBuilder(GHRepository repo, String name, String headSHA) {\n+        this.repo = repo;\n+        requester = repo.root.createRequest()\n+                .withPreview(Previews.ANTIOPE)\n+                .method(\"POST\")\n+                .with(\"name\", name)\n+                .with(\"head_sha\", headSHA)\n+                .withUrlPath(repo.getApiTailUrl(\"check-runs\"));\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withDetailsURL(@CheckForNull String detailsURL) {\n+        requester.with(\"details_url\", detailsURL);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withExternalID(@CheckForNull String externalID) {\n+        requester.with(\"external_id\", externalID);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStatus(@CheckForNull GHCheckRun.Status status) {\n+        if (status != null) {\n+            // Do *not* use the overload taking Enum, as that s/_/-/g which would be wrong here.\n+            requester.with(\"status\", status.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withConclusion(@CheckForNull GHCheckRun.Conclusion conclusion) {\n+        if (conclusion != null) {\n+            requester.with(\"conclusion\", conclusion.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStartedAt(@CheckForNull Date startedAt) {\n+        if (startedAt != null) {\n+            requester.with(\"started_at\", GitHubClient.printDate(startedAt));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withCompletedAt(@CheckForNull Date completedAt) {\n+        if (completedAt != null) {\n+            requester.with(\"completed_at\", GitHubClient.printDate(completedAt));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Drafts the output section.\n+     *\n+     * @param title\n+     *            as in GitHub documentation\n+     * @param summary\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull Output withOutput(@NonNull String title, @NonNull String summary) {\n+        return new Output(this, title, summary);\n+    }\n+\n+    /**\n+     * Drafts an action section.\n+     *\n+     * @param label\n+     *            as in GitHub documentation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5NTE4NQ=="}, "originalCommit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NjMzNQ==", "bodyText": "Nope, >50 is automatically handled, see above.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r400246335", "createdAt": "2020-03-30T14:41:19Z", "author": {"login": "jglick"}, "path": "src/main/java/org/kohsuke/github/GHCheckRunBuilder.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * Drafts a check run.\n+ *\n+ * @see GHCheckRun\n+ * @see GHRepository#createCheckRun\n+ * @see <a href=\"https://developer.github.com/v3/checks/runs/#create-a-check-run\">documentation</a>\n+ */\n+@SuppressFBWarnings(value = \"URF_UNREAD_FIELD\", justification = \"Jackson serializes these even without a getter\")\n+@Preview\n+@Deprecated\n+public final class GHCheckRunBuilder {\n+\n+    private final GHRepository repo;\n+    private final Requester requester;\n+    Output output;\n+    List<Action> actions;\n+\n+    GHCheckRunBuilder(GHRepository repo, String name, String headSHA) {\n+        this.repo = repo;\n+        requester = repo.root.createRequest()\n+                .withPreview(Previews.ANTIOPE)\n+                .method(\"POST\")\n+                .with(\"name\", name)\n+                .with(\"head_sha\", headSHA)\n+                .withUrlPath(repo.getApiTailUrl(\"check-runs\"));\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withDetailsURL(@CheckForNull String detailsURL) {\n+        requester.with(\"details_url\", detailsURL);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withExternalID(@CheckForNull String externalID) {\n+        requester.with(\"external_id\", externalID);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStatus(@CheckForNull GHCheckRun.Status status) {\n+        if (status != null) {\n+            // Do *not* use the overload taking Enum, as that s/_/-/g which would be wrong here.\n+            requester.with(\"status\", status.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withConclusion(@CheckForNull GHCheckRun.Conclusion conclusion) {\n+        if (conclusion != null) {\n+            requester.with(\"conclusion\", conclusion.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStartedAt(@CheckForNull Date startedAt) {\n+        if (startedAt != null) {\n+            requester.with(\"started_at\", GitHubClient.printDate(startedAt));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withCompletedAt(@CheckForNull Date completedAt) {\n+        if (completedAt != null) {\n+            requester.with(\"completed_at\", GitHubClient.printDate(completedAt));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Drafts the output section.\n+     *\n+     * @param title\n+     *            as in GitHub documentation\n+     * @param summary\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull Output withOutput(@NonNull String title, @NonNull String summary) {\n+        return new Output(this, title, summary);\n+    }\n+\n+    /**\n+     * Drafts an action section.\n+     *\n+     * @param label\n+     *            as in GitHub documentation\n+     * @param description\n+     *            as in GitHub documentation\n+     * @param identifier\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull GHCheckRunBuilder withAction(@NonNull String label,\n+            @NonNull String description,\n+            @NonNull String identifier) {\n+        if (actions == null) {\n+            actions = new LinkedList<>();\n+        }\n+        actions.add(new Action(label, description, identifier));\n+        return this;\n+    }\n+\n+    private static final int MAX_ANNOTATIONS = 50;\n+    /**\n+     * Actually creates the check run. (If more than fifty annotations were requested, this is done in batches.)\n+     *\n+     * @return the resulting run\n+     * @throws IOException\n+     *             for the usual reasons\n+     */\n+    public @NonNull GHCheckRun create() throws IOException {\n+        List<Annotation> extraAnnotations;\n+        if (output != null && output.annotations != null && output.annotations.size() > MAX_ANNOTATIONS) {\n+            extraAnnotations = output.annotations.subList(MAX_ANNOTATIONS, output.annotations.size());\n+            output.annotations = output.annotations.subList(0, MAX_ANNOTATIONS);\n+        } else {\n+            extraAnnotations = Collections.emptyList();\n+        }\n+        GHCheckRun run = requester.with(\"output\", output).with(\"actions\", actions).fetch(GHCheckRun.class).wrap(repo);\n+        while (!extraAnnotations.isEmpty()) {\n+            Output output2 = new Output(null, output.title, output.summary);\n+            int i = Math.min(extraAnnotations.size(), MAX_ANNOTATIONS);\n+            output2.annotations = extraAnnotations.subList(0, i);\n+            extraAnnotations = extraAnnotations.subList(i, extraAnnotations.size());\n+            run = repo.root.createRequest()\n+                    .withPreview(Previews.ANTIOPE)\n+                    .method(\"PATCH\")\n+                    .with(\"output\", output2)\n+                    .withUrlPath(repo.getApiTailUrl(\"check-runs/\" + run.id))\n+                    .fetch(GHCheckRun.class)\n+                    .wrap(repo);\n+        }\n+        return run;\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#output-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Output {\n+\n+        private final transient GHCheckRunBuilder builder;\n+        private final String title;\n+        private final String summary;\n+        private String text;\n+        List<Annotation> annotations;\n+        List<Image> images;\n+\n+        Output(GHCheckRunBuilder builder, String title, String summary) {\n+            this.builder = builder;\n+            this.title = title;\n+            this.summary = summary;\n+        }\n+\n+        public @NonNull Output withText(@CheckForNull String text) {\n+            this.text = text;\n+            return this;\n+        }\n+\n+        /**\n+         * Drafts a single-line annotation section.\n+         *\n+         * @param path\n+         *            as in GitHub documentation\n+         * @param line\n+         *            {@code startLine} and {@code endLine} together\n+         * @param annotationLevel\n+         *            as in GitHub documentation\n+         * @param message\n+         *            as in GitHub documentation\n+         * @return use {@link Annotation#done} to continue\n+         */\n+        public @NonNull Annotation withAnnotation(@NonNull String path,\n+                int line,\n+                @NonNull GHCheckRun.AnnotationLevel annotationLevel,\n+                @NonNull String message) {\n+            return withAnnotation(path, line, line, annotationLevel, message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5MTMzMA=="}, "originalCommit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NjkyNA==", "bodyText": "I was leaving it public in case the Jackson databinding required it to be, but can check if tests still pass if it is made less accessible.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r400246924", "createdAt": "2020-03-30T14:42:02Z", "author": {"login": "jglick"}, "path": "src/main/java/org/kohsuke/github/GHCheckRunBuilder.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import edu.umd.cs.findbugs.annotations.CheckForNull;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * Drafts a check run.\n+ *\n+ * @see GHCheckRun\n+ * @see GHRepository#createCheckRun\n+ * @see <a href=\"https://developer.github.com/v3/checks/runs/#create-a-check-run\">documentation</a>\n+ */\n+@SuppressFBWarnings(value = \"URF_UNREAD_FIELD\", justification = \"Jackson serializes these even without a getter\")\n+@Preview\n+@Deprecated\n+public final class GHCheckRunBuilder {\n+\n+    private final GHRepository repo;\n+    private final Requester requester;\n+    Output output;\n+    List<Action> actions;\n+\n+    GHCheckRunBuilder(GHRepository repo, String name, String headSHA) {\n+        this.repo = repo;\n+        requester = repo.root.createRequest()\n+                .withPreview(Previews.ANTIOPE)\n+                .method(\"POST\")\n+                .with(\"name\", name)\n+                .with(\"head_sha\", headSHA)\n+                .withUrlPath(repo.getApiTailUrl(\"check-runs\"));\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withDetailsURL(@CheckForNull String detailsURL) {\n+        requester.with(\"details_url\", detailsURL);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withExternalID(@CheckForNull String externalID) {\n+        requester.with(\"external_id\", externalID);\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStatus(@CheckForNull GHCheckRun.Status status) {\n+        if (status != null) {\n+            // Do *not* use the overload taking Enum, as that s/_/-/g which would be wrong here.\n+            requester.with(\"status\", status.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withConclusion(@CheckForNull GHCheckRun.Conclusion conclusion) {\n+        if (conclusion != null) {\n+            requester.with(\"conclusion\", conclusion.toString().toLowerCase(Locale.ROOT));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withStartedAt(@CheckForNull Date startedAt) {\n+        if (startedAt != null) {\n+            requester.with(\"started_at\", GitHubClient.printDate(startedAt));\n+        }\n+        return this;\n+    }\n+\n+    public @NonNull GHCheckRunBuilder withCompletedAt(@CheckForNull Date completedAt) {\n+        if (completedAt != null) {\n+            requester.with(\"completed_at\", GitHubClient.printDate(completedAt));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Drafts the output section.\n+     *\n+     * @param title\n+     *            as in GitHub documentation\n+     * @param summary\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull Output withOutput(@NonNull String title, @NonNull String summary) {\n+        return new Output(this, title, summary);\n+    }\n+\n+    /**\n+     * Drafts an action section.\n+     *\n+     * @param label\n+     *            as in GitHub documentation\n+     * @param description\n+     *            as in GitHub documentation\n+     * @param identifier\n+     *            as in GitHub documentation\n+     * @return use {@link Output#done} to continue\n+     */\n+    public @NonNull GHCheckRunBuilder withAction(@NonNull String label,\n+            @NonNull String description,\n+            @NonNull String identifier) {\n+        if (actions == null) {\n+            actions = new LinkedList<>();\n+        }\n+        actions.add(new Action(label, description, identifier));\n+        return this;\n+    }\n+\n+    private static final int MAX_ANNOTATIONS = 50;\n+    /**\n+     * Actually creates the check run. (If more than fifty annotations were requested, this is done in batches.)\n+     *\n+     * @return the resulting run\n+     * @throws IOException\n+     *             for the usual reasons\n+     */\n+    public @NonNull GHCheckRun create() throws IOException {\n+        List<Annotation> extraAnnotations;\n+        if (output != null && output.annotations != null && output.annotations.size() > MAX_ANNOTATIONS) {\n+            extraAnnotations = output.annotations.subList(MAX_ANNOTATIONS, output.annotations.size());\n+            output.annotations = output.annotations.subList(0, MAX_ANNOTATIONS);\n+        } else {\n+            extraAnnotations = Collections.emptyList();\n+        }\n+        GHCheckRun run = requester.with(\"output\", output).with(\"actions\", actions).fetch(GHCheckRun.class).wrap(repo);\n+        while (!extraAnnotations.isEmpty()) {\n+            Output output2 = new Output(null, output.title, output.summary);\n+            int i = Math.min(extraAnnotations.size(), MAX_ANNOTATIONS);\n+            output2.annotations = extraAnnotations.subList(0, i);\n+            extraAnnotations = extraAnnotations.subList(i, extraAnnotations.size());\n+            run = repo.root.createRequest()\n+                    .withPreview(Previews.ANTIOPE)\n+                    .method(\"PATCH\")\n+                    .with(\"output\", output2)\n+                    .withUrlPath(repo.getApiTailUrl(\"check-runs/\" + run.id))\n+                    .fetch(GHCheckRun.class)\n+                    .wrap(repo);\n+        }\n+        return run;\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#output-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Output {\n+\n+        private final transient GHCheckRunBuilder builder;\n+        private final String title;\n+        private final String summary;\n+        private String text;\n+        List<Annotation> annotations;\n+        List<Image> images;\n+\n+        Output(GHCheckRunBuilder builder, String title, String summary) {\n+            this.builder = builder;\n+            this.title = title;\n+            this.summary = summary;\n+        }\n+\n+        public @NonNull Output withText(@CheckForNull String text) {\n+            this.text = text;\n+            return this;\n+        }\n+\n+        /**\n+         * Drafts a single-line annotation section.\n+         *\n+         * @param path\n+         *            as in GitHub documentation\n+         * @param line\n+         *            {@code startLine} and {@code endLine} together\n+         * @param annotationLevel\n+         *            as in GitHub documentation\n+         * @param message\n+         *            as in GitHub documentation\n+         * @return use {@link Annotation#done} to continue\n+         */\n+        public @NonNull Annotation withAnnotation(@NonNull String path,\n+                int line,\n+                @NonNull GHCheckRun.AnnotationLevel annotationLevel,\n+                @NonNull String message) {\n+            return withAnnotation(path, line, line, annotationLevel, message);\n+        }\n+\n+        /**\n+         * Drafts a potentially multiline annotation section.\n+         *\n+         * @param path\n+         *            as in GitHub documentation\n+         * @param startLine\n+         *            as in GitHub documentation\n+         * @param endLine\n+         *            as in GitHub documentation\n+         * @param annotationLevel\n+         *            as in GitHub documentation\n+         * @param message\n+         *            as in GitHub documentation\n+         * @return use {@link Annotation#done} to continue\n+         */\n+        public @NonNull Annotation withAnnotation(@NonNull String path,\n+                int startLine,\n+                int endLine,\n+                @NonNull GHCheckRun.AnnotationLevel annotationLevel,\n+                @NonNull String message) {\n+            return new Annotation(this, path, startLine, endLine, annotationLevel, message);\n+        }\n+\n+        /**\n+         * Drafts an image section.\n+         *\n+         * @param alt\n+         *            as in GitHub documentation\n+         * @param imageURL\n+         *            as in GitHub documentation\n+         * @return use {@link Image#done} to continue\n+         */\n+        public @NonNull Image withImage(@NonNull String alt, @NonNull String imageURL) {\n+            return new Image(this, alt, imageURL);\n+        }\n+\n+        public @NonNull GHCheckRunBuilder done() {\n+            builder.output = this;\n+            return builder;\n+        }\n+\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#annotations-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Annotation {\n+\n+        private final transient Output output;\n+        private final String path;\n+        private final int start_line;\n+        private final int end_line;\n+        private final String annotation_level;\n+        private final String message;\n+        private Integer start_column;\n+        private Integer end_column;\n+        private String title;\n+        private String raw_details;\n+\n+        Annotation(Output output,\n+                String path,\n+                int start_line,\n+                int end_line,\n+                GHCheckRun.AnnotationLevel annotation_level,\n+                String message) {\n+            this.output = output;\n+            this.path = path;\n+            this.start_line = start_line;\n+            this.end_line = end_line;\n+            this.annotation_level = annotation_level.toString().toLowerCase(Locale.ROOT);\n+            this.message = message;\n+        }\n+\n+        public @NonNull Annotation withStartColumn(@CheckForNull Integer startColumn) {\n+            start_column = startColumn;\n+            return this;\n+        }\n+\n+        public @NonNull Annotation withEndColumn(@CheckForNull Integer endColumn) {\n+            end_column = endColumn;\n+            return this;\n+        }\n+\n+        public @NonNull Annotation withTitle(@CheckForNull String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        public @NonNull Annotation withRawDetails(@CheckForNull String rawDetails) {\n+            raw_details = rawDetails;\n+            return this;\n+        }\n+\n+        public @NonNull Output done() {\n+            if (output.annotations == null) {\n+                output.annotations = new LinkedList<>();\n+            }\n+            output.annotations.add(this);\n+            return output;\n+        }\n+\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#images-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Image {\n+\n+        private final transient Output output;\n+        private final String alt;\n+        private final String image_url;\n+        private String caption;\n+\n+        Image(Output output, String alt, String image_url) {\n+            this.output = output;\n+            this.alt = alt;\n+            this.image_url = image_url;\n+        }\n+\n+        public @NonNull Image withCaption(@CheckForNull String caption) {\n+            this.caption = caption;\n+            return this;\n+        }\n+\n+        public @NonNull Output done() {\n+            if (output.images == null) {\n+                output.images = new LinkedList<>();\n+            }\n+            output.images.add(this);\n+            return output;\n+        }\n+\n+    }\n+\n+    /**\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#actions-object\">documentation</a>\n+     */\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static final class Action {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5NTc5OA=="}, "originalCommit": {"oid": "89a6664e4507aef8a6f9605baec10ae9e464442f"}, "originalPosition": 356}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0Nzc2Mw==", "bodyText": "Perhaps. Not quite as friendly to code completion. Can look into it.", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r400247763", "createdAt": "2020-03-30T14:43:05Z", "author": {"login": "jglick"}, "path": "src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+@SuppressWarnings(\"deprecation\") // preview\n+public class GHCheckRunBuilderTest extends AbstractGitHubWireMockTest {\n+\n+    @Test\n+    public void createCheckRun() throws Exception {\n+        GHCheckRun checkRun = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"foo\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withStatus(GHCheckRun.Status.COMPLETED)\n+                .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n+                .withDetailsURL(\"http://nowhere.net/stuff\")\n+                .withExternalID(\"whatever\")\n+                .withStartedAt(new Date(999_999_000))\n+                .withCompletedAt(new Date(999_999_999))\n+                .withOutput(\"Some Title\", \"what happened\u2026\")\n+                .withAnnotation(\"stuff.txt\", 1, GHCheckRun.AnnotationLevel.NOTICE, \"hello to you too\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4MjE5Nw=="}, "originalCommit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1MjU4Mw==", "bodyText": "we should verify this not providing conclusion works\n\nSure.\n\nIf you remove this line from this test\n\nYeah, so long as the code coverage report does not then start complaining that there is insufficient coverage percentage for some nested class, as it was yelling at me before\u2026\n\nwe should also have a test verifying the error returned when\u2026\n\nCan do that. As a general observation, GitHub does not document error codes. Even when I have raised support requests and specifically complained that documentation neglects to specify the error code for some corner case, they have rejected the request saying that their general guidelines mention error responses (when in fact those guidelines are so vague that they could easily be interpreted in several ways).", "url": "https://github.com/hub4j/github-api/pull/753#discussion_r400252583", "createdAt": "2020-03-30T14:49:09Z", "author": {"login": "jglick"}, "path": "src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.kohsuke.github;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+@SuppressWarnings(\"deprecation\") // preview\n+public class GHCheckRunBuilderTest extends AbstractGitHubWireMockTest {\n+\n+    @Test\n+    public void createCheckRun() throws Exception {\n+        GHCheckRun checkRun = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"foo\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withStatus(GHCheckRun.Status.COMPLETED)\n+                .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n+                .withDetailsURL(\"http://nowhere.net/stuff\")\n+                .withExternalID(\"whatever\")\n+                .withStartedAt(new Date(999_999_000))\n+                .withCompletedAt(new Date(999_999_999))\n+                .withOutput(\"Some Title\", \"what happened\u2026\")\n+                .withAnnotation(\"stuff.txt\", 1, GHCheckRun.AnnotationLevel.NOTICE, \"hello to you too\")\n+                .withTitle(\"Look here\")\n+                .done()\n+                .withImage(\"Unikitty\", \"https://i.pinimg.com/474x/9e/65/c0/9e65c0972294f1e10f648c9780a79fab.jpg\")\n+                .withCaption(\"Princess Unikitty\")\n+                .done()\n+                .done()\n+                .withAction(\"Help\", \"what I need help with\", \"doit\")\n+                .create();\n+        assertEquals(\"completed\", checkRun.getStatus());\n+        assertEquals(1, checkRun.getOutput().getAnnotationsCount());\n+        assertEquals(535049329, checkRun.id);\n+    }\n+\n+    @Test\n+    public void createCheckRunManyAnnotations() throws Exception {\n+        GHCheckRunBuilder.DraftOutput output = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"big\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n+                .withOutput(\"Big Run\", \"Lots of stuff here \u00bb\");\n+        for (int i = 0; i < 101; i++) {\n+            output.withAnnotation(\"stuff.txt\", 1, GHCheckRun.AnnotationLevel.NOTICE, \"hello #\" + i).done();\n+        }\n+        GHCheckRun checkRun = output.done().create();\n+        assertEquals(\"completed\", checkRun.getStatus());\n+        assertEquals(\"Big Run\", checkRun.getOutput().getTitle());\n+        assertEquals(101, checkRun.getOutput().getAnnotationsCount());\n+        assertEquals(537614832, checkRun.id);\n+    }\n+\n+    @Test\n+    public void createCheckRunNoAnnotations() throws Exception {\n+        GHCheckRun checkRun = gitHub.getRepository(\"jglick/github-api-test\")\n+                .createCheckRun(\"quick\", \"4a929d464a2fae7ee899ce603250f7dab304bc4b\")\n+                .withConclusion(GHCheckRun.Conclusion.NEUTRAL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NDY1OQ=="}, "originalCommit": {"oid": "8b51a44b7c7536b5cbb7f24de32a6519126224ad"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "883c8cc4c8baff718f47b48f1b9540d322f8e581", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/883c8cc4c8baff718f47b48f1b9540d322f8e581", "committedDate": "2020-03-30T18:20:05Z", "message": "Merge branch 'master' of github.com:github-api/github-api into createCheckRun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6214b6a3ffb12367a642e05890d77475088cb044", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/6214b6a3ffb12367a642e05890d77475088cb044", "committedDate": "2020-03-30T18:26:23Z", "message": "Regenerated WireMock metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c9397f7f60f20e0bcac4898ea931438505a9260", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/7c9397f7f60f20e0bcac4898ea931438505a9260", "committedDate": "2020-03-30T18:46:56Z", "message": "Switched from fluent style with .done() to accessible constructors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82b9c05d0f9e512986dddbad8eae2dda0fe0d3f2", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/82b9c05d0f9e512986dddbad8eae2dda0fe0d3f2", "committedDate": "2020-03-30T18:49:37Z", "message": "Strengthened test a bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58f1fe0671de8d6b46eb78b7ede3d3819b417348", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/58f1fe0671de8d6b46eb78b7ede3d3819b417348", "committedDate": "2020-03-30T18:58:58Z", "message": "createPendingCheckRun"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ab9381d0a69ddf7afb06afd5218c66e9e037714", "author": {"user": {"login": "jglick", "name": "Jesse Glick"}}, "url": "https://github.com/hub4j/github-api/commit/3ab9381d0a69ddf7afb06afd5218c66e9e037714", "committedDate": "2020-03-30T19:06:01Z", "message": "createCheckRunErrMissingConclusion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjE1Mjg1", "url": "https://github.com/hub4j/github-api/pull/753#pullrequestreview-384215285", "createdAt": "2020-03-30T20:43:46Z", "commit": {"oid": "3ab9381d0a69ddf7afb06afd5218c66e9e037714"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1716, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}