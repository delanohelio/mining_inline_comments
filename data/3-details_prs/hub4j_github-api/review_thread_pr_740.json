{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MzQxOTk5", "number": 740, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0MTo1NVrODoxp7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMTozNlrODo1HuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDgzMTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0MTo1NVrOF3iGSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0MTo1NVrOF3iGSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NDY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *             the io exception\n          \n          \n            \n                 *             the io exception\n          \n          \n            \n                 * @see <a href=\"https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-specific-ref\">List check runs for a specific ref</a>", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393774664", "createdAt": "2020-03-17T15:41:55Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHRepository.java", "diffHunk": "@@ -1773,6 +1773,24 @@ public GHCommitStatus getLastCommitStatus(String sha1) throws IOException {\n         return v.isEmpty() ? null : v.get(0);\n     }\n \n+    /**\n+     * Gets check runs for given ref.\n+     *\n+     * @param ref\n+     *            ref\n+     * @return check runs for given ref\n+     * @throws IOException\n+     *             the io exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2afffdd6c5abba9039c9d6418eb7457097ee2de7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDg2NzUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHCheckRuns.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0OToxOFrOF3ic0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo1MjozNVrOF4UkLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA==", "bodyText": "I think you'll need to model this after the PagedSearchIterable.  The check runs use paged responses: https://developer.github.com/v3/checks/runs/#response-3\nYou'll also need to have a test that returns multiple pages (you can force this by having a paged iterable with a small pageCount.", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393780434", "createdAt": "2020-03-17T15:49:18Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCheckRuns.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kohsuke.github;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Represents the response of listing check-runs for given ref.\n+ */\n+public class GHCheckRuns {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2afffdd6c5abba9039c9d6418eb7457097ee2de7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4Mzc0Mw==", "bodyText": "FYI, I don't love the behavior of PageSearchIterable currently. The Iterable has methods that I would rather see done elsewhere.\nThis method relies on a cached result, meaning the Iterable can get out of sync with underlying search results. \ud83d\ude2d\nhttps://github.com/github-api/github-api/blob/bccae94c7a740fa7ba297fd6eb2a6782ed156a98/src/main/java/org/kohsuke/github/PagedSearchIterable.java#L48-L50\nOpened #749 for this.", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393883743", "createdAt": "2020-03-17T18:24:58Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCheckRuns.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kohsuke.github;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Represents the response of listing check-runs for given ref.\n+ */\n+public class GHCheckRuns {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}, "originalCommit": {"oid": "2afffdd6c5abba9039c9d6418eb7457097ee2de7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0NjA4Mg==", "bodyText": "Thanks, I didn't spot that :-) Is it OK to create a search builder class - with one method specifying the ref and not extending GHSearchBuilder - so that it's similar to other search builders even though it's not using the search api? Or should I not mix it with search other builders? Or any other idea? :-)", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393946082", "createdAt": "2020-03-17T20:21:28Z", "author": {"login": "avano"}, "path": "src/main/java/org/kohsuke/github/GHCheckRuns.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kohsuke.github;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Represents the response of listing check-runs for given ref.\n+ */\n+public class GHCheckRuns {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}, "originalCommit": {"oid": "2afffdd6c5abba9039c9d6418eb7457097ee2de7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NTMyMg==", "bodyText": "I don't have any strong requirement here except that the api properly support paging.\nNo, it shouldn't extend search builder, just use a the same basic structure with an adapt() method to create an iterator that works.\nProbably want to make GHCheckRuns into GHCheckRunsPage and make it internal.\nAnd then have a CheckRunsIterable also internal that extends PagedIterable<GHCheckRun>.   Finally, have getCheckRuns(String ref) return PagedIterable<GHCheckRun>.\nThe reason I suggest doing it this way, is to limit added API surface area. While your underlying implementation will be different, users will interact with it as a normal PagedIterable.", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393965322", "createdAt": "2020-03-17T20:56:21Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCheckRuns.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kohsuke.github;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Represents the response of listing check-runs for given ref.\n+ */\n+public class GHCheckRuns {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}, "originalCommit": {"oid": "2afffdd6c5abba9039c9d6418eb7457097ee2de7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMTY2OQ==", "bodyText": "I created a temp commit here avano@6ba7b3d - can you please check if I understood correctly?", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r394201669", "createdAt": "2020-03-18T09:17:15Z", "author": {"login": "avano"}, "path": "src/main/java/org/kohsuke/github/GHCheckRuns.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kohsuke.github;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Represents the response of listing check-runs for given ref.\n+ */\n+public class GHCheckRuns {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}, "originalCommit": {"oid": "2afffdd6c5abba9039c9d6418eb7457097ee2de7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMTUxNg==", "bodyText": "@avano Yes, that looks right to me.", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r394601516", "createdAt": "2020-03-18T19:52:35Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHCheckRuns.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kohsuke.github;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Represents the response of listing check-runs for given ref.\n+ */\n+public class GHCheckRuns {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}, "originalCommit": {"oid": "2afffdd6c5abba9039c9d6418eb7457097ee2de7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDg5MzYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/kohsuke/github/GHRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo1NTowNlrOF3iuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo1NTowNlrOF3iuKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4NDg3Mg==", "bodyText": "Once you have GHCheckRuns using paging you can set page count to 1 and rerecord this.  Also, you could record this based on github-api/github-api which currently has a larger number of checks.", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393784872", "createdAt": "2020-03-17T15:55:06Z", "author": {"login": "bitwiseman"}, "path": "src/test/java/org/kohsuke/github/GHRepositoryTest.java", "diffHunk": "@@ -496,4 +496,21 @@ public void listCollaborators() throws Exception {\n         List<GHUser> collaborators = repo.listCollaborators().toList();\n         assertThat(collaborators.size(), greaterThan(10));\n     }\n+\n+    @Test\n+    public void getCheckRuns() throws Exception {\n+        GHCheckRuns checkRuns = getRepository().getCheckRuns(\"8051615eff597f4e49f4f47625e6fc2b49f26bfc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2afffdd6c5abba9039c9d6418eb7457097ee2de7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTM5OTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/kohsuke/github/GHRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMTozNlrOF3n6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMTozNlrOF3n6Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2OTkwNw==", "bodyText": "This method has bad performance.  Opened #748.  Thanks!", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393869907", "createdAt": "2020-03-17T18:01:36Z", "author": {"login": "bitwiseman"}, "path": "src/main/java/org/kohsuke/github/GHRepository.java", "diffHunk": "@@ -1773,6 +1773,26 @@ public GHCommitStatus getLastCommitStatus(String sha1) throws IOException {\n         return v.isEmpty() ? null : v.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04dca90294888a2e53c41e58c2bba5fd806147a3"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1889, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}