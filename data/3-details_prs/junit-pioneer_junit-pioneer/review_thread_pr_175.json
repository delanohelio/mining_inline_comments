{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MTk3NDY3", "number": 175, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0ODo0NVrODr1AMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozNjo1N1rOD2qKmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjgzNzYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0ODo0NVrOF8Z1rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMDoyNzoxMFrOF9Qc1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjIyMw==", "bodyText": "We could disable on class level, too, right? Would that make sense?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r398882223", "createdAt": "2020-03-26T20:48:45Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+public class DisableIfNameExtension implements ExecutionCondition {\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\n+\t\tif (!disable.isPresent()) {\n+\t\t\treturn enabled(\"No instructions to disable\");\n+\t\t} else if (!context.getTestMethod().isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f23975a6ffe021021923ab14cb70805b8432ce0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxMTc0Nw==", "bodyText": "The problem with disabling at class level is that this will get disabled before the parameterized tests could get registered.\nHence, all tests will end up getting disabled since the test name will never be calculated for a parameterized test", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r398911747", "createdAt": "2020-03-26T21:45:03Z", "author": {"login": "nishantvas"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+public class DisableIfNameExtension implements ExecutionCondition {\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\n+\t\tif (!disable.isPresent()) {\n+\t\t\treturn enabled(\"No instructions to disable\");\n+\t\t} else if (!context.getTestMethod().isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjIyMw=="}, "originalCommit": {"oid": "f23975a6ffe021021923ab14cb70805b8432ce0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3Njk4MQ==", "bodyText": "Yeah, that makes sense. And I just checked that the annotation hs @Target({ ElementType.METHOD }), so this should not happen anyways.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r399776981", "createdAt": "2020-03-29T10:27:10Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+public class DisableIfNameExtension implements ExecutionCondition {\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\n+\t\tif (!disable.isPresent()) {\n+\t\t\treturn enabled(\"No instructions to disable\");\n+\t\t} else if (!context.getTestMethod().isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjIyMw=="}, "originalCommit": {"oid": "f23975a6ffe021021923ab14cb70805b8432ce0b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk1NzUzOnYy", "diffSide": "RIGHT", "path": "docs/disable-if-display-name.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMTozOVrOF_NCDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMTozOVrOF_NCDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxODEyNA==", "bodyText": "(multiple) Parameterized ==> parameterized", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401818124", "createdAt": "2020-04-01T18:21:39Z", "author": {"login": "Bukama"}, "path": "docs/disable-if-display-name.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+:page-title: @DisableIfDisplayName\n+:page-description: JUnit Jupiter extensions to selectively disable Parameterized tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk2Mjk2OnYy", "diffSide": "RIGHT", "path": "docs/disable-if-display-name.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMzoxM1rOF_NFqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMzoxM1rOF_NFqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxOTA0OA==", "bodyText": "This reads wired. What about this:\n\nThe @DisableIfDisplayName annotation can be used to selectivevly disable parameterized....", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401819048", "createdAt": "2020-04-01T18:23:13Z", "author": {"login": "Bukama"}, "path": "docs/disable-if-display-name.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+:page-title: @DisableIfDisplayName\n+:page-description: JUnit Jupiter extensions to selectively disable Parameterized tests\n+\n+The `@DisableIfDisplayName` annotation Junit Jupiter extension that can be selectively used to disable Parameterized tests which are dynamically registered on runtime basis their display name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk2NTczOnYy", "diffSide": "RIGHT", "path": "docs/disable-if-display-name.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMzo1NFrOF_NHTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMzo1NFrOF_NHTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxOTQ3MQ==", "bodyText": "Missing . at the end of the sentence.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401819471", "createdAt": "2020-04-01T18:23:54Z", "author": {"login": "Bukama"}, "path": "docs/disable-if-display-name.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+:page-title: @DisableIfDisplayName\n+:page-description: JUnit Jupiter extensions to selectively disable Parameterized tests\n+\n+The `@DisableIfDisplayName` annotation Junit Jupiter extension that can be selectively used to disable Parameterized tests which are dynamically registered on runtime basis their display name.\n+The annotations is only supported on test method level for Parameterized tests.\n+Unlike the `@Disabled` API provided in Junit which disables the test on first encounter of the annotation\n+`@DisableIfDisplayName` is validated before each `@ParameterizedTest` so that each test (name) can be individually evaluated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk3MDUzOnYy", "diffSide": "RIGHT", "path": "docs/docs-nav.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyNToxMlrOF_NKPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyNToxMlrOF_NKPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMDIyMg==", "bodyText": "Please move up so it's sorted in alphabetically order", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401820222", "createdAt": "2020-04-01T18:25:12Z", "author": {"login": "Bukama"}, "path": "docs/docs-nav.yml", "diffHunk": "@@ -16,3 +16,5 @@\n         url: /docs/temp-directory/\n       - title: \"Vintage @Test\"\n         url: /docs/vintage-test/\n+      - title: \"@DisableIfDisplayName\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk3MzUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyNTo1OFrOF_NMIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyNTo1OFrOF_NMIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMDcwNA==", "bodyText": "basis their\n\nDo you mean based on their ?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401820704", "createdAt": "2020-04-01T18:25:58Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk3OTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyNzo0OVrOF_NQWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyNzo0OVrOF_NQWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMTc4NA==", "bodyText": "If it is required to disable selective tests...", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401821784", "createdAt": "2020-04-01T18:27:49Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk4MTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyODoxMlrOF_NRRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyODoxMlrOF_NRRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjAyMA==", "bodyText": "and the test will be", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401822020", "createdAt": "2020-04-01T18:28:12Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk4Mzk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyODo1N1rOF_NTAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyODo1N1rOF_NTAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjQ2Nw==", "bodyText": "evaluates true against the display name.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401822467", "createdAt": "2020-04-01T18:28:57Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if\n+ * any of them evaluate to be true against the display name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjAxMDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODozNTo1NFrOF_NjTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODozNTo1NFrOF_NjTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNjYzOA==", "bodyText": "Displaynames of the tests cases to be disabled. The whole test case name can be stored as well as sub strings of it. The values will be evaluated [...] by default.\nIf {code regex} is provided, the string will be evaluated as ... display name.\n\n@return Test case display name", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401826638", "createdAt": "2020-04-01T18:35:54Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if\n+ * any of them evaluate to be true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjAxODE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODozNzo1M1rOF_Nn4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODozNzo1M1rOF_Nn4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNzgxMQ==", "bodyText": "Suggest to rename it to isRegEx. The name regex suggests that this field holds the regular expression itselfs, which will be confusing as a boolean can't hold such.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401827811", "createdAt": "2020-04-01T18:37:53Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if\n+ * any of them evaluate to be true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**\n+\t * Display names for the tests, they can be the whole test case names or sub strings per test\n+\t * This will be evaluated as {@link String#contains(CharSequence)} by default\n+\t * If, {@code regex} is provided, then the string will be evaluated as\n+\t * {@link String#matches(String)} against the display name\n+\t * @return Test Case display name\n+\t */\n+\tString[] value();\n+\n+\t/**\n+\t * @return if the {@code value} is to be evaluated as regular expression or sub-string\n+\t */\n+\tboolean regex() default false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjAyNzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo0MDoyMVrOF_NtrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNjo0MlrOGCUb9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyOTI5Mw==", "bodyText": "Please update to the new methods, provided by #187 after it is merged", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401829293", "createdAt": "2020-04-01T18:40:21Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -24,25 +25,31 @@\n \n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\t\tOptional<Method> testMethod = context.getTestMethod();\n \n-\t\tif (!disable.isPresent()) {\n-\t\t\treturn enabled(\"No instructions to disable\");\n-\t\t} else if (!context.getTestMethod().isPresent()) {\n-\t\t\treturn enabled(\"Only disable at method level\");\n+\t\tif (!testMethod.isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level so the parameterized tests could be registered\");\n \t\t}\n-\t\tDisableIfName details = disable.get();\n-\t\tboolean toDisable;\n-\t\tif (details.regex()) {\n-\t\t\ttoDisable = context.getDisplayName().matches(details.value());\n-\t\t} else {\n-\t\t\ttoDisable = context.getDisplayName().contains(details.value());\n+\n+\t\tOptional<DisableIfDisplayName> disableIf = findAnnotation(testMethod, DisableIfDisplayName.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NDE2MQ==", "bodyText": "Will wait for #187 to be merged to resolve all the other comments then", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r404274161", "createdAt": "2020-04-06T17:43:54Z", "author": {"login": "nishantvas"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -24,25 +25,31 @@\n \n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\t\tOptional<Method> testMethod = context.getTestMethod();\n \n-\t\tif (!disable.isPresent()) {\n-\t\t\treturn enabled(\"No instructions to disable\");\n-\t\t} else if (!context.getTestMethod().isPresent()) {\n-\t\t\treturn enabled(\"Only disable at method level\");\n+\t\tif (!testMethod.isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level so the parameterized tests could be registered\");\n \t\t}\n-\t\tDisableIfName details = disable.get();\n-\t\tboolean toDisable;\n-\t\tif (details.regex()) {\n-\t\t\ttoDisable = context.getDisplayName().matches(details.value());\n-\t\t} else {\n-\t\t\ttoDisable = context.getDisplayName().contains(details.value());\n+\n+\t\tOptional<DisableIfDisplayName> disableIf = findAnnotation(testMethod, DisableIfDisplayName.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyOTI5Mw=="}, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NTE3Mg==", "bodyText": "We just merged it, @nishantvas.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r405085172", "createdAt": "2020-04-07T20:16:42Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -24,25 +25,31 @@\n \n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\t\tOptional<Method> testMethod = context.getTestMethod();\n \n-\t\tif (!disable.isPresent()) {\n-\t\t\treturn enabled(\"No instructions to disable\");\n-\t\t} else if (!context.getTestMethod().isPresent()) {\n-\t\t\treturn enabled(\"Only disable at method level\");\n+\t\tif (!testMethod.isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level so the parameterized tests could be registered\");\n \t\t}\n-\t\tDisableIfName details = disable.get();\n-\t\tboolean toDisable;\n-\t\tif (details.regex()) {\n-\t\t\ttoDisable = context.getDisplayName().matches(details.value());\n-\t\t} else {\n-\t\t\ttoDisable = context.getDisplayName().contains(details.value());\n+\n+\t\tOptional<DisableIfDisplayName> disableIf = findAnnotation(testMethod, DisableIfDisplayName.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyOTI5Mw=="}, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjM3Mzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyOTo1NlrOGMgnEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyOTo1NlrOGMgnEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MDM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n          \n          \n            \n            \t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415770385", "createdAt": "2020-04-27T12:29:56Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**\n+\t *\n+\t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n+\t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n+\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjM4NDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozMjowNVrOGMgs1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozMjowNVrOGMgs1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MTg2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n          \n          \n            \n             * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415771863", "createdAt": "2020-04-27T12:32:05Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjM4NjcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozMjo0M1rOGMguRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozMjo0M1rOGMguRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MjIzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n          \n          \n            \n             * The extension is an {@link ExecutionCondition}, which validates dynamically registered tests.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415772230", "createdAt": "2020-04-27T12:32:43Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjM4OTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozMzoxOFrOGMgv3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozMzoxOFrOGMgv3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MjYzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n          \n          \n            \n             * the whole test but not the Parameterized tests selectively\n          \n          \n            \n             * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n          \n          \n            \n             * the whole test, but not the Parameterized tests selectively.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415772638", "createdAt": "2020-04-27T12:33:18Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjM5MzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozNDoxMlrOGMgyKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozNDoxMlrOGMgyKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MzIyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * registered Parameterized tests, then we can utilize the following\n          \n          \n            \n             * registered Parameterized tests, then we can utilize the following.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415773225", "createdAt": "2020-04-27T12:34:12Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjM5ODEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozNToyNFrOGMg0_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozNToyNFrOGMg0_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3Mzk0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Each repeatable annotation will be processed for each test and test will be skipped if\n          \n          \n            \n             * any of them evaluates true against the display name\n          \n          \n            \n             * Each repeatable annotation will be processed for each test and the test will be skipped if\n          \n          \n            \n             * any of them evaluates true against the display name.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415773949", "createdAt": "2020-04-27T12:35:24Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjQwNTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozNjo1N1rOGMg5AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozNjo1N1rOGMg5AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NDk3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n          \n          \n            \n            \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n          \n          \n            \n            \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as  a sub string. \n          \n          \n            \n            \t * The values will be evaluated with {@link String#contains(CharSequence)} by default.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415774976", "createdAt": "2020-04-27T12:36:57Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**\n+\t *\n+\t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n+\t * The values will be evaluated with {@link String#contains(CharSequence)} by default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4185, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}