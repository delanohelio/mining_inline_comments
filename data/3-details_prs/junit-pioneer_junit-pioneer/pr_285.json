{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTQ5MjYx", "number": 285, "title": "Provide additional PioneerTestKit methods to create ExecutionResults (283)", "bodyText": "Provide additional PioneerTestKit methods to create ExecutionResults (#283 / #285)\n\nRefactored one method of the PioneerTestKit to create ExecutionResults,\nallowing to pass classes instead of strings containing the fully\nqualified class name.\nTests for the PioneerTestKit were also added.\n\nCloses #283\nPR: #285\n\n\nI hereby agree to the terms of the JUnit Pioneer Contributor License Agreement.", "createdAt": "2020-06-21T14:00:09Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285", "merged": true, "mergeCommit": {"oid": "73418cfeff30232943a9927ebc3d4e82b7c80275"}, "closed": true, "closedAt": "2020-08-05T11:11:52Z", "author": {"login": "Bukama"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctcs8BAH2gAyNDM3NTQ5MjYxOjE0MmM2ODBhNmM5YjE5YWJjYzliMTEzOGQ5YjQ2NDI2Yzc4MThjOWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc75HE-AH2gAyNDM3NTQ5MjYxOjY3NjU4ZDAzMjMwMDYwYzVmMjIyYmRkMTM1ODVjNDM5ODZlZjBhZmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "142c680a6c9b19abcc9b1138d9b46426c7818c9d", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/142c680a6c9b19abcc9b1138d9b46426c7818c9d", "committedDate": "2020-06-21T13:59:06Z", "message": "Provide additional PioneerTestKit methods to create ExecutionResults\n\nAdditional methods to create ExecutionResults were added to the\nPioneerTestKit, allowing to pass classes instead of strings containing\nthe fully qualified class name.\n\nCloses #283\nPR:"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTE4OTE3", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#pullrequestreview-434518917", "createdAt": "2020-06-21T17:27:53Z", "commit": {"oid": "142c680a6c9b19abcc9b1138d9b46426c7818c9d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNzoyNzo1M1rOGmtObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNzo0Mjo0MlrOGmtSww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MDA0NQ==", "bodyText": "Is this a typo? allTypNames instead of allTypeNames", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r443240045", "createdAt": "2020-06-21T17:27:53Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/ExecutionResults.java", "diffHunk": "@@ -55,6 +57,20 @@\n \t\t\t\t.execute();\n \t}\n \n+\tExecutionResults(Class<?> testClass, String testMethodName, Class[] methodParameterTypes) {\n+\n+\t\tString allTypNames = Arrays", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142c680a6c9b19abcc9b1138d9b46426c7818c9d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MTA4Mw==", "bodyText": "This constructor seems unnecessary - you could just join the canonical class names in the factory method and call the constructor that takes a String?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r443241083", "createdAt": "2020-06-21T17:41:38Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/ExecutionResults.java", "diffHunk": "@@ -55,6 +57,20 @@\n \t\t\t\t.execute();\n \t}\n \n+\tExecutionResults(Class<?> testClass, String testMethodName, Class[] methodParameterTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142c680a6c9b19abcc9b1138d9b46426c7818c9d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MTE1NQ==", "bodyText": "These two methods should be merged by using the Class<?>... as the last parameter type. Which should throw an exception if no last parameter is passed (or maybe just call executeTestMethod as an attempt to \"fix\" the bad call?).\nAlternatively, you could make it like this:\npublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName, Class<?> firstParameter, Class<?>... additionalParameters)\n\nThis ensures at least one class object is always passed to the method but is much more cumbersome. Method signature might be confusing too.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r443241155", "createdAt": "2020-06-21T17:42:42Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -46,4 +46,30 @@ public static ExecutionResults executeTestMethodWithParameterTypes(Class<?> test\n \t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n \t}\n \n+\t/**\n+\t * Returns the execution results of the given method of a given test class.\n+\t *\n+\t * @param testClass Name of the test class\n+\t * @param testMethodName Name of the test method (of the given class)\n+\t * @param methodParameterTypes Array containing the types of for the parameters\n+\t * @return The execution results\n+\t */\n+\tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142c680a6c9b19abcc9b1138d9b46426c7818c9d"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d492e95b7b5599fb418e9c24661f2e0415ffbe", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/41d492e95b7b5599fb418e9c24661f2e0415ffbe", "committedDate": "2020-06-27T10:24:49Z", "message": "Refactoring\n\n- Removing public method which accepts String\n- Merge array and single class method\n- Adding TestKitTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/291dcc6cd1ddefa0224320c7d008fdd229db3a02", "committedDate": "2020-07-02T16:49:27Z", "message": "Merge branch 'master' into bishue283/testkitExecuteWithClassParameter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjkwNzI5", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#pullrequestreview-438690729", "createdAt": "2020-06-27T11:16:02Z", "commit": {"oid": "41d492e95b7b5599fb418e9c24661f2e0415ffbe"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMToxNjowMlrOGp1D9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyOTo1NVrOGuyQrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNDE2NA==", "bodyText": "Did you delete the original factory method?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r446514164", "createdAt": "2020-06-27T11:16:02Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d492e95b7b5599fb418e9c24661f2e0415ffbe"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwODA1OQ==", "bodyText": "It's either of or for but never both.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r451708059", "createdAt": "2020-07-08T17:24:42Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMDY0OQ==", "bodyText": "But why only for that one parameter?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r451710649", "createdAt": "2020-07-08T17:29:02Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMTE1MQ==", "bodyText": "But who tests our tests? (Is this necessary? I'm not sure...)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r451711151", "createdAt": "2020-07-08T17:29:55Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PioneerTestKitTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzczMjA0", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#pullrequestreview-445373204", "createdAt": "2020-07-09T07:54:20Z", "commit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NDoyMVrOGvF1Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NDoyMVrOGvF1Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMTc1NA==", "bodyText": "Did you consider Objects.requireNonNull(T value, String message)? I think it conveys the same intent really nicely.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r452031754", "createdAt": "2020-07-09T07:54:21Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,\n-\t\t\tString methodParameterTypes) {\n-\t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n+\t\t\tClass<?>... methodParameterTypes) {\n+\n+\t\tif (null == methodParameterTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "974dcf0646d03e99d0092d93e2d985ca08bc7089", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/974dcf0646d03e99d0092d93e2d985ca08bc7089", "committedDate": "2020-07-10T16:19:16Z", "message": "Merge branch 'master' into bishue283/testkitExecuteWithClassParameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb5b718bb8d227a08b65402f41aecd0dde5980de", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/eb5b718bb8d227a08b65402f41aecd0dde5980de", "committedDate": "2020-07-10T16:26:48Z", "message": "Fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "109047e3401911358bb4a4f559a2f7fd15bdfa2e", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/109047e3401911358bb4a4f559a2f7fd15bdfa2e", "committedDate": "2020-07-20T10:44:58Z", "message": "Merge branch 'master' into bishue283/testkitExecuteWithClassParameter\n\n# Conflicts:\n#\tsrc/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83313bd50303df5927c8a7e8cc24d392c3c0369a", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/83313bd50303df5927c8a7e8cc24d392c3c0369a", "committedDate": "2020-07-20T10:59:08Z", "message": "Merge master and update to new PioneerAssertions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNTA3Mzc3", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#pullrequestreview-451507377", "createdAt": "2020-07-20T11:05:58Z", "commit": {"oid": "83313bd50303df5927c8a7e8cc24d392c3c0369a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTowNTo1OFrOG0GZYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTowNTo1OFrOG0GZYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI4MzkzNg==", "bodyText": "This could just be Assertions.assertThat if you do import org.assertj.core.api.Assertions", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r457283936", "createdAt": "2020-07-20T11:05:58Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -74,8 +74,9 @@ void executeTestMethodWithParameterTypesSingleParameterTypeIllegalArgumentExcept\n \t\t\t\t});\n \n \t\t\t\tString expectedMessage = \"methodParameterTypes must not be null\";\n-\t\t\t\tassertThat(thrown).isInstanceOf(IllegalArgumentException.class);\n-\t\t\t\tassertThat(thrown.getMessage()).isEqualTo(expectedMessage);\n+\n+\t\t\t\torg.assertj.core.api.Assertions.assertThat(thrown).isInstanceOf(IllegalArgumentException.class);\n+\t\t\t\torg.assertj.core.api.Assertions.assertThat(thrown.getMessage()).isEqualTo(expectedMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83313bd50303df5927c8a7e8cc24d392c3c0369a"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f2305f0b9bcfa362a31b79e244028ada1bc9c5", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/18f2305f0b9bcfa362a31b79e244028ada1bc9c5", "committedDate": "2020-07-20T11:45:44Z", "message": "Change AssertJ import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNTcxNjI4", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#pullrequestreview-451571628", "createdAt": "2020-07-20T12:46:26Z", "commit": {"oid": "18f2305f0b9bcfa362a31b79e244028ada1bc9c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a724f8e6f648cb5ef4b96eaf199159b6c670c029", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a724f8e6f648cb5ef4b96eaf199159b6c670c029", "committedDate": "2020-07-20T13:14:24Z", "message": "Updated comments (to move GitHub discussion to code)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eacac402de7177638c0a6db9d861a8ac7a1686d", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/7eacac402de7177638c0a6db9d861a8ac7a1686d", "committedDate": "2020-07-31T17:13:02Z", "message": "Merge branch 'master' into bishue283/testkitExecuteWithClassParameter\n\n# Conflicts:\n#\tsrc/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebeca587b69038a7f5916d19f9ee7086ed8fae79", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ebeca587b69038a7f5916d19f9ee7086ed8fae79", "committedDate": "2020-07-31T17:16:22Z", "message": "Merge master into current"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwOTgyODcy", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#pullrequestreview-460982872", "createdAt": "2020-08-04T16:35:53Z", "commit": {"oid": "ebeca587b69038a7f5916d19f9ee7086ed8fae79"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32cdc4064e86dd85c5a777c6e3a7fa95dbc965b5", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/32cdc4064e86dd85c5a777c6e3a7fa95dbc965b5", "committedDate": "2020-08-05T10:36:22Z", "message": "Merge branch 'master' into bishue283/testkitExecuteWithClassParameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359", "committedDate": "2020-08-05T10:47:11Z", "message": "Improve `PioneerTestKitTests`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTQ3NjAy", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#pullrequestreview-461547602", "createdAt": "2020-08-05T10:48:12Z", "commit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0ODoxM1rOG8ESFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo1MjowM1rOG8EZpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNzkxMQ==", "bodyText": "So much better \ud83d\ude0d , thanks for the change!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465637911", "createdAt": "2020-08-05T10:48:13Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -215,7 +215,7 @@ void correctConfigurations() {\n \t\t@DisplayName(\"without input but StdIn parameter, an exception is thrown\")\n \t\tvoid withoutInputWithStdInParameter() {\n \t\t\tExecutionResults results = executeTestMethodWithParameterTypes(IllegalConfigurations.class,\n-\t\t\t\t\"noInputButStdIn\", \"org.junitpioneer.jupiter.StdIn\");\n+\t\t\t\t\"noInputButStdIn\", StdIn.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTA2OA==", "bodyText": "I removed the politics from the comment. My 2ct: IllegalArgumentException is the better exception, but nobody does it, so... \ud83e\udd37 ... use Optional, I guess. \ud83d\ude01", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465639068", "createdAt": "2020-08-05T10:50:18Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,25 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of the parameter(s)\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n+\t * \t\t\tThis method only checks parameters which are not part of the underlying\n+\t * \t\t\tJupiter TestKit. The Jupiter TestKit may throw other exceptions!\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,\n-\t\t\tString methodParameterTypes) {\n-\t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n+\t\t\tClass<?>... methodParameterTypes) {\n+\n+\t\t// throw IllegalArgumentException for a `null` array instead of NPE\n+\t\t// (hence no use of Objects::requireNonNull)`\n+\t\tif (methodParameterTypes == null) {\n+\t\t\tthrow new IllegalArgumentException(\"methodParameterTypes must not be null\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTQyOA==", "bodyText": "There are now two tests to clearly distinguish null as a single type from null as the type array. Is this the intended behavior?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465639428", "createdAt": "2020-08-05T10:51:01Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junitpioneer.testkit.assertion.PioneerAssert.assertThat;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+@DisplayName(\"Execute\")\n+class PioneerTestKitTests {\n+\n+\t@Test\n+\t@DisplayName(\"all tests of a class\")\n+\tvoid executeTestClass() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestClass(DummyClass.class);\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"a specific method\")\n+\tvoid executeTestMethod() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestMethod(DummyClass.class, \"nothing\");\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Nested\n+\t@DisplayName(\"a specific parametrized method\")\n+\tclass ExecuteTestMethodWithParametersTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is a single class\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterType() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", String.class);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is an array of classes\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterTypeAsArray() {\n+\t\t\tClass<?>[] classes = { String.class };\n+\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", classes);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterArrayIsNull_NullPointerException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>) null))\n+\t\t\t\t\t\t\t.isInstanceOf(NullPointerException.class);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterIsNull_IllegalArgumentException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>[]) null))\n+\t\t\t\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n+\t\t\t\t\t\t\t.hasMessage(\"methodParameterTypes must not be null\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTg0Ng==", "bodyText": "This is how to test assertions with pure AssertJ (i.e. no Jupiter assertions).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465639846", "createdAt": "2020-08-05T10:52:03Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junitpioneer.testkit.assertion.PioneerAssert.assertThat;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+@DisplayName(\"Execute\")\n+class PioneerTestKitTests {\n+\n+\t@Test\n+\t@DisplayName(\"all tests of a class\")\n+\tvoid executeTestClass() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestClass(DummyClass.class);\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"a specific method\")\n+\tvoid executeTestMethod() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestMethod(DummyClass.class, \"nothing\");\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Nested\n+\t@DisplayName(\"a specific parametrized method\")\n+\tclass ExecuteTestMethodWithParametersTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is a single class\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterType() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", String.class);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is an array of classes\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterTypeAsArray() {\n+\t\t\tClass<?>[] classes = { String.class };\n+\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", classes);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterArrayIsNull_NullPointerException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>) null))\n+\t\t\t\t\t\t\t.isInstanceOf(NullPointerException.class);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterIsNull_IllegalArgumentException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>[]) null))\n+\t\t\t\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n+\t\t\t\t\t\t\t.hasMessage(\"methodParameterTypes must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67658d03230060c5f222bdd13585c43986ef0afa", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/67658d03230060c5f222bdd13585c43986ef0afa", "committedDate": "2020-08-05T10:59:56Z", "message": "Quick fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3788, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}