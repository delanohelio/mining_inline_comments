{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDU4MDIx", "number": 351, "title": "Add note in documentation to use JUnit's BOM (#343 / #351)", "bodyText": "related to #343\nAdd note in documentation to use JUnit's BOM (#343 / #351)\n\nWith this PR a note to the documentation is added, that users should\nuse the JUnit Jupiters BOM instead of declaring each version on their\nown.\n\nrelated to #343\nPR: #351\n\n\nPR checklist\nThe following checklist shall help the PR's author, the reviewers and maintainers to ensure the quality of this project.\nIt is based on our contributors guidelines, especially the \"writing code\" section.\nIt shall help to check for completion of the listed points.\nIf a point does not apply to the given PR's changes, the corresponding entry can be simply marked as done.\nDocumentation (general)\n\n There is documentation (Javadoc and site documentation; added or updated)\n There is implementation information to describe why a non-obvious source code / solution got implemented\n Site documentation has its own .adoc file in the docs folder, e.g. docs/report-entries.adoc\n Only one sentence per line (especially in .adoc files)\n Javadoc uses formal style, while sites documentation may use informal style (see #265)\n\nDocumentation (new extension)\n\n The docs/docs-nav.yml navigation has an entry for the new extension\n The package-info.java contains information about the new extension\n\nCode\n\n Code adheres to code style, naming conventions etc.\n Successful tests cover all changes\n There are checks which validate correct / false usage / configuration of a functionality and there are tests to verify those checks (see #164)\n Tests use AssertJ or our own PioneerAssert (which are based on AssertJ)\n\nContributing\n\n A prepared commit message exists\n The list of contributions inside README.md mentions the new contribution (real name optional)\n\n\nI hereby agree to the terms of the JUnit Pioneer Contributor License Agreement.", "createdAt": "2020-10-04T16:10:15Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351", "merged": true, "mergeCommit": {"oid": "9fe8b173a93785d2367ffc55e2933fdd99cacadd"}, "closed": true, "closedAt": "2020-10-06T18:57:11Z", "author": {"login": "Bukama"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPRfoTAH2gAyNDk3NDU4MDIxOjEyM2ZjNzY4NDE1ZjEyNWI1OWEzNjRjNDI1NzZjZmVlNGZlNTUzODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP8_YdAH2gAyNDk3NDU4MDIxOjMxYWRhM2QxNWJkZTYyYjU1YTJhYTM5ZGJlNGY1MWFmODc4YmFmZTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "123fc768415f125b59a364c42576cfee4fe55380", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/123fc768415f125b59a364c42576cfee4fe55380", "committedDate": "2020-10-04T16:09:02Z", "message": "Add note in documentation to use JUnit's BOM\n\nWith this PR a note to the documentation is added, that users should use the JUnit Jupiters's BOM instead of declaring each version on their own.\n\nrelated to #343\nPR:"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNzc2MTc2", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351#pullrequestreview-501776176", "createdAt": "2020-10-05T07:19:16Z", "commit": {"oid": "123fc768415f125b59a364c42576cfee4fe55380"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoxOToxNlrOHcQLzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoyMzo0MFrOHcQTtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NzM0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Pioneer does not only use JUnit 5's API, but also other artefacts of the ecosystem, e.g. the `junit-platform-commons`.\n          \n          \n            \n            Pioneer does not only use JUnit 5's API, but also other artifacts from its ecosystem such as [`junit-platform-commons`](https://mvnrepository.com/artifact/org.junit.platform/junit-platform-commons).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351#discussion_r499387342", "createdAt": "2020-10-05T07:19:16Z", "author": {"login": "beatngu13"}, "path": "README.md", "diffHunk": "@@ -54,6 +54,10 @@ That means it can be used on all Java versions 8 and higher on class path and mo\n To not add to user's [JAR hell](https://blog.codefx.org/java/jar-hell/), JUnit Pioneer is not taking on any runtime dependencies besides JUnit 5.\n Pioneer always depends on the lowest JUnit 5 version that supports its feature set, but that should not keep you from using 5's latest and greatest.\n \n+Pioneer does not only use JUnit 5's API, but also other artefacts of the ecosystem, e.g. the `junit-platform-commons`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123fc768415f125b59a364c42576cfee4fe55380"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4ODYzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To avoid dependency troubles you should use the JUnit 5's BOM (the artefact is called [`junit-bom`](https://mvnrepository.com/artifact/org.junit/junit-bom)) in your project instead defining all of their dependency versions by hand.\n          \n          \n            \n            To avoid dependency issues, you should add the JUnit 5 BOM ([`junit-bom`](https://mvnrepository.com/artifact/org.junit/junit-bom)) to your project instead of defining all dependency versions manually.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351#discussion_r499388630", "createdAt": "2020-10-05T07:22:05Z", "author": {"login": "beatngu13"}, "path": "README.md", "diffHunk": "@@ -54,6 +54,10 @@ That means it can be used on all Java versions 8 and higher on class path and mo\n To not add to user's [JAR hell](https://blog.codefx.org/java/jar-hell/), JUnit Pioneer is not taking on any runtime dependencies besides JUnit 5.\n Pioneer always depends on the lowest JUnit 5 version that supports its feature set, but that should not keep you from using 5's latest and greatest.\n \n+Pioneer does not only use JUnit 5's API, but also other artefacts of the ecosystem, e.g. the `junit-platform-commons`.\n+To avoid dependency troubles you should use the JUnit 5's BOM (the artefact is called [`junit-bom`](https://mvnrepository.com/artifact/org.junit/junit-bom)) in your project instead defining all of their dependency versions by hand.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123fc768415f125b59a364c42576cfee4fe55380"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4OTM2Nw==", "bodyText": "I assume this extra empty line can be removed?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351#discussion_r499389367", "createdAt": "2020-10-05T07:23:40Z", "author": {"login": "beatngu13"}, "path": "README.md", "diffHunk": "@@ -54,6 +54,10 @@ That means it can be used on all Java versions 8 and higher on class path and mo\n To not add to user's [JAR hell](https://blog.codefx.org/java/jar-hell/), JUnit Pioneer is not taking on any runtime dependencies besides JUnit 5.\n Pioneer always depends on the lowest JUnit 5 version that supports its feature set, but that should not keep you from using 5's latest and greatest.\n \n+Pioneer does not only use JUnit 5's API, but also other artefacts of the ecosystem, e.g. the `junit-platform-commons`.\n+To avoid dependency troubles you should use the JUnit 5's BOM (the artefact is called [`junit-bom`](https://mvnrepository.com/artifact/org.junit/junit-bom)) in your project instead defining all of their dependency versions by hand.\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123fc768415f125b59a364c42576cfee4fe55380"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ece97263e33e2728555123657e92bfaccf67837", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/9ece97263e33e2728555123657e92bfaccf67837", "committedDate": "2020-10-05T16:09:17Z", "message": "Fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjQ3NDcw", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351#pullrequestreview-502247470", "createdAt": "2020-10-05T16:56:49Z", "commit": {"oid": "9ece97263e33e2728555123657e92bfaccf67837"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzU3NTg4", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351#pullrequestreview-502357588", "createdAt": "2020-10-05T19:31:58Z", "commit": {"oid": "9ece97263e33e2728555123657e92bfaccf67837"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjYyNjIy", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351#pullrequestreview-503262622", "createdAt": "2020-10-06T18:48:52Z", "commit": {"oid": "9ece97263e33e2728555123657e92bfaccf67837"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0ODo1MlrOHdVdFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0OToxOFrOHdVeHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMjI2MQ==", "bodyText": "Let's move this one paragraph up, so the preceding and the following paragraphs can stay together (they love each other so much).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351#discussion_r500522261", "createdAt": "2020-10-06T18:48:52Z", "author": {"login": "nipafx"}, "path": "README.md", "diffHunk": "@@ -54,6 +54,9 @@ That means it can be used on all Java versions 8 and higher on class path and mo\n To not add to user's [JAR hell](https://blog.codefx.org/java/jar-hell/), JUnit Pioneer is not taking on any runtime dependencies besides JUnit 5.\n Pioneer always depends on the lowest JUnit 5 version that supports its feature set, but that should not keep you from using 5's latest and greatest.\n \n+Pioneer does not only use JUnit 5's API, but also other artifacts from its ecosystem such as [`junit-platform-commons`](https://mvnrepository.com/artifact/org.junit.platform/junit-platform-commons).\n+To avoid dependency issues, you should add the JUnit 5 BOM ([`junit-bom`](https://mvnrepository.com/artifact/org.junit/junit-bom)) to your project instead of defining all dependency versions manually.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ece97263e33e2728555123657e92bfaccf67837"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMjUyNQ==", "bodyText": "Let's link \"dependency issues\" to the actual issue, so users get an idea of what may go wrong.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/351#discussion_r500522525", "createdAt": "2020-10-06T18:49:18Z", "author": {"login": "nipafx"}, "path": "README.md", "diffHunk": "@@ -54,6 +54,9 @@ That means it can be used on all Java versions 8 and higher on class path and mo\n To not add to user's [JAR hell](https://blog.codefx.org/java/jar-hell/), JUnit Pioneer is not taking on any runtime dependencies besides JUnit 5.\n Pioneer always depends on the lowest JUnit 5 version that supports its feature set, but that should not keep you from using 5's latest and greatest.\n \n+Pioneer does not only use JUnit 5's API, but also other artifacts from its ecosystem such as [`junit-platform-commons`](https://mvnrepository.com/artifact/org.junit.platform/junit-platform-commons).\n+To avoid dependency issues, you should add the JUnit 5 BOM ([`junit-bom`](https://mvnrepository.com/artifact/org.junit/junit-bom)) to your project instead of defining all dependency versions manually.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ece97263e33e2728555123657e92bfaccf67837"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31ada3d15bde62b55a2aa39dbe4f51af878bafe3", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/31ada3d15bde62b55a2aa39dbe4f51af878bafe3", "committedDate": "2020-10-06T18:49:38Z", "message": "Include feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3669, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}