{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjExNDYx", "number": 245, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzoyNzo0M1rOD3TZ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTowNTowMFrOD4NNtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzE2MTgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerAssertContainer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzoyNzo0M1rOGNfEAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowOTo1OFrOGN6C3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MzYwMA==", "bodyText": "i am not sure if the and is really needed, and it is not really common in assertJ. i think hasException should be fine, or maybe withException.\nnot 100% sure but i think we should align this with https://joel-costigliola.github.io/assertj/assertj-core-features-highlight.html#exception-assertion . so it is really concise and easy to understand, when you know assertj already", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r416793600", "createdAt": "2020-04-28T17:27:43Z", "author": {"login": "aepfli"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerAssertContainer.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.assertj.core.api.AbstractAssert;\n+import org.assertj.core.api.Assertions;\n+import org.junit.platform.engine.TestExecutionResult;\n+\n+public class PioneerAssertContainer {\n+\n+\tpublic static class PioneerAssert extends AbstractAssert<PioneerAssert, ExecutionResults>\n+\t\t\timplements SingleReportEntryAssert, FailureAssert, ExceptionAssert {\n+\n+\t\tpublic PioneerAssert(ExecutionResults actual) {\n+\t\t\tsuper(actual, PioneerAssert.class);\n+\t\t}\n+\n+\t\tpublic static PioneerAssert assertThat(ExecutionResults actual) {\n+\t\t\treturn new PioneerAssert(actual);\n+\t\t}\n+\n+\t\tpublic SingleReportEntryAssert hasSingleReportEntry() {\n+\t\t\tisNotNull();\n+\n+\t\t\tList<Map<String, String>> reportEntries = actual.reportEntries();\n+\t\t\tAssertions.assertThat(reportEntries).hasSize(1);\n+\t\t\tMap<String, String> reportEntry = reportEntries.get(0);\n+\t\t\tAssertions.assertThat(reportEntry).hasSize(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic FailureAssert hasSingleFailedTest() {\n+\t\t\tisNotNull();\n+\t\t\tAssertions.assertThat(actual.numberOfFailedTests()).isEqualTo(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic FailureAssert hasSingleFailedContainer() {\n+\t\t\tisNotNull();\n+\t\t\tAssertions.assertThat(actual.numberOfFailedContainers()).isEqualTo(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void withKeyAndValue(String key, String value) {\n+\t\t\tAssertions\n+\t\t\t\t\t.assertThat(actual.reportEntries().get(0).entrySet().iterator().next())\n+\t\t\t\t\t.isEqualTo(new AbstractMap.SimpleEntry<>(key, value));\n+\t\t}\n+\n+\t\t/**\n+\t\t * This method should only be called from methods belonging to {@code FailureAssert}.\n+\t\t */\n+\t\tprivate Optional<Throwable> firstFailureThrowable() {\n+\t\t\treturn actual\n+\t\t\t\t\t.allEvents()\n+\t\t\t\t\t.failed()\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.findFirst()\n+\t\t\t\t\t.flatMap(first -> first.getPayload(TestExecutionResult.class))\n+\t\t\t\t\t.flatMap(TestExecutionResult::getThrowable);\n+\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ExceptionAssert andHasException(Class<? extends Throwable> exceptionType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3293e22746b1c2a8bd9b192d8b306463070f80"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1NDIyMw==", "bodyText": "My reasoning behind andHasException is that you can only get there if you already called a method that returns with the FailureAssert interface.\nSo it always looks like this:\nassertThat(results).hasXY(...).andHasException();\n\nIn a purely grammatical context the and makes sense(?).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r417154223", "createdAt": "2020-04-29T08:38:18Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerAssertContainer.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.assertj.core.api.AbstractAssert;\n+import org.assertj.core.api.Assertions;\n+import org.junit.platform.engine.TestExecutionResult;\n+\n+public class PioneerAssertContainer {\n+\n+\tpublic static class PioneerAssert extends AbstractAssert<PioneerAssert, ExecutionResults>\n+\t\t\timplements SingleReportEntryAssert, FailureAssert, ExceptionAssert {\n+\n+\t\tpublic PioneerAssert(ExecutionResults actual) {\n+\t\t\tsuper(actual, PioneerAssert.class);\n+\t\t}\n+\n+\t\tpublic static PioneerAssert assertThat(ExecutionResults actual) {\n+\t\t\treturn new PioneerAssert(actual);\n+\t\t}\n+\n+\t\tpublic SingleReportEntryAssert hasSingleReportEntry() {\n+\t\t\tisNotNull();\n+\n+\t\t\tList<Map<String, String>> reportEntries = actual.reportEntries();\n+\t\t\tAssertions.assertThat(reportEntries).hasSize(1);\n+\t\t\tMap<String, String> reportEntry = reportEntries.get(0);\n+\t\t\tAssertions.assertThat(reportEntry).hasSize(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic FailureAssert hasSingleFailedTest() {\n+\t\t\tisNotNull();\n+\t\t\tAssertions.assertThat(actual.numberOfFailedTests()).isEqualTo(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic FailureAssert hasSingleFailedContainer() {\n+\t\t\tisNotNull();\n+\t\t\tAssertions.assertThat(actual.numberOfFailedContainers()).isEqualTo(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void withKeyAndValue(String key, String value) {\n+\t\t\tAssertions\n+\t\t\t\t\t.assertThat(actual.reportEntries().get(0).entrySet().iterator().next())\n+\t\t\t\t\t.isEqualTo(new AbstractMap.SimpleEntry<>(key, value));\n+\t\t}\n+\n+\t\t/**\n+\t\t * This method should only be called from methods belonging to {@code FailureAssert}.\n+\t\t */\n+\t\tprivate Optional<Throwable> firstFailureThrowable() {\n+\t\t\treturn actual\n+\t\t\t\t\t.allEvents()\n+\t\t\t\t\t.failed()\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.findFirst()\n+\t\t\t\t\t.flatMap(first -> first.getPayload(TestExecutionResult.class))\n+\t\t\t\t\t.flatMap(TestExecutionResult::getThrowable);\n+\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ExceptionAssert andHasException(Class<? extends Throwable> exceptionType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MzYwMA=="}, "originalCommit": {"oid": "1f3293e22746b1c2a8bd9b192d8b306463070f80"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNTY3Ng==", "bodyText": "To put an example to the discussion:\nassertThat(results).hasSingleFailedTest().andHasException().withMessageContaining(\"ne...\")\nMy first thought about naming was: We always compare results which is plural, so I asked myself if the methods should align with plural too. But I don't think so, because the default AssertJ lib claims only a single result, independent if its a single value or a list or whatever. So we should go for singular method names too.\nWhat I really like at @Michael1993 names is that he always has something in mind when choosing the names. Was the same at the publish condition of the @ReportEntry extension. And I can totally understand his thoughts here to. On the other hand I can see @aepfli point to align with the default AssertJ which uses withException\" and I could imagine that this helps others people to use the API. While I see the use of andfrom grammatical context, I don't think we need it as there is always the.` of the fluent API which says exactly this.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r417235676", "createdAt": "2020-04-29T11:09:58Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerAssertContainer.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.assertj.core.api.AbstractAssert;\n+import org.assertj.core.api.Assertions;\n+import org.junit.platform.engine.TestExecutionResult;\n+\n+public class PioneerAssertContainer {\n+\n+\tpublic static class PioneerAssert extends AbstractAssert<PioneerAssert, ExecutionResults>\n+\t\t\timplements SingleReportEntryAssert, FailureAssert, ExceptionAssert {\n+\n+\t\tpublic PioneerAssert(ExecutionResults actual) {\n+\t\t\tsuper(actual, PioneerAssert.class);\n+\t\t}\n+\n+\t\tpublic static PioneerAssert assertThat(ExecutionResults actual) {\n+\t\t\treturn new PioneerAssert(actual);\n+\t\t}\n+\n+\t\tpublic SingleReportEntryAssert hasSingleReportEntry() {\n+\t\t\tisNotNull();\n+\n+\t\t\tList<Map<String, String>> reportEntries = actual.reportEntries();\n+\t\t\tAssertions.assertThat(reportEntries).hasSize(1);\n+\t\t\tMap<String, String> reportEntry = reportEntries.get(0);\n+\t\t\tAssertions.assertThat(reportEntry).hasSize(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic FailureAssert hasSingleFailedTest() {\n+\t\t\tisNotNull();\n+\t\t\tAssertions.assertThat(actual.numberOfFailedTests()).isEqualTo(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic FailureAssert hasSingleFailedContainer() {\n+\t\t\tisNotNull();\n+\t\t\tAssertions.assertThat(actual.numberOfFailedContainers()).isEqualTo(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void withKeyAndValue(String key, String value) {\n+\t\t\tAssertions\n+\t\t\t\t\t.assertThat(actual.reportEntries().get(0).entrySet().iterator().next())\n+\t\t\t\t\t.isEqualTo(new AbstractMap.SimpleEntry<>(key, value));\n+\t\t}\n+\n+\t\t/**\n+\t\t * This method should only be called from methods belonging to {@code FailureAssert}.\n+\t\t */\n+\t\tprivate Optional<Throwable> firstFailureThrowable() {\n+\t\t\treturn actual\n+\t\t\t\t\t.allEvents()\n+\t\t\t\t\t.failed()\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.findFirst()\n+\t\t\t\t\t.flatMap(first -> first.getPayload(TestExecutionResult.class))\n+\t\t\t\t\t.flatMap(TestExecutionResult::getThrowable);\n+\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ExceptionAssert andHasException(Class<? extends Throwable> exceptionType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MzYwMA=="}, "originalCommit": {"oid": "1f3293e22746b1c2a8bd9b192d8b306463070f80"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzUyODg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerAssertContainer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowMTo0MlrOGNin-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyMzozNlrOGN6cqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MTk2MA==", "bodyText": "i might suggest to have one basic method like hasNumberOfFailedTests(int number) and than just use that within this method. as i think this assert might be usable for other cases in the future too.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r416851960", "createdAt": "2020-04-28T19:01:42Z", "author": {"login": "aepfli"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerAssertContainer.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.assertj.core.api.AbstractAssert;\n+import org.assertj.core.api.Assertions;\n+import org.junit.platform.engine.TestExecutionResult;\n+\n+public class PioneerAssertContainer {\n+\n+\tpublic static class PioneerAssert extends AbstractAssert<PioneerAssert, ExecutionResults>\n+\t\t\timplements SingleReportEntryAssert, FailureAssert, ExceptionAssert {\n+\n+\t\tpublic PioneerAssert(ExecutionResults actual) {\n+\t\t\tsuper(actual, PioneerAssert.class);\n+\t\t}\n+\n+\t\tpublic static PioneerAssert assertThat(ExecutionResults actual) {\n+\t\t\treturn new PioneerAssert(actual);\n+\t\t}\n+\n+\t\tpublic SingleReportEntryAssert hasSingleReportEntry() {\n+\t\t\tisNotNull();\n+\n+\t\t\tList<Map<String, String>> reportEntries = actual.reportEntries();\n+\t\t\tAssertions.assertThat(reportEntries).hasSize(1);\n+\t\t\tMap<String, String> reportEntry = reportEntries.get(0);\n+\t\t\tAssertions.assertThat(reportEntry).hasSize(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic FailureAssert hasSingleFailedTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3293e22746b1c2a8bd9b192d8b306463070f80"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMDQ5NQ==", "bodyText": "I would like to keep the single methods and offer additional methods where you can pass the number, because we have plenty of tests where we expect exactly one. So why force the writer to pass magic numbers and make it less readable in those cases? Don't get me wrong. We need the basic methods for dynamic parameters, but this PR shows that the single ones makes sense too.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r417230495", "createdAt": "2020-04-29T10:59:13Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerAssertContainer.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.assertj.core.api.AbstractAssert;\n+import org.assertj.core.api.Assertions;\n+import org.junit.platform.engine.TestExecutionResult;\n+\n+public class PioneerAssertContainer {\n+\n+\tpublic static class PioneerAssert extends AbstractAssert<PioneerAssert, ExecutionResults>\n+\t\t\timplements SingleReportEntryAssert, FailureAssert, ExceptionAssert {\n+\n+\t\tpublic PioneerAssert(ExecutionResults actual) {\n+\t\t\tsuper(actual, PioneerAssert.class);\n+\t\t}\n+\n+\t\tpublic static PioneerAssert assertThat(ExecutionResults actual) {\n+\t\t\treturn new PioneerAssert(actual);\n+\t\t}\n+\n+\t\tpublic SingleReportEntryAssert hasSingleReportEntry() {\n+\t\t\tisNotNull();\n+\n+\t\t\tList<Map<String, String>> reportEntries = actual.reportEntries();\n+\t\t\tAssertions.assertThat(reportEntries).hasSize(1);\n+\t\t\tMap<String, String> reportEntry = reportEntries.get(0);\n+\t\t\tAssertions.assertThat(reportEntry).hasSize(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic FailureAssert hasSingleFailedTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MTk2MA=="}, "originalCommit": {"oid": "1f3293e22746b1c2a8bd9b192d8b306463070f80"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0MjI4MA==", "bodyText": "i never said to skip that method, i said we should extract its functionality into an generic one, which we use within this method", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r417242280", "createdAt": "2020-04-29T11:23:36Z", "author": {"login": "aepfli"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerAssertContainer.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.assertj.core.api.AbstractAssert;\n+import org.assertj.core.api.Assertions;\n+import org.junit.platform.engine.TestExecutionResult;\n+\n+public class PioneerAssertContainer {\n+\n+\tpublic static class PioneerAssert extends AbstractAssert<PioneerAssert, ExecutionResults>\n+\t\t\timplements SingleReportEntryAssert, FailureAssert, ExceptionAssert {\n+\n+\t\tpublic PioneerAssert(ExecutionResults actual) {\n+\t\t\tsuper(actual, PioneerAssert.class);\n+\t\t}\n+\n+\t\tpublic static PioneerAssert assertThat(ExecutionResults actual) {\n+\t\t\treturn new PioneerAssert(actual);\n+\t\t}\n+\n+\t\tpublic SingleReportEntryAssert hasSingleReportEntry() {\n+\t\t\tisNotNull();\n+\n+\t\t\tList<Map<String, String>> reportEntries = actual.reportEntries();\n+\t\t\tAssertions.assertThat(reportEntries).hasSize(1);\n+\t\t\tMap<String, String> reportEntry = reportEntries.get(0);\n+\t\t\tAssertions.assertThat(reportEntry).hasSize(1);\n+\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic FailureAssert hasSingleFailedTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MTk2MA=="}, "originalCommit": {"oid": "1f3293e22746b1c2a8bd9b192d8b306463070f80"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjYzMzQ4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/assertion/ExceptionAssert.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTowNTowMFrOGO6Tdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODowMTozNlrOGPRGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4ODUwMg==", "bodyText": "could we actually use https://github.com/joel-costigliola/assertj-core/blob/master/src/main/java/org/assertj/core/api/AbstractThrowableAssert.java instead of that assert - it does have already a lot of functionality and we would stick to the default", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r418288502", "createdAt": "2020-04-30T21:05:00Z", "author": {"login": "aepfli"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/ExceptionAssert.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit.assertion;\n+\n+/**\n+ * Used to assert exceptions thrown by failed tests/containers.\n+ */\n+public interface ExceptionAssert {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd7f2f17282cb88660c97110d7be42e28686478"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDUzMQ==", "bodyText": "We could use it but it would look kind of broken:\nassertThat(results)\n    .hasSingleTest()\n    .thatFailed()\n    .withException()\n    .hasMessageContainingAll(/* ... */);\n\nThen again, this interface does not really do anything besides adding the word that in front of the methods in AbstractThrowableAssert", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r418300531", "createdAt": "2020-04-30T21:30:31Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/ExceptionAssert.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit.assertion;\n+\n+/**\n+ * Used to assert exceptions thrown by failed tests/containers.\n+ */\n+public interface ExceptionAssert {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4ODUwMg=="}, "originalCommit": {"oid": "0dd7f2f17282cb88660c97110d7be42e28686478"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzI1Mw==", "bodyText": "but it would also provide additional methods, like message containing with varargs, etc.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r418303253", "createdAt": "2020-04-30T21:36:29Z", "author": {"login": "aepfli"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/ExceptionAssert.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit.assertion;\n+\n+/**\n+ * Used to assert exceptions thrown by failed tests/containers.\n+ */\n+public interface ExceptionAssert {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4ODUwMg=="}, "originalCommit": {"oid": "0dd7f2f17282cb88660c97110d7be42e28686478"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2MTkwNg==", "bodyText": "No need to reinvent the wheel, you are right.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/245#discussion_r418661906", "createdAt": "2020-05-01T18:01:36Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/ExceptionAssert.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit.assertion;\n+\n+/**\n+ * Used to assert exceptions thrown by failed tests/containers.\n+ */\n+public interface ExceptionAssert {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4ODUwMg=="}, "originalCommit": {"oid": "0dd7f2f17282cb88660c97110d7be42e28686478"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4259, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}