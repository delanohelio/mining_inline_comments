{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MTk3NDY3", "number": 175, "title": "Add extension to disable per test name to be able to disable parameterized tests", "bodyText": "Additional extension to be able to skip tests based on test name\nThis is particularly helpful when dealing with Parameterized or Dynamically Registered tests\n#163\n\nI hereby agree to the terms of the JUnit Pioneer Contributor License Agreement.", "createdAt": "2020-02-19T14:20:58Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175", "merged": true, "mergeCommit": {"oid": "6c4056d2afba59537f97cef622dfa30b3276be71"}, "closed": true, "closedAt": "2020-06-20T15:27:02Z", "author": {"login": "nishantvas"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF3SFTAH2gAyMzc3MTk3NDY3OjU1ZDQzYzFjYzllZWY4NDU4NThiMTZjY2Y5Y2NhMTE5NjE3ZDViMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctJHqDgFqTQzNDQzNDUzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "55d43c1cc9eef845858b16ccf9cca119617d5b35", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/55d43c1cc9eef845858b16ccf9cca119617d5b35", "committedDate": "2020-02-19T14:20:14Z", "message": "Add extension to disable per test name to be able to disable parameterized tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f23975a6ffe021021923ab14cb70805b8432ce0b", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f23975a6ffe021021923ab14cb70805b8432ce0b", "committedDate": "2020-02-19T14:32:23Z", "message": "Misplaced file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0aa200b760a5ee55807b0347eba0273cc540512", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c0aa200b760a5ee55807b0347eba0273cc540512", "committedDate": "2020-03-26T20:44:40Z", "message": "Add a test that is not disabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDA1NjUx", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#pullrequestreview-382405651", "createdAt": "2020-03-26T20:48:45Z", "commit": {"oid": "f23975a6ffe021021923ab14cb70805b8432ce0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0ODo0NVrOF8Z1rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0ODo0NVrOF8Z1rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjIyMw==", "bodyText": "We could disable on class level, too, right? Would that make sense?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r398882223", "createdAt": "2020-03-26T20:48:45Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+public class DisableIfNameExtension implements ExecutionCondition {\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\n+\t\tif (!disable.isPresent()) {\n+\t\t\treturn enabled(\"No instructions to disable\");\n+\t\t} else if (!context.getTestMethod().isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f23975a6ffe021021923ab14cb70805b8432ce0b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d311db86fa92a6e16bb990526b0e63e38987365e", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d311db86fa92a6e16bb990526b0e63e38987365e", "committedDate": "2020-03-27T10:44:55Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into parameterized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b84b49b3a6ba3eb264983facb572d301ba8bee05", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b84b49b3a6ba3eb264983facb572d301ba8bee05", "committedDate": "2020-03-30T18:03:00Z", "message": "Add documentation and Expand to test name as array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "committedDate": "2020-03-30T18:10:31Z", "message": "Check Style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca219272cbfbfcfe877cddc420f559e4f5c99df7", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ca219272cbfbfcfe877cddc420f559e4f5c99df7", "committedDate": "2020-04-01T09:41:20Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into parameterized"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODM3NzU0", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#pullrequestreview-385837754", "createdAt": "2020-04-01T18:21:39Z", "commit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMTozOVrOF_NCDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo0MDoyMVrOF_NtrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxODEyNA==", "bodyText": "(multiple) Parameterized ==> parameterized", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401818124", "createdAt": "2020-04-01T18:21:39Z", "author": {"login": "Bukama"}, "path": "docs/disable-if-display-name.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+:page-title: @DisableIfDisplayName\n+:page-description: JUnit Jupiter extensions to selectively disable Parameterized tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxOTA0OA==", "bodyText": "This reads wired. What about this:\n\nThe @DisableIfDisplayName annotation can be used to selectivevly disable parameterized....", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401819048", "createdAt": "2020-04-01T18:23:13Z", "author": {"login": "Bukama"}, "path": "docs/disable-if-display-name.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+:page-title: @DisableIfDisplayName\n+:page-description: JUnit Jupiter extensions to selectively disable Parameterized tests\n+\n+The `@DisableIfDisplayName` annotation Junit Jupiter extension that can be selectively used to disable Parameterized tests which are dynamically registered on runtime basis their display name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxOTQ3MQ==", "bodyText": "Missing . at the end of the sentence.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401819471", "createdAt": "2020-04-01T18:23:54Z", "author": {"login": "Bukama"}, "path": "docs/disable-if-display-name.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+:page-title: @DisableIfDisplayName\n+:page-description: JUnit Jupiter extensions to selectively disable Parameterized tests\n+\n+The `@DisableIfDisplayName` annotation Junit Jupiter extension that can be selectively used to disable Parameterized tests which are dynamically registered on runtime basis their display name.\n+The annotations is only supported on test method level for Parameterized tests.\n+Unlike the `@Disabled` API provided in Junit which disables the test on first encounter of the annotation\n+`@DisableIfDisplayName` is validated before each `@ParameterizedTest` so that each test (name) can be individually evaluated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMDIyMg==", "bodyText": "Please move up so it's sorted in alphabetically order", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401820222", "createdAt": "2020-04-01T18:25:12Z", "author": {"login": "Bukama"}, "path": "docs/docs-nav.yml", "diffHunk": "@@ -16,3 +16,5 @@\n         url: /docs/temp-directory/\n       - title: \"Vintage @Test\"\n         url: /docs/vintage-test/\n+      - title: \"@DisableIfDisplayName\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMDcwNA==", "bodyText": "basis their\n\nDo you mean based on their ?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401820704", "createdAt": "2020-04-01T18:25:58Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMTc4NA==", "bodyText": "If it is required to disable selective tests...", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401821784", "createdAt": "2020-04-01T18:27:49Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjAyMA==", "bodyText": "and the test will be", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401822020", "createdAt": "2020-04-01T18:28:12Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjQ2Nw==", "bodyText": "evaluates true against the display name.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401822467", "createdAt": "2020-04-01T18:28:57Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if\n+ * any of them evaluate to be true against the display name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNjYzOA==", "bodyText": "Displaynames of the tests cases to be disabled. The whole test case name can be stored as well as sub strings of it. The values will be evaluated [...] by default.\nIf {code regex} is provided, the string will be evaluated as ... display name.\n\n@return Test case display name", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401826638", "createdAt": "2020-04-01T18:35:54Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if\n+ * any of them evaluate to be true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNzgxMQ==", "bodyText": "Suggest to rename it to isRegEx. The name regex suggests that this field holds the regular expression itselfs, which will be confusing as a boolean can't hold such.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401827811", "createdAt": "2020-04-01T18:37:53Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if\n+ * any of them evaluate to be true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**\n+\t * Display names for the tests, they can be the whole test case names or sub strings per test\n+\t * This will be evaluated as {@link String#contains(CharSequence)} by default\n+\t * If, {@code regex} is provided, then the string will be evaluated as\n+\t * {@link String#matches(String)} against the display name\n+\t * @return Test Case display name\n+\t */\n+\tString[] value();\n+\n+\t/**\n+\t * @return if the {@code value} is to be evaluated as regular expression or sub-string\n+\t */\n+\tboolean regex() default false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyOTI5Mw==", "bodyText": "Please update to the new methods, provided by #187 after it is merged", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401829293", "createdAt": "2020-04-01T18:40:21Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -24,25 +25,31 @@\n \n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\t\tOptional<Method> testMethod = context.getTestMethod();\n \n-\t\tif (!disable.isPresent()) {\n-\t\t\treturn enabled(\"No instructions to disable\");\n-\t\t} else if (!context.getTestMethod().isPresent()) {\n-\t\t\treturn enabled(\"Only disable at method level\");\n+\t\tif (!testMethod.isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level so the parameterized tests could be registered\");\n \t\t}\n-\t\tDisableIfName details = disable.get();\n-\t\tboolean toDisable;\n-\t\tif (details.regex()) {\n-\t\t\ttoDisable = context.getDisplayName().matches(details.value());\n-\t\t} else {\n-\t\t\ttoDisable = context.getDisplayName().contains(details.value());\n+\n+\t\tOptional<DisableIfDisplayName> disableIf = findAnnotation(testMethod, DisableIfDisplayName.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e97fd007ebbf73c74b1bd1c1c6d60c9f645c265", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2e97fd007ebbf73c74b1bd1c1c6d60c9f645c265", "committedDate": "2020-04-27T11:13:11Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into parameterized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "committedDate": "2020-04-27T11:28:58Z", "message": "Update to new Annotation utils and grammar check docks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b01381ea4325730b1b5b3b1a101d0071a31f57c6", "committedDate": "2020-04-27T11:34:56Z", "message": "Move tests to new Runner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwOTAzNTIw", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#pullrequestreview-400903520", "createdAt": "2020-04-27T12:29:56Z", "commit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoyOTo1NlrOGMgnEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozNjo1N1rOGMg5AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MDM4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n          \n          \n            \n            \t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415770385", "createdAt": "2020-04-27T12:29:56Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**\n+\t *\n+\t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n+\t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n+\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MTg2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n          \n          \n            \n             * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415771863", "createdAt": "2020-04-27T12:32:05Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MjIzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n          \n          \n            \n             * The extension is an {@link ExecutionCondition}, which validates dynamically registered tests.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415772230", "createdAt": "2020-04-27T12:32:43Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MjYzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n          \n          \n            \n             * the whole test but not the Parameterized tests selectively\n          \n          \n            \n             * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n          \n          \n            \n             * the whole test, but not the Parameterized tests selectively.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415772638", "createdAt": "2020-04-27T12:33:18Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MzIyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * registered Parameterized tests, then we can utilize the following\n          \n          \n            \n             * registered Parameterized tests, then we can utilize the following.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415773225", "createdAt": "2020-04-27T12:34:12Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3Mzk0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Each repeatable annotation will be processed for each test and test will be skipped if\n          \n          \n            \n             * any of them evaluates true against the display name\n          \n          \n            \n             * Each repeatable annotation will be processed for each test and the test will be skipped if\n          \n          \n            \n             * any of them evaluates true against the display name.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415773949", "createdAt": "2020-04-27T12:35:24Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NDk3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n          \n          \n            \n            \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n          \n          \n            \n            \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as  a sub string. \n          \n          \n            \n            \t * The values will be evaluated with {@link String#contains(CharSequence)} by default.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415774976", "createdAt": "2020-04-27T12:36:57Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**\n+\t *\n+\t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n+\t * The values will be evaluated with {@link String#contains(CharSequence)} by default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73bcfcf50b6a643db5624005e7d89f5240a05a45", "author": {"user": {"login": "nishantvas", "name": "Nishant Vashisth"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/73bcfcf50b6a643db5624005e7d89f5240a05a45", "committedDate": "2020-04-27T14:49:13Z", "message": "Update src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\nCo-Authored-By: Matthias B\u00fcnger <Bukama@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02bde4ada73af1c603c1c7213b6399e642f7ef18", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/02bde4ada73af1c603c1c7213b6399e642f7ef18", "committedDate": "2020-04-27T14:51:47Z", "message": "Update typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f851041c12e48cad2c650ac9d9889039cf9a6c15", "author": {"user": null}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f851041c12e48cad2c650ac9d9889039cf9a6c15", "committedDate": "2020-04-27T14:52:11Z", "message": "Merge branch 'parameterized' of https://github.com/nishantvas/junit-pioneer into parameterized\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMDc1NzU3", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#pullrequestreview-401075757", "createdAt": "2020-04-27T15:38:13Z", "commit": {"oid": "f851041c12e48cad2c650ac9d9889039cf9a6c15"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6498193aecdc93109b1233e30c02e6d2583ff1f", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a6498193aecdc93109b1233e30c02e6d2583ff1f", "committedDate": "2020-05-19T20:54:34Z", "message": "Improve documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a047ee12be06b9c51a4cf4fff3da182dc40fe94b", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a047ee12be06b9c51a4cf4fff3da182dc40fe94b", "committedDate": "2020-05-19T20:56:51Z", "message": "Refactor and add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aca01b61f8b668969c4151936014389963309633", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/aca01b61f8b668969c4151936014389963309633", "committedDate": "2020-05-19T20:58:41Z", "message": "Refactor extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55e1de57e860c0a979cb6e657b1669287027b880", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/55e1de57e860c0a979cb6e657b1669287027b880", "committedDate": "2020-05-19T20:59:04Z", "message": "Don't accidentally disable entire test method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89e35e9f76097950a0e5097abbb99f075697bcdf", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/89e35e9f76097950a0e5097abbb99f075697bcdf", "committedDate": "2020-06-20T13:43:21Z", "message": "Move new classes into params package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5919153eccb706593f38b682d5f74460181e38d", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a5919153eccb706593f38b682d5f74460181e38d", "committedDate": "2020-06-20T14:22:43Z", "message": "Add attributes `contains` and `matches`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c8486ada8bb457a6d193ef6778fa8b2a11b1b77", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3c8486ada8bb457a6d193ef6778fa8b2a11b1b77", "committedDate": "2020-06-20T14:35:40Z", "message": "Apply Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "659942c89cea725c88719f70c8473450426d2741", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/659942c89cea725c88719f70c8473450426d2741", "committedDate": "2020-06-20T14:35:52Z", "message": "Update documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a602965a7c988c4d0546a5ae87ca73471fbcfbe9", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a602965a7c988c4d0546a5ae87ca73471fbcfbe9", "committedDate": "2020-06-20T14:42:14Z", "message": "Fix failing test and move test code around"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb605bab63afe71ffdaeb13b945083f850d76c63", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/cb605bab63afe71ffdaeb13b945083f850d76c63", "committedDate": "2020-06-20T14:51:50Z", "message": "Apply Spotless [AGAIN!]"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDM0NTMx", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#pullrequestreview-434434531", "createdAt": "2020-06-20T15:10:11Z", "commit": {"oid": "cb605bab63afe71ffdaeb13b945083f850d76c63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3703, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}