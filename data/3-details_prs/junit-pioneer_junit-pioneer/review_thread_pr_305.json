{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNDIzMDcz", "number": 305, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxOTowOTozNVrOEUT_VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDozNTo1N1rOEyiyRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzM0NDg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxOTowOTozNVrOG6fwUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTo0NToyN1rOG7ZL0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MDg2NQ==", "bodyText": "I don't like this new assertions. In my opinion it's much more complicated and less readable. The user is now forced to write an additional lamba expression and another assertion.\nI think it would be more readable with something like .hasNumberOfReportEntries(3).andTheyAre(\"suddenly..\", \"As...\", \"rapping...\")ore something like this.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r463990865", "createdAt": "2020-08-01T19:09:35Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java", "diffHunk": "@@ -78,8 +79,9 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \n \t\tassertThat(results)\n \t\t\t\t.hasNumberOfReportEntries(3)\n-\t\t\t\t.withValues(\"suddenly there came a tapping\", \"As if some one gently rapping\",\n-\t\t\t\t\t\"rapping at my chamber door\");\n+\t\t\t\t.andThen(entry -> assertThat(entry.getValue())\n+\t\t\t\t\t\t.isIn(\"suddenly there came a tapping\", \"As if some one gently rapping\",\n+\t\t\t\t\t\t\t\"rapping at my chamber door\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd617d4e4384f51c28bcee73cf70ceb5407112ad"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMTg4MA==", "bodyText": "This is an open-ended method that lets you chain your own assertions at the end of the 'common' ones.\nFor example: Stopwatch extension publishes entries with \"Test took X ms to run\". You can't test for that, because you can only test for exact values (right now). But with the andThen method, you can write:\nassertThat(results)\n    .hasSingleReportEntry()\n    .andThen(entry ->\n        assertThat(entry.getValue()).matches(\"Test took [0-9]+ ms to run\")\n    );", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r464001880", "createdAt": "2020-08-01T21:26:59Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java", "diffHunk": "@@ -78,8 +79,9 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \n \t\tassertThat(results)\n \t\t\t\t.hasNumberOfReportEntries(3)\n-\t\t\t\t.withValues(\"suddenly there came a tapping\", \"As if some one gently rapping\",\n-\t\t\t\t\t\"rapping at my chamber door\");\n+\t\t\t\t.andThen(entry -> assertThat(entry.getValue())\n+\t\t\t\t\t\t.isIn(\"suddenly there came a tapping\", \"As if some one gently rapping\",\n+\t\t\t\t\t\t\t\"rapping at my chamber door\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MDg2NQ=="}, "originalCommit": {"oid": "cd617d4e4384f51c28bcee73cf70ceb5407112ad"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzMTc5NA==", "bodyText": "We can keep adding new assertion methods for new test-cases when a feature needs it (like StopwatchExtension) or have a generic method \"exposing\" the things we want to assert (exceptions, report entries).\nOr we can do both.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r464931794", "createdAt": "2020-08-04T09:45:27Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTests.java", "diffHunk": "@@ -78,8 +79,9 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \n \t\tassertThat(results)\n \t\t\t\t.hasNumberOfReportEntries(3)\n-\t\t\t\t.withValues(\"suddenly there came a tapping\", \"As if some one gently rapping\",\n-\t\t\t\t\t\"rapping at my chamber door\");\n+\t\t\t\t.andThen(entry -> assertThat(entry.getValue())\n+\t\t\t\t\t\t.isIn(\"suddenly there came a tapping\", \"As if some one gently rapping\",\n+\t\t\t\t\t\t\t\"rapping at my chamber door\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MDg2NQ=="}, "originalCommit": {"oid": "cd617d4e4384f51c28bcee73cf70ceb5407112ad"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzM0NzQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/assertion/reportentry/ReportEntryAssert.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxOToxMjo1M1rOG6fxgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxOToxMjo1M1rOG6fxgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MTE3MQ==", "bodyText": "I really like those assertion-method names!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r463991171", "createdAt": "2020-08-01T19:12:53Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/reportentry/ReportEntryAssert.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit.assertion.reportentry;\n+\n+/**\n+ * Assertions for asserting how many report entries were published.\n+ */\n+public interface ReportEntryAssert {\n+\n+\t/**\n+\t * Asserts that the expected number of report entries were published across all executed tests.\n+\t * @param expected the number of report entries expected to be published\n+\t * @return a {@link ReportEntryValueAssert} for further assertions.\n+\t */\n+\tReportEntryValueAssert hasNumberOfReportEntries(int expected);\n+\n+\t/**\n+\t * Asserts that exactly one report entry was published across all executed tests or containers.\n+\t * @return a {@link ReportEntryValueAssert} for further assertions.\n+\t */\n+\tReportEntryValueAssert hasSingleReportEntry();\n+\n+\t/**\n+\t * Asserts that no report entries were published across all executed tests or containers.\n+\t */\n+\tvoid hasNoReportEntries();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd617d4e4384f51c28bcee73cf70ceb5407112ad"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzM0NzYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/assertion/reportentry/ReportEntryValueAssert.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxOToxMzoxNlrOG6fxmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNTo0NTo0NVrOG6l-rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MTE5NA==", "bodyText": "Javadoc missing", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r463991194", "createdAt": "2020-08-01T19:13:16Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/reportentry/ReportEntryValueAssert.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit.assertion.reportentry;\n+\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Assertions for asserting the content of the published report entries.\n+ */\n+public interface ReportEntryValueAssert {\n+\n+\t/**\n+\t * Asserts that the report entry has a specified key and value.\n+\t * Fails if there are multiple report entries.\n+\t *\n+\t * @param key   the key of the expected report entry\n+\t * @param value the value of the expected report entry\n+\t */\n+\tvoid withKeyAndValue(String key, String value);\n+\n+\t/**\n+\t * Asserts that the report entries contain exactly the specified values (in any order).\n+\t *\n+\t * @param expected the expected values of the report entries\n+\t */\n+\tvoid withValues(String... expected);\n+\n+\t/**\n+\t * Asserts that the report entries contain the specified key-value pairs (in any order).\n+\t * Fails if there are odd number of supplied strings.\n+\t *\n+\t * @param keyAndValuePairs the expected key-value pairs of the report entries\n+\t */\n+\tvoid withKeyValuePairs(String... keyAndValuePairs);\n+\n+\t/**\n+\t * Asserts that the supplied predicate returns true for the report entries.\n+\t *\n+\t * @param predicate the condition we want to fulfill\n+\t */\n+\tvoid asserting(Predicate<Map.Entry<String, String>> predicate);\n+\n+\tvoid andThen(Consumer<Map.Entry<String, String>> testFunction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd617d4e4384f51c28bcee73cf70ceb5407112ad"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA5Mjg0NQ==", "bodyText": "Javadoc added", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r464092845", "createdAt": "2020-08-02T15:45:45Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/reportentry/ReportEntryValueAssert.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit.assertion.reportentry;\n+\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Assertions for asserting the content of the published report entries.\n+ */\n+public interface ReportEntryValueAssert {\n+\n+\t/**\n+\t * Asserts that the report entry has a specified key and value.\n+\t * Fails if there are multiple report entries.\n+\t *\n+\t * @param key   the key of the expected report entry\n+\t * @param value the value of the expected report entry\n+\t */\n+\tvoid withKeyAndValue(String key, String value);\n+\n+\t/**\n+\t * Asserts that the report entries contain exactly the specified values (in any order).\n+\t *\n+\t * @param expected the expected values of the report entries\n+\t */\n+\tvoid withValues(String... expected);\n+\n+\t/**\n+\t * Asserts that the report entries contain the specified key-value pairs (in any order).\n+\t * Fails if there are odd number of supplied strings.\n+\t *\n+\t * @param keyAndValuePairs the expected key-value pairs of the report entries\n+\t */\n+\tvoid withKeyValuePairs(String... keyAndValuePairs);\n+\n+\t/**\n+\t * Asserts that the supplied predicate returns true for the report entries.\n+\t *\n+\t * @param predicate the condition we want to fulfill\n+\t */\n+\tvoid asserting(Predicate<Map.Entry<String, String>> predicate);\n+\n+\tvoid andThen(Consumer<Map.Entry<String, String>> testFunction);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MTE5NA=="}, "originalCommit": {"oid": "cd617d4e4384f51c28bcee73cf70ceb5407112ad"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzM1MTkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/assertion/single/TestCaseFailureAssert.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxOToxOTo1NFrOG6fzlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNDowMDozOVrOG6lTMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MTcwMg==", "bodyText": "I really have difficulty to imagine how to use this. I think it will quite be complicated and not easy to use - what's a thing I expect of an assertion lib (or method).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r463991702", "createdAt": "2020-08-01T19:19:54Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/single/TestCaseFailureAssert.java", "diffHunk": "@@ -30,4 +33,16 @@\n \t */\n \tAbstractThrowableAssert<?, ? extends Throwable> withException();\n \n+\t/**\n+\t * Asserts that the test/container threw an exception that fulfills the supplied predicate.\n+\t * @param predicate the condition the thrown exception must fulfill\n+\t */\n+\tvoid withExceptionFulfilling(Predicate<Throwable> predicate);\n+\n+\t/**\n+\t * Applies the supplied consumer to the exception thrown by the test/container.\n+\t * @param testFunction a consumer, for writing more flexible tests\n+\t */\n+\tvoid andThenCheckException(Consumer<Throwable> testFunction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd617d4e4384f51c28bcee73cf70ceb5407112ad"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4MTcxMw==", "bodyText": "This is for cases that can not be covered by the other asserting methods.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r464081713", "createdAt": "2020-08-02T14:00:39Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/single/TestCaseFailureAssert.java", "diffHunk": "@@ -30,4 +33,16 @@\n \t */\n \tAbstractThrowableAssert<?, ? extends Throwable> withException();\n \n+\t/**\n+\t * Asserts that the test/container threw an exception that fulfills the supplied predicate.\n+\t * @param predicate the condition the thrown exception must fulfill\n+\t */\n+\tvoid withExceptionFulfilling(Predicate<Throwable> predicate);\n+\n+\t/**\n+\t * Applies the supplied consumer to the exception thrown by the test/container.\n+\t * @param testFunction a consumer, for writing more flexible tests\n+\t */\n+\tvoid andThenCheckException(Consumer<Throwable> testFunction);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MTcwMg=="}, "originalCommit": {"oid": "cd617d4e4384f51c28bcee73cf70ceb5407112ad"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTAzNjAwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/assertion/TestCaseAssertBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoxODo0NVrOHWtl0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoxODo0NVrOHWtl0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU3NzY4Mg==", "bodyText": "This should behave the same way as asserting in ReportEntryAssertBase:\nassertThat(predicate.test(thrown)).isTrue();", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r493577682", "createdAt": "2020-09-23T13:18:45Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/TestCaseAssertBase.java", "diffHunk": "@@ -66,4 +60,31 @@ public void whichAborted() {\n \t\tassertThat(actual.aborted().count()).isEqualTo(1);\n \t}\n \n+\t@Override\n+\tpublic void withExceptionFulfilling(Predicate<Throwable> predicate) {\n+\t\tThrowable thrown = getRequiredThrowable();\n+\t\tpredicate.test(thrown);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55339e8c7477199e269e22a60c74ee8ed83b5333"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjIwNzA1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/assertion/TestCaseAssertBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNTo1ODoyNFrOHYoOsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNzo0MTowMlrOHYo0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4Njk5Mw==", "bodyText": "How about:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(predicate.test(thrown)).isTrue();\n          \n          \n            \n            \t\tassertThat(predicate).accepts(thrown);\n          \n      \n    \n    \n  \n\nReference: https://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/PredicateAssert.html", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r495586993", "createdAt": "2020-09-27T15:58:24Z", "author": {"login": "beatngu13"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/TestCaseAssertBase.java", "diffHunk": "@@ -63,7 +63,7 @@ public void whichAborted() {\n \t@Override\n \tpublic void withExceptionFulfilling(Predicate<Throwable> predicate) {\n \t\tThrowable thrown = getRequiredThrowable();\n-\t\tpredicate.test(thrown);\n+\t\tassertThat(predicate.test(thrown)).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db884c5b852e3ff33ff52bad1cb52d5f0359b60f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5NjcwNg==", "bodyText": "Sounds good, thank you \ud83d\ude04 . Done.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r495596706", "createdAt": "2020-09-27T17:41:02Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/TestCaseAssertBase.java", "diffHunk": "@@ -63,7 +63,7 @@ public void whichAborted() {\n \t@Override\n \tpublic void withExceptionFulfilling(Predicate<Throwable> predicate) {\n \t\tThrowable thrown = getRequiredThrowable();\n-\t\tpredicate.test(thrown);\n+\t\tassertThat(predicate.test(thrown)).isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4Njk5Mw=="}, "originalCommit": {"oid": "db884c5b852e3ff33ff52bad1cb52d5f0359b60f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDM0MTgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/assertion/PioneerAssert.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDozNTo1N1rOHpP2lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxMDo0M1rOHpRJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxMzM5OQ==", "bodyText": "Should it be only or exactly? (I.e. is it ok if exceptionTypes is a superset of actual exceptions?) Whatever makes sense (maybe both?) should probably be reflected in the method name.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r513013399", "createdAt": "2020-10-27T20:35:57Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/PioneerAssert.java", "diffHunk": "@@ -212,4 +264,58 @@ public ExecutionResultAssert hasNumberOfDynamicallyRegisteredContainers(int expe\n \t\t\t\t.collect(toList());\n \t}\n \n+\t@SafeVarargs\n+\t@Override\n+\tpublic final ListAssert<String> withExceptionInstancesOf(Class<? extends Throwable>... exceptionTypes) {\n+\t\treturn assertExceptions(events -> {\n+\t\t\tStream<Class<? extends Throwable>> classStream = getAllExceptions(events).map(Throwable::getClass);\n+\t\t\tAssertions.assertThat(classStream).containsOnly(exceptionTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "871c5020d243639b119aeeae757dc6b5b4ff1f5b"}, "originalPosition": 317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAyOTczOA==", "bodyText": "It's only, not exactly => instanceOf(X) should work like instanceof so superset should work.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r513029738", "createdAt": "2020-10-27T21:03:28Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/PioneerAssert.java", "diffHunk": "@@ -212,4 +264,58 @@ public ExecutionResultAssert hasNumberOfDynamicallyRegisteredContainers(int expe\n \t\t\t\t.collect(toList());\n \t}\n \n+\t@SafeVarargs\n+\t@Override\n+\tpublic final ListAssert<String> withExceptionInstancesOf(Class<? extends Throwable>... exceptionTypes) {\n+\t\treturn assertExceptions(events -> {\n+\t\t\tStream<Class<? extends Throwable>> classStream = getAllExceptions(events).map(Throwable::getClass);\n+\t\t\tAssertions.assertThat(classStream).containsOnly(exceptionTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxMzM5OQ=="}, "originalCommit": {"oid": "871c5020d243639b119aeeae757dc6b5b4ff1f5b"}, "originalPosition": 317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzNDY3NQ==", "bodyText": "Ok, that makes sense. If we need \"exactly\", the new method could be called withExceptionInstancesExactlyOf.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/305#discussion_r513034675", "createdAt": "2020-10-27T21:10:43Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/testkit/assertion/PioneerAssert.java", "diffHunk": "@@ -212,4 +264,58 @@ public ExecutionResultAssert hasNumberOfDynamicallyRegisteredContainers(int expe\n \t\t\t\t.collect(toList());\n \t}\n \n+\t@SafeVarargs\n+\t@Override\n+\tpublic final ListAssert<String> withExceptionInstancesOf(Class<? extends Throwable>... exceptionTypes) {\n+\t\treturn assertExceptions(events -> {\n+\t\t\tStream<Class<? extends Throwable>> classStream = getAllExceptions(events).map(Throwable::getClass);\n+\t\t\tAssertions.assertThat(classStream).containsOnly(exceptionTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxMzM5OQ=="}, "originalCommit": {"oid": "871c5020d243639b119aeeae757dc6b5b4ff1f5b"}, "originalPosition": 317}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4293, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}