{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1OTAyOTcx", "number": 361, "title": "Introduce Issue-Extension with Service-API (#135 / #361)", "bodyText": "This PR shows an implementation of an issue extension , which publishes the results of annotated tests through an API.\nIntroduce Issue-Extension with Service-API (#135 / #361)\n\nThis PR provides the @Issue-Annotation and its extension,\nwhich allows users to show that tests belong to a special\nissue (e.g. requirement).\n\nWhile this information is not needed during test execution\n(e.g. like changing the time zone via @DefaultTimeZone-\nannotation), but after the test execution (e.g. in a report\nto check which tests of which issues have passed/failed),\nthis PR also introduces the IssueExtensionReportListener.\n\nThis listener collects the name, issueid and result of all\ntests which are annotated with the introduced annotation.\nAfter the test execution has finished, the collected\ninformation are published to the IssueProcessor API.\n\nUsers can implement this API for further process of the\nresults based on their individual needs, e.g. generating a\nreport, or sending mails.\n\nWith such an API Pioneer does not makes any assumptions\nabout the users needs and also avoids additional\ndependencies and therefore dependency conflicts.\n\ncloses #135\nPR: #361\n\ncloses #135", "createdAt": "2020-10-19T11:41:22Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361", "merged": true, "mergeCommit": {"oid": "06491baaf59a031718e39381688166d92bd5fa67"}, "closed": true, "closedAt": "2020-11-24T20:15:04Z", "author": {"login": "Bukama"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdT_En-AH2gAyNTA1OTAyOTcxOjU2YWU1ZWJhOWE1ZDcwZDYzZjdhMGVmMDM4MDZlYWM1YjMxYjNkYzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfvT72AH2gAyNTA1OTAyOTcxOmMwYmZiZjQ5Yzc5YWFiZTcwODZmZTdiZWQxZGRjNTc2ODczMzVmMjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "56ae5eba9a5d70d63f7a0ef03806eac5b31b3dc4", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/56ae5eba9a5d70d63f7a0ef03806eac5b31b3dc4", "committedDate": "2020-10-19T07:30:52Z", "message": "Change to abstract class as an interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "821b3215a3408941bbeb8f10e62fd3346396c3a9", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/821b3215a3408941bbeb8f10e62fd3346396c3a9", "committedDate": "2020-10-19T09:09:33Z", "message": "Provide IssueProcessor call it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90dfe59c126d9e1fe359ceb1457282df75e513ce", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/90dfe59c126d9e1fe359ceb1457282df75e513ce", "committedDate": "2020-10-19T09:20:34Z", "message": "Avoid exception if no service provider is present"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36db0150115f1c8d5a2ab2a4c81d4f4a50fcdba0", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/36db0150115f1c8d5a2ab2a4c81d4f4a50fcdba0", "committedDate": "2020-10-19T09:45:53Z", "message": "IssueExtensionTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ba7b5e26d124722f1f4a598140a38f8f4ca96f", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b0ba7b5e26d124722f1f4a598140a38f8f4ca96f", "committedDate": "2020-10-19T09:54:34Z", "message": "IssueExtensionListener Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e90fefad0ba3b3213f10f19e5bd65ad3c187eddc", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e90fefad0ba3b3213f10f19e5bd65ad3c187eddc", "committedDate": "2020-10-19T10:16:24Z", "message": "IssueExtensionListener Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acca3c08c66c901d488bf2147acb7ee2f8b50923", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/acca3c08c66c901d488bf2147acb7ee2f8b50923", "committedDate": "2020-10-19T10:55:34Z", "message": "Documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50873798ca6e2825e01575de1aaa6b13a1ed7433", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/50873798ca6e2825e01575de1aaa6b13a1ed7433", "committedDate": "2020-10-19T12:01:42Z", "message": "Update module-info.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57544af67d4dd4b689dc2cc930a4e07e6cf545a1", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/57544af67d4dd4b689dc2cc930a4e07e6cf545a1", "committedDate": "2020-10-19T12:14:59Z", "message": "Cover toString with test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e0157e4087c177cf1976e523307889f198828d6b", "committedDate": "2020-10-19T12:30:37Z", "message": "Remove code smell"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNzUyMzY4", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#pullrequestreview-511752368", "createdAt": "2020-10-19T13:21:00Z", "commit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzoyOTozN1rOHkOY-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDoxMTozM1rOHkQhAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0NjU1NQ==", "bodyText": "You could also add the provides with directive to our module-info.java. Would that work?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507746555", "createdAt": "2020-10-19T13:29:37Z", "author": {"login": "Michael1993"}, "path": "src/main/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener", "diffHunk": "@@ -0,0 +1 @@\n+org.junitpioneer.jupiter.issue.IssueExtensionListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MDUzMg==", "bodyText": "Why a List? A Map<String, IssuedTestCase> would make more sense to me. (issue id to tests & results).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507750532", "createdAt": "2020-10-19T13:35:02Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueProcessor.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.List;\n+\n+/**\n+ * This interfaces offers a method to process the results of `@Issue` annotated test cases.\n+ */\n+public interface IssueProcessor {\n+\n+\t/**\n+\t * Processes results of `@Issue` annotated test cases, called {@link IssuedTestCase}.\n+\t *\n+\t * @param allResults List of tests with their unique name, issueId and execution results.\n+\t */\n+\tvoid processTestResults(List<IssuedTestCase> allResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1Mzc2MA==", "bodyText": "You only call this once, no? Why not invoke ServiceLoader directly?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507753760", "createdAt": "2020-10-19T13:39:22Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();\n+\n+\t// Package private by purpose for testing\n+\tList<IssuedTestCase> allIssuedTests = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {\n+\t\tString testId = testIdentifier.getUniqueId();\n+\n+\t\t// Check if the report entry is an issue id\n+\t\tMap<String, String> entryKeyValues = entry.getKeyValuePairs();\n+\t\tif (entryKeyValues.containsKey(KEY_ISSUE)) {\n+\t\t\tString issueId = entryKeyValues.get(KEY_ISSUE);\n+\n+\t\t\t// Store that the current test belongs to annotated issue\n+\t\t\tissueTestsCache.putIfAbsent(issueId, new ArrayList<>());\n+\t\t\tissueTestsCache.get(issueId).add(testId);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+\t\tif (testIdentifier.isTest()) {\n+\t\t\t// Store test result in cache\n+\t\t\ttestStatusCache.put(testIdentifier.getUniqueId(), testExecutionResult.getStatus().toString());\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan testPlan) {\n+\t\t// Retrieve all tests, which are annotated with @Issue, and their result.\n+\t\tfor (Map.Entry<String, List<String>> entry : issueTestsCache.entrySet()) {\n+\t\t\tString issueId = entry.getKey();\n+\t\t\tList<String> allTests = entry.getValue();\n+\n+\t\t\tallTests.forEach(testID -> {\n+\t\t\t\tString status = testStatusCache.getOrDefault(testID, \"UNKNOWN\");\n+\n+\t\t\t\tallIssuedTests.add(new IssuedTestCase(testID, issueId, status));\n+\t\t\t});\n+\t\t}\n+\n+\t\t// Pass results to all IssueProcessors\n+\t\tIterator<IssueProcessor> processors = IssueProcessorProvider.getInstance().providers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTgzMQ==", "bodyText": "It's not a cache.\n\n\"...a cache [...] stores data so that future requests for that data can be served faster\"", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507755831", "createdAt": "2020-10-19T13:42:04Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTk5Nw==", "bodyText": "Also not a cache.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507755997", "createdAt": "2020-10-19T13:42:19Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NzM5MA==", "bodyText": "Could you verify the behaviour with a private implementation of IssueProcessor? Then this could be just a local variable.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507757390", "createdAt": "2020-10-19T13:44:11Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();\n+\n+\t// Package private by purpose for testing\n+\tList<IssuedTestCase> allIssuedTests = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTIwMw==", "bodyText": "1.) The Extension is package-private so it can only be invoked via the Issue annotation.\n2.) readIssueIdFromAnnotation throws an exception if the annotation is somehow still not present.\nChecking it in an if (basically the 3rd check) seems like overkill at this point. Worse, I think we should throw an exception if the annotation is missing but the if statement prevents that.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507759203", "createdAt": "2020-10-19T13:46:31Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {\n+\n+\tstatic final String KEY = \"Issue\";\n+\n+\t@Override\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\t//noinspection unchecked\n+\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Issue.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTc2NA==", "bodyText": "Why is this package-private? Could this be private?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507759764", "createdAt": "2020-10-19T13:47:13Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {\n+\n+\tstatic final String KEY = \"Issue\";\n+\n+\t@Override\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\t//noinspection unchecked\n+\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Issue.class)) {\n+\t\t\tString issueId = readIssueIdFromAnnotation(context);\n+\t\t\tcontext.publishReportEntry(KEY, issueId);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Reads the {@code @Issue} value from the annotation.\n+\t * @param context The Extensions context\n+\t * @return The read value\n+\t */\n+\tString readIssueIdFromAnnotation(ExtensionContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MjE1Mw==", "bodyText": "The extension makes the assumption that people won't publish report entries with the key \"Issue\". I do not like that.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507762153", "createdAt": "2020-10-19T13:50:30Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MjQyOA==", "bodyText": "Maybe the extension (as a whole) could be simpler if this class implemented the TestWatcher interface? Not quite sure.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507762428", "createdAt": "2020-10-19T13:50:53Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2NDA5OA==", "bodyText": "I thought we write it as Java, not JAVA? \ud83e\udd14", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507764098", "createdAt": "2020-10-19T13:53:08Z", "author": {"login": "Michael1993"}, "path": "docs/issue.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+:page-title: Issue Information\n+:page-description: Extends JUnit Jupiter with `@Issue` to publish issue information.\n+\n+== Introduction\n+\n+The main reason developer write tests is to ensure the functionality of a requirement or to avoid technical problems.\n+The `@Issue` annotation allows marking tests with a String, referencing a related issue (like a requirement, or a bugfix) of an issue-tracker (like JIRA or Redmine).\n+\n+It's a JUnit Jupiter extension for showing that tests exist to cover a specific issue.\n+\n+== Usage\n+\n+The extension is divided into two parts:\n+First there is an annotation to mark that a test belongs to a specific issue.\n+The second part of the extension is an API interface to process the results, as JUnit Pioneer does not know what a user wants to do with the results, e.g. generating a report, sending mails or mark the CI-build as failed.\n+\n+=== Annotating a test\n+\n+To show that a test related to an issue just add the annotation and provide a value, e.g. a JIRA issue id, like in the following example:\n+\n+[source,java]\n+----\n+@Issue(\"REQ-123\")\n+@Test\n+void test() {\n+\t// One of the tests for the issue with the id \"REQ-123\"\n+}\n+----\n+\n+The `@Issue` annotation can be used on the method level only.\n+This is done on purpose, so that the test class can contain tests which cover the professional requirements but also tests which only exist to ensure technical functionality / implementation details.\n+\n+The `@Issue` annotation can only be used once per method.\n+This is done on purpose too, because a test case should only cover exactly one aspect of a method.\n+\n+=== IssueProcessor API\n+\n+Pioneer tracks the results of tests which are annotated with the `@Issue` annotation, using an https://junit.org/junit5/docs/current/user-guide/#launcher-api-listeners-custom[ExectionListener].\n+After all tests are executed their unique names, results, and the annotated value (called `issueID`) are provided through the `IssueProcessor` API.\n+\n+To use the information published this way, a service implementation of the `IssueProcessor` interface must be provided by the user.\n+\n+The following snippet shows a simple implementation of the interface which just prints out the received values:\n+\n+[source,java]\n+----\n+public class SimpleProcessor implements IssueProcessor {\n+\n+\t@Override public void processTestResults(\n+\t\t\tList<IssuedTestCase> allResults) {\n+\t\tfor(IssuedTestCase test : allResults) {\n+\t\t\tSystem.out.println(test);\n+\t\t}\n+\t}\n+}\n+----\n+\n+NOTE: The implementing class must be registered to the JAVA ecosystem as a service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2NzIxNA==", "bodyText": "Is this not a duplicate?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507767214", "createdAt": "2020-10-19T13:56:50Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {\n+\n+\tstatic final String KEY = \"Issue\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3MTM5NA==", "bodyText": "Why just the status? You could store all the information you get from JUnit, nicely encapsulated in a TestExecutionResult object...", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507771394", "createdAt": "2020-10-19T14:01:03Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();\n+\n+\t// Package private by purpose for testing\n+\tList<IssuedTestCase> allIssuedTests = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {\n+\t\tString testId = testIdentifier.getUniqueId();\n+\n+\t\t// Check if the report entry is an issue id\n+\t\tMap<String, String> entryKeyValues = entry.getKeyValuePairs();\n+\t\tif (entryKeyValues.containsKey(KEY_ISSUE)) {\n+\t\t\tString issueId = entryKeyValues.get(KEY_ISSUE);\n+\n+\t\t\t// Store that the current test belongs to annotated issue\n+\t\t\tissueTestsCache.putIfAbsent(issueId, new ArrayList<>());\n+\t\t\tissueTestsCache.get(issueId).add(testId);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+\t\tif (testIdentifier.isTest()) {\n+\t\t\t// Store test result in cache\n+\t\t\ttestStatusCache.put(testIdentifier.getUniqueId(), testExecutionResult.getStatus().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3MzU3OA==", "bodyText": "You store things in a Map and then convert the Map into a List.\n1.) Why not just pass the Map to the IssueProcessors?\n2.) Why not create the List directly?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507773578", "createdAt": "2020-10-19T14:03:50Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();\n+\n+\t// Package private by purpose for testing\n+\tList<IssuedTestCase> allIssuedTests = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {\n+\t\tString testId = testIdentifier.getUniqueId();\n+\n+\t\t// Check if the report entry is an issue id\n+\t\tMap<String, String> entryKeyValues = entry.getKeyValuePairs();\n+\t\tif (entryKeyValues.containsKey(KEY_ISSUE)) {\n+\t\t\tString issueId = entryKeyValues.get(KEY_ISSUE);\n+\n+\t\t\t// Store that the current test belongs to annotated issue\n+\t\t\tissueTestsCache.putIfAbsent(issueId, new ArrayList<>());\n+\t\t\tissueTestsCache.get(issueId).add(testId);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+\t\tif (testIdentifier.isTest()) {\n+\t\t\t// Store test result in cache\n+\t\t\ttestStatusCache.put(testIdentifier.getUniqueId(), testExecutionResult.getStatus().toString());\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan testPlan) {\n+\t\t// Retrieve all tests, which are annotated with @Issue, and their result.\n+\t\tfor (Map.Entry<String, List<String>> entry : issueTestsCache.entrySet()) {\n+\t\t\tString issueId = entry.getKey();\n+\t\t\tList<String> allTests = entry.getValue();\n+\n+\t\t\tallTests.forEach(testID -> {\n+\t\t\t\tString status = testStatusCache.getOrDefault(testID, \"UNKNOWN\");\n+\n+\t\t\t\tallIssuedTests.add(new IssuedTestCase(testID, issueId, status));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NjA1NA==", "bodyText": "I think the fields should be only (if you agree with my other comments):\nprivate final String uniqueName;\nprivate final TestExecutionResult result;", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507776054", "createdAt": "2020-10-19T14:06:13Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssuedTestCase.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+/**\n+ * Represents the execution result of test method, which is annotated with {@link org.junitpioneer.jupiter.Issue}.\n+ *\n+ * In future java this could be a record.\n+ */\n+public final class IssuedTestCase {\n+\n+\tprivate final String uniqueName;\n+\tprivate final String issueId;\n+\tprivate final String result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NzI1OA==", "bodyText": "A singleton? Why?!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507777258", "createdAt": "2020-10-19T14:07:08Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueProcessorProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Provider for implementations of the {@link IssueProcessor} interface.\n+ */\n+public class IssueProcessorProvider {\n+\n+\tprivate static IssueProcessorProvider provider;\n+\tprivate ServiceLoader<IssueProcessor> loader;\n+\n+\tprivate IssueProcessorProvider() {\n+\t\tloader = ServiceLoader.load(IssueProcessor.class);\n+\t}\n+\n+\t/**\n+\t * Retrieve an instance of the IssueProcessorProvider.\n+\t *\n+\t * @return Instance of IssueProcessorProvider\n+\t */\n+\tpublic static IssueProcessorProvider getInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4MTM3Ng==", "bodyText": "If you insist on this class being necessary, I suggest abandoning the singleton pattern:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic Iterator<IssueProcessor> providers() {\n          \n          \n            \n            \t\treturn loader.iterator();\n          \n          \n            \n            \tpublic static Iterator<IssueProcessor> providers() {\n          \n          \n            \n            \t\treturn ServiceLoader.load(IssueProcessor.class).iterator();", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507781376", "createdAt": "2020-10-19T14:11:33Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueProcessorProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Provider for implementations of the {@link IssueProcessor} interface.\n+ */\n+public class IssueProcessorProvider {\n+\n+\tprivate static IssueProcessorProvider provider;\n+\tprivate ServiceLoader<IssueProcessor> loader;\n+\n+\tprivate IssueProcessorProvider() {\n+\t\tloader = ServiceLoader.load(IssueProcessor.class);\n+\t}\n+\n+\t/**\n+\t * Retrieve an instance of the IssueProcessorProvider.\n+\t *\n+\t * @return Instance of IssueProcessorProvider\n+\t */\n+\tpublic static IssueProcessorProvider getInstance() {\n+\t\tif (null == provider) {\n+\t\t\tprovider = new IssueProcessorProvider();\n+\t\t}\n+\n+\t\treturn provider;\n+\t}\n+\n+\t/**\n+\t * Provides all registered service providers.\n+\t *\n+\t * @return All known {@link IssueProcessor}s\n+\t */\n+\tpublic Iterator<IssueProcessor> providers() {\n+\t\treturn loader.iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0cede4ee4ecca05ac93a7a15c72a6f260a09a57", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c0cede4ee4ecca05ac93a7a15c72a6f260a09a57", "committedDate": "2020-10-20T07:04:45Z", "message": "Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce008f350668d7cb1a31b4158068b9f2e1ee845b", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ce008f350668d7cb1a31b4158068b9f2e1ee845b", "committedDate": "2020-10-20T07:38:48Z", "message": "Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63630f5e64ce4aa34c2c41740169ba3f05c4336d", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/63630f5e64ce4aa34c2c41740169ba3f05c4336d", "committedDate": "2020-11-10T19:33:34Z", "message": "Small changes to documentation and code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc1MTk0", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#pullrequestreview-527475194", "createdAt": "2020-11-10T18:11:37Z", "commit": {"oid": "ce008f350668d7cb1a31b4158068b9f2e1ee845b"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMTozN1rOHwpNBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTo0NzowOVrOHwtA8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODc3Mw==", "bodyText": "@sormuras Is there any reason to not have junit-platform-launcher as a run-time dependency?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520768773", "createdAt": "2020-11-10T18:11:37Z", "author": {"login": "nipafx"}, "path": "build.gradle.kts", "diffHunk": "@@ -42,9 +42,9 @@ dependencies {\n \timplementation(group = \"org.junit.jupiter\", name = \"junit-jupiter-api\")\n \timplementation(group = \"org.junit.jupiter\", name = \"junit-jupiter-params\")\n \timplementation(group = \"org.junit.platform\", name = \"junit-platform-commons\")\n+\timplementation(group = \"org.junit.platform\", name = \"junit-platform-launcher\")\n \n \ttestImplementation(group = \"org.junit.jupiter\", name = \"junit-jupiter-engine\")\n-\ttestImplementation(group = \"org.junit.platform\", name = \"junit-platform-launcher\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce008f350668d7cb1a31b4158068b9f2e1ee845b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MTYxMQ==", "bodyText": "I think it would be very interesting to gather more information that just the test's name, e.g. whether it failed and if so with what exception. But we can leave that for later. Changing the extension point shouldn't matter to the outside world.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520781611", "createdAt": "2020-11-10T18:34:07Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MjQyOA=="}, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNTk5NQ==", "bodyText": "This extension isn't stateless. As far as I'm aware, Jupiter doesn't guarantee it will use the same instance for the entire test run (although I couldn't verify that in the user guide). I wanted to propose to use the store to store and retrieve all necessary information, but I just see that TestExecutionListeners don't have access to that (makes sense, because TestExecutionListener doesn't know anything about Jupiter, which is where the store lives).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520805995", "createdAt": "2020-11-10T19:03:20Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Storage with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsStorage = new ConcurrentHashMap<>();\n+\n+\t// Storage with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusStorage = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce008f350668d7cb1a31b4158068b9f2e1ee845b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNjYwNw==", "bodyText": "Yes, I removed the duplication.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520806607", "createdAt": "2020-11-10T19:04:15Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {\n+\n+\tstatic final String KEY = \"Issue\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2NzIxNA=="}, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNzU4Mw==", "bodyText": "sormuras popped into the stream and answered this with a riddle three before eventually letting us know that there's no problem with this.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520807583", "createdAt": "2020-11-10T19:06:07Z", "author": {"login": "nipafx"}, "path": "build.gradle.kts", "diffHunk": "@@ -42,9 +42,9 @@ dependencies {\n \timplementation(group = \"org.junit.jupiter\", name = \"junit-jupiter-api\")\n \timplementation(group = \"org.junit.jupiter\", name = \"junit-jupiter-params\")\n \timplementation(group = \"org.junit.platform\", name = \"junit-platform-commons\")\n+\timplementation(group = \"org.junit.platform\", name = \"junit-platform-launcher\")\n \n \ttestImplementation(group = \"org.junit.jupiter\", name = \"junit-jupiter-engine\")\n-\ttestImplementation(group = \"org.junit.platform\", name = \"junit-platform-launcher\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODc3Mw=="}, "originalCommit": {"oid": "ce008f350668d7cb1a31b4158068b9f2e1ee845b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNTM3OQ==", "bodyText": "I'd prefer to pass on more structured information. What about a list of these:\npublic record TestedIssue(String issueId, List<IssueTestCase>) { }\npublic record IssueTestCase(String testId, Status result) { }\nBut obviously not as records. \ud83d\ude0a", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520815379", "createdAt": "2020-11-10T19:19:46Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueProcessor.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.List;\n+\n+/**\n+ * This interfaces offers a method to process the results of `@Issue` annotated test cases.\n+ */\n+public interface IssueProcessor {\n+\n+\t/**\n+\t * Processes results of `@Issue` annotated test cases, called {@link IssuedTestCase}.\n+\t *\n+\t * @param allResults List of tests with their unique name, issueId and execution results.\n+\t */\n+\tvoid processTestResults(List<IssuedTestCase> allResults);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MDUzMg=="}, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNzE3Mw==", "bodyText": "I also think that gathering these information in separate maps is a bit iffy. I prefer richer data structures - maybe a Map<TestId, TestedIssueBuilder>?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520817173", "createdAt": "2020-11-10T19:22:58Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueProcessor.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.List;\n+\n+/**\n+ * This interfaces offers a method to process the results of `@Issue` annotated test cases.\n+ */\n+public interface IssueProcessor {\n+\n+\t/**\n+\t * Processes results of `@Issue` annotated test cases, called {@link IssuedTestCase}.\n+\t *\n+\t * @param allResults List of tests with their unique name, issueId and execution results.\n+\t */\n+\tvoid processTestResults(List<IssuedTestCase> allResults);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MDUzMg=="}, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxODU5MQ==", "bodyText": "I don't see the use for this class either. It just seems to be a wrapper around ServiceLoader.load(IssueProcessor.class). No reason not to call that directly wherever you need it.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520818591", "createdAt": "2020-11-10T19:25:25Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueProcessorProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Provider for implementations of the {@link IssueProcessor} interface.\n+ */\n+public class IssueProcessorProvider {\n+\n+\tprivate static IssueProcessorProvider provider;\n+\tprivate ServiceLoader<IssueProcessor> loader;\n+\n+\tprivate IssueProcessorProvider() {\n+\t\tloader = ServiceLoader.load(IssueProcessor.class);\n+\t}\n+\n+\t/**\n+\t * Retrieve an instance of the IssueProcessorProvider.\n+\t *\n+\t * @return Instance of IssueProcessorProvider\n+\t */\n+\tpublic static IssueProcessorProvider getInstance() {\n+\t\tif (null == provider) {\n+\t\t\tprovider = new IssueProcessorProvider();\n+\t\t}\n+\n+\t\treturn provider;\n+\t}\n+\n+\t/**\n+\t * Provides all registered service providers.\n+\t *\n+\t * @return All known {@link IssueProcessor}s\n+\t */\n+\tpublic Iterator<IssueProcessor> providers() {\n+\t\treturn loader.iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4MTM3Ng=="}, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyMTU2Mw==", "bodyText": "I wanted to recommend TestExecutionResult as well, but it doesn't know the test's id, so we have to store that ourselves anyway. Instead of referencing it, we can just repack the information we need into our own class - see my proposal for IssueTestCase above.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520821563", "createdAt": "2020-11-10T19:30:31Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssuedTestCase.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+/**\n+ * Represents the execution result of test method, which is annotated with {@link org.junitpioneer.jupiter.Issue}.\n+ *\n+ * In future java this could be a record.\n+ */\n+public final class IssuedTestCase {\n+\n+\tprivate final String uniqueName;\n+\tprivate final String issueId;\n+\tprivate final String result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NjA1NA=="}, "originalCommit": {"oid": "e0157e4087c177cf1976e523307889f198828d6b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyODU4MA==", "bodyText": "I think we should include Execution in the name, e.g. IssueExtensionExecutionListener.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520828580", "createdAt": "2020-11-10T19:42:38Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce008f350668d7cb1a31b4158068b9f2e1ee845b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzMTIxOA==", "bodyText": "This needs to be here for services to work on the module path:\n\tprovides org.junit.platform.launcher.TestExecutionListener\n\t\t\twith org.junitpioneer.jupiter.issue.IssueExtensionListener;\n\n(I wanted to propose a change, but I can't propose one at the end of the file, which is where this should go.)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520831218", "createdAt": "2020-11-10T19:47:09Z", "author": {"login": "nipafx"}, "path": "src/main/module/module-info.java", "diffHunk": "@@ -2,6 +2,7 @@\n \trequires org.junit.jupiter.api;\n \trequires org.junit.jupiter.params;\n \trequires org.junit.platform.commons;\n+\trequires org.junit.platform.launcher;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce008f350668d7cb1a31b4158068b9f2e1ee845b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "799d517101d7e1d64240d6fbf4679f61381c9436", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/799d517101d7e1d64240d6fbf4679f61381c9436", "committedDate": "2020-11-13T17:41:48Z", "message": "Rename IssueExtensionListener.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ba661f4c3781fdae8db869b8ebf97616aa04127", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2ba661f4c3781fdae8db869b8ebf97616aa04127", "committedDate": "2020-11-13T17:51:55Z", "message": "Remove IssueProcessorProvider.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51c05a8fa300264c3b7c335c6006385194a6af1a", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/51c05a8fa300264c3b7c335c6006385194a6af1a", "committedDate": "2020-11-13T17:54:54Z", "message": "Add IssueExtensionListener to module-info.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2a3e9363f44161fee3aa9574bab057051762cd", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1e2a3e9363f44161fee3aa9574bab057051762cd", "committedDate": "2020-11-13T18:17:27Z", "message": "Add possibility to add annotation on class level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61b9d27a4d45696903b5a4e69cdc664fc96cc5a6", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/61b9d27a4d45696903b5a4e69cdc664fc96cc5a6", "committedDate": "2020-11-13T18:25:48Z", "message": "Move most classes to jupiter package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e23d000e832d5d18f2b2b6ff445e141ca6111d63", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e23d000e832d5d18f2b2b6ff445e141ca6111d63", "committedDate": "2020-11-13T19:09:59Z", "message": "Rewrite record classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c97e8f04125931ca8b1e9c883682e967cfdf42ba", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c97e8f04125931ca8b1e9c883682e967cfdf42ba", "committedDate": "2020-11-13T21:11:10Z", "message": "Fix module-info.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9cfc714203b03db9fddd88ee479d33a783707c7", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c9cfc714203b03db9fddd88ee479d33a783707c7", "committedDate": "2020-11-22T15:13:17Z", "message": "Put my fingers into all the pies aka refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47dd5fe8c391c3271f150473d27c6c57b85e0493", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/47dd5fe8c391c3271f150473d27c6c57b85e0493", "committedDate": "2020-11-22T17:50:42Z", "message": "Provide sample IssueProcessor service for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0bfbf49c79aabe7086fe7bed1ddc57687335f28", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c0bfbf49c79aabe7086fe7bed1ddc57687335f28", "committedDate": "2020-11-24T19:56:12Z", "message": "Fail at creating an integration test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3676, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}