{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4Nzg2OTE1", "number": 218, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxODozNlrODwA8Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MjoxNVrODwaRbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjczNjYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxODozNlrOGCxeag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowNjoyN1rOGC637g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MDkzOA==", "bodyText": "Why is this here?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405560938", "createdAt": "2020-04-08T14:18:36Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -83,26 +83,18 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n-\tprivate static List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n-\t\treturn recorder\n-\t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))\n-\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n-\t\t\t\t.filter(Optional::isPresent)\n-\t\t\t\t.map(Optional::get)\n-\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)\n-\t\t\t\t.collect(toList());\n-\t}\n-\n \tprivate static Map.Entry<String, String> entryOf(String key, String value) {\n \t\treturn new AbstractMap.SimpleEntry<>(key, value);\n \t}\n \n \tstatic class ReportEntriesTest {\n \n+\t\tprivate static AtomicInteger executionCount = new AtomicInteger(0);\n+\n \t\t@Test\n \t\t@ReportEntry(key = \"Crow2\", value = \"While I pondered weak and weary\")\n \t\tvoid explicitKey() {\n+\t\t\tSystem.out.println(\"HI THERE! \" + executionCount.getAndIncrement());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNDkyNg==", "bodyText": "Nicolai added it for basic tests after creating the basic wrapper after updating so see if it works. And I just didn't think about it anymore. Will remove it", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405714926", "createdAt": "2020-04-08T18:06:27Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -83,26 +83,18 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n-\tprivate static List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n-\t\treturn recorder\n-\t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))\n-\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n-\t\t\t\t.filter(Optional::isPresent)\n-\t\t\t\t.map(Optional::get)\n-\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)\n-\t\t\t\t.collect(toList());\n-\t}\n-\n \tprivate static Map.Entry<String, String> entryOf(String key, String value) {\n \t\treturn new AbstractMap.SimpleEntry<>(key, value);\n \t}\n \n \tstatic class ReportEntriesTest {\n \n+\t\tprivate static AtomicInteger executionCount = new AtomicInteger(0);\n+\n \t\t@Test\n \t\t@ReportEntry(key = \"Crow2\", value = \"While I pondered weak and weary\")\n \t\tvoid explicitKey() {\n+\t\t\tSystem.out.println(\"HI THERE! \" + executionCount.getAndIncrement());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MDkzOA=="}, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjczODU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxOTowMVrOGCxfnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxOTowMVrOGCxfnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MTI0Nw==", "bodyText": "Don't really see why this is here. Just for testing?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405561247", "createdAt": "2020-04-08T14:19:01Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -83,26 +83,18 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n-\tprivate static List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n-\t\treturn recorder\n-\t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))\n-\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n-\t\t\t\t.filter(Optional::isPresent)\n-\t\t\t\t.map(Optional::get)\n-\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)\n-\t\t\t\t.collect(toList());\n-\t}\n-\n \tprivate static Map.Entry<String, String> entryOf(String key, String value) {\n \t\treturn new AbstractMap.SimpleEntry<>(key, value);\n \t}\n \n \tstatic class ReportEntriesTest {\n \n+\t\tprivate static AtomicInteger executionCount = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc1Nzg1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyMzoxNlrOGCxrrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyMzoxNlrOGCxrrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NDMzNQ==", "bodyText": "Test descriptor is 'unused' in the strictest sense because it is only mentioned in comments. I think we should use fully-qualified names in docs.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405564335", "createdAt": "2020-04-08T14:23:16Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc2MTYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNDowNVrOGCxt_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNDowNVrOGCxt_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NDkyNg==", "bodyText": "'Pioneers' to show possession. Sounds better to me.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405564926", "createdAt": "2020-04-08T14:24:05Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneer own class to handle {@link EngineExecutionResults} of the JUnit-Jupiter-Engine.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc3NjYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNzoyN1rOGCx3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNzoyN1rOGCx3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NzMzMA==", "bodyText": "You could import this (in which case the import is used over the ReportEntry in the same package).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405567330", "createdAt": "2020-04-08T14:27:27Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneer own class to handle {@link EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))\n+\t\t\t\t.execute();\n+\t}\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethodName))\n+\t\t\t\t.execute();\n+\t}\n+\n+\t/**\n+\t * Get all recorded events.\n+\t */\n+\tpublic Events all() {\n+\t\treturn executionResults.all();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for containers.\n+\t *\n+\t * <p>In this context, the word \"container\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isContainer()}.</p>\n+\t */\n+\tpublic Events containers() {\n+\t\treturn executionResults.containers();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for tests.\n+\t *\n+\t * <p>In this context, the word \"test\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isTest()}.</p>\n+\t */\n+\tpublic Events tests() {\n+\t\treturn executionResults.tests();\n+\t}\n+\n+\t/**\n+\t * Returns the number of all tests.\n+\t *\n+\t * @return Number of all tests\n+\t */\n+\tpublic long getTotalNumberOfTests() {\n+\t\treturn executionResults.tests().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of failed tests.\n+\t *\n+\t * @return Number of failed tests\n+\t */\n+\tpublic long getNumberOfFailedTests() {\n+\t\treturn executionResults.all().failed().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of successful tests.\n+\t *\n+\t * @return Number of successful tests\n+\t */\n+\tpublic long getNumberOfSucceededEvents() {\n+\t\treturn executionResults.all().succeeded().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of skipped tests.\n+\t *\n+\t * @return Number of skipped tests\n+\t */\n+\tpublic long getNumberOfSkippedEvents() {\n+\t\treturn executionResults.all().skipped().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of aborted tests.\n+\t *\n+\t * @return Number of aborted events results\n+\t */\n+\tpublic long getNumberOfAbortedEvents() {\n+\t\treturn executionResults.all().aborted().count();\n+\t}\n+\n+\t/**\n+\t * Returns the message of the first failed event.\n+\t * This can be used if you expect a test to fail with an exception and want to check the exception message.\n+\t *\n+\t * @return Message of the first failed event.\n+\t */\n+\tpublic String getFirstFailuresThrowableMessage() {\n+\t\treturn executionResults\n+\t\t\t\t.all()\n+\t\t\t\t.failed()\n+\t\t\t\t.stream()\n+\t\t\t\t.findFirst()\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getPayload(TestExecutionResult.class)\n+\t\t\t\t.flatMap(TestExecutionResult::getThrowable)\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getMessage();\n+\t}\n+\n+\t/**\n+\t * Returns the published report entries of all tests.\n+\t *\n+\t * @return published report entries of all tests\n+\t */\n+\tpublic List<Map<String, String>> getPublishedTestReportEntries() {\n+\t\treturn executionResults\n+\t\t\t\t.tests()\n+\t\t\t\t.reportingEntryPublished()\n+\t\t\t\t.stream()\n+\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc3ODk0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNzo1NVrOGCx4yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNzo1NVrOGCx4yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NzY4OQ==", "bodyText": "You could import this.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405567689", "createdAt": "2020-04-08T14:27:55Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneer own class to handle {@link EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))\n+\t\t\t\t.execute();\n+\t}\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethodName))\n+\t\t\t\t.execute();\n+\t}\n+\n+\t/**\n+\t * Get all recorded events.\n+\t */\n+\tpublic Events all() {\n+\t\treturn executionResults.all();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for containers.\n+\t *\n+\t * <p>In this context, the word \"container\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isContainer()}.</p>\n+\t */\n+\tpublic Events containers() {\n+\t\treturn executionResults.containers();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for tests.\n+\t *\n+\t * <p>In this context, the word \"test\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isTest()}.</p>\n+\t */\n+\tpublic Events tests() {\n+\t\treturn executionResults.tests();\n+\t}\n+\n+\t/**\n+\t * Returns the number of all tests.\n+\t *\n+\t * @return Number of all tests\n+\t */\n+\tpublic long getTotalNumberOfTests() {\n+\t\treturn executionResults.tests().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of failed tests.\n+\t *\n+\t * @return Number of failed tests\n+\t */\n+\tpublic long getNumberOfFailedTests() {\n+\t\treturn executionResults.all().failed().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of successful tests.\n+\t *\n+\t * @return Number of successful tests\n+\t */\n+\tpublic long getNumberOfSucceededEvents() {\n+\t\treturn executionResults.all().succeeded().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of skipped tests.\n+\t *\n+\t * @return Number of skipped tests\n+\t */\n+\tpublic long getNumberOfSkippedEvents() {\n+\t\treturn executionResults.all().skipped().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of aborted tests.\n+\t *\n+\t * @return Number of aborted events results\n+\t */\n+\tpublic long getNumberOfAbortedEvents() {\n+\t\treturn executionResults.all().aborted().count();\n+\t}\n+\n+\t/**\n+\t * Returns the message of the first failed event.\n+\t * This can be used if you expect a test to fail with an exception and want to check the exception message.\n+\t *\n+\t * @return Message of the first failed event.\n+\t */\n+\tpublic String getFirstFailuresThrowableMessage() {\n+\t\treturn executionResults\n+\t\t\t\t.all()\n+\t\t\t\t.failed()\n+\t\t\t\t.stream()\n+\t\t\t\t.findFirst()\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getPayload(TestExecutionResult.class)\n+\t\t\t\t.flatMap(TestExecutionResult::getThrowable)\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getMessage();\n+\t}\n+\n+\t/**\n+\t * Returns the published report entries of all tests.\n+\t *\n+\t * @return published report entries of all tests\n+\t */\n+\tpublic List<Map<String, String>> getPublishedTestReportEntries() {\n+\t\treturn executionResults\n+\t\t\t\t.tests()\n+\t\t\t\t.reportingEntryPublished()\n+\t\t\t\t.stream()\n+\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n+\t\t\t\t.filter(Optional::isPresent)\n+\t\t\t\t.map(Optional::get)\n+\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc4NTY2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyOToyMFrOGCx80A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowODo1OVrOGC69iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2ODcyMA==", "bodyText": "You could inline this (i.e.: return new Pioneer...).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405568720", "createdAt": "2020-04-08T14:29:20Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+public class PioneerTestKit {\n+\n+\t/**\n+\t * Returns the execution results of the given test class.\n+\t *\n+\t * @param testClass Name of the test class, the results should be returned\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass);\n+\n+\t\treturn results;\n+\t}\n+\n+\t/**\n+\t * Returns the execution results of the given method of a given test class.\n+\t *\n+\t * @param testClass Name of the test class\n+\t * @param testMethodName Name of the test method (of the given class)\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass, testMethodName);\n+\n+\t\treturn results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNjM2MQ==", "bodyText": "I know, but I normally don't do it, to have a better debug possibility and the costs for this variable are quite less in my opinion.\nAlso in this specific case (and the one below) the PioneerTestKit is a wrapper for future improving. We will then have to split it again.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405716361", "createdAt": "2020-04-08T18:08:59Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+public class PioneerTestKit {\n+\n+\t/**\n+\t * Returns the execution results of the given test class.\n+\t *\n+\t * @param testClass Name of the test class, the results should be returned\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass);\n+\n+\t\treturn results;\n+\t}\n+\n+\t/**\n+\t * Returns the execution results of the given method of a given test class.\n+\t *\n+\t * @param testClass Name of the test class\n+\t * @param testMethodName Name of the test method (of the given class)\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass, testMethodName);\n+\n+\t\treturn results;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2ODcyMA=="}, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc4OTQ4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMDoxNlrOGCx_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoxMjoxMFrOGC7FEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2OTM2MA==", "bodyText": "You could inline this (i.e.: return new Pioneer...).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405569360", "createdAt": "2020-04-08T14:30:16Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+public class PioneerTestKit {\n+\n+\t/**\n+\t * Returns the execution results of the given test class.\n+\t *\n+\t * @param testClass Name of the test class, the results should be returned\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass);\n+\n+\t\treturn results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxODI5MA==", "bodyText": "See above", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405718290", "createdAt": "2020-04-08T18:12:10Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+public class PioneerTestKit {\n+\n+\t/**\n+\t * Returns the execution results of the given test class.\n+\t *\n+\t * @param testClass Name of the test class, the results should be returned\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass);\n+\n+\t\treturn results;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2OTM2MA=="}, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDg4MTYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MTowMlrOGDZObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowODoyMVrOGDfeSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjIwNQ==", "bodyText": "Is this package-private on purpose?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406212205", "createdAt": "2020-04-09T13:41:02Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMjYxMA==", "bodyText": "Yes I always use package private instead of private to acces fields and methods from tests", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406302610", "createdAt": "2020-04-09T15:49:20Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjIwNQ=="}, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNDU3MA==", "bodyText": "But in this case - do you access it? I'm not seeing the tests for this class.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406314570", "createdAt": "2020-04-09T16:08:21Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjIwNQ=="}, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDg4NTkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MjowM1rOGDZRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1OToyMFrOGGw9Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw==", "bodyText": "Consider static importing DiscoverySelectors methods. Would that be more readable?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406212913", "createdAt": "2020-04-09T13:42:03Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMzkzNQ==", "bodyText": "Personally I like regular imports in such cases more as it's clear that this messages does not belong to the class. But if the majority wants to use static imports I can switch. Let's see what @nicolaiparlog likes to see.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406303935", "createdAt": "2020-04-09T15:51:28Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw=="}, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MDgxMw==", "bodyText": "I like static imports in general, but I prefer them in situations where a somewhat universal API is used that is frequently seen. DiscoverySelectors::selectClass doesn't quite qualify, but I'm still ok, either way.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r408350813", "createdAt": "2020-04-14T18:34:09Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw=="}, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0Njc0Mg==", "bodyText": "I would like to keep them. So I resolve this conversation.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r409746742", "createdAt": "2020-04-16T17:59:20Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw=="}, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDg4Njg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MjoxNVrOGDZRyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MjoxNVrOGDZRyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMzA2NQ==", "bodyText": "Consider a static import.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406213065", "createdAt": "2020-04-09T13:42:15Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))\n+\t\t\t\t.execute();\n+\t}\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethodName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4226, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}