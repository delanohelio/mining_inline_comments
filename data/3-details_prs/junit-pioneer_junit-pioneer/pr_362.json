{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTc5MzI1", "number": 362, "title": "CartesianProductTest \u00d7 RangeSources", "bodyText": "Closes #354\n\nPR checklist\nThe following checklist shall help the PR's author, the reviewers and maintainers to ensure the quality of this project.\nIt is based on our contributors guidelines, especially the \"writing code\" section.\nIt shall help to check for completion of the listed points.\nIf a point does not apply to the given PR's changes, the corresponding entry can be simply marked as done.\nDocumentation (general)\n\n There is documentation (Javadoc and site documentation; added or updated)\n There is implementation information to describe why a non-obvious source code / solution got implemented\n Site documentation has its own .adoc file in the docs folder, e.g. docs/report-entries.adoc\n Only one sentence per line (especially in .adoc files)\n Javadoc uses formal style, while sites documentation may use informal style (see #265)\n\nDocumentation (new extension)\n\n The docs/docs-nav.yml navigation has an entry for the new extension\n The package-info.java contains information about the new extension\n\nCode\n\n Code adheres to code style, naming conventions etc.\n Successful tests cover all changes\n There are checks which validate correct / false usage / configuration of a functionality and there are tests to verify those checks (see #164)\n Tests use AssertJ or our own PioneerAssert (which are based on AssertJ)\n\nContributing\n\n A prepared commit message exists\n The list of contributions inside README.md mentions the new contribution (real name optional)\n\n\nI hereby agree to the terms of the JUnit Pioneer Contributor License Agreement.", "createdAt": "2020-10-19T18:00:31Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362", "merged": true, "mergeCommit": {"oid": "9cc6d7c13b2548eb077a2c3cbc3d53ccab3102bc"}, "closed": true, "closedAt": "2021-01-12T19:39:46Z", "author": {"login": "Michael1993"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUIBzkAH2gAyNTA2MTc5MzI1OjdkMzA3NDFhMTgwOWRhOWQ5NjdlZGFkZWMxY2QxYmY3OGU0ZmU4YWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtK3EvAH2gAyNTA2MTc5MzI1OjNjNDMwNmFiMjcxYzMyMjU2NTQ3YzY3ZGEyOWNjOTFlZDA0YmMyMGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7d30741a1809da9d967edadec1cd1bf78e4fe8ad", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/7d30741a1809da9d967edadec1cd1bf78e4fe8ad", "committedDate": "2020-10-19T17:56:56Z", "message": "Made RangeSources repeatable, CartesianProductTestExtension now works with Consumer<? extends Annotation> argument providers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccd15e285b0cb8e6a8e727db311de83012097bcf", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ccd15e285b0cb8e6a8e727db311de83012097bcf", "committedDate": "2020-10-19T18:27:04Z", "message": "Add comments, rename method, clarify behaviour"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c03ccbde8dcf1a75cc347c2946d2caf93024e572", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c03ccbde8dcf1a75cc347c2946d2caf93024e572", "committedDate": "2020-10-19T18:37:10Z", "message": "Fix code smells."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fef46445f7c1e45070611d82572f4878cee9168", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1fef46445f7c1e45070611d82572f4878cee9168", "committedDate": "2020-10-19T21:00:53Z", "message": "Add some documentation and test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64f78996f0e715ab4000069dd14a7d5cb80c92d7", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/64f78996f0e715ab4000069dd14a7d5cb80c92d7", "committedDate": "2020-10-19T21:03:43Z", "message": "Spotless, why hast thou forsaken me?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53e492be6b339198a3b5ac3cf01a92cc2d68904f", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/53e492be6b339198a3b5ac3cf01a92cc2d68904f", "committedDate": "2020-10-19T22:47:56Z", "message": "While I nodded, nearly napping - did some coding, refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "423f2dccd3a586ccec74d0c219dab9925f318cc2", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/423f2dccd3a586ccec74d0c219dab9925f318cc2", "committedDate": "2020-10-24T12:30:37Z", "message": "Add more tests about range sources\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "340be38b2c76285e7ffe9480fca4f80787e35826", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/340be38b2c76285e7ffe9480fca4f80787e35826", "committedDate": "2020-10-24T12:31:31Z", "message": "Oops, almost forgot spotless.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d1ba3275eb43dbdf9d48141b7acd159a2d6a39", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b8d1ba3275eb43dbdf9d48141b7acd159a2d6a39", "committedDate": "2020-10-24T12:48:55Z", "message": "Expand documentation\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d0ef6d0e6d307246a54747055866f12973d9971c", "committedDate": "2020-10-24T12:49:32Z", "message": "Fix checkstyle error\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzMyMzA1", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#pullrequestreview-516332305", "createdAt": "2020-10-25T07:45:04Z", "commit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzo0NTowNVrOHn3LSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzo0OTozOFrOHn3M7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2MDUyMw==", "bodyText": "First line has an upper T the other two a lower one.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r511560523", "createdAt": "2020-10-25T07:45:05Z", "author": {"login": "Bukama"}, "path": "docs/cartesian-product.adoc", "diffHunk": "@@ -25,7 +25,7 @@ The extension takes the test data parameter values and runs the test for every p\n You can supply test parameters to `@CartesianProductTest` in multiple ways.\n \n  - The annotation can have a `String[]` value (see <<Supplying CartesianProductTest with a `String[]`>>)\n- - the test method can be annotated with `@CartesianValueSource` (see <<Annotating your test method with @CartesianValueSource>>)\n+ - the test method can be annotated with `@CartesianValueSource` or range source annotations (see <<Annotating your test method>>)\n  - the test class can have a static factory method providing the arguments (see <<Writing a static factory method for the parameters>>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2MDgxNg==", "bodyText": "A bit below there is link to ValueSources of JUnit (can't comment that unchanged line), but the link only opens the user guide but not the anker of that sub topic", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r511560816", "createdAt": "2020-10-25T07:48:11Z", "author": {"login": "Bukama"}, "path": "docs/cartesian-product.adoc", "diffHunk": "@@ -78,7 +78,7 @@ To demonstrate with a table:\n | 8th test  | \"1\"            | \"1\"            | \"1\"\n |===\n \n-== Annotating your test method with @CartesianValueSource\n+== Annotating your test method\n \n If you don't only supply string values to your test method like in the example above, you can annotate your method with `@CartesianValueSource`.\n `@CartesianValueSource` is used to define the possible inputs of a single test parameter - as annotations are listed top-to-bottom, they provide parameter values left-to-right.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2MDk0Mw==", "bodyText": "Note: We have to check this link (and the one below) after site deployment, as of now in the PR it points to https://github.com/junit-pioneer/junit-pioneer/blob/d0ef6d0e6d307246a54747055866f12973d9971c/docs/range-sources.adoc but I know that it some kind of relative link.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r511560943", "createdAt": "2020-10-25T07:49:38Z", "author": {"login": "Bukama"}, "path": "docs/cartesian-product.adoc", "diffHunk": "@@ -113,6 +113,38 @@ To demonstrate with a table:\n | 6th test  | 4                 | \"B\"\n |===\n \n+Alternatively, you can annotate your test method with link:range-sources.adoc[range source annotations].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3OTQxODcx", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#pullrequestreview-537941871", "createdAt": "2020-11-24T21:17:32Z", "commit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMToxNzozMlrOH5VhZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo1NDozOFrOH5W5Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzQ5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is not like `@ParameterizedTest` where you have to define all inputs in a single `@ArgumentsSource`.\n          \n          \n            \n            This is _not_ like `@ParameterizedTest`, where you have to define all inputs in a single `@ArgumentsSource`.\n          \n      \n    \n    \n  \n\n\ud83d\ude01", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529883493", "createdAt": "2020-11-24T21:17:32Z", "author": {"login": "nipafx"}, "path": "docs/cartesian-product.adoc", "diffHunk": "@@ -113,6 +113,38 @@ To demonstrate with a table:\n | 6th test  | 4                 | \"B\"\n |===\n \n+Alternatively, you can annotate your test method with link:range-sources.adoc[range source annotations].\n+For _this purpose only_, range sources are repeatable.\n+When you annotate your `@CartesianProductTest` with a range source, you specify the inputs to a single test parameter.\n+This is not like `@ParameterizedTest` where you have to define all inputs in a single `@ArgumentsSource`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4NDE5Mw==", "bodyText": "Asciidoc source blocks and tab indentation, please. :)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529884193", "createdAt": "2020-11-24T21:18:56Z", "author": {"login": "nipafx"}, "path": "docs/cartesian-product.adoc", "diffHunk": "@@ -113,6 +113,38 @@ To demonstrate with a table:\n | 6th test  | 4                 | \"B\"\n |===\n \n+Alternatively, you can annotate your test method with link:range-sources.adoc[range source annotations].\n+For _this purpose only_, range sources are repeatable.\n+When you annotate your `@CartesianProductTest` with a range source, you specify the inputs to a single test parameter.\n+This is not like `@ParameterizedTest` where you have to define all inputs in a single `@ArgumentsSource`.\n+\n+```java\n+@CartesianProductTest\n+@ShortRangeSource(from = 1, to = 3, step = 1)\n+@LongRangeSource(from = 0L, to = 2L, step = 1, closed = true)\n+void testShortAndLong(short s, long l) {\n+    // passing test code\n+}\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4OTQ3Mg==", "bodyText": "As these annotations are now repeatable and can be used with Cartesian products, I think they need some more changes:\n\nexplain their dual use in their Javadoc (including a link to Cartesian product docu)\nexplain where they can be repeated and where they can't", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529889472", "createdAt": "2020-11-24T21:28:47Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/params/ByteRangeSource.java", "diffHunk": "@@ -36,6 +37,7 @@\n @Documented\n @ArgumentsSource(RangeSourceArgumentsProvider.class)\n @RangeClass(ByteRange.class)\n+@Repeatable(ByteRangeSource.ByteRangeSources.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4OTk3NA==", "bodyText": "This message may be more helpful if we explain why, even though the annotation is repeatable, it can only occur once on @ParameterizedTests.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529889974", "createdAt": "2020-11-24T21:29:43Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceArgumentsProvider.java", "diffHunk": "@@ -63,17 +78,16 @@\n \t\t\tthrow new IllegalArgumentException(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MTMyNQ==", "bodyText": "This looks great!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529891325", "createdAt": "2020-11-24T21:32:34Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/jupiter/CartesianProductTestExtensionTests.java", "diffHunk": "@@ -590,4 +671,41 @@ void distinctInputsFactory(TimeUnit unit, String string) {\n         //@formatter:on\n \t}\n \n+\tstatic class ArgumentsSourceTestCases {\n+\n+\t\t@CartesianProductTest\n+\t\t@IntRangeSource(from = 1, to = 4, closed = true)\n+\t\t@IntRangeSource(from = 2, to = 4, step = 2, closed = true)\n+\t\t@ReportEntry(\"{0},{1}\")\n+\t\tvoid basicIntRangeSource(int i, int j) {\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MTU1OA==", "bodyText": "If this works with @CartesianValueSource, there should be a test for that.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529891558", "createdAt": "2020-11-24T21:33:02Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/jupiter/CartesianProductTestExtensionTests.java", "diffHunk": "@@ -590,4 +671,41 @@ void distinctInputsFactory(TimeUnit unit, String string) {\n         //@formatter:on\n \t}\n \n+\tstatic class ArgumentsSourceTestCases {\n+\n+\t\t@CartesianProductTest\n+\t\t@IntRangeSource(from = 1, to = 4, closed = true)\n+\t\t@IntRangeSource(from = 2, to = 4, step = 2, closed = true)\n+\t\t@ReportEntry(\"{0},{1}\")\n+\t\tvoid basicIntRangeSource(int i, int j) {\n+\t\t}\n+\n+\t\t@CartesianProductTest\n+\t\t@IntRangeSource(from = 0, to = 4)\n+\t\t@ValueSource(ints = { 2, 4 })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDAzOA==", "bodyText": "Without looking into this, I'm a but surprised that there's a combination of annotation search parameters that we don't already cover. Can you help me understand how this is different from the other methods?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529894038", "createdAt": "2020-11-24T21:38:15Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerAnnotationUtils.java", "diffHunk": "@@ -117,6 +121,39 @@ public static boolean isAnyRepeatableAnnotationPresent(ExtensionContext context,\n \t\treturn findAnnotations(context, annotationType, true, true);\n \t}\n \n+\t/**\n+\t * Returns the annotations <em>present</em> on the {@code AnnotatedElement}\n+\t * that are annotated with the specified annotation. The meta-annotation can be <em>present</em>,\n+\t * <em>indirectly present</em>, <em>meta-present</em>, or <em>enclosing present</em>.\n+\t */\n+\tpublic static <A extends Annotation> List<Annotation> findAnnotatedAnnotations(AnnotatedElement element,\n+\t\t\tClass<A> annotation) {\n+\t\treturn Arrays\n+\t\t\t\t.stream(element.getDeclaredAnnotations())\n+\t\t\t\t// flatten @Repeatable aggregator annotations\n+\t\t\t\t.flatMap(PioneerAnnotationUtils::flatten)\n+\t\t\t\t.filter(a -> !(findOnElement(a.annotationType(), annotation, true).isEmpty()))\n+\t\t\t\t.collect(Collectors.toList());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDg1Mw==", "bodyText": "Did you check newer Eclipse versions work with this?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529894853", "createdAt": "2020-11-24T21:39:47Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/CartesianValueArgumentsProvider.java", "diffHunk": "@@ -13,28 +13,29 @@\n import static java.util.stream.Collectors.toList;\n \n import java.lang.reflect.Array;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.function.Consumer;\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n import org.junit.platform.commons.PreconditionViolationException;\n \n /**\n  * This is basically a copy of ValueSourceArgumentsProvider,\n  * except it does NOT support {@code @ParameterizedTest}.\n  */\n-class CartesianValueArgumentsProvider implements Consumer<CartesianValueSource> {\n+class CartesianValueArgumentsProvider implements Consumer<CartesianValueSource>, ArgumentsProvider {\n \n \tprivate Object[] arguments;\n \n \t@Override\n \tpublic void accept(CartesianValueSource source) {\n \t\t// @formatter:off\n \t\tList<Object> arrays =\n-\t\t\t\t// Declaration of <Object> is necessary due to a bug in Eclipse Photon.\n-\t\t\t\tStream.<Object> of(\n+\t\t\t\tStream.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NzYxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tcatch (Exception e) {\n          \n          \n            \n            \t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", e);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tcatch (Exception ex) {\n          \n          \n            \n            \t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", ex);\n          \n          \n            \n            \t\t}", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529897613", "createdAt": "2020-11-24T21:44:53Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/CartesianProductTestExtension.java", "diffHunk": "@@ -94,17 +102,50 @@ private static void ensureNoInputConflicts(CartesianProductTest annotation,\n \t\treturn sets;\n \t}\n \n-\tprivate List<List<?>> getSetsFromRepeatableAnnotation(List<CartesianValueSource> valueSources) {\n+\tprivate List<List<?>> getSetsFromArgumentsSources(List<? extends Annotation> argumentsSources,\n+\t\t\tExtensionContext context) {\n \t\tList<List<?>> sets = new ArrayList<>();\n-\t\tfor (CartesianValueSource source : valueSources) {\n-\t\t\tCartesianValueArgumentsProvider provider = new CartesianValueArgumentsProvider();\n-\t\t\tprovider.accept(source);\n-\t\t\tList<Object> collect = provider.provideArguments().distinct().collect(toList());\n-\t\t\tsets.add(collect);\n+\t\tfor (Annotation source : argumentsSources) {\n+\t\t\tsets.add(getSetFromAnnotation(context, source));\n \t\t}\n \t\treturn sets;\n \t}\n \n+\tprivate List<Object> getSetFromAnnotation(ExtensionContext context, Annotation source) {\n+\t\ttry {\n+\t\t\tArgumentsProvider provider = initializeArgumentsProvider(source);\n+\t\t\treturn provideArguments(context, source, provider);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", e);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5OTk0Nw==", "bodyText": "Is Annotation source a ...Rangesource? If so, can you rename the variable(s) accordingly?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529899947", "createdAt": "2020-11-24T21:49:05Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/CartesianProductTestExtension.java", "diffHunk": "@@ -94,17 +102,50 @@ private static void ensureNoInputConflicts(CartesianProductTest annotation,\n \t\treturn sets;\n \t}\n \n-\tprivate List<List<?>> getSetsFromRepeatableAnnotation(List<CartesianValueSource> valueSources) {\n+\tprivate List<List<?>> getSetsFromArgumentsSources(List<? extends Annotation> argumentsSources,\n+\t\t\tExtensionContext context) {\n \t\tList<List<?>> sets = new ArrayList<>();\n-\t\tfor (CartesianValueSource source : valueSources) {\n-\t\t\tCartesianValueArgumentsProvider provider = new CartesianValueArgumentsProvider();\n-\t\t\tprovider.accept(source);\n-\t\t\tList<Object> collect = provider.provideArguments().distinct().collect(toList());\n-\t\t\tsets.add(collect);\n+\t\tfor (Annotation source : argumentsSources) {\n+\t\t\tsets.add(getSetFromAnnotation(context, source));\n \t\t}\n \t\treturn sets;\n \t}\n \n+\tprivate List<Object> getSetFromAnnotation(ExtensionContext context, Annotation source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTI0MA==", "bodyText": "This should be...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (Arrays.asList(provider.getClass().getInterfaces()).contains(Consumer.class)) {\n          \n          \n            \n            \t\tif (provider instanceof Consumer) {\n          \n      \n    \n    \n  \n\n... but, it's not? (One test fails after the change.)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529905240", "createdAt": "2020-11-24T21:54:00Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/CartesianProductTestExtension.java", "diffHunk": "@@ -94,17 +102,50 @@ private static void ensureNoInputConflicts(CartesianProductTest annotation,\n \t\treturn sets;\n \t}\n \n-\tprivate List<List<?>> getSetsFromRepeatableAnnotation(List<CartesianValueSource> valueSources) {\n+\tprivate List<List<?>> getSetsFromArgumentsSources(List<? extends Annotation> argumentsSources,\n+\t\t\tExtensionContext context) {\n \t\tList<List<?>> sets = new ArrayList<>();\n-\t\tfor (CartesianValueSource source : valueSources) {\n-\t\t\tCartesianValueArgumentsProvider provider = new CartesianValueArgumentsProvider();\n-\t\t\tprovider.accept(source);\n-\t\t\tList<Object> collect = provider.provideArguments().distinct().collect(toList());\n-\t\t\tsets.add(collect);\n+\t\tfor (Annotation source : argumentsSources) {\n+\t\t\tsets.add(getSetFromAnnotation(context, source));\n \t\t}\n \t\treturn sets;\n \t}\n \n+\tprivate List<Object> getSetFromAnnotation(ExtensionContext context, Annotation source) {\n+\t\ttry {\n+\t\t\tArgumentsProvider provider = initializeArgumentsProvider(source);\n+\t\t\treturn provideArguments(context, source, provider);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", e);\n+\t\t}\n+\t}\n+\n+\tprivate ArgumentsProvider initializeArgumentsProvider(Annotation source) {\n+\t\tArgumentsSource providerAnnotation = AnnotationSupport\n+\t\t\t\t.findAnnotation(source.annotationType(), ArgumentsSource.class)\n+\t\t\t\t// never happens, we already know these annotations are annotated with @ArgumentsSource\n+\t\t\t\t.orElseThrow(() -> new PreconditionViolationException(format(\n+\t\t\t\t\t\"%s was not annotated with @ArgumentsSource but should have been.\", source.annotationType())));\n+\t\treturn ReflectionSupport.newInstance(providerAnnotation.value());\n+\t}\n+\n+\tprivate List<Object> provideArguments(ExtensionContext context, Annotation source, ArgumentsProvider provider)\n+\t\t\tthrows Exception {\n+\t\tif (Arrays.asList(provider.getClass().getInterfaces()).contains(Consumer.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTk4Mw==", "bodyText": "Note to self: Take a close look at this when you're more awake. :)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529905983", "createdAt": "2020-11-24T21:54:38Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/CartesianProductTestExtension.java", "diffHunk": "@@ -94,17 +102,50 @@ private static void ensureNoInputConflicts(CartesianProductTest annotation,\n \t\treturn sets;\n \t}\n \n-\tprivate List<List<?>> getSetsFromRepeatableAnnotation(List<CartesianValueSource> valueSources) {\n+\tprivate List<List<?>> getSetsFromArgumentsSources(List<? extends Annotation> argumentsSources,\n+\t\t\tExtensionContext context) {\n \t\tList<List<?>> sets = new ArrayList<>();\n-\t\tfor (CartesianValueSource source : valueSources) {\n-\t\t\tCartesianValueArgumentsProvider provider = new CartesianValueArgumentsProvider();\n-\t\t\tprovider.accept(source);\n-\t\t\tList<Object> collect = provider.provideArguments().distinct().collect(toList());\n-\t\t\tsets.add(collect);\n+\t\tfor (Annotation source : argumentsSources) {\n+\t\t\tsets.add(getSetFromAnnotation(context, source));\n \t\t}\n \t\treturn sets;\n \t}\n \n+\tprivate List<Object> getSetFromAnnotation(ExtensionContext context, Annotation source) {\n+\t\ttry {\n+\t\t\tArgumentsProvider provider = initializeArgumentsProvider(source);\n+\t\t\treturn provideArguments(context, source, provider);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", e);\n+\t\t}\n+\t}\n+\n+\tprivate ArgumentsProvider initializeArgumentsProvider(Annotation source) {\n+\t\tArgumentsSource providerAnnotation = AnnotationSupport\n+\t\t\t\t.findAnnotation(source.annotationType(), ArgumentsSource.class)\n+\t\t\t\t// never happens, we already know these annotations are annotated with @ArgumentsSource\n+\t\t\t\t.orElseThrow(() -> new PreconditionViolationException(format(\n+\t\t\t\t\t\"%s was not annotated with @ArgumentsSource but should have been.\", source.annotationType())));\n+\t\treturn ReflectionSupport.newInstance(providerAnnotation.value());\n+\t}\n+\n+\tprivate List<Object> provideArguments(ExtensionContext context, Annotation source, ArgumentsProvider provider)\n+\t\t\tthrows Exception {\n+\t\tif (Arrays.asList(provider.getClass().getInterfaces()).contains(Consumer.class)) {\n+\t\t\t((Consumer<Annotation>) provider).accept(source);\n+\t\t\treturn provider\n+\t\t\t\t\t.provideArguments(context)\n+\t\t\t\t\t.map(Arguments::get)\n+\t\t\t\t\t.flatMap(Arrays::stream)\n+\t\t\t\t\t.distinct()\n+\t\t\t\t\t.collect(toList());\n+\t\t} else {\n+\t\t\tthrow new PreconditionViolationException(\n+\t\t\t\tformat(\"%s does not implement the Consumer<T> interface.\", provider.getClass()));\n+\t\t}\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff44c3044dab3311c7ef56198276dd9a59daf8da", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ff44c3044dab3311c7ef56198276dd9a59daf8da", "committedDate": "2020-11-30T18:19:35Z", "message": "Update based on feedback - might need to be polished\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2263f77628924c66a1269e093e5239d4acda21c0", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2263f77628924c66a1269e093e5239d4acda21c0", "committedDate": "2020-11-30T18:26:05Z", "message": "Commit gradlew because wtf\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b59b74f95467493fccc7743f462b17c12f2c8fa5", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b59b74f95467493fccc7743f462b17c12f2c8fa5", "committedDate": "2020-11-30T18:31:05Z", "message": "Checkstyle import fix\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa61f9bf7b08ae114c6e9241f2b7d6728b024ed", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3aa61f9bf7b08ae114c6e9241f2b7d6728b024ed", "committedDate": "2020-11-30T18:33:30Z", "message": "Merge branch 'master' into issue/354-cartesian-range-sources\n\n# Conflicts:\n#\tdocs/cartesian-product.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f99dfda58f1c464aa10c813db6890ad749037a4f", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f99dfda58f1c464aa10c813db6890ad749037a4f", "committedDate": "2020-11-30T18:36:06Z", "message": "Finish merge and update `since`\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f70f6886a43fa05390d221e5ad449de3766ec7f9", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f70f6886a43fa05390d221e5ad449de3766ec7f9", "committedDate": "2020-11-30T18:42:06Z", "message": "spotless and iterable tests\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44daf751369eac90fff57276f6ff9c1d70e89201", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/44daf751369eac90fff57276f6ff9c1d70e89201", "committedDate": "2020-11-30T19:10:31Z", "message": "Update documentation, javadoc and exception message.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzE1NDQ0", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#pullrequestreview-545315444", "createdAt": "2020-12-04T21:42:42Z", "commit": {"oid": "44daf751369eac90fff57276f6ff9c1d70e89201"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo0Mjo0MlrOH_jCiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowMDoyNVrOH_jyrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NjQyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Just like with `@CartesianValueSource` annotations get assigned to parameters in order.\n          \n          \n            \n            Just like with `@CartesianValueSource`, annotations get assigned to parameters in order.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r536396424", "createdAt": "2020-12-04T21:42:42Z", "author": {"login": "scordio"}, "path": "docs/cartesian-product.adoc", "diffHunk": "@@ -119,6 +119,53 @@ To demonstrate with a table:\n | 6th test  | 4                 | \"B\"\n |===\n \n+Alternatively, you can annotate your test method with link:range-sources.adoc[range source annotations].\n+For _this purpose only_, range sources are repeatable.\n+When you annotate your `@CartesianProductTest` with a range source, you specify the inputs to a single test parameter.\n+This is _not_ like `@ParameterizedTest` where you have to define all inputs in a single `@ArgumentsSource`.\n+\n+[source,java]\n+----\n+@CartesianProductTest\n+@ShortRangeSource(from = 1, to = 3, step = 1)\n+@LongRangeSource(from = 0L, to = 2L, step = 1, closed = true)\n+void testShortAndLong(short s, long l) {\n+\t// passing test code\n+}\n+----\n+\n+Just like with `@CartesianValueSource` annotations get assigned to parameters in order.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44daf751369eac90fff57276f6ff9c1d70e89201"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwODc0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// .addAll(letters).add(\"Alpha\", \"Omega\")\n          \n          \n            \n            \t\t// .addAll(letters)\n          \n          \n            \n            \t\t.add(\"Alpha\", \"Omega\")", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r536408748", "createdAt": "2020-12-04T22:00:25Z", "author": {"login": "scordio"}, "path": "docs/cartesian-product.adoc", "diffHunk": "@@ -138,8 +185,7 @@ static CartesianProductTest.Sets nFold() {\n \treturn new CartesianProductTest.Sets()\n \t\t// e.g. with a `List<String> letters`,\n \t\t// you can use `addAll`:\n-\t\t// .addAll(letters)\n-\t\t.add(\"Alpha\", \"Omega\")\n+\t\t// .addAll(letters).add(\"Alpha\", \"Omega\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44daf751369eac90fff57276f6ff9c1d70e89201"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b495e41ad4982eefb14aa049900b5370ac14a3da", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b495e41ad4982eefb14aa049900b5370ac14a3da", "committedDate": "2020-12-07T19:23:45Z", "message": "Update JavaDoc for CartesianProductTest$Sets\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8bf2ed945a70a79c4b2b0ec48e7457b8a8c074d", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a8bf2ed945a70a79c4b2b0ec48e7457b8a8c074d", "committedDate": "2020-12-07T19:24:00Z", "message": "Merge branch 'master' into issue/354-cartesian-range-sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e5e6a07038312be26ddc15308109b3156c722b", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/45e5e6a07038312be26ddc15308109b3156c722b", "committedDate": "2020-12-07T19:37:38Z", "message": "Add contribution to README.md\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f43c7cadce1c9b65277e3cc6cf8aa9b9149c253", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8f43c7cadce1c9b65277e3cc6cf8aa9b9149c253", "committedDate": "2020-12-07T19:41:28Z", "message": "Update small mistakes in documentation\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af6804fa9384a786fd1ecab93235ce946687285", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4af6804fa9384a786fd1ecab93235ce946687285", "committedDate": "2020-12-07T19:45:56Z", "message": "Close all tags in javadoc\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "018ee0cb06802e19652e50f4914f3b7cd0907727", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/018ee0cb06802e19652e50f4914f3b7cd0907727", "committedDate": "2020-12-07T19:57:20Z", "message": "Remove dubious tags from javadoc\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981b5da732cb29627dc5d6bb7aff96cec99c0d68", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/981b5da732cb29627dc5d6bb7aff96cec99c0d68", "committedDate": "2020-12-22T20:13:35Z", "message": "Small edits and changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzI1OTcx", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#pullrequestreview-557325971", "createdAt": "2020-12-22T19:44:34Z", "commit": {"oid": "018ee0cb06802e19652e50f4914f3b7cd0907727"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOTo0NDozNVrOIKHLzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoxMjoxNlrOIKH6PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NDM4MA==", "bodyText": "Got it now. \ud83d\udc4d\ud83c\udffe", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r547474380", "createdAt": "2020-12-22T19:44:35Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerAnnotationUtils.java", "diffHunk": "@@ -117,6 +121,39 @@ public static boolean isAnyRepeatableAnnotationPresent(ExtensionContext context,\n \t\treturn findAnnotations(context, annotationType, true, true);\n \t}\n \n+\t/**\n+\t * Returns the annotations <em>present</em> on the {@code AnnotatedElement}\n+\t * that are annotated with the specified annotation. The meta-annotation can be <em>present</em>,\n+\t * <em>indirectly present</em>, <em>meta-present</em>, or <em>enclosing present</em>.\n+\t */\n+\tpublic static <A extends Annotation> List<Annotation> findAnnotatedAnnotations(AnnotatedElement element,\n+\t\t\tClass<A> annotation) {\n+\t\treturn Arrays\n+\t\t\t\t.stream(element.getDeclaredAnnotations())\n+\t\t\t\t// flatten @Repeatable aggregator annotations\n+\t\t\t\t.flatMap(PioneerAnnotationUtils::flatten)\n+\t\t\t\t.filter(a -> !(findOnElement(a.annotationType(), annotation, true).isEmpty()))\n+\t\t\t\t.collect(Collectors.toList());\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDAzOA=="}, "originalCommit": {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4MjcxNw==", "bodyText": "Will this find meta-annotations? I doubt it would. Does this make sense?\n@IntRangeSource(from = 0, to = 10)\npublic @interface FromZeroToTen { }\n\n@CartesianProductTest\n@FromZeroToTen\nvoid test(int i) {\n}\nIf it does, we need to make sure that we find such annotations. Please use/extend org.junitpioneer.jupiter.params.PioneerAnnotationUtils if it's suitable - as painful as that may be.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r547482717", "createdAt": "2020-12-22T20:03:39Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceArgumentsProvider.java", "diffHunk": "@@ -41,20 +44,34 @@\n  * @see DoubleRangeSource\n  * @see FloatRangeSource\n  */\n-class RangeSourceArgumentsProvider implements ArgumentsProvider {\n+class RangeSourceArgumentsProvider implements ArgumentsProvider, CartesianAnnotationConsumer<Annotation> {\n+\n+\tprivate Annotation argumentsSource;\n \n \t@Override\n \tpublic Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {\n \t\t// since it's a method annotation, the element will always be present\n-\t\tList<Annotation> argumentsSources = context\n-\t\t\t\t.getElement()\n-\t\t\t\t.map(method -> Arrays\n-\t\t\t\t\t\t.stream(method.getAnnotations())\n-\t\t\t\t\t\t.filter(annotations -> Arrays\n-\t\t\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n-\t\t\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))\n-\t\t\t\t\t\t.collect(Collectors.toList()))\n-\t\t\t\t.orElseThrow(IllegalStateException::new);\n+\t\tif (argumentsSource == null)\n+\t\t\tinitArgumentsSource(context);\n+\t\tClass<? extends Annotation> argumentsSourceClass = argumentsSource.annotationType();\n+\t\tClass<? extends Range> rangeClass = argumentsSourceClass.getAnnotation(RangeClass.class).value();\n+\n+\t\tRange<?> range = (Range<?>) rangeClass.getConstructors()[0].newInstance(argumentsSource);\n+\t\trange.validate();\n+\t\treturn asStream(range).map(Arguments::of);\n+\t}\n+\n+\tprivate void initArgumentsSource(ExtensionContext context) {\n+\t\t// since it's a method annotation, the element will always be present\n+\t\tAnnotatedElement element = context.getElement().orElseThrow(IllegalStateException::new);\n+\n+\t\tverifyNoContainerAnnotationIsPresent(element);\n+\t\tList<Annotation> argumentsSources = Stream\n+\t\t\t\t.of(element.getAnnotations())\n+\t\t\t\t.filter(annotations -> Arrays\n+\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n+\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018ee0cb06802e19652e50f4914f3b7cd0907727"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NTMyNg==", "bodyText": "I just saw this code in PioneerAnnotationUtils, no need to repeat it here. Just expose there and add (reflectively) to the params variant.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r547485326", "createdAt": "2020-12-22T20:09:50Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceArgumentsProvider.java", "diffHunk": "@@ -63,17 +80,36 @@\n \t\t\tthrow new IllegalArgumentException(message);\n \t\t}\n \n-\t\tAnnotation argumentsSource = argumentsSources.get(0);\n-\t\tClass<? extends Annotation> argumentsSourceClass = argumentsSource.annotationType();\n-\t\tClass<? extends Range> rangeClass = argumentsSourceClass.getAnnotation(RangeClass.class).value();\n+\t\targumentsSource = argumentsSources.get(0);\n+\t}\n \n-\t\tRange<?> range = (Range) rangeClass.getConstructors()[0].newInstance(argumentsSource);\n-\t\trange.validate();\n-\t\treturn asStream(range).map(Arguments::of);\n+\tprivate void verifyNoContainerAnnotationIsPresent(AnnotatedElement element) {\n+\t\tif (Stream.of(element.getAnnotations()).anyMatch(this::isContainerAnnotation))\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\"Range source annotation should not be repeated for @ParameterizedTest. @ParameterizedTest should have exactly one argument source.\");\n+\t}\n+\n+\tprivate boolean isContainerAnnotation(Annotation annotation) {\n+\t\t// See https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.6.3\n+\t\treturn Stream\n+\t\t\t\t.of(annotation.annotationType().getMethods())\n+\t\t\t\t.anyMatch(method -> method.getName().equals(\"value\") && method.getReturnType().isArray()\n+\t\t\t\t\t\t&& method.getReturnType().getComponentType().isAnnotation()\n+\t\t\t\t\t\t&& declaresContainer(method.getReturnType().getComponentType(), annotation));\n \t}\n \n-\tprivate Stream<?> asStream(Range r) {\n+\tprivate static boolean declaresContainer(Class<?> componentType, Annotation annotation) {\n+\t\tRepeatable repeatable = componentType.getAnnotation(Repeatable.class);\n+\t\treturn repeatable != null && repeatable.value().equals(annotation.annotationType());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018ee0cb06802e19652e50f4914f3b7cd0907727"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NjI2OA==", "bodyText": "Please document how to create ArgumentsProvider (as promised in CartesianAnnotationConsumer).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r547486268", "createdAt": "2020-12-22T20:12:16Z", "author": {"login": "nipafx"}, "path": "docs/cartesian-product.adoc", "diffHunk": "@@ -119,6 +119,53 @@ To demonstrate with a table:\n | 6th test  | 4                 | \"B\"\n |===\n \n+Alternatively, you can annotate your test method with link:range-sources.adoc[range source annotations].\n+For _this purpose only_, range sources are repeatable.\n+When you annotate your `@CartesianProductTest` with a range source, you specify the inputs to a single test parameter.\n+This is _not_ like `@ParameterizedTest` where you have to define all inputs in a single `@ArgumentsSource`.\n+\n+[source,java]\n+----\n+@CartesianProductTest\n+@ShortRangeSource(from = 1, to = 3, step = 1)\n+@LongRangeSource(from = 0L, to = 2L, step = 1, closed = true)\n+void testShortAndLong(short s, long l) {\n+\t// passing test code\n+}\n+----\n+\n+Just like with `@CartesianValueSource`, annotations get assigned to parameters in order.\n+The first annotation from the top gets assigned to the first parameter, the second annotation to the second parameter and so on.\n+\n+The test `testShortAndLong` is executed exactly six times.\n+The first parameter can have any of the two values `1`, `2`.\n+The second parameter can have any of the three values `0L`, `1L` or `2L`.\n+`@CartesianProductTest` tests for all input combinations, that's `2 \u00d7 3`, so six tests in total.\n+\n+To demonstrate with a table:\n+|===\n+| # of test | value of `s` | value of `l`\n+| 1st test  | 1            | 0L\n+| 2nd test  | 1            | 1L\n+| 3rd test  | 1            | 2L\n+| 4th test  | 2            | 0L\n+| 5th test  | 2            | 1L\n+| 6th test  | 2            | 2L\n+|===\n+\n+For more information, please see the link:range-sources.adoc[separate documentation about range sources].\n+You can combine range sources with `@CartesianValueSource`, it works as you'd expect:\n+\n+[source, java]\n+----\n+@CartesianProductTest\n+@ShortRangeSource(from = 1, to = 3)\n+@CartesianValueSource(strings = { \"text one\", \"text two\" })\n+void mixAndMatchTest(short number, String text) {\n+\t// passing test code\n+}\n+----\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018ee0cb06802e19652e50f4914f3b7cd0907727"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NDQxNTgx", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#pullrequestreview-558441581", "createdAt": "2020-12-24T10:01:45Z", "commit": {"oid": "981b5da732cb29627dc5d6bb7aff96cec99c0d68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "414c397d4bc923918c7acae646c735d64e5cb01c", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/414c397d4bc923918c7acae646c735d64e5cb01c", "committedDate": "2020-12-24T11:07:11Z", "message": "Small changes\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af238692de0e72fe623093c18237cdf85e10d09c", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/af238692de0e72fe623093c18237cdf85e10d09c", "committedDate": "2020-12-24T11:07:16Z", "message": "Merge branch 'master' into issue/354-cartesian-range-sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af760d14fbc1eee5a3c829e8a79fea733f4d842e", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/af760d14fbc1eee5a3c829e8a79fea733f4d842e", "committedDate": "2020-12-24T11:33:40Z", "message": "More reflection. I don't like this approach.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4533a187d1d9f95c6afad5019ca4cf0301a10df1", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4533a187d1d9f95c6afad5019ca4cf0301a10df1", "committedDate": "2021-01-04T23:50:00Z", "message": "Update documentation with how to write arguments provider\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aff499d976a7cc5be109a9f798fe8128fb3dff5e", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/aff499d976a7cc5be109a9f798fe8128fb3dff5e", "committedDate": "2021-01-05T00:01:20Z", "message": "Merge branch 'master' into issue/354-cartesian-range-sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f7fd19402eabf89c0c0c5525d462c6d973ecd81", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6f7fd19402eabf89c0c0c5525d462c6d973ecd81", "committedDate": "2021-01-05T00:03:44Z", "message": "Spotless T^T\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ab6dae4818cc88413cfc25ff38e4360ab4d2a7d", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1ab6dae4818cc88413cfc25ff38e4360ab4d2a7d", "committedDate": "2021-01-05T00:14:17Z", "message": "...and now Sonar too T^T\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c4306ab271c32256547c67da29cc91ed04bc20d", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3c4306ab271c32256547c67da29cc91ed04bc20d", "committedDate": "2021-01-05T13:23:02Z", "message": "Update tests and annotation utils\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3681, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}