{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODA3OTYw", "number": 174, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTozOTowNlrODk00AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1NDo1NlrODr3Qqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQwNjA5OnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTozOTowNlrOFxXeeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0MDoyN1rOFyMepQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTE3Ng==", "bodyText": "Cool that we test on an additional OS now! \ud83d\udc4d", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387309176", "createdAt": "2020-03-03T21:39:06Z", "author": {"login": "nipafx"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NzU3Mw==", "bodyText": "I think they working on windows support too but it is not ready as you can see in this build Windows OpenJDK 11", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388177573", "createdAt": "2020-03-05T09:40:27Z", "author": {"login": "Hancho2009"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTE3Ng=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQwNzEyOnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTozOToyOFrOFxXfMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0MzozMFrOFyMloQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTM2MA==", "bodyText": "Why does this combination have to be excluded?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387309360", "createdAt": "2020-03-03T21:39:28Z", "author": {"login": "nipafx"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11\n   - openjdk8\n   - openjdk11\n \n+matrix:\n+  exclude:\n+    - os: osx\n+      jdk: openjdk8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3OTM2MQ==", "bodyText": "This combination is not supported by travis-ci. See here\n\n$ ~/bin/install-jdk.sh [...] --feature \"8\" [...]\nExpected feature release number in range of 9 to 15, but got: 8\n\nUnfortunately travis ci only supports OpenJDK 9 to 15 for osx.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388179361", "createdAt": "2020-03-05T09:43:30Z", "author": {"login": "Hancho2009"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11\n   - openjdk8\n   - openjdk11\n \n+matrix:\n+  exclude:\n+    - os: osx\n+      jdk: openjdk8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTM2MA=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQwODI5OnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTozOTo0N1rOFxXf6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDoyMjoyNlrOF3sl7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTU0NA==", "bodyText": "Why do we test on another JDK 11?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387309544", "createdAt": "2020-03-03T21:39:47Z", "author": {"login": "nipafx"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MjcxOQ==", "bodyText": "I thought I read that the Implementations can be different so I added this. oraclejdk8 is not supported for osx and linux (I think if a different distro is used than it is possible).\nin retrospect I may be confusing this with different platforms.\nSo I guess the implementations are probably the same and cause no harm if you want to remove it.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388182719", "createdAt": "2020-03-05T09:49:25Z", "author": {"login": "Hancho2009"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTU0NA=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0NjYwNg==", "bodyText": "OpenJDK 11 and Oracle JDK 11 are very similar and I'm willing to bet that they behave the same here, so let's remove this JDK to reduce build times.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r393946606", "createdAt": "2020-03-17T20:22:26Z", "author": {"login": "nipafx"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTU0NA=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQwOTc3OnYy", "diffSide": "RIGHT", "path": "build.gradle.kts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MDoxN1rOFxXg3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDo0MTo1NFrOF3tOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTc4OQ==", "bodyText": "What does this do? \ud83d\ude0a", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387309789", "createdAt": "2020-03-03T21:40:17Z", "author": {"login": "nipafx"}, "path": "build.gradle.kts", "diffHunk": "@@ -89,6 +89,9 @@ yamlValidator {\n tasks {\n \n     test {\n+        testLogging {\n+            setExceptionFormat(\"full\")\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NDE2Nw==", "bodyText": "The code did not work on linux (and osx I think) and a test failed but only the first line of the exception was shown and not the full stacktrace. You can see it here:\n\n> Task :test\n\norg.junitpioneer.jupiter.EnvironmentVariableExtensionTests > initializationError FAILED\n    java.lang.NullPointerException at EnvironmentVariableExtensionTests.java:34\n\n123 tests completed, 1 failed, 1 skipped\n\n\nWith the change you can see it here:\n\n> Task :test\n\norg.junitpioneer.jupiter.EnvironmentVariableExtensionTests > initializationError FAILED\n    java.lang.NullPointerException\n        at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:57)\n        at sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl.get(UnsafeQualifiedObjectFieldAccessorImpl.java:38)\n        at java.lang.reflect.Field.get(Field.java:393)\n        at org.junitpioneer.jupiter.EnvironmentVariableUtils.getFieldValue(EnvironmentVariableUtils.java:102)\n        at org.junitpioneer.jupiter.EnvironmentVariableUtils.setInSystemEnvClass(EnvironmentVariableUtils.java:94)\n        at org.junitpioneer.jupiter.EnvironmentVariableUtils.tryProcessEnvironmentClassFallbackSystemEnvClass(EnvironmentVariableUtils.java:76)\n        at org.junitpioneer.jupiter.EnvironmentVariableUtils.modifyEnvironmentVariables(EnvironmentVariableUtils.java:63)\n        at org.junitpioneer.jupiter.EnvironmentVariableUtils.set(EnvironmentVariableUtils.java:49)\n        at org.junitpioneer.jupiter.EnvironmentVariableExtensionTests.globalSetUp(EnvironmentVariableExtensionTests.java:34)\n\n123 tests completed, 1 failed, 1 skipped\n\n\nSo I kept it in because I think it is handy but It is not required. I needed this because I have only a Windows os to test.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388184167", "createdAt": "2020-03-05T09:52:00Z", "author": {"login": "Hancho2009"}, "path": "build.gradle.kts", "diffHunk": "@@ -89,6 +89,9 @@ yamlValidator {\n tasks {\n \n     test {\n+        testLogging {\n+            setExceptionFormat(\"full\")\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTc4OQ=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1Njk3MQ==", "bodyText": "Let's keep it, then. :)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r393956971", "createdAt": "2020-03-17T20:41:54Z", "author": {"login": "nipafx"}, "path": "build.gradle.kts", "diffHunk": "@@ -89,6 +89,9 @@ yamlValidator {\n tasks {\n \n     test {\n+        testLogging {\n+            setExceptionFormat(\"full\")\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTc4OQ=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQxNDc3OnYy", "diffSide": "RIGHT", "path": "docs/enviroment-variables.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MTo1OVrOFxXkEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDo0MjozMFrOF3tPmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDYwOQ==", "bodyText": "I think we need a clearer warning that this uses reflection and may technically break on any minor Java release or on different OSes. Users should be aware that while this may be the best way to test env variables, it's not actually a good one. ;)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387310609", "createdAt": "2020-03-03T21:41:59Z", "author": {"login": "nipafx"}, "path": "docs/enviroment-variables.adoc", "diffHunk": "@@ -0,0 +1,60 @@\n+:page-title: @ClearEnvironmentVariable and @SetEnvironmentVariable\n+:page-description: JUnit Jupiter extensions to clear and set the values of environment variable\n+\n+The `@ClearEnvironmentVariable` and `@SetEnvironmentVariable` annotations can be used to clear, respectively, set the values of environment variables for a test execution.\n+Both annotations work on the test method and class level, are repeatable as well as combinable.\n+After the annotated method has been executed, the variables mentioned in the annotation will be restored to their original value or will be cleared if they didn't have one before.\n+Other environment variables that are changed during the test, are *not* restored.\n+\n+Warning: Your SecurityManager has to allow modifications.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1NjIzMw==", "bodyText": "You mentioned  in #174\n\n\nput a warning into the .adoc\nput a warning into the Javadoc\nprint a warning once per test suite/class/method (?) execution if the extension is active\n\n\nI did not know excatly how much you wanted here (and where for the last point).\nWould it be okay if you do that?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388256233", "createdAt": "2020-03-05T12:14:46Z", "author": {"login": "Hancho2009"}, "path": "docs/enviroment-variables.adoc", "diffHunk": "@@ -0,0 +1,60 @@\n+:page-title: @ClearEnvironmentVariable and @SetEnvironmentVariable\n+:page-description: JUnit Jupiter extensions to clear and set the values of environment variable\n+\n+The `@ClearEnvironmentVariable` and `@SetEnvironmentVariable` annotations can be used to clear, respectively, set the values of environment variables for a test execution.\n+Both annotations work on the test method and class level, are repeatable as well as combinable.\n+After the annotated method has been executed, the variables mentioned in the annotation will be restored to their original value or will be cleared if they didn't have one before.\n+Other environment variables that are changed during the test, are *not* restored.\n+\n+Warning: Your SecurityManager has to allow modifications.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDYwOQ=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1NzI3NA==", "bodyText": "Sure.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r393957274", "createdAt": "2020-03-17T20:42:30Z", "author": {"login": "nipafx"}, "path": "docs/enviroment-variables.adoc", "diffHunk": "@@ -0,0 +1,60 @@\n+:page-title: @ClearEnvironmentVariable and @SetEnvironmentVariable\n+:page-description: JUnit Jupiter extensions to clear and set the values of environment variable\n+\n+The `@ClearEnvironmentVariable` and `@SetEnvironmentVariable` annotations can be used to clear, respectively, set the values of environment variables for a test execution.\n+Both annotations work on the test method and class level, are repeatable as well as combinable.\n+After the annotated method has been executed, the variables mentioned in the annotation will be restored to their original value or will be cleared if they didn't have one before.\n+Other environment variables that are changed during the test, are *not* restored.\n+\n+Warning: Your SecurityManager has to allow modifications.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDYwOQ=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQxNjk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MjozMlrOFxXlXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDo0NTo0OFrOF3tWeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDk0Mw==", "bodyText": "And OS X?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387310943", "createdAt": "2020-03-03T21:42:32Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n+/**\n+ * This class modifies the internals of the environment variables map with reflection.\n+ * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ */\n+public class EnvironmentVariableUtils {\n+\n+\t/**\n+\t * Set a value of an environment variable.\n+\t *\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n+\t */\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\t}\n+\n+\t/**\n+\t * Set the values of an environment variables.\n+\t *\n+\t * @param entries with name and new value of the environment variables\n+\t */\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\t}\n+\n+\t/**\n+\t * Clear an environment variable.\n+\t *\n+\t * @param name of the environment variable\n+\t */\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\t}\n+\n+\t/**\n+\t * Clears environment variables.\n+\t *\n+\t * @param names of the environment variables.\n+\t */\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\t}\n+\n+\tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n+\t\ttry {\n+\t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n+\t\t}\n+\t}\n+\n+\tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ReflectiveOperationException {\n+\t\ttry {\n+\t\t\tsetInProcessEnvironmentClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tsetInSystemEnvClass(consumer);\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * Works on Windows\n+\t */\n+\tprivate static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ClassNotFoundException, NoSuchFieldException {\n+\t\tClass<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theEnvironment\"));\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theCaseInsensitiveEnvironment\"));\n+\t}\n+\n+\t/*\n+\t * Works on Linux", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4ODA3MA==", "bodyText": "Same as Linux as far as I can tell.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388188070", "createdAt": "2020-03-05T09:58:34Z", "author": {"login": "Hancho2009"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n+/**\n+ * This class modifies the internals of the environment variables map with reflection.\n+ * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ */\n+public class EnvironmentVariableUtils {\n+\n+\t/**\n+\t * Set a value of an environment variable.\n+\t *\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n+\t */\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\t}\n+\n+\t/**\n+\t * Set the values of an environment variables.\n+\t *\n+\t * @param entries with name and new value of the environment variables\n+\t */\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\t}\n+\n+\t/**\n+\t * Clear an environment variable.\n+\t *\n+\t * @param name of the environment variable\n+\t */\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\t}\n+\n+\t/**\n+\t * Clears environment variables.\n+\t *\n+\t * @param names of the environment variables.\n+\t */\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\t}\n+\n+\tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n+\t\ttry {\n+\t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n+\t\t}\n+\t}\n+\n+\tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ReflectiveOperationException {\n+\t\ttry {\n+\t\t\tsetInProcessEnvironmentClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tsetInSystemEnvClass(consumer);\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * Works on Windows\n+\t */\n+\tprivate static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ClassNotFoundException, NoSuchFieldException {\n+\t\tClass<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theEnvironment\"));\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theCaseInsensitiveEnvironment\"));\n+\t}\n+\n+\t/*\n+\t * Works on Linux", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDk0Mw=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1OTAzNA==", "bodyText": "Edited: Nevermind. :)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r393959034", "createdAt": "2020-03-17T20:45:48Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n+/**\n+ * This class modifies the internals of the environment variables map with reflection.\n+ * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ */\n+public class EnvironmentVariableUtils {\n+\n+\t/**\n+\t * Set a value of an environment variable.\n+\t *\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n+\t */\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\t}\n+\n+\t/**\n+\t * Set the values of an environment variables.\n+\t *\n+\t * @param entries with name and new value of the environment variables\n+\t */\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\t}\n+\n+\t/**\n+\t * Clear an environment variable.\n+\t *\n+\t * @param name of the environment variable\n+\t */\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\t}\n+\n+\t/**\n+\t * Clears environment variables.\n+\t *\n+\t * @param names of the environment variables.\n+\t */\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\t}\n+\n+\tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n+\t\ttry {\n+\t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n+\t\t}\n+\t}\n+\n+\tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ReflectiveOperationException {\n+\t\ttry {\n+\t\t\tsetInProcessEnvironmentClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tsetInSystemEnvClass(consumer);\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * Works on Windows\n+\t */\n+\tprivate static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ClassNotFoundException, NoSuchFieldException {\n+\t\tClass<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theEnvironment\"));\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theCaseInsensitiveEnvironment\"));\n+\t}\n+\n+\t/*\n+\t * Works on Linux", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDk0Mw=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQyMDg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MzozOFrOFxXnpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowMToyN1rOFyNOXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMTUyNQ==", "bodyText": "I don't think this should be public API. Was that an accident or on purpose?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387311525", "createdAt": "2020-03-03T21:43:38Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n+/**\n+ * This class modifies the internals of the environment variables map with reflection.\n+ * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ */\n+public class EnvironmentVariableUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4OTc4OQ==", "bodyText": "accident \ud83d\ude33", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388189789", "createdAt": "2020-03-05T10:01:27Z", "author": {"login": "Hancho2009"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n+/**\n+ * This class modifies the internals of the environment variables map with reflection.\n+ * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ */\n+public class EnvironmentVariableUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMTUyNQ=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA5MTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNTo1OFrOFyOB2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowMDowMlrOF3t26A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMjk3MQ==", "bodyText": "I did not like in both versions that the exception from the setInProcessEnvironmentClass is not shown if it reaches this catch block. I looked into it and think we can work with addSuppressed.\n    public static void main(String[] args) {\n        try {\n            try {\n                throw new ReflectiveOperationException(\"First try\");\n            } catch (ReflectiveOperationException e) {\n                try {\n                    throw new ReflectiveOperationException(\"Second try\");\n                } catch (ReflectiveOperationException ex) {\n                    ex.addSuppressed(e);\n                    throw new RuntimeException(\"all\", ex);\n                }\n            }\n        } catch (RuntimeException runtimeE)\n        {\n            runtimeE.printStackTrace();\n        }\n    }\n\nOutput:\njava.lang.RuntimeException: all\n\tat org.junitpioneer.Test.main(Test.java:14)\nCaused by: java.lang.ReflectiveOperationException: Second try\n\tat org.junitpioneer.Test.main(Test.java:11)\n\tSuppressed: java.lang.ReflectiveOperationException: First try\n\t\tat org.junitpioneer.Test.main(Test.java:8)\n\nwhat do you think?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388202971", "createdAt": "2020-03-05T10:25:58Z", "author": {"login": "Hancho2009"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -16,64 +16,66 @@\n import java.util.Map;\n import java.util.function.Consumer;\n \n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n  * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n \t/**\n-\t * Set the values of an environment variables.\n+\t * Set a value of an environment variable.\n \t *\n-\t * @param entries with name and new value of the environment variables\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n \t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n \t}\n \n \t/**\n-\t * Clears environment variables.\n+\t * Set the values of an environment variables.\n \t *\n-\t * @param names of the environment variables.\n+\t * @param entries with name and new value of the environment variables\n \t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n \t}\n \n \t/**\n-\t * Set a value of an environment variable.\n+\t * Clear an environment variable.\n \t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n+\t * @param name of the environment variable\n \t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n \t}\n \n \t/**\n-\t * Clear an environment variable.\n+\t * Clears environment variables.\n \t *\n-\t * @param name of the environment variable\n+\t * @param names of the environment variables.\n \t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n \t}\n \n \tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n \t\ttry {\n \t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException e) {\n-\t\t\tthrow new RuntimeException(\"Could not modify environment variables\");\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3NTU5Ng==", "bodyText": "Instead of the cause we could also use two suppressed too better represent that they are on the same level:\n    public static void main(String[] args) {\n        try {\n            try {\n                throw new ReflectiveOperationException(\"First try\");\n            } catch (ReflectiveOperationException e) {\n                try {\n                    throw new ReflectiveOperationException(\"Second try\");\n                } catch (ReflectiveOperationException ex) {\n                    RuntimeException runtimeException = new RuntimeException(\"all\");\n                    runtimeException.addSuppressed(e);\n                    runtimeException.addSuppressed(ex);\n                    throw runtimeException;\n                }\n            }\n        } catch (RuntimeException runtimeE)\n        {\n            runtimeE.printStackTrace();\n        }\n    }\n\nOutput:\njava.lang.RuntimeException: all\n\tat org.junitpioneer.Test.main(Test.java:13)\n\tSuppressed: java.lang.ReflectiveOperationException: First try\n\t\tat org.junitpioneer.Test.main(Test.java:8)\n\tSuppressed: java.lang.ReflectiveOperationException: Second try\n\t\tat org.junitpioneer.Test.main(Test.java:11)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388775596", "createdAt": "2020-03-06T08:44:37Z", "author": {"login": "Hancho2009"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -16,64 +16,66 @@\n import java.util.Map;\n import java.util.function.Consumer;\n \n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n  * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n \t/**\n-\t * Set the values of an environment variables.\n+\t * Set a value of an environment variable.\n \t *\n-\t * @param entries with name and new value of the environment variables\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n \t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n \t}\n \n \t/**\n-\t * Clears environment variables.\n+\t * Set the values of an environment variables.\n \t *\n-\t * @param names of the environment variables.\n+\t * @param entries with name and new value of the environment variables\n \t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n \t}\n \n \t/**\n-\t * Set a value of an environment variable.\n+\t * Clear an environment variable.\n \t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n+\t * @param name of the environment variable\n \t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n \t}\n \n \t/**\n-\t * Clear an environment variable.\n+\t * Clears environment variables.\n \t *\n-\t * @param name of the environment variable\n+\t * @param names of the environment variables.\n \t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n \t}\n \n \tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n \t\ttry {\n \t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException e) {\n-\t\t\tthrow new RuntimeException(\"Could not modify environment variables\");\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMjk3MQ=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NzMzNg==", "bodyText": "(A) Great catch about the first exception, which went missing. Adding it as suppressed to the second exception looks right to me because the code that lead to the second exception did indeed suppress the first.\n(B) I would still add the second exception as cause to the final (third) one because that causal chain represents well what actually happened.\nAs far as I can tell the code still does (A) and I would keep it that way.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r393967336", "createdAt": "2020-03-17T21:00:02Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -16,64 +16,66 @@\n import java.util.Map;\n import java.util.function.Consumer;\n \n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n  * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n \t/**\n-\t * Set the values of an environment variables.\n+\t * Set a value of an environment variable.\n \t *\n-\t * @param entries with name and new value of the environment variables\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n \t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n \t}\n \n \t/**\n-\t * Clears environment variables.\n+\t * Set the values of an environment variables.\n \t *\n-\t * @param names of the environment variables.\n+\t * @param entries with name and new value of the environment variables\n \t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n \t}\n \n \t/**\n-\t * Set a value of an environment variable.\n+\t * Clear an environment variable.\n \t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n+\t * @param name of the environment variable\n \t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n \t}\n \n \t/**\n-\t * Clear an environment variable.\n+\t * Clears environment variables.\n \t *\n-\t * @param name of the environment variable\n+\t * @param names of the environment variables.\n \t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n \t}\n \n \tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n \t\ttry {\n \t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException e) {\n-\t\t\tthrow new RuntimeException(\"Could not modify environment variables\");\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMjk3MQ=="}, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTE4NjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1MjoxM1rOFyO6ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1MjoxM1rOFyO6ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNzUzOQ==", "bodyText": "that is new to me - cool change", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388217539", "createdAt": "2020-03-05T10:52:13Z", "author": {"login": "Hancho2009"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -16,64 +16,66 @@\n import java.util.Map;\n import java.util.function.Consumer;\n \n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n  * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n \t/**\n-\t * Set the values of an environment variables.\n+\t * Set a value of an environment variable.\n \t *\n-\t * @param entries with name and new value of the environment variables\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n \t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n \t}\n \n \t/**\n-\t * Clears environment variables.\n+\t * Set the values of an environment variables.\n \t *\n-\t * @param names of the environment variables.\n+\t * @param entries with name and new value of the environment variables\n \t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n \t}\n \n \t/**\n-\t * Set a value of an environment variable.\n+\t * Clear an environment variable.\n \t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n+\t * @param name of the environment variable\n \t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n \t}\n \n \t/**\n-\t * Clear an environment variable.\n+\t * Clears environment variables.\n \t *\n-\t * @param name of the environment variable\n+\t * @param names of the environment variables.\n \t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n \t}\n \n \tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n \t\ttry {\n \t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException e) {\n-\t\t\tthrow new RuntimeException(\"Could not modify environment variables\");\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n \t\t}\n \t}\n \n \tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows NoSuchFieldException {\n+\t\t\tthrows ReflectiveOperationException {\n \t\ttry {\n \t\t\tsetInProcessEnvironmentClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException | ClassNotFoundException e) {\n+\t\tcatch (ReflectiveOperationException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTA5NjcyOnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTowOToxMVrOF6UKWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxOToxMVrOF64PUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MjA1Nw==", "bodyText": "Okay, so, I think this might be causing issues on osx?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r396692057", "createdAt": "2020-03-23T19:09:11Z", "author": {"login": "Michael1993"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddfb42ac5acf992ac6451831e26ff9f375ec0933"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NjMwOQ==", "bodyText": "Seems to work. it should be removed anyway #174 (comment)\nWhat I do not understand is that it once worked with macOS and oraclejdk11 https://travis-ci.org/junit-pioneer/junit-pioneer/builds/652682481\nJob Config: https://travis-ci.org/github/junit-pioneer/junit-pioneer/jobs/652682485/config", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r397266309", "createdAt": "2020-03-24T15:57:48Z", "author": {"login": "Hancho2009"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MjA1Nw=="}, "originalCommit": {"oid": "ddfb42ac5acf992ac6451831e26ff9f375ec0933"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MzE1Mw==", "bodyText": "travis_fold:start:install_jdk was completely missing from the breaking build. It looked like Travis just skipped a step? Don't know why.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r397283153", "createdAt": "2020-03-24T16:19:11Z", "author": {"login": "Michael1993"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MjA1Nw=="}, "originalCommit": {"oid": "ddfb42ac5acf992ac6451831e26ff9f375ec0933"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzIwNjUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1NDoyOVrOF8dXkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTozMDo1NVrOGCS5rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDA0OQ==", "bodyText": "What do you think about the increased visibility?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r398940049", "createdAt": "2020-03-26T22:54:29Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+class EnvironmentVariableExtension\n+\t\timplements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(EnvironmentVariableExtension.class);\n+\tprivate static final String BACKUP = \"Backup\";\n+\n+\tprivate static final AtomicBoolean REPORTED_WARNING = new AtomicBoolean(false);\n+\t// package visible to make accessible for tests\n+\tstatic final String WARNING_KEY = EnvironmentVariableExtension.class.getSimpleName();\n+\tstatic final String WARNING_VALUE = \"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b424f1527fc35cdc3844e3411a80883b0991abc8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MDAxNA==", "bodyText": "I write all my classes package private to access them in tests", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r405060014", "createdAt": "2020-04-07T19:30:55Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+class EnvironmentVariableExtension\n+\t\timplements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(EnvironmentVariableExtension.class);\n+\tprivate static final String BACKUP = \"Backup\";\n+\n+\tprivate static final AtomicBoolean REPORTED_WARNING = new AtomicBoolean(false);\n+\t// package visible to make accessible for tests\n+\tstatic final String WARNING_KEY = EnvironmentVariableExtension.class.getSimpleName();\n+\tstatic final String WARNING_VALUE = \"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDA0OQ=="}, "originalCommit": {"oid": "b424f1527fc35cdc3844e3411a80883b0991abc8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzIwNzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1NDo1NlrOF8dYLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTozODo1MVrOGCTKHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDIwNQ==", "bodyText": "A bit weird to add this method just for tests. What do you think?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r398940205", "createdAt": "2020-03-26T22:54:56Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+class EnvironmentVariableExtension\n+\t\timplements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(EnvironmentVariableExtension.class);\n+\tprivate static final String BACKUP = \"Backup\";\n+\n+\tprivate static final AtomicBoolean REPORTED_WARNING = new AtomicBoolean(false);\n+\t// package visible to make accessible for tests\n+\tstatic final String WARNING_KEY = EnvironmentVariableExtension.class.getSimpleName();\n+\tstatic final String WARNING_VALUE = \"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\";\n+\n+\t@Override\n+\tpublic void beforeAll(ExtensionContext context) {\n+\t\thandleEnvironmentVariables(context);\n+\t}\n+\n+\t@Override\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\thandleEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\tprivate void handleEnvironmentVariables(ExtensionContext context) {\n+\t\tSet<String> variablesToClear;\n+\t\tMap<String, String> variablesToSet;\n+\t\ttry {\n+\t\t\tvariablesToClear = findRepeatableAnnotations(context, ClearEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(ClearEnvironmentVariable::key)\n+\t\t\t\t\t.collect(Utils.distinctToSet());\n+\t\t\tvariablesToSet = findRepeatableAnnotations(context, SetEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.collect(toMap(SetEnvironmentVariable::key, SetEnvironmentVariable::value));\n+\t\t\tpreventClearAndSetSameEnvironmentVariables(variablesToClear, variablesToSet.keySet());\n+\t\t}\n+\t\tcatch (IllegalStateException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Don't clear/set the same environment variable more than once.\",\n+\t\t\t\tex);\n+\t\t}\n+\n+\t\tstoreOriginalEnvironmentVariables(context, variablesToClear, variablesToSet.keySet());\n+\t\treportWarning(context);\n+\t\tEnvironmentVariableUtils.clear(variablesToClear);\n+\t\tEnvironmentVariableUtils.set(variablesToSet);\n+\t}\n+\n+\tprivate <A extends Annotation> List<A> findRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn context\n+\t\t\t\t.getElement()\n+\t\t\t\t.map(element -> AnnotationSupport.findRepeatableAnnotations(element, annotationType))\n+\t\t\t\t.orElseGet(Collections::emptyList);\n+\t}\n+\n+\tprivate void preventClearAndSetSameEnvironmentVariables(Collection<String> variablesToClear,\n+\t\t\tCollection<String> variablesToSet) {\n+\t\tvariablesToClear\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(variablesToSet::contains)\n+\t\t\t\t.reduce((k0, k1) -> k0 + \", \" + k1)\n+\t\t\t\t.ifPresent(duplicateKeys -> {\n+\t\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\"Cannot clear and set the following environment variable at the same time: \" + duplicateKeys);\n+\t\t\t\t});\n+\t}\n+\n+\tprivate void storeOriginalEnvironmentVariables(ExtensionContext context, Collection<String> clearVariables,\n+\t\t\tCollection<String> setVariables) {\n+\t\tcontext.getStore(NAMESPACE).put(BACKUP, new EnvironmentVariableBackup(clearVariables, setVariables));\n+\t}\n+\n+\tprivate void reportWarning(ExtensionContext context) {\n+\t\tboolean wasReported = REPORTED_WARNING.getAndSet(true);\n+\t\tif (!wasReported)\n+\t\t\tcontext.publishReportEntry(WARNING_KEY, WARNING_VALUE);\n+\t}\n+\n+\t@Override\n+\tpublic void afterEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\trestoreOriginalEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void afterAll(ExtensionContext context) {\n+\t\trestoreOriginalEnvironmentVariables(context);\n+\t}\n+\n+\tprivate void restoreOriginalEnvironmentVariables(ExtensionContext context) {\n+\t\tcontext.getStore(NAMESPACE).get(BACKUP, EnvironmentVariableBackup.class).restoreVariables();\n+\t}\n+\n+\t// this method is needed by the tests that verify whether the warning is correctly reported\n+\tstatic void resetWarning() {\n+\t\tREPORTED_WARNING.set(false);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b424f1527fc35cdc3844e3411a80883b0991abc8"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NjA2NA==", "bodyText": "I don't like methods in prod code just for tests.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r405056064", "createdAt": "2020-04-07T19:23:47Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+class EnvironmentVariableExtension\n+\t\timplements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(EnvironmentVariableExtension.class);\n+\tprivate static final String BACKUP = \"Backup\";\n+\n+\tprivate static final AtomicBoolean REPORTED_WARNING = new AtomicBoolean(false);\n+\t// package visible to make accessible for tests\n+\tstatic final String WARNING_KEY = EnvironmentVariableExtension.class.getSimpleName();\n+\tstatic final String WARNING_VALUE = \"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\";\n+\n+\t@Override\n+\tpublic void beforeAll(ExtensionContext context) {\n+\t\thandleEnvironmentVariables(context);\n+\t}\n+\n+\t@Override\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\thandleEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\tprivate void handleEnvironmentVariables(ExtensionContext context) {\n+\t\tSet<String> variablesToClear;\n+\t\tMap<String, String> variablesToSet;\n+\t\ttry {\n+\t\t\tvariablesToClear = findRepeatableAnnotations(context, ClearEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(ClearEnvironmentVariable::key)\n+\t\t\t\t\t.collect(Utils.distinctToSet());\n+\t\t\tvariablesToSet = findRepeatableAnnotations(context, SetEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.collect(toMap(SetEnvironmentVariable::key, SetEnvironmentVariable::value));\n+\t\t\tpreventClearAndSetSameEnvironmentVariables(variablesToClear, variablesToSet.keySet());\n+\t\t}\n+\t\tcatch (IllegalStateException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Don't clear/set the same environment variable more than once.\",\n+\t\t\t\tex);\n+\t\t}\n+\n+\t\tstoreOriginalEnvironmentVariables(context, variablesToClear, variablesToSet.keySet());\n+\t\treportWarning(context);\n+\t\tEnvironmentVariableUtils.clear(variablesToClear);\n+\t\tEnvironmentVariableUtils.set(variablesToSet);\n+\t}\n+\n+\tprivate <A extends Annotation> List<A> findRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn context\n+\t\t\t\t.getElement()\n+\t\t\t\t.map(element -> AnnotationSupport.findRepeatableAnnotations(element, annotationType))\n+\t\t\t\t.orElseGet(Collections::emptyList);\n+\t}\n+\n+\tprivate void preventClearAndSetSameEnvironmentVariables(Collection<String> variablesToClear,\n+\t\t\tCollection<String> variablesToSet) {\n+\t\tvariablesToClear\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(variablesToSet::contains)\n+\t\t\t\t.reduce((k0, k1) -> k0 + \", \" + k1)\n+\t\t\t\t.ifPresent(duplicateKeys -> {\n+\t\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\"Cannot clear and set the following environment variable at the same time: \" + duplicateKeys);\n+\t\t\t\t});\n+\t}\n+\n+\tprivate void storeOriginalEnvironmentVariables(ExtensionContext context, Collection<String> clearVariables,\n+\t\t\tCollection<String> setVariables) {\n+\t\tcontext.getStore(NAMESPACE).put(BACKUP, new EnvironmentVariableBackup(clearVariables, setVariables));\n+\t}\n+\n+\tprivate void reportWarning(ExtensionContext context) {\n+\t\tboolean wasReported = REPORTED_WARNING.getAndSet(true);\n+\t\tif (!wasReported)\n+\t\t\tcontext.publishReportEntry(WARNING_KEY, WARNING_VALUE);\n+\t}\n+\n+\t@Override\n+\tpublic void afterEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\trestoreOriginalEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void afterAll(ExtensionContext context) {\n+\t\trestoreOriginalEnvironmentVariables(context);\n+\t}\n+\n+\tprivate void restoreOriginalEnvironmentVariables(ExtensionContext context) {\n+\t\tcontext.getStore(NAMESPACE).get(BACKUP, EnvironmentVariableBackup.class).restoreVariables();\n+\t}\n+\n+\t// this method is needed by the tests that verify whether the warning is correctly reported\n+\tstatic void resetWarning() {\n+\t\tREPORTED_WARNING.set(false);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDIwNQ=="}, "originalCommit": {"oid": "b424f1527fc35cdc3844e3411a80883b0991abc8"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDIyMw==", "bodyText": "Me neither. Fixed it by making the field accessible, so this can be done directly by the tests. (Doesn't really change anything functionally, but not having that method there just feels better. \ud83d\ude01 )", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r405064223", "createdAt": "2020-04-07T19:38:51Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+class EnvironmentVariableExtension\n+\t\timplements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(EnvironmentVariableExtension.class);\n+\tprivate static final String BACKUP = \"Backup\";\n+\n+\tprivate static final AtomicBoolean REPORTED_WARNING = new AtomicBoolean(false);\n+\t// package visible to make accessible for tests\n+\tstatic final String WARNING_KEY = EnvironmentVariableExtension.class.getSimpleName();\n+\tstatic final String WARNING_VALUE = \"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\";\n+\n+\t@Override\n+\tpublic void beforeAll(ExtensionContext context) {\n+\t\thandleEnvironmentVariables(context);\n+\t}\n+\n+\t@Override\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\thandleEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\tprivate void handleEnvironmentVariables(ExtensionContext context) {\n+\t\tSet<String> variablesToClear;\n+\t\tMap<String, String> variablesToSet;\n+\t\ttry {\n+\t\t\tvariablesToClear = findRepeatableAnnotations(context, ClearEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(ClearEnvironmentVariable::key)\n+\t\t\t\t\t.collect(Utils.distinctToSet());\n+\t\t\tvariablesToSet = findRepeatableAnnotations(context, SetEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.collect(toMap(SetEnvironmentVariable::key, SetEnvironmentVariable::value));\n+\t\t\tpreventClearAndSetSameEnvironmentVariables(variablesToClear, variablesToSet.keySet());\n+\t\t}\n+\t\tcatch (IllegalStateException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Don't clear/set the same environment variable more than once.\",\n+\t\t\t\tex);\n+\t\t}\n+\n+\t\tstoreOriginalEnvironmentVariables(context, variablesToClear, variablesToSet.keySet());\n+\t\treportWarning(context);\n+\t\tEnvironmentVariableUtils.clear(variablesToClear);\n+\t\tEnvironmentVariableUtils.set(variablesToSet);\n+\t}\n+\n+\tprivate <A extends Annotation> List<A> findRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn context\n+\t\t\t\t.getElement()\n+\t\t\t\t.map(element -> AnnotationSupport.findRepeatableAnnotations(element, annotationType))\n+\t\t\t\t.orElseGet(Collections::emptyList);\n+\t}\n+\n+\tprivate void preventClearAndSetSameEnvironmentVariables(Collection<String> variablesToClear,\n+\t\t\tCollection<String> variablesToSet) {\n+\t\tvariablesToClear\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(variablesToSet::contains)\n+\t\t\t\t.reduce((k0, k1) -> k0 + \", \" + k1)\n+\t\t\t\t.ifPresent(duplicateKeys -> {\n+\t\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\"Cannot clear and set the following environment variable at the same time: \" + duplicateKeys);\n+\t\t\t\t});\n+\t}\n+\n+\tprivate void storeOriginalEnvironmentVariables(ExtensionContext context, Collection<String> clearVariables,\n+\t\t\tCollection<String> setVariables) {\n+\t\tcontext.getStore(NAMESPACE).put(BACKUP, new EnvironmentVariableBackup(clearVariables, setVariables));\n+\t}\n+\n+\tprivate void reportWarning(ExtensionContext context) {\n+\t\tboolean wasReported = REPORTED_WARNING.getAndSet(true);\n+\t\tif (!wasReported)\n+\t\t\tcontext.publishReportEntry(WARNING_KEY, WARNING_VALUE);\n+\t}\n+\n+\t@Override\n+\tpublic void afterEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\trestoreOriginalEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void afterAll(ExtensionContext context) {\n+\t\trestoreOriginalEnvironmentVariables(context);\n+\t}\n+\n+\tprivate void restoreOriginalEnvironmentVariables(ExtensionContext context) {\n+\t\tcontext.getStore(NAMESPACE).get(BACKUP, EnvironmentVariableBackup.class).restoreVariables();\n+\t}\n+\n+\t// this method is needed by the tests that verify whether the warning is correctly reported\n+\tstatic void resetWarning() {\n+\t\tREPORTED_WARNING.set(false);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDIwNQ=="}, "originalCommit": {"oid": "b424f1527fc35cdc3844e3411a80883b0991abc8"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4179, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}