{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzgxNTA1", "number": 216, "title": "Added PublishCondition feature to the ReportEntryExtension.", "bodyText": "Hopefully a bit better in quality than my last PR. Progresses #179\n\nI hereby agree to the terms of the JUnit Pioneer Contributor License Agreement.", "createdAt": "2020-04-03T20:54:32Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216", "merged": true, "mergeCommit": {"oid": "c75d998d90f1a7f4439900735135feb242c2abe9"}, "closed": true, "closedAt": "2020-04-28T18:03:48Z", "author": {"login": "Michael1993"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUHP_RAH2gAyMzk4MzgxNTA1OmIwZmI3MDU5YmQzZmY5NmRhYmFmN2YwNDE4NDc1N2I0YTRhZDczZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbAbT0AFqTQwMDM2NjQ4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "committedDate": "2020-04-03T20:51:22Z", "message": "Added PublishCondition feature to the ReportEntryExtension."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Njc2Nzcw", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#pullrequestreview-387676770", "createdAt": "2020-04-04T07:34:22Z", "commit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzozNDoyM1rOGAv6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODowMjo1NFrOGAwENg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODE5Ng==", "bodyText": "I don't see the use case here. If I don't need a report entry then why should I even set the annotation?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403438196", "createdAt": "2020-04-04T07:34:23Z", "author": {"login": "Bukama"}, "path": "docs/report-entries.adoc", "diffHunk": "@@ -78,3 +78,24 @@ void edgarAllanPoe() {\n ----\n \n Again, just like `TestReporter::publishEntry`, if no key is given it defaults to `\"value\"` (yes, that's not a mixup).\n+\n+=== Publish conditions\n+\n+You can specify a `PublishCondition` parameter on the `@ReportEntry` annotation for better control when the extension\n+should publish your entry. Just so:\n+\n+[source,java]\n+----\n+@Test\n+@ReportEntry(key = \"line\", value = \"success entry\", when = ReportEntry.PublishCondition.ON_SUCCESS)\n+void sufferingFromSuccess() {\n+    // YOUR TEST CODE HERE\n+}\n+----\n+\n+The `PublishCondition` must be one of the following:\n+\n+- ALWAYS        The extension will always publish your entry when the test runs.\n+- ON_SUCCESS    The extension will publish your report entry if the test finishes successfully.\n+- ON_FAILURE    The extension will publish your report entry if the test fails.\n+- NEVERMORE     The extension will *not* publish your report entry. Nevermore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODYzMA==", "bodyText": "In my opionion you don't have ro repeat the @ReportEntry as we are in the documentation of it, so the focus is clear. So I would change the sentence to\n\nYou can specify a publish condition by using the when parameter for better control if the extension should publish your entry.\n\nor\n\n\nYou can specify a publish condition for better control if the extension should publish your entry. To do so just use the when attribute like shown in the following example:", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403438630", "createdAt": "2020-04-04T07:38:54Z", "author": {"login": "Bukama"}, "path": "docs/report-entries.adoc", "diffHunk": "@@ -78,3 +78,24 @@ void edgarAllanPoe() {\n ----\n \n Again, just like `TestReporter::publishEntry`, if no key is given it defaults to `\"value\"` (yes, that's not a mixup).\n+\n+=== Publish conditions\n+\n+You can specify a `PublishCondition` parameter on the `@ReportEntry` annotation for better control when the extension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODc3NA==", "bodyText": "Suggestion:\n\nThe publish condition must be an entry of the ReportEntry.PublishCondition enumeration, which contains the following values:", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403438774", "createdAt": "2020-04-04T07:40:36Z", "author": {"login": "Bukama"}, "path": "docs/report-entries.adoc", "diffHunk": "@@ -78,3 +78,24 @@ void edgarAllanPoe() {\n ----\n \n Again, just like `TestReporter::publishEntry`, if no key is given it defaults to `\"value\"` (yes, that's not a mixup).\n+\n+=== Publish conditions\n+\n+You can specify a `PublishCondition` parameter on the `@ReportEntry` annotation for better control when the extension\n+should publish your entry. Just so:\n+\n+[source,java]\n+----\n+@Test\n+@ReportEntry(key = \"line\", value = \"success entry\", when = ReportEntry.PublishCondition.ON_SUCCESS)\n+void sufferingFromSuccess() {\n+    // YOUR TEST CODE HERE\n+}\n+----\n+\n+The `PublishCondition` must be one of the following:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODg3NA==", "bodyText": "I suggest to rephrase it to:\n\nThe extension will always publish the entry regardless of the rest result.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403438874", "createdAt": "2020-04-04T07:42:10Z", "author": {"login": "Bukama"}, "path": "docs/report-entries.adoc", "diffHunk": "@@ -78,3 +78,24 @@ void edgarAllanPoe() {\n ----\n \n Again, just like `TestReporter::publishEntry`, if no key is given it defaults to `\"value\"` (yes, that's not a mixup).\n+\n+=== Publish conditions\n+\n+You can specify a `PublishCondition` parameter on the `@ReportEntry` annotation for better control when the extension\n+should publish your entry. Just so:\n+\n+[source,java]\n+----\n+@Test\n+@ReportEntry(key = \"line\", value = \"success entry\", when = ReportEntry.PublishCondition.ON_SUCCESS)\n+void sufferingFromSuccess() {\n+    // YOUR TEST CODE HERE\n+}\n+----\n+\n+The `PublishCondition` must be one of the following:\n+\n+- ALWAYS        The extension will always publish your entry when the test runs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTA5MQ==", "bodyText": "Documentation is wrong as the extension uses the AfterEachCallback. But as written above I would mentioned that it will always publish regardless of the test result", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439091", "createdAt": "2020-04-04T07:44:15Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTI0MQ==", "bodyText": "We are on Junit 5.4.2 since last week! See build.gradle.kts", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439241", "createdAt": "2020-04-04T07:46:13Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -12,20 +12,32 @@\n \n import static java.lang.String.format;\n \n-import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n \n-class ReportEntryExtension implements BeforeEachCallback {\n+class ReportEntryExtension implements AfterEachCallback {\n \n+\t// TODO: This can be replaced with specific TestWatcher interface methods, once we update to JUnit 5.4+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTI5Mw==", "bodyText": "The value NEVERMORE is never used aside from test cases. This underlines that it's not needed and should be removed!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439293", "createdAt": "2020-04-04T07:46:46Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call\n+\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry\n+\t */\n+\tenum PublishCondition {\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTYwNw==", "bodyText": "Must be updated after #187 is merged.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439607", "createdAt": "2020-04-04T07:50:05Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -12,20 +12,32 @@\n \n import static java.lang.String.format;\n \n-import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n \n-class ReportEntryExtension implements BeforeEachCallback {\n+class ReportEntryExtension implements AfterEachCallback {\n \n+\t// TODO: This can be replaced with specific TestWatcher interface methods, once we update to JUnit 5.4+\n \t@Override\n-\tpublic void beforeEach(ExtensionContext context) throws Exception {\n-\t\tUtils\n-\t\t\t\t.findRepeatableAnnotation(context, ReportEntry.class)\n-\t\t\t\t.peek(ReportEntryExtension::verifyKeyValueAreNotBlank)\n+\tpublic void afterEach(ExtensionContext context) {\n+\t\tfinal Optional<Throwable> ex = context.getExecutionException();\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> entry.when() == ReportEntry.PublishCondition.ALWAYS\n+\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_SUCCESS && !ex.isPresent()\n+\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_FAILURE && ex.isPresent())\n \t\t\t\t.forEach(entry -> context.publishReportEntry(entry.key(), entry.value()));\n \t}\n \n+\tprivate Stream<ReportEntry> findAnnotations(ExtensionContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTc2NQ==", "bodyText": "No star imports!\n@aepfli @nicolaiparlog Why didn't the build fail? In #169 we introduced a check to avoid star imports!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439765", "createdAt": "2020-04-04T07:52:03Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -13,20 +13,28 @@\n import static java.util.stream.Collectors.toList;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTk4MQ==", "bodyText": "I don't see the usage for this", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439981", "createdAt": "2020-04-04T07:54:23Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTk5OQ==", "bodyText": "I don't see the usage for this", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439999", "createdAt": "2020-04-04T07:54:39Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n+\t\tvoid nevermoreOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDAyMw==", "bodyText": "I don't see the usage for this", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440023", "createdAt": "2020-04-04T07:54:47Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n+\t\tvoid nevermoreOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n+\t\tvoid nevermoreOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n+\t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n+\t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n+\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDAzMg==", "bodyText": "I don't see the usage for this", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440032", "createdAt": "2020-04-04T07:54:57Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n+\t\tvoid nevermoreOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n+\t\tvoid nevermoreOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n+\t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n+\t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n+\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)\n+\t\tvoid repeatedOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"For the rare and radiant maiden\", when = ALWAYS)\n+\t\t@ReportEntry(value = \"whom the angels name Lenore\u2014\", when = ON_SUCCESS)\n+\t\t@ReportEntry(value = \"Nameless here\", when = ON_FAILURE)\n+\t\t@ReportEntry(value = \"for evermore.\", when = NEVERMORE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDEyNw==", "bodyText": "the AfterEachCallback is used, so before is wrong. As the ALWAYS enum entry is used what about the name evenOnFailure (must then be changed in the assertion method too)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440127", "createdAt": "2020-04-04T07:56:33Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDE0Ng==", "bodyText": "the AfterEachCallback is used, so before is wrong. As the ALWAYS enum entry is used what about the name evenOnSuccess (must then be changed in the assertion method too)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440146", "createdAt": "2020-04-04T07:56:46Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDI2Nw==", "bodyText": "Nice spot ;)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440267", "createdAt": "2020-04-04T07:58:10Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -32,7 +32,7 @@\n  *     <li>{@code from} a primitive value for the \"start\" of the range.</li>\n  *     <li>{@code to} a primitive value for the \"end\" of the range. {@code to} must have the same type as {@code from}.</li>\n  *     <li>{@code step} a primitive value for the difference between each two values of the range.</li>\n- *     <li>{@code closed} a {@code boolean} value describing if the range includes the last value (cloded), or not (open).</li>\n+ *     <li>{@code closed} a {@code boolean} value describing if the range includes the last value (closed), or not (open).</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDY5NA==", "bodyText": "Note: I appreciate the declartion of the repeatable annotation inside it (as I suggested it in #215 ). But as the discussion on that has not really started I can not say if this is fine or has to be changed later.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440694", "createdAt": "2020-04-04T08:02:54Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call\n+\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry\n+\t */\n+\tenum PublishCondition {\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE\n+\t}\n+\n+\t/**\n+\t * This makes the {@code ReportEntry} repeatable.\n+\t */\n+\t@Retention(RetentionPolicy.RUNTIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c2c943e1680996e6e915404a5bd588f81e3ebd5", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/9c2c943e1680996e6e915404a5bd588f81e3ebd5", "committedDate": "2020-04-05T12:08:22Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebbcce9a586a19c0e0afed344067509738c0abac", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ebbcce9a586a19c0e0afed344067509738c0abac", "committedDate": "2020-04-07T09:25:28Z", "message": "Refined the PublishCondition feature."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3072956d337070ad1c88cfac3a32959ce1136b85", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3072956d337070ad1c88cfac3a32959ce1136b85", "committedDate": "2020-04-07T09:38:11Z", "message": "Fixed a checkstyle error."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c38b96b8962e6affe2f6a3378ae3588a682a715", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8c38b96b8962e6affe2f6a3378ae3588a682a715", "committedDate": "2020-04-07T09:40:26Z", "message": "Now spotless is broken. Fixed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343", "committedDate": "2020-04-07T12:29:40Z", "message": "Two new test cases and an explanatory comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5Mjc1NjI2", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#pullrequestreview-389275626", "createdAt": "2020-04-07T16:13:45Z", "commit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxMzo0NVrOGCLTUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxODo1MFrOGCLhbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNTUwNg==", "bodyText": "Invalid value :)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404935506", "createdAt": "2020-04-07T16:13:45Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to {@link org.junitpioneer.jupiter.ReportEntry.PublishCondition#ALWAYS}\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available values you can choose from to define when\n+\t * the extension should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry every time the test is ran, regardless of its outcome\n+\t *  - ON_SUCCESS:\tpublish report entry after successful test run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA==", "bodyText": "Is this line necessary as non-empty keys and values are checked in line 31 ?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404937408", "createdAt": "2020-04-07T16:16:21Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -33,4 +42,31 @@ private static void verifyKeyValueAreNotBlank(ReportEntry entry) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void testDisabled(ExtensionContext context, Optional<String> reason) {\n+\t\t// If the test is disabled we consider the annotation disabled too and don't publish anything.\n+\t}\n+\n+\t@Override\n+\tpublic void testSuccessful(ExtensionContext context) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_SUCCESS);\n+\t}\n+\n+\t@Override\n+\tpublic void testAborted(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\t@Override\n+\tpublic void testFailed(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\tprivate void publishOnConditions(ExtensionContext context, ReportEntry.PublishCondition... conditions) {\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> Arrays.asList(conditions).contains(entry.when()))\n+\t\t\t\t.filter(entry -> !entry.key().isEmpty() && !entry.value().isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzOTExOA==", "bodyText": "maybe put the when into quotes or so. As of now it reads a bit rough (at least to me)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404939118", "createdAt": "2020-04-07T16:18:50Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -69,20 +82,158 @@ void emptyValue_fails() {\n \t}\n \n \t@Test\n+\t@DisplayName(\"logs each value as individual entry when annotation is repeated\")\n \tvoid repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\tExecutionEventRecorder recorder = executeTestsForMethod(ReportEntriesTest.class, \"repeatedAnnotation\");\n \n \t\tList<Map<String, String>> reportEntries = reportEntries(recorder);\n \n \t\tassertAll(\"Verifying report entries \" + reportEntries, //\n \t\t\t() -> assertThat(reportEntries).hasSize(3),\n-\t\t\t() -> assertThat(reportEntries).extracting(entry -> entry.size()).containsExactlyInAnyOrder(1, 1, 1),\n+\t\t\t() -> assertThat(reportEntries).extracting(Map::size).containsExactlyInAnyOrder(1, 1, 1),\n \t\t\t() -> assertThat(reportEntries)\n \t\t\t\t\t.extracting(entry -> entry.get(\"value\"))\n \t\t\t\t\t.containsExactlyInAnyOrder(\"suddenly there came a tapping\", \"As if some one gently rapping\",\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n+\t@Nested\n+\t@DisplayName(\"with explicitly set when parameter\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4c65204d9cc82a76e5b3e79bc0d67f16f5e6c67", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e4c65204d9cc82a76e5b3e79bc0d67f16f5e6c67", "committedDate": "2020-04-07T20:04:45Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a9eb28a69c99540996a623f1baf4507fe8ba6c6", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6a9eb28a69c99540996a623f1baf4507fe8ba6c6", "committedDate": "2020-04-07T20:12:24Z", "message": "Minor changes and spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f342f72780f874fb0be486fec1a4e2e5c394dc1f", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f342f72780f874fb0be486fec1a4e2e5c394dc1f", "committedDate": "2020-04-07T20:29:39Z", "message": "Fixing code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bed882c01560ea417fdabf1f71e99d7a4ae00df", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4bed882c01560ea417fdabf1f71e99d7a4ae00df", "committedDate": "2020-04-07T20:56:00Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement\n\n\u0001 Conflicts:\n\u0001\tsrc/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9870c506c92bd9804fecb9715cd1c4cfa8c202f", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a9870c506c92bd9804fecb9715cd1c4cfa8c202f", "committedDate": "2020-04-07T20:59:40Z", "message": "Messed up merging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjE3NzM3", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#pullrequestreview-390217737", "createdAt": "2020-04-08T18:16:57Z", "commit": {"oid": "a9870c506c92bd9804fecb9715cd1c4cfa8c202f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4707c84a97050d4b9f878a4cd0706e2173e911d8", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4707c84a97050d4b9f878a4cd0706e2173e911d8", "committedDate": "2020-04-14T17:49:04Z", "message": "Small edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a75d7bb1e642065a9ee4a30e9e4107b999a09f69", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a75d7bb1e642065a9ee4a30e9e4107b999a09f69", "committedDate": "2020-04-14T18:05:43Z", "message": "Nest new test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51fafcefd28ad60ffeb215209617d6f3e9247d8c", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/51fafcefd28ad60ffeb215209617d6f3e9247d8c", "committedDate": "2020-04-14T18:11:53Z", "message": "Damn Spotless *shakes fist*"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51226a642721ac75d9ce2b127a42bd0f22bac7d1", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/51226a642721ac75d9ce2b127a42bd0f22bac7d1", "committedDate": "2020-04-20T16:36:13Z", "message": "Added ON_ABORTED option, more tests and an explaining comment on that filter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cbce139924b04d8e34326075c9bebc08a7e5505", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/5cbce139924b04d8e34326075c9bebc08a7e5505", "committedDate": "2020-04-20T16:47:07Z", "message": "Removed some unnecessary empty lines (Spotless, why did you betray me? :<)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDc2MjAz", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#pullrequestreview-397476203", "createdAt": "2020-04-21T16:34:43Z", "commit": {"oid": "5cbce139924b04d8e34326075c9bebc08a7e5505"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e6c37f4fc036e7999248e1778e83399da7ddbe2", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1e6c37f4fc036e7999248e1778e83399da7ddbe2", "committedDate": "2020-04-23T20:29:31Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "395e223abf8312178429d90304679564e26ecb7c", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/395e223abf8312178429d90304679564e26ecb7c", "committedDate": "2020-04-25T04:02:06Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement\n\n\u0001 Conflicts:\n\u0001\tsrc/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41fed21ec1cfadbb92138e5e102233369d08840b", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/41fed21ec1cfadbb92138e5e102233369d08840b", "committedDate": "2020-04-25T04:11:38Z", "message": "Update to use the new testkit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc82c90aebdfcd85ada1e4d83afd2c7efab72ff2", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/fc82c90aebdfcd85ada1e4d83afd2c7efab72ff2", "committedDate": "2020-04-25T04:21:33Z", "message": "Spotless, my mortal enemy. We clash again."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzY2NDg5", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#pullrequestreview-400366489", "createdAt": "2020-04-25T06:51:52Z", "commit": {"oid": "fc82c90aebdfcd85ada1e4d83afd2c7efab72ff2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3742, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}