{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDQ5ODY4", "number": 187, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1MTo1MFrODtf1jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1NjoyM1rODtpJgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDM0MTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1MTo1MFrOF-9EiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1MTo1MFrOF-9EiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NjYxNg==", "bodyText": "i am not sure about the naming here, isAnyAnnotationPresent would be more representing, right now i would expect that all annotations are present", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401556616", "createdAt": "2020-04-01T11:51:50Z", "author": {"login": "aepfli"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDM0NDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1Mjo1MFrOF-9GvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMzoxMlrOF_Igww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NzE4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n          \n          \n            \n            \tpublic static boolean isAnyRepeatableAnnotationPresent(ExtensionContext context,", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401557180", "createdAt": "2020-04-01T11:52:50Z", "author": {"login": "aepfli"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NDA2Nw==", "bodyText": "Same as above, I suggest to rename this to isOneOf[Multiple]RepeatableAnnotationsPresent.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401744067", "createdAt": "2020-04-01T16:23:12Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NzE4MA=="}, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTQ4MzY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxOTozNVrOF_IXJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxOTozNVrOF_IXJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MTYwNw==", "bodyText": "Like @aepfli said: The current method name is foolish as it means that all of the given annotations must be present to return true, but the method does not check if all are present.\nAside the fact that method which return a boolean should be named in a way that they can be put into a yes/no question,  I suggest to rename the method to isOneOf[Multiple]AnnotationsPresent (not quite sure about the Multiple) to be associated to the parameters.\nThe current name and @aepfli's suggestion (isAnyAnnotationPresent) appeal that you recieve true if any annotation is present and you don't have to even specify which annotations should be searched for. Yes the context can be seen by the parameters, but as we have multiple similar method names a clear distinct method name is even more important in my opinion than if you have a single method.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401741607", "createdAt": "2020-04-01T16:19:35Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTUzMDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozMDozM1rOF_I0Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozMDozM1rOF_I0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0OTA5MA==", "bodyText": "Mental liveticker: Is it notable in the javadoc that the closest annotation is used? I don't think so, because we only want to check if any annotaiton is is present regardless where it is.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401749090", "createdAt": "2020-04-01T16:30:33Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU1OTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozNzo0N1rOF_JHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozNzo0N1rOF_JHEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1Mzg3NQ==", "bodyText": "annotations if they are", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401753875", "createdAt": "2020-04-01T16:37:47Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU2MTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozODoxM1rOF_JIJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozODoxM1rOF_JIJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NDE0OQ==", "bodyText": "the annotations are present", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401754149", "createdAt": "2020-04-01T16:38:13Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU5OTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0ODowOFrOF_JggQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoxODozMFrOGCOARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MDM4NQ==", "bodyText": "Would like to see a check like\nif(repeatable && !annotationType.isRepeatable() {\nthrew new IllegalArgumentException(String.format(\"The annotation  is not repeatable!\", annotationType.class.getName()));\n}\n\nbut as far as I know (and I couldn't find anything using Google) there's no check like this :/", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401760385", "createdAt": "2020-04-01T16:48:08Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, true);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the instances on the closest one are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findClosestRepeatableAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, false);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, true);\n+\t}\n+\n+\tstatic <A extends Annotation> Stream<A> findOnAnything(ExtensionContext context, Class<A> annotationType,\n+\t\t\tboolean repeatable, boolean stackable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3OTc4MQ==", "bodyText": "Check JUnit Jupiter's AnnotationUtils#findRepeatableAnnotations - they already check whether the annotation is really repeatable.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r404979781", "createdAt": "2020-04-07T17:18:30Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, true);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the instances on the closest one are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findClosestRepeatableAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, false);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, true);\n+\t}\n+\n+\tstatic <A extends Annotation> Stream<A> findOnAnything(ExtensionContext context, Class<A> annotationType,\n+\t\t\tboolean repeatable, boolean stackable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MDM4NQ=="}, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTYzNTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1NjoyN1rOF_J23w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1NjoyN1rOF_J23w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2NjExMQ==", "bodyText": "annotations if they are", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401766111", "createdAt": "2020-04-01T16:56:27Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, true);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTYzNzI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1Njo1NlrOF_J4LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1Njo1NlrOF_J4LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2NjQ0NA==", "bodyText": "annotations are present", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401766444", "createdAt": "2020-04-01T16:56:56Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, true);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTY2MjI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzowMjoyM1rOF_KHLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoyNDo1NVrOGCOP5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3MDI4NQ==", "bodyText": "At least findClosestRepeatableAnnotations (plural), but: The method only searches for one specific annotation and (maybe) returns multiple instances. So I would prefer a name like findClosestInstancesOfRepeatableAnnotation. Such a name makes it clear that you recieve multiple instances of the same type, but can not search for multiple, different annotations.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401770285", "createdAt": "2020-04-01T17:02:23Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, true);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the instances on the closest one are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findClosestRepeatableAnnotation(ExtensionContext context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4Mzc4MQ==", "bodyText": "Quoting the JavaDoc of, e.g., AnnotationSupport::findAnnotation:\n\nFind the first annotation of annotationType [...]\n\nIt seems that the word annotation is used to describe the instance of an annotation type. Since that also keeps the name shorter, I'll be going with that interpretation.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r404983781", "createdAt": "2020-04-07T17:24:55Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, true);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the instances on the closest one are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findClosestRepeatableAnnotation(ExtensionContext context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3MDI4NQ=="}, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTY3NTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzowNjoxMVrOF_KP0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoyNTozNVrOGCORdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3MjQ5OQ==", "bodyText": "The method only searches for one specific annotation and (maybe) returns multiple instances. So I would prefer a name like findClosestInstancesOfAnnotation. Such a name makes it clear that you recieve multiple instances of the same type, but can not search for multiple, different annotations.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401772499", "createdAt": "2020-04-01T17:06:11Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4NDE4MA==", "bodyText": "See above.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r404984180", "createdAt": "2020-04-07T17:25:35Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3MjQ5OQ=="}, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTY5NTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxMDozNlrOF_Kblg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxMDozNlrOF_Kblg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NTUxMA==", "bodyText": "I prefer javadocs on non-public methods too, especially when they are contain so much logic like this.\nI want also suggest to add some inline comments in this method, e.g. on the first return, so that it's clear what happens there, when someone new or anybody else looks as this class in a few days/weeks/...", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401775510", "createdAt": "2020-04-01T17:10:36Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, true);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the instances on the closest one are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findClosestRepeatableAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, false);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, true);\n+\t}\n+\n+\tstatic <A extends Annotation> Stream<A> findOnAnything(ExtensionContext context, Class<A> annotationType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTc1MDA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoyNTowM1rOF_K-Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoyNTowM1rOF_K-Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4NDM3NA==", "bodyText": "I'm not really happy with the names of the two boolean parameter repeatable and stackable.\nThe repeatable at first made me think that the method is repeatable callable, meaning it will call itself recursivly or not. But the parameter is used to determine if the annotation is repeatbale and if all instances have to be returned. So I suggest to rename it to returnAllInstances (prefered) or isAnnotationRepeatable.\nIt took me quite a long time to be sure what the stackable parameter is for. For me stackable means I can put multiple things on top and I was (exaggregated) wondering what the difference to repeatable should be. In the current context stackable means search on the outer types/containers. To make this more clearer I would suggest to rename it (everywhere) to somethink like doSearchOnOuterContainer.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401784374", "createdAt": "2020-04-01T17:25:03Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, true);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the instances on the closest one are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findClosestRepeatableAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, false);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, true);\n+\t}\n+\n+\tstatic <A extends Annotation> Stream<A> findOnAnything(ExtensionContext context, Class<A> annotationType,\n+\t\t\tboolean repeatable, boolean stackable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTc4MjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozMzozMlrOF_LS2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozMzozMlrOF_LS2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4OTY1OA==", "bodyText": "I suggest to rename this class to PioneerAnnotationsUtils and move the two methods at the bottom (distinctToSet and addButThrowIfDuplicate) to a new class called PioneerUtils. I would like to to this, because this class has been grown very large and almost all of it's methods are for finding / dealing with annotations. The number of methods wich do so is large enough to justify an own class.\nWhen doing so classes which are related to this (like the test class) must also be renamed and javadoc updated.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401789658", "createdAt": "2020-04-01T17:33:32Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTc5MDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozNTozNFrOF_LX0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozNTozNFrOF_LX0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5MDkzMQ==", "bodyText": "I'm voting to move the following two methods to a new class (see comment above about class name)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401790931", "createdAt": "2020-04-01T17:35:34Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.\n+\t */\n+\tpublic static boolean annotationsPresent(ExtensionContext context, Class<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.map(annotationType -> findClosestAnnotation(context, annotationType))\n+\t\t\t\t.anyMatch(Optional::isPresent);\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified repeatable\n+\t * {@code annotationTypes} is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing\n+\t * class belonging to the specified {@code context}.\n+\t */\n+\tpublic static boolean repeatableAnnotationsPresent(ExtensionContext context,\n+\t\t\tClass<? extends Annotation>... annotationTypes) {\n+\t\treturn Stream\n+\t\t\t\t.of(annotationTypes)\n+\t\t\t\t.flatMap(annotationType -> findClosestRepeatableAnnotation(context, annotationType))\n+\t\t\t\t.iterator()\n+\t\t\t\t.hasNext();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the closest one is returned.\n+\t */\n+\tpublic static <A extends Annotation> Optional<A> findClosestAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, false).findFirst();\n+\t}\n+\n+\t/**\n+\t * Returns the specified annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, false, true);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * the instances on the closest one are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findClosestRepeatableAnnotation(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, false);\n+\t}\n+\n+\t/**\n+\t * Returns the specified repeatable annotation if it is either <em>present</em>, <em>indirectly present</em>,\n+\t * or <em>meta-present</em> on the test element (method or class) or any enclosing class belonging\n+\t * to the specified {@code context}. If the annotation is present on more than one enclosing type,\n+\t * all instances are returned.\n+\t */\n+\tpublic static <A extends Annotation> Stream<A> findAllRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn findOnAnything(context, annotationType, true, true);\n+\t}\n+\n+\tstatic <A extends Annotation> Stream<A> findOnAnything(ExtensionContext context, Class<A> annotationType,\n+\t\t\tboolean repeatable, boolean stackable) {\n+\t\tList<A> onMethod = context\n+\t\t\t\t.getTestMethod()\n+\t\t\t\t.map(method -> findOnElement(method, annotationType, repeatable))\n+\t\t\t\t.orElse(Collections.emptyList());\n+\t\tif (!stackable && !onMethod.isEmpty())\n+\t\t\treturn onMethod.stream();\n+\t\tStream<A> onClass = findOnOuterClasses(context.getTestClass(), annotationType, repeatable, stackable);\n+\n+\t\treturn Stream.concat(onMethod.stream(), onClass);\n+\t}\n+\n+\tprivate static <A extends Annotation> List<A> findOnElement(AnnotatedElement element, Class<A> annotationType,\n+\t\t\tboolean repeatable) {\n+\t\tif (repeatable)\n+\t\t\treturn AnnotationSupport.findRepeatableAnnotations(element, annotationType);\n+\t\telse\n+\t\t\treturn AnnotationSupport\n+\t\t\t\t\t.findAnnotation(element, annotationType)\n+\t\t\t\t\t.map(Collections::singletonList)\n+\t\t\t\t\t.orElse(Collections.emptyList());\n+\t}\n+\n+\tprivate static <A extends Annotation> Stream<A> findOnOuterClasses(Optional<Class<?>> type, Class<A> annotationType,\n+\t\t\tboolean repeatable, boolean stackable) {\n+\t\tif (!type.isPresent())\n+\t\t\treturn Stream.empty();\n+\n+\t\tList<A> onThisClass = findOnElement(type.get(), annotationType, repeatable);\n+\t\tif (!stackable && !onThisClass.isEmpty())\n+\t\t\treturn onThisClass.stream();\n+\n+\t\tStream<A> onParentClass = findOnOuterClasses(type.map(Class::getEnclosingClass), annotationType, repeatable,\n+\t\t\tstackable);\n+\t\treturn Stream.concat(onThisClass.stream(), onParentClass);\n+\t}\n+\n+\t/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTgyNzA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/SystemPropertyExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NTo0NVrOF_LvUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NTo0NVrOF_LvUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5Njk0NA==", "bodyText": "Mental liveticker  Yesterday we discussed if this extension needs the closest or also all annotations fromt he outer containers and we came together that it should deal with all - but I checked the docs say it does not!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401796944", "createdAt": "2020-04-01T17:45:45Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/SystemPropertyExtension.java", "diffHunk": "@@ -38,36 +34,34 @@\n \n \t@Override\n \tpublic void beforeAll(ExtensionContext context) throws Exception {\n-\t\thandleSystemProperties(context);\n+\t\tclearAndSetSystemProperties(context);\n \t}\n \n \t@Override\n \tpublic void beforeEach(ExtensionContext context) throws Exception {\n-\t\tboolean present = Utils\n-\t\t\t\t.annotationPresentOnTestMethod(context, ClearSystemProperty.class, ClearSystemProperties.class,\n-\t\t\t\t\tSetSystemProperty.class, SetSystemProperties.class);\n-\t\tif (present) {\n-\t\t\thandleSystemProperties(context);\n-\t\t}\n+\t\tclearAndSetSystemProperties(context);\n \t}\n \n-\tprivate void handleSystemProperties(ExtensionContext context) {\n+\tprivate void clearAndSetSystemProperties(ExtensionContext context) {\n \t\tSet<String> propertiesToClear;\n \t\tMap<String, String> propertiesToSet;\n \t\ttry {\n-\t\t\tpropertiesToClear = findRepeatableAnnotations(context, ClearSystemProperty.class)\n-\t\t\t\t\t.stream()\n+\t\t\tpropertiesToClear = PioneerUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTgyODIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/SystemPropertyExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NjowNlrOF_LwIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NjowNlrOF_LwIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NzE1NQ==", "bodyText": "Little, but nice improvement!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401797155", "createdAt": "2020-04-01T17:46:06Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/SystemPropertyExtension.java", "diffHunk": "@@ -38,36 +34,34 @@\n \n \t@Override\n \tpublic void beforeAll(ExtensionContext context) throws Exception {\n-\t\thandleSystemProperties(context);\n+\t\tclearAndSetSystemProperties(context);\n \t}\n \n \t@Override\n \tpublic void beforeEach(ExtensionContext context) throws Exception {\n-\t\tboolean present = Utils\n-\t\t\t\t.annotationPresentOnTestMethod(context, ClearSystemProperty.class, ClearSystemProperties.class,\n-\t\t\t\t\tSetSystemProperty.class, SetSystemProperties.class);\n-\t\tif (present) {\n-\t\t\thandleSystemProperties(context);\n-\t\t}\n+\t\tclearAndSetSystemProperties(context);\n \t}\n \n-\tprivate void handleSystemProperties(ExtensionContext context) {\n+\tprivate void clearAndSetSystemProperties(ExtensionContext context) {\n \t\tSet<String> propertiesToClear;\n \t\tMap<String, String> propertiesToSet;\n \t\ttry {\n-\t\t\tpropertiesToClear = findRepeatableAnnotations(context, ClearSystemProperty.class)\n-\t\t\t\t\t.stream()\n+\t\t\tpropertiesToClear = PioneerUtils\n+\t\t\t\t\t.findClosestRepeatableAnnotation(context, ClearSystemProperty.class)\n \t\t\t\t\t.map(ClearSystemProperty::key)\n-\t\t\t\t\t.collect(Utils.distinctToSet());\n-\t\t\tpropertiesToSet = findRepeatableAnnotations(context, SetSystemProperty.class)\n-\t\t\t\t\t.stream()\n+\t\t\t\t\t.collect(PioneerUtils.distinctToSet());\n+\t\t\tpropertiesToSet = PioneerUtils\n+\t\t\t\t\t.findClosestRepeatableAnnotation(context, SetSystemProperty.class)\n \t\t\t\t\t.collect(toMap(SetSystemProperty::key, SetSystemProperty::value));\n \t\t\tpreventClearAndSetSameSystemProperties(propertiesToClear, propertiesToSet.keySet());\n \t\t}\n \t\tcatch (IllegalStateException ex) {\n \t\t\tthrow new ExtensionConfigurationException(\"Don't clear/set the same property more than once.\", ex);\n \t\t}\n \n+\t\tif (propertiesToClear.isEmpty() && propertiesToSet.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTgzOTExOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/PioneerUtilsTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0OTowMFrOF_L3Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0OTowMFrOF_L3Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5ODkzOA==", "bodyText": "Same suggestion as above: I vote to split the PioneerUtils class.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401798938", "createdAt": "2020-04-01T17:49:00Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/PioneerUtilsTests.java", "diffHunk": "@@ -0,0 +1,362 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.stream.Collector;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.platform.engine.test.event.ExecutionEvent;\n+import org.junit.platform.engine.test.event.ExecutionEventRecorder;\n+import org.junitpioneer.AbstractPioneerTestEngineTests;\n+\n+@DisplayName(\"JUnitPioneer utilities\")\n+class PioneerUtilsTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTg2Njg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1NjoyNFrOF_MIrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1NjoyNFrOF_MIrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMzQzNg==", "bodyText": "Descriptions of parameters and return value are missing in all javadocs inside the class.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/187#discussion_r401803436", "createdAt": "2020-04-01T17:56:24Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/PioneerUtils.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * Pioneer-internal utility class.\n+ */\n+class PioneerUtils {\n+\n+\tprivate PioneerUtils() {\n+\t\t// private constructor to prevent instantiation of utility class\n+\t}\n+\n+\t/**\n+\t * Determines whether an annotation of any of the specified {@code annotationTypes}\n+\t * is either <em>present</em>, <em>indirectly present</em>, or <em>meta-present</em>\n+\t * on the test element (method or class) or any enclosing class belonging to the\n+\t * specified {@code context}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff06979c31e7d85b7d13c679f7a474107673848c"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4200, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}