{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODA3OTYw", "number": 174, "title": "Add Annotation for System Environment Variables", "bodyText": "resolves #167 Add Annotation for System Environment Variables\n\nI hereby agree to the terms of the JUnit Pioneer Contributor License Agreement.", "createdAt": "2020-02-18T20:00:15Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174", "merged": true, "mergeCommit": {"oid": "9fc2a72dfe66d68e10f268dd37ea935f0db176c8"}, "closed": true, "closedAt": "2020-04-07T20:35:26Z", "author": {"login": "Hancho2009"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKJeElgFqTM2ODM0NDEwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVZHBHgH2gAyMzc2ODA3OTYwOjYyNTMzMDcyOWUyNzFmYzY5ZmMxYmI5ZjFmODAyNzA3MzhlNTNlNzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzQ0MTA0", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#pullrequestreview-368344104", "createdAt": "2020-03-03T21:39:06Z", "commit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTozOTowNlrOFxXeeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MzozOFrOFxXnpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTE3Ng==", "bodyText": "Cool that we test on an additional OS now! \ud83d\udc4d", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387309176", "createdAt": "2020-03-03T21:39:06Z", "author": {"login": "nipafx"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTM2MA==", "bodyText": "Why does this combination have to be excluded?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387309360", "createdAt": "2020-03-03T21:39:28Z", "author": {"login": "nipafx"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11\n   - openjdk8\n   - openjdk11\n \n+matrix:\n+  exclude:\n+    - os: osx\n+      jdk: openjdk8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTU0NA==", "bodyText": "Why do we test on another JDK 11?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387309544", "createdAt": "2020-03-03T21:39:47Z", "author": {"login": "nipafx"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwOTc4OQ==", "bodyText": "What does this do? \ud83d\ude0a", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387309789", "createdAt": "2020-03-03T21:40:17Z", "author": {"login": "nipafx"}, "path": "build.gradle.kts", "diffHunk": "@@ -89,6 +89,9 @@ yamlValidator {\n tasks {\n \n     test {\n+        testLogging {\n+            setExceptionFormat(\"full\")\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDYwOQ==", "bodyText": "I think we need a clearer warning that this uses reflection and may technically break on any minor Java release or on different OSes. Users should be aware that while this may be the best way to test env variables, it's not actually a good one. ;)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387310609", "createdAt": "2020-03-03T21:41:59Z", "author": {"login": "nipafx"}, "path": "docs/enviroment-variables.adoc", "diffHunk": "@@ -0,0 +1,60 @@\n+:page-title: @ClearEnvironmentVariable and @SetEnvironmentVariable\n+:page-description: JUnit Jupiter extensions to clear and set the values of environment variable\n+\n+The `@ClearEnvironmentVariable` and `@SetEnvironmentVariable` annotations can be used to clear, respectively, set the values of environment variables for a test execution.\n+Both annotations work on the test method and class level, are repeatable as well as combinable.\n+After the annotated method has been executed, the variables mentioned in the annotation will be restored to their original value or will be cleared if they didn't have one before.\n+Other environment variables that are changed during the test, are *not* restored.\n+\n+Warning: Your SecurityManager has to allow modifications.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDk0Mw==", "bodyText": "And OS X?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387310943", "createdAt": "2020-03-03T21:42:32Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n+/**\n+ * This class modifies the internals of the environment variables map with reflection.\n+ * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ */\n+public class EnvironmentVariableUtils {\n+\n+\t/**\n+\t * Set a value of an environment variable.\n+\t *\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n+\t */\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\t}\n+\n+\t/**\n+\t * Set the values of an environment variables.\n+\t *\n+\t * @param entries with name and new value of the environment variables\n+\t */\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\t}\n+\n+\t/**\n+\t * Clear an environment variable.\n+\t *\n+\t * @param name of the environment variable\n+\t */\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\t}\n+\n+\t/**\n+\t * Clears environment variables.\n+\t *\n+\t * @param names of the environment variables.\n+\t */\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\t}\n+\n+\tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n+\t\ttry {\n+\t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n+\t\t}\n+\t}\n+\n+\tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ReflectiveOperationException {\n+\t\ttry {\n+\t\t\tsetInProcessEnvironmentClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tsetInSystemEnvClass(consumer);\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * Works on Windows\n+\t */\n+\tprivate static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ClassNotFoundException, NoSuchFieldException {\n+\t\tClass<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theEnvironment\"));\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theCaseInsensitiveEnvironment\"));\n+\t}\n+\n+\t/*\n+\t * Works on Linux", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMTUyNQ==", "bodyText": "I don't think this should be public API. Was that an accident or on purpose?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387311525", "createdAt": "2020-03-03T21:43:38Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n+/**\n+ * This class modifies the internals of the environment variables map with reflection.\n+ * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ */\n+public class EnvironmentVariableUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDUxOTg2", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#pullrequestreview-369451986", "createdAt": "2020-03-05T10:25:58Z", "commit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNTo1OFrOFyOB2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNTo1OFrOFyOB2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMjk3MQ==", "bodyText": "I did not like in both versions that the exception from the setInProcessEnvironmentClass is not shown if it reaches this catch block. I looked into it and think we can work with addSuppressed.\n    public static void main(String[] args) {\n        try {\n            try {\n                throw new ReflectiveOperationException(\"First try\");\n            } catch (ReflectiveOperationException e) {\n                try {\n                    throw new ReflectiveOperationException(\"Second try\");\n                } catch (ReflectiveOperationException ex) {\n                    ex.addSuppressed(e);\n                    throw new RuntimeException(\"all\", ex);\n                }\n            }\n        } catch (RuntimeException runtimeE)\n        {\n            runtimeE.printStackTrace();\n        }\n    }\n\nOutput:\njava.lang.RuntimeException: all\n\tat org.junitpioneer.Test.main(Test.java:14)\nCaused by: java.lang.ReflectiveOperationException: Second try\n\tat org.junitpioneer.Test.main(Test.java:11)\n\tSuppressed: java.lang.ReflectiveOperationException: First try\n\t\tat org.junitpioneer.Test.main(Test.java:8)\n\nwhat do you think?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388202971", "createdAt": "2020-03-05T10:25:58Z", "author": {"login": "Hancho2009"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -16,64 +16,66 @@\n import java.util.Map;\n import java.util.function.Consumer;\n \n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n  * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n \t/**\n-\t * Set the values of an environment variables.\n+\t * Set a value of an environment variable.\n \t *\n-\t * @param entries with name and new value of the environment variables\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n \t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n \t}\n \n \t/**\n-\t * Clears environment variables.\n+\t * Set the values of an environment variables.\n \t *\n-\t * @param names of the environment variables.\n+\t * @param entries with name and new value of the environment variables\n \t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n \t}\n \n \t/**\n-\t * Set a value of an environment variable.\n+\t * Clear an environment variable.\n \t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n+\t * @param name of the environment variable\n \t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n \t}\n \n \t/**\n-\t * Clear an environment variable.\n+\t * Clears environment variables.\n \t *\n-\t * @param name of the environment variable\n+\t * @param names of the environment variables.\n \t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n \t}\n \n \tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n \t\ttry {\n \t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException e) {\n-\t\t\tthrow new RuntimeException(\"Could not modify environment variables\");\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDcwMTI0", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#pullrequestreview-369470124", "createdAt": "2020-03-05T10:52:13Z", "commit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1MjoxM1rOFyO6ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1MjoxM1rOFyO6ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNzUzOQ==", "bodyText": "that is new to me - cool change", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388217539", "createdAt": "2020-03-05T10:52:13Z", "author": {"login": "Hancho2009"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -16,64 +16,66 @@\n import java.util.Map;\n import java.util.function.Consumer;\n \n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n  * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n \t/**\n-\t * Set the values of an environment variables.\n+\t * Set a value of an environment variable.\n \t *\n-\t * @param entries with name and new value of the environment variables\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n \t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n \t}\n \n \t/**\n-\t * Clears environment variables.\n+\t * Set the values of an environment variables.\n \t *\n-\t * @param names of the environment variables.\n+\t * @param entries with name and new value of the environment variables\n \t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n \t}\n \n \t/**\n-\t * Set a value of an environment variable.\n+\t * Clear an environment variable.\n \t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n+\t * @param name of the environment variable\n \t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n \t}\n \n \t/**\n-\t * Clear an environment variable.\n+\t * Clears environment variables.\n \t *\n-\t * @param name of the environment variable\n+\t * @param names of the environment variables.\n \t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n \t}\n \n \tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n \t\ttry {\n \t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException e) {\n-\t\t\tthrow new RuntimeException(\"Could not modify environment variables\");\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n \t\t}\n \t}\n \n \tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows NoSuchFieldException {\n+\t\t\tthrows ReflectiveOperationException {\n \t\ttry {\n \t\t\tsetInProcessEnvironmentClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException | ClassNotFoundException e) {\n+\t\tcatch (ReflectiveOperationException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzkyNTkx", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#pullrequestreview-376392591", "createdAt": "2020-03-17T20:46:37Z", "commit": {"oid": "ddfb42ac5acf992ac6451831e26ff9f375ec0933"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzM3ODMw", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#pullrequestreview-379737830", "createdAt": "2020-03-23T19:09:11Z", "commit": {"oid": "ddfb42ac5acf992ac6451831e26ff9f375ec0933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTowOToxMVrOF6UKWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTowOToxMVrOF6UKWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MjA1Nw==", "bodyText": "Okay, so, I think this might be causing issues on osx?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r396692057", "createdAt": "2020-03-23T19:09:11Z", "author": {"login": "Michael1993"}, "path": ".travis.yml", "diffHunk": "@@ -1,9 +1,19 @@\n language: java\n \n+os:\n+  - linux\n+  - osx\n+\n jdk:\n+  - oraclejdk11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddfb42ac5acf992ac6451831e26ff9f375ec0933"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDc1ODcy", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#pullrequestreview-382475872", "createdAt": "2020-03-26T22:54:29Z", "commit": {"oid": "b424f1527fc35cdc3844e3411a80883b0991abc8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1NDoyOVrOF8dXkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1NDo1NlrOF8dYLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDA0OQ==", "bodyText": "What do you think about the increased visibility?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r398940049", "createdAt": "2020-03-26T22:54:29Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+class EnvironmentVariableExtension\n+\t\timplements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(EnvironmentVariableExtension.class);\n+\tprivate static final String BACKUP = \"Backup\";\n+\n+\tprivate static final AtomicBoolean REPORTED_WARNING = new AtomicBoolean(false);\n+\t// package visible to make accessible for tests\n+\tstatic final String WARNING_KEY = EnvironmentVariableExtension.class.getSimpleName();\n+\tstatic final String WARNING_VALUE = \"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b424f1527fc35cdc3844e3411a80883b0991abc8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDIwNQ==", "bodyText": "A bit weird to add this method just for tests. What do you think?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r398940205", "createdAt": "2020-03-26T22:54:56Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+class EnvironmentVariableExtension\n+\t\timplements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(EnvironmentVariableExtension.class);\n+\tprivate static final String BACKUP = \"Backup\";\n+\n+\tprivate static final AtomicBoolean REPORTED_WARNING = new AtomicBoolean(false);\n+\t// package visible to make accessible for tests\n+\tstatic final String WARNING_KEY = EnvironmentVariableExtension.class.getSimpleName();\n+\tstatic final String WARNING_VALUE = \"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\";\n+\n+\t@Override\n+\tpublic void beforeAll(ExtensionContext context) {\n+\t\thandleEnvironmentVariables(context);\n+\t}\n+\n+\t@Override\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\thandleEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\tprivate void handleEnvironmentVariables(ExtensionContext context) {\n+\t\tSet<String> variablesToClear;\n+\t\tMap<String, String> variablesToSet;\n+\t\ttry {\n+\t\t\tvariablesToClear = findRepeatableAnnotations(context, ClearEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(ClearEnvironmentVariable::key)\n+\t\t\t\t\t.collect(Utils.distinctToSet());\n+\t\t\tvariablesToSet = findRepeatableAnnotations(context, SetEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.collect(toMap(SetEnvironmentVariable::key, SetEnvironmentVariable::value));\n+\t\t\tpreventClearAndSetSameEnvironmentVariables(variablesToClear, variablesToSet.keySet());\n+\t\t}\n+\t\tcatch (IllegalStateException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Don't clear/set the same environment variable more than once.\",\n+\t\t\t\tex);\n+\t\t}\n+\n+\t\tstoreOriginalEnvironmentVariables(context, variablesToClear, variablesToSet.keySet());\n+\t\treportWarning(context);\n+\t\tEnvironmentVariableUtils.clear(variablesToClear);\n+\t\tEnvironmentVariableUtils.set(variablesToSet);\n+\t}\n+\n+\tprivate <A extends Annotation> List<A> findRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn context\n+\t\t\t\t.getElement()\n+\t\t\t\t.map(element -> AnnotationSupport.findRepeatableAnnotations(element, annotationType))\n+\t\t\t\t.orElseGet(Collections::emptyList);\n+\t}\n+\n+\tprivate void preventClearAndSetSameEnvironmentVariables(Collection<String> variablesToClear,\n+\t\t\tCollection<String> variablesToSet) {\n+\t\tvariablesToClear\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(variablesToSet::contains)\n+\t\t\t\t.reduce((k0, k1) -> k0 + \", \" + k1)\n+\t\t\t\t.ifPresent(duplicateKeys -> {\n+\t\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\"Cannot clear and set the following environment variable at the same time: \" + duplicateKeys);\n+\t\t\t\t});\n+\t}\n+\n+\tprivate void storeOriginalEnvironmentVariables(ExtensionContext context, Collection<String> clearVariables,\n+\t\t\tCollection<String> setVariables) {\n+\t\tcontext.getStore(NAMESPACE).put(BACKUP, new EnvironmentVariableBackup(clearVariables, setVariables));\n+\t}\n+\n+\tprivate void reportWarning(ExtensionContext context) {\n+\t\tboolean wasReported = REPORTED_WARNING.getAndSet(true);\n+\t\tif (!wasReported)\n+\t\t\tcontext.publishReportEntry(WARNING_KEY, WARNING_VALUE);\n+\t}\n+\n+\t@Override\n+\tpublic void afterEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\trestoreOriginalEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void afterAll(ExtensionContext context) {\n+\t\trestoreOriginalEnvironmentVariables(context);\n+\t}\n+\n+\tprivate void restoreOriginalEnvironmentVariables(ExtensionContext context) {\n+\t\tcontext.getStore(NAMESPACE).get(BACKUP, EnvironmentVariableBackup.class).restoreVariables();\n+\t}\n+\n+\t// this method is needed by the tests that verify whether the warning is correctly reported\n+\tstatic void resetWarning() {\n+\t\tREPORTED_WARNING.set(false);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b424f1527fc35cdc3844e3411a80883b0991abc8"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "committedDate": "2020-04-07T18:51:21Z", "message": "resolves #167\nAdd new annotations ClearEnvironmentVariable and SetEnvironmentVariable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bdf2bb02f3c2bb36fed9aaa1fab5955bb463610", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0bdf2bb02f3c2bb36fed9aaa1fab5955bb463610", "committedDate": "2020-04-07T18:51:21Z", "message": "#167\nput a warning into the .adoc\nput a warning into the Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1211821cf39b3d75df066cf31b9046d6bd79401a", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1211821cf39b3d75df066cf31b9046d6bd79401a", "committedDate": "2020-04-07T18:51:21Z", "message": "#167\nreplace spaces with tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff21f899ee32abf0850cc411b1fec16bdf7c782", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3ff21f899ee32abf0850cc411b1fec16bdf7c782", "committedDate": "2020-04-07T18:51:21Z", "message": "Apply new formatter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7a208e8df1ce77fcbd9900cf5c3cbc327d09cc5", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a7a208e8df1ce77fcbd9900cf5c3cbc327d09cc5", "committedDate": "2020-04-07T18:51:21Z", "message": "Update .travis.yml\n\n#167 add different os to travis ci config because environment variables can be implemented differently"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "222769ff7c08a72a817981070b6a9c56f65a75d7", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/222769ff7c08a72a817981070b6a9c56f65a75d7", "committedDate": "2020-04-07T18:51:21Z", "message": "Update .travis.yml\n\nadd oraclejdk8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b7711e34228c650943a158dfeaa34ab5f3b529", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d7b7711e34228c650943a158dfeaa34ab5f3b529", "committedDate": "2020-04-07T18:51:21Z", "message": "Update build.gradle.kts\n\nconfigure test logging to full exceptionFormat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "868f813a9222311558b79f8c52ffb16342bf4855", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/868f813a9222311558b79f8c52ffb16342bf4855", "committedDate": "2020-04-07T18:51:21Z", "message": "gradle set ExceptionFormat to full\n\ncorrect gradle kotlin style to set ExceptionFormat to full"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72171f8a65b8f52676d42b8739dcf726426f268", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e72171f8a65b8f52676d42b8739dcf726426f268", "committedDate": "2020-04-07T18:51:21Z", "message": "add NullPointerException catch\n\nto better understand why the tests fail on linux and osx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf8dbf17a30992ecb8df425803058a4bad340a83", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/cf8dbf17a30992ecb8df425803058a4bad340a83", "committedDate": "2020-04-07T18:51:21Z", "message": "fix for Linux\n\nSystem.getenv() retruns an object from which the field m needs to be aquired not from the class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce1dce5a143f613ef01f35a67807d2981339ddf2", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ce1dce5a143f613ef01f35a67807d2981339ddf2", "committedDate": "2020-04-07T18:51:21Z", "message": "fix paramter order and removed wrong condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0b705009743af10f974e093606a6a4692543e92", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d0b705009743af10f974e093606a6a4692543e92", "committedDate": "2020-04-07T18:51:21Z", "message": "remove os windows and jdk oraclejdk8 for oraclejdk11 and also add exclude for osx\n\n- the language 'java' is currently unsupported on the Windows Build Environment.\n- osx install-jdk.sh Expected feature release number in range of 9 to 15\n- linux oraclejdk8 install-jdk.sh Expected feature release number in range of 9 to 15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a4ba08fd7f556d661d6eeb100f3369d5b802560", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/9a4ba08fd7f556d661d6eeb100f3369d5b802560", "committedDate": "2020-04-07T18:51:21Z", "message": "remove jobs exclude because travis ci disapeared from the pull request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c2e8126335fa6a7c3895422406326768d8b6e0", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/02c2e8126335fa6a7c3895422406326768d8b6e0", "committedDate": "2020-04-07T18:51:21Z", "message": "add matrix exclude osx openjdk8\n\ninstall-jdk.sh Expected feature release number in range of 9 to 15, but got: 8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78b8af99521da55cde0814760ef0469e4e7d7197", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/78b8af99521da55cde0814760ef0469e4e7d7197", "committedDate": "2020-04-07T18:51:21Z", "message": "use singel import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abe1db0c894bbe3aa2b203817e76c1db0a330b74", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/abe1db0c894bbe3aa2b203817e76c1db0a330b74", "committedDate": "2020-04-07T18:51:21Z", "message": "spotlessApply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f96d2866dd09e4e77e01ce06ffd7cbd8f29ad9b2", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f96d2866dd09e4e77e01ce06ffd7cbd8f29ad9b2", "committedDate": "2020-04-07T18:51:21Z", "message": "minimal change to trigger travis ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b835c7f1b5b6b3ca2774063b339d93601e9f0b3c", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b835c7f1b5b6b3ca2774063b339d93601e9f0b3c", "committedDate": "2020-04-07T18:51:21Z", "message": "revert minimal change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5141fa48ca8e09a3618709707932b6f8496024ca", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/5141fa48ca8e09a3618709707932b6f8496024ca", "committedDate": "2020-04-07T18:51:21Z", "message": "Make smnall edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a81c03fd343caeee80768dc6a74ca5cdd6c9ee3", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3a81c03fd343caeee80768dc6a74ca5cdd6c9ee3", "committedDate": "2020-04-07T18:51:21Z", "message": "- class should not be public api\n- changed exception handling so no exception is hidden if could not modify environment variables\n- adjust comment setInSystemEnvClass because it also works on osx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc419113373bf9cbea3c603df27c7b5d8193504", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6bc419113373bf9cbea3c603df27c7b5d8193504", "committedDate": "2020-04-07T18:51:21Z", "message": "Revert \"- class should not be public api\"\n\nThis reverts commit 49ff6ee3d7a9ab53a953704efd0b3d1bcd148ab5."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d428c8b6c9df6566a3d92b28b48b807f3ec1f001", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d428c8b6c9df6566a3d92b28b48b807f3ec1f001", "committedDate": "2020-04-07T18:51:21Z", "message": "CR\n\n- class should not be public api \u2026\n- changed exception handling so no exception is hidden if could not modify environment variables\n- adjust comment setInSystemEnvClass because it also works on osx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f387d9345c10824f0bcee34b8df50b15cda8881e", "author": {"user": {"login": "Hancho2009", "name": null}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f387d9345c10824f0bcee34b8df50b15cda8881e", "committedDate": "2020-04-07T18:51:21Z", "message": "Update .travis.yml\n\nremove oraclejdk11 because openjdk11 is probably very similar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5d20c98bc6e462ac9ba2e7575c27b18da61079", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3e5d20c98bc6e462ac9ba2e7575c27b18da61079", "committedDate": "2020-04-07T18:51:21Z", "message": "Report warning once per test suite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e403afc97f5a4160c749297338675bbc11412f37", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e403afc97f5a4160c749297338675bbc11412f37", "committedDate": "2020-04-07T19:30:59Z", "message": "Update to `PioneerAnnotationUtils`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ed4419025033bc7bf92bdb67ca05d9f684d7665", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8ed4419025033bc7bf92bdb67ca05d9f684d7665", "committedDate": "2020-04-07T19:30:59Z", "message": "Add reflection warning to documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30eb11588f78f63c66f3bca9c41c57cc450cbd79", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/30eb11588f78f63c66f3bca9c41c57cc450cbd79", "committedDate": "2020-04-07T19:31:00Z", "message": "Bump to version 0.6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c50acd403b5685687b66d384292c0b014e4b4bdc", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c50acd403b5685687b66d384292c0b014e4b4bdc", "committedDate": "2020-04-07T19:33:50Z", "message": "Revert travis.yml changes (we use GitHub Actions now)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f8e1e6ee13558ad47ecd3e2e2f913518b2a1306", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3f8e1e6ee13558ad47ecd3e2e2f913518b2a1306", "committedDate": "2020-04-07T19:39:37Z", "message": "Remove method from `EnvironmentVariableExtension` (only existed for tests)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dc5a4acc0dbfacca3c31794d1abc3c7edc58310", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0dc5a4acc0dbfacca3c31794d1abc3c7edc58310", "committedDate": "2020-04-07T20:04:37Z", "message": "Suppress Sonar warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "625330729e271fc69fc1bb9f1f80270738e53e71", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/625330729e271fc69fc1bb9f1f80270738e53e71", "committedDate": "2020-04-07T20:13:47Z", "message": "Use more general `ReflectiveOperationException`"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3699, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}