{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5Nzk0NjMx", "number": 221, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozMTozM1rODvO5BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDowMjo1MVrOD0aZ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODUzNjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozMTozM1rOGBiehg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoyNjo0N1rOGCL4Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjYzMA==", "bodyText": "Can anyone help me how to implement this isPresent check (violation is, that the following get() is used without checking if the value is present)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r404266630", "createdAt": "2020-04-06T17:31:33Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -55,6 +55,7 @@\n \t\t\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n \t\t\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))\n \t\t\t\t\t\t.collect(Collectors.toList()))\n+\t\t\t\t// .filter(Optional::isPresent) <-- Can not accessed in a static context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a445855e7e69f97fd0e1db3e3474964b2e908692"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NTQxMA==", "bodyText": "haha flatmapping optionals in later java versions is fixing that actually. not sure how to best tackle this", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r404295410", "createdAt": "2020-04-06T18:19:37Z", "author": {"login": "aepfli"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -55,6 +55,7 @@\n \t\t\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n \t\t\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))\n \t\t\t\t\t\t.collect(Collectors.toList()))\n+\t\t\t\t// .filter(Optional::isPresent) <-- Can not accessed in a static context", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjYzMA=="}, "originalCommit": {"oid": "a445855e7e69f97fd0e1db3e3474964b2e908692"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3OTkwOQ==", "bodyText": "The simplest solution would be to just say .orElse(Collections.emptyList()) and let it throw a PreconditionViolationException?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r404679909", "createdAt": "2020-04-07T09:47:52Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -55,6 +55,7 @@\n \t\t\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n \t\t\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))\n \t\t\t\t\t\t.collect(Collectors.toList()))\n+\t\t\t\t// .filter(Optional::isPresent) <-- Can not accessed in a static context", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjYzMA=="}, "originalCommit": {"oid": "a445855e7e69f97fd0e1db3e3474964b2e908692"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4MjQ4Mw==", "bodyText": "I mean, the map should have an empty list anyways(?), so (while somewhat redundant) this is basically the same?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r404682483", "createdAt": "2020-04-07T09:52:02Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -55,6 +55,7 @@\n \t\t\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n \t\t\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))\n \t\t\t\t\t\t.collect(Collectors.toList()))\n+\t\t\t\t// .filter(Optional::isPresent) <-- Can not accessed in a static context", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjYzMA=="}, "originalCommit": {"oid": "a445855e7e69f97fd0e1db3e3474964b2e908692"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NDkwMg==", "bodyText": ".orElse(Collections.emptyList())\n\nYou mean to replace the .get() with orElse(Collections.emptyList()) ?\nWhen I change that, tests are all passing. So it seems to work. Waiting for answer of @Michael1993 until I update the draft.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r404944902", "createdAt": "2020-04-07T16:26:47Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -55,6 +55,7 @@\n \t\t\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n \t\t\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))\n \t\t\t\t\t\t.collect(Collectors.toList()))\n+\t\t\t\t// .filter(Optional::isPresent) <-- Can not accessed in a static context", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjYzMA=="}, "originalCommit": {"oid": "a445855e7e69f97fd0e1db3e3474964b2e908692"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjIzNTEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNTozNFrOGDmnjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNTo0NVrOGDoK0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTYyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception; // NOSNAR\n          \n          \n            \n            \t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception; // NOSONAR", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r406431629", "createdAt": "2020-04-09T19:35:34Z", "author": {"login": "aepfli"}, "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "diffHunk": "@@ -125,7 +125,8 @@\n \t\t *\n \t\t * @return the parent directory for all temporary directories\n \t\t */\n-\t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception;\n+\t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception; // NOSNAR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fca1d14de92308669709108d381d9507a5f135f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NzA0MA==", "bodyText": "Ops yes. And I think my other // NOSONAR where wrong too, but not sure. Anyway changed them to //NOSONAR", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r406457040", "createdAt": "2020-04-09T20:25:45Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "diffHunk": "@@ -125,7 +125,8 @@\n \t\t *\n \t\t * @return the parent directory for all temporary directories\n \t\t */\n-\t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception;\n+\t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception; // NOSNAR", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTYyOQ=="}, "originalCommit": {"oid": "8fca1d14de92308669709108d381d9507a5f135f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzg3ODk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOToxOTowMFrOGD1p6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToyNjoyOFrOGD4CvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Nzk5NQ==", "bodyText": "What purpose? Shouldn't that be included in the comment?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r406677995", "createdAt": "2020-04-10T09:19:00Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "diffHunk": "@@ -345,6 +346,7 @@ private void tryToDeleteOnExit(Path path) {\n \t\t\t\tpath.toFile().deleteOnExit();\n \t\t\t}\n \t\t\tcatch (UnsupportedOperationException ignore) {\n+\t\t\t\t// this exception shall be ignored by purpose", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f99f51fd0b64ac4f8cc3fc0542fcb87f17f0a77b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxNzExNg==", "bodyText": "What purpose? Shouldn't that be included in the comment?\n\nTo be honest I'm not sure what the exactly purpose is, but as the method is only called in on method which creates an own exception, I worte that down", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r406717116", "createdAt": "2020-04-10T11:26:28Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "diffHunk": "@@ -345,6 +346,7 @@ private void tryToDeleteOnExit(Path path) {\n \t\t\t\tpath.toFile().deleteOnExit();\n \t\t\t}\n \t\t\tcatch (UnsupportedOperationException ignore) {\n+\t\t\t\t// this exception shall be ignored by purpose", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Nzk5NQ=="}, "originalCommit": {"oid": "f99f51fd0b64ac4f8cc3fc0542fcb87f17f0a77b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTUyMzQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxNjozMlrOGFfQzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozMTowNlrOGGv5ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwODI3MQ==", "bodyText": "I don't like having these superfluous parenthesis in our code. They add little except almost empty lines.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r408408271", "createdAt": "2020-04-14T20:16:32Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -92,8 +92,9 @@ private void storeOriginalEnvironmentVariables(ExtensionContext context, Collect\n \n \tprivate void reportWarning(ExtensionContext context) {\n \t\tboolean wasReported = REPORTED_WARNING.getAndSet(true);\n-\t\tif (!wasReported)\n+\t\tif (!wasReported) {\n \t\t\tcontext.publishReportEntry(WARNING_KEY, WARNING_VALUE);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMDE1Nw==", "bodyText": "but i do not think they are sonar related - sonar is not complaining about those in the gui", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r408610157", "createdAt": "2020-04-15T06:33:11Z", "author": {"login": "aepfli"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -92,8 +92,9 @@ private void storeOriginalEnvironmentVariables(ExtensionContext context, Collect\n \n \tprivate void reportWarning(ExtensionContext context) {\n \t\tboolean wasReported = REPORTED_WARNING.getAndSet(true);\n-\t\tif (!wasReported)\n+\t\tif (!wasReported) {\n \t\t\tcontext.publishReportEntry(WARNING_KEY, WARNING_VALUE);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwODI3MQ=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzYyMQ==", "bodyText": "Maybe I just saw this while doing something else in the code and edited it then. For me (personally) they improve readability of the code. And I like them because I had to debug an massive amount of bugs where at the end it comes down that someone thought \"na I don't need parantheses..\" and broke the code.\nBut as @aepfli mentions there is no rule which enforces the one or the other, we can go with both as the author wants to use it.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r408967621", "createdAt": "2020-04-15T16:17:29Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -92,8 +92,9 @@ private void storeOriginalEnvironmentVariables(ExtensionContext context, Collect\n \n \tprivate void reportWarning(ExtensionContext context) {\n \t\tboolean wasReported = REPORTED_WARNING.getAndSet(true);\n-\t\tif (!wasReported)\n+\t\tif (!wasReported) {\n \t\t\tcontext.publishReportEntry(WARNING_KEY, WARNING_VALUE);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwODI3MQ=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyOTQwMw==", "bodyText": "I just checked it. It was added by my save action plugin. I have only a very few of its action enabled, but as written that I really like having paranthesis for blocks.\n[edit 2]\nFor example this blocks is more readable to me with paranethesis as the exception and the combined break out of the function is more visible:\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\trepetitionsSoFar++;\n\t\t\treturn new RepeatFailedTestInvocationContext();\n\nto\n\t\t\tif (!hasNext())` {\n\t\t\t\tthrow new NoSuchElementException();\n                        }\n\t\t\trepetitionsSoFar++;\n\t\t\treturn new RepeatFailedTestInvocationContext();\n\n[/edit2]\nBut as wished I disabled it to revert this one. So now at this if the paranthesis are gone again, but in a similar block a few lines below they are still there so we have an inconsistency there now (which I never had touched, so they are from the original author). [edit: I reverted all those changes I made /edit]\nSo you see were this ends? We should either define if we want to force using paranthesis or not for blocks and force them by a rule or we don't force the one or the other and let the authors use their personal like.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r409729403", "createdAt": "2020-04-16T17:31:06Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -92,8 +92,9 @@ private void storeOriginalEnvironmentVariables(ExtensionContext context, Collect\n \n \tprivate void reportWarning(ExtensionContext context) {\n \t\tboolean wasReported = REPORTED_WARNING.getAndSet(true);\n-\t\tif (!wasReported)\n+\t\tif (!wasReported) {\n \t\t\tcontext.publishReportEntry(WARNING_KEY, WARNING_VALUE);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwODI3MQ=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTUyNzU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxNzo1MVrOGFfTnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODoyOToyNVrOGGyCPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwODk4OQ==", "bodyText": "__ means \"nobody cares about this variable\" - I want to keep using that.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r408408989", "createdAt": "2020-04-14T20:17:51Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "diffHunk": "@@ -59,8 +60,8 @@ private static FailedTestRepeater repeaterFor(ExtensionContext context) {\n \t\tMethod repeatedTest = context.getRequiredTestMethod();\n \t\treturn context\n \t\t\t\t.getStore(NAMESPACE)\n-\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(), __ -> FailedTestRepeater.createFor(repeatedTest),\n-\t\t\t\t\tFailedTestRepeater.class);\n+\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(),\n+\t\t\t\t\tdefaultCreator -> FailedTestRepeater.createFor(repeatedTest), FailedTestRepeater.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODM2MA==", "bodyText": "Never saw this before and was wondering that it's even allowed. Had to google it up to know that it's a way to show that the variable is not needed.\n@aepfli Please change the rule to allow the underscore variables. (two and three underscores are needed)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r408968360", "createdAt": "2020-04-15T16:18:36Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "diffHunk": "@@ -59,8 +60,8 @@ private static FailedTestRepeater repeaterFor(ExtensionContext context) {\n \t\tMethod repeatedTest = context.getRequiredTestMethod();\n \t\treturn context\n \t\t\t\t.getStore(NAMESPACE)\n-\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(), __ -> FailedTestRepeater.createFor(repeatedTest),\n-\t\t\t\t\tFailedTestRepeater.class);\n+\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(),\n+\t\t\t\t\tdefaultCreator -> FailedTestRepeater.createFor(repeatedTest), FailedTestRepeater.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwODk4OQ=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NTY4OA==", "bodyText": "adapted the regex to ^([a-z][a-zA-Z0-9]*|__)$", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r409045688", "createdAt": "2020-04-15T18:25:31Z", "author": {"login": "aepfli"}, "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "diffHunk": "@@ -59,8 +60,8 @@ private static FailedTestRepeater repeaterFor(ExtensionContext context) {\n \t\tMethod repeatedTest = context.getRequiredTestMethod();\n \t\treturn context\n \t\t\t\t.getStore(NAMESPACE)\n-\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(), __ -> FailedTestRepeater.createFor(repeatedTest),\n-\t\t\t\t\tFailedTestRepeater.class);\n+\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(),\n+\t\t\t\t\tdefaultCreator -> FailedTestRepeater.createFor(repeatedTest), FailedTestRepeater.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwODk4OQ=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzAxNA==", "bodyText": "adapted the regex to ^([a-z][a-zA-Z0-9]*|__)$\n\nAs written only double underscore is not enough.\n\tpublic TempDirectory() {\n\t\tthis((__, ___, dirPrefix) -> createDefaultTempDir(dirPrefix));\n\t}\n``", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r409733014", "createdAt": "2020-04-16T17:37:07Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "diffHunk": "@@ -59,8 +60,8 @@ private static FailedTestRepeater repeaterFor(ExtensionContext context) {\n \t\tMethod repeatedTest = context.getRequiredTestMethod();\n \t\treturn context\n \t\t\t\t.getStore(NAMESPACE)\n-\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(), __ -> FailedTestRepeater.createFor(repeatedTest),\n-\t\t\t\t\tFailedTestRepeater.class);\n+\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(),\n+\t\t\t\t\tdefaultCreator -> FailedTestRepeater.createFor(repeatedTest), FailedTestRepeater.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwODk4OQ=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc2NDQxNQ==", "bodyText": "meh than i will add more than 2 _", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r409764415", "createdAt": "2020-04-16T18:29:25Z", "author": {"login": "aepfli"}, "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "diffHunk": "@@ -59,8 +60,8 @@ private static FailedTestRepeater repeaterFor(ExtensionContext context) {\n \t\tMethod repeatedTest = context.getRequiredTestMethod();\n \t\treturn context\n \t\t\t\t.getStore(NAMESPACE)\n-\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(), __ -> FailedTestRepeater.createFor(repeatedTest),\n-\t\t\t\t\tFailedTestRepeater.class);\n+\t\t\t\t.getOrComputeIfAbsent(repeatedTest.toString(),\n+\t\t\t\t\tdefaultCreator -> FailedTestRepeater.createFor(repeatedTest), FailedTestRepeater.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwODk4OQ=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTUyOTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxODoyOVrOGFfVBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozODoxM1rOGGwKGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwOTM1MA==", "bodyText": "The this. are unnecessary, but IMO they improve readability by keeping the three assignments aligned for easy top-down reading.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r408409350", "createdAt": "2020-04-14T20:18:29Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "diffHunk": "@@ -72,8 +73,8 @@ private static FailedTestRepeater repeaterFor(ExtensionContext context) {\n \n \t\tprivate FailedTestRepeater(int maxRepetitions) {\n \t\t\tthis.maxRepetitions = maxRepetitions;\n-\t\t\tthis.repetitionsSoFar = 0;\n-\t\t\tthis.exceptionsSoFar = 0;\n+\t\t\trepetitionsSoFar = 0;\n+\t\t\texceptionsSoFar = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODk4Mg==", "bodyText": "I can follow your argumentation and suggest that @aepfli disables the rule", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r408968982", "createdAt": "2020-04-15T16:19:27Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "diffHunk": "@@ -72,8 +73,8 @@ private static FailedTestRepeater repeaterFor(ExtensionContext context) {\n \n \t\tprivate FailedTestRepeater(int maxRepetitions) {\n \t\t\tthis.maxRepetitions = maxRepetitions;\n-\t\t\tthis.repetitionsSoFar = 0;\n-\t\t\tthis.exceptionsSoFar = 0;\n+\t\t\trepetitionsSoFar = 0;\n+\t\t\texceptionsSoFar = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwOTM1MA=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NTM5Mw==", "bodyText": "hmm, is there really a rule, i cant find a violation in sonarqube", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r409045393", "createdAt": "2020-04-15T18:24:58Z", "author": {"login": "aepfli"}, "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "diffHunk": "@@ -72,8 +73,8 @@ private static FailedTestRepeater repeaterFor(ExtensionContext context) {\n \n \t\tprivate FailedTestRepeater(int maxRepetitions) {\n \t\t\tthis.maxRepetitions = maxRepetitions;\n-\t\t\tthis.repetitionsSoFar = 0;\n-\t\t\tthis.exceptionsSoFar = 0;\n+\t\t\trepetitionsSoFar = 0;\n+\t\t\texceptionsSoFar = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwOTM1MA=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzY1OQ==", "bodyText": "Again save actions", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r409733659", "createdAt": "2020-04-16T17:38:13Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/RepeatFailedTestExtension.java", "diffHunk": "@@ -72,8 +73,8 @@ private static FailedTestRepeater repeaterFor(ExtensionContext context) {\n \n \t\tprivate FailedTestRepeater(int maxRepetitions) {\n \t\t\tthis.maxRepetitions = maxRepetitions;\n-\t\t\tthis.repetitionsSoFar = 0;\n-\t\t\tthis.exceptionsSoFar = 0;\n+\t\t\trepetitionsSoFar = 0;\n+\t\t\texceptionsSoFar = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwOTM1MA=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTU1NjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyNjowN1rOGFflog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDoyM1rOGGBhKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzYwMg==", "bodyText": "It's good to avoid to just get(), but there's a comment a few lines above:\n\n// since it's a method annotation, the element will always be present\n\nThis justifies why the Optional can never be empty. I think if it is, some central assumption of the extension no longer holds and this should explode. Probably with an orElseThrow(IllegalStateException::new), though.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r408413602", "createdAt": "2020-04-14T20:26:07Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -55,7 +56,7 @@\n \t\t\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n \t\t\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))\n \t\t\t\t\t\t.collect(Collectors.toList()))\n-\t\t\t\t.get();\n+\t\t\t\t.orElse(Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTUxMg==", "bodyText": "I like the orElseThrow(IllegalStateException::new) thing! \ud83d\udc4d", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r408969512", "createdAt": "2020-04-15T16:20:23Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -55,7 +56,7 @@\n \t\t\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n \t\t\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))\n \t\t\t\t\t\t.collect(Collectors.toList()))\n-\t\t\t\t.get();\n+\t\t\t\t.orElse(Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzYwMg=="}, "originalCommit": {"oid": "b5ae3882245a228dab2aafc7471a39aaa8ea58dc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzk3MTM0OnYy", "diffSide": "LEFT", "path": "src/main/java/org/junitpioneer/vintage/ExpectedExceptionExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1MzowN1rOGGwtyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1MzowN1rOGGwtyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0Mjc5Mw==", "bodyText": "@nicolaiparlog You were wondering why this was changes and you thought it was because the lower case at the start of the line. No it's not. The ; are the violation as sonarcube thinks it's outcommented code, see here", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r409742793", "createdAt": "2020-04-16T17:53:07Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/vintage/ExpectedExceptionExtension.java", "diffHunk": "@@ -44,14 +44,14 @@ public void handleTestExecutionException(ExtensionContext context, Throwable thr\n \t\t\t\t.filter(expected -> expected.isInstance(throwable))\n \t\t\t\t.isPresent();\n \n-\t\t// in the `afterTestExecution` callback we have to pass or fail the test\n-\t\t// depending on whether the exception was thrown or not;\n-\t\t// to do that we need to register whether the exception was thrown;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c65d097e65413b2aee45b00a2848b8442bf8bd01"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjgwNzMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTo1MjoxNlrOGJVv_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTo1MjoxNlrOGJVv_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0NjcxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception; //NOSONAR\n          \n          \n            \n            \t\t// Excluded from sonar as java.util.concurrent.Callable<V> is root of this generic exception\n          \n          \n            \n            \t\t// excluded from Sonar as java.util.concurrent.Callable<V> is root of this generic exception\n          \n          \n            \n            \t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception; //NOSONAR", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r412446719", "createdAt": "2020-04-21T19:52:16Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "diffHunk": "@@ -125,7 +125,8 @@\n \t\t *\n \t\t * @return the parent directory for all temporary directories\n \t\t */\n-\t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception;\n+\t\tPath get(ParameterContext parameterContext, ExtensionContext extensionContext) throws Exception; //NOSONAR\n+\t\t// Excluded from sonar as java.util.concurrent.Callable<V> is root of this generic exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec4a695c3cb7d96cd41bcb736461fa542d92163"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjg0ODI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDowMjowMFrOGJWINw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDowMjowMFrOGJWINw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MjkxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t// this exception shall be ignored by purpose this method is only called in the\n          \n          \n            \n            \t\t\t\t// stream of the method \"createIOExceptionWithAttachedFailures\".\n          \n          \n            \n            \t\t\t\t// That method overrules this \"UnsupportedOperationException\" anyway.\n          \n          \n            \n            \t\t\t\t// If the `Path` can't be turned into a `File` (which throws the UOE),\n          \n          \n            \n            \t\t\t\t// it can't be registered to be deleted when the JVM terminates.\n          \n          \n            \n            \t\t\t\t// Because deleting on JVM termination is just a last ditch effort and\n          \n          \n            \n            \t\t\t\t// nicety towards the user, it is entirely optional and shouldn't affect\n          \n          \n            \n            \t\t\t\t// the extension's behavior.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r412452919", "createdAt": "2020-04-21T20:02:00Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/TempDirectory.java", "diffHunk": "@@ -345,6 +346,9 @@ private void tryToDeleteOnExit(Path path) {\n \t\t\t\tpath.toFile().deleteOnExit();\n \t\t\t}\n \t\t\tcatch (UnsupportedOperationException ignore) {\n+\t\t\t\t// this exception shall be ignored by purpose this method is only called in the\n+\t\t\t\t// stream of the method \"createIOExceptionWithAttachedFailures\".\n+\t\t\t\t// That method overrules this \"UnsupportedOperationException\" anyway.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec4a695c3cb7d96cd41bcb736461fa542d92163"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjg0OTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/vintage/ExpectedExceptionExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDowMjoyOVrOGJWJOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDowMjoyOVrOGJWJOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MzE3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t// This extension is not in charge of the throwable, so we need to rethrow\n          \n          \n            \n            \t\t\t// this extension is not in charge of the throwable, so we need to rethrow", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r412453179", "createdAt": "2020-04-21T20:02:29Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/vintage/ExpectedExceptionExtension.java", "diffHunk": "@@ -44,14 +44,14 @@ public void handleTestExecutionException(ExtensionContext context, Throwable thr\n \t\t\t\t.filter(expected -> expected.isInstance(throwable))\n \t\t\t\t.isPresent();\n \n-\t\t// in the `afterTestExecution` callback we have to pass or fail the test\n-\t\t// depending on whether the exception was thrown or not;\n-\t\t// to do that we need to register whether the exception was thrown;\n-\t\t// (NOTE that if no exception was thrown, NOTHING is registered)\n+\t\t// In the `afterTestExecution` callback we have to pass or fail the test\n+\t\t// depending on whether the exception was thrown or not.\n+\t\t// To do that we need to register whether the exception was thrown\n+\t\t// (NOTE that if no exception was thrown, NOTHING is registered).\n \t\tif (throwableMatchesExpectedException) {\n \t\t\tstoreExceptionStatus(context, EXCEPTION.WAS_THROWN_AS_EXPECTED);\n \t\t} else {\n-\t\t\t// this extension is not in charge of the throwable, so we need to rethrow;\n+\t\t\t// This extension is not in charge of the throwable, so we need to rethrow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec4a695c3cb7d96cd41bcb736461fa542d92163"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjg1MTUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/vintage/ExpectedExceptionExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDowMjo1MVrOGJWKGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDowMjo1MVrOGJWKGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MzQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t// The exception was thrown as expected so there is nothing to do\n          \n          \n            \n            \t\t\t\t// the exception was thrown as expected so there is nothing to do", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/221#discussion_r412453403", "createdAt": "2020-04-21T20:02:51Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/vintage/ExpectedExceptionExtension.java", "diffHunk": "@@ -67,13 +67,14 @@ public void afterTestExecution(ExtensionContext context) throws Exception {\n \t\t\t\t\t\t\tthrow error;\n \t\t\t\t\t\t});\n \t\t\tcase WAS_THROWN_AS_EXPECTED:\n-\t\t\t\t// the exception was thrown as expected so there is nothing to do\n+\t\t\t\t// The exception was thrown as expected so there is nothing to do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec4a695c3cb7d96cd41bcb736461fa542d92163"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4232, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}