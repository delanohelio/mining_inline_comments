{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTQ5MjYx", "number": 285, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNzoyNzo1M1rOEHYE7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo1MjowM1rOEVXGZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTY5OTY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/ExecutionResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNzoyNzo1M1rOGmtObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNzoyNzo1M1rOGmtObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MDA0NQ==", "bodyText": "Is this a typo? allTypNames instead of allTypeNames", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r443240045", "createdAt": "2020-06-21T17:27:53Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/ExecutionResults.java", "diffHunk": "@@ -55,6 +57,20 @@\n \t\t\t\t.execute();\n \t}\n \n+\tExecutionResults(Class<?> testClass, String testMethodName, Class[] methodParameterTypes) {\n+\n+\t\tString allTypNames = Arrays", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142c680a6c9b19abcc9b1138d9b46426c7818c9d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTcwNzUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/ExecutionResults.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNzo0MTozOFrOGmtSew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODowNDoyMFrOGnLgUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MTA4Mw==", "bodyText": "This constructor seems unnecessary - you could just join the canonical class names in the factory method and call the constructor that takes a String?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r443241083", "createdAt": "2020-06-21T17:41:38Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/ExecutionResults.java", "diffHunk": "@@ -55,6 +57,20 @@\n \t\t\t\t.execute();\n \t}\n \n+\tExecutionResults(Class<?> testClass, String testMethodName, Class[] methodParameterTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142c680a6c9b19abcc9b1138d9b46426c7818c9d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNjE0Nw==", "bodyText": "This constructor seems unnecessary - you could just join the canonical class names in the factory method and call the constructor that takes a String?\n\nIts explicit requested by @nicolaiparlog . I could not find a place where I could use it, but as he requested it he most probably has something/somewhere in mind to use it.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r443736147", "createdAt": "2020-06-22T18:04:20Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/ExecutionResults.java", "diffHunk": "@@ -55,6 +57,20 @@\n \t\t\t\t.execute();\n \t}\n \n+\tExecutionResults(Class<?> testClass, String testMethodName, Class[] methodParameterTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MTA4Mw=="}, "originalCommit": {"oid": "142c680a6c9b19abcc9b1138d9b46426c7818c9d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTcwNzkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNzo0Mjo0MlrOGmtSww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNzo0Mjo0MlrOGmtSww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MTE1NQ==", "bodyText": "These two methods should be merged by using the Class<?>... as the last parameter type. Which should throw an exception if no last parameter is passed (or maybe just call executeTestMethod as an attempt to \"fix\" the bad call?).\nAlternatively, you could make it like this:\npublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName, Class<?> firstParameter, Class<?>... additionalParameters)\n\nThis ensures at least one class object is always passed to the method but is much more cumbersome. Method signature might be confusing too.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r443241155", "createdAt": "2020-06-21T17:42:42Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -46,4 +46,30 @@ public static ExecutionResults executeTestMethodWithParameterTypes(Class<?> test\n \t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n \t}\n \n+\t/**\n+\t * Returns the execution results of the given method of a given test class.\n+\t *\n+\t * @param testClass Name of the test class\n+\t * @param testMethodName Name of the test method (of the given class)\n+\t * @param methodParameterTypes Array containing the types of for the parameters\n+\t * @return The execution results\n+\t */\n+\tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142c680a6c9b19abcc9b1138d9b46426c7818c9d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjI4NTAzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMToxNjowMlrOGp1D9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoxNjoxNVrOGv9WVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNDE2NA==", "bodyText": "Did you delete the original factory method?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r446514164", "createdAt": "2020-06-27T11:16:02Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d492e95b7b5599fb418e9c24661f2e0415ffbe"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MTM5Ng==", "bodyText": "Yes because its replaceable by the generic one (and you suggested in your last review to do so)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r452941396", "createdAt": "2020-07-10T16:16:15Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNDE2NA=="}, "originalCommit": {"oid": "41d492e95b7b5599fb418e9c24661f2e0415ffbe"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjMyMjk2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyNDo0MlrOGuyEmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoyMDozOFrOGv9fRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwODA1OQ==", "bodyText": "It's either of or for but never both.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r451708059", "createdAt": "2020-07-08T17:24:42Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MzY4NA==", "bodyText": "Changed, thanks", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r452943684", "createdAt": "2020-07-10T16:20:38Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwODA1OQ=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjMzODk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyOTowMlrOGuyOuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoxNzozMlrOGv9Y7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMDY0OQ==", "bodyText": "But why only for that one parameter?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r451710649", "createdAt": "2020-07-08T17:29:02Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MjA2MA==", "bodyText": "Because the other ones are handled by the Jupiter TestKit and I want to avoid NPE in Pioneers code (accessing the get name in the stream).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r452942060", "createdAt": "2020-07-10T16:17:32Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMDY0OQ=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjM0MTk0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyOTo1NVrOGuyQrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoyODo1NVrOGv9v2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMTE1MQ==", "bodyText": "But who tests our tests? (Is this necessary? I'm not sure...)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r451711151", "createdAt": "2020-07-08T17:29:55Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PioneerTestKitTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc0ODAzMQ==", "bodyText": "well, good question actually - but i do think it is worth testing, we never know where we end up with this, and maybe people start using our PioneerTestKit in their extensions :D", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r451748031", "createdAt": "2020-07-08T18:34:36Z", "author": {"login": "aepfli"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PioneerTestKitTests {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMTE1MQ=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NTQwOQ==", "bodyText": "It's in the test root - do we ship it? I guess the code is open-source but I don't think PioneerTestKit is part of our \"artifact\"... or is it?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r451765409", "createdAt": "2020-07-08T19:06:46Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PioneerTestKitTests {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMTE1MQ=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1NDc5OQ==", "bodyText": "good question", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r452054799", "createdAt": "2020-07-09T08:34:43Z", "author": {"login": "aepfli"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PioneerTestKitTests {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMTE1MQ=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NzkzMA==", "bodyText": "But who tests our tests? (Is this necessary? I'm not sure...)\n\nWho watchs the watchers? JUnit Jupiter is tested by JUnit Jupiter.\n\nIt's in the test root - do we ship it? I guess the code is open-source but I don't think PioneerTestKit is part of our \"artifact\"... or is it?\n\nContent in src/test is not shiped.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r452947930", "createdAt": "2020-07-10T16:28:55Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class PioneerTestKitTests {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxMTE1MQ=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM5NDk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NDoyMVrOGvF1Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzowMTo0NlrOG6fH8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMTc1NA==", "bodyText": "Did you consider Objects.requireNonNull(T value, String message)? I think it conveys the same intent really nicely.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r452031754", "createdAt": "2020-07-09T07:54:21Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,\n-\t\t\tString methodParameterTypes) {\n-\t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n+\t\t\tClass<?>... methodParameterTypes) {\n+\n+\t\tif (null == methodParameterTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NDc0OA==", "bodyText": "Yes, but it throws an NullPointerException and not an IllegalArgumentException. A NPE has a total different meaning than a IAE.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r452944748", "createdAt": "2020-07-10T16:22:42Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,\n-\t\t\tString methodParameterTypes) {\n-\t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n+\t\t\tClass<?>... methodParameterTypes) {\n+\n+\t\tif (null == methodParameterTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMTc1NA=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk0NzY5NQ==", "bodyText": "I think a NullPointerException conveys that a certain value can not (or should not) be null.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r463947695", "createdAt": "2020-08-01T10:18:07Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,\n-\t\t\tString methodParameterTypes) {\n-\t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n+\t\t\tClass<?>... methodParameterTypes) {\n+\n+\t\tif (null == methodParameterTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMTc1NA=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MzczNA==", "bodyText": "I think a NullPointerException conveys that a certain value can not (or should not) be null.\n\nNo it indicates that a certan value is NULL, according to documentation of NullPointerException (highlight by me):\n\nThrown when an application attempts to use null in a case where an object is required. These include:\n\nCalling the instance method of a null object.\nAccessing or modifying the field of a null object.\nTaking the length of null as if it were an array.\nAccessing or modifying the slots of null as if it were an array.\nThrowing null as if it were a Throwable value.\n\nApplications should throw instances of this class to indicate other illegal uses of the null object. NullPointerException objects may be constructed by the virtual machine as if suppression were disabled and/or the stack trace was not writable.\n\nBut the documentation of IllegalArgumentExceptiuon cleary show that this exeception is to be used in cases like mine:\n\nThrown to indicate that a method has been passed an illegal or inappropriate argument.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r463953734", "createdAt": "2020-08-01T11:36:15Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,\n-\t\t\tString methodParameterTypes) {\n-\t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n+\t\t\tClass<?>... methodParameterTypes) {\n+\n+\t\tif (null == methodParameterTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMTc1NA=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MDUyOQ==", "bodyText": "My interpretation:\nBoth exceptions are correct because\n\nit is an illegal argument\nit is illegal because it is null but an object is required.\n\nUsing Objects.requireNonNull is already used to validate arguments inside Pioneer (TempDirectoryExtension).\nIts documentation says it was designed with this purpose in mind:\n\nChecks that the specified object reference is not null. This method is designed primarily for doing parameter validation in methods and constructors\n\nIf you feel strongly about this, I'll leave it alone. It fails fast either way, so what specific exception to throw and how is up to personal preference.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r463980529", "createdAt": "2020-08-01T17:01:46Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,21 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of for the parameters\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,\n-\t\t\tString methodParameterTypes) {\n-\t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n+\t\t\tClass<?>... methodParameterTypes) {\n+\n+\t\tif (null == methodParameterTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMTc1NA=="}, "originalCommit": {"oid": "291dcc6cd1ddefa0224320c7d008fdd229db3a02"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzMyNTE0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTowNTo1OFrOG0GZYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTowNTo1OFrOG0GZYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI4MzkzNg==", "bodyText": "This could just be Assertions.assertThat if you do import org.assertj.core.api.Assertions", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r457283936", "createdAt": "2020-07-20T11:05:58Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -74,8 +74,9 @@ void executeTestMethodWithParameterTypesSingleParameterTypeIllegalArgumentExcept\n \t\t\t\t});\n \n \t\t\t\tString expectedMessage = \"methodParameterTypes must not be null\";\n-\t\t\t\tassertThat(thrown).isInstanceOf(IllegalArgumentException.class);\n-\t\t\t\tassertThat(thrown.getMessage()).isEqualTo(expectedMessage);\n+\n+\t\t\t\torg.assertj.core.api.Assertions.assertThat(thrown).isInstanceOf(IllegalArgumentException.class);\n+\t\t\t\torg.assertj.core.api.Assertions.assertThat(thrown.getMessage()).isEqualTo(expectedMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83313bd50303df5927c8a7e8cc24d392c3c0369a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODMyNzcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0ODoxM1rOG8ESFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMTowMDoyOFrOG8Epiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNzkxMQ==", "bodyText": "So much better \ud83d\ude0d , thanks for the change!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465637911", "createdAt": "2020-08-05T10:48:13Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -215,7 +215,7 @@ void correctConfigurations() {\n \t\t@DisplayName(\"without input but StdIn parameter, an exception is thrown\")\n \t\tvoid withoutInputWithStdInParameter() {\n \t\t\tExecutionResults results = executeTestMethodWithParameterTypes(IllegalConfigurations.class,\n-\t\t\t\t\"noInputButStdIn\", \"org.junitpioneer.jupiter.StdIn\");\n+\t\t\t\t\"noInputButStdIn\", StdIn.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0MzkxNQ==", "bodyText": "I mean, thanks to this PR, the code looks so much better and more readable.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465643915", "createdAt": "2020-08-05T11:00:28Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -215,7 +215,7 @@ void correctConfigurations() {\n \t\t@DisplayName(\"without input but StdIn parameter, an exception is thrown\")\n \t\tvoid withoutInputWithStdInParameter() {\n \t\t\tExecutionResults results = executeTestMethodWithParameterTypes(IllegalConfigurations.class,\n-\t\t\t\t\"noInputButStdIn\", \"org.junitpioneer.jupiter.StdIn\");\n+\t\t\t\t\"noInputButStdIn\", StdIn.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNzkxMQ=="}, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODMzNTA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo1MDoxOFrOG8EWnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo1MDoxOFrOG8EWnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTA2OA==", "bodyText": "I removed the politics from the comment. My 2ct: IllegalArgumentException is the better exception, but nobody does it, so... \ud83e\udd37 ... use Optional, I guess. \ud83d\ude01", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465639068", "createdAt": "2020-08-05T10:50:18Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKit.java", "diffHunk": "@@ -38,12 +41,25 @@ public static ExecutionResults executeTestMethod(Class<?> testClass, String test\n \t *\n \t * @param testClass Name of the test class\n \t * @param testMethodName Name of the test method (of the given class)\n-\t * @param methodParameterTypes Full qualified types names of the parameters (e.g. \"java.nio.file.Path\")\n+\t * @param methodParameterTypes Class type(s) of the parameter(s)\n \t * @return The execution results\n+\t * @throws IllegalArgumentException when methodParameterTypes is null\n+\t * \t\t\tThis method only checks parameters which are not part of the underlying\n+\t * \t\t\tJupiter TestKit. The Jupiter TestKit may throw other exceptions!\n \t */\n \tpublic static ExecutionResults executeTestMethodWithParameterTypes(Class<?> testClass, String testMethodName,\n-\t\t\tString methodParameterTypes) {\n-\t\treturn new ExecutionResults(testClass, testMethodName, methodParameterTypes);\n+\t\t\tClass<?>... methodParameterTypes) {\n+\n+\t\t// throw IllegalArgumentException for a `null` array instead of NPE\n+\t\t// (hence no use of Objects::requireNonNull)`\n+\t\tif (methodParameterTypes == null) {\n+\t\t\tthrow new IllegalArgumentException(\"methodParameterTypes must not be null\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODMzNzUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo1MTowMVrOG8EYBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMTowMDo1MlrOG8EqYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTQyOA==", "bodyText": "There are now two tests to clearly distinguish null as a single type from null as the type array. Is this the intended behavior?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465639428", "createdAt": "2020-08-05T10:51:01Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junitpioneer.testkit.assertion.PioneerAssert.assertThat;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+@DisplayName(\"Execute\")\n+class PioneerTestKitTests {\n+\n+\t@Test\n+\t@DisplayName(\"all tests of a class\")\n+\tvoid executeTestClass() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestClass(DummyClass.class);\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"a specific method\")\n+\tvoid executeTestMethod() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestMethod(DummyClass.class, \"nothing\");\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Nested\n+\t@DisplayName(\"a specific parametrized method\")\n+\tclass ExecuteTestMethodWithParametersTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is a single class\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterType() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", String.class);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is an array of classes\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterTypeAsArray() {\n+\t\t\tClass<?>[] classes = { String.class };\n+\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", classes);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterArrayIsNull_NullPointerException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>) null))\n+\t\t\t\t\t\t\t.isInstanceOf(NullPointerException.class);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterIsNull_IllegalArgumentException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>[]) null))\n+\t\t\t\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n+\t\t\t\t\t\t\t.hasMessage(\"methodParameterTypes must not be null\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0NDEzMQ==", "bodyText": "Quick conversation with @Bukama confirmed that this is indeed the intended behavior.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465644131", "createdAt": "2020-08-05T11:00:52Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junitpioneer.testkit.assertion.PioneerAssert.assertThat;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+@DisplayName(\"Execute\")\n+class PioneerTestKitTests {\n+\n+\t@Test\n+\t@DisplayName(\"all tests of a class\")\n+\tvoid executeTestClass() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestClass(DummyClass.class);\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"a specific method\")\n+\tvoid executeTestMethod() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestMethod(DummyClass.class, \"nothing\");\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Nested\n+\t@DisplayName(\"a specific parametrized method\")\n+\tclass ExecuteTestMethodWithParametersTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is a single class\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterType() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", String.class);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is an array of classes\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterTypeAsArray() {\n+\t\t\tClass<?>[] classes = { String.class };\n+\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", classes);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterArrayIsNull_NullPointerException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>) null))\n+\t\t\t\t\t\t\t.isInstanceOf(NullPointerException.class);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterIsNull_IllegalArgumentException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>[]) null))\n+\t\t\t\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n+\t\t\t\t\t\t\t.hasMessage(\"methodParameterTypes must not be null\");\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTQyOA=="}, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODM0MDIwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo1MjowM1rOG8EZpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo1MjowM1rOG8EZpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTg0Ng==", "bodyText": "This is how to test assertions with pure AssertJ (i.e. no Jupiter assertions).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/285#discussion_r465639846", "createdAt": "2020-08-05T10:52:03Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/testkit/PioneerTestKitTests.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.testkit;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junitpioneer.testkit.assertion.PioneerAssert.assertThat;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+@DisplayName(\"Execute\")\n+class PioneerTestKitTests {\n+\n+\t@Test\n+\t@DisplayName(\"all tests of a class\")\n+\tvoid executeTestClass() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestClass(DummyClass.class);\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"a specific method\")\n+\tvoid executeTestMethod() {\n+\t\tExecutionResults results = PioneerTestKit.executeTestMethod(DummyClass.class, \"nothing\");\n+\n+\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t}\n+\n+\t@Nested\n+\t@DisplayName(\"a specific parametrized method\")\n+\tclass ExecuteTestMethodWithParametersTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is a single class\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterType() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", String.class);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\" where parameter is an array of classes\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterTypeAsArray() {\n+\t\t\tClass<?>[] classes = { String.class };\n+\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", classes);\n+\n+\t\t\tassertThat(results).hasNumberOfStartedTests(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_parameterArrayIsNull_NullPointerException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>) null))\n+\t\t\t\t\t\t\t.isInstanceOf(NullPointerException.class);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"without parameter results in IllegalArgumentException\")\n+\t\tvoid executeTestMethodWithParameterTypes_singleParameterIsNull_IllegalArgumentException() {\n+\t\t\tassertThatThrownBy(() -> PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(DummyParameterClass.class, \"single\", (Class<?>[]) null))\n+\t\t\t\t\t\t\t.isInstanceOf(IllegalArgumentException.class)\n+\t\t\t\t\t\t\t.hasMessage(\"methodParameterTypes must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6dee4fa08ea4c0f812126aa7b4a8c9663c3e359"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4275, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}