{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTE1NTEx", "number": 242, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMTowNjo1NVrOD2Lx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjoyMTozMVrOENfxJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTQyNjk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/EnvironmentVariableUtilsTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMTowNjo1NVrOGL6Zkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTo1NzowMFrOGwNoXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDMzOA==", "bodyText": "Does something like that needs to be called after the SystemProperty java.security.policy is reverted after the test?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/242#discussion_r415144338", "createdAt": "2020-04-25T21:06:55Z", "author": {"login": "Hancho2009"}, "path": "src/test/java/org/junitpioneer/jupiter/EnvironmentVariableUtilsTests.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.security.AccessControlException;\n+import java.security.Policy;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"EnvironmentVariableUtils\")\n+@ClearEnvironmentVariable(key = \"TEST\")\n+class EnvironmentVariableUtilsTests {\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/default-testing.policy\")\n+\tvoid shouldThrowAccessControlExceptionWithDefaultSecurityManager() {\n+\t\texecuteWithSecurityManager(() -> assertThatThrownBy(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\"))\n+\t\t\t\t.isInstanceOf(AccessControlException.class));\n+\t}\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/reflect-permission-testing.policy\")\n+\tvoid shouldModifyEnvironmentVariableIfPermissionIsGiven() {\n+\t\texecuteWithSecurityManager(() -> {\n+\t\t\tassertThatCode(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\")).doesNotThrowAnyException();\n+\t\t\tassertThat(System.getenv(\"TEST\")).isEqualTo(\"TEST\");\n+\t\t});\n+\t}\n+\n+\t/*\n+\t * This needs to be done during the execution of the test method and cannot be moved to setup/tear down\n+\t * because junit uses reflection and the default SecurityManager prevents that.\n+\t */\n+\tprivate void executeWithSecurityManager(Runnable runnable) {\n+\t\tPolicy.getPolicy().refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acca96ac66824aad9b821f8f1bb839afd3357bc0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNzg1NA==", "bodyText": "According to the official Oracle Java SE documentation\n\nThe refresh method causes the policy object to refresh/reload its data. This operation is implementation-dependent. For example, if the policy object stores its data in configuration files, calling refresh will cause it to re-read the configuration policy files. If a refresh operation is not supported, this method does nothing. Note that refreshed policy may not have an effect on classes in a particular ProtectionDomain. This is dependent on the Policy provider's implementation of the implies method and its PermissionCollection caching strategy.\n\nTo me, this reads like you should call it to properly reset the policy?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/242#discussion_r453207854", "createdAt": "2020-07-11T15:53:59Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/EnvironmentVariableUtilsTests.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.security.AccessControlException;\n+import java.security.Policy;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"EnvironmentVariableUtils\")\n+@ClearEnvironmentVariable(key = \"TEST\")\n+class EnvironmentVariableUtilsTests {\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/default-testing.policy\")\n+\tvoid shouldThrowAccessControlExceptionWithDefaultSecurityManager() {\n+\t\texecuteWithSecurityManager(() -> assertThatThrownBy(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\"))\n+\t\t\t\t.isInstanceOf(AccessControlException.class));\n+\t}\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/reflect-permission-testing.policy\")\n+\tvoid shouldModifyEnvironmentVariableIfPermissionIsGiven() {\n+\t\texecuteWithSecurityManager(() -> {\n+\t\t\tassertThatCode(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\")).doesNotThrowAnyException();\n+\t\t\tassertThat(System.getenv(\"TEST\")).isEqualTo(\"TEST\");\n+\t\t});\n+\t}\n+\n+\t/*\n+\t * This needs to be done during the execution of the test method and cannot be moved to setup/tear down\n+\t * because junit uses reflection and the default SecurityManager prevents that.\n+\t */\n+\tprivate void executeWithSecurityManager(Runnable runnable) {\n+\t\tPolicy.getPolicy().refresh();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDMzOA=="}, "originalCommit": {"oid": "acca96ac66824aad9b821f8f1bb839afd3357bc0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwODE1Nw==", "bodyText": "If you want to test if resetting the policy works as expected, you should probably add a new test for that and add @Order to your suite. Here is a blog post from Baeldung on that topic.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/242#discussion_r453208157", "createdAt": "2020-07-11T15:57:00Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/EnvironmentVariableUtilsTests.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.security.AccessControlException;\n+import java.security.Policy;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"EnvironmentVariableUtils\")\n+@ClearEnvironmentVariable(key = \"TEST\")\n+class EnvironmentVariableUtilsTests {\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/default-testing.policy\")\n+\tvoid shouldThrowAccessControlExceptionWithDefaultSecurityManager() {\n+\t\texecuteWithSecurityManager(() -> assertThatThrownBy(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\"))\n+\t\t\t\t.isInstanceOf(AccessControlException.class));\n+\t}\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/reflect-permission-testing.policy\")\n+\tvoid shouldModifyEnvironmentVariableIfPermissionIsGiven() {\n+\t\texecuteWithSecurityManager(() -> {\n+\t\t\tassertThatCode(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\")).doesNotThrowAnyException();\n+\t\t\tassertThat(System.getenv(\"TEST\")).isEqualTo(\"TEST\");\n+\t\t});\n+\t}\n+\n+\t/*\n+\t * This needs to be done during the execution of the test method and cannot be moved to setup/tear down\n+\t * because junit uses reflection and the default SecurityManager prevents that.\n+\t */\n+\tprivate void executeWithSecurityManager(Runnable runnable) {\n+\t\tPolicy.getPolicy().refresh();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDMzOA=="}, "originalCommit": {"oid": "acca96ac66824aad9b821f8f1bb839afd3357bc0"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTg3NDMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/EnvironmentVariableUtilsTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjoyMTozMVrOGwMgdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNDoxNToyMVrOGwNF2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4OTc0OQ==", "bodyText": "I'd have named this variable original. Everywhere it is used it is clear that it's a SecurityManager, so naming it securityManager is redundant - however System.setSecurityManager(original) clearly communicates that we reset (and not modify) the SecurityManager.\nThis is just a sidenote, don't feel the need to modify the PR just for this.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/242#discussion_r453189749", "createdAt": "2020-07-11T12:21:31Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/EnvironmentVariableUtilsTests.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.security.AccessControlException;\n+import java.security.Policy;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"EnvironmentVariableUtils\")\n+@ClearEnvironmentVariable(key = \"TEST\")\n+class EnvironmentVariableUtilsTests {\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/default-testing.policy\")\n+\tvoid shouldThrowAccessControlExceptionWithDefaultSecurityManager() {\n+\t\texecuteWithSecurityManager(() -> assertThatThrownBy(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\"))\n+\t\t\t\t.isInstanceOf(AccessControlException.class));\n+\t}\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/reflect-permission-testing.policy\")\n+\tvoid shouldModifyEnvironmentVariableIfPermissionIsGiven() {\n+\t\texecuteWithSecurityManager(() -> {\n+\t\t\tassertThatCode(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\")).doesNotThrowAnyException();\n+\t\t\tassertThat(System.getenv(\"TEST\")).isEqualTo(\"TEST\");\n+\t\t});\n+\t}\n+\n+\t/*\n+\t * This needs to be done during the execution of the test method and cannot be moved to setup/tear down\n+\t * because junit uses reflection and the default SecurityManager prevents that.\n+\t */\n+\tprivate void executeWithSecurityManager(Runnable runnable) {\n+\t\tPolicy.getPolicy().refresh();\n+\t\tSecurityManager securityManager = System.getSecurityManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acca96ac66824aad9b821f8f1bb839afd3357bc0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5Njc4NQ==", "bodyText": "I'd have named this variable original. Everywhere it is used it is clear that it's a SecurityManager, so naming it securityManager is redundant - however System.setSecurityManager(original) clearly communicates that we reset (and not modify) the SecurityManager.\nThis is just a sidenote, don't feel the need to modify the PR just for this.\n\nI would not rename the variable! It only seems redundant because of Java 8. With 10+, using var at this section it would not be clear what a variable with the name original holds.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/242#discussion_r453196785", "createdAt": "2020-07-11T13:47:53Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/EnvironmentVariableUtilsTests.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.security.AccessControlException;\n+import java.security.Policy;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"EnvironmentVariableUtils\")\n+@ClearEnvironmentVariable(key = \"TEST\")\n+class EnvironmentVariableUtilsTests {\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/default-testing.policy\")\n+\tvoid shouldThrowAccessControlExceptionWithDefaultSecurityManager() {\n+\t\texecuteWithSecurityManager(() -> assertThatThrownBy(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\"))\n+\t\t\t\t.isInstanceOf(AccessControlException.class));\n+\t}\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/reflect-permission-testing.policy\")\n+\tvoid shouldModifyEnvironmentVariableIfPermissionIsGiven() {\n+\t\texecuteWithSecurityManager(() -> {\n+\t\t\tassertThatCode(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\")).doesNotThrowAnyException();\n+\t\t\tassertThat(System.getenv(\"TEST\")).isEqualTo(\"TEST\");\n+\t\t});\n+\t}\n+\n+\t/*\n+\t * This needs to be done during the execution of the test method and cannot be moved to setup/tear down\n+\t * because junit uses reflection and the default SecurityManager prevents that.\n+\t */\n+\tprivate void executeWithSecurityManager(Runnable runnable) {\n+\t\tPolicy.getPolicy().refresh();\n+\t\tSecurityManager securityManager = System.getSecurityManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4OTc0OQ=="}, "originalCommit": {"oid": "acca96ac66824aad9b821f8f1bb839afd3357bc0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5OTMyMA==", "bodyText": "I mean, even with var it would look like this:\nvar original = System.getSecurityManager();\n// ... other code ...\nSystem.setSecurityManager(original);\n\nSeems clear to me?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/242#discussion_r453199320", "createdAt": "2020-07-11T14:15:21Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/EnvironmentVariableUtilsTests.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.security.AccessControlException;\n+import java.security.Policy;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"EnvironmentVariableUtils\")\n+@ClearEnvironmentVariable(key = \"TEST\")\n+class EnvironmentVariableUtilsTests {\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/default-testing.policy\")\n+\tvoid shouldThrowAccessControlExceptionWithDefaultSecurityManager() {\n+\t\texecuteWithSecurityManager(() -> assertThatThrownBy(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\"))\n+\t\t\t\t.isInstanceOf(AccessControlException.class));\n+\t}\n+\n+\t@Test\n+\t@SetSystemProperty(key = \"java.security.policy\", value = \"file:src/test/resources/reflect-permission-testing.policy\")\n+\tvoid shouldModifyEnvironmentVariableIfPermissionIsGiven() {\n+\t\texecuteWithSecurityManager(() -> {\n+\t\t\tassertThatCode(() -> EnvironmentVariableUtils.set(\"TEST\", \"TEST\")).doesNotThrowAnyException();\n+\t\t\tassertThat(System.getenv(\"TEST\")).isEqualTo(\"TEST\");\n+\t\t});\n+\t}\n+\n+\t/*\n+\t * This needs to be done during the execution of the test method and cannot be moved to setup/tear down\n+\t * because junit uses reflection and the default SecurityManager prevents that.\n+\t */\n+\tprivate void executeWithSecurityManager(Runnable runnable) {\n+\t\tPolicy.getPolicy().refresh();\n+\t\tSecurityManager securityManager = System.getSecurityManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4OTc0OQ=="}, "originalCommit": {"oid": "acca96ac66824aad9b821f8f1bb839afd3357bc0"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4256, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}