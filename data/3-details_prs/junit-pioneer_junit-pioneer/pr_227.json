{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNDA0NTcw", "number": 227, "title": "Basic implementation of the StdIO extension for catching stdin/out", "bodyText": "This is a really simple implementation, but I'd like some feedback.\n\nI hereby agree to the terms of the JUnit Pioneer Contributor License Agreement.", "createdAt": "2020-04-12T21:53:18Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227", "merged": true, "mergeCommit": {"oid": "170e2c2a4c316fe1179493bbdcc466ac385f15f6"}, "closed": true, "closedAt": "2020-05-28T07:35:08Z", "author": {"login": "Michael1993"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXBgDDgH2gAyNDAyNDA0NTcwOjBmNjBiZjcxYWUyNzVjYzNkNmMxNTAyMjBlMzYzMWUzNmEwODg1MTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcldp97AFqTQxOTUwMzIwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0f60bf71ae275cc3d6c150220e3631e36a088512", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0f60bf71ae275cc3d6c150220e3631e36a088512", "committedDate": "2020-04-12T21:51:15Z", "message": "Basic implementation of the StdIO extension for catching stdin/out"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1Njg0OTM2", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-395684936", "createdAt": "2020-04-17T18:34:04Z", "commit": {"oid": "0f60bf71ae275cc3d6c150220e3631e36a088512"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODozNDowNFrOGHY5TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTowODoxMlrOGHZ54g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMTEwMA==", "bodyText": "Javadoc already helps while developing and requesting other peoples feedback ;)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r410401100", "createdAt": "2020-04-17T18:34:04Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/Std.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f60bf71ae275cc3d6c150220e3631e36a088512"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTAwMA==", "bodyText": "Can this be written as a loop? Without the test case I would have not known why those lines are doubled", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r410411000", "createdAt": "2020-04-17T18:54:05Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junitpioneer.jupiter.StdIOExtension.StdIn;\n+import org.junitpioneer.jupiter.StdIOExtension.StdOut;\n+\n+@ExtendWith(StdIOExtension.class)\n+public class StdIoExtensionTest {\n+\n+\tBasicCommandLineApp app = new BasicCommandLineApp();\n+\n+\t@Test\n+\t@DisplayName(\"catches the output on the standard out\")\n+\tvoid catchesOut(@Std StdOut out) {\n+\t\tapp.multiline();\n+\t\tassertThat(out.linesArray()).containsExactly(\"Hello\", \"World!\");\n+\t}\n+\n+\t@Test\n+\t@DisplayName(\"catches the input from the standard in\")\n+\tvoid catchesIn(@Std({ \"Hello\", \"World!\" }) StdIn in, @Std StdOut out) throws IOException {\n+\t\tapp.readAndWrite();\n+\t\tassertThat(in.linesArray()).containsExactly(\"Hello\", \"World!\");\n+\t\tassertThat(out.linesArray()).containsExactly(\"Hello\", \"World!\");\n+\t}\n+\n+\t/**\n+\t * A sample class that I would write tests for.\n+\t */\n+\tprivate static class BasicCommandLineApp {\n+\n+\t\tpublic void multiline() {\n+\t\t\tSystem.out.println(\"Hello\");\n+\t\t\tSystem.out.println(\"World!\");\n+\t\t}\n+\n+\t\tpublic void readAndWrite() throws IOException {\n+\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n+\t\t\tString read = reader.readLine();\n+\t\t\tSystem.out.println(read);\n+\t\t\tread = reader.readLine();\n+\t\t\tSystem.out.println(read);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f60bf71ae275cc3d6c150220e3631e36a088512"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNzUyMg==", "bodyText": "Would name this capturedLines", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r410417522", "createdAt": "2020-04-17T19:07:58Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIOExtension.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+\n+public class StdIOExtension implements ParameterResolver {\n+\n+\tprivate static final String SEPARATOR = System.getProperty(\"line.separator\");\n+\n+\t@Override\n+\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\n+\t\t\tthrows ParameterResolutionException {\n+\t\treturn parameterContext.isAnnotated(Std.class);\n+\t}\n+\n+\t@Override\n+\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\n+\t\t\tthrows ParameterResolutionException {\n+\t\tClass<?> parameterType = parameterContext.getParameter().getType();\n+\t\tif (parameterType == StdOut.class) {\n+\t\t\treturn new StdOut();\n+\t\t}\n+\t\tif (parameterType == StdIn.class) {\n+\t\t\tStd std = parameterContext\n+\t\t\t\t\t.findAnnotation(Std.class)\n+\t\t\t\t\t.orElseThrow(() -> new ParameterResolutionException(\"Needs to be annotated with Std\"));\n+\t\t\treturn new StdIn(std.value());\n+\t\t}\n+\t\tthrow new ParameterResolutionException(\"Can only resolve parameter of type \" + StdOut.class.getName() + \" or \"\n+\t\t\t\t+ StdIn.class.getName() + \" but was: \" + parameterType.getName());\n+\n+\t}\n+\n+\tpublic static class StdOut extends OutputStream {\n+\n+\t\tStringWriter writer = new StringWriter();\n+\n+\t\tpublic StdOut() {\n+\t\t\tSystem.setOut(new PrintStream(this));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(int i) {\n+\t\t\twriter.write(i);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn writer.toString();\n+\t\t}\n+\n+\t\tpublic String[] linesArray() {\n+\t\t\treturn this.toString().split(SEPARATOR);\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class StdIn extends InputStream {\n+\n+\t\tStringReader reader;\n+\t\tStringWriter writer = new StringWriter();\n+\n+\t\tpublic StdIn(String... values) {\n+\t\t\treader = new StringReader(String.join(SEPARATOR, values));\n+\t\t\tSystem.setIn(this);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int read() throws IOException {\n+\t\t\tint reading = reader.read();\n+\t\t\tif (reading != -1) {\n+\t\t\t\twriter.write(reading);\n+\t\t\t}\n+\t\t\treturn reading;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn writer.toString();\n+\t\t}\n+\n+\t\tpublic String[] linesArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f60bf71ae275cc3d6c150220e3631e36a088512"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNzYzNA==", "bodyText": "Would name this capturedLines", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r410417634", "createdAt": "2020-04-17T19:08:12Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIOExtension.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+\n+public class StdIOExtension implements ParameterResolver {\n+\n+\tprivate static final String SEPARATOR = System.getProperty(\"line.separator\");\n+\n+\t@Override\n+\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\n+\t\t\tthrows ParameterResolutionException {\n+\t\treturn parameterContext.isAnnotated(Std.class);\n+\t}\n+\n+\t@Override\n+\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\n+\t\t\tthrows ParameterResolutionException {\n+\t\tClass<?> parameterType = parameterContext.getParameter().getType();\n+\t\tif (parameterType == StdOut.class) {\n+\t\t\treturn new StdOut();\n+\t\t}\n+\t\tif (parameterType == StdIn.class) {\n+\t\t\tStd std = parameterContext\n+\t\t\t\t\t.findAnnotation(Std.class)\n+\t\t\t\t\t.orElseThrow(() -> new ParameterResolutionException(\"Needs to be annotated with Std\"));\n+\t\t\treturn new StdIn(std.value());\n+\t\t}\n+\t\tthrow new ParameterResolutionException(\"Can only resolve parameter of type \" + StdOut.class.getName() + \" or \"\n+\t\t\t\t+ StdIn.class.getName() + \" but was: \" + parameterType.getName());\n+\n+\t}\n+\n+\tpublic static class StdOut extends OutputStream {\n+\n+\t\tStringWriter writer = new StringWriter();\n+\n+\t\tpublic StdOut() {\n+\t\t\tSystem.setOut(new PrintStream(this));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(int i) {\n+\t\t\twriter.write(i);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn writer.toString();\n+\t\t}\n+\n+\t\tpublic String[] linesArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f60bf71ae275cc3d6c150220e3631e36a088512"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c41e7ee879582124536ac4fc9de254496db240d1", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c41e7ee879582124536ac4fc9de254496db240d1", "committedDate": "2020-04-20T08:55:05Z", "message": "Working commit, should be squashed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "432d5ada913d1a870197dc95f8519dc439234b2c", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/432d5ada913d1a870197dc95f8519dc439234b2c", "committedDate": "2020-04-20T08:55:18Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into std-io"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b039c437e793c9e1a60c96f0f130e8d7e310a015", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b039c437e793c9e1a60c96f0f130e8d7e310a015", "committedDate": "2020-04-20T14:14:29Z", "message": "Added configuration tests, implemented suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6165f7cdeb02e73f3296e71207854d9da8266f12", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6165f7cdeb02e73f3296e71207854d9da8266f12", "committedDate": "2020-04-20T14:39:36Z", "message": "Revert ReportEntry typo because it's not in scope"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTU3MjU3", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-396557257", "createdAt": "2020-04-20T15:21:47Z", "commit": {"oid": "6165f7cdeb02e73f3296e71207854d9da8266f12"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyMTo0OFrOGIZ7yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo0NjowOFrOGIbHaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NjY5Nw==", "bodyText": "I see you've took my idea of calling it Interceptor - but why cutting the last two character then?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r411466697", "createdAt": "2020-04-20T15:21:48Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIntercept.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * Intercept communication on the standard input/output,\n+ * to verify behaviour. This should be used with\n+ * {@link org.junitpioneer.jupiter.StdIOExtension.StdOut}\n+ * to intercept the standard output ({@code System.in}) and\n+ * {@link org.junitpioneer.jupiter.StdIOExtension.StdIn}\n+ * to intercept the standard input ({@code System.out}).\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface StdIntercept {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6165f7cdeb02e73f3296e71207854d9da8266f12"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NzIzMQ==", "bodyText": "Since JUnit5 assertThrows should be used, when exceptions are expected. While this method itself can hold the expected exception I personal like to use an super class here and to check for the exception type later using AssertJ. Taking this test as an example it would look like this:\nThrowable thrown = assertThrows(Throwable.class, () -> \n  // Call your system under test here\n  executeTestsForMethod(StdIOExtensionConfigurationTests.class, \"noAnnotation\");\n);\n\nString expectedMessage = \"No ParameterResolver registered\";\n\nassertThat(thrown).isExactlyInstanceOf(ParameterResolutionException.class);\nassertThat(thrown.getMessage()).startsWith(expectedMessage);", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r411467231", "createdAt": "2020-04-20T15:22:31Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;\n+import org.junitpioneer.jupiter.StdIOExtension.StdIn;\n+import org.junitpioneer.jupiter.StdIOExtension.StdOut;\n+\n+@ExtendWith(StdIOExtension.class)\n+@DisplayName(\"StdIOExtension \")\n+public class StdIoExtensionTests extends AbstractJupiterTestEngineTests {\n+\n+\tfinal BasicCommandLineApp app = new BasicCommandLineApp();\n+\n+\t@Nested\n+\t@DisplayName(\"with specific configuration \")\n+\tclass ConfigurationTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\"fails if parameter is not annotated with @StdIntercept\")\n+\t\tvoid needsAnnotation() {\n+\t\t\ttry {\n+\t\t\t\texecuteTestsForMethod(StdIOExtensionConfigurationTests.class, \"noAnnotation\");\n+\t\t\t}\n+\t\t\tcatch (ParameterResolutionException ex) {\n+\t\t\t\tassertThat(ex.getMessage()).startsWith(\"No ParameterResolver registered\");\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6165f7cdeb02e73f3296e71207854d9da8266f12"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2ODg4NA==", "bodyText": "Minding liveticker ...the format looks very strange - do we have a general formatting problem here?...", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r411468884", "createdAt": "2020-04-20T15:24:31Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;\n+import org.junitpioneer.jupiter.StdIOExtension.StdIn;\n+import org.junitpioneer.jupiter.StdIOExtension.StdOut;\n+\n+@ExtendWith(StdIOExtension.class)\n+@DisplayName(\"StdIOExtension \")\n+public class StdIoExtensionTests extends AbstractJupiterTestEngineTests {\n+\n+\tfinal BasicCommandLineApp app = new BasicCommandLineApp();\n+\n+\t@Nested\n+\t@DisplayName(\"with specific configuration \")\n+\tclass ConfigurationTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\"fails if parameter is not annotated with @StdIntercept\")\n+\t\tvoid needsAnnotation() {\n+\t\t\ttry {\n+\t\t\t\texecuteTestsForMethod(StdIOExtensionConfigurationTests.class, \"noAnnotation\");\n+\t\t\t}\n+\t\t\tcatch (ParameterResolutionException ex) {\n+\t\t\t\tassertThat(ex.getMessage()).startsWith(\"No ParameterResolver registered\");\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"fails if the parameter type is not StdIn or StdOut\")\n+\t\tvoid needsType() {\n+\t\t\ttry {\n+\t\t\t\texecuteTestsForMethod(StdIOExtensionConfigurationTests.class, \"badType\");\n+\t\t\t}\n+\t\t\tcatch (ParameterResolutionException ex) {\n+\t\t\t\tassertThat(ex.getMessage()).contains(\"Can only resolve parameter\", \"but was\");\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"resolves parameter for correct type and annotation\")\n+\t\tvoid goodConfig() {\n+\t\t\tAssertions\n+\t\t\t\t\t.assertDoesNotThrow(\n+\t\t\t\t\t\t() -> executeTestsForMethod(StdIOExtensionConfigurationTests.class, \"goodConfig\"));\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6165f7cdeb02e73f3296e71207854d9da8266f12"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MzcxNg==", "bodyText": "This three tests explicitly check the annotation configuration. The first two are for no annotation and bad type - that's OK. But the last checks only for good configuration of StdIn. So there there is no explicit good configuration check for StdOut and therefore the related code is not covered by one of this configuration tests!\nAs of now StdOut is only indirectly covered by the later two for checking the captured lines. If you only want to check indirectly that you can remove the test of StdIn as it's checked by the later tests.\nI prefer to split the tests for checking the configuration and the output, so I suggest to add one for StdOut too.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r411483716", "createdAt": "2020-04-20T15:43:10Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;\n+import org.junitpioneer.jupiter.StdIOExtension.StdIn;\n+import org.junitpioneer.jupiter.StdIOExtension.StdOut;\n+\n+@ExtendWith(StdIOExtension.class)\n+@DisplayName(\"StdIOExtension \")\n+public class StdIoExtensionTests extends AbstractJupiterTestEngineTests {\n+\n+\tfinal BasicCommandLineApp app = new BasicCommandLineApp();\n+\n+\t@Nested\n+\t@DisplayName(\"with specific configuration \")\n+\tclass ConfigurationTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\"fails if parameter is not annotated with @StdIntercept\")\n+\t\tvoid needsAnnotation() {\n+\t\t\ttry {\n+\t\t\t\texecuteTestsForMethod(StdIOExtensionConfigurationTests.class, \"noAnnotation\");\n+\t\t\t}\n+\t\t\tcatch (ParameterResolutionException ex) {\n+\t\t\t\tassertThat(ex.getMessage()).startsWith(\"No ParameterResolver registered\");\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"fails if the parameter type is not StdIn or StdOut\")\n+\t\tvoid needsType() {\n+\t\t\ttry {\n+\t\t\t\texecuteTestsForMethod(StdIOExtensionConfigurationTests.class, \"badType\");\n+\t\t\t}\n+\t\t\tcatch (ParameterResolutionException ex) {\n+\t\t\t\tassertThat(ex.getMessage()).contains(\"Can only resolve parameter\", \"but was\");\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"resolves parameter for correct type and annotation\")\n+\t\tvoid goodConfig() {\n+\t\t\tAssertions\n+\t\t\t\t\t.assertDoesNotThrow(\n+\t\t\t\t\t\t() -> executeTestsForMethod(StdIOExtensionConfigurationTests.class, \"goodConfig\"));\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2ODg4NA=="}, "originalCommit": {"oid": "6165f7cdeb02e73f3296e71207854d9da8266f12"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4NjA1Ng==", "bodyText": "Shall we move this to the PioneerAnnotationUtils in a generic way? Is it even possible?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r411486056", "createdAt": "2020-04-20T15:46:08Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIOExtension.java", "diffHunk": "@@ -27,39 +29,42 @@\n \tprivate static final String SEPARATOR = System.getProperty(\"line.separator\");\n \n \t@Override\n-\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\n-\t\t\tthrows ParameterResolutionException {\n-\t\treturn parameterContext.isAnnotated(Std.class);\n+\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n+\t\treturn parameterContext.isAnnotated(StdIntercept.class);\n \t}\n \n \t@Override\n-\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\n-\t\t\tthrows ParameterResolutionException {\n+\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n \t\tClass<?> parameterType = parameterContext.getParameter().getType();\n+\t\tStdIntercept stdIntercept = getInterceptAnnotation(parameterContext);\n \t\tif (parameterType == StdOut.class) {\n \t\t\treturn new StdOut();\n \t\t}\n \t\tif (parameterType == StdIn.class) {\n-\t\t\tStd std = parameterContext\n-\t\t\t\t\t.findAnnotation(Std.class)\n-\t\t\t\t\t.orElseThrow(() -> new ParameterResolutionException(\"Needs to be annotated with Std\"));\n-\t\t\treturn new StdIn(std.value());\n+\t\t\treturn new StdIn(stdIntercept.value());\n \t\t}\n \t\tthrow new ParameterResolutionException(\"Can only resolve parameter of type \" + StdOut.class.getName() + \" or \"\n \t\t\t\t+ StdIn.class.getName() + \" but was: \" + parameterType.getName());\n \n \t}\n \n+\tprivate StdIntercept getInterceptAnnotation(ParameterContext context) {\n+\t\treturn context\n+\t\t\t\t.findAnnotation(StdIntercept.class)\n+\t\t\t\t.orElseThrow(() -> new ParameterResolutionException(\n+\t\t\t\t\t\"This can never happen because this extension only supplies parameters if the parameter is annotated with @StdIntercept\"));\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6165f7cdeb02e73f3296e71207854d9da8266f12"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "041f8dba293593775957eba0e9977e6026a7348b", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/041f8dba293593775957eba0e9977e6026a7348b", "committedDate": "2020-04-20T21:38:52Z", "message": "Fixed configuration tests to actually run as expected. Added new method for test running."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDYyNzk5", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-397462799", "createdAt": "2020-04-21T16:11:33Z", "commit": {"oid": "041f8dba293593775957eba0e9977e6026a7348b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjoxMTozOFrOGJMybA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo0MDoyNVrOGJNsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5OTg4NA==", "bodyText": "The annotation is unnecessary for resolving StdOut and StdIn could use a method level annotation instead for getting its parameters, for example: @StdInSource. Would that be simpler?\n\nThe missing need for StdOut should be documented in the final adoc !", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r412299884", "createdAt": "2020-04-21T16:11:38Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIntercept.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * Intercept communication on the standard input/output,\n+ * to verify behaviour. This should be used with\n+ * {@link org.junitpioneer.jupiter.StdIOExtension.StdOut}\n+ * to intercept the standard output ({@code System.in}) and\n+ * {@link org.junitpioneer.jupiter.StdIOExtension.StdIn}\n+ * to intercept the standard input ({@code System.out}).\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface StdIntercept {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NjY5Nw=="}, "originalCommit": {"oid": "6165f7cdeb02e73f3296e71207854d9da8266f12"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxMjQwMA==", "bodyText": "You could but it does not really make sense, because this ParameterResolutionException is specific to this extension. If you want to move just the first part, how would that even look?\nPioneerAnnotationUtils.findAnnotation(context, StdIntercept.class)?\nI think this is simple enough to leave as-is but if you have any ideas, I'm open.\n\nMy thouhgt was to include the exception throwing when moving. Does not have to be ParameterResolutionException, but maybe something \"general\" like InvalidParameterException or MissingResourceException - or we define a  PioneerException :D", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r412312400", "createdAt": "2020-04-21T16:36:41Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIOExtension.java", "diffHunk": "@@ -27,39 +29,42 @@\n \tprivate static final String SEPARATOR = System.getProperty(\"line.separator\");\n \n \t@Override\n-\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\n-\t\t\tthrows ParameterResolutionException {\n-\t\treturn parameterContext.isAnnotated(Std.class);\n+\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n+\t\treturn parameterContext.isAnnotated(StdIntercept.class);\n \t}\n \n \t@Override\n-\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\n-\t\t\tthrows ParameterResolutionException {\n+\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n \t\tClass<?> parameterType = parameterContext.getParameter().getType();\n+\t\tStdIntercept stdIntercept = getInterceptAnnotation(parameterContext);\n \t\tif (parameterType == StdOut.class) {\n \t\t\treturn new StdOut();\n \t\t}\n \t\tif (parameterType == StdIn.class) {\n-\t\t\tStd std = parameterContext\n-\t\t\t\t\t.findAnnotation(Std.class)\n-\t\t\t\t\t.orElseThrow(() -> new ParameterResolutionException(\"Needs to be annotated with Std\"));\n-\t\t\treturn new StdIn(std.value());\n+\t\t\treturn new StdIn(stdIntercept.value());\n \t\t}\n \t\tthrow new ParameterResolutionException(\"Can only resolve parameter of type \" + StdOut.class.getName() + \" or \"\n \t\t\t\t+ StdIn.class.getName() + \" but was: \" + parameterType.getName());\n \n \t}\n \n+\tprivate StdIntercept getInterceptAnnotation(ParameterContext context) {\n+\t\treturn context\n+\t\t\t\t.findAnnotation(StdIntercept.class)\n+\t\t\t\t.orElseThrow(() -> new ParameterResolutionException(\n+\t\t\t\t\t\"This can never happen because this extension only supplies parameters if the parameter is annotated with @StdIntercept\"));\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4NjA1Ng=="}, "originalCommit": {"oid": "6165f7cdeb02e73f3296e71207854d9da8266f12"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxMzM1Nw==", "bodyText": "This class is copied form JUnit Jupiter and must not be modified.\nPlease add changes to our own extending class AbstractPioneerTestEngineTests", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r412313357", "createdAt": "2020-04-21T16:38:12Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junit/jupiter/engine/AbstractJupiterTestEngineTests.java", "diffHunk": "@@ -38,6 +40,16 @@ protected ExecutionEventRecorder executeTestsForMethod(Class<?> testClass, Strin\n \t\treturn executeTests(request().selectors(selectMethod(testClass.getName(), methodName)).build());\n \t}\n \n+\tprotected ExecutionEventRecorder executeTestsForMethodWithParameters(Class<?> testClass, String methodName,\n+\t\t\tClass<?>... params) {\n+\t\tString paramNames = Arrays\n+\t\t\t\t.stream(params)\n+\t\t\t\t.map(Class::getName)\n+\t\t\t\t.reduce((name1, name2) -> String.join(\",\", name1, name2))\n+\t\t\t\t.orElse(\"\");\n+\t\treturn executeTests(request().selectors(selectMethod(testClass.getName(), methodName, paramNames)).build());\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "041f8dba293593775957eba0e9977e6026a7348b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNDU2Ng==", "bodyText": "Why this try/catch ? The test should only pass if the assert for started count is valid.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r412314566", "createdAt": "2020-04-21T16:40:14Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;\n+import org.junit.platform.engine.test.event.ExecutionEventRecorder;\n+import org.junitpioneer.jupiter.StdIOExtension.StdIn;\n+import org.junitpioneer.jupiter.StdIOExtension.StdOut;\n+\n+@ExtendWith(StdIOExtension.class)\n+@DisplayName(\"StdIOExtension \")\n+public class StdIoExtensionTests extends AbstractJupiterTestEngineTests {\n+\n+\tfinal BasicCommandLineApp app = new BasicCommandLineApp();\n+\n+\t@Nested\n+\t@DisplayName(\"with specific configuration \")\n+\tclass ConfigurationTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\"fails if parameter is not annotated with @StdIntercept\")\n+\t\tvoid needsAnnotation() {\n+\t\t\tExecutionEventRecorder recorder = executeTestsForMethodWithParameters(StdIOExtensionConfigurations.class,\n+\t\t\t\t\"noAnnotation\", StdIn.class);\n+\n+\t\t\tassertThat(getFirstFailuresThrowable(recorder))\n+\t\t\t\t\t.isInstanceOf(ParameterResolutionException.class)\n+\t\t\t\t\t.hasMessageContaining(\"No ParameterResolver registered for\");\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"fails if the parameter type is not StdIn or StdOut\")\n+\t\tvoid needsType() {\n+\t\t\tExecutionEventRecorder recorder = executeTestsForMethodWithParameters(StdIOExtensionConfigurations.class,\n+\t\t\t\t\"badType\", Boolean.class);\n+\n+\t\t\tassertThat(getFirstFailuresThrowable(recorder))\n+\t\t\t\t\t.isInstanceOf(ParameterResolutionException.class)\n+\t\t\t\t\t.hasMessageContaining(\"Can only resolve parameter of type %s or %s but was:\",\n+\t\t\t\t\t\tStdOut.class.getName(), StdIn.class.getName());\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"resolves parameter for type StdIn and annotation\")\n+\t\tvoid goodConfig_stdIn() {\n+\t\t\ttry {\n+\t\t\t\tExecutionEventRecorder recorder = executeTestsForMethodWithParameters(\n+\t\t\t\t\tStdIOExtensionConfigurations.class, \"resolveStdIn\", StdIn.class);\n+\t\t\t\tassertThat(recorder.getTestStartedCount()).isGreaterThan(0);\n+\t\t\t}\n+\t\t\tcatch (Throwable ignored) {\n+\t\t\t\tfail();\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "041f8dba293593775957eba0e9977e6026a7348b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNDY4MA==", "bodyText": "see above", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r412314680", "createdAt": "2020-04-21T16:40:25Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.engine.AbstractJupiterTestEngineTests;\n+import org.junit.platform.engine.test.event.ExecutionEventRecorder;\n+import org.junitpioneer.jupiter.StdIOExtension.StdIn;\n+import org.junitpioneer.jupiter.StdIOExtension.StdOut;\n+\n+@ExtendWith(StdIOExtension.class)\n+@DisplayName(\"StdIOExtension \")\n+public class StdIoExtensionTests extends AbstractJupiterTestEngineTests {\n+\n+\tfinal BasicCommandLineApp app = new BasicCommandLineApp();\n+\n+\t@Nested\n+\t@DisplayName(\"with specific configuration \")\n+\tclass ConfigurationTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\"fails if parameter is not annotated with @StdIntercept\")\n+\t\tvoid needsAnnotation() {\n+\t\t\tExecutionEventRecorder recorder = executeTestsForMethodWithParameters(StdIOExtensionConfigurations.class,\n+\t\t\t\t\"noAnnotation\", StdIn.class);\n+\n+\t\t\tassertThat(getFirstFailuresThrowable(recorder))\n+\t\t\t\t\t.isInstanceOf(ParameterResolutionException.class)\n+\t\t\t\t\t.hasMessageContaining(\"No ParameterResolver registered for\");\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"fails if the parameter type is not StdIn or StdOut\")\n+\t\tvoid needsType() {\n+\t\t\tExecutionEventRecorder recorder = executeTestsForMethodWithParameters(StdIOExtensionConfigurations.class,\n+\t\t\t\t\"badType\", Boolean.class);\n+\n+\t\t\tassertThat(getFirstFailuresThrowable(recorder))\n+\t\t\t\t\t.isInstanceOf(ParameterResolutionException.class)\n+\t\t\t\t\t.hasMessageContaining(\"Can only resolve parameter of type %s or %s but was:\",\n+\t\t\t\t\t\tStdOut.class.getName(), StdIn.class.getName());\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"resolves parameter for type StdIn and annotation\")\n+\t\tvoid goodConfig_stdIn() {\n+\t\t\ttry {\n+\t\t\t\tExecutionEventRecorder recorder = executeTestsForMethodWithParameters(\n+\t\t\t\t\tStdIOExtensionConfigurations.class, \"resolveStdIn\", StdIn.class);\n+\t\t\t\tassertThat(recorder.getTestStartedCount()).isGreaterThan(0);\n+\t\t\t}\n+\t\t\tcatch (Throwable ignored) {\n+\t\t\t\tfail();\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"resolves parameter for type StdOut and annotation\")\n+\t\tvoid goodConfig_stdOut() {\n+\t\t\ttry {\n+\t\t\t\tExecutionEventRecorder recorder = executeTestsForMethodWithParameters(\n+\t\t\t\t\tStdIOExtensionConfigurations.class, \"resolveStdOut\", StdOut.class);\n+\t\t\t\tassertThat(recorder.getTestStartedCount()).isGreaterThan(0);\n+\t\t\t}\n+\t\t\tcatch (Throwable ignored) {\n+\t\t\t\tfail();\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "041f8dba293593775957eba0e9977e6026a7348b"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cb40b6a823c628082f9ed806873965f5798b9ab", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/7cb40b6a823c628082f9ed806873965f5798b9ab", "committedDate": "2020-04-23T20:21:18Z", "message": "Added adoc documentation for standard input/output extension."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27d65060dfdcbc3c4e07b945c81ede4648967ea4", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/27d65060dfdcbc3c4e07b945c81ede4648967ea4", "committedDate": "2020-04-23T22:18:03Z", "message": "Renamed annotation, changed how it interacts with StdIn/StdOut parameters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989", "committedDate": "2020-04-23T22:55:06Z", "message": "Small changes to behaviour (StdIn or StdOut should not be setting standard in/out by themselves). Refreshed documentation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMDY4OTM1", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-400068935", "createdAt": "2020-04-24T15:52:19Z", "commit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo1MjoxOVrOGLeKyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjoyNjo0MVrOGLfjFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MTgwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            :page-description: JUnit Jupiter extension for catchin standard input or output.\n          \n          \n            \n            :page-description: JUnit Jupiter extension for simulating standard input or catching standard output.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414681803", "createdAt": "2020-04-24T15:52:19Z", "author": {"login": "Bukama"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,58 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for catchin standard input or output.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4NDgwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You annotate your test class with `@ExtendWith(StdIOExtension.class)`. This lets JUnit know\n          \n          \n            \n            that you would like to use the special parameters provided by the extension in your tests.\n          \n          \n            \n            If you would like to use the special parameters provided by the extension, just annotate your test class with `@ExtendWith(StdIOExtension.class)`.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414684800", "createdAt": "2020-04-24T15:56:26Z", "author": {"login": "Bukama"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,58 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for catchin standard input or output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+You annotate your test class with `@ExtendWith(StdIOExtension.class)`. This lets JUnit know\n+that you would like to use the special parameters provided by the extension in your tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4ODA4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is for catching input from the standard in. If you are using this parameter, you have to\n          \n          \n            \n            annotate you method with `@StdInSource` which takes a String array and provides the values that\n          \n          \n            \n            you would like to read instead of waiting for input on the standard input.\n          \n          \n            \n            This is for simulating input from the standard in. If you are using this parameter, you have to\n          \n          \n            \n            annotate you method with `@StdInSource`. This annotation takes a String array, which holds values that\n          \n          \n            \n            you would like to read instead of waiting for input on the standard input. Each value of the array represents one (line of) input.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414688081", "createdAt": "2020-04-24T16:01:11Z", "author": {"login": "Bukama"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,58 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for catchin standard input or output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+You annotate your test class with `@ExtendWith(StdIOExtension.class)`. This lets JUnit know\n+that you would like to use the special parameters provided by the extension in your tests.\n+Then, when writing your tests, you can pass two arguments provided by the extension:\n+\n+StdIn::\n+This is for catching input from the standard in. If you are using this parameter, you have to\n+annotate you method with `@StdInSource` which takes a String array and provides the values that\n+you would like to read instead of waiting for input on the standard input.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4OTYyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This would look like something like this:\n          \n          \n            \n            The following example shows how to pass the values `Hello` and `World` as standard input:", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414689624", "createdAt": "2020-04-24T16:03:29Z", "author": {"login": "Bukama"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,58 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for catchin standard input or output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+You annotate your test class with `@ExtendWith(StdIOExtension.class)`. This lets JUnit know\n+that you would like to use the special parameters provided by the extension in your tests.\n+Then, when writing your tests, you can pass two arguments provided by the extension:\n+\n+StdIn::\n+This is for catching input from the standard in. If you are using this parameter, you have to\n+annotate you method with `@StdInSource` which takes a String array and provides the values that\n+you would like to read instead of waiting for input on the standard input.\n+\n+This would look like something like this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5MDkzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is for catching output going to the standard out. This parameter does not require any special annotations\n          \n          \n            \n            (except for the `@ExtendWith(StdIOExtension.class)` on your test class).\n          \n          \n            \n            This is for catching output going to the standard out. This parameter does not require any additional annotations \n          \n          \n            \n            except for the `@ExtendWith(StdIOExtension.class)` on your test class (see below).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414690935", "createdAt": "2020-04-24T16:05:28Z", "author": {"login": "Bukama"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,58 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for catchin standard input or output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+You annotate your test class with `@ExtendWith(StdIOExtension.class)`. This lets JUnit know\n+that you would like to use the special parameters provided by the extension in your tests.\n+Then, when writing your tests, you can pass two arguments provided by the extension:\n+\n+StdIn::\n+This is for catching input from the standard in. If you are using this parameter, you have to\n+annotate you method with `@StdInSource` which takes a String array and provides the values that\n+you would like to read instead of waiting for input on the standard input.\n+\n+This would look like something like this:\n+\n+[source,java]\n+----\n+    @ExtendWith(StdIOExtension.class)\n+    public class StandardInputOutputTests {\n+        ...\n+    @Test\n+    @StdInSource({\"Hello\", \"World\"})\n+    void test(StdIn in) {\n+        ...\n+\n+----\n+\n+StdOut::\n+This is for catching output going to the standard out. This parameter does not require any special annotations\n+(except for the `@ExtendWith(StdIOExtension.class)` on your test class).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5MjM0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This would look like something like this:", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414692343", "createdAt": "2020-04-24T16:07:33Z", "author": {"login": "Bukama"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,58 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for catchin standard input or output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+You annotate your test class with `@ExtendWith(StdIOExtension.class)`. This lets JUnit know\n+that you would like to use the special parameters provided by the extension in your tests.\n+Then, when writing your tests, you can pass two arguments provided by the extension:\n+\n+StdIn::\n+This is for catching input from the standard in. If you are using this parameter, you have to\n+annotate you method with `@StdInSource` which takes a String array and provides the values that\n+you would like to read instead of waiting for input on the standard input.\n+\n+This would look like something like this:\n+\n+[source,java]\n+----\n+    @ExtendWith(StdIOExtension.class)\n+    public class StandardInputOutputTests {\n+        ...\n+    @Test\n+    @StdInSource({\"Hello\", \"World\"})\n+    void test(StdIn in) {\n+        ...\n+\n+----\n+\n+StdOut::\n+This is for catching output going to the standard out. This parameter does not require any special annotations\n+(except for the `@ExtendWith(StdIOExtension.class)` on your test class).\n+\n+This would look like something like this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5ODM3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After calling your method that reads or writes to the standard in or out, you can call\n          \n          \n            \n            `capturedLines()` (available in both `StdIn` and `StdOut`) to verify the interactions.\n          \n          \n            \n            This contains the redirected in- or output as lines.\n          \n          \n            \n            To check your method under tests interactions with `StdIn` or `StdOut`, you can call the \n          \n          \n            \n            `capturedLines()` method (available in both `StdIn` and `StdOut`) inside your test and to verify the lines read by `StdIn` or written by `StdOut`.\n          \n          \n            \n            This array contains the redirected in- or output as lines.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414698372", "createdAt": "2020-04-24T16:16:56Z", "author": {"login": "Bukama"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,58 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for catchin standard input or output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+You annotate your test class with `@ExtendWith(StdIOExtension.class)`. This lets JUnit know\n+that you would like to use the special parameters provided by the extension in your tests.\n+Then, when writing your tests, you can pass two arguments provided by the extension:\n+\n+StdIn::\n+This is for catching input from the standard in. If you are using this parameter, you have to\n+annotate you method with `@StdInSource` which takes a String array and provides the values that\n+you would like to read instead of waiting for input on the standard input.\n+\n+This would look like something like this:\n+\n+[source,java]\n+----\n+    @ExtendWith(StdIOExtension.class)\n+    public class StandardInputOutputTests {\n+        ...\n+    @Test\n+    @StdInSource({\"Hello\", \"World\"})\n+    void test(StdIn in) {\n+        ...\n+\n+----\n+\n+StdOut::\n+This is for catching output going to the standard out. This parameter does not require any special annotations\n+(except for the `@ExtendWith(StdIOExtension.class)` on your test class).\n+\n+This would look like something like this:\n+\n+[source,java]\n+----\n+    @ExtendWith(StdIOExtension.class)\n+    public class StandardInputOutputTests {\n+        ...\n+    @Test\n+    void test(StdOut out) {\n+        ...\n+\n+----\n+\n+After calling your method that reads or writes to the standard in or out, you can call\n+`capturedLines()` (available in both `StdIn` and `StdOut`) to verify the interactions.\n+This contains the redirected in- or output as lines.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5OTIxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the `capturedLines()` method would contain \"HelloWorld\".\n          \n          \n            \n            the `capturedLines()` method would provides you an array containing the two strings \"Hello\" and \"World\".", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414699211", "createdAt": "2020-04-24T16:18:22Z", "author": {"login": "Bukama"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,58 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for catchin standard input or output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+You annotate your test class with `@ExtendWith(StdIOExtension.class)`. This lets JUnit know\n+that you would like to use the special parameters provided by the extension in your tests.\n+Then, when writing your tests, you can pass two arguments provided by the extension:\n+\n+StdIn::\n+This is for catching input from the standard in. If you are using this parameter, you have to\n+annotate you method with `@StdInSource` which takes a String array and provides the values that\n+you would like to read instead of waiting for input on the standard input.\n+\n+This would look like something like this:\n+\n+[source,java]\n+----\n+    @ExtendWith(StdIOExtension.class)\n+    public class StandardInputOutputTests {\n+        ...\n+    @Test\n+    @StdInSource({\"Hello\", \"World\"})\n+    void test(StdIn in) {\n+        ...\n+\n+----\n+\n+StdOut::\n+This is for catching output going to the standard out. This parameter does not require any special annotations\n+(except for the `@ExtendWith(StdIOExtension.class)` on your test class).\n+\n+This would look like something like this:\n+\n+[source,java]\n+----\n+    @ExtendWith(StdIOExtension.class)\n+    public class StandardInputOutputTests {\n+        ...\n+    @Test\n+    void test(StdOut out) {\n+        ...\n+\n+----\n+\n+After calling your method that reads or writes to the standard in or out, you can call\n+`capturedLines()` (available in both `StdIn` and `StdOut`) to verify the interactions.\n+This contains the redirected in- or output as lines.\n+\n+For example, after calling `System.out.print(\"Hello\")` and `System.out.println(\"World\")`,\n+the `capturedLines()` method would contain \"HelloWorld\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwMDk5MQ==", "bodyText": "I personally like parenthesis here (even when they are not necessary).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414700991", "createdAt": "2020-04-24T16:21:17Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIOExtension.java", "diffHunk": "@@ -30,39 +32,46 @@\n \n \t@Override\n \tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n-\t\treturn parameterContext.isAnnotated(StdIntercept.class);\n+\t\tClass<?> type = parameterContext.getParameter().getType();\n+\t\treturn type == StdIn.class || type == StdOut.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwMjY1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tformat(\"Can not resolve parameter %s because test method is missing annotation %s\",\n          \n          \n            \n            \t\t\t\t\tformat(\"Can not resolve test methods parameter %s because the '%s' annotation is missing.\",", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414702658", "createdAt": "2020-04-24T16:23:52Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIOExtension.java", "diffHunk": "@@ -30,39 +32,46 @@\n \n \t@Override\n \tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n-\t\treturn parameterContext.isAnnotated(StdIntercept.class);\n+\t\tClass<?> type = parameterContext.getParameter().getType();\n+\t\treturn type == StdIn.class || type == StdOut.class;\n \t}\n \n \t@Override\n \tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n \t\tClass<?> parameterType = parameterContext.getParameter().getType();\n-\t\tStdIntercept stdIntercept = getInterceptAnnotation(parameterContext);\n \t\tif (parameterType == StdOut.class) {\n-\t\t\treturn new StdOut();\n-\t\t}\n-\t\tif (parameterType == StdIn.class) {\n-\t\t\treturn new StdIn(stdIntercept.value());\n+\t\t\treturn getOut();\n \t\t}\n-\t\tthrow new ParameterResolutionException(\"Can only resolve parameter of type \" + StdOut.class.getName() + \" or \"\n-\t\t\t\t+ StdIn.class.getName() + \" but was: \" + parameterType.getName());\n+\t\tString[] source = getSourceValuesFromAnnotation(extensionContext);\n+\t\treturn getIn(source);\n+\t}\n \n+\tprivate Object getIn(String[] source) {\n+\t\tStdIn in = new StdIn(source);\n+\t\tSystem.setIn(in);\n+\t\treturn in;\n \t}\n \n-\tprivate StdIntercept getInterceptAnnotation(ParameterContext context) {\n+\tprivate Object getOut() {\n+\t\tStdOut out = new StdOut();\n+\t\tSystem.setOut(new PrintStream(out));\n+\t\treturn out;\n+\t}\n+\n+\tprivate String[] getSourceValuesFromAnnotation(ExtensionContext context) {\n \t\treturn context\n-\t\t\t\t.findAnnotation(StdIntercept.class)\n+\t\t\t\t.getTestMethod()\n+\t\t\t\t.map(method -> method.getAnnotation(StdInSource.class))\n+\t\t\t\t.map(StdInSource::value)\n \t\t\t\t.orElseThrow(() -> new ParameterResolutionException(\n-\t\t\t\t\t\"This can never happen because this extension only supplies parameters if the parameter is annotated with @StdIntercept\"));\n+\t\t\t\t\tformat(\"Can not resolve parameter %s because test method is missing annotation %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwNDQwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Provide values that the extension will read instead of reading the\n          \n          \n            \n             * standard input ({@code System.out}).\n          \n          \n            \n             * This should be used with {@link org.junitpioneer.jupiter.StdIOExtension.StdIn}.\n          \n          \n            \n             * Provide values that the {@code StdIOExtension} extension will read instead of reading the\n          \n          \n            \n             * standard input ({@code System.in}).\n          \n          \n            \n             * This should be used with {@link org.junitpioneer.jupiter.StdIOExtension.StdIn}.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r414704404", "createdAt": "2020-04-24T16:26:41Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/StdInSource.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Provide values that the extension will read instead of reading the\n+ * standard input ({@code System.out}).\n+ * This should be used with {@link org.junitpioneer.jupiter.StdIOExtension.StdIn}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ffb0f163bc860f191d03c3a8dffb4e5ea0989"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72cb7a914d781abfa69b2f7ed50492ca9b101e1d", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/72cb7a914d781abfa69b2f7ed50492ca9b101e1d", "committedDate": "2020-04-25T03:19:06Z", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into std-io\n\n\u0001 Conflicts:\n\u0001\tsrc/test/java/org/junit/jupiter/engine/AbstractJupiterTestEngineTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c5ec09070ca73c1d6ae6abe30b9dc1d16013fa4", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/5c5ec09070ca73c1d6ae6abe30b9dc1d16013fa4", "committedDate": "2020-04-25T04:01:14Z", "message": "Refactor based on suggestions and to use the new testkit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f38a3a3352ece9c47440106fb77cd31584afb340", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f38a3a3352ece9c47440106fb77cd31584afb340", "committedDate": "2020-04-26T12:23:40Z", "message": "Sonar quality updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTA2ODA4", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-400506808", "createdAt": "2020-04-26T13:50:37Z", "commit": {"oid": "f38a3a3352ece9c47440106fb77cd31584afb340"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMzo1MDozN1rOGME17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMzo1MjozMFrOGME3cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMxNTQzNw==", "bodyText": "Please move up. The list should be in lexicographic order.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r415315437", "createdAt": "2020-04-26T13:50:37Z", "author": {"login": "Bukama"}, "path": "docs/docs-nav.yml", "diffHunk": "@@ -18,3 +18,5 @@\n         url: /docs/temp-directory/\n       - title: \"Vintage @Test\"\n         url: /docs/vintage-test/\n+      - title: \"Standard input/output\"\n+        url: /docs/standard-input-output.adoc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f38a3a3352ece9c47440106fb77cd31584afb340"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMxNTgyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, after calling `System.out.print(\"Hello\")` and `System.out.println(\"World\")`,\n          \n          \n            \n            the `capturedLines()` method would contain an array of the String \"HelloWorld\" because\n          \n          \n            \n            the first method does not print a line break.\n          \n          \n            \n            For example, after calling `System.out.print(\"Hello\")` and `System.out.println(\"World\")`,\n          \n          \n            \n            the `capturedLines()` method would contain an array of the String \"HelloWorld\", because\n          \n          \n            \n            the first method does not print a line break.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r415315824", "createdAt": "2020-04-26T13:52:30Z", "author": {"login": "Bukama"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,64 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for simulating standard input or catching standard output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+If you would like to use the special parameters provided by the extension\n+just annotate your test class with `@ExtendWith(StdIOExtension.class)`.\n+Then, when writing your tests, you can pass the following two classes as arguments (provided by the extension):\n+\n+StdIn(`org.junitpioneer.jupiter.StdIOExtension.StdIn`)::\n+This is for simulating input from the standard in. If you are using this parameter, you have to\n+annotate you method with `@StdInSource`. This annotation takes a String array which holds the values that\n+you would like to read instead of waiting for input on the standard input. Each value of the array\n+represents one line of input.\n+\n+The following example shows how to pass the values `Hello` and `World` as standard input:\n+\n+[source,java]\n+----\n+    @ExtendWith(StdIOExtension.class)\n+    public class StandardInputOutputTests {\n+        ...\n+    @Test\n+    @StdInSource({\"Hello\", \"World\"})\n+    void test(StdIn in) {\n+        ...\n+\n+----\n+\n+StdOut(`org.junitpioneer.jupiter.StdIOExtension.StdOut`)::\n+This is for catching output going to the standard out. This parameter does not require any additional annotations\n+except for the `@ExtendWith(StdIOExtension.class)` on your test class (see below).\n+\n+[source,java]\n+----\n+    @ExtendWith(StdIOExtension.class)\n+    public class StandardInputOutputTests {\n+        ...\n+    @Test\n+    void test(StdOut out) {\n+        ...\n+\n+----\n+\n+To check your method under tests interactions with `StdIn` or `StdOut`, you can call\n+`capturedLines()` (available in both `StdIn` and `StdOut`) inside your test to verify\n+the lines read by `StdIn` or written by `StdOut`.\n+This array contains the redirected in- or output as lines.\n+\n+For example, after calling `System.out.print(\"Hello\")` and `System.out.println(\"World\")`,\n+the `capturedLines()` method would contain an array of the String \"HelloWorld\" because\n+the first method does not print a line break.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f38a3a3352ece9c47440106fb77cd31584afb340"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edd5906f8362d192963f2b9211c3f4312c64a621", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/edd5906f8362d192963f2b9211c3f4312c64a621", "committedDate": "2020-04-26T15:24:18Z", "message": "Documentation update, revert unused method implementation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTIxMzMy", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-400521332", "createdAt": "2020-04-26T16:13:55Z", "commit": {"oid": "edd5906f8362d192963f2b9211c3f4312c64a621"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Mzc2Nzg5", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-417376789", "createdAt": "2020-05-24T17:29:07Z", "commit": {"oid": "edd5906f8362d192963f2b9211c3f4312c64a621"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNzoyOTowN1rOGZwPcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNzoyOTowN1rOGZwPcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Nzk3MQ==", "bodyText": "i just want to raise a discussion here, about our documentation style, or more about unifying it - and maybe find a guideline on how to write docs. Currently it seems like we have two different approaches:\n\nthe personal/informal one, in which we address the developer and his work directly with you and your tests (like here)\nthe formal one, in which it seems like we try to avoid such constructs (eg. RangeSource)\n\nFor a good comprehensive documentation i think we should agree on one style to use. As it makes reading the docs easier to grasp and shows some kind of consistency. The questions are\n\nis this something which only bothers me? than lets continue, as i did not say anything :)\nwhat would be the general preference. I tend to use the formal one, simply because it feels more 'technical' to me.\n\nWhat is the general take on this?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r429657971", "createdAt": "2020-05-24T17:29:07Z", "author": {"login": "aepfli"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,64 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for simulating standard input or catching standard output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+If you would like to use the special parameters provided by the extension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd5906f8362d192963f2b9211c3f4312c64a621"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Mzc3MTU5", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-417377159", "createdAt": "2020-05-24T17:34:41Z", "commit": {"oid": "edd5906f8362d192963f2b9211c3f4312c64a621"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNzozNDo0MVrOGZwRHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNzozNDo1OFrOGZwRPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1ODM5OQ==", "bodyText": "i think we do favor one sentence per line in our documentation, as it is easier to maintain and to move around (no line length). @nicolaiparlog explained the reason in the last pioneer stream, i think he know all the words, and has the best words, so hopefully he can explain that better in written words.\nso i think we should stick to one sentence per line, without breaking.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r429658399", "createdAt": "2020-05-24T17:34:41Z", "author": {"login": "aepfli"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,64 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for simulating standard input or catching standard output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+If you would like to use the special parameters provided by the extension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd5906f8362d192963f2b9211c3f4312c64a621"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1ODQyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            annotate you method with `@StdInSource`. This annotation takes a String array which holds the values that\n          \n          \n            \n            annotate your method with `@StdInSource`. This annotation takes a String array which holds the values that", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r429658429", "createdAt": "2020-05-24T17:34:58Z", "author": {"login": "aepfli"}, "path": "docs/standard-input-output.adoc", "diffHunk": "@@ -0,0 +1,64 @@\n+:page-title: Standard input/output\n+:page-description: JUnit Jupiter extension for simulating standard input or catching standard output.\n+\n+The `StdIOExtension` adds a simple way to test your classes that read from the standard\n+input (`System.in`) or write to the standard output (`System.out`).\n+\n+== How to use the extension\n+\n+If you would like to use the special parameters provided by the extension\n+just annotate your test class with `@ExtendWith(StdIOExtension.class)`.\n+Then, when writing your tests, you can pass the following two classes as arguments (provided by the extension):\n+\n+StdIn(`org.junitpioneer.jupiter.StdIOExtension.StdIn`)::\n+This is for simulating input from the standard in. If you are using this parameter, you have to\n+annotate you method with `@StdInSource`. This annotation takes a String array which holds the values that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edd5906f8362d192963f2b9211c3f4312c64a621"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzQzNDYw", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-417743460", "createdAt": "2020-05-25T14:22:32Z", "commit": {"oid": "edd5906f8362d192963f2b9211c3f4312c64a621"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad6b32002e144c8b204208aa99df3e66feb49524", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ad6b32002e144c8b204208aa99df3e66feb49524", "committedDate": "2020-05-26T16:46:13Z", "message": "Made documentation less informal and properly formatted"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTk2MjU3", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-418596257", "createdAt": "2020-05-26T19:10:10Z", "commit": {"oid": "ad6b32002e144c8b204208aa99df3e66feb49524"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTQ3OTQ3", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-418947947", "createdAt": "2020-05-27T08:01:59Z", "commit": {"oid": "ad6b32002e144c8b204208aa99df3e66feb49524"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowMjowMFrOGa92tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowMjowMFrOGa92tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyOTU5MA==", "bodyText": "This needs to be written without .adoc but with trailing slash. Otherwise the site will break", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#discussion_r430929590", "createdAt": "2020-05-27T08:02:00Z", "author": {"login": "Bukama"}, "path": "docs/docs-nav.yml", "diffHunk": "@@ -14,6 +14,8 @@\n         url: /docs/repeat-failed-test/\n       - title: \"Report entries\"\n         url: /docs/report-entries/\n+      - title: \"Standard input/output\"\n+        url: /docs/standard-input-output.adoc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6b32002e144c8b204208aa99df3e66feb49524"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81f87ec681c3580ba7f7b503a30964b1d3e09b2c", "author": {"user": {"login": "Michael1993", "name": "Mih\u00e1ly Verh\u00e1s"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/81f87ec681c3580ba7f7b503a30964b1d3e09b2c", "committedDate": "2020-05-27T10:33:27Z", "message": "Fix docs-nav.yml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTAzMjA4", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/227#pullrequestreview-419503208", "createdAt": "2020-05-27T18:34:22Z", "commit": {"oid": "81f87ec681c3580ba7f7b503a30964b1d3e09b2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3755, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}