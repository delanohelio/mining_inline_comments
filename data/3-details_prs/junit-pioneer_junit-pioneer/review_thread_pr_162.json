{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTM4ODQ0", "number": 162, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyMzozMlrODZm9Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyMzozMlrODZm9Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc5MjI2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/UtilsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyMzozMlrOFgF7nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDozMzowMFrOFgH5Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5NTkzMw==", "bodyText": "Do you think we should really verify that it's a HashSet - any other implementation should be fine as well, right?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/162#discussion_r369195933", "createdAt": "2020-01-21T19:23:32Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/jupiter/UtilsTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"Utils\")\n+class UtilsTest {\n+\n+\t@Nested\n+\t@DisplayName(\"to distinct set\")\n+\tclass ToDistinctSetTests {\n+\n+\t\tCollector<Object, Set<Object>, Set<Object>> collector;\n+\n+\t\t@BeforeEach\n+\t\tvoid setUp() throws Exception {\n+\t\t\tcollector = Utils.distinctToSet();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"should use hash set\")\n+\t\tvoid supplierShouldUseHashSet() throws Exception {\n+\t\t\tSupplier<Set<Object>> supplier = collector.supplier();\n+\n+\t\t\tassertThat(supplier.get()).isInstanceOf(HashSet.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b183de45735b08e2b098716ae50ecab53d591740"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwNDIyOQ==", "bodyText": "Yes, another implementation would do the job too. I just thought it would make sense to specify the current implementation as part of the tests. Feel free to delete the test case.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/162#discussion_r369204229", "createdAt": "2020-01-21T19:41:04Z", "author": {"login": "beatngu13"}, "path": "src/test/java/org/junitpioneer/jupiter/UtilsTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"Utils\")\n+class UtilsTest {\n+\n+\t@Nested\n+\t@DisplayName(\"to distinct set\")\n+\tclass ToDistinctSetTests {\n+\n+\t\tCollector<Object, Set<Object>, Set<Object>> collector;\n+\n+\t\t@BeforeEach\n+\t\tvoid setUp() throws Exception {\n+\t\t\tcollector = Utils.distinctToSet();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"should use hash set\")\n+\t\tvoid supplierShouldUseHashSet() throws Exception {\n+\t\t\tSupplier<Set<Object>> supplier = collector.supplier();\n+\n+\t\t\tassertThat(supplier.get()).isInstanceOf(HashSet.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5NTkzMw=="}, "originalCommit": {"oid": "b183de45735b08e2b098716ae50ecab53d591740"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyODExNA==", "bodyText": "I'll do that then. :)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/162#discussion_r369228114", "createdAt": "2020-01-21T20:33:00Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/jupiter/UtilsTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"Utils\")\n+class UtilsTest {\n+\n+\t@Nested\n+\t@DisplayName(\"to distinct set\")\n+\tclass ToDistinctSetTests {\n+\n+\t\tCollector<Object, Set<Object>, Set<Object>> collector;\n+\n+\t\t@BeforeEach\n+\t\tvoid setUp() throws Exception {\n+\t\t\tcollector = Utils.distinctToSet();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"should use hash set\")\n+\t\tvoid supplierShouldUseHashSet() throws Exception {\n+\t\t\tSupplier<Set<Object>> supplier = collector.supplier();\n+\n+\t\t\tassertThat(supplier.get()).isInstanceOf(HashSet.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5NTkzMw=="}, "originalCommit": {"oid": "b183de45735b08e2b098716ae50ecab53d591740"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4171, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}