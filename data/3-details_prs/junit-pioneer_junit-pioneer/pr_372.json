{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNjQwOTI0", "number": 372, "title": "Allow adding an existing collection to CartesianProduct$Sets", "bodyText": "Closes #358.\nProposed commit message:\nAllow adding an existing collection to CartesianProduct$Sets (#358 / #372)\n\n`CartesianProductTest$Sets#add` currently only accepts `Object`\nvarargs, which is why methods used within Cartesian product factory\nmethods must return an array. This PR introduces\n`CartesianProductTest$Sets#addAll` to allow adding an existing\ncollection or stream.\n\nCloses: #358 \nPR: #372\n\n\nPR checklist\nThe following checklist shall help the PR's author, the reviewers and maintainers to ensure the quality of this project.\nIt is based on our contributors guidelines, especially the \"writing code\" section.\nIt shall help to check for completion of the listed points.\nIf a point does not apply to the given PR's changes, the corresponding entry can be simply marked as done.\nDocumentation (general)\n\n There is documentation (Javadoc and site documentation; added or updated)\n There is implementation information to describe why a non-obvious source code / solution got implemented\n Site documentation has its own .adoc file in the docs folder, e.g. docs/report-entries.adoc\n Only one sentence per line (especially in .adoc files)\n Javadoc uses formal style, while sites documentation may use informal style (see #265)\n\nDocumentation (new extension)\n\n The docs/docs-nav.yml navigation has an entry for the new extension\n The package-info.java contains information about the new extension\n\nCode\n\n Code adheres to code style, naming conventions etc.\n Successful tests cover all changes\n There are checks which validate correct / false usage / configuration of a functionality and there are tests to verify those checks (see #164)\n Tests use AssertJ or our own PioneerAssert (which are based on AssertJ)\n\nContributing\n\n A prepared commit message exists\n The list of contributions inside README.md mentions the new contribution (real name optional)\n\n\nI hereby agree to the terms of the JUnit Pioneer Contributor License Agreement.", "createdAt": "2020-11-01T15:23:40Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/372", "merged": true, "mergeCommit": {"oid": "09cdb7405f1f3809d49629bdb2dd62477e1f774a"}, "closed": true, "closedAt": "2020-11-24T20:52:26Z", "author": {"login": "beatngu13"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYRWp-gH2gAyNTEzNjQwOTI0OmRkMzJhODdlMzc5NDg1Y2JjODRmMTY2MGNhZTEwN2NmOGMyY2E4YzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfwEVgAH2gAyNTEzNjQwOTI0OmY3YjY5Y2RhNWI2MTMyOWRiOWJiYmMxZDEyZWU1NWI1ZGNkMmE4YWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd32a87e379485cbc84f1660cae107cf8c2ca8c6", "author": {"user": {"login": "beatngu13", "name": "Daniel Kraus"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/dd32a87e379485cbc84f1660cae107cf8c2ca8c6", "committedDate": "2020-11-01T15:04:33Z", "message": "Create method to add all items from an existing collection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f9bbd389520dccb73201585c3a72f01d22ecc26", "author": {"user": {"login": "beatngu13", "name": "Daniel Kraus"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8f9bbd389520dccb73201585c3a72f01d22ecc26", "committedDate": "2020-11-01T15:12:39Z", "message": "Add separate test for Cartesian product sets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjQwODU4", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/372#pullrequestreview-521240858", "createdAt": "2020-11-01T16:44:36Z", "commit": {"oid": "8f9bbd389520dccb73201585c3a72f01d22ecc26"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjo0NDozNlrOHrwa3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjo0NzowN1rOHrwb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NDEyNw==", "bodyText": "Personally, I'd put these in a @Nested class in CartesianProductTestExtensionTests.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/372#discussion_r515644127", "createdAt": "2020-11-01T16:44:36Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/CartesianProductTestSetsTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.util.Lists.list;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"The sets for CartesianProductTest\")\n+class CartesianProductTestSetsTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9bbd389520dccb73201585c3a72f01d22ecc26"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NDIxNg==", "bodyText": "Also, this test never runs because we only run test classes that match the pattern: .*Tests.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/372#discussion_r515644216", "createdAt": "2020-11-01T16:45:15Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/CartesianProductTestSetsTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.util.Lists.list;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+@DisplayName(\"The sets for CartesianProductTest\")\n+class CartesianProductTestSetsTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NDEyNw=="}, "originalCommit": {"oid": "8f9bbd389520dccb73201585c3a72f01d22ecc26"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NDQxNQ==", "bodyText": "Didn't you say we should be able to add a Stream too...?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/372#discussion_r515644415", "createdAt": "2020-11-01T16:47:07Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/CartesianProductTest.java", "diffHunk": "@@ -72,10 +74,19 @@\n \t\tprivate final List<List<?>> sets = new ArrayList<>(); //NOSONAR\n \n \t\tpublic Sets add(Object... entries) {\n-\t\t\tsets.add(new ArrayList<>(Arrays.stream(entries).distinct().collect(toList())));\n+\t\t\tsets.add(toDistinctList(Arrays.stream(entries)));\n \t\t\treturn this;\n \t\t}\n \n+\t\tpublic Sets addAll(Collection<?> entries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9bbd389520dccb73201585c3a72f01d22ecc26"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f429dc79065099965e4b6f131130af3945a5a116", "author": {"user": {"login": "beatngu13", "name": "Daniel Kraus"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f429dc79065099965e4b6f131130af3945a5a116", "committedDate": "2020-11-01T16:55:44Z", "message": "Fix test name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b31884a966abbbf939c2af50059359da9bf486ff", "author": {"user": {"login": "beatngu13", "name": "Daniel Kraus"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b31884a966abbbf939c2af50059359da9bf486ff", "committedDate": "2020-11-01T17:19:29Z", "message": "Create method to add all items from an existing stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56fe1531b16705d24bcb5f85149a5bdb9282546b", "author": {"user": {"login": "beatngu13", "name": "Daniel Kraus"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/56fe1531b16705d24bcb5f85149a5bdb9282546b", "committedDate": "2020-11-01T17:31:47Z", "message": "Convert sets tests to nested test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a62fce9402b6ad338f949f0e667ff4b620f5ca58", "author": {"user": {"login": "beatngu13", "name": "Daniel Kraus"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a62fce9402b6ad338f949f0e667ff4b620f5ca58", "committedDate": "2020-11-01T17:37:12Z", "message": "Inline method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjQ1NDk0", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/372#pullrequestreview-521245494", "createdAt": "2020-11-01T17:45:41Z", "commit": {"oid": "a62fce9402b6ad338f949f0e667ff4b620f5ca58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzE1MjQ5", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/372#pullrequestreview-522715249", "createdAt": "2020-11-03T17:16:26Z", "commit": {"oid": "a62fce9402b6ad338f949f0e667ff4b620f5ca58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94567058773bcd9069274813b3c335adb6f556cc", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/94567058773bcd9069274813b3c335adb6f556cc", "committedDate": "2020-11-24T20:37:28Z", "message": "Change code block style from MD to ADOC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4648011fefeefe2ffd897eafd793c508b873bd5f", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4648011fefeefe2ffd897eafd793c508b873bd5f", "committedDate": "2020-11-24T20:40:11Z", "message": "Indent with tabs \ud83d\ude20"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "192508216e13d7e4d285ac191cebfa7d39475372", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/192508216e13d7e4d285ac191cebfa7d39475372", "committedDate": "2020-11-24T20:40:25Z", "message": "Explain addAll in documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86547d6458434d9ece41fa924150facbf4507a18", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/86547d6458434d9ece41fa924150facbf4507a18", "committedDate": "2020-11-24T20:45:13Z", "message": "Add addAll(Iterable)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b69cda5b61329db9bbbc1d12ee55b5dcd2a8ae", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f7b69cda5b61329db9bbbc1d12ee55b5dcd2a8ae", "committedDate": "2020-11-24T20:49:04Z", "message": "Add contribution to README"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3687, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}