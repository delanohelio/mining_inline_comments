{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzgxNTA1", "number": 216, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzozNDoyMlrODuqmzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxODo1MFrODvo3JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjU5MTQ5OnYy", "diffSide": "RIGHT", "path": "docs/report-entries.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzozNDoyM1rOGAv6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzozNDoyM1rOGAv6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODE5Ng==", "bodyText": "I don't see the use case here. If I don't need a report entry then why should I even set the annotation?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403438196", "createdAt": "2020-04-04T07:34:23Z", "author": {"login": "Bukama"}, "path": "docs/report-entries.adoc", "diffHunk": "@@ -78,3 +78,24 @@ void edgarAllanPoe() {\n ----\n \n Again, just like `TestReporter::publishEntry`, if no key is given it defaults to `\"value\"` (yes, that's not a mixup).\n+\n+=== Publish conditions\n+\n+You can specify a `PublishCondition` parameter on the `@ReportEntry` annotation for better control when the extension\n+should publish your entry. Just so:\n+\n+[source,java]\n+----\n+@Test\n+@ReportEntry(key = \"line\", value = \"success entry\", when = ReportEntry.PublishCondition.ON_SUCCESS)\n+void sufferingFromSuccess() {\n+    // YOUR TEST CODE HERE\n+}\n+----\n+\n+The `PublishCondition` must be one of the following:\n+\n+- ALWAYS        The extension will always publish your entry when the test runs.\n+- ON_SUCCESS    The extension will publish your report entry if the test finishes successfully.\n+- ON_FAILURE    The extension will publish your report entry if the test fails.\n+- NEVERMORE     The extension will *not* publish your report entry. Nevermore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjU5NTA1OnYy", "diffSide": "RIGHT", "path": "docs/report-entries.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzozODo1NFrOGAv8Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzozODo1NFrOGAv8Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODYzMA==", "bodyText": "In my opionion you don't have ro repeat the @ReportEntry as we are in the documentation of it, so the focus is clear. So I would change the sentence to\n\nYou can specify a publish condition by using the when parameter for better control if the extension should publish your entry.\n\nor\n\n\nYou can specify a publish condition for better control if the extension should publish your entry. To do so just use the when attribute like shown in the following example:", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403438630", "createdAt": "2020-04-04T07:38:54Z", "author": {"login": "Bukama"}, "path": "docs/report-entries.adoc", "diffHunk": "@@ -78,3 +78,24 @@ void edgarAllanPoe() {\n ----\n \n Again, just like `TestReporter::publishEntry`, if no key is given it defaults to `\"value\"` (yes, that's not a mixup).\n+\n+=== Publish conditions\n+\n+You can specify a `PublishCondition` parameter on the `@ReportEntry` annotation for better control when the extension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjU5NjIyOnYy", "diffSide": "RIGHT", "path": "docs/report-entries.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0MDozNlrOGAv8tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0MDozNlrOGAv8tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODc3NA==", "bodyText": "Suggestion:\n\nThe publish condition must be an entry of the ReportEntry.PublishCondition enumeration, which contains the following values:", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403438774", "createdAt": "2020-04-04T07:40:36Z", "author": {"login": "Bukama"}, "path": "docs/report-entries.adoc", "diffHunk": "@@ -78,3 +78,24 @@ void edgarAllanPoe() {\n ----\n \n Again, just like `TestReporter::publishEntry`, if no key is given it defaults to `\"value\"` (yes, that's not a mixup).\n+\n+=== Publish conditions\n+\n+You can specify a `PublishCondition` parameter on the `@ReportEntry` annotation for better control when the extension\n+should publish your entry. Just so:\n+\n+[source,java]\n+----\n+@Test\n+@ReportEntry(key = \"line\", value = \"success entry\", when = ReportEntry.PublishCondition.ON_SUCCESS)\n+void sufferingFromSuccess() {\n+    // YOUR TEST CODE HERE\n+}\n+----\n+\n+The `PublishCondition` must be one of the following:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjU5Njk3OnYy", "diffSide": "RIGHT", "path": "docs/report-entries.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0MjoxMFrOGAv9Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0MjoxMFrOGAv9Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzODg3NA==", "bodyText": "I suggest to rephrase it to:\n\nThe extension will always publish the entry regardless of the rest result.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403438874", "createdAt": "2020-04-04T07:42:10Z", "author": {"login": "Bukama"}, "path": "docs/report-entries.adoc", "diffHunk": "@@ -78,3 +78,24 @@ void edgarAllanPoe() {\n ----\n \n Again, just like `TestReporter::publishEntry`, if no key is given it defaults to `\"value\"` (yes, that's not a mixup).\n+\n+=== Publish conditions\n+\n+You can specify a `PublishCondition` parameter on the `@ReportEntry` annotation for better control when the extension\n+should publish your entry. Just so:\n+\n+[source,java]\n+----\n+@Test\n+@ReportEntry(key = \"line\", value = \"success entry\", when = ReportEntry.PublishCondition.ON_SUCCESS)\n+void sufferingFromSuccess() {\n+    // YOUR TEST CODE HERE\n+}\n+----\n+\n+The `PublishCondition` must be one of the following:\n+\n+- ALWAYS        The extension will always publish your entry when the test runs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjU5ODg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0NDoxNVrOGAv98w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0NDoxNVrOGAv98w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTA5MQ==", "bodyText": "Documentation is wrong as the extension uses the AfterEachCallback. But as written above I would mentioned that it will always publish regardless of the test result", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439091", "createdAt": "2020-04-04T07:44:15Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwMDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0NjoxM1rOGAv-iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0NjoxM1rOGAv-iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTI0MQ==", "bodyText": "We are on Junit 5.4.2 since last week! See build.gradle.kts", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439241", "createdAt": "2020-04-04T07:46:13Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -12,20 +12,32 @@\n \n import static java.lang.String.format;\n \n-import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n \n-class ReportEntryExtension implements BeforeEachCallback {\n+class ReportEntryExtension implements AfterEachCallback {\n \n+\t// TODO: This can be replaced with specific TestWatcher interface methods, once we update to JUnit 5.4+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwMDU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0Njo0NlrOGAv-vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo0Njo0NlrOGAv-vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTI5Mw==", "bodyText": "The value NEVERMORE is never used aside from test cases. This underlines that it's not needed and should be removed!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439293", "createdAt": "2020-04-04T07:46:46Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call\n+\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry\n+\t */\n+\tenum PublishCondition {\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwMzE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1MDowNVrOGAv_9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1MDowNVrOGAv_9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTYwNw==", "bodyText": "Must be updated after #187 is merged.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439607", "createdAt": "2020-04-04T07:50:05Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -12,20 +12,32 @@\n \n import static java.lang.String.format;\n \n-import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n \n-class ReportEntryExtension implements BeforeEachCallback {\n+class ReportEntryExtension implements AfterEachCallback {\n \n+\t// TODO: This can be replaced with specific TestWatcher interface methods, once we update to JUnit 5.4+\n \t@Override\n-\tpublic void beforeEach(ExtensionContext context) throws Exception {\n-\t\tUtils\n-\t\t\t\t.findRepeatableAnnotation(context, ReportEntry.class)\n-\t\t\t\t.peek(ReportEntryExtension::verifyKeyValueAreNotBlank)\n+\tpublic void afterEach(ExtensionContext context) {\n+\t\tfinal Optional<Throwable> ex = context.getExecutionException();\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> entry.when() == ReportEntry.PublishCondition.ALWAYS\n+\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_SUCCESS && !ex.isPresent()\n+\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_FAILURE && ex.isPresent())\n \t\t\t\t.forEach(entry -> context.publishReportEntry(entry.key(), entry.value()));\n \t}\n \n+\tprivate Stream<ReportEntry> findAnnotations(ExtensionContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwNDUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1MjowM1rOGAwAlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxOToyMDozNFrOGA0FVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTc2NQ==", "bodyText": "No star imports!\n@aepfli @nicolaiparlog Why didn't the build fail? In #169 we introduced a check to avoid star imports!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439765", "createdAt": "2020-04-04T07:52:03Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -13,20 +13,28 @@\n import static java.util.stream.Collectors.toList;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1NTE1Mg==", "bodyText": "because noboby currently runs the checkstyle target for test, we only run checkstyleMain (like it used to be) but we would need to run also checkstyleTest (or something like that, not 100% sure about the naming", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403455152", "createdAt": "2020-04-04T10:42:28Z", "author": {"login": "aepfli"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -13,20 +13,28 @@\n import static java.util.stream.Collectors.toList;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTc2NQ=="}, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjY5NQ==", "bodyText": "Task :checkstyleTest FAILED\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junit/jupiter/engine/AbstractJupiterTestEngineTests.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junit/platform/engine/test/TestDescriptorStub.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junit/platform/engine/test/event/ExecutionEvent.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junitpioneer/AbstractPioneerTestEngineTests.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DefaultLocaleTests.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/RangeSourceProviderTests.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junitpioneer/vintage/TestIntegrationTests.java:0: error: Missing package-info.java file.\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':checkstyleTest'.\n> Checkstyle rule violations were found. See the report at: file:///home/sschrottner/projects/github/junit-pioneer/build/reports/checkstyle/test.html\n  Checkstyle files with violations: 7\n  Checkstyle violations by severity: [error:7]", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403496695", "createdAt": "2020-04-04T17:47:45Z", "author": {"login": "aepfli"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -13,20 +13,28 @@\n import static java.util.stream.Collectors.toList;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTc2NQ=="}, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwNjUxNw==", "bodyText": "Quoting @nicolaiparlog here:\n\n[14:18] nipafx: At first glance it seems that most of those should apply to tests as well, assuming there aren't any defaults hidden somewhere. We should discuss that on the issue.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403506517", "createdAt": "2020-04-04T19:20:34Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -13,20 +13,28 @@\n import static java.util.stream.Collectors.toList;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTc2NQ=="}, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwNjM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NDoyM1rOGAwBbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NDoyM1rOGAwBbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTk4MQ==", "bodyText": "I don't see the usage for this", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439981", "createdAt": "2020-04-04T07:54:23Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwNjQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NDozOVrOGAwBfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NDozOVrOGAwBfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTk5OQ==", "bodyText": "I don't see the usage for this", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439999", "createdAt": "2020-04-04T07:54:39Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n+\t\tvoid nevermoreOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwNjY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NDo0N1rOGAwBlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NDo0N1rOGAwBlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDAyMw==", "bodyText": "I don't see the usage for this", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440023", "createdAt": "2020-04-04T07:54:47Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n+\t\tvoid nevermoreOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n+\t\tvoid nevermoreOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n+\t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n+\t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n+\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwNjc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NDo1N1rOGAwBoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NDo1N1rOGAwBoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDAzMg==", "bodyText": "I don't see the usage for this", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440032", "createdAt": "2020-04-04T07:54:57Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n+\t\tvoid nevermoreOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n+\t\tvoid nevermoreOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n+\t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n+\t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n+\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)\n+\t\tvoid repeatedOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"For the rare and radiant maiden\", when = ALWAYS)\n+\t\t@ReportEntry(value = \"whom the angels name Lenore\u2014\", when = ON_SUCCESS)\n+\t\t@ReportEntry(value = \"Nameless here\", when = ON_FAILURE)\n+\t\t@ReportEntry(value = \"for evermore.\", when = NEVERMORE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwNzQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NjozM1rOGAwB_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1NjozM1rOGAwB_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDEyNw==", "bodyText": "the AfterEachCallback is used, so before is wrong. As the ALWAYS enum entry is used what about the name evenOnFailure (must then be changed in the assertion method too)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440127", "createdAt": "2020-04-04T07:56:33Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwNzU5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1Njo0NlrOGAwCEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1Njo0NlrOGAwCEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDE0Ng==", "bodyText": "the AfterEachCallback is used, so before is wrong. As the ALWAYS enum entry is used what about the name evenOnSuccess (must then be changed in the assertion method too)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440146", "createdAt": "2020-04-04T07:56:46Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYwODU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1ODoxMFrOGAwCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzo1ODoxMFrOGAwCiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDI2Nw==", "bodyText": "Nice spot ;)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440267", "createdAt": "2020-04-04T07:58:10Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -32,7 +32,7 @@\n  *     <li>{@code from} a primitive value for the \"start\" of the range.</li>\n  *     <li>{@code to} a primitive value for the \"end\" of the range. {@code to} must have the same type as {@code from}.</li>\n  *     <li>{@code step} a primitive value for the difference between each two values of the range.</li>\n- *     <li>{@code closed} a {@code boolean} value describing if the range includes the last value (cloded), or not (open).</li>\n+ *     <li>{@code closed} a {@code boolean} value describing if the range includes the last value (closed), or not (open).</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYxMjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODowMjo1NFrOGAwENg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToyODo1NlrOGB6_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDY5NA==", "bodyText": "Note: I appreciate the declartion of the repeatable annotation inside it (as I suggested it in #215 ). But as the discussion on that has not really started I can not say if this is fine or has to be changed later.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440694", "createdAt": "2020-04-04T08:02:54Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call\n+\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry\n+\t */\n+\tenum PublishCondition {\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE\n+\t}\n+\n+\t/**\n+\t * This makes the {@code ReportEntry} repeatable.\n+\t */\n+\t@Retention(RetentionPolicy.RUNTIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2ODE2Mw==", "bodyText": "I see no reason to store this is a separate file. You can not use it by itself, only in combination with the @ReportEntry.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404668163", "createdAt": "2020-04-07T09:28:56Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call\n+\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry\n+\t */\n+\tenum PublishCondition {\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE\n+\t}\n+\n+\t/**\n+\t * This makes the {@code ReportEntry} repeatable.\n+\t */\n+\t@Retention(RetentionPolicy.RUNTIME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDY5NA=="}, "originalCommit": {"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjc2ODkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxMzo0NVrOGCLTUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxMzo0NVrOGCLTUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNTUwNg==", "bodyText": "Invalid value :)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404935506", "createdAt": "2020-04-07T16:13:45Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to {@link org.junitpioneer.jupiter.ReportEntry.PublishCondition#ALWAYS}\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available values you can choose from to define when\n+\t * the extension should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry every time the test is ran, regardless of its outcome\n+\t *  - ON_SUCCESS:\tpublish report entry after successful test run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjc4MDk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxNjoyMVrOGCLawA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjozNzozMFrOGIdgcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA==", "bodyText": "Is this line necessary as non-empty keys and values are checked in line 31 ?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404937408", "createdAt": "2020-04-07T16:16:21Z", "author": {"login": "Bukama"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -33,4 +42,31 @@ private static void verifyKeyValueAreNotBlank(ReportEntry entry) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void testDisabled(ExtensionContext context, Optional<String> reason) {\n+\t\t// If the test is disabled we consider the annotation disabled too and don't publish anything.\n+\t}\n+\n+\t@Override\n+\tpublic void testSuccessful(ExtensionContext context) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_SUCCESS);\n+\t}\n+\n+\t@Override\n+\tpublic void testAborted(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\t@Override\n+\tpublic void testFailed(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\tprivate void publishOnConditions(ExtensionContext context, ReportEntry.PublishCondition... conditions) {\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> Arrays.asList(conditions).contains(entry.when()))\n+\t\t\t\t.filter(entry -> !entry.key().isEmpty() && !entry.value().isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MTg5MQ==", "bodyText": "It's necessary, if you want to avoid throwing an exception from TestReporter.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r405081891", "createdAt": "2020-04-07T20:10:39Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -33,4 +42,31 @@ private static void verifyKeyValueAreNotBlank(ReportEntry entry) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void testDisabled(ExtensionContext context, Optional<String> reason) {\n+\t\t// If the test is disabled we consider the annotation disabled too and don't publish anything.\n+\t}\n+\n+\t@Override\n+\tpublic void testSuccessful(ExtensionContext context) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_SUCCESS);\n+\t}\n+\n+\t@Override\n+\tpublic void testAborted(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\t@Override\n+\tpublic void testFailed(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\tprivate void publishOnConditions(ExtensionContext context, ReportEntry.PublishCondition... conditions) {\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> Arrays.asList(conditions).contains(entry.when()))\n+\t\t\t\t.filter(entry -> !entry.key().isEmpty() && !entry.value().isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA=="}, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNTg2Nw==", "bodyText": "I don't get it either. As far as I understand the code, this line will only ever do something if verifyKeyValueAreNotBlank is broken by a change. But such a change would fail a test and thus not go undetected. I hence don't see a scenario where this line changes anything.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r408315867", "createdAt": "2020-04-14T17:36:44Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -33,4 +42,31 @@ private static void verifyKeyValueAreNotBlank(ReportEntry entry) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void testDisabled(ExtensionContext context, Optional<String> reason) {\n+\t\t// If the test is disabled we consider the annotation disabled too and don't publish anything.\n+\t}\n+\n+\t@Override\n+\tpublic void testSuccessful(ExtensionContext context) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_SUCCESS);\n+\t}\n+\n+\t@Override\n+\tpublic void testAborted(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\t@Override\n+\tpublic void testFailed(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\tprivate void publishOnConditions(ExtensionContext context, ReportEntry.PublishCondition... conditions) {\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> Arrays.asList(conditions).contains(entry.when()))\n+\t\t\t\t.filter(entry -> !entry.key().isEmpty() && !entry.value().isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA=="}, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxOTY3NA==", "bodyText": "We throw an ExtensionConfigurationException before test execution if either key or value are blank. This leads to the test failing. So, JUnit calls the TestWatcher::testFailed. If the publish condition is ALWAYS or ON_FAILURE, we try to publish report entries. So this is filtering out why the test failed - we don't want to publish if the extension configuration is incorrect.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r408319674", "createdAt": "2020-04-14T17:42:52Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -33,4 +42,31 @@ private static void verifyKeyValueAreNotBlank(ReportEntry entry) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void testDisabled(ExtensionContext context, Optional<String> reason) {\n+\t\t// If the test is disabled we consider the annotation disabled too and don't publish anything.\n+\t}\n+\n+\t@Override\n+\tpublic void testSuccessful(ExtensionContext context) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_SUCCESS);\n+\t}\n+\n+\t@Override\n+\tpublic void testAborted(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\t@Override\n+\tpublic void testFailed(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\tprivate void publishOnConditions(ExtensionContext context, ReportEntry.PublishCondition... conditions) {\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> Arrays.asList(conditions).contains(entry.when()))\n+\t\t\t\t.filter(entry -> !entry.key().isEmpty() && !entry.value().isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA=="}, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNTIzNQ==", "bodyText": "Added a short comment that (tries to) concisely explains this.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r411525235", "createdAt": "2020-04-20T16:37:30Z", "author": {"login": "Michael1993"}, "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -33,4 +42,31 @@ private static void verifyKeyValueAreNotBlank(ReportEntry entry) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void testDisabled(ExtensionContext context, Optional<String> reason) {\n+\t\t// If the test is disabled we consider the annotation disabled too and don't publish anything.\n+\t}\n+\n+\t@Override\n+\tpublic void testSuccessful(ExtensionContext context) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_SUCCESS);\n+\t}\n+\n+\t@Override\n+\tpublic void testAborted(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\t@Override\n+\tpublic void testFailed(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\tprivate void publishOnConditions(ExtensionContext context, ReportEntry.PublishCondition... conditions) {\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> Arrays.asList(conditions).contains(entry.when()))\n+\t\t\t\t.filter(entry -> !entry.key().isEmpty() && !entry.value().isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA=="}, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjc5MTQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxODo1MFrOGCLhbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxODo1MFrOGCLhbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzOTExOA==", "bodyText": "maybe put the when into quotes or so. As of now it reads a bit rough (at least to me)", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404939118", "createdAt": "2020-04-07T16:18:50Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -69,20 +82,158 @@ void emptyValue_fails() {\n \t}\n \n \t@Test\n+\t@DisplayName(\"logs each value as individual entry when annotation is repeated\")\n \tvoid repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\tExecutionEventRecorder recorder = executeTestsForMethod(ReportEntriesTest.class, \"repeatedAnnotation\");\n \n \t\tList<Map<String, String>> reportEntries = reportEntries(recorder);\n \n \t\tassertAll(\"Verifying report entries \" + reportEntries, //\n \t\t\t() -> assertThat(reportEntries).hasSize(3),\n-\t\t\t() -> assertThat(reportEntries).extracting(entry -> entry.size()).containsExactlyInAnyOrder(1, 1, 1),\n+\t\t\t() -> assertThat(reportEntries).extracting(Map::size).containsExactlyInAnyOrder(1, 1, 1),\n \t\t\t() -> assertThat(reportEntries)\n \t\t\t\t\t.extracting(entry -> entry.get(\"value\"))\n \t\t\t\t\t.containsExactlyInAnyOrder(\"suddenly there came a tapping\", \"As if some one gently rapping\",\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n+\t@Nested\n+\t@DisplayName(\"with explicitly set when parameter\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4223, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}