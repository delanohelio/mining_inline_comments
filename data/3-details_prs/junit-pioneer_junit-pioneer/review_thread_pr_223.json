{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTA2MDA1", "number": 223, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxNzowM1rODvvrZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxNzowM1rODvvrZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzkwODIwOnYy", "diffSide": "LEFT", "path": "src/test/java/org/junitpioneer/jupiter/TestUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxNzowM1rOGCWdxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowODowMFrOGCw_5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExODQwNw==", "bodyText": "This line was deleted because it's not needed - the getPayload() ensures that we either get ReportEntry or empty and we filter out empties with Optional::isPresent. Another option is to remove the Optional::isPresent but that's considered a 'code smell' by sonar, I think.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/223#discussion_r405118407", "createdAt": "2020-04-07T21:17:03Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/TestUtils.java", "diffHunk": "@@ -25,11 +26,10 @@\n \tstatic List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n \t\treturn recorder\n \t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab36e0e48739ae43080692b2e2dced8a604d18a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzODg5Ng==", "bodyText": "But do we still get the correct ReportEntries (wondering about the REPORTING_ENTRY_PUBLISHED)?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/223#discussion_r405438896", "createdAt": "2020-04-08T10:59:32Z", "author": {"login": "Bukama"}, "path": "src/test/java/org/junitpioneer/jupiter/TestUtils.java", "diffHunk": "@@ -25,11 +26,10 @@\n \tstatic List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n \t\treturn recorder\n \t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExODQwNw=="}, "originalCommit": {"oid": "eab36e0e48739ae43080692b2e2dced8a604d18a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NjkzNQ==", "bodyText": "Yes, because the only events in the recorder that have a ReportEntry.class type payload are the report entry events.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/223#discussion_r405546935", "createdAt": "2020-04-08T13:59:21Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/TestUtils.java", "diffHunk": "@@ -25,11 +26,10 @@\n \tstatic List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n \t\treturn recorder\n \t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExODQwNw=="}, "originalCommit": {"oid": "eab36e0e48739ae43080692b2e2dced8a604d18a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzEyNw==", "bodyText": "There is only the REPORTING_ENTRY_PUBLISHED type in ExecutionEvent.Type that's related to report entries, so the filtering does nothing, I believe.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/223#discussion_r405553127", "createdAt": "2020-04-08T14:08:00Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/TestUtils.java", "diffHunk": "@@ -25,11 +26,10 @@\n \tstatic List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n \t\treturn recorder\n \t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExODQwNw=="}, "originalCommit": {"oid": "eab36e0e48739ae43080692b2e2dced8a604d18a"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4234, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}