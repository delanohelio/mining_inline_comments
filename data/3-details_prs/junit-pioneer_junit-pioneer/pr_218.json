{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4Nzg2OTE1", "number": 218, "title": "Implement PioneerTestKit and PioneerEngineExecutionResults (#6)", "bodyText": "Up to now projects tests depends on copied internal JUnit Jupiter classes. In the past this was necessary but we always wanted to get rid of them. With the upgrade to JUnit 5.4.2 this is now possible, as the JUnit Jupiter team provides an public `EngineKit` as an API to those classes.\n\nSo with this PR, Pioneer gets its own `TestKit` and `EngineExectionResults` to wrap those of the JUnit Jupiter test engine as our tests always execute the `pioneer test engine`. This wrapper also provides more flexibility adding new functionality and/or easier access to things like the published `ReportEntries` of the executed test method.\n\nPR: #218\nclosed #6 \n\nci skip-release\n\n\nI hereby agree to the terms of the JUnit Pioneer Contributor License Agreement.", "createdAt": "2020-04-04T22:13:50Z", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218", "merged": true, "mergeCommit": {"oid": "0b79db8cd94c6492a54c5bfa11b31a5f00602e23"}, "closed": true, "closedAt": "2020-04-24T13:54:55Z", "author": {"login": "Bukama"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVozs7AFqTM5MDAxOTgwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaxoYTABqjMyNjk0NTQ1OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDE5ODAw", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#pullrequestreview-390019800", "createdAt": "2020-04-08T14:18:36Z", "commit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxODozNlrOGCxeag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMDoxNlrOGCx_UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MDkzOA==", "bodyText": "Why is this here?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405560938", "createdAt": "2020-04-08T14:18:36Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -83,26 +83,18 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n-\tprivate static List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n-\t\treturn recorder\n-\t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))\n-\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n-\t\t\t\t.filter(Optional::isPresent)\n-\t\t\t\t.map(Optional::get)\n-\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)\n-\t\t\t\t.collect(toList());\n-\t}\n-\n \tprivate static Map.Entry<String, String> entryOf(String key, String value) {\n \t\treturn new AbstractMap.SimpleEntry<>(key, value);\n \t}\n \n \tstatic class ReportEntriesTest {\n \n+\t\tprivate static AtomicInteger executionCount = new AtomicInteger(0);\n+\n \t\t@Test\n \t\t@ReportEntry(key = \"Crow2\", value = \"While I pondered weak and weary\")\n \t\tvoid explicitKey() {\n+\t\t\tSystem.out.println(\"HI THERE! \" + executionCount.getAndIncrement());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MTI0Nw==", "bodyText": "Don't really see why this is here. Just for testing?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405561247", "createdAt": "2020-04-08T14:19:01Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -83,26 +83,18 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n-\tprivate static List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n-\t\treturn recorder\n-\t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))\n-\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n-\t\t\t\t.filter(Optional::isPresent)\n-\t\t\t\t.map(Optional::get)\n-\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)\n-\t\t\t\t.collect(toList());\n-\t}\n-\n \tprivate static Map.Entry<String, String> entryOf(String key, String value) {\n \t\treturn new AbstractMap.SimpleEntry<>(key, value);\n \t}\n \n \tstatic class ReportEntriesTest {\n \n+\t\tprivate static AtomicInteger executionCount = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NDMzNQ==", "bodyText": "Test descriptor is 'unused' in the strictest sense because it is only mentioned in comments. I think we should use fully-qualified names in docs.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405564335", "createdAt": "2020-04-08T14:23:16Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NDkyNg==", "bodyText": "'Pioneers' to show possession. Sounds better to me.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405564926", "createdAt": "2020-04-08T14:24:05Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneer own class to handle {@link EngineExecutionResults} of the JUnit-Jupiter-Engine.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NzMzMA==", "bodyText": "You could import this (in which case the import is used over the ReportEntry in the same package).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405567330", "createdAt": "2020-04-08T14:27:27Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneer own class to handle {@link EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))\n+\t\t\t\t.execute();\n+\t}\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethodName))\n+\t\t\t\t.execute();\n+\t}\n+\n+\t/**\n+\t * Get all recorded events.\n+\t */\n+\tpublic Events all() {\n+\t\treturn executionResults.all();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for containers.\n+\t *\n+\t * <p>In this context, the word \"container\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isContainer()}.</p>\n+\t */\n+\tpublic Events containers() {\n+\t\treturn executionResults.containers();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for tests.\n+\t *\n+\t * <p>In this context, the word \"test\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isTest()}.</p>\n+\t */\n+\tpublic Events tests() {\n+\t\treturn executionResults.tests();\n+\t}\n+\n+\t/**\n+\t * Returns the number of all tests.\n+\t *\n+\t * @return Number of all tests\n+\t */\n+\tpublic long getTotalNumberOfTests() {\n+\t\treturn executionResults.tests().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of failed tests.\n+\t *\n+\t * @return Number of failed tests\n+\t */\n+\tpublic long getNumberOfFailedTests() {\n+\t\treturn executionResults.all().failed().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of successful tests.\n+\t *\n+\t * @return Number of successful tests\n+\t */\n+\tpublic long getNumberOfSucceededEvents() {\n+\t\treturn executionResults.all().succeeded().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of skipped tests.\n+\t *\n+\t * @return Number of skipped tests\n+\t */\n+\tpublic long getNumberOfSkippedEvents() {\n+\t\treturn executionResults.all().skipped().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of aborted tests.\n+\t *\n+\t * @return Number of aborted events results\n+\t */\n+\tpublic long getNumberOfAbortedEvents() {\n+\t\treturn executionResults.all().aborted().count();\n+\t}\n+\n+\t/**\n+\t * Returns the message of the first failed event.\n+\t * This can be used if you expect a test to fail with an exception and want to check the exception message.\n+\t *\n+\t * @return Message of the first failed event.\n+\t */\n+\tpublic String getFirstFailuresThrowableMessage() {\n+\t\treturn executionResults\n+\t\t\t\t.all()\n+\t\t\t\t.failed()\n+\t\t\t\t.stream()\n+\t\t\t\t.findFirst()\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getPayload(TestExecutionResult.class)\n+\t\t\t\t.flatMap(TestExecutionResult::getThrowable)\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getMessage();\n+\t}\n+\n+\t/**\n+\t * Returns the published report entries of all tests.\n+\t *\n+\t * @return published report entries of all tests\n+\t */\n+\tpublic List<Map<String, String>> getPublishedTestReportEntries() {\n+\t\treturn executionResults\n+\t\t\t\t.tests()\n+\t\t\t\t.reportingEntryPublished()\n+\t\t\t\t.stream()\n+\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NzY4OQ==", "bodyText": "You could import this.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405567689", "createdAt": "2020-04-08T14:27:55Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneer own class to handle {@link EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))\n+\t\t\t\t.execute();\n+\t}\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethodName))\n+\t\t\t\t.execute();\n+\t}\n+\n+\t/**\n+\t * Get all recorded events.\n+\t */\n+\tpublic Events all() {\n+\t\treturn executionResults.all();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for containers.\n+\t *\n+\t * <p>In this context, the word \"container\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isContainer()}.</p>\n+\t */\n+\tpublic Events containers() {\n+\t\treturn executionResults.containers();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for tests.\n+\t *\n+\t * <p>In this context, the word \"test\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isTest()}.</p>\n+\t */\n+\tpublic Events tests() {\n+\t\treturn executionResults.tests();\n+\t}\n+\n+\t/**\n+\t * Returns the number of all tests.\n+\t *\n+\t * @return Number of all tests\n+\t */\n+\tpublic long getTotalNumberOfTests() {\n+\t\treturn executionResults.tests().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of failed tests.\n+\t *\n+\t * @return Number of failed tests\n+\t */\n+\tpublic long getNumberOfFailedTests() {\n+\t\treturn executionResults.all().failed().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of successful tests.\n+\t *\n+\t * @return Number of successful tests\n+\t */\n+\tpublic long getNumberOfSucceededEvents() {\n+\t\treturn executionResults.all().succeeded().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of skipped tests.\n+\t *\n+\t * @return Number of skipped tests\n+\t */\n+\tpublic long getNumberOfSkippedEvents() {\n+\t\treturn executionResults.all().skipped().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of aborted tests.\n+\t *\n+\t * @return Number of aborted events results\n+\t */\n+\tpublic long getNumberOfAbortedEvents() {\n+\t\treturn executionResults.all().aborted().count();\n+\t}\n+\n+\t/**\n+\t * Returns the message of the first failed event.\n+\t * This can be used if you expect a test to fail with an exception and want to check the exception message.\n+\t *\n+\t * @return Message of the first failed event.\n+\t */\n+\tpublic String getFirstFailuresThrowableMessage() {\n+\t\treturn executionResults\n+\t\t\t\t.all()\n+\t\t\t\t.failed()\n+\t\t\t\t.stream()\n+\t\t\t\t.findFirst()\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getPayload(TestExecutionResult.class)\n+\t\t\t\t.flatMap(TestExecutionResult::getThrowable)\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getMessage();\n+\t}\n+\n+\t/**\n+\t * Returns the published report entries of all tests.\n+\t *\n+\t * @return published report entries of all tests\n+\t */\n+\tpublic List<Map<String, String>> getPublishedTestReportEntries() {\n+\t\treturn executionResults\n+\t\t\t\t.tests()\n+\t\t\t\t.reportingEntryPublished()\n+\t\t\t\t.stream()\n+\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n+\t\t\t\t.filter(Optional::isPresent)\n+\t\t\t\t.map(Optional::get)\n+\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2ODcyMA==", "bodyText": "You could inline this (i.e.: return new Pioneer...).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405568720", "createdAt": "2020-04-08T14:29:20Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+public class PioneerTestKit {\n+\n+\t/**\n+\t * Returns the execution results of the given test class.\n+\t *\n+\t * @param testClass Name of the test class, the results should be returned\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass);\n+\n+\t\treturn results;\n+\t}\n+\n+\t/**\n+\t * Returns the execution results of the given method of a given test class.\n+\t *\n+\t * @param testClass Name of the test class\n+\t * @param testMethodName Name of the test method (of the given class)\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass, testMethodName);\n+\n+\t\treturn results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2OTM2MA==", "bodyText": "You could inline this (i.e.: return new Pioneer...).", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405569360", "createdAt": "2020-04-08T14:30:16Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+public class PioneerTestKit {\n+\n+\t/**\n+\t * Returns the execution results of the given test class.\n+\t *\n+\t * @param testClass Name of the test class, the results should be returned\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass);\n+\n+\t\treturn results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9deae5f525857d29442f5c054e21007f1c935dc"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODAyMTIy", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#pullrequestreview-390802122", "createdAt": "2020-04-09T13:41:02Z", "commit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MTowMlrOGDZObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MjoxNVrOGDZRyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjIwNQ==", "bodyText": "Is this package-private on purpose?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406212205", "createdAt": "2020-04-09T13:41:02Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw==", "bodyText": "Consider static importing DiscoverySelectors methods. Would that be more readable?", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406212913", "createdAt": "2020-04-09T13:42:03Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMzA2NQ==", "bodyText": "Consider a static import.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406213065", "createdAt": "2020-04-09T13:42:15Z", "author": {"login": "Michael1993"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))\n+\t\t\t\t.execute();\n+\t}\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethodName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTkyMTc5", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#pullrequestreview-393192179", "createdAt": "2020-04-14T18:34:09Z", "commit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozNDowOVrOGFbwXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozNDowOVrOGFbwXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MDgxMw==", "bodyText": "I like static imports in general, but I prefer them in situations where a somewhat universal API is used that is frequently seen. DiscoverySelectors::selectClass doesn't quite qualify, but I'm still ok, either way.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r408350813", "createdAt": "2020-04-14T18:34:09Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw=="}, "originalCommit": {"oid": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46252d08fc88ec27bd2d4ea6f0b1b91390c93c66", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/46252d08fc88ec27bd2d4ea6f0b1b91390c93c66", "committedDate": "2020-04-21T18:52:10Z", "message": "Proof of concept for use of Testkit API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e37911eb6a48510b6231e4dcbca0633b1d2f9b1", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6e37911eb6a48510b6231e4dcbca0633b1d2f9b1", "committedDate": "2020-04-21T18:52:10Z", "message": "Starting to implement PioneerEngineExecutionResults"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a7ccdaf7524deaa1fff1aece88978e283c849f", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/43a7ccdaf7524deaa1fff1aece88978e283c849f", "committedDate": "2020-04-21T18:52:10Z", "message": "Improving PioneerEngineExecutionResults"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af20f41870b1e5556dd95eb447b0071c96ab86b", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4af20f41870b1e5556dd95eb447b0071c96ab86b", "committedDate": "2020-04-21T18:52:10Z", "message": "Improving PioneerEngineExecutionResults"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e7582a9e6a81d51809f8f5d79f6d36d42a77da", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d4e7582a9e6a81d51809f8f5d79f6d36d42a77da", "committedDate": "2020-04-21T18:52:10Z", "message": "Apply code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94cf18d1e9d38592ae7efecf475dd46f4f1c870", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f94cf18d1e9d38592ae7efecf475dd46f4f1c870", "committedDate": "2020-04-21T18:52:10Z", "message": "Rename a few methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3377a46ea2bb2cff124eb3430a88e9838b6821f0", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3377a46ea2bb2cff124eb3430a88e9838b6821f0", "committedDate": "2020-04-21T18:52:10Z", "message": "Rename classes (shorter) and methods (no \"get\")"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a1f4ebeb742012bcfb6397f28a936bf968bf1d8", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0a1f4ebeb742012bcfb6397f28a936bf968bf1d8", "committedDate": "2020-04-21T18:52:10Z", "message": "Refactor `DefaultLocaleTests` to new API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "837787ab461d489a3ccb19188f77ddbacb084299", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/837787ab461d489a3ccb19188f77ddbacb084299", "committedDate": "2020-04-14T18:50:48Z", "message": "Rename a few methods"}, "afterCommit": {"oid": "0a1f4ebeb742012bcfb6397f28a936bf968bf1d8", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0a1f4ebeb742012bcfb6397f28a936bf968bf1d8", "committedDate": "2020-04-21T18:52:10Z", "message": "Refactor `DefaultLocaleTests` to new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06e1fb3b91bb39abf92edb72222c2d7602500891", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/06e1fb3b91bb39abf92edb72222c2d7602500891", "committedDate": "2020-04-21T19:00:32Z", "message": "Refactor `DefaultTimeZoneTests` to new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e33c336d5748f6e7e8fa2854c9523ca7383e659", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8e33c336d5748f6e7e8fa2854c9523ca7383e659", "committedDate": "2020-04-21T19:01:35Z", "message": "Rename package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "210092d850bbb87b89d49e7db567e5dce0b0908a", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/210092d850bbb87b89d49e7db567e5dce0b0908a", "committedDate": "2020-04-21T19:43:36Z", "message": "Refactor `EnvironmentVariableExtensionTests` to new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38288715bb2c52648c6d1a27ec6a79e4e6a6526e", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/38288715bb2c52648c6d1a27ec6a79e4e6a6526e", "committedDate": "2020-04-21T19:45:23Z", "message": "Apply Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c0a9860c2c7d02895369e187032ee4fafe557ab", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8c0a9860c2c7d02895369e187032ee4fafe557ab", "committedDate": "2020-04-24T13:28:37Z", "message": "PioneerAnnotationUtilsTests to new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb23c1328bea79cb64930075645ae2756ca6ab71", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/eb23c1328bea79cb64930075645ae2756ca6ab71", "committedDate": "2020-04-24T13:32:16Z", "message": "Move RepeatFailedTestTests to new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59afee4e0b1ca9867a0a411a7634b7723da869b1", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/59afee4e0b1ca9867a0a411a7634b7723da869b1", "committedDate": "2020-04-24T13:32:16Z", "message": "Move assertion from PioneerAnnotationUtilsTests to ExecutionResults"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "245db3584d23433191fa547ea130c9991dea0bf9", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/245db3584d23433191fa547ea130c9991dea0bf9", "committedDate": "2020-04-24T13:32:16Z", "message": "Move SystemPropertyExtensionTests to new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cfc63e5e69eb210aefa8e6d24fa9eb0acfb198c", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/7cfc63e5e69eb210aefa8e6d24fa9eb0acfb198c", "committedDate": "2020-04-24T13:32:16Z", "message": "assertMethods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2023879f8d5e91a93b4a1d3cbfef95e72387a5c8", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2023879f8d5e91a93b4a1d3cbfef95e72387a5c8", "committedDate": "2020-04-24T13:32:16Z", "message": "Move TempDirectoryExtensionTests to new API\n\nBut with two failing tests where I don't know the cause"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "471a05e288a28aaa36cf87583f87f6322ce23aa4", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/471a05e288a28aaa36cf87583f87f6322ce23aa4", "committedDate": "2020-04-24T13:32:16Z", "message": "Move RangeSourceArgumentsProviderTests to new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a1880e445ba8ce48b3df52b5281cbe35b562f5c", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2a1880e445ba8ce48b3df52b5281cbe35b562f5c", "committedDate": "2020-04-24T13:32:16Z", "message": "Move TestIntegrationTests to new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ec2e51c489d937f18063bb94e4c25bb0dbad194", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2ec2e51c489d937f18063bb94e4c25bb0dbad194", "committedDate": "2020-04-24T13:32:16Z", "message": "Tests no more extend AbstractPioneerTestEngineTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a62c7bdcaa93236ae2cc565cc3f5beef24c96445", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a62c7bdcaa93236ae2cc565cc3f5beef24c96445", "committedDate": "2020-04-24T13:32:16Z", "message": "Delete not needed classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ac339df529ec155bd541cf867d97f75a3124ebb", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4ac339df529ec155bd541cf867d97f75a3124ebb", "committedDate": "2020-04-24T13:32:16Z", "message": "Delete not needed classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f264f7efe870b470c8b9d805928629779f8a8cdc", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f264f7efe870b470c8b9d805928629779f8a8cdc", "committedDate": "2020-04-24T13:32:16Z", "message": "Provide new method to select classes with parameter types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a98fc1ccbeac517d90e3554d138b25f7f0489de", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1a98fc1ccbeac517d90e3554d138b25f7f0489de", "committedDate": "2020-04-24T13:37:22Z", "message": "Remove explanatory TODOs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05c92b58b22b20da12e49985c9e1d75ebd80cef8", "author": {"user": {"login": "Bukama", "name": "Matthias B\u00fcnger"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/05c92b58b22b20da12e49985c9e1d75ebd80cef8", "committedDate": "2020-04-23T19:48:00Z", "message": "Provide new method to select classes with parameter types"}, "afterCommit": {"oid": "1a98fc1ccbeac517d90e3554d138b25f7f0489de", "author": {"user": {"login": "nipafx", "name": "Nicolai Parlog"}}, "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1a98fc1ccbeac517d90e3554d138b25f7f0489de", "committedDate": "2020-04-24T13:37:22Z", "message": "Remove explanatory TODOs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3745, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}