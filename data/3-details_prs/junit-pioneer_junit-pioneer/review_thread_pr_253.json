{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNDM5NjQw", "number": 253, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTozMjo1OVrOEVVf3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTozNzoxMlrOEVVlqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODA3Nzc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/junitpioneer/jupiter/DefaultTimeZoneTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTozMjo1OVrOG8B3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0NzowM1rOG8CWgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5ODMzNA==", "bodyText": "@nicolaiparlog Shouldn't this technically be \"UTC+12:00\" if you want UTC+12? There can be a tiny difference between UTC and GMT if I remember correctly. Probably not relevant for the tests here, but I thought I mention it anyway.\nHere's a video by Tom Scott that mentions said difference: https://www.youtube.com/watch?v=yRz-Dl60Lfc\n(It's entirely possible that I'm misinterpreting the things said in the video though...)\n[EDIT: pasted the wrong video link]", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/253#discussion_r465598334", "createdAt": "2020-08-05T09:32:59Z", "author": {"login": "NPException"}, "path": "src/test/java/org/junitpioneer/jupiter/DefaultTimeZoneTests.java", "diffHunk": "@@ -35,16 +34,15 @@\n \n \t@BeforeAll\n \tstatic void globalSetUp() {\n-\t\t// the extension sets UTC as test time zone unless it is already\n-\t\t// the system's time zone; in that case it uses GMT\n+\t\t// we set UTC as test time zone unless it is already\n+\t\t// the system's time zone; in that case we use UTC+12\n \t\tDEFAULT_TIMEZONE_BEFORE_TEST = TimeZone.getDefault();\n \t\tTimeZone utc = TimeZone.getTimeZone(\"UTC\");\n-\t\tTimeZone gmt = TimeZone.getTimeZone(\"GMT\");\n-\t\tif (DEFAULT_TIMEZONE_BEFORE_TEST.equals(utc)) {\n-\t\t\tTimeZone.setDefault(gmt);\n-\t\t} else {\n+\t\tTimeZone utcPlusTwelve = TimeZone.getTimeZone(\"GMT+12:00\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94f00d8bf19daa48488843a67d3477b173f770b0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5OTMxOA==", "bodyText": "jshell> TimeZone.getTimeZone(\"UTC+12:00\")\n$1 ==> sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]\n\n\ud83e\udd37\u200d\u2642\ufe0f\nThat's why I picked TimeZone.getTimeZone(\"GMT+12:00\") instead.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/253#discussion_r465599318", "createdAt": "2020-08-05T09:34:43Z", "author": {"login": "nipafx"}, "path": "src/test/java/org/junitpioneer/jupiter/DefaultTimeZoneTests.java", "diffHunk": "@@ -35,16 +34,15 @@\n \n \t@BeforeAll\n \tstatic void globalSetUp() {\n-\t\t// the extension sets UTC as test time zone unless it is already\n-\t\t// the system's time zone; in that case it uses GMT\n+\t\t// we set UTC as test time zone unless it is already\n+\t\t// the system's time zone; in that case we use UTC+12\n \t\tDEFAULT_TIMEZONE_BEFORE_TEST = TimeZone.getDefault();\n \t\tTimeZone utc = TimeZone.getTimeZone(\"UTC\");\n-\t\tTimeZone gmt = TimeZone.getTimeZone(\"GMT\");\n-\t\tif (DEFAULT_TIMEZONE_BEFORE_TEST.equals(utc)) {\n-\t\t\tTimeZone.setDefault(gmt);\n-\t\t} else {\n+\t\tTimeZone utcPlusTwelve = TimeZone.getTimeZone(\"GMT+12:00\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5ODMzNA=="}, "originalCommit": {"oid": "94f00d8bf19daa48488843a67d3477b173f770b0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwMzIwOQ==", "bodyText": "I see. That's odd. But at least you tried \ud83d\ude05", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/253#discussion_r465603209", "createdAt": "2020-08-05T09:41:37Z", "author": {"login": "NPException"}, "path": "src/test/java/org/junitpioneer/jupiter/DefaultTimeZoneTests.java", "diffHunk": "@@ -35,16 +34,15 @@\n \n \t@BeforeAll\n \tstatic void globalSetUp() {\n-\t\t// the extension sets UTC as test time zone unless it is already\n-\t\t// the system's time zone; in that case it uses GMT\n+\t\t// we set UTC as test time zone unless it is already\n+\t\t// the system's time zone; in that case we use UTC+12\n \t\tDEFAULT_TIMEZONE_BEFORE_TEST = TimeZone.getDefault();\n \t\tTimeZone utc = TimeZone.getTimeZone(\"UTC\");\n-\t\tTimeZone gmt = TimeZone.getTimeZone(\"GMT\");\n-\t\tif (DEFAULT_TIMEZONE_BEFORE_TEST.equals(utc)) {\n-\t\t\tTimeZone.setDefault(gmt);\n-\t\t} else {\n+\t\tTimeZone utcPlusTwelve = TimeZone.getTimeZone(\"GMT+12:00\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5ODMzNA=="}, "originalCommit": {"oid": "94f00d8bf19daa48488843a67d3477b173f770b0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNjI3NA==", "bodyText": "Looks like UTC is technically not a timezone, which is why TimeZone.getTimeZone(\"UTC+12:00\") will return GMT as a default instead. From https://www.timeanddate.com/time/gmt-utc-time.html:\n\nUTC is not a time zone, but a time standard that is the basis for civil time and time zones worldwide. This means that no country or territory officially uses UTC as a local time.\n\nToday I learned.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/253#discussion_r465606274", "createdAt": "2020-08-05T09:47:03Z", "author": {"login": "NPException"}, "path": "src/test/java/org/junitpioneer/jupiter/DefaultTimeZoneTests.java", "diffHunk": "@@ -35,16 +34,15 @@\n \n \t@BeforeAll\n \tstatic void globalSetUp() {\n-\t\t// the extension sets UTC as test time zone unless it is already\n-\t\t// the system's time zone; in that case it uses GMT\n+\t\t// we set UTC as test time zone unless it is already\n+\t\t// the system's time zone; in that case we use UTC+12\n \t\tDEFAULT_TIMEZONE_BEFORE_TEST = TimeZone.getDefault();\n \t\tTimeZone utc = TimeZone.getTimeZone(\"UTC\");\n-\t\tTimeZone gmt = TimeZone.getTimeZone(\"GMT\");\n-\t\tif (DEFAULT_TIMEZONE_BEFORE_TEST.equals(utc)) {\n-\t\t\tTimeZone.setDefault(gmt);\n-\t\t} else {\n+\t\tTimeZone utcPlusTwelve = TimeZone.getTimeZone(\"GMT+12:00\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5ODMzNA=="}, "originalCommit": {"oid": "94f00d8bf19daa48488843a67d3477b173f770b0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODA5MjU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/junitpioneer/jupiter/StdIoExtension.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTozNzoxMlrOG8CA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo0MjowMVrOG8CLkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwMDczNw==", "bodyText": "I'd expect the value for this to be \"StdIo_System_Out\" if it's used to store System.out.", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/253#discussion_r465600737", "createdAt": "2020-08-05T09:37:12Z", "author": {"login": "NPException"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIoExtension.java", "diffHunk": "@@ -33,7 +33,7 @@\n \n \tprivate static final String SYSTEM_IN_KEY = \"StdIo_System_In\";\n \tprivate static final String STD_IN_KEY = \"StdIo_Std_In\";\n-\tprivate static final String OUT_KEY = \"StdIo_Std_Out\";\n+\tprivate static final String SYSTEM_OUT_KEY = \"StdIo_Std_Out\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c285eec2c9171c9f4043e351d00166789b70acf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwMzQ3Mg==", "bodyText": "Good point!", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/253#discussion_r465603472", "createdAt": "2020-08-05T09:42:01Z", "author": {"login": "nipafx"}, "path": "src/main/java/org/junitpioneer/jupiter/StdIoExtension.java", "diffHunk": "@@ -33,7 +33,7 @@\n \n \tprivate static final String SYSTEM_IN_KEY = \"StdIo_System_In\";\n \tprivate static final String STD_IN_KEY = \"StdIo_Std_In\";\n-\tprivate static final String OUT_KEY = \"StdIo_Std_Out\";\n+\tprivate static final String SYSTEM_OUT_KEY = \"StdIo_Std_Out\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwMDczNw=="}, "originalCommit": {"oid": "0c285eec2c9171c9f4043e351d00166789b70acf"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4262, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}