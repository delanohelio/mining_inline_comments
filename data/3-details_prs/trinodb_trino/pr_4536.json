{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTU0Mzg1", "number": 4536, "title": "Support the TIME type in the Iceberg connector", "bodyText": "This commit adds support for the TIME type in the Iceberg\nconnector.  The TIME type is stored as microsecond time since\nmidnight UTC in Parquet and ORC, so it occupies an int64.\nThe main change was adding Parquet and ORC column readers and writers\nfor TIME that convert between Presto engine picosecond time\nand Iceberg connector native microsecond time.", "createdAt": "2020-07-22T14:27:03Z", "url": "https://github.com/trinodb/trino/pull/4536", "merged": true, "mergeCommit": {"oid": "ca80ca7eee20d9d9ef1b619e34efbb561c431bdd"}, "closed": true, "closedAt": "2020-08-20T05:21:16Z", "author": {"login": "djsstarburst"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_NMo-gBqjM2NTg3MzI0Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAoS1ygBqjM2NzM0MzQ0Nzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MDg1MzA3", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-468085307", "createdAt": "2020-08-16T18:35:12Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODozNToxM1rOHBUXKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTowOTozM1rOHBs19Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDIzNA==", "bodyText": "Use roundDiv(marker.getValue(), PICOSECONDS_PER_MICROSECOND) from io.prestosql.spi.type.Timestamps so that it works correctly with negative epoch values and does rounding (which is the expected Presto behavior when going to a lower precision time value).", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471144234", "createdAt": "2020-08-16T18:35:13Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -181,6 +183,10 @@ private static Object getIcebergLiteralValue(Type type, Marker marker)\n             return toIntExact(((Long) marker.getValue()));\n         }\n \n+        if (type instanceof TimeType) {\n+            return ((long) marker.getValue()) / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDQzMg==", "bodyText": "roundDiv", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471144432", "createdAt": "2020-08-16T18:37:15Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergPageSink.java", "diffHunk": "@@ -361,6 +363,9 @@ public static Object getIcebergValue(Block block, int position, Type type)\n         if (type instanceof DoubleType) {\n             return type.getDouble(block, position);\n         }\n+        if (type instanceof TimeType) {\n+            return type.getLong(block, position) / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDY2MA==", "bodyText": "I like to introduce a method for these types of switch expressions, since it looks cleaner than assign+break:\nswitch (type.typeId()) {\n    case FIXED:\n    case BINARY:\n        return ...;\n    case TIME:\n        return ...;\n}\nIn Java 14, we will be able to do\nString partitionValue = switch (type.typeId()) {\n    case FIXED, BINARY -> ... ;\n    case TIME -> ... ;\n}", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471144660", "createdAt": "2020-08-16T18:39:42Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "diffHunk": "@@ -126,12 +124,18 @@ private ConnectorSplit toIcebergSplit(FileScanTask task)\n             }\n             else {\n                 String partitionValue;\n-                if (type.typeId() == FIXED || type.typeId() == BINARY) {\n-                    // this is safe because Iceberg PartitionData directly wraps the byte array\n-                    partitionValue = new String(((ByteBuffer) value).array(), UTF_8);\n-                }\n-                else {\n-                    partitionValue = value.toString();\n+                switch (type.typeId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDg5OQ==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471144899", "createdAt": "2020-08-16T18:42:16Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTable.java", "diffHunk": "@@ -300,6 +301,9 @@ private static Object convert(Object value, Type type)\n             }\n             return utcMillis;\n         }\n+        if (type instanceof Types.TimeType) {\n+            return ((Long) value) * Timestamps.PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NTI3Mw==", "bodyText": "Name the class TimeMicrosValueWriter and check the logical type outside, then we don't need to specialize inside the writer code.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471545273", "createdAt": "2020-08-17T15:09:26Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeValueWriter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer.valuewriter;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.Timestamps;\n+import io.prestosql.spi.type.Type;\n+import org.apache.parquet.column.values.ValuesWriter;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TimeValueWriter\n+        extends PrimitiveValueWriter\n+{\n+    private final Type type;\n+    private final boolean scaleValue;\n+\n+    public TimeValueWriter(ValuesWriter valuesWriter, Type type, PrimitiveType parquetType)\n+    {\n+        super(parquetType, valuesWriter);\n+        this.type = requireNonNull(type, \"type is null\");\n+        this.scaleValue = parquetType.isPrimitive() && parquetType.getOriginalType() == OriginalType.TIME_MICROS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NTMzMw==", "bodyText": "roundDiv", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471545333", "createdAt": "2020-08-17T15:09:33Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeValueWriter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer.valuewriter;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.Timestamps;\n+import io.prestosql.spi.type.Type;\n+import org.apache.parquet.column.values.ValuesWriter;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TimeValueWriter\n+        extends PrimitiveValueWriter\n+{\n+    private final Type type;\n+    private final boolean scaleValue;\n+\n+    public TimeValueWriter(ValuesWriter valuesWriter, Type type, PrimitiveType parquetType)\n+    {\n+        super(parquetType, valuesWriter);\n+        this.type = requireNonNull(type, \"type is null\");\n+        this.scaleValue = parquetType.isPrimitive() && parquetType.getOriginalType() == OriginalType.TIME_MICROS;\n+    }\n+\n+    @Override\n+    public void write(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            if (!block.isNull(i)) {\n+                long value = type.getLong(block, i);\n+                long scaledValue = scaleValue ? value / Timestamps.PICOSECONDS_PER_MICROSECOND : value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTU2MzY0", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-468556364", "createdAt": "2020-08-17T15:16:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxNjozMlrOHBtIMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxNjozMlrOHBtIMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1MDAwMQ==", "bodyText": "roundDiv", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471550001", "createdAt": "2020-08-17T15:16:32Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimeColumnWriter.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.orc.writer;\n+\n+import io.prestosql.orc.metadata.CompressionKind;\n+import io.prestosql.orc.metadata.OrcColumnId;\n+import io.prestosql.orc.metadata.statistics.LongValueStatisticsBuilder;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TimeColumnWriter\n+        extends LongColumnWriter\n+{\n+    public TimeColumnWriter(\n+            OrcColumnId columnId,\n+            Type type,\n+            CompressionKind compression,\n+            int bufferSize,\n+            Supplier<LongValueStatisticsBuilder> statisticsBuilderSupplier)\n+    {\n+        super(columnId, type, compression, bufferSize, statisticsBuilderSupplier);\n+    }\n+\n+    @Override\n+    protected long transformValue(long value)\n+    {\n+        return value / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTgxNzkw", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-468581790", "createdAt": "2020-08-17T15:45:43Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0NTo0M1rOHBuWRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0NjoyNFrOHBuYGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2OTk5MA==", "bodyText": "Can use *=", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471569990", "createdAt": "2020-08-17T15:45:43Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/reader/TimeColumnReader.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.orc.reader;\n+\n+import io.prestosql.memory.context.LocalMemoryContext;\n+import io.prestosql.orc.OrcColumn;\n+import io.prestosql.orc.OrcCorruptionException;\n+import io.prestosql.spi.type.Type;\n+\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TimeColumnReader\n+        extends LongColumnReader\n+{\n+    public TimeColumnReader(Type type, OrcColumn column, LocalMemoryContext systemMemoryContext)\n+            throws OrcCorruptionException\n+    {\n+        super(type, column, systemMemoryContext);\n+    }\n+\n+    @Override\n+    protected void maybeTransformValues(long[] values, int nextBatchSize)\n+    {\n+        for (int i = 0; i < nextBatchSize; i++) {\n+            values[i] = values[i] * PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MDQ1Ng==", "bodyText": "checkArgument(orcType == LONG, \"wrong ORC type for time type: %s\", orcType);", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471570456", "createdAt": "2020-08-17T15:46:24Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/ColumnWriters.java", "diffHunk": "@@ -47,6 +48,9 @@ public static ColumnWriter createColumnWriter(\n             Supplier<BloomFilterBuilder> bloomFilterBuilder)\n     {\n         requireNonNull(type, \"type is null\");\n+        if (type instanceof TimeType) {\n+            return new TimeColumnWriter(columnId, type, compression, bufferSize, () -> new IntegerStatisticsBuilder(bloomFilterBuilder.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NzY4NTUx", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-468768551", "createdAt": "2020-08-17T19:20:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToyMDowOFrOHB3viA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTozNDowMlrOHB4JDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyMzkxMg==", "bodyText": "Add a comment that this is for Iceberg", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471723912", "createdAt": "2020-08-17T19:20:08Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/ColumnWriters.java", "diffHunk": "@@ -48,6 +51,10 @@ public static ColumnWriter createColumnWriter(\n     {\n         requireNonNull(type, \"type is null\");\n         OrcType orcType = orcTypes.get(columnId);\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNDQwNA==", "bodyText": "Comment that this is for Iceberg", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471724404", "createdAt": "2020-08-17T19:21:06Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/TupleDomainOrcPredicate.java", "diffHunk": "@@ -189,6 +191,9 @@ public static Domain getDomain(Type type, long rowCount, ColumnStatistics column\n \n         boolean hasNullValue = columnStatistics.getNumberOfValues() != rowCount;\n \n+        if (type instanceof TimeType && columnStatistics.getIntegerStatistics() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNTEyNg==", "bodyText": "I think you accidentally removed the case for TIME", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471725126", "createdAt": "2020-08-17T19:22:43Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "diffHunk": "@@ -125,18 +123,22 @@ private ConnectorSplit toIcebergSplit(FileScanTask task)\n                 partitionKeys.put(id, null);\n             }\n             else {\n-                String partitionValue;\n-                if (type.typeId() == FIXED || type.typeId() == BINARY) {\n-                    // this is safe because Iceberg PartitionData directly wraps the byte array\n-                    partitionValue = new String(((ByteBuffer) value).array(), UTF_8);\n-                }\n-                else {\n-                    partitionValue = value.toString();\n-                }\n-                partitionKeys.put(id, partitionValue);\n+                partitionKeys.put(id, partitionValueFromType(type, value));\n             }\n         });\n \n         return Collections.unmodifiableMap(partitionKeys);\n     }\n+\n+    private static String partitionValueFromType(Type type, Object value)\n+    {\n+        switch (type.typeId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNjY2NA==", "bodyText": "This should only allow time(6). We should probably add a TIME_MICROS constant for createTimeType(6) like I did in the timestamps PR. Then add another check\nif (type instanceof TimestampType) {\n    throw new PrestoException(NOT_SUPPORTED, format(\"Time precision (%s) not supported for Iceberg. Use \\\"time(6)\\\" instead.\", ((TimeType) type).getPrecision()));\n}", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471726664", "createdAt": "2020-08-17T19:25:47Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "diffHunk": "@@ -176,6 +177,9 @@ public static Type toPrestoType(org.apache.iceberg.types.Type type, TypeManager\n         if (type instanceof MapType) {\n             return fromMap((MapType) type);\n         }\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTczMDQ0Ng==", "bodyText": "I realized why this is problematic. In the ORC code, which is generic, we making a huge assumption that the time type is written as a long with microsecond encoding. We should be able to do this in a safe way by checking the iceberg.long-type = TIME attribute from OrcColumn. The code would still have this ugly Iceberg specific logic, but it would be safe if we introduce other usages of TimeType in the future.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471730446", "createdAt": "2020-08-17T19:34:02Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/reader/ColumnReaders.java", "diffHunk": "@@ -32,6 +33,9 @@ public static ColumnReader createColumnReader(\n             OrcBlockFactory blockFactory)\n             throws OrcCorruptionException\n     {\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTY0MTI1", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-469564125", "createdAt": "2020-08-18T15:21:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyMTo1M1rOHCZrCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyMTo1M1rOHCZrCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3OTgxNg==", "bodyText": "Name this extractTime since it's not specific to hours", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r472279816", "createdAt": "2020-08-18T15:21:53Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "diffHunk": "@@ -253,6 +257,27 @@ private static Block extractTimestamp(Block block, LongUnaryOperator function)\n         return builder.build();\n     }\n \n+    private static Block hoursFromTime(Block block)\n+    {\n+        return extractHoursFromTime(block, HOURS_DURATION::getValueAsLong);\n+    }\n+\n+    private static Block extractHoursFromTime(Block block, LongUnaryOperator function)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjMwMTk5", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-470630199", "createdAt": "2020-08-19T16:20:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyMDowNlrOHDO6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyMDowNlrOHDO6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MjA2Ng==", "bodyText": "It looks like this didn't require any changes, so we can leave it as-is", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473152066", "createdAt": "2020-08-19T16:20:06Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "diffHunk": "@@ -125,18 +123,22 @@ private ConnectorSplit toIcebergSplit(FileScanTask task)\n                 partitionKeys.put(id, null);\n             }\n             else {\n-                String partitionValue;\n-                if (type.typeId() == FIXED || type.typeId() == BINARY) {\n-                    // this is safe because Iceberg PartitionData directly wraps the byte array\n-                    partitionValue = new String(((ByteBuffer) value).array(), UTF_8);\n-                }\n-                else {\n-                    partitionValue = value.toString();\n-                }\n-                partitionKeys.put(id, partitionValue);\n+                partitionKeys.put(id, partitionValueFromType(type, value));\n             }\n         });\n \n         return Collections.unmodifiableMap(partitionKeys);\n     }\n+\n+    private static String partitionValueFromType(Type type, Object value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjMwNTIy", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-470630522", "createdAt": "2020-08-19T16:20:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyMDozMlrOHDO75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyMDozMlrOHDO75g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MjQ4Ng==", "bodyText": "TIME_MICROS", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473152486", "createdAt": "2020-08-19T16:20:32Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -181,6 +183,10 @@ private static Object getIcebergLiteralValue(Type type, Marker marker)\n             return toIntExact(((Long) marker.getValue()));\n         }\n \n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjM0NzE1", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-470634715", "createdAt": "2020-08-19T16:25:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyNTozNVrOHDPRyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyNTozNVrOHDPRyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1ODA5MA==", "bodyText": "Can collapse to previous cases", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473158090", "createdAt": "2020-08-19T16:25:35Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionData.java", "diffHunk": "@@ -134,6 +134,8 @@ public static Object getValue(JsonNode partitionValue, Type type)\n             case LONG:\n             case TIMESTAMP:\n                 return partitionValue.asLong();\n+            case TIME:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjM5NzA1", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-470639705", "createdAt": "2020-08-19T16:31:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMTo0M1rOHDPrNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMTo0M1rOHDPrNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NDU5OQ==", "bodyText": "Flip equals() so it's consistent with the others", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473164599", "createdAt": "2020-08-19T16:31:43Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "diffHunk": "@@ -261,6 +270,9 @@ private static TypeInfo toHiveTypeInfo(Type type)\n         if (DATE.equals(type)) {\n             return HIVE_DATE.getTypeInfo();\n         }\n+        if (type.equals(TIME_MICROS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjQwMDEz", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-470640013", "createdAt": "2020-08-19T16:32:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMjo1OFrOHDPwIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNToyNlrOHDP6Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NTg1OQ==", "bodyText": "No need to lowercase format", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473165859", "createdAt": "2020-08-19T16:32:58Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -144,6 +145,35 @@ private void testDecimalWithPrecisionAndScale(Session session, FileFormat format\n         dropTable(session, tableName);\n     }\n \n+    @Test\n+    public void testTime()\n+    {\n+        testWithAllFileFormats((session, format) -> testTimeForFormat(session, format, false));\n+    }\n+\n+    @Test\n+    public void testPartitionedByTime()\n+    {\n+        testWithAllFileFormats((session, format) -> testTimeForFormat(session, format, true));\n+    }\n+\n+    private void testTimeForFormat(Session session, FileFormat format, boolean partitioned)\n+    {\n+        String tableName = format(\"test_%s%s_time\", partitioned ? \"partitioned_\" : \"\", format.name().toLowerCase(ENGLISH));\n+        String partitioning = partitioned ? \", partitioning = ARRAY['x']\" : \"\";\n+        assertUpdate(session, format(\"CREATE TABLE %s (x TIME, y BIGINT) WITH (format = '%s'%s)\", tableName, format.name().toLowerCase(ENGLISH), partitioning));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2ODQ3MA==", "bodyText": "No need to wrap here, especially for simple delegation", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473168470", "createdAt": "2020-08-19T16:35:26Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimeColumnWriter.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.orc.writer;\n+\n+import io.prestosql.orc.metadata.CompressionKind;\n+import io.prestosql.orc.metadata.OrcColumnId;\n+import io.prestosql.orc.metadata.statistics.LongValueStatisticsBuilder;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TimeColumnWriter\n+        extends LongColumnWriter\n+{\n+    public TimeColumnWriter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjQ0MDEy", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-470644012", "createdAt": "2020-08-19T16:37:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNzowOFrOHDP-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNzowOFrOHDP-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2OTU4Ng==", "bodyText": "Static import\nWe could inline this above\nlong value = type.getLong(block, i) / PICOSECONDS_PER_MICROSECOND;", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473169586", "createdAt": "2020-08-19T16:37:08Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeMicrosValueWriter.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer.valuewriter;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.Timestamps;\n+import io.prestosql.spi.type.Type;\n+import org.apache.parquet.column.values.ValuesWriter;\n+import org.apache.parquet.schema.PrimitiveType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TimeMicrosValueWriter\n+        extends PrimitiveValueWriter\n+{\n+    private final Type type;\n+\n+    public TimeMicrosValueWriter(ValuesWriter valuesWriter, Type type, PrimitiveType parquetType)\n+    {\n+        super(parquetType, valuesWriter);\n+        this.type = requireNonNull(type, \"type is null\");\n+    }\n+\n+    @Override\n+    public void write(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            if (!block.isNull(i)) {\n+                long value = type.getLong(block, i);\n+                long scaledValue = value / Timestamps.PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDE0ODUw", "url": "https://github.com/trinodb/trino/pull/4536#pullrequestreview-471014850", "createdAt": "2020-08-19T22:45:53Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee62fcbd70dda5d05ad99f11d214834bcfb29ff8", "author": {"user": {"login": "djsstarburst", "name": "David Stryker"}}, "url": "https://github.com/trinodb/trino/commit/ee62fcbd70dda5d05ad99f11d214834bcfb29ff8", "committedDate": "2020-08-20T04:13:51Z", "message": "Support the TIME type in the Iceberg connector\n\nThis commit adds support for the TIME type in the Iceberg\nconnector.  The TIME type is stored as microsecond time since\nmidnight UTC in Parquet and ORC, so it occupies an int64.\n\nThe main change was adding Parquet and ORC column readers and writers\nfor TIME that convert between Presto engine picosecond time\nand Iceberg connector native microsecond time.\n\nThis commit incorporates a change from @electrum that added\na few time constants to the Timestamps class."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ee62fcbd70dda5d05ad99f11d214834bcfb29ff8", "author": {"user": {"login": "djsstarburst", "name": "David Stryker"}}, "url": "https://github.com/trinodb/trino/commit/ee62fcbd70dda5d05ad99f11d214834bcfb29ff8", "committedDate": "2020-08-20T04:13:51Z", "message": "Support the TIME type in the Iceberg connector\n\nThis commit adds support for the TIME type in the Iceberg\nconnector.  The TIME type is stored as microsecond time since\nmidnight UTC in Parquet and ORC, so it occupies an int64.\n\nThe main change was adding Parquet and ORC column readers and writers\nfor TIME that convert between Presto engine picosecond time\nand Iceberg connector native microsecond time.\n\nThis commit incorporates a change from @electrum that added\na few time constants to the Timestamps class."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4829, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}