{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNDA1MDgy", "number": 4946, "title": "Propagate 'all' domain explicitly", "bodyText": "", "createdAt": "2020-08-24T09:59:47Z", "url": "https://github.com/trinodb/trino/pull/4946", "merged": true, "mergeCommit": {"oid": "82cdb146a15e1a659a2942ecde491aae316ecd68"}, "closed": true, "closedAt": "2020-08-25T18:51:24Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCAMY8gFqTQ3MzM0ODE5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCb1sTABqjM2OTE0ODMzNzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMzQ4MTk1", "url": "https://github.com/trinodb/trino/pull/4946#pullrequestreview-473348195", "createdAt": "2020-08-24T10:38:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozODozNlrOHFe1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozODozNlrOHFe1VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMDEwMQ==", "bodyText": "If you want to assume each DynamicFilterId has an entry in the Map, you would need to change the return result.getDomains().get() below too. However, it seems to be like having inexplicit assumptions in the data model, which are not necessary. Can we handle this in eg in io.prestosql.operator.TaskContext#collectDynamicTupleDomain instead?", "url": "https://github.com/trinodb/trino/pull/4946#discussion_r475510101", "createdAt": "2020-08-24T10:38:36Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalDynamicFilterConsumer.java", "diffHunk": "@@ -144,6 +144,11 @@ private void addPartition(TupleDomain<DynamicFilterId> tupleDomain)\n             return buildChannels.keySet().stream()\n                     .collect(toImmutableMap(identity(), filterId -> Domain.none(filterBuildTypes.get(filterId))));\n         }\n+        if (result.isAll()) {\n+            // Set `all` domain explicitly for dynamic filters so that it can be waited for\n+            return buildChannels.keySet().stream()\n+                    .collect(toImmutableMap(identity(), filterId -> Domain.all(filterBuildTypes.get(filterId))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTQxMjMx", "url": "https://github.com/trinodb/trino/pull/4946#pullrequestreview-474541231", "createdAt": "2020-08-25T14:30:53Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDozMDo1M1rOHGa8yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDozMDo1M1rOHGa8yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5NTA1MQ==", "bodyText": "maybe isntead of Sets.difference, use .putIfAbsent?\ni think would be more readable", "url": "https://github.com/trinodb/trino/pull/4946#discussion_r476495051", "createdAt": "2020-08-25T14:30:53Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalDynamicFilterConsumer.java", "diffHunk": "@@ -144,7 +145,13 @@ private void addPartition(TupleDomain<DynamicFilterId> tupleDomain)\n             return buildChannels.keySet().stream()\n                     .collect(toImmutableMap(identity(), filterId -> Domain.none(filterBuildTypes.get(filterId))));\n         }\n-        return result.getDomains().get();\n+\n+        ImmutableMap.Builder<DynamicFilterId, Domain> domains = ImmutableMap.builder();\n+        domains.putAll(result.getDomains().get());\n+        // Add `all` domain explicitly for dynamic filters to notify dynamic filter listeners\n+        Sets.difference(buildChannels.keySet(), result.getDomains().get().keySet())\n+                .forEach(filterId -> domains.put(filterId, Domain.all(filterBuildTypes.get(filterId))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5ecc278e254d355266ba2b55afeb3942a08871f", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/a5ecc278e254d355266ba2b55afeb3942a08871f", "committedDate": "2020-08-25T14:43:03Z", "message": "Propagate 'all' domain explicitly"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "78a6567b31869f2830ef16289c8828618d94ba3a", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/78a6567b31869f2830ef16289c8828618d94ba3a", "committedDate": "2020-08-25T18:49:23Z", "message": "Use throws Exception instead of multiple exceptions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "78a6567b31869f2830ef16289c8828618d94ba3a", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/78a6567b31869f2830ef16289c8828618d94ba3a", "committedDate": "2020-08-25T18:49:23Z", "message": "Use throws Exception instead of multiple exceptions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4109, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}