{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDQwNzM5", "number": 5851, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowMTozMVrOE16s6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowMTozMVrOE16s6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTcxNzU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowMTozMVrOHudg4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowMTozMVrOHudg4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MDA5Ng==", "bodyText": "maybe add a test with multiple NaNs", "url": "https://github.com/trinodb/trino/pull/5851#discussion_r518480096", "createdAt": "2020-11-06T02:01:31Z", "author": {"login": "dain"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1169,15 +1169,23 @@ public void testGreatest()\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n-        assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n+        assertFunction(\"greatest(1.5E0, -infinity(), infinity())\", DOUBLE, Double.POSITIVE_INFINITY);\n         assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n-\n-        // float\n-        assertFunction(\"greatest(REAL '1.5', 2.3E0)\", DOUBLE, 2.3);\n-        assertFunction(\"greatest(REAL '-1.5', -2.3E0)\", DOUBLE, (double) -1.5f);\n-        assertFunction(\"greatest(-1.5E0, REAL '-2.3', -5/3)\", DOUBLE, -1.0);\n-        assertFunction(\"greatest(REAL '1.5', REAL '-1.0' / 0.0E0, 1.0E0 / REAL '0.0')\", DOUBLE, (double) (1.0f / 0.0f));\n-        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n+        assertFunction(\"greatest(NaN(), 5, 4, 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, NaN(), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, 3, NaN())\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(NaN())\", DOUBLE, Double.NaN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4965, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}