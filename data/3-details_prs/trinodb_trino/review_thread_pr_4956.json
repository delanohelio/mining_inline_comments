{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTIxMjIw", "number": 4956, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozNjoyN1rOEbsd0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNzo0MFrOEcJtHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDc1NTM2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/cost/TestTopNStatsRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozNjoyN1rOHFxkHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODozOToxOFrOHGNtUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNjk5MA==", "bodyText": "Name testTopNWithLongInput", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r475816990", "createdAt": "2020-08-24T18:36:27Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/cost/TestTopNStatsRule.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.cost;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+import org.testng.annotations.Test;\n+\n+public class TestTopNStatsRule\n+        extends BaseStatsCalculatorTest\n+{\n+    @Test\n+    public void testShorterTopN()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3ODA5OQ==", "bodyText": "fixed", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476278099", "createdAt": "2020-08-25T08:39:18Z", "author": {"login": "kabunchi"}, "path": "presto-main/src/test/java/io/prestosql/cost/TestTopNStatsRule.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.cost;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+import org.testng.annotations.Test;\n+\n+public class TestTopNStatsRule\n+        extends BaseStatsCalculatorTest\n+{\n+    @Test\n+    public void testShorterTopN()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNjk5MA=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDc1NjAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/cost/TestTopNStatsRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozNjo0MFrOHFxkkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODozOToyMlrOHGNtkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNzEwNQ==", "bodyText": "Name testTopNWithSmallInput", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r475817105", "createdAt": "2020-08-24T18:36:40Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/cost/TestTopNStatsRule.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.cost;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+import org.testng.annotations.Test;\n+\n+public class TestTopNStatsRule\n+        extends BaseStatsCalculatorTest\n+{\n+    @Test\n+    public void testShorterTopN()\n+    {\n+        // Test case with more rows in data than in topN SINGLE step\n+        tester().assertStatsFor(pb -> pb\n+                .topN(10, ImmutableList.of(pb.symbol(\"i1\")), pb.values(pb.symbol(\"i1\"), pb.symbol(\"i2\"))))\n+                .withSourceStats(0, PlanNodeStatsEstimate.builder()\n+                        .setOutputRowCount(100)\n+                        .addSymbolStatistics(new Symbol(\"i1\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(1)\n+                                .setHighValue(10)\n+                                .setDistinctValuesCount(5)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .addSymbolStatistics(new Symbol(\"i2\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(0)\n+                                .setHighValue(3)\n+                                .setDistinctValuesCount(4)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .build())\n+                .check(check -> check\n+                        .outputRowsCount(10) //Expect TopN to limit\n+                        .symbolStats(\"i1\", assertion -> assertion\n+                                .lowValue(1)\n+                                .highValue(10)\n+                                .distinctValuesCount(5)\n+                                .dataSizeUnknown()\n+                                .nullsFraction(0))\n+                        .symbolStats(\"i2\", assertion -> assertion\n+                                .lowValue(0)\n+                                .highValue(3)\n+                                .dataSizeUnknown()\n+                                .distinctValuesCount(4)\n+                                .nullsFraction(0)));\n+\n+        // Test case with more rows in data than in topN PARTIAL step\n+        tester().assertStatsFor(pb -> pb\n+                .topN(10, ImmutableList.of(pb.symbol(\"i1\")), TopNNode.Step.PARTIAL, pb.values(pb.symbol(\"i1\"), pb.symbol(\"i2\"))))\n+                .withSourceStats(0, PlanNodeStatsEstimate.builder()\n+                        .setOutputRowCount(100)\n+                        .addSymbolStatistics(new Symbol(\"i1\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(1)\n+                                .setHighValue(10)\n+                                .setDistinctValuesCount(5)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .addSymbolStatistics(new Symbol(\"i2\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(0)\n+                                .setHighValue(3)\n+                                .setDistinctValuesCount(4)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .build())\n+                .check(check -> check\n+                        .outputRowsCount(100) //Expect TopN not to limit\n+                        .symbolStats(\"i1\", assertion -> assertion\n+                                .lowValue(1)\n+                                .highValue(10)\n+                                .distinctValuesCount(5)\n+                                .dataSizeUnknown()\n+                                .nullsFraction(0))\n+                        .symbolStats(\"i2\", assertion -> assertion\n+                                .lowValue(0)\n+                                .highValue(3)\n+                                .dataSizeUnknown()\n+                                .distinctValuesCount(4)\n+                                .nullsFraction(0)));\n+    }\n+\n+    @Test\n+    public void testLongerTopN()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3ODE2MQ==", "bodyText": "fixed", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476278161", "createdAt": "2020-08-25T08:39:22Z", "author": {"login": "kabunchi"}, "path": "presto-main/src/test/java/io/prestosql/cost/TestTopNStatsRule.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.cost;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+import org.testng.annotations.Test;\n+\n+public class TestTopNStatsRule\n+        extends BaseStatsCalculatorTest\n+{\n+    @Test\n+    public void testShorterTopN()\n+    {\n+        // Test case with more rows in data than in topN SINGLE step\n+        tester().assertStatsFor(pb -> pb\n+                .topN(10, ImmutableList.of(pb.symbol(\"i1\")), pb.values(pb.symbol(\"i1\"), pb.symbol(\"i2\"))))\n+                .withSourceStats(0, PlanNodeStatsEstimate.builder()\n+                        .setOutputRowCount(100)\n+                        .addSymbolStatistics(new Symbol(\"i1\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(1)\n+                                .setHighValue(10)\n+                                .setDistinctValuesCount(5)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .addSymbolStatistics(new Symbol(\"i2\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(0)\n+                                .setHighValue(3)\n+                                .setDistinctValuesCount(4)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .build())\n+                .check(check -> check\n+                        .outputRowsCount(10) //Expect TopN to limit\n+                        .symbolStats(\"i1\", assertion -> assertion\n+                                .lowValue(1)\n+                                .highValue(10)\n+                                .distinctValuesCount(5)\n+                                .dataSizeUnknown()\n+                                .nullsFraction(0))\n+                        .symbolStats(\"i2\", assertion -> assertion\n+                                .lowValue(0)\n+                                .highValue(3)\n+                                .dataSizeUnknown()\n+                                .distinctValuesCount(4)\n+                                .nullsFraction(0)));\n+\n+        // Test case with more rows in data than in topN PARTIAL step\n+        tester().assertStatsFor(pb -> pb\n+                .topN(10, ImmutableList.of(pb.symbol(\"i1\")), TopNNode.Step.PARTIAL, pb.values(pb.symbol(\"i1\"), pb.symbol(\"i2\"))))\n+                .withSourceStats(0, PlanNodeStatsEstimate.builder()\n+                        .setOutputRowCount(100)\n+                        .addSymbolStatistics(new Symbol(\"i1\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(1)\n+                                .setHighValue(10)\n+                                .setDistinctValuesCount(5)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .addSymbolStatistics(new Symbol(\"i2\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(0)\n+                                .setHighValue(3)\n+                                .setDistinctValuesCount(4)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .build())\n+                .check(check -> check\n+                        .outputRowsCount(100) //Expect TopN not to limit\n+                        .symbolStats(\"i1\", assertion -> assertion\n+                                .lowValue(1)\n+                                .highValue(10)\n+                                .distinctValuesCount(5)\n+                                .dataSizeUnknown()\n+                                .nullsFraction(0))\n+                        .symbolStats(\"i2\", assertion -> assertion\n+                                .lowValue(0)\n+                                .highValue(3)\n+                                .dataSizeUnknown()\n+                                .distinctValuesCount(4)\n+                                .nullsFraction(0)));\n+    }\n+\n+    @Test\n+    public void testLongerTopN()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNzEwNQ=="}, "originalCommit": null, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDc2MTc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozODoyNlrOHFxoEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1NTowOVrOHGeutQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAwMg==", "bodyText": "I think you should reset nulls fraction to 0 here. Or is it done anyway somewhere else. Can you please add test where input has non-zero null fraction.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r475818002", "createdAt": "2020-08-24T18:38:26Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4MTYxNA==", "bodyText": "not sure I follow.\nI completely disregard the null fraction as I validate only against the outputRows. adding it to a test won't really affect the changes.\nI can change one of the stats in the test to hold fraction other than 0..\nbtw, I just followed LimitStatsRule.java", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476281614", "createdAt": "2020-08-25T08:44:44Z", "author": {"login": "kabunchi"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAwMg=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyOTcyNQ==", "bodyText": "Reseting nulls fraction to 0 is an overstatement. But IMO nulls handling could be improved here.\nLet use two example queries:\npresto:default> select * from (values 1, NULL, 2, NULL, 3, NULL, 4, NULL, 5) t(a) order by a limit 6;\n  a\n------\n    1\n    2\n    3\n    4\n    5\n NULL\n\npresto:default> select * from (values 1, NULL, 2, NULL, 3, NULL, 4, NULL, 5) t(a) order by a desc limit 6;\n  a\n------\n    5\n    4\n    3\n    2\n    1\n NULL\n(6 rows)\n\nHere we have a TopN operator on column a. No matter what sort order we are using, NULLs will always end up last. So estimated nulls-fraction for an output should be adjusted. Something like this should do:\nif limit > input.rowsCount {\n  return input stats\n}\n\ninputNonNullsCount = input.rowCount - input.rowCount * input.nullsFraction;;\n\noutputRowCount = limit\nif limit < inputNonNullsCount {\n   outputNullsCount = 0\n} else {\n   outputNullsCount = limit - inputNonNullsCount\n}\n\noutputNullsFraction = outputNullsCount/outputRowCount\n\nNote that if ordering uses multiple columns, above logic is valid only for the first one.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476329725", "createdAt": "2020-08-25T09:59:23Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAwMg=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NTYxMg==", "bodyText": "Got you now.\nStill now sure how to proceed.\nMainly because I didn't fully understood the first column comment, how do I differ? what the single null fraction value stands for in case of multiple columns?\nRegardless,  because one can also use order by 1 NULLS first I must look at the sortOrder to re-calculate the null fraction correctly", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476365612", "createdAt": "2020-08-25T11:09:16Z", "author": {"login": "kabunchi"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAwMg=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3NTY2Mg==", "bodyText": "Mainly because I didn't fully understood the first column comment, how do I differ? what the single null fraction value stands for in case of multiple columns?\n\nThere is no single nulls-fraction value. The nulls-fraction is stored per column. You can modify it either using PlanNodeStatsEstimate.mapSymbolColumnStatistics or explicitly setting via PlanNodeStatsEstimate.Builder#addSymbolStatistics().\nIf there are multiple columns used for ordering, I think we cannot derive anything reasonable regarding nulls fraction for any column but first. So I think we should leave source null-fraction for other ones.\n\nRegardless, because one can also use order by 1 NULLS first I must look at the sortOrder to re-calculate the null fraction correctly\n\nGood point.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476375662", "createdAt": "2020-08-25T11:29:51Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAwMg=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMjA4NQ==", "bodyText": "ended up a bit ugly:\nSymbol symbol = node.getOrderingScheme().getOrderBy().get(0); // Assuming not empty list\n       SymbolStatsEstimate symbolStatsEstimate = sourceStats.getSymbolStatistics().get(symbol);\n       SortOrder sortOrder = node.getOrderingScheme().getOrdering(symbol);\n       long count = node.getCount();\n\n       if ((symbolStatsEstimate == null) || (sortOrder == null)) {\n           return Optional.of(PlanNodeStatsEstimate.buildFrom(sourceStats)\n                                                   .setOutputRowCount(count)\n                                                   .build());\n       }\n\n       double nullCount = rowCount * symbolStatsEstimate.getNullsFraction();\n       double outNullFraction;\n\n       if (sortOrder.isNullsFirst()) {\n           if (nullCount > count) {\n               outNullFraction = 1;\n           }\n           else {\n               outNullFraction = nullCount / count;\n           }\n       }\n       else {\n           double nonNullCount = (rowCount - nullCount);\n           if (nonNullCount > count) {\n               outNullFraction = 0;\n           }\n           else {\n               outNullFraction = (count - nonNullCount) / count;\n           }\n       }\n       SymbolStatsEstimate newSymbolStatsEstimate = SymbolStatsEstimate.buildFrom(symbolStatsEstimate).setNullsFraction(outNullFraction).build();\n\n       // TopN actually limits (or when there was no row count estimated for source)\n       return Optional.of(PlanNodeStatsEstimate.buildFrom(sourceStats)\n               .setOutputRowCount(count)\n               .addSymbolStatistics(symbol, newSymbolStatsEstimate)\n               .build());\n   }\n\n\nstill think it worth it?", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476422085", "createdAt": "2020-08-25T12:50:18Z", "author": {"login": "kabunchi"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAwMg=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ3OTA3Ng==", "bodyText": "You can make it (IMO) a bit cleaner with mapSymbolColumStatistics. Like this:\n    @Override\n    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n    {\n        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n        if (sourceStats.getOutputRowCount() <= node.getCount()) {\n            return Optional.of(sourceStats);\n        }\n\n        Symbol firstOrderSymbol = node.getOrderingScheme().getOrderBy().get(0); // Assuming not empty list\n        SortOrder sortOrder = node.getOrderingScheme().getOrdering(firstOrderSymbol);\n        long limitCount = node.getCount();\n\n        PlanNodeStatsEstimate resultStats = PlanNodeStatsEstimate.buildFrom(sourceStats)\n                .setOutputRowCount(limitCount)\n                .build();\n\n        // augment null fraction estimation for first ORDER BY symbol\n        double rowCount = sourceStats.getOutputRowCount();\n        resultStats = resultStats.mapSymbolColumnStatistics(firstOrderSymbol, symbolStats -> {\n            SymbolStatsEstimate.Builder newStats = SymbolStatsEstimate.buildFrom(symbolStats);\n            double nullCount = rowCount * symbolStats.getNullsFraction();\n            if (sortOrder.isNullsFirst()) {\n                if (nullCount > limitCount) {\n                    newStats.setNullsFraction(1.0);\n                }\n                else {\n                    newStats.setNullsFraction(nullCount / limitCount);\n                }\n            }\n            else {\n                double nonNullCount = (rowCount - nullCount);\n                if (nonNullCount > limitCount) {\n                    newStats.setNullsFraction(0.0);\n                }\n                else {\n                    newStats.setNullsFraction((limitCount - nonNullCount) / limitCount);\n                }\n            }\n            return newStats.build();\n        });\n        return Optional.of(resultStats);\n    }\nI think it is nice to have. What needs to be added to above is handling division by 0.0. And testing.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476479076", "createdAt": "2020-08-25T14:10:08Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAwMg=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1Njk4MQ==", "bodyText": "fixed and pushed.\nthanks for the very responsive review.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476556981", "createdAt": "2020-08-25T15:55:09Z", "author": {"login": "kabunchi"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAwMg=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTUxMjkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/test/PlanBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyOToyMVrOHGgJMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo0MzoxOVrOHGgrbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MDE0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, PlanNode source, SortOrder sortOrder)\n          \n          \n            \n                public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, SortOrder sortOrder, PlanNode source)", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476580144", "createdAt": "2020-08-25T16:29:21Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/test/PlanBuilder.java", "diffHunk": "@@ -259,13 +259,17 @@ public TopNNode topN(long count, List<Symbol> orderBy, PlanNode source)\n \n     public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, PlanNode source)\n     {\n-        return new TopNNode(\n+        return topN(count, orderBy, step, source, SortOrder.ASC_NULLS_FIRST);\n+    }\n+\n+    public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, PlanNode source, SortOrder sortOrder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4ODkwOQ==", "bodyText": "fixed and pushed.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476588909", "createdAt": "2020-08-25T16:43:19Z", "author": {"login": "kabunchi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/test/PlanBuilder.java", "diffHunk": "@@ -259,13 +259,17 @@ public TopNNode topN(long count, List<Symbol> orderBy, PlanNode source)\n \n     public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, PlanNode source)\n     {\n-        return new TopNNode(\n+        return topN(count, orderBy, step, source, SortOrder.ASC_NULLS_FIRST);\n+    }\n+\n+    public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, PlanNode source, SortOrder sortOrder)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MDE0NA=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTU0NTg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNzo0MFrOHGgeEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoyMzo1MlrOHKDojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTQ5MA==", "bodyText": "Not sure about PARTIAL handling. It does not limit output size to same extent as FINAL, yet it still can very substantially limit it vs size of the input to queryParalellism*limit.\n@findepi do you have an idea how to do better estimation here? (or pass to someone who may have more context here)", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476585490", "createdAt": "2020-08-25T16:37:40Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.spi.block.SortOrder;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n+        double rowCount = sourceStats.getOutputRowCount();\n+\n+        if ((rowCount <= node.getCount()) || (node.getStep() == TopNNode.Step.PARTIAL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4MzkzNA==", "bodyText": "There's no good answer for PARTIAL. The number of global rows coming out of that operation will depend on the number of tasks that get created at runtime, and that's not known in advance.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r477483934", "createdAt": "2020-08-26T17:55:36Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.spi.block.SortOrder;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n+        double rowCount = sourceStats.getOutputRowCount();\n+\n+        if ((rowCount <= node.getCount()) || (node.getStep() == TopNNode.Step.PARTIAL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTQ5MA=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODI1Mg==", "bodyText": "See also https://github.com/prestosql/presto/blob/c74b775e103a7a239aafef1b7ca15fe6370495fe/presto-main/src/main/java/io/prestosql/cost/AggregationStatsRule.java#L56-L58", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r477508252", "createdAt": "2020-08-26T18:39:07Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.spi.block.SortOrder;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n+        double rowCount = sourceStats.getOutputRowCount();\n+\n+        if ((rowCount <= node.getCount()) || (node.getStep() == TopNNode.Step.PARTIAL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTQ5MA=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ2NTYxMA==", "bodyText": "After discussing with @findepi  i think we should go same approach here:\nif (node.getStep() != SINGLE) {\n    return Optional.empty();\n}\nIt should still help as join enumeration, which uses stats is happening before SINGLE TopNNodes are split into PARTIAL and FINAL (unless I am misreading the code). (*)\n(*) It looks like the only way TopNNode can be converted into PARTIAL, before join enumeration, is due to execution of PushLimitThroughOuterJoin or PushLimitThroughUnion, which enforce partial flag on LimitNode they produce. Not sure if that logic is needed - I will look more into that.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r478465610", "createdAt": "2020-08-27T14:33:14Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.spi.block.SortOrder;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n+        double rowCount = sourceStats.getOutputRowCount();\n+\n+        if ((rowCount <= node.getCount()) || (node.getStep() == TopNNode.Step.PARTIAL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTQ5MA=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3MzQxMg==", "bodyText": "just wondering why Optional.empty() and not Optional.of(sourceStats);?\nto carry on the stats already calculated.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r479673412", "createdAt": "2020-08-29T17:50:06Z", "author": {"login": "kabunchi"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.spi.block.SortOrder;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n+        double rowCount = sourceStats.getOutputRowCount();\n+\n+        if ((rowCount <= node.getCount()) || (node.getStep() == TopNNode.Step.PARTIAL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTQ5MA=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NDYwMg==", "bodyText": "Optional.empty() means we cannot compute statistics which is accurate. The Optional.of(sourceStats) is not correct as the output of PARTIAL aggregation does not match its input.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r479984602", "createdAt": "2020-08-31T08:43:47Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.spi.block.SortOrder;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n+        double rowCount = sourceStats.getOutputRowCount();\n+\n+        if ((rowCount <= node.getCount()) || (node.getStep() == TopNNode.Step.PARTIAL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTQ5MA=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzM0MA==", "bodyText": "got it. thanks.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r480307340", "createdAt": "2020-08-31T18:23:52Z", "author": {"login": "kabunchi"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.spi.block.SortOrder;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n+        double rowCount = sourceStats.getOutputRowCount();\n+\n+        if ((rowCount <= node.getCount()) || (node.getStep() == TopNNode.Step.PARTIAL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTQ5MA=="}, "originalCommit": null, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3292, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}