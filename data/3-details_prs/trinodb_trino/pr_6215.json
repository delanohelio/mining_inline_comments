{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMjczODYy", "number": 6215, "title": "Improve reporting of multiple SQLExceptions in JdbcPageSink#finish", "bodyText": "When we encounter a SQLException it can have multiple different\nexceptions (which do not have a causal relationship). Throwing just the\nfirst exception leads to omitting useful information from other\nexceptions.\nThis change adds each SQLException as a suppressed exception to the\noriginal SQLException before throwing so that the stack trace contains\nmore information.\nBefore:\njava.lang.AssertionError: Execution of 'actual' query failed: CREATE TABLE test_table_x6r4b AS SELECT '\u201a\u00f2\u00c9' unicode\n\tat org.testng.Assert.fail(Assert.java:83)\n\t... 30 more\nCaused by: java.lang.RuntimeException: Failed to insert data: Batch entry 0 INSERT INTO \"testdb\".\"test_schema\".\"tmp_presto_04ff943132b0497db9bf2618edb23192\" (\"unicode\") VALUES ('\u201a\u00f2\u00c9') was aborted.  Call getNextException to see the cause.\n\tat io.prestosql.testing.AbstractTestingPrestoClient.execute(AbstractTestingPrestoClient.java:115)\n\tat io.prestosql.testing.DistributedQueryRunner.execute(DistributedQueryRunner.java:462)\n\tat io.prestosql.testing.QueryAssertions.assertQuery(QueryAssertions.java:147)\n\t... 29 more\nCaused by: io.prestosql.spi.PrestoException: Failed to insert data: Batch entry 0 INSERT INTO \"testdb\".\"test_schema\".\"tmp_presto_04ff943132b0497db9bf2618edb23192\" (\"unicode\") VALUES ('\u201a\u00f2\u00c9') was aborted.  Call getNextException to see the cause.\n\tat io.prestosql.plugin.jdbc.JdbcPageSink.finish(JdbcPageSink.java:168)\n\tat io.prestosql.operator.TableWriterOperator.finish(TableWriterOperator.java:208)\n\t... 11 more\nCaused by: java.sql.BatchUpdateException: Batch entry 0 INSERT INTO \"testdb\".\"test_schema\".\"tmp_presto_04ff943132b0497db9bf2618edb23192\" (\"unicode\") VALUES ('\u201a\u00f2\u00c9') was aborted.  Call getNextException to see the cause.\n\tat org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler.handleError(AbstractJdbc2Statement.java:2743)\n\tat org.postgresql.core.v3.QueryExecutorImpl$1.handleError(QueryExecutorImpl.java:461)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1928)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:405)\n\tat org.postgresql.jdbc2.AbstractJdbc2Statement.executeBatch(AbstractJdbc2Statement.java:2892)\n\tat io.prestosql.plugin.jdbc.JdbcPageSink.finish(JdbcPageSink.java:160)\n\t... 12 more\n\nAfter:\njava.lang.AssertionError: Execution of 'actual' query failed: CREATE TABLE test_table_12unp AS SELECT '\u201a\u00f2\u00c9' unicode\n\tat org.testng.Assert.fail(Assert.java:83)\n\t... 30 more\nCaused by: java.lang.RuntimeException: Failed to insert data: Batch entry 0 INSERT INTO \"testdb\".\"test_schema\".\"tmp_presto_839be71779604fcc9bcf9109d3b844cb\" (\"unicode\") VALUES ('\u201a\u00f2\u00c9') was aborted.  Call getNextException to see the cause.\n\tat io.prestosql.testing.AbstractTestingPrestoClient.execute(AbstractTestingPrestoClient.java:115)\n\tat io.prestosql.testing.DistributedQueryRunner.execute(DistributedQueryRunner.java:462)\n\tat io.prestosql.testing.QueryAssertions.assertQuery(QueryAssertions.java:147)\n\t... 29 more\nCaused by: io.prestosql.spi.PrestoException: Failed to insert data: Batch entry 0 INSERT INTO \"testdb\".\"test_schema\".\"tmp_presto_839be71779604fcc9bcf9109d3b844cb\" (\"unicode\") VALUES ('\u201a\u00f2\u00c9') was aborted.  Call getNextException to see the cause.\n\tat io.prestosql.plugin.jdbc.JdbcPageSink.finish(JdbcPageSink.java:168)\n\tat io.prestosql.operator.TableWriterOperator.finish(TableWriterOperator.java:208)\n\t... 11 more\nCaused by: java.sql.BatchUpdateException: Batch entry 0 INSERT INTO \"testdb\".\"test_schema\".\"tmp_presto_839be71779604fcc9bcf9109d3b844cb\" (\"unicode\") VALUES ('\u201a\u00f2\u00c9') was aborted.  Call getNextException to see the cause.\n\tat org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler.handleError(AbstractJdbc2Statement.java:2743)\n\tat org.postgresql.core.v3.QueryExecutorImpl$1.handleError(QueryExecutorImpl.java:461)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1928)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:405)\n\tat org.postgresql.jdbc2.AbstractJdbc2Statement.executeBatch(AbstractJdbc2Statement.java:2892)\n\tat io.prestosql.plugin.jdbc.JdbcPageSink.finish(JdbcPageSink.java:161)\n\t... 12 more\n\tSuppressed: org.postgresql.util.PSQLException: ERROR: Value too long for character type\n  Detail:\n  -----------------------------------------------\n  error:  Value too long for character type\n  code:      8001\n  context:   Value too long for type character varying(1)\n  query:     885252\n  location:  string.cpp:175\n  process:   padbmaster [pid=19949]\n  -----------------------------------------------\n\n\t\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2198)\n\t\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1927)\n\t\t... 15 more", "createdAt": "2020-12-06T21:56:09Z", "url": "https://github.com/trinodb/trino/pull/6215", "merged": true, "mergeCommit": {"oid": "9b1e76b7321ddcd4e045b117b3090c5a66167b0a"}, "closed": true, "closedAt": "2020-12-09T10:05:07Z", "author": {"login": "hashhar"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjy0VWAFqTU0NjAwNTM3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkFu64gH2gAyNTMzMjczODYyOmQ0ZTBhZDczYzQzZjkzNzQxNDYxMjU3YzlmMmY4ODRhYjE2MmU1MDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDA1Mzcw", "url": "https://github.com/trinodb/trino/pull/6215#pullrequestreview-546005370", "createdAt": "2020-12-07T10:16:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDoxNjo1NlrOIAfepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDoxNjo1NlrOIAfepQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4NjY2MQ==", "bodyText": "This is not the only place were we wrap SQLException as PrestoException. Do we need to update all places like that?", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537386661", "createdAt": "2020-12-07T10:16:56Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDY3OTg3", "url": "https://github.com/trinodb/trino/pull/6215#pullrequestreview-546067987", "createdAt": "2020-12-07T11:40:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo0MDoxN1rOIAitzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo0MjoxMFrOIAix1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQzOTY5NQ==", "bodyText": "nextExc -> nextException", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537439695", "createdAt": "2020-12-07T11:40:17Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDI5Ng==", "bodyText": "be defensive here, since this code is (and will not be) well test covered:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            e.addSuppressed(nextExc);\n          \n          \n            \n                            if (e != nextExc) {\n          \n          \n            \n                                e.addSuppressed(nextExc);\n          \n          \n            \n                            }", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537440296", "createdAt": "2020-12-07T11:41:23Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();\n+            while (nextExc != null) {\n+                e.addSuppressed(nextExc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDcyNQ==", "bodyText": "Also, it might be good to distinguish these:\ne.addSuppressed(new Exception(\"Next exception\", nextException));", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537440725", "createdAt": "2020-12-07T11:42:10Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();\n+            while (nextExc != null) {\n+                e.addSuppressed(nextExc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDI5Ng=="}, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MjUzMzY5", "url": "https://github.com/trinodb/trino/pull/6215#pullrequestreview-546253369", "createdAt": "2020-12-07T15:22:23Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyMjoyNFrOIAr_lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo1MjoxNVrOIAta_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5MTcwMA==", "bodyText": "If we want to do this everywhere, we'll probably need to copy/paste something. I think subclassing PrestoException (JdbcPrestoException) or adding factory methods somewhere are preferable to just adding a utility method that converts chained SQLExceptions to suppressed exceptions.\n(The only way I can think of to avoid needing to make changes in a lot of places would be to add constructors accepting SQLException to PrestoException, but that seems like a very  bad idea.)", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537591700", "createdAt": "2020-12-07T15:22:24Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4NjY2MQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5OTEyMQ==", "bodyText": "A better defense would be breaking out of the loop when e == nextException. If you see the original exception again, you're in a loop. You could end up in a loop without the original, too, which would require a few more steps to check.", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537599121", "createdAt": "2020-12-07T15:31:41Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();\n+            while (nextExc != null) {\n+                e.addSuppressed(nextExc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDI5Ng=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxNTEwMA==", "bodyText": "I'd add a comment in code noting what this is for, like \"convert chained SQLExceptions to suppressed exceptions so they are visible in the stack trace.\"", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537615100", "createdAt": "2020-12-07T15:52:15Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,13 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTM3NDUw", "url": "https://github.com/trinodb/trino/pull/6215#pullrequestreview-546537450", "createdAt": "2020-12-07T21:08:15Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e0ad73c43f93741461257c9f2f884ab162e508", "author": {"user": {"login": "hashhar", "name": "Ashhar Hasan"}}, "url": "https://github.com/trinodb/trino/commit/d4e0ad73c43f93741461257c9f2f884ab162e508", "committedDate": "2020-12-08T08:19:17Z", "message": "Improve reporting of multiple SQLExceptions in JdbcPageSink#finish\n\nWhen we encounter a SQLException it can have multiple different\nexceptions (which do not have a causal relationship). Throwing just the\nfirst exception leads to omitting useful information from other\nexceptions.\n\nThis change adds each SQLException as a suppressed exception to the\noriginal SQLException before throwing so that the stack trace contains\nmore information."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2056, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}