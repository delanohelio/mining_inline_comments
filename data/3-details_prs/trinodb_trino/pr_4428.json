{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3OTAwNDA4", "number": 4428, "title": "Support aggregation pushdown in MySQL connector", "bodyText": "Resolve #4138", "createdAt": "2020-07-12T13:28:27Z", "url": "https://github.com/trinodb/trino/pull/4428", "merged": true, "mergeCommit": {"oid": "5cd0e7d3424b1bca08c1b3bf209546b386b6222a"}, "closed": true, "closedAt": "2020-08-26T08:54:27Z", "author": {"login": "yuokada"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0OBHZABqjM1MzcxNjkyMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCcEcogH2gAyNDQ3OTAwNDA4OjVjNmNlZmVjZTc2YmExOWFhN2U4ZjBmMGM2ZDdjOGI1OTE3MDZhYWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTc3MTI4", "url": "https://github.com/trinodb/trino/pull/4428#pullrequestreview-450177128", "createdAt": "2020-07-16T20:05:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDowNTo1M1rOGy63XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTo1ODowMFrOG1pG3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0NjQyOQ==", "bodyText": "Remove", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r456046429", "createdAt": "2020-07-16T20:05:53Z", "author": {"login": "alexjo2144"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySQLClient.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.plugin.jdbc.BaseJdbcConfig;\n+import io.prestosql.plugin.jdbc.ColumnMapping;\n+import io.prestosql.plugin.jdbc.JdbcClient;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.type.InternalTypeManager;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Types;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.testing.TestingConnectorSession.SESSION;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestMySQLClient\n+{\n+    private static final TypeManager TYPE_MANAGER = new InternalTypeManager(createTestMetadataManager());\n+\n+    private static final JdbcColumnHandle BIGINT_COLUMN =\n+            JdbcColumnHandle.builder()\n+                    .setColumnName(\"c_bigint\")\n+                    .setColumnType(BIGINT)\n+                    .setJdbcTypeHandle(new JdbcTypeHandle(Types.BIGINT, Optional.of(\"int8\"), 0, 0, Optional.empty()))\n+                    .build();\n+\n+    private static final JdbcColumnHandle DOUBLE_COLUMN =\n+            JdbcColumnHandle.builder()\n+                    .setColumnName(\"c_double\")\n+                    .setColumnType(DOUBLE)\n+                    .setJdbcTypeHandle(new JdbcTypeHandle(Types.DOUBLE, Optional.of(\"double\"), 0, 0, Optional.empty()))\n+                    .build();\n+\n+    private static final JdbcClient JDBC_CLIENT = new MySqlClient(\n+            new BaseJdbcConfig(),\n+//            new MySqlConfig(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NDgyOA==", "bodyText": "I believe that avg for Integer columns actually won't be pushed down. The avg function is only defined in the engine for BIGINT and DOUBLE. Other types will have a cast, which gets in the way of the pushdown.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            .with(expressionType().matching(type -> type == BIGINT || type == INTEGER))\n          \n          \n            \n                                            .with(singleInput().matching(variable().with(expressionType().equalTo(BIGINT))))", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r458894828", "createdAt": "2020-07-22T15:49:04Z", "author": {"login": "alexjo2144"}, "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/ImplementAvgBigint.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.plugin.jdbc.expression.AggregateFunctionRule;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.expression.Variable;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.expressionType;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.functionName;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.singleInput;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.variable;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static java.lang.String.format;\n+\n+public class ImplementAvgBigint\n+        implements AggregateFunctionRule\n+{\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"avg\"))\n+                .with(singleInput().matching(\n+                        variable()\n+                                .with(expressionType().matching(type -> type == BIGINT || type == INTEGER))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5ODczMQ==", "bodyText": "If https://github.com/prestosql/presto/pull/4313/files#diff-81a9801ba0bc1960cc32cc99ebf1928e gets merged first we could use that rather than defining this class", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r458898731", "createdAt": "2020-07-22T15:54:30Z", "author": {"login": "alexjo2144"}, "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/ImplementAvgBigint.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.plugin.jdbc.expression.AggregateFunctionRule;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.expression.Variable;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.expressionType;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.functionName;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.singleInput;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.variable;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static java.lang.String.format;\n+\n+public class ImplementAvgBigint", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMTIxNQ==", "bodyText": "You need a rebase, this method was renamed and now only takes one argument.", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r458901215", "createdAt": "2020-07-22T15:58:00Z", "author": {"login": "alexjo2144"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -225,6 +225,34 @@ public void testInsertIntoNotNullColumn()\n         assertUpdate(\"DROP TABLE test_insert_not_null\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()\n+            throws Exception\n+    {\n+        // TODO support aggregation pushdown with GROUPING SETS\n+        // TODO support aggregation over expressions\n+\n+        assertPushedDown(\"SELECT count(*) FROM nation\");\n+        assertPushedDown(\"SELECT count(nationkey) FROM nation\");\n+        assertPushedDown(\"SELECT regionkey, min(nationkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(\"SELECT regionkey, max(nationkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(\"SELECT regionkey, sum(nationkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(\"SELECT regionkey, avg(regionkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzYwODgw", "url": "https://github.com/trinodb/trino/pull/4428#pullrequestreview-454760880", "createdAt": "2020-07-24T09:48:00Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTo0ODowMVrOG2pgdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTo0ODoxNFrOG2pg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NjM0MA==", "bodyText": "Let's not block on this. It's not a big problem to adapt later.", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r459956340", "createdAt": "2020-07-24T09:48:01Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/ImplementAvgBigint.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.plugin.jdbc.expression.AggregateFunctionRule;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.expression.Variable;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.expressionType;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.functionName;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.singleInput;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.variable;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static java.lang.String.format;\n+\n+public class ImplementAvgBigint", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5ODczMQ=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NjQ0NA==", "bodyText": "good catch", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r459956444", "createdAt": "2020-07-24T09:48:14Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/ImplementAvgBigint.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.plugin.jdbc.expression.AggregateFunctionRule;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.expression.Variable;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.expressionType;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.functionName;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.singleInput;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.variable;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static java.lang.String.format;\n+\n+public class ImplementAvgBigint\n+        implements AggregateFunctionRule\n+{\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"avg\"))\n+                .with(singleInput().matching(\n+                        variable()\n+                                .with(expressionType().matching(type -> type == BIGINT || type == INTEGER))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NDgyOA=="}, "originalCommit": null, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjY5OTM5", "url": "https://github.com/trinodb/trino/pull/4428#pullrequestreview-455269939", "createdAt": "2020-07-25T08:01:47Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODowMTo0N1rOG3DVTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODowMTo0N1rOG3DVTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTQ2OQ==", "bodyText": "Could you please fix the CI failure?\n2020-07-24T00:55:02.4084660Z [ERROR]   TestMySqlDistributedQueries>AbstractTestQueries.testExistsSubquery:1025->AbstractTestQueryFramework.assertQuery:120->AbstractTestQueryFramework.assertQuery:125 Execution of 'actual' query failed: SELECT o1.orderkey, COUNT(*) FROM orders o1  JOIN (SELECT * FROM orders LIMIT 10) o2 ON (SELECT avg(orderkey) FROM orders) > 3 GROUP BY o1.orderkey ORDER BY o1.orderkey LIMIT 5\n2020-07-24T00:55:02.4086032Z [ERROR]   TestMySqlDistributedQueries>AbstractTestQueries.testScalarSubquery:907->AbstractTestQueryFramework.assertQuery:120->AbstractTestQueryFramework.assertQuery:125 Execution of 'actual' query failed: SELECT DISTINCT orderkey FROM lineitem WHERE orderkey BETWEEN   (SELECT avg(orderkey) FROM orders) - 10    AND   (SELECT avg(orderkey) FROM orders) + 10\n2020-07-24T00:55:02.4086880Z [ERROR]   TestMySqlIntegrationSmokeTest>AbstractTestIntegrationSmokeTest.testAggregation:104->AbstractTestQueryFramework.assertQuery:130 Execution of 'actual' query failed: SELECT avg(nationkey) FROM nation\n2020-07-24T00:55:02.4087788Z [ERROR]   TestMySqlIntegrationSmokeTest.testAggregationPushdown:242->AbstractTestIntegrationSmokeTest.assertAggregationPushedDown:452->AbstractTestQueryFramework.computeActual:105->AbstractTestQueryFramework.computeActual:110 \u00bb Runtime\n\nmysql> SELECT cast(1 AS DOUBLE);\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DOUBLE)' at line 1", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r460379469", "createdAt": "2020-07-25T08:01:47Z", "author": {"login": "ebyhr"}, "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/ImplementAvgBigint.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.plugin.jdbc.expression.AggregateFunctionRule;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.expression.Variable;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.expressionType;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.functionName;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.singleInput;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.variable;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static java.lang.String.format;\n+\n+public class ImplementAvgBigint\n+        implements AggregateFunctionRule\n+{\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"avg\"))\n+                .with(singleInput().matching(\n+                        variable()\n+                                .with(expressionType().matching(type -> type == BIGINT || type == INTEGER))\n+                                .capturedAs(INPUT)));\n+    }\n+\n+    @Override\n+    public Optional<JdbcExpression> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        Variable input = captures.get(INPUT);\n+        JdbcColumnHandle columnHandle = (JdbcColumnHandle) context.getAssignments().get(input.getName());\n+        verifyNotNull(columnHandle, \"Unbound variable: %s\", input);\n+        verify(aggregateFunction.getOutputType() == DOUBLE);\n+\n+        return Optional.of(new JdbcExpression(\n+                format(\"avg(CAST(%s AS double))\", columnHandle.toSqlExpression(context.getIdentifierQuote())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzI4MjE2", "url": "https://github.com/trinodb/trino/pull/4428#pullrequestreview-474328216", "createdAt": "2020-08-25T10:02:47Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDowMjo0N1rOHGQ-Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDowMjo0N1rOHGQ-Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzMTYyMw==", "bodyText": "Add\nassertThat(query(\"SELECT regionkey, sum(nationkey) FROM nation WHERE regionkey < 4 GROUP BY regionkey\")).isCorrectlyPushedDown();\n        assertThat(query(\"SELECT regionkey, sum(nationkey) FROM nation WHERE regionkey < 4 AND name > 'AAA' GROUP BY regionkey\")).isNotFullyPushedDown(FilterNode.class);\n\nsee https://github.com/prestosql/presto/blob/1e69a5bfed50c7b41febcd62b79f598c52bf67d6/presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java#L352-L353", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r476331623", "createdAt": "2020-08-25T10:02:47Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -226,6 +226,33 @@ public void testInsertIntoNotNullColumn()\n         assertUpdate(\"DROP TABLE test_insert_not_null\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()\n+            throws Exception\n+    {\n+        // TODO support aggregation pushdown with GROUPING SETS\n+        // TODO support aggregation over expressions\n+\n+        assertThat(query(\"SELECT count(*) FROM nation\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT count(nationkey) FROM nation\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT count(1) FROM nation\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT count() FROM nation\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT regionkey, min(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT regionkey, max(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT regionkey, sum(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjE4NTk1", "url": "https://github.com/trinodb/trino/pull/4428#pullrequestreview-474618595", "createdAt": "2020-08-25T15:51:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1MTowMlrOHGejpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1MTowMlrOHGejpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NDE0OA==", "bodyText": "nit: TestMySqlClient", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r476554148", "createdAt": "2020-08-25T15:51:02Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySQLClient.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.plugin.jdbc.BaseJdbcConfig;\n+import io.prestosql.plugin.jdbc.ColumnMapping;\n+import io.prestosql.plugin.jdbc.JdbcClient;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.type.InternalTypeManager;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Types;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.testing.TestingConnectorSession.SESSION;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestMySQLClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cec47fc5e13606e5de32bc77949e6a785d5bac59", "author": {"user": {"login": "yuokada", "name": "Yukihiro Okada (Yuki)"}}, "url": "https://github.com/trinodb/trino/commit/cec47fc5e13606e5de32bc77949e6a785d5bac59", "committedDate": "2020-08-25T19:04:43Z", "message": "Support aggregation pushdown in MySQL connector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "cec47fc5e13606e5de32bc77949e6a785d5bac59", "author": {"user": {"login": "yuokada", "name": "Yukihiro Okada (Yuki)"}}, "url": "https://github.com/trinodb/trino/commit/cec47fc5e13606e5de32bc77949e6a785d5bac59", "committedDate": "2020-08-25T19:04:43Z", "message": "Support aggregation pushdown in MySQL connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c6cefece76ba19aa7e8f0f0c6d7c8b591706aac", "author": {"user": {"login": "yuokada", "name": "Yukihiro Okada (Yuki)"}}, "url": "https://github.com/trinodb/trino/commit/5c6cefece76ba19aa7e8f0f0c6d7c8b591706aac", "committedDate": "2020-08-25T19:07:17Z", "message": "Add Pushdown section in MySQL document"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 92, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}