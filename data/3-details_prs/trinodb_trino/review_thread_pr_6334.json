{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MzcwNDE3", "number": 6334, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0NToyMFrOFF0isw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0NToyMFrOFF0isw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjQ4MDUxOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0NToyMFrOIGhWgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0NToyMFrOIGhWgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwODgwMg==", "bodyText": "Pushed a change here. This looks horrible. We're fighting against our own convenience. I hope #6345 will eliminate all this.", "url": "https://github.com/trinodb/trino/pull/6334#discussion_r543708802", "createdAt": "2020-12-15T21:45:20Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataType.java", "diffHunk": "@@ -180,14 +185,38 @@\n \n     public static DataType<LocalTime> timeDataType(int precision)\n     {\n-        String pattern = \"'TIME '''HH:mm:ss\" + (precision == 0 ? \"\" : (\".\" + \"S\".repeat(precision))) + \"''\";\n+        // This code does not support precision > 9, as java.time classes support precision up to nanoseconds\n+        checkArgument(precision >= 0 && precision <= 9, \"Unsupported precision: %s\", precision);\n+        String pattern = \"'TIME '''HH:mm:ss\" +\n+                (precision == 0 ? \"\" : (\".\" + \"S\".repeat(precision)))\n+                + \"''\";\n+\n         return dataType(\n                 format(\"time(%s)\", precision),\n                 createTimeType(precision),\n                 DateTimeFormatter.ofPattern(pattern)::format,\n                 identity());\n     }\n \n+    public static DataType<OffsetTime> timeWithTimeZoneDataType(int precision)\n+    {\n+        // This code does not support precision > 9, as java.time classes support precision up to nanoseconds\n+        checkArgument(precision >= 0 && precision <= 9, \"Unsupported precision: %s\", precision);\n+\n+        return dataType(\n+                format(\"time(%s) with time zone\", precision),\n+                createTimeWithTimeZoneType(precision),\n+                new DateTimeFormatterBuilder()\n+                        .appendPattern(\"'TIME '''HH:mm:ss\" + (precision == 0 ? \"\" : (\".\" + \"S\".repeat(precision))))\n+                        .appendOffset(\"+HH:mm\", \"+00:00\")\n+                        .appendPattern(\"''\")\n+                        .toFormatter()::format);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4337, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}