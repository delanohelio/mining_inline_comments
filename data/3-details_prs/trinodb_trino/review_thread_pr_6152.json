{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTI3NDk3", "number": 6152, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0Nzo0M1rOE_SprA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo1NjozMVrOFAxCcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODAxMzI0OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0Nzo0M1rOH868kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzozNTo1NlrOH_EUkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0MjM4NQ==", "bodyText": "I think splitting expressions into 2 arguments (prestoExpression, referenceExpressions) would make this more intuitive.", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r533642385", "createdAt": "2020-12-01T18:47:43Z", "author": {"login": "aalbu"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -248,15 +249,23 @@ private void assertParameter(Object expectedValue, Optional<String> sessionTimez\n     private void checkRepresentation(String expression, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)\n             throws Exception\n     {\n+        checkRepresentation(nCopies(referenceDrivers.size() + 1, expression), type, sessionTimezoneId, assertion);\n+    }\n+\n+    private void checkRepresentation(List<String> expressions, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5MzEzNg==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535893136", "createdAt": "2020-12-04T07:35:56Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -248,15 +249,23 @@ private void assertParameter(Object expectedValue, Optional<String> sessionTimez\n     private void checkRepresentation(String expression, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)\n             throws Exception\n     {\n+        checkRepresentation(nCopies(referenceDrivers.size() + 1, expression), type, sessionTimezoneId, assertion);\n+    }\n+\n+    private void checkRepresentation(List<String> expressions, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0MjM4NQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODAxNjIwOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0ODozNVrOH86-fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzozNzoyM1rOH_EXTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0Mjg3OA==", "bodyText": "Nit: Wrong expression list size?", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r533642878", "createdAt": "2020-12-01T18:48:35Z", "author": {"login": "aalbu"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -248,15 +249,23 @@ private void assertParameter(Object expectedValue, Optional<String> sessionTimez\n     private void checkRepresentation(String expression, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)\n             throws Exception\n     {\n+        checkRepresentation(nCopies(referenceDrivers.size() + 1, expression), type, sessionTimezoneId, assertion);\n+    }\n+\n+    private void checkRepresentation(List<String> expressions, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)\n+            throws Exception\n+    {\n+        verify(expressions.size() == referenceDrivers.size() + 1, \"Wrong expressions list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5MzgzOA==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535893838", "createdAt": "2020-12-04T07:37:23Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -248,15 +249,23 @@ private void assertParameter(Object expectedValue, Optional<String> sessionTimez\n     private void checkRepresentation(String expression, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)\n             throws Exception\n     {\n+        checkRepresentation(nCopies(referenceDrivers.size() + 1, expression), type, sessionTimezoneId, assertion);\n+    }\n+\n+    private void checkRepresentation(List<String> expressions, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)\n+            throws Exception\n+    {\n+        verify(expressions.size() == referenceDrivers.size() + 1, \"Wrong expressions list\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0Mjg3OA=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjcwMjE5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1MDo1M1rOH_Gxyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1NDoxMFrOH_G6NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzMzM4Ng==", "bodyText": "I do not find comment here usefult given two lines above.", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535933386", "createdAt": "2020-12-04T08:50:53Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -492,7 +493,9 @@ public void testTimestampWithTimeZone()\n     {\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should represent TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'\n+                ZonedDateTime zonedDateTime = ZonedDateTime.of(2018, 2, 13, 13, 14, 15, 227_000_000, ZoneId.of(\"Europe/Warsaw\"));\n+                Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                assertEquals(rs.getObject(column), timestampForPointInTime); // TODO this should represent TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNTU0MQ==", "bodyText": "This TODO comment will be removed in #307\nIt is here today, so that\n\ni can exercise this code path\nwithout implying the expected result has my blessing as to whether it is correct", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535935541", "createdAt": "2020-12-04T08:54:10Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -492,7 +493,9 @@ public void testTimestampWithTimeZone()\n     {\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should represent TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'\n+                ZonedDateTime zonedDateTime = ZonedDateTime.of(2018, 2, 13, 13, 14, 15, 227_000_000, ZoneId.of(\"Europe/Warsaw\"));\n+                Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                assertEquals(rs.getObject(column), timestampForPointInTime); // TODO this should represent TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzMzM4Ng=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjcwOTAyOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1MjoyMVrOH_G1oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyOToyOFrOH_ISxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNDM2OQ==", "bodyText": "ditto here and below.", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535934369", "createdAt": "2020-12-04T08:52:21Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -501,52 +504,61 @@ public void testTimestampWithTimeZone()\n                         .hasMessage(serverSupportsVariablePrecisionTimestampWithTimeZone()\n                                 ? \"Expected column to be a time type but is timestamp with time zone(3)\" // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n                                 : \"Expected column to be a time type but is timestamp with time zone\");\n-                assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '2018-02-13 13:14:15.227'\n+                assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n             });\n \n             // second fraction in nanoseconds overflowing to next second, minute, hour, day, month, year\n             if (serverSupportsVariablePrecisionTimestampWithTimeZone()) {\n                 checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                    assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                    ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, ZoneId.of(\"Europe/Warsaw\"));\n+                    Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                    assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNTUxMA==", "bodyText": "Oh - here it actually makes sense, due to long fractional part.", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535935510", "createdAt": "2020-12-04T08:54:07Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -501,52 +504,61 @@ public void testTimestampWithTimeZone()\n                         .hasMessage(serverSupportsVariablePrecisionTimestampWithTimeZone()\n                                 ? \"Expected column to be a time type but is timestamp with time zone(3)\" // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n                                 : \"Expected column to be a time type but is timestamp with time zone\");\n-                assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '2018-02-13 13:14:15.227'\n+                assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n             });\n \n             // second fraction in nanoseconds overflowing to next second, minute, hour, day, month, year\n             if (serverSupportsVariablePrecisionTimestampWithTimeZone()) {\n                 checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                    assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                    ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, ZoneId.of(\"Europe/Warsaw\"));\n+                    Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                    assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNDM2OQ=="}, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1ODIxNA==", "bodyText": "It's more about time zone actually.", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535958214", "createdAt": "2020-12-04T09:29:28Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -501,52 +504,61 @@ public void testTimestampWithTimeZone()\n                         .hasMessage(serverSupportsVariablePrecisionTimestampWithTimeZone()\n                                 ? \"Expected column to be a time type but is timestamp with time zone(3)\" // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n                                 : \"Expected column to be a time type but is timestamp with time zone\");\n-                assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '2018-02-13 13:14:15.227'\n+                assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n             });\n \n             // second fraction in nanoseconds overflowing to next second, minute, hour, day, month, year\n             if (serverSupportsVariablePrecisionTimestampWithTimeZone()) {\n                 checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                    assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                    ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, ZoneId.of(\"Europe/Warsaw\"));\n+                    Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                    assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNDM2OQ=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjczNzY2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1ODowM1rOH_HFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyOTowM1rOH_IRiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzODMzNQ==", "bodyText": "Why comment here references Europe/Warsaw", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535938335", "createdAt": "2020-12-04T08:58:03Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -501,52 +504,61 @@ public void testTimestampWithTimeZone()\n                         .hasMessage(serverSupportsVariablePrecisionTimestampWithTimeZone()\n                                 ? \"Expected column to be a time type but is timestamp with time zone(3)\" // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n                                 : \"Expected column to be a time type but is timestamp with time zone\");\n-                assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '2018-02-13 13:14:15.227'\n+                assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n             });\n \n             // second fraction in nanoseconds overflowing to next second, minute, hour, day, month, year\n             if (serverSupportsVariablePrecisionTimestampWithTimeZone()) {\n                 checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                    assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                    ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, ZoneId.of(\"Europe/Warsaw\"));\n+                    Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                    assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n                     assertThatThrownBy(() -> rs.getDate(column))\n                             .isInstanceOf(SQLException.class)\n                             .hasMessage(\"Expected value to be a date but is: 2019-12-31 23:59:59.999999999999 Europe/Warsaw\");\n                     assertThatThrownBy(() -> rs.getTime(column))\n                             .isInstanceOf(IllegalArgumentException.class) // TODO (https://github.com/prestosql/presto/issues/5315) SQLException\n                             .hasMessage(\"Expected column to be a time type but is timestamp with time zone(12)\"); // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n-                    assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));\n+                    assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n                 });\n \n+                ZoneId jvmZone = ZoneId.systemDefault();\n                 checkRepresentation(\n                         connectedStatement.getStatement(),\n-                        format(\"TIMESTAMP '2019-12-31 23:59:59.999999999999 %s'\", ZoneId.systemDefault().getId()),\n+                        format(\"TIMESTAMP '2019-12-31 23:59:59.999999999999 %s'\", jvmZone.getId()),\n                         Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */,\n                         (rs, column) -> {\n-                            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2020, 1, 1, 0, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                            ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, jvmZone);\n+                            Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                            assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0ODMyNA==", "bodyText": "because its a copy", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535948324", "createdAt": "2020-12-04T09:14:22Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -501,52 +504,61 @@ public void testTimestampWithTimeZone()\n                         .hasMessage(serverSupportsVariablePrecisionTimestampWithTimeZone()\n                                 ? \"Expected column to be a time type but is timestamp with time zone(3)\" // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n                                 : \"Expected column to be a time type but is timestamp with time zone\");\n-                assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '2018-02-13 13:14:15.227'\n+                assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n             });\n \n             // second fraction in nanoseconds overflowing to next second, minute, hour, day, month, year\n             if (serverSupportsVariablePrecisionTimestampWithTimeZone()) {\n                 checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                    assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                    ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, ZoneId.of(\"Europe/Warsaw\"));\n+                    Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                    assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n                     assertThatThrownBy(() -> rs.getDate(column))\n                             .isInstanceOf(SQLException.class)\n                             .hasMessage(\"Expected value to be a date but is: 2019-12-31 23:59:59.999999999999 Europe/Warsaw\");\n                     assertThatThrownBy(() -> rs.getTime(column))\n                             .isInstanceOf(IllegalArgumentException.class) // TODO (https://github.com/prestosql/presto/issues/5315) SQLException\n                             .hasMessage(\"Expected column to be a time type but is timestamp with time zone(12)\"); // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n-                    assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));\n+                    assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n                 });\n \n+                ZoneId jvmZone = ZoneId.systemDefault();\n                 checkRepresentation(\n                         connectedStatement.getStatement(),\n-                        format(\"TIMESTAMP '2019-12-31 23:59:59.999999999999 %s'\", ZoneId.systemDefault().getId()),\n+                        format(\"TIMESTAMP '2019-12-31 23:59:59.999999999999 %s'\", jvmZone.getId()),\n                         Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */,\n                         (rs, column) -> {\n-                            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2020, 1, 1, 0, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                            ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, jvmZone);\n+                            Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                            assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzODMzNQ=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1Nzg5OQ==", "bodyText": "fixed", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535957899", "createdAt": "2020-12-04T09:29:03Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -501,52 +504,61 @@ public void testTimestampWithTimeZone()\n                         .hasMessage(serverSupportsVariablePrecisionTimestampWithTimeZone()\n                                 ? \"Expected column to be a time type but is timestamp with time zone(3)\" // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n                                 : \"Expected column to be a time type but is timestamp with time zone\");\n-                assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '2018-02-13 13:14:15.227'\n+                assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n             });\n \n             // second fraction in nanoseconds overflowing to next second, minute, hour, day, month, year\n             if (serverSupportsVariablePrecisionTimestampWithTimeZone()) {\n                 checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                    assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                    ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, ZoneId.of(\"Europe/Warsaw\"));\n+                    Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                    assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n                     assertThatThrownBy(() -> rs.getDate(column))\n                             .isInstanceOf(SQLException.class)\n                             .hasMessage(\"Expected value to be a date but is: 2019-12-31 23:59:59.999999999999 Europe/Warsaw\");\n                     assertThatThrownBy(() -> rs.getTime(column))\n                             .isInstanceOf(IllegalArgumentException.class) // TODO (https://github.com/prestosql/presto/issues/5315) SQLException\n                             .hasMessage(\"Expected column to be a time type but is timestamp with time zone(12)\"); // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n-                    assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));\n+                    assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n                 });\n \n+                ZoneId jvmZone = ZoneId.systemDefault();\n                 checkRepresentation(\n                         connectedStatement.getStatement(),\n-                        format(\"TIMESTAMP '2019-12-31 23:59:59.999999999999 %s'\", ZoneId.systemDefault().getId()),\n+                        format(\"TIMESTAMP '2019-12-31 23:59:59.999999999999 %s'\", jvmZone.getId()),\n                         Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */,\n                         (rs, column) -> {\n-                            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2020, 1, 1, 0, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                            ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, jvmZone);\n+                            Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                            assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzODMzNQ=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjc4MjgzOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTowOTowM1rOH_He8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyOTowOFrOH_IR1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0NDk0Ng==", "bodyText": "Why not TIMESTAMP_WITH_TIMEZONE? Todo?", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535944946", "createdAt": "2020-12-04T09:09:03Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -172,6 +175,75 @@ public void testTimestamp(Optional<String> sessionTimezoneId)\n         });\n     }\n \n+    @Test(dataProvider = \"timeZoneIds\")\n+    public void testTimestampWithTimeZone(Optional<String> sessionTimezoneId)\n+            throws Exception\n+    {\n+        checkRepresentation(\n+                \"TIMESTAMP '1970-01-01 00:00:00.000 +00:00'\", // Presto\n+                ImmutableList.of(\n+                        \"TIMESTAMP WITH TIME ZONE '1970-01-01 00:00:00.000 +00:00'\", // PostgreSQL\n+                        \"from_tz(TIMESTAMP '1970-01-01 00:00:00.000', '+00:00')\"), // Oracle\n+                TIMESTAMP,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1Nzk3NA==", "bodyText": "fixed", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535957974", "createdAt": "2020-12-04T09:29:08Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -172,6 +175,75 @@ public void testTimestamp(Optional<String> sessionTimezoneId)\n         });\n     }\n \n+    @Test(dataProvider = \"timeZoneIds\")\n+    public void testTimestampWithTimeZone(Optional<String> sessionTimezoneId)\n+            throws Exception\n+    {\n+        checkRepresentation(\n+                \"TIMESTAMP '1970-01-01 00:00:00.000 +00:00'\", // Presto\n+                ImmutableList.of(\n+                        \"TIMESTAMP WITH TIME ZONE '1970-01-01 00:00:00.000 +00:00'\", // PostgreSQL\n+                        \"from_tz(TIMESTAMP '1970-01-01 00:00:00.000', '+00:00')\"), // Oracle\n+                TIMESTAMP,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0NDk0Ng=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzQ3NzYxOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo1NjozMVrOH_Nuew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjoyNjo0MFrOH_OuNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NzIyNw==", "bodyText": "With this there is another question. Should it still work with TIMESTAMP passed here. If so, should we have test coverage?", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r536047227", "createdAt": "2020-12-04T11:56:31Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -184,7 +185,7 @@ public void testTimestampWithTimeZone(Optional<String> sessionTimezoneId)\n                 ImmutableList.of(\n                         \"TIMESTAMP WITH TIME ZONE '1970-01-01 00:00:00.000 +00:00'\", // PostgreSQL\n                         \"from_tz(TIMESTAMP '1970-01-01 00:00:00.000', '+00:00')\"), // Oracle\n-                TIMESTAMP,\n+                TIMESTAMP_WITH_TIMEZONE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA1NzcxOQ==", "bodyText": "It's just test's internal control flag to select which reference drivers to test against.\nWhether TIMESTAMP or TIMESTAMP_WITH_TIMEZONE -- both PostgreSQL and Oracle are selected for comparison.\nIt has no further meaning.", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r536057719", "createdAt": "2020-12-04T12:16:00Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -184,7 +185,7 @@ public void testTimestampWithTimeZone(Optional<String> sessionTimezoneId)\n                 ImmutableList.of(\n                         \"TIMESTAMP WITH TIME ZONE '1970-01-01 00:00:00.000 +00:00'\", // PostgreSQL\n                         \"from_tz(TIMESTAMP '1970-01-01 00:00:00.000', '+00:00')\"), // Oracle\n-                TIMESTAMP,\n+                TIMESTAMP_WITH_TIMEZONE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NzIyNw=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA2MzU0Mg==", "bodyText": "#6207", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r536063542", "createdAt": "2020-12-04T12:26:40Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -184,7 +185,7 @@ public void testTimestampWithTimeZone(Optional<String> sessionTimezoneId)\n                 ImmutableList.of(\n                         \"TIMESTAMP WITH TIME ZONE '1970-01-01 00:00:00.000 +00:00'\", // PostgreSQL\n                         \"from_tz(TIMESTAMP '1970-01-01 00:00:00.000', '+00:00')\"), // Oracle\n-                TIMESTAMP,\n+                TIMESTAMP_WITH_TIMEZONE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NzIyNw=="}, "originalCommit": null, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4719, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}