{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTUwNzc4", "number": 5280, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo0MDozN1rOEm6ixw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo0MDozN1rOEm6ixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjQwNTE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/TestDynamicFilterSourceOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo0MDozN1rOHXNqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo0OTowN1rOHXN-bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwMzE1MQ==", "bodyText": "why is it equal?", "url": "https://github.com/trinodb/trino/pull/5280#discussion_r494103151", "createdAt": "2020-09-24T07:40:37Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestDynamicFilterSourceOperator.java", "diffHunk": "@@ -383,48 +386,71 @@ public void testCollectEmptyBuildSide()\n     @Test\n     public void testSingleColumnCollectMinMaxRangeWhenTooManyPositions()\n     {\n-        int maxPositionsCount = 100;\n-        Page largePage = new Page(createLongSequenceBlock(0, maxPositionsCount + 1));\n+        int maxDistinctValues = 100;\n+        Page largePage = new Page(createLongSequenceBlock(0, maxDistinctValues + 1));\n \n         assertDynamicFilters(\n-                maxPositionsCount,\n+                maxDistinctValues,\n                 ImmutableList.of(BIGINT),\n                 ImmutableList.of(largePage),\n                 ImmutableList.of(TupleDomain.withColumnDomains(ImmutableMap.of(\n                         new DynamicFilterId(\"0\"),\n                         Domain.create(\n-                                ValueSet.ofRanges(range(BIGINT, 0L, true, (long) maxPositionsCount, true)),\n+                                ValueSet.ofRanges(range(BIGINT, 0L, true, (long) maxDistinctValues, true)),\n                                 false)))));\n     }\n \n     @Test\n-    public void testMultipleColumnsCollectMinMaxRangeWhenTooManyPositions()\n+    public void testMultipleColumnsCollectBelowDistinctValuesLimit()\n     {\n-        int maxPositionsCount = 300;\n+        int maxDistinctValues = 101;\n         Page largePage = new Page(\n                 createLongSequenceBlock(0, 101),\n-                createColorSequenceBlock(100, 201),\n+                createLongSequenceBlock(100, 201),\n                 createLongSequenceBlock(200, 301));\n \n+        List<TupleDomain<DynamicFilterId>> expectedTupleDomains = ImmutableList.of(\n+                TupleDomain.withColumnDomains(ImmutableMap.of(\n+                        new DynamicFilterId(\"0\"), Domain.create(\n+                                ValueSet.copyOf(BIGINT, LongStream.rangeClosed(0L, 100L).boxed().collect(toImmutableList())),\n+                                false),\n+                        new DynamicFilterId(\"1\"), Domain.create(\n+                                ValueSet.copyOf(BIGINT, LongStream.rangeClosed(100L, 200L).boxed().collect(toImmutableList())),\n+                                false),\n+                        new DynamicFilterId(\"2\"), Domain.create(\n+                                ValueSet.copyOf(BIGINT, LongStream.rangeClosed(200L, 300L).boxed().collect(toImmutableList())),\n+                                false))));\n+        assertDynamicFilters(maxDistinctValues, ImmutableList.of(BIGINT, BIGINT, BIGINT), ImmutableList.of(largePage), expectedTupleDomains);\n+    }\n+\n+    @Test\n+    public void testMultipleColumnsCollectMinMaxRangeWhenTooManyDistinctValues()\n+    {\n+        int maxDistinctValues = 100;\n+        Page largePage = new Page(\n+                createLongSequenceBlock(0, 101),\n+                createColorRepeatBlock(100, 101),\n+                createLongRepeatBlock(200, 101));\n+\n         List<TupleDomain<DynamicFilterId>> expectedTupleDomains = ImmutableList.of(\n                 TupleDomain.withColumnDomains(ImmutableMap.of(\n                         new DynamicFilterId(\"0\"), Domain.create(ValueSet.ofRanges(\n                                 range(BIGINT, 0L, true, 100L, true)), false),\n                         new DynamicFilterId(\"2\"), Domain.create(ValueSet.ofRanges(\n-                                range(BIGINT, 200L, true, 300L, true)), false))));\n-        assertDynamicFilters(maxPositionsCount, ImmutableList.of(BIGINT, COLOR, BIGINT), ImmutableList.of(largePage), expectedTupleDomains);\n+                                equal(BIGINT, 200L)), false))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0be36e1a2aad901c24c66460236b1b5e45c5943b"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwODI2OA==", "bodyText": "Used repeat block for this column to verify case of many distinct values only on one column", "url": "https://github.com/trinodb/trino/pull/5280#discussion_r494108268", "createdAt": "2020-09-24T07:49:07Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestDynamicFilterSourceOperator.java", "diffHunk": "@@ -383,48 +386,71 @@ public void testCollectEmptyBuildSide()\n     @Test\n     public void testSingleColumnCollectMinMaxRangeWhenTooManyPositions()\n     {\n-        int maxPositionsCount = 100;\n-        Page largePage = new Page(createLongSequenceBlock(0, maxPositionsCount + 1));\n+        int maxDistinctValues = 100;\n+        Page largePage = new Page(createLongSequenceBlock(0, maxDistinctValues + 1));\n \n         assertDynamicFilters(\n-                maxPositionsCount,\n+                maxDistinctValues,\n                 ImmutableList.of(BIGINT),\n                 ImmutableList.of(largePage),\n                 ImmutableList.of(TupleDomain.withColumnDomains(ImmutableMap.of(\n                         new DynamicFilterId(\"0\"),\n                         Domain.create(\n-                                ValueSet.ofRanges(range(BIGINT, 0L, true, (long) maxPositionsCount, true)),\n+                                ValueSet.ofRanges(range(BIGINT, 0L, true, (long) maxDistinctValues, true)),\n                                 false)))));\n     }\n \n     @Test\n-    public void testMultipleColumnsCollectMinMaxRangeWhenTooManyPositions()\n+    public void testMultipleColumnsCollectBelowDistinctValuesLimit()\n     {\n-        int maxPositionsCount = 300;\n+        int maxDistinctValues = 101;\n         Page largePage = new Page(\n                 createLongSequenceBlock(0, 101),\n-                createColorSequenceBlock(100, 201),\n+                createLongSequenceBlock(100, 201),\n                 createLongSequenceBlock(200, 301));\n \n+        List<TupleDomain<DynamicFilterId>> expectedTupleDomains = ImmutableList.of(\n+                TupleDomain.withColumnDomains(ImmutableMap.of(\n+                        new DynamicFilterId(\"0\"), Domain.create(\n+                                ValueSet.copyOf(BIGINT, LongStream.rangeClosed(0L, 100L).boxed().collect(toImmutableList())),\n+                                false),\n+                        new DynamicFilterId(\"1\"), Domain.create(\n+                                ValueSet.copyOf(BIGINT, LongStream.rangeClosed(100L, 200L).boxed().collect(toImmutableList())),\n+                                false),\n+                        new DynamicFilterId(\"2\"), Domain.create(\n+                                ValueSet.copyOf(BIGINT, LongStream.rangeClosed(200L, 300L).boxed().collect(toImmutableList())),\n+                                false))));\n+        assertDynamicFilters(maxDistinctValues, ImmutableList.of(BIGINT, BIGINT, BIGINT), ImmutableList.of(largePage), expectedTupleDomains);\n+    }\n+\n+    @Test\n+    public void testMultipleColumnsCollectMinMaxRangeWhenTooManyDistinctValues()\n+    {\n+        int maxDistinctValues = 100;\n+        Page largePage = new Page(\n+                createLongSequenceBlock(0, 101),\n+                createColorRepeatBlock(100, 101),\n+                createLongRepeatBlock(200, 101));\n+\n         List<TupleDomain<DynamicFilterId>> expectedTupleDomains = ImmutableList.of(\n                 TupleDomain.withColumnDomains(ImmutableMap.of(\n                         new DynamicFilterId(\"0\"), Domain.create(ValueSet.ofRanges(\n                                 range(BIGINT, 0L, true, 100L, true)), false),\n                         new DynamicFilterId(\"2\"), Domain.create(ValueSet.ofRanges(\n-                                range(BIGINT, 200L, true, 300L, true)), false))));\n-        assertDynamicFilters(maxPositionsCount, ImmutableList.of(BIGINT, COLOR, BIGINT), ImmutableList.of(largePage), expectedTupleDomains);\n+                                equal(BIGINT, 200L)), false))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwMzE1MQ=="}, "originalCommit": {"oid": "0be36e1a2aad901c24c66460236b1b5e45c5943b"}, "originalPosition": 199}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3058, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}