{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0ODAwOTU1", "number": 2555, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowMjo0NlrODZM_MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyOTozOFrODZyDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzUzNzc2OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowMjo0NlrOFfdqFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowMjo0NlrOFfdqFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzNjA4NA==", "bodyText": "Allow to skip empty Hive partition\n\nPlease update the commit message as well", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368536084", "createdAt": "2020-01-20T13:02:46Z", "author": {"login": "findepi"}, "path": "presto-docs/src/main/sphinx/connector/hive.rst", "diffHunk": "@@ -146,6 +146,8 @@ Property Name                                      Description\n                                                    ignored. This is equivalent to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzU0MDAzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/BackgroundHiveSplitLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowMzozOVrOFfdrfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowMzozOVrOFfdrfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzNjQ0Nw==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368536447", "createdAt": "2020-01-20T13:03:39Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -160,7 +161,9 @@ public BackgroundHiveSplitLoader(\n             Executor executor,\n             int loaderConcurrency,\n             boolean recursiveDirWalkerEnabled,\n+            boolean ignoreAbsentPartitions,\n             Optional<ValidWriteIdList> validWriteIds)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzU0NDA3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/BackgroundHiveSplitLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowNToxNlrOFfdt9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowNToxNlrOFfdt9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzNzA3OQ==", "bodyText": "try add this consistently in: fields, ctor params, ctor assignments\ni know the existing code is a bit messy from this point of view, but eg keep the new filed always right after recursiveDirWalkerEnabled", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368537079", "createdAt": "2020-01-20T13:05:16Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -122,6 +122,7 @@\n     private final DirectoryLister directoryLister;\n     private final int loaderConcurrency;\n     private final boolean recursiveDirWalkerEnabled;\n+    private final boolean ignoreAbsentPartitions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzYyNzY1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozNToyMVrOFfegkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowNDo0M1rOFfoOow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MDAzNQ==", "bodyText": "unnecessary change?", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368550035", "createdAt": "2020-01-20T13:35:21Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -130,8 +147,13 @@ private FileStatusIterator(Table table, Path path, FileSystem fileSystem, Direct\n         {\n             this.path = path;\n             this.namenodeStats = namenodeStats;\n+            this.fileStatusIterator = list(table, path, fileSystem, directoryLister);\n+        }\n+\n+        private RemoteIterator<LocatedFileStatus> list(Table table, Path path, FileSystem fileSystem, DirectoryLister directoryLister)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1NzUyNA==", "bodyText": "Please elaborate. Method is used in the ctor of FileStatusIterator", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368557524", "createdAt": "2020-01-20T13:51:52Z", "author": {"login": "wendigo"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -130,8 +147,13 @@ private FileStatusIterator(Table table, Path path, FileSystem fileSystem, Direct\n         {\n             this.path = path;\n             this.namenodeStats = namenodeStats;\n+            this.fileStatusIterator = list(table, path, fileSystem, directoryLister);\n+        }\n+\n+        private RemoteIterator<LocatedFileStatus> list(Table table, Path path, FileSystem fileSystem, DirectoryLister directoryLister)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MDAzNQ=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MTM4MA==", "bodyText": "Yes, the commit extracts the method while it was \"inline\" in the ctor.\nIt seems like a redundant unrelated change, so please inline it back (unless i am missing something)", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368561380", "createdAt": "2020-01-20T13:59:27Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -130,8 +147,13 @@ private FileStatusIterator(Table table, Path path, FileSystem fileSystem, Direct\n         {\n             this.path = path;\n             this.namenodeStats = namenodeStats;\n+            this.fileStatusIterator = list(table, path, fileSystem, directoryLister);\n+        }\n+\n+        private RemoteIterator<LocatedFileStatus> list(Table table, Path path, FileSystem fileSystem, DirectoryLister directoryLister)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MDAzNQ=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2NDAyNQ==", "bodyText": "From my perspective it improves readability - I can inline back (revert) this change if it's unnecessary", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368564025", "createdAt": "2020-01-20T14:05:09Z", "author": {"login": "wendigo"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -130,8 +147,13 @@ private FileStatusIterator(Table table, Path path, FileSystem fileSystem, Direct\n         {\n             this.path = path;\n             this.namenodeStats = namenodeStats;\n+            this.fileStatusIterator = list(table, path, fileSystem, directoryLister);\n+        }\n+\n+        private RemoteIterator<LocatedFileStatus> list(Table table, Path path, FileSystem fileSystem, DirectoryLister directoryLister)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MDAzNQ=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzNzI2MQ==", "bodyText": "OTOH it's a refactor, so would belong to a separate commit.\n(I think it's redundant, so i'd prefer to inline, but no strong feeling about this.)", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368637261", "createdAt": "2020-01-20T16:32:00Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -130,8 +147,13 @@ private FileStatusIterator(Table table, Path path, FileSystem fileSystem, Direct\n         {\n             this.path = path;\n             this.namenodeStats = namenodeStats;\n+            this.fileStatusIterator = list(table, path, fileSystem, directoryLister);\n+        }\n+\n+        private RemoteIterator<LocatedFileStatus> list(Table table, Path path, FileSystem fileSystem, DirectoryLister directoryLister)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MDAzNQ=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcwOTI4Mw==", "bodyText": "Let's keep this code as-is for now, since this refactoring is not related to the PR (we aren't extracting the method to call it from multiple places).", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368709283", "createdAt": "2020-01-20T20:04:43Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -130,8 +147,13 @@ private FileStatusIterator(Table table, Path path, FileSystem fileSystem, Direct\n         {\n             this.path = path;\n             this.namenodeStats = namenodeStats;\n+            this.fileStatusIterator = list(table, path, fileSystem, directoryLister);\n+        }\n+\n+        private RemoteIterator<LocatedFileStatus> list(Table table, Path path, FileSystem fileSystem, DirectoryLister directoryLister)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MDAzNQ=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzYzMDE2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozNjoxN1rOFfeiHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozNjoxN1rOFfeiHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MDQyOQ==", "bodyText": "It used to use Collections.emptyIterator(), now it uses emptyIterator.\nThis looks like a non intentional change, please revert.", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368550429", "createdAt": "2020-01-20T13:36:17Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -51,23 +52,26 @@\n     private final DirectoryLister directoryLister;\n     private final NamenodeStats namenodeStats;\n     private final NestedDirectoryPolicy nestedDirectoryPolicy;\n+    private final boolean ignoreAbsentPartitions;\n \n-    private Iterator<LocatedFileStatus> remoteIterator = Collections.emptyIterator();\n+    private Iterator<LocatedFileStatus> remoteIterator = emptyIterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzYzMTQ1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozNjo0MlrOFfei3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozNjo0MlrOFfei3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MDYyMw==", "bodyText": "It looks redundant over Collections.emptyIterator. Please remove", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368550623", "createdAt": "2020-01-20T13:36:42Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -168,6 +190,24 @@ private PrestoException processException(IOException exception)\n             }\n             return new PrestoException(HIVE_FILESYSTEM_ERROR, \"Failed to list directory: \" + path, exception);\n         }\n+\n+        private static RemoteIterator<LocatedFileStatus> emptyIterator()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzYzNjgyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestIgnoreAbsentPartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozODozNFrOFfemKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozODozNFrOFfemKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MTQ2Nw==", "bodyText": "please add a message to assertFalse/True, otherwise the raised exc msg will be little hard to use", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368551467", "createdAt": "2020-01-20T13:38:34Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestIgnoreAbsentPartition.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.fulfillment.table.MutableTablesState;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.MutableTableRequirement.State.LOADED;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static io.prestosql.tests.hive.HiveTableDefinitions.NATION_PARTITIONED_BY_BIGINT_REGIONKEY;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestIgnoreAbsentPartition\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private MutableTablesState tablesState;\n+\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY, \"test_table\", LOADED);\n+    }\n+\n+    /**\n+     * This test requires hive.ignore-absent-partitions=true\n+     */\n+    @Test(groups = PROFILE_SPECIFIC_TESTS)\n+    public void testIgnoreAbsentPartitions()\n+    {\n+        String tableNameInDatabase = tablesState.get(\"test_table\").getNameInDatabase();\n+\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+\n+        String partitionPath = format(\"/user/hive/warehouse/%s/p_regionkey=9999\", tableNameInDatabase);\n+        assertFalse(hdfsClient.exist(partitionPath));\n+        query(format(\"CALL hive.system.create_empty_partition('default', '%s', array['p_regionkey'], array['9999'])\", tableNameInDatabase));\n+        assertTrue(hdfsClient.exist(partitionPath));\n+        hdfsClient.delete(partitionPath);\n+        assertFalse(hdfsClient.exist(partitionPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzYzNzY2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestIgnoreAbsentPartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozODo1MVrOFfempA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozODo1MVrOFfempA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MTU4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                /*\n          \n      \n    \n    \n  \n\nbecause the comment is not a javadoc comment", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368551588", "createdAt": "2020-01-20T13:38:51Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestIgnoreAbsentPartition.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.fulfillment.table.MutableTablesState;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.MutableTableRequirement.State.LOADED;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static io.prestosql.tests.hive.HiveTableDefinitions.NATION_PARTITIONED_BY_BIGINT_REGIONKEY;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestIgnoreAbsentPartition\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private MutableTablesState tablesState;\n+\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY, \"test_table\", LOADED);\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODY3NTM1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowMToyM1rOFfoLLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowMToyM1rOFfoLLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcwODM5OA==", "bodyText": "Ignore partitions when the location does not exist rather than failing the query. This skips data that may be expected to be part of the table.", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368708398", "createdAt": "2020-01-20T20:01:23Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/hive.rst", "diffHunk": "@@ -146,6 +146,8 @@ Property Name                                      Description\n                                                    ignored. This is equivalent to the\n                                                    ``hive.mapred.supports.subdirectories`` property in Hive.\n \n+``hive.ignore-absent-partitions``                  Enable ignoring partition location which does not exist.     ``false``", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODY3NzQ5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowMjoyOVrOFfoMdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowMjoyOVrOFfoMdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcwODcyNg==", "bodyText": "Getters should come before setters", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368708726", "createdAt": "2020-01-20T20:02:29Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveConfig.java", "diffHunk": "@@ -255,6 +256,18 @@ public boolean getRecursiveDirWalkerEnabled()\n         return recursiveDirWalkerEnabled;\n     }\n \n+    @Config(\"hive.ignore-absent-partitions\")\n+    public HiveConfig setIgnoreAbsentPartitions(boolean ignoreAbsentPartitions)\n+    {\n+        this.ignoreAbsentPartitions = ignoreAbsentPartitions;\n+        return this;\n+    }\n+\n+    public boolean isIgnoreAbsentPartitions()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODY4MTgzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestBackgroundHiveSplitLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowNToxNVrOFfoPJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowNToxNVrOFfoPJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcwOTQxNQ==", "bodyText": "Formatting", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368709415", "createdAt": "2020-01-20T20:05:15Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestBackgroundHiveSplitLoader.java", "diffHunk": "@@ -547,6 +549,7 @@ private static BackgroundHiveSplitLoader backgroundHiveSplitLoader(List<LocatedF\n                 EXECUTOR,\n                 2,\n                 false,\n+false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODY4NjkzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/bin/product-tests-suite-6-non-generic.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowODozM1rOFfoSJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowODozM1rOFfoSJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMDE4Mg==", "bodyText": "Add a comment above\n# not dependent on Hadoop version\n\nOtherwise, it might seem related to the previous comment", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368710182", "createdAt": "2020-01-20T20:08:33Z", "author": {"login": "electrum"}, "path": "presto-product-tests/bin/product-tests-suite-6-non-generic.sh", "diffHunk": "@@ -47,5 +47,10 @@ presto-product-tests/bin/run_on_docker.sh \\\n     -g kafka \\\n     || suite_exit_code=1\n \n+presto-product-tests/bin/run_on_docker.sh \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTEyNzI4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTozNDoyNlrOFfsXnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTozNDoyNlrOFfsXnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NzExNg==", "bodyText": "Sorry, one more change. Let's clarify this as \"file system location\"", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368777116", "createdAt": "2020-01-21T01:34:26Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/hive.rst", "diffHunk": "@@ -146,6 +146,10 @@ Property Name                                      Description\n                                                    ignored. This is equivalent to the\n                                                    ``hive.mapred.supports.subdirectories`` property in Hive.\n \n+``hive.ignore-absent-partitions``                  Ignore partitions when the location does not exist rather    ``false``", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTEyODUxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTozNTo0NFrOFfsYYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTozNTo0NFrOFfsYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NzMxMg==", "bodyText": "Revert this formatting change", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368777312", "createdAt": "2020-01-21T01:35:44Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -130,10 +146,10 @@ private FileStatusIterator(Table table, Path path, FileSystem fileSystem, Direct\n         {\n             this.path = path;\n             this.namenodeStats = namenodeStats;\n+\n             try {\n                 this.fileStatusIterator = directoryLister.list(fileSystem, table, path);\n-            }\n-            catch (IOException e) {\n+            } catch(IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTEyOTU1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/BackgroundHiveSplitLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTozNjoyMlrOFfsY6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTozNjoyMlrOFfsY6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3NzQ0OA==", "bodyText": "Move to after recursiveDirWalkerEnabled", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368777448", "createdAt": "2020-01-21T01:36:22Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -173,6 +175,7 @@ public BackgroundHiveSplitLoader(\n         this.recursiveDirWalkerEnabled = recursiveDirWalkerEnabled;\n         this.executor = executor;\n         this.partitions = new ConcurrentLazyQueue<>(partitions);\n+        this.ignoreAbsentPartitions = ignoreAbsentPartitions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTEzMTgwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTozODozMVrOFfsaOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMTozODozMVrOFfsaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3Nzc4NQ==", "bodyText": "Nit: static import the method since the name is self-descriptive and thus the Collections prefix doesn't provide any value", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368777785", "createdAt": "2020-01-21T01:38:31Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -108,10 +111,23 @@ protected LocatedFileStatus computeNext()\n     private Iterator<LocatedFileStatus> getLocatedFileStatusRemoteIterator(Path path)\n     {\n         try (TimeStat.BlockTimer ignored = namenodeStats.getListLocatedStatus().time()) {\n+            if (ignoreAbsentPartitions && !exists(path)) {\n+                return Collections.emptyIterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE3NTc5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowOTozNFrOFf2Ujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTozODowN1rOFf3B4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MDE3NQ==", "bodyText": "nit, please feel free to ignore:\n\nline \"This skips data that may be expected to be part of the table\" does not seem to be adding more context.", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368940175", "createdAt": "2020-01-21T11:09:34Z", "author": {"login": "ankitdixit"}, "path": "presto-docs/src/main/sphinx/connector/hive.rst", "diffHunk": "@@ -146,6 +146,10 @@ Property Name                                      Description\n                                                    ignored. This is equivalent to the\n                                                    ``hive.mapred.supports.subdirectories`` property in Hive.\n \n+``hive.ignore-absent-partitions``                  Ignore partitions when the file system location does not     ``false``\n+                                                   exist rather than failing the query. This skips data that", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk1MTc3Ng==", "bodyText": "@ankitdixit it's exactly as @electrum requested :)", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r368951776", "createdAt": "2020-01-21T11:38:07Z", "author": {"login": "wendigo"}, "path": "presto-docs/src/main/sphinx/connector/hive.rst", "diffHunk": "@@ -146,6 +146,10 @@ Property Name                                      Description\n                                                    ignored. This is equivalent to the\n                                                    ``hive.mapred.supports.subdirectories`` property in Hive.\n \n+``hive.ignore-absent-partitions``                  Ignore partitions when the file system location does not     ``false``\n+                                                   exist rather than failing the query. This skips data that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MDE3NQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzU4MDc4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyMDoyNlrOFgXANQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyMDoyNlrOFgXANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3NTYzNw==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r369475637", "createdAt": "2020-01-22T10:20:26Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveFileIterator.java", "diffHunk": "@@ -130,6 +146,7 @@ private FileStatusIterator(Table table, Path path, FileSystem fileSystem, Direct\n         {\n             this.path = path;\n             this.namenodeStats = namenodeStats;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzU4MzMzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyMToxMFrOFgXBww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyMToxMFrOFgXBww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3NjAzNQ==", "bodyText": "remove WithSessionProperties part because it doesn't add more information", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r369476035", "createdAt": "2020-01-22T10:21:10Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.fulfillment.table.MutableTablesState;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.MutableTableRequirement.State.LOADED;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.hive.HiveTableDefinitions.NATION_PARTITIONED_BY_BIGINT_REGIONKEY;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestHiveIgnoreAbsentPartitions\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private MutableTablesState tablesState;\n+\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY, \"test_table\", LOADED);\n+    }\n+\n+    @Test\n+    public void testIgnoreAbsentPartitionsWithSessionProperties()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzU4NDcyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyMTozOFrOFgXCsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyMTozOFrOFgXCsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3NjI3NQ==", "bodyText": "i'd static import the isIgnoreAbsentPartitions method and inline the variable", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r369476275", "createdAt": "2020-01-22T10:21:38Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSplitManager.java", "diffHunk": "@@ -207,6 +207,8 @@ public ConnectorSplitSource getSplits(\n \n         Iterable<HivePartitionMetadata> hivePartitions = getPartitionMetadata(session, metastore, table, tableName, partitions, bucketHandle.map(HiveBucketHandle::toTableBucketProperty));\n \n+        boolean ignoreAbsentPartitions = !hiveTable.getPartitionColumns().isEmpty() && HiveSessionProperties.isIgnoreAbsentPartitions(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzU5MjQwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyNDoxMVrOFgXHZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyNDoxMVrOFgXHZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3NzQ3Ng==", "bodyText": "remove IF NOT EXISTS\nif you want the test to be repeatable (even if fails), add \"DROP TABLE \" + tableName before the CREATE.\nThis ensures this is our test table, with expected data & schema, not something else.", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r369477476", "createdAt": "2020-01-22T10:24:11Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.fulfillment.table.MutableTablesState;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.MutableTableRequirement.State.LOADED;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.hive.HiveTableDefinitions.NATION_PARTITIONED_BY_BIGINT_REGIONKEY;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestHiveIgnoreAbsentPartitions\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private MutableTablesState tablesState;\n+\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY, \"test_table\", LOADED);\n+    }\n+\n+    @Test\n+    public void testIgnoreAbsentPartitionsWithSessionProperties()\n+    {\n+        String tableNameInDatabase = tablesState.get(\"test_table\").getNameInDatabase();\n+        String partitionPath = format(\"/user/hive/warehouse/%s/p_regionkey=9999\", tableNameInDatabase);\n+\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", tableNameInDatabase));\n+        query(format(\"CALL hive.system.create_empty_partition('default', '%s', array['p_regionkey'], array['9999'])\", tableNameInDatabase));\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = false\");\n+        hdfsClient.delete(partitionPath);\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", partitionPath));\n+        assertThat(() -> query(\"SELECT count(*) FROM \" + tableNameInDatabase)).failsWithMessage(\"Partition location does not exist\");\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = true\");\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+    }\n+\n+    @Test\n+    public void testShouldThrowErrorOnUnpartitionedTableMissingData()\n+    {\n+        String tableName = \"unpartitioned_absent_table_data\";\n+        String tablePath = \"/user/hive/warehouse/\" + tableName;\n+\n+        assertThat(query(format(\"CREATE TABLE IF NOT EXISTS %s (col INT)\", tableName))).containsOnly(row(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzU5ODQ5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyNTo1OFrOFgXLBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyNTo1OFrOFgXLBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3ODQwNQ==", "bodyText": "just VALUES 1, 2, 3 would do the same\nyou can combine this with create:\nCREATE TABLE unpartitioned_absent_table_data AS VALUES 1, 2, 3", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r369478405", "createdAt": "2020-01-22T10:25:58Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.fulfillment.table.MutableTablesState;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.MutableTableRequirement.State.LOADED;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.hive.HiveTableDefinitions.NATION_PARTITIONED_BY_BIGINT_REGIONKEY;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestHiveIgnoreAbsentPartitions\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private MutableTablesState tablesState;\n+\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY, \"test_table\", LOADED);\n+    }\n+\n+    @Test\n+    public void testIgnoreAbsentPartitionsWithSessionProperties()\n+    {\n+        String tableNameInDatabase = tablesState.get(\"test_table\").getNameInDatabase();\n+        String partitionPath = format(\"/user/hive/warehouse/%s/p_regionkey=9999\", tableNameInDatabase);\n+\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", tableNameInDatabase));\n+        query(format(\"CALL hive.system.create_empty_partition('default', '%s', array['p_regionkey'], array['9999'])\", tableNameInDatabase));\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = false\");\n+        hdfsClient.delete(partitionPath);\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", partitionPath));\n+        assertThat(() -> query(\"SELECT count(*) FROM \" + tableNameInDatabase)).failsWithMessage(\"Partition location does not exist\");\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = true\");\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+    }\n+\n+    @Test\n+    public void testShouldThrowErrorOnUnpartitionedTableMissingData()\n+    {\n+        String tableName = \"unpartitioned_absent_table_data\";\n+        String tablePath = \"/user/hive/warehouse/\" + tableName;\n+\n+        assertThat(query(format(\"CREATE TABLE IF NOT EXISTS %s (col INT)\", tableName))).containsOnly(row(0));\n+        assertThat(query(format(\"INSERT INTO %s (col) VALUES (1), (2), (3)\", tableName))).containsOnly(row(3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzYwMzgwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyNzozNFrOFgXOLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyNzozNFrOFgXOLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3OTIxNQ==", "bodyText": "Since the table is not partitioned, the message should say \"Table location\".\nBut i understand that's pre-existing, let's not change this now.", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r369479215", "createdAt": "2020-01-22T10:27:34Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.fulfillment.table.MutableTablesState;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.MutableTableRequirement.State.LOADED;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.hive.HiveTableDefinitions.NATION_PARTITIONED_BY_BIGINT_REGIONKEY;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestHiveIgnoreAbsentPartitions\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private MutableTablesState tablesState;\n+\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY, \"test_table\", LOADED);\n+    }\n+\n+    @Test\n+    public void testIgnoreAbsentPartitionsWithSessionProperties()\n+    {\n+        String tableNameInDatabase = tablesState.get(\"test_table\").getNameInDatabase();\n+        String partitionPath = format(\"/user/hive/warehouse/%s/p_regionkey=9999\", tableNameInDatabase);\n+\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", tableNameInDatabase));\n+        query(format(\"CALL hive.system.create_empty_partition('default', '%s', array['p_regionkey'], array['9999'])\", tableNameInDatabase));\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = false\");\n+        hdfsClient.delete(partitionPath);\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", partitionPath));\n+        assertThat(() -> query(\"SELECT count(*) FROM \" + tableNameInDatabase)).failsWithMessage(\"Partition location does not exist\");\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = true\");\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+    }\n+\n+    @Test\n+    public void testShouldThrowErrorOnUnpartitionedTableMissingData()\n+    {\n+        String tableName = \"unpartitioned_absent_table_data\";\n+        String tablePath = \"/user/hive/warehouse/\" + tableName;\n+\n+        assertThat(query(format(\"CREATE TABLE IF NOT EXISTS %s (col INT)\", tableName))).containsOnly(row(0));\n+        assertThat(query(format(\"INSERT INTO %s (col) VALUES (1), (2), (3)\", tableName))).containsOnly(row(3));\n+        assertThat(query(\"SELECT COUNT(1) FROM \" + tableName)).containsOnly(row(3));\n+\n+        assertTrue(hdfsClient.exist(tablePath));\n+        hdfsClient.delete(tablePath);\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = false\");\n+        assertThat(() -> query(\"SELECT COUNT(1) FROM \" + tableName)).failsWithMessage(\"Partition location does not exist\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzYwOTQ3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyOTowNlrOFgXRhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyOTowNlrOFgXRhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MDA3MQ==", "bodyText": "Here & above, per our conventions:\n\nlowercase count (uppercase keywords from the grammar, generally lowercase everything else)\ncount(*) is \"more typical\" than count(1)", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r369480071", "createdAt": "2020-01-22T10:29:06Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.fulfillment.table.MutableTablesState;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.MutableTableRequirement.State.LOADED;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.hive.HiveTableDefinitions.NATION_PARTITIONED_BY_BIGINT_REGIONKEY;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestHiveIgnoreAbsentPartitions\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private MutableTablesState tablesState;\n+\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY, \"test_table\", LOADED);\n+    }\n+\n+    @Test\n+    public void testIgnoreAbsentPartitionsWithSessionProperties()\n+    {\n+        String tableNameInDatabase = tablesState.get(\"test_table\").getNameInDatabase();\n+        String partitionPath = format(\"/user/hive/warehouse/%s/p_regionkey=9999\", tableNameInDatabase);\n+\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", tableNameInDatabase));\n+        query(format(\"CALL hive.system.create_empty_partition('default', '%s', array['p_regionkey'], array['9999'])\", tableNameInDatabase));\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = false\");\n+        hdfsClient.delete(partitionPath);\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", partitionPath));\n+        assertThat(() -> query(\"SELECT count(*) FROM \" + tableNameInDatabase)).failsWithMessage(\"Partition location does not exist\");\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = true\");\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+    }\n+\n+    @Test\n+    public void testShouldThrowErrorOnUnpartitionedTableMissingData()\n+    {\n+        String tableName = \"unpartitioned_absent_table_data\";\n+        String tablePath = \"/user/hive/warehouse/\" + tableName;\n+\n+        assertThat(query(format(\"CREATE TABLE IF NOT EXISTS %s (col INT)\", tableName))).containsOnly(row(0));\n+        assertThat(query(format(\"INSERT INTO %s (col) VALUES (1), (2), (3)\", tableName))).containsOnly(row(3));\n+        assertThat(query(\"SELECT COUNT(1) FROM \" + tableName)).containsOnly(row(3));\n+\n+        assertTrue(hdfsClient.exist(tablePath));\n+        hdfsClient.delete(tablePath);\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = false\");\n+        assertThat(() -> query(\"SELECT COUNT(1) FROM \" + tableName)).failsWithMessage(\"Partition location does not exist\");\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = true\");\n+        assertThat(() -> query(\"SELECT COUNT(1) FROM \" + tableName)).failsWithMessage(\"Partition location does not exist\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzYxMTQyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyOTozOFrOFgXSpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyOTozOFrOFgXSpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MDM1OA==", "bodyText": "remove IF EXISTS, as it must exist at this point\nyou don't need to assert here. It's just cleanup, not part of the test.", "url": "https://github.com/trinodb/trino/pull/2555#discussion_r369480358", "createdAt": "2020-01-22T10:29:38Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveIgnoreAbsentPartitions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.fulfillment.table.MutableTablesState;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.MutableTableRequirement.State.LOADED;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.hive.HiveTableDefinitions.NATION_PARTITIONED_BY_BIGINT_REGIONKEY;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestHiveIgnoreAbsentPartitions\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private MutableTablesState tablesState;\n+\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY, \"test_table\", LOADED);\n+    }\n+\n+    @Test\n+    public void testIgnoreAbsentPartitionsWithSessionProperties()\n+    {\n+        String tableNameInDatabase = tablesState.get(\"test_table\").getNameInDatabase();\n+        String partitionPath = format(\"/user/hive/warehouse/%s/p_regionkey=9999\", tableNameInDatabase);\n+\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", tableNameInDatabase));\n+        query(format(\"CALL hive.system.create_empty_partition('default', '%s', array['p_regionkey'], array['9999'])\", tableNameInDatabase));\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = false\");\n+        hdfsClient.delete(partitionPath);\n+        assertFalse(hdfsClient.exist(partitionPath), format(\"Expected partition %s to not exist\", partitionPath));\n+        assertThat(() -> query(\"SELECT count(*) FROM \" + tableNameInDatabase)).failsWithMessage(\"Partition location does not exist\");\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = true\");\n+        assertThat(query(\"SELECT count(*) FROM \" + tableNameInDatabase)).containsOnly(row(15));\n+    }\n+\n+    @Test\n+    public void testShouldThrowErrorOnUnpartitionedTableMissingData()\n+    {\n+        String tableName = \"unpartitioned_absent_table_data\";\n+        String tablePath = \"/user/hive/warehouse/\" + tableName;\n+\n+        assertThat(query(format(\"CREATE TABLE IF NOT EXISTS %s (col INT)\", tableName))).containsOnly(row(0));\n+        assertThat(query(format(\"INSERT INTO %s (col) VALUES (1), (2), (3)\", tableName))).containsOnly(row(3));\n+        assertThat(query(\"SELECT COUNT(1) FROM \" + tableName)).containsOnly(row(3));\n+\n+        assertTrue(hdfsClient.exist(tablePath));\n+        hdfsClient.delete(tablePath);\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = false\");\n+        assertThat(() -> query(\"SELECT COUNT(1) FROM \" + tableName)).failsWithMessage(\"Partition location does not exist\");\n+\n+        query(\"SET SESSION hive.ignore_absent_partitions = true\");\n+        assertThat(() -> query(\"SELECT COUNT(1) FROM \" + tableName)).failsWithMessage(\"Partition location does not exist\");\n+\n+        assertThat(query(\"DROP TABLE IF EXISTS \" + tableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1047, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}