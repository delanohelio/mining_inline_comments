{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MTg4Mzg3", "number": 6041, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1MToxN1rOE8KY1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODoyNjo0MlrOE_gNjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTIwMjEyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBlockEncodingSerde.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1MToxN1rOH4II_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzowNjo1MVrOH8RZkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNTY3OA==", "bodyText": "Why do we have HiveBlockEncodingSerde? What is it used for?", "url": "https://github.com/trinodb/trino/pull/6041#discussion_r528615678", "createdAt": "2020-11-23T10:51:17Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBlockEncodingSerde.java", "diffHunk": "@@ -30,20 +31,35 @@\n import io.prestosql.spi.block.ShortArrayBlockEncoding;\n import io.prestosql.spi.block.SingleRowBlockEncoding;\n import io.prestosql.spi.block.VariableWidthBlockEncoding;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeId;\n \n import javax.inject.Inject;\n \n+import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.HyperLogLogType.HYPER_LOG_LOG;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP_MILLIS;\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09cbf057e462a294dd8cdd68b40a6d3f56b2b698"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTIyMQ==", "bodyText": "funny\n// This class is exactly the same as BlockEncodingManager\npublic final class HiveBlockEncodingSerde\n\nbut the referenced class does not exist", "url": "https://github.com/trinodb/trino/pull/6041#discussion_r528619221", "createdAt": "2020-11-23T10:57:32Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBlockEncodingSerde.java", "diffHunk": "@@ -30,20 +31,35 @@\n import io.prestosql.spi.block.ShortArrayBlockEncoding;\n import io.prestosql.spi.block.SingleRowBlockEncoding;\n import io.prestosql.spi.block.VariableWidthBlockEncoding;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeId;\n \n import javax.inject.Inject;\n \n+import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.HyperLogLogType.HYPER_LOG_LOG;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP_MILLIS;\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNTY3OA=="}, "originalCommit": {"oid": "09cbf057e462a294dd8cdd68b40a6d3f56b2b698"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMjgzNA==", "bodyText": "Seems to exist only for RecordingHiveMetastoreModule... I have no idea who added that, but it looks like @findepi was involved in the refactor that made it a top level class.", "url": "https://github.com/trinodb/trino/pull/6041#discussion_r532932834", "createdAt": "2020-11-30T22:03:12Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBlockEncodingSerde.java", "diffHunk": "@@ -30,20 +31,35 @@\n import io.prestosql.spi.block.ShortArrayBlockEncoding;\n import io.prestosql.spi.block.SingleRowBlockEncoding;\n import io.prestosql.spi.block.VariableWidthBlockEncoding;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeId;\n \n import javax.inject.Inject;\n \n+import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.HyperLogLogType.HYPER_LOG_LOG;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP_MILLIS;\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNTY3OA=="}, "originalCommit": {"oid": "09cbf057e462a294dd8cdd68b40a6d3f56b2b698"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2MTY4Mg==", "bodyText": "did you mean me?", "url": "https://github.com/trinodb/trino/pull/6041#discussion_r532961682", "createdAt": "2020-11-30T23:06:51Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBlockEncodingSerde.java", "diffHunk": "@@ -30,20 +31,35 @@\n import io.prestosql.spi.block.ShortArrayBlockEncoding;\n import io.prestosql.spi.block.SingleRowBlockEncoding;\n import io.prestosql.spi.block.VariableWidthBlockEncoding;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeId;\n \n import javax.inject.Inject;\n \n+import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.HyperLogLogType.HYPER_LOG_LOG;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP_MILLIS;\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNTY3OA=="}, "originalCommit": {"oid": "09cbf057e462a294dd8cdd68b40a6d3f56b2b698"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDIzNTAyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/MapBlockEncoding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODoyNjo0MlrOH9PZug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODoyNjo0MlrOH9PZug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk3NzUzMA==", "bodyText": "Preexisting, but it seems weird to decode type from the data stream, since type should be statically known.\nDo we have plans to change this?", "url": "https://github.com/trinodb/trino/pull/6041#discussion_r533977530", "createdAt": "2020-12-02T08:26:42Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/MapBlockEncoding.java", "diffHunk": "@@ -84,7 +75,7 @@ public void writeBlock(BlockEncodingSerde blockEncodingSerde, SliceOutput sliceO\n     @Override\n     public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceInput)\n     {\n-        MapType mapType = (MapType) TypeSerde.readType(typeManager, sliceInput);\n+        MapType mapType = (MapType) blockEncodingSerde.readType(sliceInput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09cbf057e462a294dd8cdd68b40a6d3f56b2b698"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4591, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}