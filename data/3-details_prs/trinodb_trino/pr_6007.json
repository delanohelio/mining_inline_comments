{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNDM5NzAy", "number": 6007, "title": "Allow predicate pushdown after aggregation pushdown", "bodyText": "Predicates pushed down after aggregations must be on group by keys.\n#4112", "createdAt": "2020-11-18T20:05:54Z", "url": "https://github.com/trinodb/trino/pull/6007", "merged": true, "mergeCommit": {"oid": "d14fdf99c48145cf7cad416f8f63301feb362539"}, "closed": true, "closedAt": "2020-11-25T10:38:08Z", "author": {"login": "alexjo2144"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd2LZvABqjQwMTMxMzI4MTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfxS6zAFqTUzODAxMTIxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NDU2NTA2", "url": "https://github.com/trinodb/trino/pull/6007#pullrequestreview-534456506", "createdAt": "2020-11-19T13:43:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo0MzoxN1rOH2fMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo1MDo1OVrOH2fhOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5NjE4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (constraint.getSummary().getDomains().isEmpty()) {\n          \n          \n            \n                        if (constraint.getSummary().isNone()) {", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r526896183", "createdAt": "2020-11-19T13:43:17Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -114,9 +114,19 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n         if (handle.getGroupingSets().isPresent()) {\n-            // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set\n-            // TODO (https://github.com/prestosql/presto/issues/4112) allow filter pushdown after aggregation pushdown\n-            return Optional.empty();\n+            if (constraint.getSummary().getDomains().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5NjQ4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().get();\n          \n          \n            \n                        Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().orElseThrow();", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r526896481", "createdAt": "2020-11-19T13:43:41Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -114,9 +114,19 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n         if (handle.getGroupingSets().isPresent()) {\n-            // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set\n-            // TODO (https://github.com/prestosql/presto/issues/4112) allow filter pushdown after aggregation pushdown\n-            return Optional.empty();\n+            if (constraint.getSummary().getDomains().isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwMTU2Mw==", "bodyText": "i think we can pushdown if all the constraint columns are fully contained by every grouping set.\nit's not testable right now, since the SPI supoports grouping set pushdown, but the engine actually does not yet\ni propose\nSet<ColumnHandle> constraintColumns = constraint.getSummary().getDomains().orElseThrow().keySet();\nList<List<JdbcColumnHandle>> groupingSets = handle.getGroupingSets().get();\nverify(!groupingSets.isEmpty());\nboolean canPushDown = groupingSets.stream()\n        .allMatch(groupingSet -> isContainedBy(constraintColumns, groupingSet));\n\nprivate static boolean isContainedBy(Set<ColumnHandle> searchedFor, List<JdbcColumnHandle> container)\n    {\n        if (searchedFor.size() < 3) {\n            return container.containsAll(searchedFor);\n        }\n        return ImmutableSet.copyOf(container).containsAll(searchedFor);\n    }\n\n(we can also consider the method overkill and just do the defensive version inline)", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r526901563", "createdAt": "2020-11-19T13:50:59Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -114,9 +114,19 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n         if (handle.getGroupingSets().isPresent()) {\n-            // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set\n-            // TODO (https://github.com/prestosql/presto/issues/4112) allow filter pushdown after aggregation pushdown\n-            return Optional.empty();\n+            if (constraint.getSummary().getDomains().isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().get();\n+            List<List<JdbcColumnHandle>> groupingSets = handle.getGroupingSets().get();\n+\n+            boolean canPushDown = domains.keySet().stream().allMatch(predicateColumn ->\n+                    groupingSets.stream().allMatch(group -> group.contains(predicateColumn)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0OTAxMjcy", "url": "https://github.com/trinodb/trino/pull/6007#pullrequestreview-534901272", "createdAt": "2020-11-19T22:14:48Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxNDo0OFrOH20FoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxNDo0OFrOH20FoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODU2MA==", "bodyText": "Add a case with two grouping sets (a, b) and (a) and predicate on column (b) only. No predicate pushdown should occur", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r527238560", "createdAt": "2020-11-19T22:14:48Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "diffHunk": "@@ -232,4 +246,84 @@ public void testDropTableTable()\n             assertEquals(e.getErrorCode(), NOT_FOUND.toErrorCode());\n         }\n     }\n+\n+    @Test\n+    public void testApplyFilterAfterAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(VARCHAR, utf8Slice(\"one\"));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, domain))));\n+\n+        assertEquals(tableHandleWithFilter.getConstraint().getDomains(), Optional.of(ImmutableMap.of(groupByColumn, domain)));\n+    }\n+\n+    @Test\n+    public void testCombineFiltersWithAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+\n+        Domain firstDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"two\")));\n+        JdbcTableHandle filterResult = applyConstraint(session, baseTableHandle, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, firstDomain))));\n+\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, filterResult, groupByColumn);\n+\n+        Domain secondDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"three\")));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, secondDomain))));\n+        assertEquals(\n+                tableHandleWithFilter.getConstraint().getDomains(),\n+                Optional.of(ImmutableMap.of(groupByColumn, Domain.singleValue(VARCHAR, utf8Slice(\"one\")))));\n+    }\n+\n+    @Test\n+    public void testNonGroupKeyPredicatePushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n+        ColumnHandle groupByColumn = columnHandles.get(\"text\");\n+        ColumnHandle nonGroupByColumn = columnHandles.get(\"value\");\n+\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(BIGINT, 123L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDEwNjk0", "url": "https://github.com/trinodb/trino/pull/6007#pullrequestreview-536010694", "createdAt": "2020-11-21T21:42:12Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTo0MjoxMlrOH3xlPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTo0Mjo0MVrOH3xlaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NjA3OQ==", "bodyText": "remove the overrride, as the default is (and will be) true.", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r528246079", "createdAt": "2020-11-21T21:42:12Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcClient.java", "diffHunk": "@@ -37,7 +37,7 @@ public TestingH2JdbcClient(BaseJdbcConfig config, ConnectionFactory connectionFa\n     @Override\n     public boolean supportsGroupingSets()\n     {\n-        return false;\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NjEyMA==", "bodyText": "Edit: Seems fine\n\nsurprising to me, will take a look", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r528246120", "createdAt": "2020-11-21T21:42:41Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "diffHunk": "@@ -232,4 +246,84 @@ public void testDropTableTable()\n             assertEquals(e.getErrorCode(), NOT_FOUND.toErrorCode());\n         }\n     }\n+\n+    @Test\n+    public void testApplyFilterAfterAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(VARCHAR, utf8Slice(\"one\"));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, domain))));\n+\n+        assertEquals(tableHandleWithFilter.getConstraint().getDomains(), Optional.of(ImmutableMap.of(groupByColumn, domain)));\n+    }\n+\n+    @Test\n+    public void testCombineFiltersWithAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+\n+        Domain firstDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"two\")));\n+        JdbcTableHandle filterResult = applyConstraint(session, baseTableHandle, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, firstDomain))));\n+\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, filterResult, groupByColumn);\n+\n+        Domain secondDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"three\")));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, secondDomain))));\n+        assertEquals(\n+                tableHandleWithFilter.getConstraint().getDomains(),\n+                Optional.of(ImmutableMap.of(groupByColumn, Domain.singleValue(VARCHAR, utf8Slice(\"one\")))));\n+    }\n+\n+    @Test\n+    public void testNonGroupKeyPredicatePushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n+        ColumnHandle groupByColumn = columnHandles.get(\"text\");\n+        ColumnHandle nonGroupByColumn = columnHandles.get(\"value\");\n+\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(BIGINT, 123L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODU2MA=="}, "originalCommit": null, "originalPosition": 93}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3Mzg2NjY0", "url": "https://github.com/trinodb/trino/pull/6007#pullrequestreview-537386664", "createdAt": "2020-11-24T11:12:12Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce761c34c11e70b231e232c4619279f1952a33a", "author": {"user": {"login": "alexjo2144", "name": "Alexander Jo"}}, "url": "https://github.com/trinodb/trino/commit/fce761c34c11e70b231e232c4619279f1952a33a", "committedDate": "2020-11-24T20:52:21Z", "message": "Allow predicate pushdown after aggregation pushdown\n\nPredicates pushed down after aggregations must be on group by keys"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "fce761c34c11e70b231e232c4619279f1952a33a", "author": {"user": {"login": "alexjo2144", "name": "Alexander Jo"}}, "url": "https://github.com/trinodb/trino/commit/fce761c34c11e70b231e232c4619279f1952a33a", "committedDate": "2020-11-24T20:52:21Z", "message": "Allow predicate pushdown after aggregation pushdown\n\nPredicates pushed down after aggregations must be on group by keys"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDExMjE2", "url": "https://github.com/trinodb/trino/pull/6007#pullrequestreview-538011216", "createdAt": "2020-11-24T22:14:54Z", "commit": {"oid": "fce761c34c11e70b231e232c4619279f1952a33a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2629, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}