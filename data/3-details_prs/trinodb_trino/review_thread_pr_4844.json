{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjI1NTUw", "number": 4844, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzo1Mzo0N1rOEYpSbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDowNTo0OFrOEd6xlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc3NzQzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzo1Mzo0N1rOHBF-0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzo1Mzo0N1rOHBF-0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwODYyNA==", "bodyText": "This needs to use floorDiv, otherwise when epoch is negative it produces incorrect results.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r470908624", "createdAt": "2020-08-14T23:53:47Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -121,4 +122,16 @@ public String toString()\n     {\n         return formatTimestamp(precision, epochMicros, picosOfMicros);\n     }\n+\n+    /**\n+     * @return timestamp rounded to nanosecond precision\n+     */\n+    public LocalDateTime toLocalDateTime()\n+    {\n+        long epochSecond = epochMicros / MICROSECONDS_PER_SECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc4MTAyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzo1NjozMFrOHBGAzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMDoyODowN1rOHBNcuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwOTEzMg==", "bodyText": "NANOSECONDS_PER_MICROSECOND", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r470909132", "createdAt": "2020-08-14T23:56:30Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -121,4 +122,16 @@ public String toString()\n     {\n         return formatTimestamp(precision, epochMicros, picosOfMicros);\n     }\n+\n+    /**\n+     * @return timestamp rounded to nanosecond precision\n+     */\n+    public LocalDateTime toLocalDateTime()\n+    {\n+        long epochSecond = epochMicros / MICROSECONDS_PER_SECOND;\n+        int microOfSecond = toIntExact(epochMicros % MICROSECONDS_PER_SECOND);\n+        int nanoOfSecond = (microOfSecond * NANOSECONDS_PER_MILLISECOND) +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzMDk2OQ==", "bodyText": "Good catch. I had to add this constant. The tests had passed previously, so I think I originally used an inline constant and switched to the wrong named constant.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r471030969", "createdAt": "2020-08-15T20:28:07Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -121,4 +122,16 @@ public String toString()\n     {\n         return formatTimestamp(precision, epochMicros, picosOfMicros);\n     }\n+\n+    /**\n+     * @return timestamp rounded to nanosecond precision\n+     */\n+    public LocalDateTime toLocalDateTime()\n+    {\n+        long epochSecond = epochMicros / MICROSECONDS_PER_SECOND;\n+        int microOfSecond = toIntExact(epochMicros % MICROSECONDS_PER_SECOND);\n+        int nanoOfSecond = (microOfSecond * NANOSECONDS_PER_MILLISECOND) +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwOTEzMg=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc5MDAyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDowNDoxN1rOHBGGGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMDoyOToxMVrOHBNc8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMDQ5MA==", "bodyText": "You can use roundDiv(picosOfMicros, PICOSECONDS_PER_NANOSECOND) instead of round(picosOfMicros, 3) / PICOSECONDS_PER_NANOSECOND. Generally, I avoid using round() directly unless the expression has a clear indication of what the magnitude is (e.g, 12 - targetPrecision, etc). The 3 in this case is a relative magnitude between picoseconds and nanoseconds, but it's not immediately apparent.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r470910490", "createdAt": "2020-08-15T00:04:17Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -121,4 +122,16 @@ public String toString()\n     {\n         return formatTimestamp(precision, epochMicros, picosOfMicros);\n     }\n+\n+    /**\n+     * @return timestamp rounded to nanosecond precision\n+     */\n+    public LocalDateTime toLocalDateTime()\n+    {\n+        long epochSecond = epochMicros / MICROSECONDS_PER_SECOND;\n+        int microOfSecond = toIntExact(epochMicros % MICROSECONDS_PER_SECOND);\n+        int nanoOfSecond = (microOfSecond * NANOSECONDS_PER_MILLISECOND) +\n+                toIntExact(round(picosOfMicros, 3) / PICOSECONDS_PER_NANOSECOND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzMTAyNg==", "bodyText": "Yeah, this is more clear.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r471031026", "createdAt": "2020-08-15T20:29:11Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -121,4 +122,16 @@ public String toString()\n     {\n         return formatTimestamp(precision, epochMicros, picosOfMicros);\n     }\n+\n+    /**\n+     * @return timestamp rounded to nanosecond precision\n+     */\n+    public LocalDateTime toLocalDateTime()\n+    {\n+        long epochSecond = epochMicros / MICROSECONDS_PER_SECOND;\n+        int microOfSecond = toIntExact(epochMicros % MICROSECONDS_PER_SECOND);\n+        int nanoOfSecond = (microOfSecond * NANOSECONDS_PER_MILLISECOND) +\n+                toIntExact(round(picosOfMicros, 3) / PICOSECONDS_PER_NANOSECOND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMDQ5MA=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc5MzY1OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDowNzoxOVrOHBGIGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDowNzoxOVrOHBGIGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMTAwMA==", "bodyText": "This needs to use floorDiv", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r470911000", "createdAt": "2020-08-15T00:07:19Z", "author": {"login": "martint"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "diffHunk": "@@ -246,9 +247,9 @@ private static Block extractTimestamp(Block block, LongUnaryOperator function)\n                 builder.appendNull();\n                 continue;\n             }\n-            long value = TIMESTAMP.getLong(block, position);\n-            value = function.applyAsLong(value);\n-            INTEGER.writeLong(builder, value);\n+            long epochMillis = MICROSECONDS.toMillis(TIMESTAMP_MICROS.getLong(block, position));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc5NjI5OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/util/Timestamps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDowOTo1NFrOHBGJpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMDo0ODo1MVrOHBNi2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMTM5Ng==", "bodyText": "I'd add MICROSECONDS_PER_MILLISECOND to Timestamps and use it here.\nAlso, (timestamp.getPicosOfMilli() / PICOSECONDS_PER_MICROSECOND should round.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r470911396", "createdAt": "2020-08-15T00:09:54Z", "author": {"login": "martint"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/util/Timestamps.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg.util;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.TimeZoneKey;\n+import io.prestosql.spi.type.Type;\n+\n+import static io.prestosql.spi.type.TimestampType.createTimestampType;\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.createTimestampWithTimeZoneType;\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+import static java.lang.Math.toIntExact;\n+\n+public final class Timestamps\n+{\n+    public static final Type TIMESTAMP_MICROS = createTimestampType(6);\n+    public static final Type TIMESTAMP_TZ_MICROS = createTimestampWithTimeZoneType(6);\n+\n+    private Timestamps() {}\n+\n+    public static long toMicros(LongTimestampWithTimeZone timestamp)\n+    {\n+        return (timestamp.getEpochMillis() * 1000) + (timestamp.getPicosOfMilli() / PICOSECONDS_PER_MICROSECOND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzMjUzOA==", "bodyText": "This method is only used for Iceberg timestamps which have microsecond precision, so rounding is not a concern, but I'll change it since there's no downside to doing the calculation correctly.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r471032538", "createdAt": "2020-08-15T20:48:51Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/util/Timestamps.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg.util;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.TimeZoneKey;\n+import io.prestosql.spi.type.Type;\n+\n+import static io.prestosql.spi.type.TimestampType.createTimestampType;\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.createTimestampWithTimeZoneType;\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+import static java.lang.Math.toIntExact;\n+\n+public final class Timestamps\n+{\n+    public static final Type TIMESTAMP_MICROS = createTimestampType(6);\n+    public static final Type TIMESTAMP_TZ_MICROS = createTimestampWithTimeZoneType(6);\n+\n+    private Timestamps() {}\n+\n+    public static long toMicros(LongTimestampWithTimeZone timestamp)\n+    {\n+        return (timestamp.getEpochMillis() * 1000) + (timestamp.getPicosOfMilli() / PICOSECONDS_PER_MICROSECOND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMTM5Ng=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc5NzQzOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/util/Timestamps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoxMDozOFrOHBGKOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoxMDozOFrOHBGKOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMTU0NA==", "bodyText": "This needs to use floorDiv", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r470911544", "createdAt": "2020-08-15T00:10:38Z", "author": {"login": "martint"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/util/Timestamps.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg.util;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.TimeZoneKey;\n+import io.prestosql.spi.type.Type;\n+\n+import static io.prestosql.spi.type.TimestampType.createTimestampType;\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.createTimestampWithTimeZoneType;\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+import static java.lang.Math.toIntExact;\n+\n+public final class Timestamps\n+{\n+    public static final Type TIMESTAMP_MICROS = createTimestampType(6);\n+    public static final Type TIMESTAMP_TZ_MICROS = createTimestampWithTimeZoneType(6);\n+\n+    private Timestamps() {}\n+\n+    public static long toMicros(LongTimestampWithTimeZone timestamp)\n+    {\n+        return (timestamp.getEpochMillis() * 1000) + (timestamp.getPicosOfMilli() / PICOSECONDS_PER_MICROSECOND);\n+    }\n+\n+    public static LongTimestampWithTimeZone fromMicros(long epochMicros, TimeZoneKey timeZoneKey)\n+    {\n+        long epochMillis = epochMicros / 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc5ODAyOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/TimestampMicrosColumnReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoxMToyMlrOHBGKjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoxMToyMlrOHBGKjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMTYzMA==", "bodyText": "floorDiv", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r470911630", "createdAt": "2020-08-15T00:11:22Z", "author": {"login": "martint"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/TimestampMicrosColumnReader.java", "diffHunk": "@@ -34,13 +39,18 @@ public TimestampMicrosColumnReader(RichColumnDescriptor descriptor)\n     protected void readValue(BlockBuilder blockBuilder, Type type)\n     {\n         if (definitionLevel == columnDescriptor.getMaxDefinitionLevel()) {\n-            long utcMillis = MICROSECONDS.toMillis(valuesReader.readLong());\n+            long epochMicros = valuesReader.readLong();\n             // TODO: specialize the class at creation time\n-            if (type instanceof TimestampWithTimeZoneType) {\n-                type.writeLong(blockBuilder, packDateTimeWithZone(utcMillis, UTC_KEY));\n+            if (type.equals(TIMESTAMP_TYPE)) {\n+                type.writeLong(blockBuilder, epochMicros);\n+            }\n+            else if (type.equals(TIMESTAMP_WITH_TIME_ZONE_TYPE)) {\n+                long epochMillis = epochMicros / 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTQ3Mjk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/testing/MaterializedResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzoxMjo1NFrOHCTmew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTo1Nzo0OFrOHCbPlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE4MDM0Nw==", "bodyText": "Please see #4570 and 5bce33e\n@findepi wanted to avoid rounding there to make tests more strict.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r472180347", "createdAt": "2020-08-18T13:12:54Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/testing/MaterializedResult.java", "diffHunk": "@@ -382,7 +381,7 @@ else if (prestoValue instanceof SqlTimeWithTimeZone) {\n                         zone);\n             }\n             else if (prestoValue instanceof SqlTimestamp) {\n-                convertedValue = SqlTimestamp.JSON_FORMATTER.parse(prestoValue.toString(), LocalDateTime::from);\n+                convertedValue = ((SqlTimestamp) prestoValue).toLocalDateTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMwNTU1Nw==", "bodyText": "@findepi @martint I moved these commits to a separate PR #4875", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r472305557", "createdAt": "2020-08-18T15:57:48Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/testing/MaterializedResult.java", "diffHunk": "@@ -382,7 +381,7 @@ else if (prestoValue instanceof SqlTimeWithTimeZone) {\n                         zone);\n             }\n             else if (prestoValue instanceof SqlTimestamp) {\n-                convertedValue = SqlTimestamp.JSON_FORMATTER.parse(prestoValue.toString(), LocalDateTime::from);\n+                convertedValue = ((SqlTimestamp) prestoValue).toLocalDateTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE4MDM0Nw=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzcwMTc4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/OrcWriteValidation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo0Mjo0M1rOHJT6bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo0Mjo0M1rOHJT6bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyNTQ4Nw==", "bodyText": "consider adding functions for these and use a method reference", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479525487", "createdAt": "2020-08-28T20:42:43Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/OrcWriteValidation.java", "diffHunk": "@@ -677,8 +688,32 @@ else if (DATE.equals(type)) {\n                 fieldExtractor = ignored -> ImmutableList.of();\n                 fieldBuilders = ImmutableList.of();\n             }\n-            else if (TIMESTAMP.equals(type)) {\n-                statisticsBuilder = new TimestampStatisticsBuilder(new NoOpBloomFilterBuilder());\n+            else if (TIMESTAMP_MILLIS.equals(type)) {\n+                statisticsBuilder = new TimestampStatisticsBuilder(Type::getLong);\n+                fieldExtractor = ignored -> ImmutableList.of();\n+                fieldBuilders = ImmutableList.of();\n+            }\n+            else if (TIMESTAMP_MICROS.equals(type)) {\n+                statisticsBuilder = new TimestampStatisticsBuilder((blockType, block, position) ->\n+                        floorDiv(blockType.getLong(block, position), MICROSECONDS_PER_MILLISECOND));\n+                fieldExtractor = ignored -> ImmutableList.of();\n+                fieldBuilders = ImmutableList.of();\n+            }\n+            else if (TIMESTAMP_NANOS.equals(type)) {\n+                statisticsBuilder = new TimestampStatisticsBuilder((blockType, block, position) ->\n+                        floorDiv(((LongTimestamp) blockType.getObject(block, position)).getEpochMicros(), MICROSECONDS_PER_MILLISECOND));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzg2MDIyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/reader/TimestampColumnReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTo1MTowNFrOHJVY-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTo1MTowNFrOHJVY-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0OTY4OA==", "bodyText": "Maybe change to something like Adjust for bad ORC rounding logic", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479549688", "createdAt": "2020-08-28T21:51:04Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/reader/TimestampColumnReader.java", "diffHunk": "@@ -257,49 +329,342 @@ public String toString()\n                 .toString();\n     }\n \n-    // This comes from the Apache Hive ORC code\n-    private static long decodeTimestamp(long seconds, long serializedNanos, long baseTimestampInSeconds)\n+    @Override\n+    public void close()\n+    {\n+        systemMemoryContext.close();\n+    }\n+\n+    @Override\n+    public long getRetainedSizeInBytes()\n+    {\n+        return INSTANCE_SIZE;\n+    }\n+\n+    @SuppressWarnings(\"ObjectEquality\")\n+    private boolean isFileUtc()\n+    {\n+        return fileDateTimeZone == DateTimeZone.UTC;\n+    }\n+\n+    private int decodeNanos(long serialized)\n+            throws IOException\n+    {\n+        // the last three bits encode the leading zeros removed minus one\n+        int zeros = (int) (serialized & 0b111);\n+        int nanos = (int) (serialized >>> 3);\n+        if (zeros > 0) {\n+            nanos *= POWERS_OF_TEN[zeros + 1];\n+        }\n+        if ((nanos < 0) || (nanos > 999_999_999)) {\n+            throw new OrcCorruptionException(column.getOrcDataSourceId(), \"Nanos field of timestamp is out of range: %s\", nanos);\n+        }\n+        return nanos;\n+    }\n+\n+    // TIMESTAMP MILLIS\n+\n+    private Block readNonNullTimestampMillis()\n+            throws IOException\n     {\n+        long[] millis = new long[nextBatchSize];\n+        for (int i = 0; i < nextBatchSize; i++) {\n+            millis[i] = readTimestampMillis();\n+        }\n+        return new LongArrayBlock(nextBatchSize, Optional.empty(), millis);\n+    }\n+\n+    private Block readNullTimestampMillis(boolean[] isNull)\n+            throws IOException\n+    {\n+        long[] millis = new long[isNull.length];\n+        for (int i = 0; i < isNull.length; i++) {\n+            if (!isNull[i]) {\n+                millis[i] = readTimestampMillis();\n+            }\n+        }\n+        return new LongArrayBlock(isNull.length, Optional.of(isNull), millis);\n+    }\n+\n+    private long readTimestampMillis()\n+            throws IOException\n+    {\n+        long seconds = secondsStream.next();\n+        long serializedNanos = nanosStream.next();\n+\n         long millis = (seconds + baseTimestampInSeconds) * MILLIS_PER_SECOND;\n-        long nanos = parseNanos(serializedNanos);\n-        if (nanos > 999999999 || nanos < 0) {\n-            throw new IllegalArgumentException(\"nanos field of an encoded timestamp in ORC must be between 0 and 999999999 inclusive, got \" + nanos);\n+        long nanos = decodeNanos(serializedNanos);\n+\n+        if (nanos != 0) {\n+            // fix ORC rounding", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 354}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzk5NzAxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimestampColumnWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzoxMDowOVrOHJWnFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzoxMDowOVrOHJWnFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2OTY4NQ==", "bodyText": "Maybe move this below the other methods.  Also it is a little strange that it has the value in two forms.  I'd consider inlining the stats record in the caller... not sure if that would be better.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479569685", "createdAt": "2020-08-28T23:10:09Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimestampColumnWriter.java", "diffHunk": "@@ -261,4 +317,108 @@ public void reset()\n         rowGroupColumnStatistics.clear();\n         statisticsBuilder = statisticsBuilderSupplier.get();\n     }\n+\n+    private void writeMillis(long millis)\n+    {\n+        long seconds = millis / MILLISECONDS_PER_SECOND;\n+        long millisFraction = floorMod(millis, MILLISECONDS_PER_SECOND);\n+        long nanosFraction = millisFraction * NANOSECONDS_PER_MILLISECOND;\n+\n+        writeValues(millis, seconds, nanosFraction);\n+    }\n+\n+    private void writeValues(long millis, long seconds, long nanosFraction)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODAyMzk3OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/util/Timestamps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzozMDozNFrOHJW2Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzo0Mzo0N1rOHJXANg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MzU3MA==", "bodyText": "This should be named something like getTimestampWithTimeZone.. I found the usage above very confusing", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479573570", "createdAt": "2020-08-28T23:30:34Z", "author": {"login": "dain"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/util/Timestamps.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg.util;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.TimeZoneKey;\n+\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.TIMESTAMP_TZ_MICROS;\n+import static io.prestosql.spi.type.Timestamps.MICROSECONDS_PER_MILLISECOND;\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+import static io.prestosql.spi.type.Timestamps.roundDiv;\n+import static java.lang.Math.floorDiv;\n+import static java.lang.Math.floorMod;\n+\n+public final class Timestamps\n+{\n+    private Timestamps() {}\n+\n+    public static long toMicros(LongTimestampWithTimeZone timestamp)\n+    {\n+        return (timestamp.getEpochMillis() * MICROSECONDS_PER_MILLISECOND) +\n+                roundDiv(timestamp.getPicosOfMilli(), PICOSECONDS_PER_MICROSECOND);\n+    }\n+\n+    public static LongTimestampWithTimeZone fromMicros(long epochMicros, TimeZoneKey timeZoneKey)\n+    {\n+        long epochMillis = floorDiv(epochMicros, MICROSECONDS_PER_MILLISECOND);\n+        int picosOfMillis = floorMod(epochMicros, MICROSECONDS_PER_MILLISECOND) * PICOSECONDS_PER_MICROSECOND;\n+        return LongTimestampWithTimeZone.fromEpochMillisAndFraction(epochMillis, picosOfMillis, timeZoneKey);\n+    }\n+\n+    public static LongTimestampWithTimeZone getTimestamp(Block block, int position)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NjExOA==", "bodyText": "Actually, same with class name and other methods", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479576118", "createdAt": "2020-08-28T23:43:47Z", "author": {"login": "dain"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/util/Timestamps.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg.util;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.TimeZoneKey;\n+\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.TIMESTAMP_TZ_MICROS;\n+import static io.prestosql.spi.type.Timestamps.MICROSECONDS_PER_MILLISECOND;\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+import static io.prestosql.spi.type.Timestamps.roundDiv;\n+import static java.lang.Math.floorDiv;\n+import static java.lang.Math.floorMod;\n+\n+public final class Timestamps\n+{\n+    private Timestamps() {}\n+\n+    public static long toMicros(LongTimestampWithTimeZone timestamp)\n+    {\n+        return (timestamp.getEpochMillis() * MICROSECONDS_PER_MILLISECOND) +\n+                roundDiv(timestamp.getPicosOfMilli(), PICOSECONDS_PER_MICROSECOND);\n+    }\n+\n+    public static LongTimestampWithTimeZone fromMicros(long epochMicros, TimeZoneKey timeZoneKey)\n+    {\n+        long epochMillis = floorDiv(epochMicros, MICROSECONDS_PER_MILLISECOND);\n+        int picosOfMillis = floorMod(epochMicros, MICROSECONDS_PER_MILLISECOND) * PICOSECONDS_PER_MICROSECOND;\n+        return LongTimestampWithTimeZone.fromEpochMillisAndFraction(epochMillis, picosOfMillis, timeZoneKey);\n+    }\n+\n+    public static LongTimestampWithTimeZone getTimestamp(Block block, int position)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MzU3MA=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODA0NTk5OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetWriters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzo0NjoyN1rOHJXCKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDozMzo0OFrOHJXgJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NjYxOA==", "bodyText": "Is there no TIMESTAMP_TZ_MILLIS?", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479576618", "createdAt": "2020-08-28T23:46:27Z", "author": {"login": "dain"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetWriters.java", "diffHunk": "@@ -174,8 +175,21 @@ private static PrimitiveValueWriter getValueWriter(ValuesWriter valuesWriter, Ty\n         if (DATE.equals(type)) {\n             return new DateValueWriter(valuesWriter, parquetType);\n         }\n-        if (TIMESTAMP.equals(type)) {\n-            return new TimestampValueWriter(valuesWriter, type, parquetType);\n+        if (TIME_MICROS.equals(type)) {\n+            verifyParquetType(type, parquetType, OriginalType.TIME_MICROS);\n+            return new TimeMicrosValueWriter(valuesWriter, type, parquetType);\n+        }\n+        if (TIMESTAMP_MILLIS.equals(type)) {\n+            verifyParquetType(type, parquetType, OriginalType.TIMESTAMP_MILLIS);\n+            return new BigintValueWriter(valuesWriter, type, parquetType);\n+        }\n+        if (TIMESTAMP_MICROS.equals(type)) {\n+            verifyParquetType(type, parquetType, OriginalType.TIMESTAMP_MICROS);\n+            return new BigintValueWriter(valuesWriter, type, parquetType);\n+        }\n+        if (TIMESTAMP_TZ_MICROS.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4NDI5NA==", "bodyText": "I didn't bother since we won't need that until we support timestamp with time zone in Hive, but I can add that now.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479584294", "createdAt": "2020-08-29T00:33:48Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetWriters.java", "diffHunk": "@@ -174,8 +175,21 @@ private static PrimitiveValueWriter getValueWriter(ValuesWriter valuesWriter, Ty\n         if (DATE.equals(type)) {\n             return new DateValueWriter(valuesWriter, parquetType);\n         }\n-        if (TIMESTAMP.equals(type)) {\n-            return new TimestampValueWriter(valuesWriter, type, parquetType);\n+        if (TIME_MICROS.equals(type)) {\n+            verifyParquetType(type, parquetType, OriginalType.TIME_MICROS);\n+            return new TimeMicrosValueWriter(valuesWriter, type, parquetType);\n+        }\n+        if (TIMESTAMP_MILLIS.equals(type)) {\n+            verifyParquetType(type, parquetType, OriginalType.TIMESTAMP_MILLIS);\n+            return new BigintValueWriter(valuesWriter, type, parquetType);\n+        }\n+        if (TIMESTAMP_MICROS.equals(type)) {\n+            verifyParquetType(type, parquetType, OriginalType.TIMESTAMP_MICROS);\n+            return new BigintValueWriter(valuesWriter, type, parquetType);\n+        }\n+        if (TIMESTAMP_TZ_MICROS.equals(type)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NjYxOA=="}, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODA2ODg5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimestampColumnWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDowNDozOFrOHJXOuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDoyNjoxOVrOHJXbpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3OTgzMw==", "bodyText": "Is millis an epoch-based value? This needs to be floorDiv, then.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479579833", "createdAt": "2020-08-29T00:04:38Z", "author": {"login": "martint"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimestampColumnWriter.java", "diffHunk": "@@ -261,4 +317,108 @@ public void reset()\n         rowGroupColumnStatistics.clear();\n         statisticsBuilder = statisticsBuilderSupplier.get();\n     }\n+\n+    private void writeMillis(long millis)\n+    {\n+        long seconds = millis / MILLISECONDS_PER_SECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4MzE0Mw==", "bodyText": "This is a flaw in the ORC encoding, as explained in the comment at the top of this class. I'll add a separate comment to each of the instances so it is obvious this is not a bug.", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479583143", "createdAt": "2020-08-29T00:26:19Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimestampColumnWriter.java", "diffHunk": "@@ -261,4 +317,108 @@ public void reset()\n         rowGroupColumnStatistics.clear();\n         statisticsBuilder = statisticsBuilderSupplier.get();\n     }\n+\n+    private void writeMillis(long millis)\n+    {\n+        long seconds = millis / MILLISECONDS_PER_SECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3OTgzMw=="}, "originalCommit": null, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODA3MTI0OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimestampColumnWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDowNTo0OFrOHJXP2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDowNTo0OFrOHJXP2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4MDEyMw==", "bodyText": "floorDiv", "url": "https://github.com/trinodb/trino/pull/4844#discussion_r479580123", "createdAt": "2020-08-29T00:05:48Z", "author": {"login": "martint"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimestampColumnWriter.java", "diffHunk": "@@ -261,4 +317,108 @@ public void reset()\n         rowGroupColumnStatistics.clear();\n         statisticsBuilder = statisticsBuilderSupplier.get();\n     }\n+\n+    private void writeMillis(long millis)\n+    {\n+        long seconds = millis / MILLISECONDS_PER_SECOND;\n+        long millisFraction = floorMod(millis, MILLISECONDS_PER_SECOND);\n+        long nanosFraction = millisFraction * NANOSECONDS_PER_MILLISECOND;\n+\n+        writeValues(millis, seconds, nanosFraction);\n+    }\n+\n+    private void writeValues(long millis, long seconds, long nanosFraction)\n+    {\n+        secondsStream.writeLong(seconds - ORC_EPOCH_IN_SECONDS);\n+        nanosStream.writeLong(encodeNanos(nanosFraction));\n+        statisticsBuilder.addValue(millis);\n+    }\n+\n+    private void writeTimestampMillis(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            if (!block.isNull(i)) {\n+                writeMillis(type.getLong(block, i));\n+            }\n+        }\n+    }\n+\n+    private void writeTimestampMicros(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            if (!block.isNull(i)) {\n+                long micros = type.getLong(block, i);\n+\n+                long seconds = micros / MICROSECONDS_PER_SECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 220}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3467, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}