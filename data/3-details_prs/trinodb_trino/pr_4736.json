{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NjI1NTg2", "number": 4736, "title": "Possibility to lowercase/uppercase matched user name", "bodyText": "", "createdAt": "2020-08-07T14:07:20Z", "url": "https://github.com/trinodb/trino/pull/4736", "merged": true, "mergeCommit": {"oid": "2682f7786e1e7b543e46cca6c6d074fab9140185"}, "closed": true, "closedAt": "2020-08-31T12:57:02Z", "author": {"login": "iirekm"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8yFhCgFqTQ2MzcxOTY5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEQMIkAH2gAyNDY0NjI1NTg2OmY2ZTE2MzJhYzEyOWVhOGM4MmYyMzEyNTUwNmUxN2EzYTg5MjQ0Yzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzE5Njk5", "url": "https://github.com/trinodb/trino/pull/4736#pullrequestreview-463719699", "createdAt": "2020-08-08T05:19:47Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNToxOTo0N1rOG9tpjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNToyMjozOFrOG9tqtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2NDIzNw==", "bodyText": "Case? Like class.", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r467364237", "createdAt": "2020-08-08T05:19:47Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/UserMapping.java", "diffHunk": "@@ -84,33 +86,57 @@ public UserMappingRules(\n         }\n     }\n \n+    enum Case\n+    {\n+        KEEP(Function.identity()),\n+        LOWER(value -> value.toLowerCase(Locale.ENGLISH)),\n+        UPPER(value -> value.toUpperCase(Locale.ENGLISH)),\n+        /**/;\n+\n+        private final Function<String, String> transformation;\n+\n+        Case(Function<String, String> transformation)\n+        {\n+            this.transformation = requireNonNull(transformation, \"transformation is null\");\n+        }\n+\n+        public final String transform(String value)\n+        {\n+            return transformation.apply(value);\n+        }\n+    }\n+\n     public static final class Rule\n     {\n         private final Pattern pattern;\n         private final String user;\n         private final boolean allow;\n+        private final Case kase;\n \n         public Rule(String pattern)\n         {\n-            this(pattern, \"$1\", true);\n+            this(pattern, \"$1\", true, Case.KEEP);\n         }\n \n         @JsonCreator\n         public Rule(\n                 @JsonProperty(\"pattern\") String pattern,\n                 @JsonProperty(\"user\") Optional<String> user,\n-                @JsonProperty(\"allow\") Optional<Boolean> allow)\n+                @JsonProperty(\"allow\") Optional<Boolean> allow,\n+                @JsonProperty(\"case\") Optional<Case> kase)\n         {\n             this(pattern,\n                     requireNonNull(user, \"user is null\").orElse(\"$1\"),\n-                    requireNonNull(allow, \"allow is null\").orElse(TRUE));\n+                    requireNonNull(allow, \"allow is null\").orElse(TRUE),\n+                    requireNonNull(kase, \"kase is null\").orElse(Case.KEEP));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2NDQwMw==", "bodyText": "Use require non null", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r467364403", "createdAt": "2020-08-08T05:21:11Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/UserMapping.java", "diffHunk": "@@ -84,33 +86,57 @@ public UserMappingRules(\n         }\n     }\n \n+    enum Case\n+    {\n+        KEEP(Function.identity()),\n+        LOWER(value -> value.toLowerCase(Locale.ENGLISH)),\n+        UPPER(value -> value.toUpperCase(Locale.ENGLISH)),\n+        /**/;\n+\n+        private final Function<String, String> transformation;\n+\n+        Case(Function<String, String> transformation)\n+        {\n+            this.transformation = requireNonNull(transformation, \"transformation is null\");\n+        }\n+\n+        public final String transform(String value)\n+        {\n+            return transformation.apply(value);\n+        }\n+    }\n+\n     public static final class Rule\n     {\n         private final Pattern pattern;\n         private final String user;\n         private final boolean allow;\n+        private final Case kase;\n \n         public Rule(String pattern)\n         {\n-            this(pattern, \"$1\", true);\n+            this(pattern, \"$1\", true, Case.KEEP);\n         }\n \n         @JsonCreator\n         public Rule(\n                 @JsonProperty(\"pattern\") String pattern,\n                 @JsonProperty(\"user\") Optional<String> user,\n-                @JsonProperty(\"allow\") Optional<Boolean> allow)\n+                @JsonProperty(\"allow\") Optional<Boolean> allow,\n+                @JsonProperty(\"case\") Optional<Case> kase)\n         {\n             this(pattern,\n                     requireNonNull(user, \"user is null\").orElse(\"$1\"),\n-                    requireNonNull(allow, \"allow is null\").orElse(TRUE));\n+                    requireNonNull(allow, \"allow is null\").orElse(TRUE),\n+                    requireNonNull(kase, \"kase is null\").orElse(Case.KEEP));\n         }\n \n-        public Rule(String pattern, String user, boolean allow)\n+        public Rule(String pattern, String user, boolean allow, Case kase)\n         {\n             this.pattern = Pattern.compile(requireNonNull(pattern, \"pattern is null\"));\n             this.user = requireNonNull(user, \"user is null\");\n             this.allow = allow;\n+            this.kase = kase;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2NDUzMw==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r467364533", "createdAt": "2020-08-08T05:22:38Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/server/security/TestUserMapping.java", "diffHunk": "@@ -70,29 +70,29 @@ public void testSimplePatternRule()\n     public void testReplacePatternRule()\n             throws Exception\n     {\n-        UserMapping userMapping = new UserMapping(ImmutableList.of(new Rule(\"(.*?)@.*\", \"$1 ^ $1\", true)));\n+        UserMapping userMapping = new UserMapping(ImmutableList.of(new Rule(\"(.*?)@.*\", \"$1 ^ $1\", true, UserMapping.Case.KEEP)));\n         assertEquals(userMapping.mapUser(\"test@example.com\"), \"test ^ test\");\n         assertThrows(UserMappingException.class, () -> userMapping.mapUser(\"no at sign\"));\n \n-        UserMapping emptyMapping = new UserMapping(ImmutableList.of(new Rule(\"(.*?)@.*\", \"  \", true)));\n+        UserMapping emptyMapping = new UserMapping(ImmutableList.of(new Rule(\"(.*?)@.*\", \"  \", true, UserMapping.Case.KEEP)));\n         assertThrows(UserMappingException.class, () -> emptyMapping.mapUser(\"test@example.com\"));\n     }\n \n     @Test\n     public void testNotAllowedRule()\n     {\n-        UserMapping userMapping = new UserMapping(ImmutableList.of(new Rule(\"(.*?)@.*\", \"$1\", false)));\n+        UserMapping userMapping = new UserMapping(ImmutableList.of(new Rule(\"(.*?)@.*\", \"$1\", false, UserMapping.Case.KEEP)));\n         assertThrows(UserMappingException.class, () -> userMapping.mapUser(\"test@example.com\"));\n \n-        UserMapping emptyMapping = new UserMapping(ImmutableList.of(new Rule(\"(.*?)@.*\", \"\", false)));\n+        UserMapping emptyMapping = new UserMapping(ImmutableList.of(new Rule(\"(.*?)@.*\", \"\", false, UserMapping.Case.KEEP)));\n         assertThrows(UserMappingException.class, () -> emptyMapping.mapUser(\"test@example.com\"));\n     }\n \n     @Test\n     public void testMultipleRule()\n             throws Exception\n     {\n-        UserMapping userMapping = new UserMapping(ImmutableList.of(new Rule(\"test@example.com\", \"\", false), new Rule(\"(.*?)@example.com\")));\n+        UserMapping userMapping = new UserMapping(ImmutableList.of(new Rule(\"test@example.com\", \"\", false, UserMapping.Case.KEEP), new Rule(\"(.*?)@example.com\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzE5ODU4", "url": "https://github.com/trinodb/trino/pull/4736#pullrequestreview-463719858", "createdAt": "2020-08-08T05:23:18Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNToyMzoxOFrOG9tq2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNToyMzoxOFrOG9tq2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2NDU2OQ==", "bodyText": "We also need to update documentation", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r467364569", "createdAt": "2020-08-08T05:23:18Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/UserMapping.java", "diffHunk": "@@ -84,33 +86,57 @@ public UserMappingRules(\n         }\n     }\n \n+    enum Case\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODIyNTc1", "url": "https://github.com/trinodb/trino/pull/4736#pullrequestreview-463822575", "createdAt": "2020-08-08T19:27:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToyNzowNlrOG91t5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToyNzowNlrOG91t5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjQyMA==", "bodyText": "Alternatively, capitalization", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r467496420", "createdAt": "2020-08-08T19:27:06Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/server/security/UserMapping.java", "diffHunk": "@@ -84,33 +86,57 @@ public UserMappingRules(\n         }\n     }\n \n+    enum Case\n+    {\n+        KEEP(Function.identity()),\n+        LOWER(value -> value.toLowerCase(Locale.ENGLISH)),\n+        UPPER(value -> value.toUpperCase(Locale.ENGLISH)),\n+        /**/;\n+\n+        private final Function<String, String> transformation;\n+\n+        Case(Function<String, String> transformation)\n+        {\n+            this.transformation = requireNonNull(transformation, \"transformation is null\");\n+        }\n+\n+        public final String transform(String value)\n+        {\n+            return transformation.apply(value);\n+        }\n+    }\n+\n     public static final class Rule\n     {\n         private final Pattern pattern;\n         private final String user;\n         private final boolean allow;\n+        private final Case kase;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NzA3ODM3", "url": "https://github.com/trinodb/trino/pull/4736#pullrequestreview-466707837", "createdAt": "2020-08-13T12:21:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjoyMTozOVrOHAJCKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjoyMTozOVrOHAJCKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkxMDA1Ng==", "bodyText": "Please extract this to separate commit and add a test for that.", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r469910056", "createdAt": "2020-08-13T12:21:39Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/util/JsonUtils.java", "diffHunk": "@@ -42,7 +43,8 @@ private JsonUtils() {}\n         try {\n             byte[] json = Files.readAllBytes(path);\n             ObjectMapper mapper = new ObjectMapperProvider().get()\n-                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n+                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzA3MjMx", "url": "https://github.com/trinodb/trino/pull/4736#pullrequestreview-467707231", "createdAt": "2020-08-14T16:22:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoyMjo1N1rOHA602A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MDo0M1rOHA7rLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyNTg0OA==", "bodyText": "Let's call the variables userCase everywhere instead of using a misspelling. (the JSON property name can stay as case)", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r470725848", "createdAt": "2020-08-14T16:22:57Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/security/UserMapping.java", "diffHunk": "@@ -84,33 +86,57 @@ public UserMappingRules(\n         }\n     }\n \n+    enum Case\n+    {\n+        KEEP(Function.identity()),\n+        LOWER(value -> value.toLowerCase(Locale.ENGLISH)),\n+        UPPER(value -> value.toUpperCase(Locale.ENGLISH)),\n+        /**/;\n+\n+        private final Function<String, String> transformation;\n+\n+        Case(Function<String, String> transformation)\n+        {\n+            this.transformation = requireNonNull(transformation, \"transformation is null\");\n+        }\n+\n+        public final String transform(String value)\n+        {\n+            return transformation.apply(value);\n+        }\n+    }\n+\n     public static final class Rule\n     {\n         private final Pattern pattern;\n         private final String user;\n         private final boolean allow;\n+        private final Case kase;\n \n         public Rule(String pattern)\n         {\n-            this(pattern, \"$1\", true);\n+            this(pattern, \"$1\", true, Case.KEEP);\n         }\n \n         @JsonCreator\n         public Rule(\n                 @JsonProperty(\"pattern\") String pattern,\n                 @JsonProperty(\"user\") Optional<String> user,\n-                @JsonProperty(\"allow\") Optional<Boolean> allow)\n+                @JsonProperty(\"allow\") Optional<Boolean> allow,\n+                @JsonProperty(\"case\") Optional<Case> kase)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyNjg0MA==", "bodyText": "No need for this here, unless we think we will be adding more later. The purpose of this construct is to have cleaner diffs when adding future items (as the previously last item won't be disturbed).", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r470726840", "createdAt": "2020-08-14T16:24:52Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/security/UserMapping.java", "diffHunk": "@@ -84,33 +86,57 @@ public UserMappingRules(\n         }\n     }\n \n+    enum Case\n+    {\n+        KEEP(Function.identity()),\n+        LOWER(value -> value.toLowerCase(Locale.ENGLISH)),\n+        UPPER(value -> value.toUpperCase(Locale.ENGLISH)),\n+        /**/;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyOTE2Nw==", "bodyText": "No need for final, since enums are sealed", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r470729167", "createdAt": "2020-08-14T16:29:40Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/security/UserMapping.java", "diffHunk": "@@ -84,33 +86,57 @@ public UserMappingRules(\n         }\n     }\n \n+    enum Case\n+    {\n+        KEEP(Function.identity()),\n+        LOWER(value -> value.toLowerCase(Locale.ENGLISH)),\n+        UPPER(value -> value.toUpperCase(Locale.ENGLISH)),\n+        /**/;\n+\n+        private final Function<String, String> transformation;\n+\n+        Case(Function<String, String> transformation)\n+        {\n+            this.transformation = requireNonNull(transformation, \"transformation is null\");\n+        }\n+\n+        public final String transform(String value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyOTgwNg==", "bodyText": "Consider the simpler (albeit slightly longer) pattern of implementing a method (the IDE folds it nicely)\nenum Case\n{\n    KEEP {\n        @Override\n        public String transform(String value)\n        {\n            return value;\n        }\n    },\n    LOWER {\n        @Override\n        public String transform(String value)\n        {\n            return value.toLowerCase(Locale.ENGLISH);\n        }\n    },\n    UPPER {\n        @Override\n        public String transform(String value)\n        {\n            return value.toLowerCase(Locale.ENGLISH);\n        }\n    };\n\n    public abstract String transform(String value);\n}", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r470729806", "createdAt": "2020-08-14T16:30:53Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/security/UserMapping.java", "diffHunk": "@@ -84,33 +86,57 @@ public UserMappingRules(\n         }\n     }\n \n+    enum Case\n+    {\n+        KEEP(Function.identity()),\n+        LOWER(value -> value.toLowerCase(Locale.ENGLISH)),\n+        UPPER(value -> value.toUpperCase(Locale.ENGLISH)),\n+        /**/;\n+\n+        private final Function<String, String> transformation;\n+\n+        Case(Function<String, String> transformation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczOTc1Nw==", "bodyText": "Thanks for documenting this. Some comments:\n\nList items need to be indented two spaces. The extra indentation causes it to be treated as a quoted block.\nUse * for list items to be consistent with the other list items (above).\nThe \"default value\" text below is hard to see, since it's not aligned with the list. We can make it part of the first list item.\ne.g. means \"for example\" and thus should have a comma afterwards\nThe lower/upper items are long enough to wrap in the default HTML rendering, which makes them harder to read. We can shorten them a bit so that they don't wrap.\n\nHere's the result of the above changes:\n* ``case`` (optional): one of:\n\n  * ``keep`` - keep matched user name as is (default behavior)\n  * ``lower`` - lowercase matched user name, e.g., ``Admin`` or ``ADMIN`` will become ``admin``\n  * ``upper`` - uppercase matched user name, e.g., ``admin`` or ``Admin`` will become ``ADMIN``\n\nRendered HTML:", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r470739757", "createdAt": "2020-08-14T16:50:43Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/security/user-mapping.rst", "diffHunk": "@@ -41,6 +41,13 @@ following fields:\n * ``user`` (optional): replacement string to substitute against pattern.\n   The default value is ``$1``.\n * ``allow`` (optional): boolean indicating if the authentication should be allowed.\n+* ``case`` (optional): one of:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMjU4NTI5", "url": "https://github.com/trinodb/trino/pull/4736#pullrequestreview-472258529", "createdAt": "2020-08-21T07:15:56Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxNTo1NlrOHEep6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxNzoxMFrOHEetlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1ODYwMg==", "bodyText": "nice syntax, I haven't used enums that way.", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r474458602", "createdAt": "2020-08-21T07:15:56Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/UserMapping.java", "diffHunk": "@@ -84,33 +86,64 @@ public UserMappingRules(\n         }\n     }\n \n+    enum Case\n+    {\n+        KEEP {\n+            @Override\n+            public String transform(String value)\n+            {\n+                return value;\n+            }\n+        },\n+        LOWER {\n+            @Override\n+            public String transform(String value)\n+            {\n+                return value.toLowerCase(ENGLISH);\n+            }\n+        },\n+        UPPER {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1OTM1NQ==", "bodyText": "Please extract this to separate commit.", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r474459355", "createdAt": "2020-08-21T07:16:53Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/util/JsonUtils.java", "diffHunk": "@@ -41,12 +43,20 @@ private JsonUtils() {}\n \n         try {\n             byte[] json = Files.readAllBytes(path);\n-            ObjectMapper mapper = new ObjectMapperProvider().get()\n-                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n-            return mapper.readValue(json, javaType);\n+            return parseJson(json, javaType);\n         }\n         catch (IOException e) {\n             throw new IllegalArgumentException(format(\"Invalid JSON file '%s' for '%s'\", path, javaType), e);\n         }\n     }\n+\n+    @VisibleForTesting\n+    static <T> T parseJson(byte[] jsonBytes, Class<T> javaType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1OTU0Mg==", "bodyText": "please also test mixed and upper case.", "url": "https://github.com/trinodb/trino/pull/4736#discussion_r474459542", "createdAt": "2020-08-21T07:17:10Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/util/TestJsonUtils.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.util;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+\n+import static io.prestosql.plugin.base.util.JsonUtils.parseJson;\n+import static io.prestosql.plugin.base.util.TestJsonUtils.TestEnum.OPTION_A;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestJsonUtils\n+{\n+    enum TestEnum\n+    {\n+        OPTION_A,\n+        OPTION_B\n+    }\n+\n+    public static class TestObject\n+    {\n+        @JsonProperty\n+        private TestEnum testEnum;\n+    }\n+\n+    @Test\n+    public void testLowercaseEnum()\n+            throws IOException\n+    {\n+        TestObject parsed = parseJson(\"{\\\"testEnum\\\": \\\"option_a\\\"}\".getBytes(US_ASCII), TestObject.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDA2MTky", "url": "https://github.com/trinodb/trino/pull/4736#pullrequestreview-474406192", "createdAt": "2020-08-25T11:55:43Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e3e83005dc54a8a644869e56d6caae48125ab60", "author": {"user": null}, "url": "https://github.com/trinodb/trino/commit/2e3e83005dc54a8a644869e56d6caae48125ab60", "committedDate": "2020-08-31T10:24:40Z", "message": "Configure Jackson to parse enums from lowercase strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e1632ac129ea8c82f23125506e17a3a89244c8", "author": {"user": null}, "url": "https://github.com/trinodb/trino/commit/f6e1632ac129ea8c82f23125506e17a3a89244c8", "committedDate": "2020-08-31T10:24:40Z", "message": "Possibility to lowercase/uppercase matched user name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4283, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}