{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2Nzk3NTE4", "number": 5039, "title": "Cleanup file access control", "bodyText": "", "createdAt": "2020-09-01T04:22:12Z", "url": "https://github.com/trinodb/trino/pull/5039", "merged": true, "mergeCommit": {"oid": "9e6e36fc2dd74a36ff2e0a53edb3fa7a39f613a0"}, "closed": true, "closedAt": "2020-10-07T02:27:09Z", "author": {"login": "dain"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdElJD5gFqTQ3OTYyMjYzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQB1ExABqjM4NDgwNjA0MjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NjIyNjM1", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-479622635", "createdAt": "2020-09-01T10:48:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo0ODoyN1rOHKw1GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo0ODoyN1rOHKw1GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0NzgzMg==", "bodyText": "why this is better? I would undo this change. It is more clear to use domain objects like schema name here instead of toString() representation (which is not intuitive that it is designed for UX message)", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r481047832", "createdAt": "2020-09-01T10:48:27Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -384,15 +384,15 @@ public void checkCanCreateSchema(SystemSecurityContext context, CatalogSchemaNam\n     public void checkCanDropSchema(SystemSecurityContext context, CatalogSchemaName schema)\n     {\n         if (!isSchemaOwner(context, schema)) {\n-            denyDropSchema(schema.getSchemaName());\n+            denyDropSchema(schema.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzAxNjQx", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-480701641", "createdAt": "2020-09-02T10:50:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDo1MDowMVrOHLplaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDo1NDozOFrOHLpvOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NzcwNw==", "bodyText": "you need to also check if user has any access to the schema", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r481977707", "createdAt": "2020-09-02T10:50:01Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -169,7 +170,9 @@ public void checkCanShowTables(ConnectorSecurityContext context, String schemaNa\n     @Override\n     public Set<SchemaTableName> filterTables(ConnectorSecurityContext context, Set<SchemaTableName> tableNames)\n     {\n-        return tableNames;\n+        return tableNames.stream()\n+                .filter(tableName -> checkAnyTablePermission(context, tableName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3Nzg3NQ==", "bodyText": "you need to also check if user has any full access to the schema or catalog", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r481977875", "createdAt": "2020-09-02T10:50:17Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -485,11 +485,9 @@ public void checkCanShowTables(SystemSecurityContext context, CatalogSchemaName\n     @Override\n     public Set<SchemaTableName> filterTables(SystemSecurityContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n-        if (!canAccessCatalog(context.getIdentity(), catalogName, READ_ONLY)) {\n-            return ImmutableSet.of();\n-        }\n-\n-        return tableNames;\n+        return tableNames.stream()\n+                .filter(tableName -> checkAnyTablePermission(context, new CatalogSchemaTableName(catalogName, tableName)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4MDIxNg==", "bodyText": "I would remove it from here and possibly rename it to CatalogAccessRulePattern. Then basing on CatalogAccessRulePattern and SchemaAccessRulePattern I would build CatalogSchemaAccessControlRule. No setters and partially build objects.", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r481980216", "createdAt": "2020-09-02T10:54:38Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/CatalogSchemaAccessControlRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.security;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import io.prestosql.spi.connector.CatalogSchemaName;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CatalogSchemaAccessControlRule\n+{\n+    private final Optional<Pattern> catalogRegex;\n+    private SchemaAccessControlRule schemaAccessControlRule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMjQxMTIy", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-481241122", "createdAt": "2020-09-02T19:38:04Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "5e2da1abd05f27e81a87985f5959b0b653e6da71", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/5e2da1abd05f27e81a87985f5959b0b653e6da71", "committedDate": "2020-09-03T00:50:07Z", "message": "Add catalog regex to schema and table rules in file system access control"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e2da1abd05f27e81a87985f5959b0b653e6da71", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/5e2da1abd05f27e81a87985f5959b0b653e6da71", "committedDate": "2020-09-03T00:50:07Z", "message": "Add catalog regex to schema and table rules in file system access control"}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNzAzNjE2", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-490703616", "createdAt": "2020-09-17T15:10:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxMDoxMFrOHTnXiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxMDoxMFrOHTnXiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyOTk5NQ==", "bodyText": "Is this a breaking change or do you have code to pull in the old name as well?", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r490329995", "createdAt": "2020-09-17T15:10:10Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/admin/session-property-managers.rst", "diffHunk": "@@ -69,20 +69,20 @@ These requirements can be expressed with the following rules:\n     [\n       {\n         \"group\": \"global.*\",\n-        \"sessionProperties\": {\n+        \"session_properties\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDY0Mjkx", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-491064291", "createdAt": "2020-09-17T23:58:43Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1ODo0M1rOHT5YZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1ODo0M1rOHT5YZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNTEyNg==", "bodyText": "catalogs. They do not ..", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r490625126", "createdAt": "2020-09-17T23:58:43Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/security/file-system-access-control.rst", "diffHunk": "@@ -34,13 +34,64 @@ Presto restart. The refresh period is specified in the ``etc/access-control.prop\n \n    security.refresh-period=1s\n \n+Catalog, Schema, and Table Access\n+---------------------------------\n+\n+Access to catalogs, schemas, tables, and views is controlled by the catalog, schema, and table\n+rules.  The catalog rules are course grained rules used to restrict all access or write\n+access to catalogs, but does not explicitly grant any specific schema or table permissions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDY0NDE1", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-491064415", "createdAt": "2020-09-17T23:59:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1OTowOFrOHT5Y3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1OTowOFrOHT5Y3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNTI0NA==", "bodyText": "maybe new paragraph", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r490625244", "createdAt": "2020-09-17T23:59:08Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/security/file-system-access-control.rst", "diffHunk": "@@ -34,13 +34,64 @@ Presto restart. The refresh period is specified in the ``etc/access-control.prop\n \n    security.refresh-period=1s\n \n+Catalog, Schema, and Table Access\n+---------------------------------\n+\n+Access to catalogs, schemas, tables, and views is controlled by the catalog, schema, and table\n+rules.  The catalog rules are course grained rules used to restrict all access or write\n+access to catalogs, but does not explicitly grant any specific schema or table permissions.\n+The table and schema rules are used to specify who can can create, drop, alter, select, insert,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDY0NTcx", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-491064571", "createdAt": "2020-09-17T23:59:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1OTozOVrOHT5ZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1OTozOVrOHT5ZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNTM2OQ==", "bodyText": "do we want to omit views ?", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r490625369", "createdAt": "2020-09-17T23:59:39Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/security/file-system-access-control.rst", "diffHunk": "@@ -34,13 +34,64 @@ Presto restart. The refresh period is specified in the ``etc/access-control.prop\n \n    security.refresh-period=1s\n \n+Catalog, Schema, and Table Access\n+---------------------------------\n+\n+Access to catalogs, schemas, tables, and views is controlled by the catalog, schema, and table\n+rules.  The catalog rules are course grained rules used to restrict all access or write\n+access to catalogs, but does not explicitly grant any specific schema or table permissions.\n+The table and schema rules are used to specify who can can create, drop, alter, select, insert,\n+delete, etc. for schemas, tables and views.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDY0NjM3", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-491064637", "createdAt": "2020-09-17T23:59:54Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1OTo1NFrOHT5Zpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1OTo1NFrOHT5Zpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNTQ0Nw==", "bodyText": "matching rule, read from", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r490625447", "createdAt": "2020-09-17T23:59:54Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/security/file-system-access-control.rst", "diffHunk": "@@ -34,13 +34,64 @@ Presto restart. The refresh period is specified in the ``etc/access-control.prop\n \n    security.refresh-period=1s\n \n+Catalog, Schema, and Table Access\n+---------------------------------\n+\n+Access to catalogs, schemas, tables, and views is controlled by the catalog, schema, and table\n+rules.  The catalog rules are course grained rules used to restrict all access or write\n+access to catalogs, but does not explicitly grant any specific schema or table permissions.\n+The table and schema rules are used to specify who can can create, drop, alter, select, insert,\n+delete, etc. for schemas, tables and views.\n+\n+For each rule set, permission is based on the first matching rule read from top to bottom.  If", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDY1MzIz", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-491065323", "createdAt": "2020-09-18T00:02:12Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDowMjoxMlrOHT5cHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDowMjoxMlrOHT5cHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNjA3Nw==", "bodyText": "maybe have an actual section header Visibility ?", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r490626077", "createdAt": "2020-09-18T00:02:12Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/security/file-system-access-control.rst", "diffHunk": "@@ -34,13 +34,64 @@ Presto restart. The refresh period is specified in the ``etc/access-control.prop\n \n    security.refresh-period=1s\n \n+Catalog, Schema, and Table Access\n+---------------------------------\n+\n+Access to catalogs, schemas, tables, and views is controlled by the catalog, schema, and table\n+rules.  The catalog rules are course grained rules used to restrict all access or write\n+access to catalogs, but does not explicitly grant any specific schema or table permissions.\n+The table and schema rules are used to specify who can can create, drop, alter, select, insert,\n+delete, etc. for schemas, tables and views.\n+\n+For each rule set, permission is based on the first matching rule read from top to bottom.  If\n+no rule matches, access is denied. If no rules are provided at all, then access is granted.\n+\n+The following table summarizes the permissions required for each SQL command:\n+\n+==================================== ========== ======= ==================== ===================================================\n+SQL Command                          Catalog    Schema  Table                Note\n+==================================== ========== ======= ==================== ===================================================\n+SHOW CATALOGS                                                                Always allowed\n+SHOW SCHEMAS                         read-only  any*    any*                 Allowed if catalog is :ref:`visible<visibility>`\n+SHOW TABLES                          read-only  any*    any*                 Allowed if schema :ref:`visible<visibility>`\n+CREATE SCHEMA                        read-only  owner\n+DROP SCHEMA                          all        owner\n+SHOW CREATE SCHEMA                   all        owner\n+ALTER SCHEMA ... RENAME TO           all        owner*                       Ownership is required on both old and new schemas\n+ALTER SCHEMA ... SET AUTHORIZATION   all        owner\n+CREATE TABLE                         all                owner\n+DROP TABLE                           all                owner\n+ALTER TABLE ... RENAME TO            all                owner*               Ownership is required on both old and new tables\n+CREATE VIEW                          all                owner\n+DROP VIEW                            all                owner\n+ALTER VIEW ... RENAME TO             all                owner*               Ownership is required on both old and new views\n+COMMENT ON TABLE                     all                owner\n+COMMENT ON COLUMN                    all                owner\n+ALTER TABLE ... ADD COLUMN           all                owner\n+ALTER TABLE ... DROP COLUMN          all                owner\n+ALTER TABLE ... RENAME COLUMN        all                owner\n+SHOW COLUMNS                         all                any\n+SELECT FROM table                    read-only          select\n+SELECT FROM view                     read-only          select, grant_select\n+INSERT INTO                          all                insert\n+DELETE FROM                          all                delete\n+==================================== ========== ======= ==================== ===================================================\n+\n+.. _visibility:\n+\n+For a catalog, schema, or table to be visible in a ``SHOW`` command, the user must have", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDY3Mjcw", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-491067270", "createdAt": "2020-09-18T00:08:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDowODoyNVrOHT5igw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDowODoyNVrOHT5igw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNzcxNQ==", "bodyText": "two spaces before The..", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r490627715", "createdAt": "2020-09-18T00:08:25Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/security/file-system-access-control.rst", "diffHunk": "@@ -34,13 +34,64 @@ Presto restart. The refresh period is specified in the ``etc/access-control.prop\n \n    security.refresh-period=1s\n \n+Catalog, Schema, and Table Access\n+---------------------------------\n+\n+Access to catalogs, schemas, tables, and views is controlled by the catalog, schema, and table\n+rules.  The catalog rules are course grained rules used to restrict all access or write\n+access to catalogs, but does not explicitly grant any specific schema or table permissions.\n+The table and schema rules are used to specify who can can create, drop, alter, select, insert,\n+delete, etc. for schemas, tables and views.\n+\n+For each rule set, permission is based on the first matching rule read from top to bottom.  If\n+no rule matches, access is denied. If no rules are provided at all, then access is granted.\n+\n+The following table summarizes the permissions required for each SQL command:\n+\n+==================================== ========== ======= ==================== ===================================================\n+SQL Command                          Catalog    Schema  Table                Note\n+==================================== ========== ======= ==================== ===================================================\n+SHOW CATALOGS                                                                Always allowed\n+SHOW SCHEMAS                         read-only  any*    any*                 Allowed if catalog is :ref:`visible<visibility>`\n+SHOW TABLES                          read-only  any*    any*                 Allowed if schema :ref:`visible<visibility>`\n+CREATE SCHEMA                        read-only  owner\n+DROP SCHEMA                          all        owner\n+SHOW CREATE SCHEMA                   all        owner\n+ALTER SCHEMA ... RENAME TO           all        owner*                       Ownership is required on both old and new schemas\n+ALTER SCHEMA ... SET AUTHORIZATION   all        owner\n+CREATE TABLE                         all                owner\n+DROP TABLE                           all                owner\n+ALTER TABLE ... RENAME TO            all                owner*               Ownership is required on both old and new tables\n+CREATE VIEW                          all                owner\n+DROP VIEW                            all                owner\n+ALTER VIEW ... RENAME TO             all                owner*               Ownership is required on both old and new views\n+COMMENT ON TABLE                     all                owner\n+COMMENT ON COLUMN                    all                owner\n+ALTER TABLE ... ADD COLUMN           all                owner\n+ALTER TABLE ... DROP COLUMN          all                owner\n+ALTER TABLE ... RENAME COLUMN        all                owner\n+SHOW COLUMNS                         all                any\n+SELECT FROM table                    read-only          select\n+SELECT FROM view                     read-only          select, grant_select\n+INSERT INTO                          all                insert\n+DELETE FROM                          all                delete\n+==================================== ========== ======= ==================== ===================================================\n+\n+.. _visibility:\n+\n+For a catalog, schema, or table to be visible in a ``SHOW`` command, the user must have\n+at least one permission on the item or any nested item.  The nested items do not", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDcwMjEy", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-491070212", "createdAt": "2020-09-18T00:17:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDoxNzo1MlrOHT5tww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDoxNzo1MlrOHT5tww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMDU5NQ==", "bodyText": "rule, read", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r490630595", "createdAt": "2020-09-18T00:17:52Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/security/file-system-access-control.rst", "diffHunk": "@@ -191,13 +230,44 @@ The example below defines the following table access policy:\n           \"privileges\": []\n         },\n         {\n+          \"catalog\": \"default\",\n           \"schema\": \"default\",\n           \"table\": \".*\",\n           \"privileges\": [\"SELECT\"]\n         }\n       ]\n     }\n \n+.. _session_property_rules:\n+\n+Session Property Rules\n+----------------------\n+\n+These rules control the ability of a user to set system and catalog session properties. The\n+user is granted or denied access, based on the first matching rule read from top to bottom.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDcwNTU2", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-491070556", "createdAt": "2020-09-18T00:18:56Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzAzMzU1", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-495303355", "createdAt": "2020-09-24T07:47:34Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo0NzozNVrOHXN7Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODowNDoyM1rOHXOjAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwNzM5NQ==", "bodyText": "Why is that needed? We decided that when there is no rules then it is allow-all.", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r494107395", "createdAt": "2020-09-24T07:47:35Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/resources/file-based-system-no-access.json", "diffHunk": "@@ -1,4 +1,9 @@\n {\n+  \"catalogs\": [\n+    {\n+      \"allow\": true\n+    }\n+  ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwOTc3NA==", "bodyText": "Please add some testing", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r494109774", "createdAt": "2020-09-24T07:51:38Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -474,11 +474,10 @@ public void checkCanShowTables(SystemSecurityContext context, CatalogSchemaName\n     @Override\n     public Set<SchemaTableName> filterTables(SystemSecurityContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n-        if (!canAccessCatalog(context, catalogName, READ_ONLY)) {\n-            return ImmutableSet.of();\n-        }\n-\n-        return tableNames;\n+        return tableNames.stream()\n+                .filter(tableName -> isSchemaOwner(context, new CatalogSchemaName(catalogName, tableName.getSchemaName())) ||\n+                        checkAnyTablePermission(context, new CatalogSchemaTableName(catalogName, tableName)))\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExMDE1Nw==", "bodyText": "Please add some testing where new could see the new behavior working", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r494110157", "createdAt": "2020-09-24T07:52:11Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -169,7 +170,9 @@ public void checkCanShowTables(ConnectorSecurityContext context, String schemaNa\n     @Override\n     public Set<SchemaTableName> filterTables(ConnectorSecurityContext context, Set<SchemaTableName> tableNames)\n     {\n-        return tableNames;\n+        return tableNames.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExMzc3NA==", "bodyText": "There is slight difference between having \"catalogs\": [] and not having this at all. Former suggests that user care about catalog checking, but haven't yet defined any rules (possibly a mistake) and so deny-all, the latter suggests that user don't care about checking the catalog rules and so allow-all).\nIn other words Optional<List<Rule>> when empty allow-all, when present but list empty deny-all.\nWDYT?", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r494113774", "createdAt": "2020-09-24T07:57:52Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/security/file-system-access-control.rst", "diffHunk": "@@ -127,11 +127,6 @@ ownership of any schema, you can use the following rules:\n .. code-block:: json\n \n     {\n-      \"catalogs\": [\n-        {\n-          \"allow\": true\n-        }\n-      ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExNDM1Mw==", "bodyText": "test filtering methods", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r494114353", "createdAt": "2020-09-24T07:58:49Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedAccessControl.java", "diffHunk": "@@ -43,6 +43,32 @@\n     private static final ConnectorSecurityContext BOB = user(\"bob\", ImmutableSet.of(\"staff\"));\n     private static final ConnectorSecurityContext CHARLIE = user(\"charlie\", ImmutableSet.of(\"guests\"));\n     private static final ConnectorSecurityContext JOE = user(\"joe\", ImmutableSet.of());\n+    private static final ConnectorSecurityContext UNKNOWN = user(\"unknown\", ImmutableSet.of());\n+\n+    @Test\n+    public void testEmptyFile()\n+    {\n+        ConnectorAccessControl accessControl = createAccessControl(\"empty.json\");\n+\n+        accessControl.checkCanCreateSchema(UNKNOWN, \"unknown\");\n+        accessControl.checkCanDropSchema(UNKNOWN, \"unknown\");\n+        accessControl.checkCanRenameSchema(UNKNOWN, \"unknown\", \"new_unknown\");\n+        accessControl.checkCanSetSchemaAuthorization(UNKNOWN, \"unknown\", new PrestoPrincipal(PrincipalType.ROLE, \"some_role\"));\n+        accessControl.checkCanShowCreateSchema(UNKNOWN, \"unknown\");\n+\n+        accessControl.checkCanSelectFromColumns(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"), ImmutableSet.of());\n+        accessControl.checkCanShowColumns(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+        accessControl.checkCanInsertIntoTable(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+        accessControl.checkCanDeleteFromTable(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+\n+        accessControl.checkCanCreateTable(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+        accessControl.checkCanDropTable(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+        accessControl.checkCanRenameTable(UNKNOWN,\n+                new SchemaTableName(\"unknown\", \"unknown\"),\n+                new SchemaTableName(\"unknown\", \"new_unknown\"));\n+\n+        accessControl.checkCanSetCatalogSessionProperty(UNKNOWN, \"anything\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExNzYzMg==", "bodyText": "The thing that we load external file and run tests on it make tests very difficult to follow. Especially when file is reused between tests.\nBest would be to have some kind of ddl to create file based system access control with few rules and then test them.", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r494117632", "createdAt": "2020-09-24T08:04:23Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -564,17 +565,66 @@ public void testSchemaOperations()\n     }\n \n     @Test\n-    public void testCatalogOperations()\n-    {\n-        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"catalog.json\");\n-\n-        assertEquals(accessControl.filterCatalogs(new SystemSecurityContext(admin, queryId), allCatalogs), allCatalogs);\n-        Set<String> aliceCatalogs = ImmutableSet.of(\"open-to-all\", \"alice-catalog\", \"all-allowed\");\n-        assertEquals(accessControl.filterCatalogs(new SystemSecurityContext(alice, queryId), allCatalogs), aliceCatalogs);\n-        Set<String> bobCatalogs = ImmutableSet.of(\"open-to-all\", \"all-allowed\");\n-        assertEquals(accessControl.filterCatalogs(new SystemSecurityContext(bob, queryId), allCatalogs), bobCatalogs);\n-        Set<String> nonAsciiUserCatalogs = ImmutableSet.of(\"open-to-all\", \"all-allowed\", \"\\u0200\\u0200\\u0200\");\n-        assertEquals(accessControl.filterCatalogs(new SystemSecurityContext(nonAsciiUser, queryId), allCatalogs), nonAsciiUserCatalogs);\n+    public void testFilterCatalogs()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"file-based-system-access-visibility.json\");\n+        Set<String> allCatalogs = ImmutableSet.of(\n+                \"alice-catalog\",\n+                \"bob-catalog\",\n+                \"specific-catalog\",\n+                \"secret\",\n+                \"hidden\",\n+                \"open-to-all\",\n+                \"blocked-catalog\",\n+                \"unknown\");\n+\n+        assertEquals(accessControl.filterCatalogs(ADMIN, allCatalogs), Sets.difference(allCatalogs, ImmutableSet.of(\"blocked-catalog\")));\n+        Set<String> aliceCatalogs = ImmutableSet.of(\"specific-catalog\", \"alice-catalog\");\n+        assertEquals(accessControl.filterCatalogs(ALICE, allCatalogs), aliceCatalogs);\n+        Set<String> bobCatalogs = ImmutableSet.of(\"specific-catalog\", \"alice-catalog\", \"bob-catalog\");\n+        assertEquals(accessControl.filterCatalogs(BOB, allCatalogs), bobCatalogs);\n+        Set<String> charlieCatalogs = ImmutableSet.of(\"specific-catalog\");\n+        assertEquals(accessControl.filterCatalogs(CHARLIE, allCatalogs), charlieCatalogs);\n+    }\n+\n+    @Test\n+    public void testSchemaRulesForCheckCanShowSchemas()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"file-based-system-access-visibility.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MTYwNDk5", "url": "https://github.com/trinodb/trino/pull/5039#pullrequestreview-499160499", "createdAt": "2020-09-30T07:39:40Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzozOTo0MFrOHaRAVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzo1Njo0N1rOHaRnAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwMzYzOQ==", "bodyText": "What about newUser (new_user)?", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r497303639", "createdAt": "2020-09-30T07:39:40Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/ImpersonationRule.java", "diffHunk": "@@ -32,7 +33,7 @@\n \n     @JsonCreator\n     public ImpersonationRule(\n-            @JsonProperty(\"originalUser\") Pattern originalUserPattern,\n+            @JsonProperty(\"original_user\") @JsonAlias(\"originalUser\") Pattern originalUserPattern,\n             @JsonProperty(\"newUser\") Pattern newUserPattern,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNzAxOQ==", "bodyText": "I think this one is important. Otherwise we can regress without any notice.", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r497307019", "createdAt": "2020-09-30T07:45:35Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -169,7 +170,9 @@ public void checkCanShowTables(ConnectorSecurityContext context, String schemaNa\n     @Override\n     public Set<SchemaTableName> filterTables(ConnectorSecurityContext context, Set<SchemaTableName> tableNames)\n     {\n-        return tableNames;\n+        return tableNames.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExMDE1Nw=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNzA2NQ==", "bodyText": "I think this one is important. Otherwise we can regress without any notice.", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r497307065", "createdAt": "2020-09-30T07:45:41Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -474,11 +474,10 @@ public void checkCanShowTables(SystemSecurityContext context, CatalogSchemaName\n     @Override\n     public Set<SchemaTableName> filterTables(SystemSecurityContext context, String catalogName, Set<SchemaTableName> tableNames)\n     {\n-        if (!canAccessCatalog(context, catalogName, READ_ONLY)) {\n-            return ImmutableSet.of();\n-        }\n-\n-        return tableNames;\n+        return tableNames.stream()\n+                .filter(tableName -> isSchemaOwner(context, new CatalogSchemaName(catalogName, tableName.getSchemaName())) ||\n+                        checkAnyTablePermission(context, new CatalogSchemaTableName(catalogName, tableName)))\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwOTc3NA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxMTAxNA==", "bodyText": "That should be easy to add. Just verify that no catalog, schema, table or columns were filtered.", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r497311014", "createdAt": "2020-09-30T07:52:36Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedAccessControl.java", "diffHunk": "@@ -43,6 +43,32 @@\n     private static final ConnectorSecurityContext BOB = user(\"bob\", ImmutableSet.of(\"staff\"));\n     private static final ConnectorSecurityContext CHARLIE = user(\"charlie\", ImmutableSet.of(\"guests\"));\n     private static final ConnectorSecurityContext JOE = user(\"joe\", ImmutableSet.of());\n+    private static final ConnectorSecurityContext UNKNOWN = user(\"unknown\", ImmutableSet.of());\n+\n+    @Test\n+    public void testEmptyFile()\n+    {\n+        ConnectorAccessControl accessControl = createAccessControl(\"empty.json\");\n+\n+        accessControl.checkCanCreateSchema(UNKNOWN, \"unknown\");\n+        accessControl.checkCanDropSchema(UNKNOWN, \"unknown\");\n+        accessControl.checkCanRenameSchema(UNKNOWN, \"unknown\", \"new_unknown\");\n+        accessControl.checkCanSetSchemaAuthorization(UNKNOWN, \"unknown\", new PrestoPrincipal(PrincipalType.ROLE, \"some_role\"));\n+        accessControl.checkCanShowCreateSchema(UNKNOWN, \"unknown\");\n+\n+        accessControl.checkCanSelectFromColumns(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"), ImmutableSet.of());\n+        accessControl.checkCanShowColumns(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+        accessControl.checkCanInsertIntoTable(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+        accessControl.checkCanDeleteFromTable(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+\n+        accessControl.checkCanCreateTable(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+        accessControl.checkCanDropTable(UNKNOWN, new SchemaTableName(\"unknown\", \"unknown\"));\n+        accessControl.checkCanRenameTable(UNKNOWN,\n+                new SchemaTableName(\"unknown\", \"unknown\"),\n+                new SchemaTableName(\"unknown\", \"new_unknown\"));\n+\n+        accessControl.checkCanSetCatalogSessionProperty(UNKNOWN, \"anything\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExNDM1Mw=="}, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxMzUzOQ==", "bodyText": "let's skip this for now.", "url": "https://github.com/trinodb/trino/pull/5039#discussion_r497313539", "createdAt": "2020-09-30T07:56:47Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -564,17 +565,66 @@ public void testSchemaOperations()\n     }\n \n     @Test\n-    public void testCatalogOperations()\n-    {\n-        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"catalog.json\");\n-\n-        assertEquals(accessControl.filterCatalogs(new SystemSecurityContext(admin, queryId), allCatalogs), allCatalogs);\n-        Set<String> aliceCatalogs = ImmutableSet.of(\"open-to-all\", \"alice-catalog\", \"all-allowed\");\n-        assertEquals(accessControl.filterCatalogs(new SystemSecurityContext(alice, queryId), allCatalogs), aliceCatalogs);\n-        Set<String> bobCatalogs = ImmutableSet.of(\"open-to-all\", \"all-allowed\");\n-        assertEquals(accessControl.filterCatalogs(new SystemSecurityContext(bob, queryId), allCatalogs), bobCatalogs);\n-        Set<String> nonAsciiUserCatalogs = ImmutableSet.of(\"open-to-all\", \"all-allowed\", \"\\u0200\\u0200\\u0200\");\n-        assertEquals(accessControl.filterCatalogs(new SystemSecurityContext(nonAsciiUser, queryId), allCatalogs), nonAsciiUserCatalogs);\n+    public void testFilterCatalogs()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"file-based-system-access-visibility.json\");\n+        Set<String> allCatalogs = ImmutableSet.of(\n+                \"alice-catalog\",\n+                \"bob-catalog\",\n+                \"specific-catalog\",\n+                \"secret\",\n+                \"hidden\",\n+                \"open-to-all\",\n+                \"blocked-catalog\",\n+                \"unknown\");\n+\n+        assertEquals(accessControl.filterCatalogs(ADMIN, allCatalogs), Sets.difference(allCatalogs, ImmutableSet.of(\"blocked-catalog\")));\n+        Set<String> aliceCatalogs = ImmutableSet.of(\"specific-catalog\", \"alice-catalog\");\n+        assertEquals(accessControl.filterCatalogs(ALICE, allCatalogs), aliceCatalogs);\n+        Set<String> bobCatalogs = ImmutableSet.of(\"specific-catalog\", \"alice-catalog\", \"bob-catalog\");\n+        assertEquals(accessControl.filterCatalogs(BOB, allCatalogs), bobCatalogs);\n+        Set<String> charlieCatalogs = ImmutableSet.of(\"specific-catalog\");\n+        assertEquals(accessControl.filterCatalogs(CHARLIE, allCatalogs), charlieCatalogs);\n+    }\n+\n+    @Test\n+    public void testSchemaRulesForCheckCanShowSchemas()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"file-based-system-access-visibility.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExNzYzMg=="}, "originalCommit": null, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "334fc3db0563c4a5136d7e7becc18f2a75d37175", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/334fc3db0563c4a5136d7e7becc18f2a75d37175", "committedDate": "2020-10-07T00:27:13Z", "message": "Simplify FileBasedAccessControl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6611817d256fcfee5ca18ca3ce116cb791082126", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/6611817d256fcfee5ca18ca3ce116cb791082126", "committedDate": "2020-10-07T00:27:14Z", "message": "Fix warnings in FileBasedSystemAccessControl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e10a04bf7f9ef8fd2d943d832201625995eda35c", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/e10a04bf7f9ef8fd2d943d832201625995eda35c", "committedDate": "2020-10-07T00:27:16Z", "message": "Change catalog check to match other checks\n\nPlace check catalog method near other checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06b1afc633d082baf6c9dce1e8301467f57c1d5e", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/06b1afc633d082baf6c9dce1e8301467f57c1d5e", "committedDate": "2020-10-07T00:27:17Z", "message": "Simplify catalog checks in FileBasedSystemAccessControl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e4dc78d28f0769c20d6fcac2d801eff1c1c5ccb", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/9e4dc78d28f0769c20d6fcac2d801eff1c1c5ccb", "committedDate": "2020-10-07T00:27:18Z", "message": "Simplify query checks in FileBasedSystemAccessControl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f846b2ed7c0672df94fa2f12adb96a1100b4edb", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/4f846b2ed7c0672df94fa2f12adb96a1100b4edb", "committedDate": "2020-10-07T00:27:19Z", "message": "Clean up exception messages in FileBasedSystemAccessControl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c65efa3e8e44735a003dc3b16c33d858fd7b40e", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/1c65efa3e8e44735a003dc3b16c33d858fd7b40e", "committedDate": "2020-10-07T00:27:20Z", "message": "Change file access control to consistently use snake case\n\nOld camel case names are still supported"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "162f3fe54148d1405d62c50848555328a7b4b8e6", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/162f3fe54148d1405d62c50848555328a7b4b8e6", "committedDate": "2020-10-07T00:27:21Z", "message": "Fix file access control for table create and rename checks\n\nChanged file based access control to check for table ownership to create,\nrename, or drop tables or views."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5a032592a078f39856ff60a6b7767748be48498", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/a5a032592a078f39856ff60a6b7767748be48498", "committedDate": "2020-10-07T00:27:23Z", "message": "Fix system file create schema check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78f61cddf7de42ca3f3612aed0ce6c752c0350f3", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/78f61cddf7de42ca3f3612aed0ce6c752c0350f3", "committedDate": "2020-10-07T00:27:24Z", "message": "Add missing table checks in file system access control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b830656899e53dfbf0f9711fab0522587317d44", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/4b830656899e53dfbf0f9711fab0522587317d44", "committedDate": "2020-10-07T00:27:25Z", "message": "Filter tables in file access control\n\nOnly show tables the user has permissions on"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf812baa7bea31082fc83a6ce77aaf570f124853", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/cf812baa7bea31082fc83a6ce77aaf570f124853", "committedDate": "2020-10-07T00:27:26Z", "message": "Add catalog regex to schema and table rules in file system access control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41aa1f97b1f921bb9df2908d680923e570d0921b", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/41aa1f97b1f921bb9df2908d680923e570d0921b", "committedDate": "2020-10-07T00:27:27Z", "message": "Allow all catalog access by default in file-based access control\n\nIf no catalog rules are defined, allow all catalog access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a65adc6bb04df6b6ab2004063391bc55dea9d592", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/a65adc6bb04df6b6ab2004063391bc55dea9d592", "committedDate": "2020-10-07T00:27:28Z", "message": "Simplify table and schema rules in file system access control\n\nTable and schema default to allow if there are no rules defined, so replace\nOptional empty with an allow allow rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c24f4f2601707e6277e99c17b0149d5974f0dd2", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/4c24f4f2601707e6277e99c17b0149d5974f0dd2", "committedDate": "2020-10-07T00:27:30Z", "message": "Change catalog file access default to allow for no rules\n\nSystem access control defaults to allow if no rules are defined for table,\nschema, and session property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6039d26cae11443ba262dc58113eee7d57ee8ef6", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/6039d26cae11443ba262dc58113eee7d57ee8ef6", "committedDate": "2020-10-07T00:27:31Z", "message": "Only show catalog if user has schema or table permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a94a92117245d93aad71d21c88d82410f12688f9", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/a94a92117245d93aad71d21c88d82410f12688f9", "committedDate": "2020-10-07T00:27:32Z", "message": "Only show schema if user is schema owner or has table permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cc4a2be6300e282b6977ece40e8126a172cbe84", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/7cc4a2be6300e282b6977ece40e8126a172cbe84", "committedDate": "2020-10-07T00:27:33Z", "message": "Deny grant and revoke for catalog file access control\n\nCatalog file access control is static and not used in combination with other\naccess control systems, so grant and revoke are denied."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8da3ddf99ce669fcd322cfb89420cd05b794578", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/b8da3ddf99ce669fcd322cfb89420cd05b794578", "committedDate": "2020-10-07T00:27:34Z", "message": "Add session property rules to system file access control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4bc95a76441879613a991f056b1a717f653ba85", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/a4bc95a76441879613a991f056b1a717f653ba85", "committedDate": "2020-10-07T00:27:35Z", "message": "Improve system file based access documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a4bc95a76441879613a991f056b1a717f653ba85", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/a4bc95a76441879613a991f056b1a717f653ba85", "committedDate": "2020-10-07T00:27:35Z", "message": "Improve system file based access documentation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3818, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}