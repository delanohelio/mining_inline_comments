{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjcyMzg5", "number": 4266, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoxOTozMVrOEJ3gmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo1NToyOVrOEKFVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzgyMTA2OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoxOTozMVrOGql0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzo0MzowMVrOGqmSzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMjk4MQ==", "bodyText": "We should probably stop using == checks against types to avoid any future backward compatibility issues if we decide to create instances on the fly, and for consistency across all type checks. .equals() is more robust and can be implemented internally to do the == check as necessary.", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447312981", "createdAt": "2020-06-29T23:19:31Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeUtils.java", "diffHunk": "@@ -89,6 +93,17 @@ else if (value instanceof String) {\n         }\n     }\n \n+    public static boolean isFloatingPointNaN(Type type, Object value)\n+    {\n+        if (type == DOUBLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMDc4MA==", "bodyText": "this is omnipresent pattern across a codebase, so we would need to (a) update all the paces and (b) have some safeguards on CI.\nespecially until we do (a), there isn't much of an added value in avoiding them in new code.", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447320780", "createdAt": "2020-06-29T23:43:01Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeUtils.java", "diffHunk": "@@ -89,6 +93,17 @@ else if (value instanceof String) {\n         }\n     }\n \n+    public static boolean isFloatingPointNaN(Type type, Object value)\n+    {\n+        if (type == DOUBLE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMjk4MQ=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODc4Njk5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/SortedRangeSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzowMjowN1rOGquenw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMToyMFrOGqxthQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDg3OQ==", "bodyText": "different commit?", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447454879", "createdAt": "2020-06-30T07:02:07Z", "author": {"login": "losipiuk"}, "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/SortedRangeSet.java", "diffHunk": "@@ -181,6 +182,9 @@ public boolean isDiscreteSet()\n     @Override\n     public boolean containsValue(Object value)\n     {\n+        if (isFloatingPointNaN(type, value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNzg0NQ==", "bodyText": "I will rename Handle NaN when extracting predicate to better describe its holistic approach", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447507845", "createdAt": "2020-06-30T08:31:20Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/SortedRangeSet.java", "diffHunk": "@@ -181,6 +182,9 @@ public boolean isDiscreteSet()\n     @Override\n     public boolean containsValue(Object value)\n     {\n+        if (isFloatingPointNaN(type, value)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDg3OQ=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTkxNDQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/DynamicFilterSourceOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowODo1N1rOGq5TtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjoxMTo1M1rOGq5ahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMjMwOQ==", "bodyText": "@sopel39 suggests we can skip the NaN values instead (like we skip NULLs).", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447632309", "createdAt": "2020-06-30T12:08:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/DynamicFilterSourceOperator.java", "diffHunk": "@@ -249,15 +250,20 @@ public void finish()\n \n     private Domain convertToDomain(Type type, Block block)\n     {\n+        // Inner and right join doesn't match rows with null key column values.\n+        boolean nullAllowed = false;\n+\n         ImmutableList.Builder<Object> values = ImmutableList.builder();\n         for (int position = 0; position < block.getPositionCount(); ++position) {\n             Object value = TypeUtils.readNativeValue(type, block, position);\n             if (value != null) {\n+                if (isFloatingPointNaN(type, value)) {\n+                    return Domain.create(ValueSet.all(type), nullAllowed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzNDA1Mw==", "bodyText": "i pushed an update", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447634053", "createdAt": "2020-06-30T12:11:53Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/DynamicFilterSourceOperator.java", "diffHunk": "@@ -249,15 +250,20 @@ public void finish()\n \n     private Domain convertToDomain(Type type, Block block)\n     {\n+        // Inner and right join doesn't match rows with null key column values.\n+        boolean nullAllowed = false;\n+\n         ImmutableList.Builder<Object> values = ImmutableList.builder();\n         for (int position = 0; position < block.getPositionCount(); ++position) {\n             Object value = TypeUtils.readNativeValue(type, block, position);\n             if (value != null) {\n+                if (isFloatingPointNaN(type, value)) {\n+                    return Domain.create(ValueSet.all(type), nullAllowed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMjMwOQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDA3NTQ4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo1Mjo1MFrOGq63XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoyNjozMFrOGq8O_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NzgyMQ==", "bodyText": "Do we need to handle empty as special case? Should Domain.multipleValues handle that\nin order to reduce iffs?\nFor example:\nDomain.create(ValueSet.copyOf(type, ImmutableList.of()), false).isNone() == true\n\nYet multipleValues is implemented as\n    public static Domain multipleValues(Type type, List<?> values)\n    {\n        if (values.isEmpty()) {\n            throw new IllegalArgumentException(\"values cannot be empty\");\n        }\n        if (values.size() == 1) {\n            return singleValue(type, values.get(0));\n        }\n        return new Domain(ValueSet.of(type, values.get(0), values.subList(1, values.size()).toArray()), false);\n    }", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447657821", "createdAt": "2020-06-30T12:52:50Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "diffHunk": "@@ -364,10 +369,15 @@ public Expression visitValues(ValuesNode node, Void context)\n \n                 List<Object> values = builder.build();\n \n-                Domain domain = Domain.none(type);\n-\n-                if (!values.isEmpty()) {\n-                    domain = domain.union(Domain.multipleValues(type, values));\n+                Domain domain;\n+                if (values.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189cf6a2011484129dad810e60ded52c9e6718ba"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4MDI1Mg==", "bodyText": "i do not have a strong opinion. There are exactly 3 non-test call sites for multipleValues, so updating it in a follow up would not be a problem.", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447680252", "createdAt": "2020-06-30T13:26:30Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "diffHunk": "@@ -364,10 +369,15 @@ public Expression visitValues(ValuesNode node, Void context)\n \n                 List<Object> values = builder.build();\n \n-                Domain domain = Domain.none(type);\n-\n-                if (!values.isEmpty()) {\n-                    domain = domain.union(Domain.multipleValues(type, values));\n+                Domain domain;\n+                if (values.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NzgyMQ=="}, "originalCommit": {"oid": "189cf6a2011484129dad810e60ded52c9e6718ba"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDA4NjExOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo1NToyOVrOGq696g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoyNzoyMFrOGq8RXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1OTQ5OA==", "bodyText": "Consider adding comment. It might not be obvious for reader why NaN makes TupleDomain accept all non-null values.", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447659498", "createdAt": "2020-06-30T12:55:29Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "diffHunk": "@@ -364,10 +369,15 @@ public Expression visitValues(ValuesNode node, Void context)\n \n                 List<Object> values = builder.build();\n \n-                Domain domain = Domain.none(type);\n-\n-                if (!values.isEmpty()) {\n-                    domain = domain.union(Domain.multipleValues(type, values));\n+                Domain domain;\n+                if (values.isEmpty()) {\n+                    domain = Domain.none(type);\n+                }\n+                else if (hasNaN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189cf6a2011484129dad810e60ded52c9e6718ba"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4MDg2Mg==", "bodyText": "This knowledge is sprinkled in multiple places in the code base already.\nThere seems to be no good place to place such a comment though.", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447680862", "createdAt": "2020-06-30T13:27:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "diffHunk": "@@ -364,10 +369,15 @@ public Expression visitValues(ValuesNode node, Void context)\n \n                 List<Object> values = builder.build();\n \n-                Domain domain = Domain.none(type);\n-\n-                if (!values.isEmpty()) {\n-                    domain = domain.union(Domain.multipleValues(type, values));\n+                Domain domain;\n+                if (values.isEmpty()) {\n+                    domain = Domain.none(type);\n+                }\n+                else if (hasNaN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1OTQ5OA=="}, "originalCommit": {"oid": "189cf6a2011484129dad810e60ded52c9e6718ba"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3991, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}