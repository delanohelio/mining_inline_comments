{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjkyMjEy", "number": 2410, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMToxNDoyOFrODV3DJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMToxNzozOVrODV3DsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjQ4NjE0OnYy", "diffSide": "RIGHT", "path": "presto-raptor-legacy/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMToxNDoyOFrOFaS7Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMToxNDoyOFrOFaS7Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExNzM5MA==", "bodyText": "Use testcontainers for Raptor MySQL tests\n\nMore adequate message would be \"Use dockerized MySQL for Raptor tests\"", "url": "https://github.com/trinodb/trino/pull/2410#discussion_r363117390", "createdAt": "2020-01-05T21:14:28Z", "author": {"login": "findepi"}, "path": "presto-raptor-legacy/pom.xml", "diffHunk": "@@ -259,8 +259,14 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>io.airlift</groupId>\n-            <artifactId>testing-mysql-server</artifactId>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>testcontainers</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>mysql</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjQ4NzUzOnYy", "diffSide": "RIGHT", "path": "presto-raptor-legacy/src/test/java/io/prestosql/plugin/raptor/legacy/TestRaptorIntegrationSmokeTestMySql.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMToxNzozOVrOFaS7_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNToxNzoxMVrOFaVmIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExNzU2NQ==", "bodyText": "org.testcontainers.containers.JdbcDatabaseContainer#createConnection can do this for you", "url": "https://github.com/trinodb/trino/pull/2410#discussion_r363117565", "createdAt": "2020-01-05T21:17:39Z", "author": {"login": "findepi"}, "path": "presto-raptor-legacy/src/test/java/io/prestosql/plugin/raptor/legacy/TestRaptorIntegrationSmokeTestMySql.java", "diffHunk": "@@ -26,25 +26,35 @@\n \n import static io.prestosql.plugin.raptor.legacy.RaptorQueryRunner.copyTables;\n import static io.prestosql.plugin.raptor.legacy.RaptorQueryRunner.createSession;\n+import static java.lang.String.format;\n \n @Test\n public class TestRaptorIntegrationSmokeTestMySql\n         extends TestRaptorIntegrationSmokeTest\n {\n-    private TestingMySqlServer mysqlServer;\n+    private MySQLContainer<?> mysqlContainer;\n \n     @Override\n     protected QueryRunner createQueryRunner()\n             throws Exception\n     {\n-        mysqlServer = new TestingMySqlServer(\"testuser\", \"testpass\", \"testdb\");\n-        return createRaptorMySqlQueryRunner(mysqlServer.getJdbcUrl(\"testdb\"));\n+        mysqlContainer = new MySQLContainer<>(\"mysql:8.0.12\");\n+        mysqlContainer.start();\n+        return createRaptorMySqlQueryRunner(getJdbcUrl(mysqlContainer));\n     }\n \n     @AfterClass(alwaysRun = true)\n     public final void destroy()\n     {\n-        mysqlServer.close();\n+        mysqlContainer.close();\n+    }\n+\n+    private static String getJdbcUrl(MySQLContainer<?> container)\n+    {\n+        return format(\"%s?user=%s&password=%s&useSSL=false&allowPublicKeyRetrieval=true\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2MTEyMw==", "bodyText": "Only if you want a connection. I actually need the URL with username/password to pass to the configuration. I wish it did have an easy way to do this.\nIf you don't care about the password, you could do something like this:\nString jdbcUrl;\ntry (Connection connection = container.createConnection(\"\")) {\n    jdbcUrl = connection.getMetaData().getURL().toString();\n}\nBut this seems overkill to just constructing it in one line.", "url": "https://github.com/trinodb/trino/pull/2410#discussion_r363161123", "createdAt": "2020-01-06T05:17:11Z", "author": {"login": "electrum"}, "path": "presto-raptor-legacy/src/test/java/io/prestosql/plugin/raptor/legacy/TestRaptorIntegrationSmokeTestMySql.java", "diffHunk": "@@ -26,25 +26,35 @@\n \n import static io.prestosql.plugin.raptor.legacy.RaptorQueryRunner.copyTables;\n import static io.prestosql.plugin.raptor.legacy.RaptorQueryRunner.createSession;\n+import static java.lang.String.format;\n \n @Test\n public class TestRaptorIntegrationSmokeTestMySql\n         extends TestRaptorIntegrationSmokeTest\n {\n-    private TestingMySqlServer mysqlServer;\n+    private MySQLContainer<?> mysqlContainer;\n \n     @Override\n     protected QueryRunner createQueryRunner()\n             throws Exception\n     {\n-        mysqlServer = new TestingMySqlServer(\"testuser\", \"testpass\", \"testdb\");\n-        return createRaptorMySqlQueryRunner(mysqlServer.getJdbcUrl(\"testdb\"));\n+        mysqlContainer = new MySQLContainer<>(\"mysql:8.0.12\");\n+        mysqlContainer.start();\n+        return createRaptorMySqlQueryRunner(getJdbcUrl(mysqlContainer));\n     }\n \n     @AfterClass(alwaysRun = true)\n     public final void destroy()\n     {\n-        mysqlServer.close();\n+        mysqlContainer.close();\n+    }\n+\n+    private static String getJdbcUrl(MySQLContainer<?> container)\n+    {\n+        return format(\"%s?user=%s&password=%s&useSSL=false&allowPublicKeyRetrieval=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExNzU2NQ=="}, "originalCommit": null, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1093, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}