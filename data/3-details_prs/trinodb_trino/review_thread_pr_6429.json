{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0ODIyMjAz", "number": 6429, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDoyMTowOVrOFIl3vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoyODoxOFrOFJZIyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTUzNDA2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetTopologyConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDoyMTowOVrOIKmIdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODozMTo0MVrOIMJ5ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTQyOQ==", "bodyText": "Can this config be refreshed? I vaguely remember some topology providers have refresh. If so, this doesn't look thread-safe.", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r547981429", "createdAt": "2020-12-23T14:21:09Z", "author": {"login": "hashhar"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetTopologyConfig.java", "diffHunk": "@@ -35,11 +35,10 @@\n     @Config(\"node-scheduler.network-topology.subnet.cidr-prefix-lengths\")\n     public SubnetTopologyConfig setCidrPrefixLengths(String commaSeparatedLengths)\n     {\n-        List<Integer> lengths = Splitter.on(',').omitEmptyStrings().splitToList(commaSeparatedLengths).stream()\n+\n+        this.cidrPrefixLengths = Splitter.on(',').omitEmptyStrings().splitToList(commaSeparatedLengths).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1NDQ1NQ==", "bodyText": "Can this config be refreshed?\n\nIDK. Yet this change does make any difference regarding thread-safety. Can you please elaborate if you think I am missing something here?", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r548854455", "createdAt": "2020-12-25T10:48:21Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetTopologyConfig.java", "diffHunk": "@@ -35,11 +35,10 @@\n     @Config(\"node-scheduler.network-topology.subnet.cidr-prefix-lengths\")\n     public SubnetTopologyConfig setCidrPrefixLengths(String commaSeparatedLengths)\n     {\n-        List<Integer> lengths = Splitter.on(',').omitEmptyStrings().splitToList(commaSeparatedLengths).stream()\n+\n+        this.cidrPrefixLengths = Splitter.on(',').omitEmptyStrings().splitToList(commaSeparatedLengths).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTQyOQ=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTk3Mg==", "bodyText": "Nevermind, there can never be two concurrent updates since we cannot have multiple refresh policies at a time.", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549615972", "createdAt": "2020-12-29T08:31:41Z", "author": {"login": "hashhar"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetTopologyConfig.java", "diffHunk": "@@ -35,11 +35,10 @@\n     @Config(\"node-scheduler.network-topology.subnet.cidr-prefix-lengths\")\n     public SubnetTopologyConfig setCidrPrefixLengths(String commaSeparatedLengths)\n     {\n-        List<Integer> lengths = Splitter.on(',').omitEmptyStrings().splitToList(commaSeparatedLengths).stream()\n+\n+        this.cidrPrefixLengths = Splitter.on(',').omitEmptyStrings().splitToList(commaSeparatedLengths).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTQyOQ=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTU1MDgxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDoyNjozMVrOIKmSUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMDo0MzoyNlrOILbYMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4Mzk1Mg==", "bodyText": "Not equivalent. Will not allow null elements.", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r547983952", "createdAt": "2020-12-23T14:26:31Z", "author": {"login": "hashhar"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -218,9 +218,9 @@ private Object getLegacyValue(Object value, Type type)\n                 return value;\n             }\n \n-            return unmodifiableList(((List<Object>) value).stream()\n+            return ((List<Object>) value).stream()\n                     .map(element -> getLegacyValue(element, elementType))\n-                    .collect(toList()));\n+                    .collect(toUnmodifiableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzgwOQ==", "bodyText": "Good catch. Reverted.", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r548853809", "createdAt": "2020-12-25T10:43:26Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -218,9 +218,9 @@ private Object getLegacyValue(Object value, Type type)\n                 return value;\n             }\n \n-            return unmodifiableList(((List<Object>) value).stream()\n+            return ((List<Object>) value).stream()\n                     .map(element -> getLegacyValue(element, elementType))\n-                    .collect(toList()));\n+                    .collect(toUnmodifiableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4Mzk1Mg=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzkyMjUzOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcVendorCompatibility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoxNDozNFrOILuBaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoxNDozNFrOILuBaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTI3Mg==", "bodyText": "This is part of Drop unneeded semicolon commit", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549159272", "createdAt": "2020-12-27T20:14:34Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcVendorCompatibility.java", "diffHunk": "@@ -452,7 +452,7 @@ void tearDown()\n     private static class OracleReferenceDriver\n             implements ReferenceDriver\n     {\n-        private OracleContainer oracleServer;\n+        private final OracleContainer oracleServer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzkyMjU1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcVendorCompatibility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoxNDozN1rOILuBag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoxNDozN1rOILuBag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTI3NA==", "bodyText": "This is part of Drop unneeded semicolon commit", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549159274", "createdAt": "2020-12-27T20:14:37Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcVendorCompatibility.java", "diffHunk": "@@ -537,7 +537,7 @@ public String toString()\n     private static class PostgresqlReferenceDriver\n             implements ReferenceDriver\n     {\n-        private PostgreSQLContainer<?> postgresqlContainer;\n+        private final PostgreSQLContainer<?> postgresqlContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzkyNTE2OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/IndexJoinNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoxNzoyMVrOILuChg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODo1MToyMlrOIMKP7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTU1OA==", "bodyText": "This is indeed redundant, but it seems we do this by convention pretty much for most of enums, i guess", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549159558", "createdAt": "2020-12-27T20:17:21Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/IndexJoinNode.java", "diffHunk": "@@ -65,7 +65,7 @@ public IndexJoinNode(\n \n         private final String joinLabel;\n \n-        private Type(String joinLabel)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyMTc0Mw==", "bodyText": "I would drop this. And drop others as we go. Note that in this PR I only looked at presto-main. There is a chance I will go over the others from time to time as a relaxation execrcise.", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549621743", "createdAt": "2020-12-29T08:51:22Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/IndexJoinNode.java", "diffHunk": "@@ -65,7 +65,7 @@ public IndexJoinNode(\n \n         private final String joinLabel;\n \n-        private Type(String joinLabel)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTU1OA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzkyNjE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SqlQueryScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoxODo0N1rOILuC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODo0NDowNFrOIMKHtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTY3OQ==", "bodyText": ".distinct() is redundant (and would go on separate line, if retained)\n(if you want to keep it, please explain why)", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549159679", "createdAt": "2020-12-27T20:18:47Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SqlQueryScheduler.java", "diffHunk": "@@ -649,9 +649,9 @@ public void abort()\n     private static ListenableFuture<?> whenAllStages(Collection<SqlStageExecution> stages, Predicate<StageState> predicate)\n     {\n         checkArgument(!stages.isEmpty(), \"stages is empty\");\n-        Set<StageId> stageIds = newConcurrentHashSet(stages.stream()\n-                .map(SqlStageExecution::getStageId)\n-                .collect(toSet()));\n+        Set<StageId> stageIds = stages.stream()\n+                .map(SqlStageExecution::getStageId).distinct()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxOTYzNg==", "bodyText": "not needed indeed.", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549619636", "createdAt": "2020-12-29T08:44:04Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SqlQueryScheduler.java", "diffHunk": "@@ -649,9 +649,9 @@ public void abort()\n     private static ListenableFuture<?> whenAllStages(Collection<SqlStageExecution> stages, Predicate<StageState> predicate)\n     {\n         checkArgument(!stages.isEmpty(), \"stages is empty\");\n-        Set<StageId> stageIds = newConcurrentHashSet(stages.stream()\n-                .map(SqlStageExecution::getStageId)\n-                .collect(toSet()));\n+        Set<StageId> stageIds = stages.stream()\n+                .map(SqlStageExecution::getStageId).distinct()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTY3OQ=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzkzMTcxOnYy", "diffSide": "LEFT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoyNjowNFrOILuFiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODo1OToxOFrOIMKZsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDMyOQ==", "bodyText": "Would https://errorprone.info/bugpattern/StaticQualifiedUsingExpression catch this?", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549160329", "createdAt": "2020-12-27T20:26:04Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "diffHunk": "@@ -74,7 +74,7 @@ private ProjectNode buildProjectedAggregation(PlanBuilder planBuilder, Predicate\n                 planBuilder.aggregation(aggregationBuilder -> aggregationBuilder\n                         .source(planBuilder.values(key))\n                         .singleGroupingSet(key)\n-                        .addAggregation(a, planBuilder.expression(\"count()\"), ImmutableList.of())\n-                        .addAggregation(b, planBuilder.expression(\"count()\"), ImmutableList.of())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxODk5Mg==", "bodyText": "Yep", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549618992", "createdAt": "2020-12-29T08:41:53Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "diffHunk": "@@ -74,7 +74,7 @@ private ProjectNode buildProjectedAggregation(PlanBuilder planBuilder, Predicate\n                 planBuilder.aggregation(aggregationBuilder -> aggregationBuilder\n                         .source(planBuilder.values(key))\n                         .singleGroupingSet(key)\n-                        .addAggregation(a, planBuilder.expression(\"count()\"), ImmutableList.of())\n-                        .addAggregation(b, planBuilder.expression(\"count()\"), ImmutableList.of())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDMyOQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNDI0Mw==", "bodyText": "I added this check to set.", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549624243", "createdAt": "2020-12-29T08:59:18Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "diffHunk": "@@ -74,7 +74,7 @@ private ProjectNode buildProjectedAggregation(PlanBuilder planBuilder, Predicate\n                 planBuilder.aggregation(aggregationBuilder -> aggregationBuilder\n                         .source(planBuilder.values(key))\n                         .singleGroupingSet(key)\n-                        .addAggregation(a, planBuilder.expression(\"count()\"), ImmutableList.of())\n-                        .addAggregation(b, planBuilder.expression(\"count()\"), ImmutableList.of())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDMyOQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzkzMjE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoyNjoyOFrOILuFuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODoyMTowNlrOIMJtKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDM3OQ==", "bodyText": "do we typically static-import these?\n(the Access PlanBuilder.expressions in static manner commit adds static import in some cases and qualified call in some other places, intentional?)", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549160379", "createdAt": "2020-12-27T20:26:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "diffHunk": "@@ -74,7 +74,7 @@ private ProjectNode buildProjectedAggregation(PlanBuilder planBuilder, Predicate\n                 planBuilder.aggregation(aggregationBuilder -> aggregationBuilder\n                         .source(planBuilder.values(key))\n                         .singleGroupingSet(key)\n-                        .addAggregation(a, planBuilder.expression(\"count()\"), ImmutableList.of())\n-                        .addAggregation(b, planBuilder.expression(\"count()\"), ImmutableList.of())));\n+                        .addAggregation(a, PlanBuilder.expression(\"count()\"), ImmutableList.of())\n+                        .addAggregation(b, PlanBuilder.expression(\"count()\"), ImmutableList.of())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxMDQwOQ==", "bodyText": "I added static import when possible. In some cases it conflicted with ExpressionMatcher expression. Maybe this is the reason to not static import at all?", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549610409", "createdAt": "2020-12-29T08:12:20Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "diffHunk": "@@ -74,7 +74,7 @@ private ProjectNode buildProjectedAggregation(PlanBuilder planBuilder, Predicate\n                 planBuilder.aggregation(aggregationBuilder -> aggregationBuilder\n                         .source(planBuilder.values(key))\n                         .singleGroupingSet(key)\n-                        .addAggregation(a, planBuilder.expression(\"count()\"), ImmutableList.of())\n-                        .addAggregation(b, planBuilder.expression(\"count()\"), ImmutableList.of())));\n+                        .addAggregation(a, PlanBuilder.expression(\"count()\"), ImmutableList.of())\n+                        .addAggregation(b, PlanBuilder.expression(\"count()\"), ImmutableList.of())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDM3OQ=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxMjg0MQ==", "bodyText": "Good question. this is \"whatever\" for now for me, we can talk about this sepearete from this PR", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549612841", "createdAt": "2020-12-29T08:21:06Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "diffHunk": "@@ -74,7 +74,7 @@ private ProjectNode buildProjectedAggregation(PlanBuilder planBuilder, Predicate\n                 planBuilder.aggregation(aggregationBuilder -> aggregationBuilder\n                         .source(planBuilder.values(key))\n                         .singleGroupingSet(key)\n-                        .addAggregation(a, planBuilder.expression(\"count()\"), ImmutableList.of())\n-                        .addAggregation(b, planBuilder.expression(\"count()\"), ImmutableList.of())));\n+                        .addAggregation(a, PlanBuilder.expression(\"count()\"), ImmutableList.of())\n+                        .addAggregation(b, PlanBuilder.expression(\"count()\"), ImmutableList.of())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDM3OQ=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzkzMzU1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeWithTimeZoneToVarcharCast.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoyODoxOFrOILuGXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDoyODoxOFrOILuGXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDU0MA==", "bodyText": "Remove unneeded casts\n\n\"Remove redundant casts\" ?", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549160540", "createdAt": "2020-12-27T20:28:18Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeWithTimeZoneToVarcharCast.java", "diffHunk": "@@ -61,10 +61,10 @@ public static Slice cast(@LiteralParameter(\"p\") long precision, @SqlType(\"time(p\n     // Can't name this format() because we can't have a qualified reference to String.format() below\n     private static Slice formatAsString(int precision, long picos, int offsetMinutes)\n     {\n-        int size = (int) (8 + // hour:minute:second\n+        int size = 8 + // hour:minute:second", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4414, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}