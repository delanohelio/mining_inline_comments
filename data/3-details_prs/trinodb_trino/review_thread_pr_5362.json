{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTMzODA5", "number": 5362, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoxOTo0OVrOEpDa8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNjowMDo0NlrOEpGX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDgzMTIxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoxOTo0OVrOHaf78w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoxOTo0OVrOHaf78w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0ODI3NQ==", "bodyText": "Add a comment why we want to do extra check here", "url": "https://github.com/trinodb/trino/pull/5362#discussion_r497548275", "createdAt": "2020-09-30T14:19:49Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -131,6 +131,11 @@ private Environment tryStart()\n             }\n \n             Startables.deepStart(containers).get();\n+            if (!allContainersHealthy(containers)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDg0MTg2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoyMjoxMVrOHagC4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoyMjoxMVrOHagC4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1MDA1MA==", "bodyText": "parameter naming does not make it obvious which container depends on which.\nMaybe name container and dependencyContainer?", "url": "https://github.com/trinodb/trino/pull/5362#discussion_r497550050", "createdAt": "2020-09-30T14:22:11Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -322,6 +322,15 @@ public String getEnvironmentName()\n             return name;\n         }\n \n+        public Builder containerDependsOn(String container, String otherContainer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDg2Mzk5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoyNjozMlrOHagQdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo1NzozNFrOHahynQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1MzUyNw==", "bodyText": "Also instead we could maybe add getContainer method to builder and go with:\n        builder.addContainers(createZookeeper(), createKafka())\n                .configureContainer(\"kafka\", kafkaContainer -> kafkaContainer.dependsOn(builder.getContainer(\"zookeeper\")));\nBut I think helper method is nice", "url": "https://github.com/trinodb/trino/pull/5362#discussion_r497553527", "createdAt": "2020-09-30T14:26:32Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -322,6 +322,15 @@ public String getEnvironmentName()\n             return name;\n         }\n \n+        public Builder containerDependsOn(String container, String otherContainer)\n+        {\n+            checkState(containers.containsKey(container), \"Container with name %s is not registered\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NzgwOA==", "bodyText": "That was my initial thought. I dont't know if builder should have get method though (what's your take on that?)", "url": "https://github.com/trinodb/trino/pull/5362#discussion_r497567808", "createdAt": "2020-09-30T14:44:05Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -322,6 +322,15 @@ public String getEnvironmentName()\n             return name;\n         }\n \n+        public Builder containerDependsOn(String container, String otherContainer)\n+        {\n+            checkState(containers.containsKey(container), \"Container with name %s is not registered\", name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1MzUyNw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3ODY1Mw==", "bodyText": "I would not object if there are more cases when that would be useful.\nBut the helper method you added is fine too. And it does checkState calls which would make the configureContainer bloated.", "url": "https://github.com/trinodb/trino/pull/5362#discussion_r497578653", "createdAt": "2020-09-30T14:57:34Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -322,6 +322,15 @@ public String getEnvironmentName()\n             return name;\n         }\n \n+        public Builder containerDependsOn(String container, String otherContainer)\n+        {\n+            checkState(containers.containsKey(container), \"Container with name %s is not registered\", name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1MzUyNw=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTMwNjM5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1OTowNFrOHaklFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1OTowNFrOHaklFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyNDM0MA==", "bodyText": "make it simple for loop", "url": "https://github.com/trinodb/trino/pull/5362#discussion_r497624340", "createdAt": "2020-09-30T15:59:04Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -284,6 +286,14 @@ public void copyLogsToHostPath(Path hostPath)\n         return statistics.get();\n     }\n \n+    public DockerContainer waitingForAll(WaitStrategy... strategies)\n+    {\n+        WaitAllStrategy strategy = new WaitAllStrategy();\n+        Arrays.stream(strategies).forEach(strategy::withStrategy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTMxMzYxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNjowMDozMVrOHakpaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNjowMDozMVrOHakpaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyNTQ1MQ==", "bodyText": "you are adding forHealthCheck() here. SHould be separate commit.", "url": "https://github.com/trinodb/trino/pull/5362#discussion_r497625451", "createdAt": "2020-09-30T16:00:31Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "diffHunk": "@@ -98,7 +99,7 @@ public static DockerContainer createHadoopContainer(DockerFiles dockerFiles, Str\n                 .withCommand(\"/usr/local/hadoop-run.sh\")\n                 .withExposedLogPaths(\"/var/log/hadoop-yarn\", \"/var/log/hadoop-hdfs\", \"/var/log/hive\", \"/var/log/container-health.log\")\n                 .withStartupCheckStrategy(new IsRunningStartupCheckStrategy())\n-                .waitingFor(new SelectedPortWaitStrategy(10000)) // HiveServer2\n+                .waitingForAll(forSelectedPorts(10000), forHealthcheck()) // HiveServer2", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTMxNDc3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Standard.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNjowMDo0NlrOHakqFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNjowMDo0NlrOHakqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyNTYyMg==", "bodyText": "same here", "url": "https://github.com/trinodb/trino/pull/5362#discussion_r497625622", "createdAt": "2020-09-30T16:00:46Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Standard.java", "diffHunk": "@@ -125,7 +126,7 @@ public static DockerContainer createPrestoContainer(DockerFiles dockerFiles, Fil\n                 .withFileSystemBind(serverPackage.getPath(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n                 .withCommand(\"/docker/presto-product-tests/run-presto.sh\")\n                 .withStartupCheckStrategy(new IsRunningStartupCheckStrategy())\n-                .waitingFor(Wait.forLogMessage(\".*======== SERVER STARTED ========.*\", 1))\n+                .waitingForAll(forLogMessage(\".*======== SERVER STARTED ========.*\", 1), forHealthcheck())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4752, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}