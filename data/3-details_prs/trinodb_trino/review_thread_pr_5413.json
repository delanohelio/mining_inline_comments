{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDgwOTUz", "number": 5413, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTozMDoyNFrOEqRsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTozMTowNlrOEqRtJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzY1NDU0OnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportOrphanedExecutors.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTozMDoyNFrOHcY4Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNDoxMFrOHcfdJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyOTc3MA==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/5413#discussion_r499529770", "createdAt": "2020-10-05T11:30:24Z", "author": {"login": "kokosing"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportOrphanedExecutors.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.ISuite;\n+import org.testng.ISuiteListener;\n+import org.testng.ITestNGMethod;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.Field;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.lang.String.format;\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReportOrphanedExecutors\n+        implements ISuiteListener\n+{\n+    @Override\n+    public void onStart(ISuite suite) {}\n+\n+    @Override\n+    public void onFinish(ISuite suite)\n+    {\n+        try {\n+            reportOrphanedExecutors(suite);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    ReportOrphanedExecutors.class,\n+                    \"Failed to process %s [%s]: \\n%s\",\n+                    suite,\n+                    suite.getName(),\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportOrphanedExecutors(ISuite suite)\n+    {\n+        Set<?> instances = suite.getAllMethods().stream()\n+                .map(ITestNGMethod::getInstance)\n+                .filter(Objects::nonNull)\n+                .collect(ImmutableSet.toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzNzU0Mg==", "bodyText": "would you want to add a static check for that?", "url": "https://github.com/trinodb/trino/pull/5413#discussion_r499637542", "createdAt": "2020-10-05T14:24:10Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportOrphanedExecutors.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.ISuite;\n+import org.testng.ISuiteListener;\n+import org.testng.ITestNGMethod;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.Field;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.lang.String.format;\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReportOrphanedExecutors\n+        implements ISuiteListener\n+{\n+    @Override\n+    public void onStart(ISuite suite) {}\n+\n+    @Override\n+    public void onFinish(ISuite suite)\n+    {\n+        try {\n+            reportOrphanedExecutors(suite);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    ReportOrphanedExecutors.class,\n+                    \"Failed to process %s [%s]: \\n%s\",\n+                    suite,\n+                    suite.getName(),\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportOrphanedExecutors(ISuite suite)\n+    {\n+        Set<?> instances = suite.getAllMethods().stream()\n+                .map(ITestNGMethod::getInstance)\n+                .filter(Objects::nonNull)\n+                .collect(ImmutableSet.toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyOTc3MA=="}, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzY1NzM0OnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportOrphanedExecutors.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTozMTowNlrOHcY5vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowNzowM1rOHcetAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzMDE3Mw==", "bodyText": "tests :)", "url": "https://github.com/trinodb/trino/pull/5413#discussion_r499530173", "createdAt": "2020-10-05T11:31:06Z", "author": {"login": "kokosing"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportOrphanedExecutors.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.ISuite;\n+import org.testng.ISuiteListener;\n+import org.testng.ITestNGMethod;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.Field;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.lang.String.format;\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReportOrphanedExecutors\n+        implements ISuiteListener\n+{\n+    @Override\n+    public void onStart(ISuite suite) {}\n+\n+    @Override\n+    public void onFinish(ISuite suite)\n+    {\n+        try {\n+            reportOrphanedExecutors(suite);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    ReportOrphanedExecutors.class,\n+                    \"Failed to process %s [%s]: \\n%s\",\n+                    suite,\n+                    suite.getName(),\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportOrphanedExecutors(ISuite suite)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNTIxNw==", "bodyText": "i don't know how to test this reasonably", "url": "https://github.com/trinodb/trino/pull/5413#discussion_r499625217", "createdAt": "2020-10-05T14:07:03Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportOrphanedExecutors.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.ISuite;\n+import org.testng.ISuiteListener;\n+import org.testng.ITestNGMethod;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.Field;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.lang.String.format;\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReportOrphanedExecutors\n+        implements ISuiteListener\n+{\n+    @Override\n+    public void onStart(ISuite suite) {}\n+\n+    @Override\n+    public void onFinish(ISuite suite)\n+    {\n+        try {\n+            reportOrphanedExecutors(suite);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    ReportOrphanedExecutors.class,\n+                    \"Failed to process %s [%s]: \\n%s\",\n+                    suite,\n+                    suite.getName(),\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportOrphanedExecutors(ISuite suite)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzMDE3Mw=="}, "originalCommit": null, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4589, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}