{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NTA4MjAy", "number": 5220, "title": "Reduce size of serialized Range (and TupleDomain)", "bodyText": "Size of serialized discrete range is reduced by ~4 times (see test)", "createdAt": "2020-09-18T19:47:46Z", "url": "https://github.com/trinodb/trino/pull/5220", "merged": true, "mergeCommit": {"oid": "d1f57a98eff03ed665db7a315395304d21bd4616"}, "closed": true, "closedAt": "2020-09-21T11:43:17Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKbiWXAFqTQ5MjAwMzg2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLB5dUABqjM3ODgyMjU4NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMDAzODY4", "url": "https://github.com/trinodb/trino/pull/5220#pullrequestreview-492003868", "createdAt": "2020-09-19T14:56:57Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNDo1Njo1OFrOHUsgfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNTowMToyMlrOHUsiDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ2Mjc4Mw==", "bodyText": "If we were doing this on ValueSet level, we wouldn't need to store the type for every value", "url": "https://github.com/trinodb/trino/pull/5220#discussion_r491462783", "createdAt": "2020-09-19T14:56:58Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/RangeJsonSerde.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.predicate.Marker;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.type.Type;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static io.prestosql.spi.predicate.Marker.Bound.EXACTLY;\n+\n+public class RangeJsonSerde\n+{\n+    private RangeJsonSerde() {}\n+\n+    public static class Serializer\n+            extends JsonSerializer<Range>\n+    {\n+        @Override\n+        public void serialize(Range range, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\n+                throws IOException\n+        {\n+            jsonGenerator.writeNumber(range.isSingleValue() ? 1 : 0);\n+            if (range.isSingleValue()) {\n+                serializerProvider.findValueSerializer(Type.class).serialize(range.getType(), jsonGenerator, serializerProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ2MzE4Mg==", "bodyText": "We should add a test in TestRangeJsonSerde verifying the Range class has exactly this two fields.\notherwise one can add a new optional field to Range, not knowing the dedicated serialization existss\nthe serialization test will still be passing, while it will be no longer correct", "url": "https://github.com/trinodb/trino/pull/5220#discussion_r491463182", "createdAt": "2020-09-19T15:01:22Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/RangeJsonSerde.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.predicate.Marker;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.type.Type;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static io.prestosql.spi.predicate.Marker.Bound.EXACTLY;\n+\n+public class RangeJsonSerde\n+{\n+    private RangeJsonSerde() {}\n+\n+    public static class Serializer\n+            extends JsonSerializer<Range>\n+    {\n+        @Override\n+        public void serialize(Range range, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\n+                throws IOException\n+        {\n+            jsonGenerator.writeNumber(range.isSingleValue() ? 1 : 0);\n+            if (range.isSingleValue()) {\n+                serializerProvider.findValueSerializer(Type.class).serialize(range.getType(), jsonGenerator, serializerProvider);\n+                serializerProvider.findValueSerializer(Block.class).serialize(range.getLow().getValueBlock().get(), jsonGenerator, serializerProvider);\n+                return;\n+            }\n+\n+            JsonSerializer<Object> markerSerializer = serializerProvider.findValueSerializer(Marker.class);\n+            markerSerializer.serialize(range.getLow(), jsonGenerator, serializerProvider);\n+            markerSerializer.serialize(range.getHigh(), jsonGenerator, serializerProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNDIxMDQ4", "url": "https://github.com/trinodb/trino/pull/5220#pullrequestreview-492421048", "createdAt": "2020-09-21T09:31:42Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5cc626445663c166bf30ba582bdefbfc9148b78", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/b5cc626445663c166bf30ba582bdefbfc9148b78", "committedDate": "2020-09-21T11:42:52Z", "message": "Reduce size of serialized Range (and TupleDomain)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b5cc626445663c166bf30ba582bdefbfc9148b78", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/b5cc626445663c166bf30ba582bdefbfc9148b78", "committedDate": "2020-09-21T11:42:52Z", "message": "Reduce size of serialized Range (and TupleDomain)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3663, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}