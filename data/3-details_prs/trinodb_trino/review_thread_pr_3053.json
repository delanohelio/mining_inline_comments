{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MDE3NDMw", "number": 3053, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxODo1OToxMFrODoIovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxOTowMzo0MVrODoIp2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDExMTM1OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxODo1OToxMFrOF2goCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMjowMjoyNlrOF2hjzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMTk2Mg==", "bodyText": "I think you might want to use io.prestosql.testing.sql.TestTable.randomTableSuffix. Sometimes ATDQ is run in parallel for some connectors with several different configurations and then such test becomes flaky due table name conflict.", "url": "https://github.com/trinodb/trino/pull/3053#discussion_r392701962", "createdAt": "2020-03-15T18:59:10Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1169,4 +1178,152 @@ public void testInsertForDefaultColumn()\n     }\n \n     protected abstract TestTable createTableWithDefaultColumns();\n+\n+    @Test(dataProvider = \"testDataMappingSmokeTestDataProvider\")\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        String prestoTypeName = dataMappingTestSetup.getPrestoTypeName();\n+        String sampleValueLiteral = dataMappingTestSetup.getSampleValueLiteral();\n+        String highValueLiteral = dataMappingTestSetup.getHighValueLiteral();\n+\n+        String tableName = \"test_data_mapping_smoke_test_\" + prestoTypeName.replaceAll(\"[^a-zA-Z0-9]\", \"_\");\n+\n+        Runnable setup = () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcxNzI2Mg==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/3053#discussion_r392717262", "createdAt": "2020-03-15T22:02:26Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1169,4 +1178,152 @@ public void testInsertForDefaultColumn()\n     }\n \n     protected abstract TestTable createTableWithDefaultColumns();\n+\n+    @Test(dataProvider = \"testDataMappingSmokeTestDataProvider\")\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        String prestoTypeName = dataMappingTestSetup.getPrestoTypeName();\n+        String sampleValueLiteral = dataMappingTestSetup.getSampleValueLiteral();\n+        String highValueLiteral = dataMappingTestSetup.getHighValueLiteral();\n+\n+        String tableName = \"test_data_mapping_smoke_test_\" + prestoTypeName.replaceAll(\"[^a-zA-Z0-9]\", \"_\");\n+\n+        Runnable setup = () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMTk2Mg=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDExMzYyOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxOTowMjo0OFrOF2gpNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMjowMjo1NFrOF2hj9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMjI2Mw==", "bodyText": "s/setup::run/setup?", "url": "https://github.com/trinodb/trino/pull/3053#discussion_r392702263", "createdAt": "2020-03-15T19:02:48Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1169,4 +1178,152 @@ public void testInsertForDefaultColumn()\n     }\n \n     protected abstract TestTable createTableWithDefaultColumns();\n+\n+    @Test(dataProvider = \"testDataMappingSmokeTestDataProvider\")\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        String prestoTypeName = dataMappingTestSetup.getPrestoTypeName();\n+        String sampleValueLiteral = dataMappingTestSetup.getSampleValueLiteral();\n+        String highValueLiteral = dataMappingTestSetup.getHighValueLiteral();\n+\n+        String tableName = \"test_data_mapping_smoke_test_\" + prestoTypeName.replaceAll(\"[^a-zA-Z0-9]\", \"_\");\n+\n+        Runnable setup = () -> {\n+            String createTable = format(\"CREATE TABLE %s(id bigint, value %s)\", tableName, prestoTypeName);\n+            assertUpdate(createTable);\n+            assertUpdate(\n+                    format(\"INSERT INTO %s VALUES (10000, NULL), (10001, %s), (99999, %s)\", tableName, sampleValueLiteral, highValueLiteral),\n+                    3);\n+        };\n+        if (dataMappingTestSetup.isUnsupportedType()) {\n+            String typeNameBase = prestoTypeName.replaceFirst(\"\\\\(.*\", \"\");\n+            String expectedMessagePart = format(\"(%1$s.*not (yet )?supported)|((?i)unsupported.*%1$s)|((?i)not supported.*%1$s)\", Pattern.quote(typeNameBase));\n+            assertThatThrownBy(setup::run)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcxNzMwMg==", "bodyText": "ThrowingCallable is not assignable from Runnable", "url": "https://github.com/trinodb/trino/pull/3053#discussion_r392717302", "createdAt": "2020-03-15T22:02:54Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1169,4 +1178,152 @@ public void testInsertForDefaultColumn()\n     }\n \n     protected abstract TestTable createTableWithDefaultColumns();\n+\n+    @Test(dataProvider = \"testDataMappingSmokeTestDataProvider\")\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        String prestoTypeName = dataMappingTestSetup.getPrestoTypeName();\n+        String sampleValueLiteral = dataMappingTestSetup.getSampleValueLiteral();\n+        String highValueLiteral = dataMappingTestSetup.getHighValueLiteral();\n+\n+        String tableName = \"test_data_mapping_smoke_test_\" + prestoTypeName.replaceAll(\"[^a-zA-Z0-9]\", \"_\");\n+\n+        Runnable setup = () -> {\n+            String createTable = format(\"CREATE TABLE %s(id bigint, value %s)\", tableName, prestoTypeName);\n+            assertUpdate(createTable);\n+            assertUpdate(\n+                    format(\"INSERT INTO %s VALUES (10000, NULL), (10001, %s), (99999, %s)\", tableName, sampleValueLiteral, highValueLiteral),\n+                    3);\n+        };\n+        if (dataMappingTestSetup.isUnsupportedType()) {\n+            String typeNameBase = prestoTypeName.replaceFirst(\"\\\\(.*\", \"\");\n+            String expectedMessagePart = format(\"(%1$s.*not (yet )?supported)|((?i)unsupported.*%1$s)|((?i)not supported.*%1$s)\", Pattern.quote(typeNameBase));\n+            assertThatThrownBy(setup::run)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMjI2Mw=="}, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDExNDE3OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxOTowMzo0MVrOF2gphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxNzoyMlrOF2pbfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMjM0MA==", "bodyText": "10000 -> 1, 10001 -> 2, 99999 -> 3", "url": "https://github.com/trinodb/trino/pull/3053#discussion_r392702340", "createdAt": "2020-03-15T19:03:41Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1169,4 +1178,152 @@ public void testInsertForDefaultColumn()\n     }\n \n     protected abstract TestTable createTableWithDefaultColumns();\n+\n+    @Test(dataProvider = \"testDataMappingSmokeTestDataProvider\")\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        String prestoTypeName = dataMappingTestSetup.getPrestoTypeName();\n+        String sampleValueLiteral = dataMappingTestSetup.getSampleValueLiteral();\n+        String highValueLiteral = dataMappingTestSetup.getHighValueLiteral();\n+\n+        String tableName = \"test_data_mapping_smoke_test_\" + prestoTypeName.replaceAll(\"[^a-zA-Z0-9]\", \"_\");\n+\n+        Runnable setup = () -> {\n+            String createTable = format(\"CREATE TABLE %s(id bigint, value %s)\", tableName, prestoTypeName);\n+            assertUpdate(createTable);\n+            assertUpdate(\n+                    format(\"INSERT INTO %s VALUES (10000, NULL), (10001, %s), (99999, %s)\", tableName, sampleValueLiteral, highValueLiteral),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcxNzMyOQ==", "bodyText": "Why?", "url": "https://github.com/trinodb/trino/pull/3053#discussion_r392717329", "createdAt": "2020-03-15T22:03:13Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1169,4 +1178,152 @@ public void testInsertForDefaultColumn()\n     }\n \n     protected abstract TestTable createTableWithDefaultColumns();\n+\n+    @Test(dataProvider = \"testDataMappingSmokeTestDataProvider\")\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        String prestoTypeName = dataMappingTestSetup.getPrestoTypeName();\n+        String sampleValueLiteral = dataMappingTestSetup.getSampleValueLiteral();\n+        String highValueLiteral = dataMappingTestSetup.getHighValueLiteral();\n+\n+        String tableName = \"test_data_mapping_smoke_test_\" + prestoTypeName.replaceAll(\"[^a-zA-Z0-9]\", \"_\");\n+\n+        Runnable setup = () -> {\n+            String createTable = format(\"CREATE TABLE %s(id bigint, value %s)\", tableName, prestoTypeName);\n+            assertUpdate(createTable);\n+            assertUpdate(\n+                    format(\"INSERT INTO %s VALUES (10000, NULL), (10001, %s), (99999, %s)\", tableName, sampleValueLiteral, highValueLiteral),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMjM0MA=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwMTU4NQ==", "bodyText": "That way it is a bit easier. It is just nit.", "url": "https://github.com/trinodb/trino/pull/3053#discussion_r392801585", "createdAt": "2020-03-16T06:23:57Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1169,4 +1178,152 @@ public void testInsertForDefaultColumn()\n     }\n \n     protected abstract TestTable createTableWithDefaultColumns();\n+\n+    @Test(dataProvider = \"testDataMappingSmokeTestDataProvider\")\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        String prestoTypeName = dataMappingTestSetup.getPrestoTypeName();\n+        String sampleValueLiteral = dataMappingTestSetup.getSampleValueLiteral();\n+        String highValueLiteral = dataMappingTestSetup.getHighValueLiteral();\n+\n+        String tableName = \"test_data_mapping_smoke_test_\" + prestoTypeName.replaceAll(\"[^a-zA-Z0-9]\", \"_\");\n+\n+        Runnable setup = () -> {\n+            String createTable = format(\"CREATE TABLE %s(id bigint, value %s)\", tableName, prestoTypeName);\n+            assertUpdate(createTable);\n+            assertUpdate(\n+                    format(\"INSERT INTO %s VALUES (10000, NULL), (10001, %s), (99999, %s)\", tableName, sampleValueLiteral, highValueLiteral),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMjM0MA=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0MjMwNQ==", "bodyText": "IMO contrary -- 10001 or 99999 are easier to find than 1,2", "url": "https://github.com/trinodb/trino/pull/3053#discussion_r392842305", "createdAt": "2020-03-16T08:08:11Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1169,4 +1178,152 @@ public void testInsertForDefaultColumn()\n     }\n \n     protected abstract TestTable createTableWithDefaultColumns();\n+\n+    @Test(dataProvider = \"testDataMappingSmokeTestDataProvider\")\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        String prestoTypeName = dataMappingTestSetup.getPrestoTypeName();\n+        String sampleValueLiteral = dataMappingTestSetup.getSampleValueLiteral();\n+        String highValueLiteral = dataMappingTestSetup.getHighValueLiteral();\n+\n+        String tableName = \"test_data_mapping_smoke_test_\" + prestoTypeName.replaceAll(\"[^a-zA-Z0-9]\", \"_\");\n+\n+        Runnable setup = () -> {\n+            String createTable = format(\"CREATE TABLE %s(id bigint, value %s)\", tableName, prestoTypeName);\n+            assertUpdate(createTable);\n+            assertUpdate(\n+                    format(\"INSERT INTO %s VALUES (10000, NULL), (10001, %s), (99999, %s)\", tableName, sampleValueLiteral, highValueLiteral),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMjM0MA=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NjIwNA==", "bodyText": "This depends on what you are optimizing for.", "url": "https://github.com/trinodb/trino/pull/3053#discussion_r392846204", "createdAt": "2020-03-16T08:17:22Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1169,4 +1178,152 @@ public void testInsertForDefaultColumn()\n     }\n \n     protected abstract TestTable createTableWithDefaultColumns();\n+\n+    @Test(dataProvider = \"testDataMappingSmokeTestDataProvider\")\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        String prestoTypeName = dataMappingTestSetup.getPrestoTypeName();\n+        String sampleValueLiteral = dataMappingTestSetup.getSampleValueLiteral();\n+        String highValueLiteral = dataMappingTestSetup.getHighValueLiteral();\n+\n+        String tableName = \"test_data_mapping_smoke_test_\" + prestoTypeName.replaceAll(\"[^a-zA-Z0-9]\", \"_\");\n+\n+        Runnable setup = () -> {\n+            String createTable = format(\"CREATE TABLE %s(id bigint, value %s)\", tableName, prestoTypeName);\n+            assertUpdate(createTable);\n+            assertUpdate(\n+                    format(\"INSERT INTO %s VALUES (10000, NULL), (10001, %s), (99999, %s)\", tableName, sampleValueLiteral, highValueLiteral),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMjM0MA=="}, "originalCommit": null, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 540, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}