{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MTU3ODMx", "number": 6144, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowODoyOFrOE-zICA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowODozNlrOE-zIMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjg0ODA4OnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowODoyOFrOH8JjHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTowOTo1NVrOH8N8iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMzA1NA==", "bodyText": "issue?", "url": "https://github.com/trinodb/trino/pull/6144#discussion_r532833054", "createdAt": "2020-11-30T19:08:28Z", "author": {"login": "losipiuk"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixClient.java", "diffHunk": "@@ -274,15 +309,56 @@ protected String getTableSchemaName(ResultSet resultSet)\n     @Override\n     public Optional<ColumnMapping> toPrestoType(ConnectorSession session, Connection connection, JdbcTypeHandle typeHandle)\n     {\n+        int columnSize = typeHandle.getColumnSize();\n         switch (typeHandle.getJdbcType()) {\n+            case Types.BOOLEAN:\n+                return Optional.of(booleanColumnMapping());\n+\n+            case Types.TINYINT:\n+                return Optional.of(tinyintColumnMapping());\n+\n+            case Types.SMALLINT:\n+                return Optional.of(smallintColumnMapping());\n+\n+            case Types.INTEGER:\n+                return Optional.of(integerColumnMapping());\n+\n+            case Types.BIGINT:\n+                return Optional.of(bigintColumnMapping());\n+\n+            case Types.FLOAT:\n+                return Optional.of(realColumnMapping());\n+\n+            case Types.DOUBLE:\n+                return Optional.of(doubleColumnMapping());\n+\n+            case Types.DECIMAL:\n+                int decimalDigits = typeHandle.getDecimalDigits().orElseThrow(() -> new IllegalStateException(\"decimal digits not present\"));\n+                // TODO does phoenix support negative scale?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwNTA5Nw==", "bodyText": "i don't think it would help act on TODO, unless someone works on this connector explicitly. and then TODO should be fine.", "url": "https://github.com/trinodb/trino/pull/6144#discussion_r532905097", "createdAt": "2020-11-30T21:09:55Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixClient.java", "diffHunk": "@@ -274,15 +309,56 @@ protected String getTableSchemaName(ResultSet resultSet)\n     @Override\n     public Optional<ColumnMapping> toPrestoType(ConnectorSession session, Connection connection, JdbcTypeHandle typeHandle)\n     {\n+        int columnSize = typeHandle.getColumnSize();\n         switch (typeHandle.getJdbcType()) {\n+            case Types.BOOLEAN:\n+                return Optional.of(booleanColumnMapping());\n+\n+            case Types.TINYINT:\n+                return Optional.of(tinyintColumnMapping());\n+\n+            case Types.SMALLINT:\n+                return Optional.of(smallintColumnMapping());\n+\n+            case Types.INTEGER:\n+                return Optional.of(integerColumnMapping());\n+\n+            case Types.BIGINT:\n+                return Optional.of(bigintColumnMapping());\n+\n+            case Types.FLOAT:\n+                return Optional.of(realColumnMapping());\n+\n+            case Types.DOUBLE:\n+                return Optional.of(doubleColumnMapping());\n+\n+            case Types.DECIMAL:\n+                int decimalDigits = typeHandle.getDecimalDigits().orElseThrow(() -> new IllegalStateException(\"decimal digits not present\"));\n+                // TODO does phoenix support negative scale?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMzA1NA=="}, "originalCommit": null, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjg0ODUxOnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowODozNlrOH8JjYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTowNjo1NFrOH8N2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMzEyMA==", "bodyText": "issue?", "url": "https://github.com/trinodb/trino/pull/6144#discussion_r532833120", "createdAt": "2020-11-30T19:08:36Z", "author": {"login": "losipiuk"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixClient.java", "diffHunk": "@@ -314,12 +389,60 @@ protected String getTableSchemaName(ResultSet resultSet)\n     @Override\n     public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n     {\n-        if (DOUBLE.equals(type)) {\n-            return WriteMapping.doubleMapping(\"double\", doubleWriteFunction());\n+        if (type == BOOLEAN) {\n+            return WriteMapping.booleanMapping(\"boolean\", booleanWriteFunction());\n         }\n-        if (REAL.equals(type)) {\n+\n+        if (type == TINYINT) {\n+            return WriteMapping.longMapping(\"tinyint\", tinyintWriteFunction());\n+        }\n+        if (type == SMALLINT) {\n+            return WriteMapping.longMapping(\"smallint\", smallintWriteFunction());\n+        }\n+        if (type == INTEGER) {\n+            return WriteMapping.longMapping(\"integer\", integerWriteFunction());\n+        }\n+        if (type == BIGINT) {\n+            return WriteMapping.longMapping(\"bigint\", bigintWriteFunction());\n+        }\n+        if (type == REAL) {\n             return WriteMapping.longMapping(\"float\", realWriteFunction());\n         }\n+        if (type == DOUBLE) {\n+            return WriteMapping.doubleMapping(\"double\", doubleWriteFunction());\n+        }\n+\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            String dataType = format(\"decimal(%s, %s)\", decimalType.getPrecision(), decimalType.getScale());\n+            if (decimalType.isShort()) {\n+                return WriteMapping.longMapping(dataType, shortDecimalWriteFunction(decimalType));\n+            }\n+            return WriteMapping.sliceMapping(dataType, longDecimalWriteFunction(decimalType));\n+        }\n+\n+        if (type instanceof CharType) {\n+            return WriteMapping.sliceMapping(\"char(\" + ((CharType) type).getLength() + \")\", charWriteFunction());\n+        }\n+        if (type instanceof VarcharType) {\n+            VarcharType varcharType = (VarcharType) type;\n+            String dataType;\n+            if (varcharType.isUnbounded()) {\n+                // TODO does Phoenix support unparameterized varchar?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwMzU5OA==", "bodyText": "i need to remove this TODO, per #6121 (comment)", "url": "https://github.com/trinodb/trino/pull/6144#discussion_r532903598", "createdAt": "2020-11-30T21:06:54Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixClient.java", "diffHunk": "@@ -314,12 +389,60 @@ protected String getTableSchemaName(ResultSet resultSet)\n     @Override\n     public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n     {\n-        if (DOUBLE.equals(type)) {\n-            return WriteMapping.doubleMapping(\"double\", doubleWriteFunction());\n+        if (type == BOOLEAN) {\n+            return WriteMapping.booleanMapping(\"boolean\", booleanWriteFunction());\n         }\n-        if (REAL.equals(type)) {\n+\n+        if (type == TINYINT) {\n+            return WriteMapping.longMapping(\"tinyint\", tinyintWriteFunction());\n+        }\n+        if (type == SMALLINT) {\n+            return WriteMapping.longMapping(\"smallint\", smallintWriteFunction());\n+        }\n+        if (type == INTEGER) {\n+            return WriteMapping.longMapping(\"integer\", integerWriteFunction());\n+        }\n+        if (type == BIGINT) {\n+            return WriteMapping.longMapping(\"bigint\", bigintWriteFunction());\n+        }\n+        if (type == REAL) {\n             return WriteMapping.longMapping(\"float\", realWriteFunction());\n         }\n+        if (type == DOUBLE) {\n+            return WriteMapping.doubleMapping(\"double\", doubleWriteFunction());\n+        }\n+\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            String dataType = format(\"decimal(%s, %s)\", decimalType.getPrecision(), decimalType.getScale());\n+            if (decimalType.isShort()) {\n+                return WriteMapping.longMapping(dataType, shortDecimalWriteFunction(decimalType));\n+            }\n+            return WriteMapping.sliceMapping(dataType, longDecimalWriteFunction(decimalType));\n+        }\n+\n+        if (type instanceof CharType) {\n+            return WriteMapping.sliceMapping(\"char(\" + ((CharType) type).getLength() + \")\", charWriteFunction());\n+        }\n+        if (type instanceof VarcharType) {\n+            VarcharType varcharType = (VarcharType) type;\n+            String dataType;\n+            if (varcharType.isUnbounded()) {\n+                // TODO does Phoenix support unparameterized varchar?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMzEyMA=="}, "originalCommit": null, "originalPosition": 188}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4713, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}