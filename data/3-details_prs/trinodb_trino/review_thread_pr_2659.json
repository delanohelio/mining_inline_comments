{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Mjc2MTAy", "number": 2659, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNDo1MzozM1rODbc5vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo1MTowMFrODb30Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTExNjc5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNDo1MzozM1rOFi8jhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjoxMDozMlrOFjZTAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4ODAzOA==", "bodyText": "I think we should extend DynamicFiltersChecker to verify that there are no DFs at Join operator and add a test to TestDynamicFiltersChecker", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372188038", "createdAt": "2020-01-29T04:53:33Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -127,7 +127,7 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n                         right,\n                         node.getCriteria(),\n                         node.getOutputSymbols(),\n-                        node.getFilter(),\n+                        node.getFilter().map(this::removeAllDynamicFilters),  // no DF support at Join operators.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1ODk0Ng==", "bodyText": "Good point, fixed below.", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372658946", "createdAt": "2020-01-29T22:10:32Z", "author": {"login": "rzeyde-varada"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -127,7 +127,7 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n                         right,\n                         node.getCriteria(),\n                         node.getOutputSymbols(),\n-                        node.getFilter(),\n+                        node.getFilter().map(this::removeAllDynamicFilters),  // no DF support at Join operators.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4ODAzOA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTEyMTU4OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNDo1NzowNVrOFi8mPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjoxMDoyNlrOFjZS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4ODczMw==", "bodyText": "Since it's a planner bug, it will be better to add the test in TestDynamicFilter instead and verify that we get expected plan there. Once DynamicFiltersChecker is extended to cover this case, that will also ensure that we don't get beyond planning stage if wrong plan is generated.", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372188733", "createdAt": "2020-01-29T04:57:05Z", "author": {"login": "raunaqmorarka"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -136,6 +137,25 @@ public void testJoinDynamicFilteringSingleValue()\n         assertEquals(rowsRead, ImmutableSet.of(6L, buildSideRowsCount));\n     }\n \n+    @Test\n+    public void testJoinDynamicFilteringMultiJoin()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1ODg5Ng==", "bodyText": "Sounds good - added TestDynamicFilter#testNonPushedDownJoinFilterRemoval.", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372658896", "createdAt": "2020-01-29T22:10:26Z", "author": {"login": "rzeyde-varada"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -136,6 +137,25 @@ public void testJoinDynamicFilteringSingleValue()\n         assertEquals(rowsRead, ImmutableSet.of(6L, buildSideRowsCount));\n     }\n \n+    @Test\n+    public void testJoinDynamicFilteringMultiJoin()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4ODczMw=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTQ5NjM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0MTowMFrOFjmf0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDozODoyNVrOFjtPQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTIxOQ==", "bodyText": "Could you inline PlanMatchPattern here ? It's easier to see the plan shape when there is only one pattern to look at, similar to the other test cases", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372875219", "createdAt": "2020-01-30T10:41:00Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -259,6 +261,33 @@ public void testNestedDynamicFiltersRemoval()\n                                                         tableScan(\"orders\", ImmutableMap.of(\"ORDERS_CK27\", \"clerk\"))))), metadata)));\n     }\n \n+    @Test\n+    public void testNonPushedDownJoinFilterRemoval()\n+    {\n+        PlanMatchPattern t0 = project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K0\", \"partkey\", \"V0\", \"size\"))));\n+        PlanMatchPattern t1 = exchange(project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K1\", \"partkey\", \"V1\", \"size\")))));\n+        PlanMatchPattern t2 = exchange(project(\n+                tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\"))));\n+\n+        PlanMatchPattern join1 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K1\")),\n+                t0, t1);\n+        PlanMatchPattern project1 = project(project(ImmutableMap.of(\"S\", expression(\"V0 + V1\")), join1));\n+        PlanMatchPattern join2 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K2\"), equiJoinClause(\"S\", \"V2\")),\n+                project1, t2);\n+        PlanMatchPattern matcher = anyTree(project(join2));\n+\n+        assertPlan(\"SELECT 1 FROM part t0, part t1, part t2 \" +\n+                        \"WHERE t0.partkey = t1.partkey AND t0.partkey = t2.partkey \" +\n+                        \"AND t0.size + t1.size = t2.size\",\n+                noJoinReordering(), matcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NTY2NQ==", "bodyText": "You're right, fixed.", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372985665", "createdAt": "2020-01-30T14:38:25Z", "author": {"login": "rzeyde-varada"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -259,6 +261,33 @@ public void testNestedDynamicFiltersRemoval()\n                                                         tableScan(\"orders\", ImmutableMap.of(\"ORDERS_CK27\", \"clerk\"))))), metadata)));\n     }\n \n+    @Test\n+    public void testNonPushedDownJoinFilterRemoval()\n+    {\n+        PlanMatchPattern t0 = project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K0\", \"partkey\", \"V0\", \"size\"))));\n+        PlanMatchPattern t1 = exchange(project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K1\", \"partkey\", \"V1\", \"size\")))));\n+        PlanMatchPattern t2 = exchange(project(\n+                tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\"))));\n+\n+        PlanMatchPattern join1 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K1\")),\n+                t0, t1);\n+        PlanMatchPattern project1 = project(project(ImmutableMap.of(\"S\", expression(\"V0 + V1\")), join1));\n+        PlanMatchPattern join2 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K2\"), equiJoinClause(\"S\", \"V2\")),\n+                project1, t2);\n+        PlanMatchPattern matcher = anyTree(project(join2));\n+\n+        assertPlan(\"SELECT 1 FROM part t0, part t1, part t2 \" +\n+                        \"WHERE t0.partkey = t1.partkey AND t0.partkey = t2.partkey \" +\n+                        \"AND t0.size + t1.size = t2.size\",\n+                noJoinReordering(), matcher);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTIxOQ=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTUxODUyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0ODoxNFrOFjmtVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDo0MToyNVrOFjtWQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3ODY3Ng==", "bodyText": "I would use:\n.filter(expression -> !expression.equals(TRUE_LITERAL))\n\ninstead.", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372878676", "createdAt": "2020-01-30T10:48:14Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -120,14 +121,17 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n             PlanNode left = leftResult.getNode();\n             PlanNode right = rightResult.getNode();\n             if (!left.equals(node.getLeft()) || !right.equals(node.getRight()) || !dynamicFilters.equals(node.getDynamicFilters())) {\n+                Optional<Expression> filter = node\n+                        .getFilter().map(this::removeAllDynamicFilters)  // no DF support at Join operators.\n+                        .flatMap(expression -> expression.equals(TRUE_LITERAL) ? Optional.empty() : Optional.of(expression));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NzQ1OA==", "bodyText": "Thanks, fixed.", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372987458", "createdAt": "2020-01-30T14:41:25Z", "author": {"login": "rzeyde-varada"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -120,14 +121,17 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n             PlanNode left = leftResult.getNode();\n             PlanNode right = rightResult.getNode();\n             if (!left.equals(node.getLeft()) || !right.equals(node.getRight()) || !dynamicFilters.equals(node.getDynamicFilters())) {\n+                Optional<Expression> filter = node\n+                        .getFilter().map(this::removeAllDynamicFilters)  // no DF support at Join operators.\n+                        .flatMap(expression -> expression.equals(TRUE_LITERAL) ? Optional.empty() : Optional.of(expression));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3ODY3Ng=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTUyNjc0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo1MTowMVrOFjmymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDozODo0MFrOFjtP2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4MDAyNw==", "bodyText": "put this in new line", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372880027", "createdAt": "2020-01-30T10:51:01Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -259,6 +261,33 @@ public void testNestedDynamicFiltersRemoval()\n                                                         tableScan(\"orders\", ImmutableMap.of(\"ORDERS_CK27\", \"clerk\"))))), metadata)));\n     }\n \n+    @Test\n+    public void testNonPushedDownJoinFilterRemoval()\n+    {\n+        PlanMatchPattern t0 = project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K0\", \"partkey\", \"V0\", \"size\"))));\n+        PlanMatchPattern t1 = exchange(project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K1\", \"partkey\", \"V1\", \"size\")))));\n+        PlanMatchPattern t2 = exchange(project(\n+                tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\"))));\n+\n+        PlanMatchPattern join1 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K1\")),\n+                t0, t1);\n+        PlanMatchPattern project1 = project(project(ImmutableMap.of(\"S\", expression(\"V0 + V1\")), join1));\n+        PlanMatchPattern join2 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K2\"), equiJoinClause(\"S\", \"V2\")),\n+                project1, t2);\n+        PlanMatchPattern matcher = anyTree(project(join2));\n+\n+        assertPlan(\"SELECT 1 FROM part t0, part t1, part t2 \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NTgxOQ==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372985819", "createdAt": "2020-01-30T14:38:40Z", "author": {"login": "rzeyde-varada"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -259,6 +261,33 @@ public void testNestedDynamicFiltersRemoval()\n                                                         tableScan(\"orders\", ImmutableMap.of(\"ORDERS_CK27\", \"clerk\"))))), metadata)));\n     }\n \n+    @Test\n+    public void testNonPushedDownJoinFilterRemoval()\n+    {\n+        PlanMatchPattern t0 = project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K0\", \"partkey\", \"V0\", \"size\"))));\n+        PlanMatchPattern t1 = exchange(project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K1\", \"partkey\", \"V1\", \"size\")))));\n+        PlanMatchPattern t2 = exchange(project(\n+                tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\"))));\n+\n+        PlanMatchPattern join1 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K1\")),\n+                t0, t1);\n+        PlanMatchPattern project1 = project(project(ImmutableMap.of(\"S\", expression(\"V0 + V1\")), join1));\n+        PlanMatchPattern join2 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K2\"), equiJoinClause(\"S\", \"V2\")),\n+                project1, t2);\n+        PlanMatchPattern matcher = anyTree(project(join2));\n+\n+        assertPlan(\"SELECT 1 FROM part t0, part t1, part t2 \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4MDAyNw=="}, "originalCommit": null, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 965, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}