{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODEyMTMw", "number": 3564, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODoxNlrOD3Ez4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTo0MzoxNlrOD3Wj1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDc3MDkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Correlation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODoxNlrOGNH9xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjowNzoxMFrOGOGLGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNTE3NQ==", "bodyText": "This is very generic name, however I can't think of any better though...", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416415175", "createdAt": "2020-04-28T08:08:16Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Correlation.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.analyzer;\n+\n+public enum Correlation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNDM5Mw==", "bodyText": "Renamed to CorrelationSupport", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r417434393", "createdAt": "2020-04-29T16:07:10Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Correlation.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.analyzer;\n+\n+public enum Correlation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNTE3NQ=="}, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDc3OTU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODoxMDozM1rOGNIDIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo0OToxNlrOGNU-bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNjU0Nw==", "bodyText": "Is it DISALLOWED because planner cannot handle them or ANSI SQL disallows such queries? I think we need to distinguish these two situations with different error messages.", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416416547", "createdAt": "2020-04-28T08:10:33Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1450,7 +1455,7 @@ else if (node.getType() == FULL) {\n                 Expression expression = ((JoinOn) criteria).getExpression();\n \n                 // need to register coercions in case when join criteria requires coercion (e.g. join on char(1) = char(2))\n-                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output);\n+                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output, node.getType() == INNER ? Correlation.ALLOWED : Correlation.DISALLOWED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyODMzNQ==", "bodyText": "It\u2019s disallowed from a planner/analyzer perspective. I\u2019m not aware of any case that\u2019s disallowed by the spec", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416628335", "createdAt": "2020-04-28T13:49:16Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1450,7 +1455,7 @@ else if (node.getType() == FULL) {\n                 Expression expression = ((JoinOn) criteria).getExpression();\n \n                 // need to register coercions in case when join criteria requires coercion (e.g. join on char(1) = char(2))\n-                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output);\n+                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output, node.getType() == INNER ? Correlation.ALLOWED : Correlation.DISALLOWED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNjU0Nw=="}, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzY0ODc5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozNDo0NVrOGNjyIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozNDo0NVrOGNjyIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MDk0Nw==", "bodyText": "inline this constructor, there is just 1 call site left", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416870947", "createdAt": "2020-04-28T19:34:45Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -213,6 +214,20 @@ public ExpressionAnalyzer(\n             Map<NodeRef<Parameter>, Expression> parameters,\n             WarningCollector warningCollector,\n             boolean isDescribe)\n+    {\n+        this(metadata, accessControl, statementAnalyzerFactory, session, symbolTypes, parameters, warningCollector, isDescribe, Correlation.ALLOWED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzY1MDM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozNToxOFrOGNjzMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjowOToxMlrOGOGQaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MTIxOQ==", "bodyText": "\"correlation\" sounds like an actual occurances of a correlation (like correlated identifier(s))\nit's not meaningful.\nif we cannot find a better name, boolean correlationAllowed would be better", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416871219", "createdAt": "2020-04-28T19:35:18Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -213,6 +214,20 @@ public ExpressionAnalyzer(\n             Map<NodeRef<Parameter>, Expression> parameters,\n             WarningCollector warningCollector,\n             boolean isDescribe)\n+    {\n+        this(metadata, accessControl, statementAnalyzerFactory, session, symbolTypes, parameters, warningCollector, isDescribe, Correlation.ALLOWED);\n+    }\n+\n+    public ExpressionAnalyzer(\n+            Metadata metadata,\n+            AccessControl accessControl,\n+            Function<Node, StatementAnalyzer> statementAnalyzerFactory,\n+            Session session,\n+            TypeProvider symbolTypes,\n+            Map<NodeRef<Parameter>, Expression> parameters,\n+            WarningCollector warningCollector,\n+            boolean isDescribe,\n+            Correlation correlation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNTc1Mg==", "bodyText": "Renamed to correlationSupport. I chose not to use a boolean because it's easy to confuse with isDescribe above and very error prone.", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r417435752", "createdAt": "2020-04-29T16:09:12Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -213,6 +214,20 @@ public ExpressionAnalyzer(\n             Map<NodeRef<Parameter>, Expression> parameters,\n             WarningCollector warningCollector,\n             boolean isDescribe)\n+    {\n+        this(metadata, accessControl, statementAnalyzerFactory, session, symbolTypes, parameters, warningCollector, isDescribe, Correlation.ALLOWED);\n+    }\n+\n+    public ExpressionAnalyzer(\n+            Metadata metadata,\n+            AccessControl accessControl,\n+            Function<Node, StatementAnalyzer> statementAnalyzerFactory,\n+            Session session,\n+            TypeProvider symbolTypes,\n+            Map<NodeRef<Parameter>, Expression> parameters,\n+            WarningCollector warningCollector,\n+            boolean isDescribe,\n+            Correlation correlation)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MTIxOQ=="}, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzY2NzAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/SubqueryPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozOTo1MlrOGNj9gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozOTo1MlrOGNj9gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3Mzg1Nw==", "bodyText": "looks like handleUncorrelatedSubqueries and handleSubqueries can now be merged into single method", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416873857", "createdAt": "2020-04-28T19:39:52Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/SubqueryPlanner.java", "diffHunk": "@@ -103,30 +101,25 @@\n     public PlanBuilder handleSubqueries(PlanBuilder builder, Collection<Expression> expressions, Node node)\n     {\n         for (Expression expression : expressions) {\n-            builder = handleSubqueries(builder, expression, node, true);\n+            builder = handleSubqueries(builder, expression, node);\n         }\n         return builder;\n     }\n \n     public PlanBuilder handleUncorrelatedSubqueries(PlanBuilder builder, Collection<Expression> expressions, Node node)\n     {\n         for (Expression expression : expressions) {\n-            builder = handleSubqueries(builder, expression, node, false);\n+            builder = handleSubqueries(builder, expression, node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzY3NDAyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTo0MTo0NlrOGNkCCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTo0MTo0NlrOGNkCCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3NTAxOQ==", "bodyText": "it's nice this code line has a (preexisting) comment, but please  add a comment how the processing depends on the join type", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416875019", "createdAt": "2020-04-28T19:41:46Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1450,7 +1455,7 @@ else if (node.getType() == FULL) {\n                 Expression expression = ((JoinOn) criteria).getExpression();\n \n                 // need to register coercions in case when join criteria requires coercion (e.g. join on char(1) = char(2))\n-                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output);\n+                ExpressionAnalysis expressionAnalysis = analyzeExpression(expression, output, node.getType() == INNER ? Correlation.ALLOWED : Correlation.DISALLOWED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzY3ODkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTo0MzoxNlrOGNkFOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTo0MzoxNlrOGNkFOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3NTgzMg==", "bodyText": "\"from outer scope\" ?", "url": "https://github.com/trinodb/trino/pull/3564#discussion_r416875832", "createdAt": "2020-04-28T19:43:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -411,6 +427,10 @@ protected Type visitIdentifier(Identifier node, StackableAstVisitorContext<Conte\n \n         private Type handleResolvedField(Expression node, ResolvedField resolvedField, StackableAstVisitorContext<Context> context)\n         {\n+            if (!resolvedField.isLocal() && correlation != Correlation.ALLOWED) {\n+                throw semanticException(NOT_SUPPORTED, node, \"Reference to column '%s' in outer scope not allowed in this context\", node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671ebf093999451aee100ba35ebbef725060e17c"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4966, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}