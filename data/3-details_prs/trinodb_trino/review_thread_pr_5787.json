{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0Mzk0OTY5", "number": 5787, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzo0MToyMlrOE0mYwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODo0MToyN1rOE0tF8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTkwMzM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzo0MToyMlrOHsarwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNTozNFrOHs9pcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNjU3Ng==", "bodyText": "Unrelated to this commit", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516336576", "createdAt": "2020-11-02T23:41:22Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1275,8 +1275,10 @@ public void testLeast()\n     public void testGreatestWithNaN()\n     {\n         assertFunction(\"greatest(1.5E0, 0.0E0 / 0.0E0)\", DOUBLE, Double.NaN);\n+        assertFunction(\"greatest(1.5E0, 0.0E0 / 0.0E0, 2.7E0)\", DOUBLE, Double.NaN);\n         assertFunction(\"greatest(1.5E0, REAL '0.0' / REAL '0.0')\", DOUBLE, Double.NaN);\n-        assertFunction(\"greatest(null, REAL '0.0' / REAL '0.0')\", REAL, Float.NaN);\n+        assertFunction(\"greatest(1.5E0, REAL '0.0' / REAL '0.0', 2.7E0)\", DOUBLE, Double.NaN);\n+        assertFunction(\"greatest(null, REAL '0.0' / REAL '0.0')\", REAL, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8c195af01c548d1b02c18b822a4a5382741e79"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTQyNA==", "bodyText": "It's testing that the loop condition handling is correct when there are more than two values.", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516909424", "createdAt": "2020-11-03T19:35:34Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1275,8 +1275,10 @@ public void testLeast()\n     public void testGreatestWithNaN()\n     {\n         assertFunction(\"greatest(1.5E0, 0.0E0 / 0.0E0)\", DOUBLE, Double.NaN);\n+        assertFunction(\"greatest(1.5E0, 0.0E0 / 0.0E0, 2.7E0)\", DOUBLE, Double.NaN);\n         assertFunction(\"greatest(1.5E0, REAL '0.0' / REAL '0.0')\", DOUBLE, Double.NaN);\n-        assertFunction(\"greatest(null, REAL '0.0' / REAL '0.0')\", REAL, Float.NaN);\n+        assertFunction(\"greatest(1.5E0, REAL '0.0' / REAL '0.0', 2.7E0)\", DOUBLE, Double.NaN);\n+        assertFunction(\"greatest(null, REAL '0.0' / REAL '0.0')\", REAL, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNjU3Ng=="}, "originalCommit": {"oid": "3a8c195af01c548d1b02c18b822a4a5382741e79"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk3MzE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozMjo1NVrOHskU-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0MDoxMFrOHs9y-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NDU4NQ==", "bodyText": "You do not even need to add a new test, nice.", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516494585", "createdAt": "2020-11-03T08:32:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMTg2NA==", "bodyText": "I'm not sure what this comment means.", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516911864", "createdAt": "2020-11-03T19:40:10Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NDU4NQ=="}, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk3NTYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozMzo0MlrOHskWgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozMzo0MlrOHskWgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NDk3OQ==", "bodyText": "// real", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516494979", "createdAt": "2020-11-03T08:33:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // smallint\n         assertFunction(\"greatest(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 2);\n         assertFunction(\"greatest(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -1);\n         assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 5);\n         assertFunction(\"greatest(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 5);\n+        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"greatest(1, 2)\", INTEGER, 2);\n         assertFunction(\"greatest(-1, -2)\", INTEGER, -1);\n         assertFunction(\"greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 5);\n         assertFunction(\"greatest(-1)\", INTEGER, -1);\n-        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 5);\n+        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"greatest(10000000000, 20000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"greatest(-10000000000, -20000000000)\", BIGINT, -10000000000L);\n         assertFunction(\"greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)\", BIGINT, 5000000000L);\n         assertFunction(\"greatest(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, 5000000000L);\n+        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n-        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk3ODc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNDozOFrOHskYXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDo1OToxM1rOHuxYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NTQ1Mw==", "bodyText": "This is a test case for DOUBLE.\nMake it into a test case for REAL:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n          \n          \n            \n                    assertFunction(\"greatest(5, REAL '4', CAST(NULL AS real), 3)\", REAL, null);", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516495453", "createdAt": "2020-11-03T08:34:38Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // smallint\n         assertFunction(\"greatest(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 2);\n         assertFunction(\"greatest(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -1);\n         assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 5);\n         assertFunction(\"greatest(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 5);\n+        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"greatest(1, 2)\", INTEGER, 2);\n         assertFunction(\"greatest(-1, -2)\", INTEGER, -1);\n         assertFunction(\"greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 5);\n         assertFunction(\"greatest(-1)\", INTEGER, -1);\n-        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 5);\n+        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"greatest(10000000000, 20000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"greatest(-10000000000, -20000000000)\", BIGINT, -10000000000L);\n         assertFunction(\"greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)\", BIGINT, 5000000000L);\n         assertFunction(\"greatest(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, 5000000000L);\n+        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n-        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float\n         assertFunction(\"greatest(REAL '1.5', 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(REAL '-1.5', -2.3E0)\", DOUBLE, (double) -1.5f);\n         assertFunction(\"greatest(-1.5E0, REAL '-2.3', -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(REAL '1.5', REAL '-1.0' / 0.0E0, 1.0E0 / REAL '0.0')\", DOUBLE, (double) (1.0f / 0.0f));\n-        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NzMzNQ==", "bodyText": "Actually the cases above are also for DOUBLE, not REAL", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516497335", "createdAt": "2020-11-03T08:38:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // smallint\n         assertFunction(\"greatest(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 2);\n         assertFunction(\"greatest(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -1);\n         assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 5);\n         assertFunction(\"greatest(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 5);\n+        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"greatest(1, 2)\", INTEGER, 2);\n         assertFunction(\"greatest(-1, -2)\", INTEGER, -1);\n         assertFunction(\"greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 5);\n         assertFunction(\"greatest(-1)\", INTEGER, -1);\n-        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 5);\n+        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"greatest(10000000000, 20000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"greatest(-10000000000, -20000000000)\", BIGINT, -10000000000L);\n         assertFunction(\"greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)\", BIGINT, 5000000000L);\n         assertFunction(\"greatest(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, 5000000000L);\n+        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n-        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float\n         assertFunction(\"greatest(REAL '1.5', 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(REAL '-1.5', -2.3E0)\", DOUBLE, (double) -1.5f);\n         assertFunction(\"greatest(-1.5E0, REAL '-2.3', -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(REAL '1.5', REAL '-1.0' / 0.0E0, 1.0E0 / REAL '0.0')\", DOUBLE, (double) (1.0f / 0.0f));\n-        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NTQ1Mw=="}, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwNTU5Ng==", "bodyText": "This remained unanswered, so we don't have a test for NULL with REAL type just yet.", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r518805596", "createdAt": "2020-11-06T14:59:13Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // smallint\n         assertFunction(\"greatest(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 2);\n         assertFunction(\"greatest(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -1);\n         assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 5);\n         assertFunction(\"greatest(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 5);\n+        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"greatest(1, 2)\", INTEGER, 2);\n         assertFunction(\"greatest(-1, -2)\", INTEGER, -1);\n         assertFunction(\"greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 5);\n         assertFunction(\"greatest(-1)\", INTEGER, -1);\n-        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 5);\n+        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"greatest(10000000000, 20000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"greatest(-10000000000, -20000000000)\", BIGINT, -10000000000L);\n         assertFunction(\"greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)\", BIGINT, 5000000000L);\n         assertFunction(\"greatest(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, 5000000000L);\n+        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n-        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float\n         assertFunction(\"greatest(REAL '1.5', 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(REAL '-1.5', -2.3E0)\", DOUBLE, (double) -1.5f);\n         assertFunction(\"greatest(-1.5E0, REAL '-2.3', -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(REAL '1.5', REAL '-1.0' / 0.0E0, 1.0E0 / REAL '0.0')\", DOUBLE, (double) (1.0f / 0.0f));\n-        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NTQ1Mw=="}, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk4MzM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNTo1NFrOHskbIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1Njo1NlrOHtGk9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjE2MQ==", "bodyText": "Add a greatest and least test cases for DOUBLE and REAL with 1,NaN,3 and 1,NULL,NaN,4", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516496161", "createdAt": "2020-11-03T08:35:54Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // smallint\n         assertFunction(\"greatest(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 2);\n         assertFunction(\"greatest(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -1);\n         assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 5);\n         assertFunction(\"greatest(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 5);\n+        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"greatest(1, 2)\", INTEGER, 2);\n         assertFunction(\"greatest(-1, -2)\", INTEGER, -1);\n         assertFunction(\"greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 5);\n         assertFunction(\"greatest(-1)\", INTEGER, -1);\n-        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 5);\n+        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"greatest(10000000000, 20000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"greatest(-10000000000, -20000000000)\", BIGINT, -10000000000L);\n         assertFunction(\"greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)\", BIGINT, 5000000000L);\n         assertFunction(\"greatest(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, 5000000000L);\n+        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n-        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NTczMw==", "bodyText": "This PR only covers restoring null behavior.  NaN can be in another PR", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r517055733", "createdAt": "2020-11-04T01:56:56Z", "author": {"login": "dain"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1142,42 +1142,42 @@ public void testGreatest()\n         assertFunction(\"greatest(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -1);\n         assertFunction(\"greatest(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 5);\n         assertFunction(\"greatest(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 5);\n+        assertFunction(\"greatest(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // smallint\n         assertFunction(\"greatest(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 2);\n         assertFunction(\"greatest(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -1);\n         assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 5);\n         assertFunction(\"greatest(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 5);\n+        assertFunction(\"greatest(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"greatest(1, 2)\", INTEGER, 2);\n         assertFunction(\"greatest(-1, -2)\", INTEGER, -1);\n         assertFunction(\"greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 5);\n         assertFunction(\"greatest(-1)\", INTEGER, -1);\n-        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 5);\n+        assertFunction(\"greatest(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"greatest(10000000000, 20000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"greatest(-10000000000, -20000000000)\", BIGINT, -10000000000L);\n         assertFunction(\"greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)\", BIGINT, 5000000000L);\n         assertFunction(\"greatest(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, 5000000000L);\n+        assertFunction(\"greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n         assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n-        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjE2MQ=="}, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk4NTI1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNjozMVrOHskcSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTowMDo0NFrOHtAR4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjQ1OA==", "bodyText": "Duplicate test case?", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516496458", "createdAt": "2020-11-03T08:36:31Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1190,8 +1190,8 @@ public void testGreatest()\n         assertFunction(\"greatest(1.0E0, 2)\", DOUBLE, 2.0);\n         assertFunction(\"greatest(1, 2.0E0)\", DOUBLE, 2.0);\n         assertFunction(\"greatest(1.0E0, 2)\", DOUBLE, 2.0);\n-        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n-        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n+        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNzk0OQ==", "bodyText": "Duplicate with what? They are different input types", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516907949", "createdAt": "2020-11-03T19:32:51Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1190,8 +1190,8 @@ public void testGreatest()\n         assertFunction(\"greatest(1.0E0, 2)\", DOUBLE, 2.0);\n         assertFunction(\"greatest(1, 2.0E0)\", DOUBLE, 2.0);\n         assertFunction(\"greatest(1.0E0, 2)\", DOUBLE, 2.0);\n-        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n-        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n+        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjQ1OA=="}, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1MjU0Ng==", "bodyText": "The two lines\nassertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\nassertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, null);\n\nare probably equivalent from greatest function perspective (with and without a coercion, but does that matter?)", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516952546", "createdAt": "2020-11-03T21:00:44Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1190,8 +1190,8 @@ public void testGreatest()\n         assertFunction(\"greatest(1.0E0, 2)\", DOUBLE, 2.0);\n         assertFunction(\"greatest(1, 2.0E0)\", DOUBLE, 2.0);\n         assertFunction(\"greatest(1.0E0, 2)\", DOUBLE, 2.0);\n-        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 5.0);\n-        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n+        assertFunction(\"greatest(5.0E0, 4, CAST(NULL as BIGINT), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjQ1OA=="}, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk4NTcwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNjozOVrOHskcjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNjozOVrOHskcjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjUyNw==", "bodyText": "// real", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516496527", "createdAt": "2020-11-03T08:36:39Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1214,42 +1214,42 @@ public void testLeast()\n         assertFunction(\"least(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -2);\n         assertFunction(\"least(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 1);\n         assertFunction(\"least(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 3);\n+        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // integer\n         assertFunction(\"least(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -2);\n         assertFunction(\"least(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 3);\n+        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"least(1, 2)\", INTEGER, 1);\n         assertFunction(\"least(-1, -2)\", INTEGER, -2);\n         assertFunction(\"least(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 1);\n         assertFunction(\"least(-1)\", INTEGER, -1);\n-        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 3);\n+        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"least(10000000000, 20000000000)\", BIGINT, 10000000000L);\n         assertFunction(\"least(-10000000000, -20000000000)\", BIGINT, -20000000000L);\n         assertFunction(\"least(50000000000, 40000000000, 30000000000, 20000000000, 50000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"least(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, 300000000L);\n+        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"least(1.5E0, 2.3E0)\", DOUBLE, 1.5);\n         assertFunction(\"least(-1.5E0, -2.3E0)\", DOUBLE, -2.3);\n         assertFunction(\"least(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -2.3);\n         assertFunction(\"least(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.NEGATIVE_INFINITY);\n-        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 3.0);\n+        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk4ODI2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNzoyM1rOHskeCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozODoxOFrOHskf1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjkwNA==", "bodyText": "This is a test case for DOUBLE.\nMake it into a test case for REAL:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFunction(\"least(REAL '5', 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n          \n          \n            \n                    assertFunction(\"least(REAL '5', 4, CAST(NULL AS real), 3)\", REAL, null);", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516496904", "createdAt": "2020-11-03T08:37:23Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1214,42 +1214,42 @@ public void testLeast()\n         assertFunction(\"least(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -2);\n         assertFunction(\"least(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 1);\n         assertFunction(\"least(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 3);\n+        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // integer\n         assertFunction(\"least(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -2);\n         assertFunction(\"least(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 3);\n+        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"least(1, 2)\", INTEGER, 1);\n         assertFunction(\"least(-1, -2)\", INTEGER, -2);\n         assertFunction(\"least(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 1);\n         assertFunction(\"least(-1)\", INTEGER, -1);\n-        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 3);\n+        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"least(10000000000, 20000000000)\", BIGINT, 10000000000L);\n         assertFunction(\"least(-10000000000, -20000000000)\", BIGINT, -20000000000L);\n         assertFunction(\"least(50000000000, 40000000000, 30000000000, 20000000000, 50000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"least(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, 300000000L);\n+        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"least(1.5E0, 2.3E0)\", DOUBLE, 1.5);\n         assertFunction(\"least(-1.5E0, -2.3E0)\", DOUBLE, -2.3);\n         assertFunction(\"least(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -2.3);\n         assertFunction(\"least(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.NEGATIVE_INFINITY);\n-        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 3.0);\n+        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float\n         assertFunction(\"least(REAL '1.5', 2.3E0)\", DOUBLE, (double) 1.5f);\n         assertFunction(\"least(REAL '-1.5', -2.3E0)\", DOUBLE, -2.3);\n         assertFunction(\"least(-2.3E0, REAL '-0.4', -5/3)\", DOUBLE, -2.3);\n         assertFunction(\"least(1.5E0, REAL '-1.0' / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, (double) (-1.0f / 0.0f));\n-        assertFunction(\"least(REAL '5', 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 3.0);\n+        assertFunction(\"least(REAL '5', 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NzM2NA==", "bodyText": "Actually the cases above are also for DOUBLE, not REAL", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516497364", "createdAt": "2020-11-03T08:38:18Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1214,42 +1214,42 @@ public void testLeast()\n         assertFunction(\"least(TINYINT'-1', TINYINT'-2')\", TINYINT, (byte) -2);\n         assertFunction(\"least(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')\", TINYINT, (byte) 1);\n         assertFunction(\"least(TINYINT'-1')\", TINYINT, (byte) -1);\n-        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, (byte) 3);\n+        assertFunction(\"least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')\", TINYINT, null);\n \n         // integer\n         assertFunction(\"least(SMALLINT'1', SMALLINT'2')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1', SMALLINT'-2')\", SMALLINT, (short) -2);\n         assertFunction(\"least(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')\", SMALLINT, (short) 1);\n         assertFunction(\"least(SMALLINT'-1')\", SMALLINT, (short) -1);\n-        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, (short) 3);\n+        assertFunction(\"least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')\", SMALLINT, null);\n \n         // integer\n         assertFunction(\"least(1, 2)\", INTEGER, 1);\n         assertFunction(\"least(-1, -2)\", INTEGER, -2);\n         assertFunction(\"least(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)\", INTEGER, 1);\n         assertFunction(\"least(-1)\", INTEGER, -1);\n-        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, 3);\n+        assertFunction(\"least(5, 4, CAST(NULL AS INTEGER), 3)\", INTEGER, null);\n \n         // bigint\n         assertFunction(\"least(10000000000, 20000000000)\", BIGINT, 10000000000L);\n         assertFunction(\"least(-10000000000, -20000000000)\", BIGINT, -20000000000L);\n         assertFunction(\"least(50000000000, 40000000000, 30000000000, 20000000000, 50000000000)\", BIGINT, 20000000000L);\n         assertFunction(\"least(-10000000000)\", BIGINT, -10000000000L);\n-        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, 300000000L);\n+        assertFunction(\"least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)\", BIGINT, null);\n \n         // double\n         assertFunction(\"least(1.5E0, 2.3E0)\", DOUBLE, 1.5);\n         assertFunction(\"least(-1.5E0, -2.3E0)\", DOUBLE, -2.3);\n         assertFunction(\"least(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -2.3);\n         assertFunction(\"least(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.NEGATIVE_INFINITY);\n-        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 3.0);\n+        assertFunction(\"least(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n \n         // float\n         assertFunction(\"least(REAL '1.5', 2.3E0)\", DOUBLE, (double) 1.5f);\n         assertFunction(\"least(REAL '-1.5', -2.3E0)\", DOUBLE, -2.3);\n         assertFunction(\"least(-2.3E0, REAL '-0.4', -5/3)\", DOUBLE, -2.3);\n         assertFunction(\"least(1.5E0, REAL '-1.0' / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, (double) (-1.0f / 0.0f));\n-        assertFunction(\"least(REAL '5', 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, 3.0);\n+        assertFunction(\"least(REAL '5', 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjkwNA=="}, "originalCommit": {"oid": "bceca9b7d87153014d152f6a1e134f4389b5548f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzAwMjEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODo0MToyN1rOHskmYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjoyOTozMVrOHtf_2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw==", "bodyText": "Before c95e937 the expected values here were different -- here and in some other places NaN was expected. See\nhttps://github.com/prestosql/presto/blob/f04fa5ca8de1015629a94693740dfbc641e55784/presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java#L608-L612", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516499043", "createdAt": "2020-11-03T08:41:27Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -597,13 +597,13 @@ public void testArrayMin()\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN()])\", DOUBLE, NaN);\n         assertFunction(\"ARRAY_MIN(ARRAY [NULL, NULL, NULL])\", UNKNOWN, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NaN(), NaN()])\", DOUBLE, NaN);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, 2);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), 2, 3])\", DOUBLE, 2.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, 1.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NULL, 3.0])\", DOUBLE, 3.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [1.0E0, NULL, 3])\", DOUBLE, 1.0E0);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8c195af01c548d1b02c18b822a4a5382741e79"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMTI0NQ==", "bodyText": "You're right, though that seems like a different issue, and a bug. It's not clear why NaN would be returned over NULL, but non-NaN values would return NULL.", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516911245", "createdAt": "2020-11-03T19:39:04Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -597,13 +597,13 @@ public void testArrayMin()\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN()])\", DOUBLE, NaN);\n         assertFunction(\"ARRAY_MIN(ARRAY [NULL, NULL, NULL])\", UNKNOWN, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NaN(), NaN()])\", DOUBLE, NaN);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, 2);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), 2, 3])\", DOUBLE, 2.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, 1.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NULL, 3.0])\", DOUBLE, 3.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [1.0E0, NULL, 3])\", DOUBLE, 1.0E0);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}, "originalCommit": {"oid": "3a8c195af01c548d1b02c18b822a4a5382741e79"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNDI2Nw==", "bodyText": "According to the documentation, it is a bug:\n\nLike most other functions in Presto, they return null if any argument is null.", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516914267", "createdAt": "2020-11-03T19:44:31Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -597,13 +597,13 @@ public void testArrayMin()\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN()])\", DOUBLE, NaN);\n         assertFunction(\"ARRAY_MIN(ARRAY [NULL, NULL, NULL])\", UNKNOWN, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NaN(), NaN()])\", DOUBLE, NaN);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, 2);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), 2, 3])\", DOUBLE, 2.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, 1.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NULL, 3.0])\", DOUBLE, 3.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [1.0E0, NULL, 3])\", DOUBLE, 1.0E0);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}, "originalCommit": {"oid": "3a8c195af01c548d1b02c18b822a4a5382741e79"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NDE2OQ==", "bodyText": "I think the logic can be \"return NaN when any of the compared values is NaN\" and \"NULL means unknown, so return unknown result when any of the compared values is unknown but, unless the result will be NaN regardless of the unknown value\"", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516944169", "createdAt": "2020-11-03T20:43:36Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -597,13 +597,13 @@ public void testArrayMin()\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN()])\", DOUBLE, NaN);\n         assertFunction(\"ARRAY_MIN(ARRAY [NULL, NULL, NULL])\", UNKNOWN, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NaN(), NaN()])\", DOUBLE, NaN);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, 2);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), 2, 3])\", DOUBLE, 2.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, 1.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NULL, 3.0])\", DOUBLE, 3.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [1.0E0, NULL, 3])\", DOUBLE, 1.0E0);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}, "originalCommit": {"oid": "3a8c195af01c548d1b02c18b822a4a5382741e79"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NDU4OQ==", "bodyText": "Anyway, even if want to change the behavior, I'd strongly prefer to restore pre-344 behavior to clear \"release blocker\" and then fix whatever remains to be fixed on top of that.", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r516944589", "createdAt": "2020-11-03T20:44:31Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -597,13 +597,13 @@ public void testArrayMin()\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN()])\", DOUBLE, NaN);\n         assertFunction(\"ARRAY_MIN(ARRAY [NULL, NULL, NULL])\", UNKNOWN, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NaN(), NaN()])\", DOUBLE, NaN);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, 2);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), 2, 3])\", DOUBLE, 2.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, 1.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NULL, 3.0])\", DOUBLE, 3.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [1.0E0, NULL, 3])\", DOUBLE, 1.0E0);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}, "originalCommit": {"oid": "3a8c195af01c548d1b02c18b822a4a5382741e79"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3MjIxOA==", "bodyText": "Actually, that quote is from greatest/least. The only documentation for array_min is\n\nReturns the minimum value of input array.", "url": "https://github.com/trinodb/trino/pull/5787#discussion_r517472218", "createdAt": "2020-11-04T16:29:31Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -597,13 +597,13 @@ public void testArrayMin()\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN()])\", DOUBLE, NaN);\n         assertFunction(\"ARRAY_MIN(ARRAY [NULL, NULL, NULL])\", UNKNOWN, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NaN(), NaN()])\", DOUBLE, NaN);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, 2);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, 2, 3])\", INTEGER, null);\n         assertFunction(\"ARRAY_MIN(ARRAY [NaN(), 2, 3])\", DOUBLE, 2.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, 1.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [NaN(), NULL, 3.0])\", DOUBLE, 3.0);\n-        assertFunction(\"ARRAY_MIN(ARRAY [1.0E0, NULL, 3])\", DOUBLE, 1.0E0);\n+        assertFunction(\"ARRAY_MIN(ARRAY [NULL, NaN(), 1])\", DOUBLE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTA0Mw=="}, "originalCommit": {"oid": "3a8c195af01c548d1b02c18b822a4a5382741e79"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4899, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}