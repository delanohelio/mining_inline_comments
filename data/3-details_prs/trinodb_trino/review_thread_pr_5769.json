{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTY0NDA4", "number": 5769, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDoxMzoxNFrOE0IVqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTo0NDo1NlrOE1k3vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDk4MDI3OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDoxMzoxNFrOHrt4Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDoxMzoxNFrOHrt4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwMjQ4Nw==", "bodyText": "Let's use assertThatThrownBy instead of expectedExceptions and make sure the message as well.\n            assertThatThrownBy(rs::getRow)\n                    .isInstanceOf(SQLException.class)\n                    .hasMessage(\"ResultSet is closed\");", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515602487", "createdAt": "2020-11-01T10:13:14Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -751,6 +751,34 @@ public void testGetStatement()\n         }\n     }\n \n+    @Test\n+    public void testGetRow()\n+            throws Exception\n+    {\n+        try (ConnectedStatement connectedStatement = newStatement()) {\n+            try (ResultSet rs = connectedStatement.getStatement().executeQuery(\"SELECT * FROM (VALUES (1), (2), (3))\")) {\n+                assertEquals(rs.getRow(), 0);\n+                int currentRow = 0;\n+                while (rs.next()) {\n+                    currentRow++;\n+                    assertEquals(rs.getRow(), currentRow);\n+                }\n+                assertEquals(rs.getRow(), 0);\n+            }\n+        }\n+    }\n+\n+    @Test(expectedExceptions = SQLException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDk4NjQxOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDoyMDozMFrOHrt7IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDoyMDozMFrOHrt7IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwMzIzMw==", "bodyText": "There is a utility method.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (isClosed()) {\n          \n          \n            \n                        throw new SQLException(\"Result set is closed\");\n          \n          \n            \n                    }\n          \n          \n            \n                    checkOpen();", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515603233", "createdAt": "2020-11-01T10:20:30Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -684,7 +687,11 @@ public boolean last()\n     public int getRow()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getRow\");\n+        if (isClosed()) {\n+            throw new SQLException(\"Result set is closed\");\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDk4NzU5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDoyMjowMVrOHrt7ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMzoxMTo0MlrOHru_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwMzM5NQ==", "bodyText": "Could you move to after AtomicReference<List<Object>> row? These variables related each other.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected int currentRow; // Index into 'rows' of our current row (1-based)\n          \n          \n            \n                private final AtomicInteger currentRow = new AtomicInteger(); // Index into 'rows' of our current row (1-based)", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515603395", "createdAt": "2020-11-01T10:22:01Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -126,6 +126,7 @@\n     private final AtomicBoolean wasNull = new AtomicBoolean();\n     protected final AtomicBoolean closed = new AtomicBoolean();\n     private final Optional<Statement> statement;\n+    protected int currentRow; // Index into 'rows' of our current row (1-based)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMDY5Mw==", "bodyText": "i know it's preexisting, but i don't know why we use atomics for ResultSet state.\nDoes RS need to be thread safe? @electrum?\neven then, using synchronized + @GuardedBy could yield to simpler code.\n(no change requested here within this PR)", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515620693", "createdAt": "2020-11-01T13:11:42Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -126,6 +126,7 @@\n     private final AtomicBoolean wasNull = new AtomicBoolean();\n     protected final AtomicBoolean closed = new AtomicBoolean();\n     private final Optional<Statement> statement;\n+    protected int currentRow; // Index into 'rows' of our current row (1-based)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwMzM5NQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTEyODI2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMzoxNDo0OVrOHrvAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjoyMDoxMVrOHtfkxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg==", "bodyText": "What should be the expected behavior after reading 2^31 rows?", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515621026", "createdAt": "2020-11-01T13:14:49Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyNTg2Nw==", "bodyText": "@findepi  As far as I checked quickly (not tested) other JDBC drivers, they will just overflow. Probably, we need to define the expected behavior by ourselves (e.g. Throw SQLException in getRow when currentRow > integer max).\nPostgreSQL: https://github.com/pgjdbc/pgjdbc/blob/c80add9975d88a134319374cf5dd4adec864f432/pgjdbc/src/main/java/org/postgresql/jdbc/PgResultSet.java#L741\nMySQL: https://github.com/mysql/mysql-connector-j/blob/d64b664fa93e81296a377de031b8123a67e6def2/src/main/user-impl/java/com/mysql/cj/jdbc/result/ResultSetImpl.java#L1560\nSQLServer: https://github.com/microsoft/mssql-jdbc/blob/606e722fbee129a4fd0de89423f5a934207522b0/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerResultSet.java#L1494", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515625867", "createdAt": "2020-11-01T14:00:21Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3OTEwMA==", "bodyText": "Thanks! So should I detect the overflow and define the expected behavior? If so, probably I should throw exception for that case. It seems like I can only throw SQLException but per the spec, this exception is threw only when if a database access error occurs or this method is called on a closed result set.", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515679100", "createdAt": "2020-11-01T22:13:38Z", "author": {"login": "jasonyanwenl"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwNTQ2OA==", "bodyText": "Hi, @findepi @ebyhr, may I ask if there is any suggestion on this? Thanks!", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r516105468", "createdAt": "2020-11-02T16:43:39Z", "author": {"login": "jasonyanwenl"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0MzM5Mg==", "bodyText": "Given that this is unspecified behavior in the JDBC spec, and that none of the common JDBC implementations seem to handle this, my guess is that this is not too big a deal either way. If we want to be really pedantic about this, it would probably be just slightly safer to just throw a SQLException in this case because a negative row number returned is not a valid row number. Given that JDBC does not permit more than Integer.MAX_VALUE rows to be returned in one shot, you could argue this is a DB access error.", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r516943392", "createdAt": "2020-11-03T20:42:02Z", "author": {"login": "erichwang"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NTQ0MQ==", "bodyText": "Thanks for your suggestion! That makes sense to me.", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r516945441", "createdAt": "2020-11-03T20:46:17Z", "author": {"login": "jasonyanwenl"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3MjE5Ng==", "bodyText": "Note that we cannot throw upon increment (this would break anyone reading more than 2B rows, which is possible today, if you're patient enough).\nFor this, we can keep the counter as a long (AtomicInteger->AtomicLong) and verify the value is within [0, Integer.MAX_VAULUE] within getRow() method.\n(long counter won't overflow in practice)", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r516972196", "createdAt": "2020-11-03T21:42:27Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMjMwNg==", "bodyText": "@findepi  OK, so do you mean we allow it overflow during increment (e.g. when calling next). However, when getRow is called, we need to do overflow verification and throw exception if it is overflow?", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r517012306", "createdAt": "2020-11-03T23:20:13Z", "author": {"login": "jasonyanwenl"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMjg3MA==", "bodyText": "@jasonyanwenl, he means to use a long for the internal row counter so that it doesn't actually overflow, but just to throw the exception if someone tries to fetch the the current row that can't be squeezed into the JDBC API int return value.", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r517022870", "createdAt": "2020-11-03T23:54:17Z", "author": {"login": "erichwang"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzODY1Mg==", "bodyText": "OK. Got it!", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r517038652", "createdAt": "2020-11-04T00:52:00Z", "author": {"login": "jasonyanwenl"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ2NTI4Ng==", "bodyText": "@jasonyanwenl at first there seems to be no much difference between int and long.\nin practise however, it will take you thousands years to overflow long even if you increase the counter at 1M/s pace.", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r517465286", "createdAt": "2020-11-04T16:20:11Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjE1NDMzOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjowNzowNlrOHtVVAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMjoxMzoxOFrOHtwcMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NzQxMA==", "bodyText": "Integer.MAX_VALUE should be allowed. Could you update like this? PrestoStatement#getMaxRows is similar method.\n    @Override\n    public int getRow()\n            throws SQLException\n    {\n        checkOpen();\n\n        long rowNumber = currentRowNumber.get();\n        if (rowNumber < 0 || rowNumber > Integer.MAX_VALUE) {\n            throw new SQLException(\"Rows exceed limit of 2147483647\");\n        }\n        return (int) rowNumber;\n    }", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r517297410", "createdAt": "2020-11-04T12:07:06Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -684,7 +688,15 @@ public boolean last()\n     public int getRow()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getRow\");\n+        checkOpen();\n+\n+        long localCurrentRowNumber = currentRowNumber.get();\n+\n+        if (localCurrentRowNumber < 0 || localCurrentRowNumber >= Integer.MAX_VALUE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc0MTYxOQ==", "bodyText": "Sure! Thanks!", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r517741619", "createdAt": "2020-11-05T02:13:18Z", "author": {"login": "jasonyanwenl"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -684,7 +688,15 @@ public boolean last()\n     public int getRow()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getRow\");\n+        checkOpen();\n+\n+        long localCurrentRowNumber = currentRowNumber.get();\n+\n+        if (localCurrentRowNumber < 0 || localCurrentRowNumber >= Integer.MAX_VALUE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NzQxMA=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjE0MDc2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTo0NDo1NlrOHt7KwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDozNTowMFrOHuGJxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxNzM3Nw==", "bodyText": "\"Max rows\" looks incorrect. Could you change to \"Rows exceed ...\" or \"Current row exceed ...\"?", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r517917377", "createdAt": "2020-11-05T09:44:56Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -684,7 +688,14 @@ public boolean last()\n     public int getRow()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getRow\");\n+        checkOpen();\n+\n+        long rowNumber = currentRowNumber.get();\n+        if (rowNumber < 0 || rowNumber > Integer.MAX_VALUE) {\n+            throw new SQLException(\"Max rows exceeds limit of 2147483647\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA5NzM1MA==", "bodyText": "Oh, yeah. Sorry for this.", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r518097350", "createdAt": "2020-11-05T14:35:00Z", "author": {"login": "jasonyanwenl"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -684,7 +688,14 @@ public boolean last()\n     public int getRow()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getRow\");\n+        checkOpen();\n+\n+        long rowNumber = currentRowNumber.get();\n+        if (rowNumber < 0 || rowNumber > Integer.MAX_VALUE) {\n+            throw new SQLException(\"Max rows exceeds limit of 2147483647\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxNzM3Nw=="}, "originalCommit": null, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4886, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}