{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNTA1Njky", "number": 5742, "title": "Fix rounding in cast from TIME to TIMESTAMP", "bodyText": "Fixes #5736\nRelates to #5738", "createdAt": "2020-10-29T19:19:56Z", "url": "https://github.com/trinodb/trino/pull/5742", "merged": true, "mergeCommit": {"oid": "28332458d2161ba61ce66c0f40719819a4b97da4"}, "closed": true, "closedAt": "2020-11-02T18:40:24Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXYMc-gFqTUyMDA0NTkyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYmdXSgBqjM5NDg3NTE2NzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDQ1OTI1", "url": "https://github.com/trinodb/trino/pull/5742#pullrequestreview-520045925", "createdAt": "2020-10-29T20:15:20Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoxNToyMFrOHqs-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoyNzozNVrOHqtYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzOTI0OQ==", "bodyText": "Does rescale round or truncate?\ni checked it truncates, but i'd write this simply as\n// picoFraction is already rounded to whole micros\nlong microFraction = picoFraction / PICOSECONDS_PER_MICROSECOND;", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514539249", "createdAt": "2020-10-29T20:15:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/time/TimeToTimestampCast.java", "diffHunk": "@@ -56,23 +57,36 @@ public static LongTimestamp castToLong(\n             ConnectorSession session,\n             @SqlType(\"time(sourcePrecision)\") long time)\n     {\n-        long epochMicros = cast(sourcePrecision, targetPrecision, session, time);\n-        return new LongTimestamp(epochMicros, (int) (time % PICOSECONDS_PER_MICROSECOND));\n+        long epochSeconds = getEpochSeconds(session, time);\n+        long picoFraction = getPicoFraction(sourcePrecision, targetPrecision, time);\n+        long epochMicros = computeEpochMicros(epochSeconds, picoFraction);\n+\n+        int picosOfMicro = (int) (picoFraction % PICOSECONDS_PER_MICROSECOND);\n+        return new LongTimestamp(epochMicros, picosOfMicro);\n     }\n \n-    private static long cast(long sourcePrecision, long targetPrecision, ConnectorSession session, long time)\n+    private static long getEpochSeconds(ConnectorSession session, long time)\n     {\n         // TODO: consider using something more efficient than LocalDate.ofInstant() to compute epochDay\n         long epochDay = LocalDate.ofInstant(session.getStart(), session.getTimeZoneKey().getZoneId())\n                 .toEpochDay();\n \n-        long epochSecond = multiplyExact(epochDay, SECONDS_PER_DAY) + time / PICOSECONDS_PER_SECOND;\n+        return multiplyExact(epochDay, SECONDS_PER_DAY) + time / PICOSECONDS_PER_SECOND;\n+    }\n+\n+    private static long getPicoFraction(long sourcePrecision, long targetPrecision, long time)\n+    {\n         long picoFraction = time % PICOSECONDS_PER_SECOND;\n         if (sourcePrecision > targetPrecision) {\n-            picoFraction = round(picoFraction, (int) (TimeType.MAX_PRECISION - targetPrecision));\n+            picoFraction = round(picoFraction, (int) (12 - targetPrecision));\n         }\n \n-        long microFraction = rescale(picoFraction, TimeType.MAX_PRECISION, 6);\n-        return multiplyExact(epochSecond, MICROSECONDS_PER_SECOND) + microFraction;\n+        return picoFraction;\n+    }\n+\n+    private static long computeEpochMicros(long epochSeconds, long picoFraction)\n+    {\n+        long microFraction = rescale(picoFraction, 12, 6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MDg5OQ==", "bodyText": "Mentioning epochMicros and precision as part of the exc msg may help tracing down the problem, should the exception occur anywhere outside of our tests.\nintroducing private void checkArgument(...) may help increase readability.", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514540899", "createdAt": "2020-10-29T20:18:19Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -43,7 +45,26 @@ public static SqlTimestamp fromMillis(int precision, long millis)\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {\n+            if (picosOfMicro != 0) {\n+                throw new IllegalArgumentException(\"Expected picosOfMicro to be 0 for precision <= 6: \" + picosOfMicro);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MTY1OA==", "bodyText": "since you already know precision <= 6, you can more tersely:\nif (round(epochMicros, 6 - precision) != epochMicros)", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514541658", "createdAt": "2020-10-29T20:19:47Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -43,7 +45,26 @@ public static SqlTimestamp fromMillis(int precision, long millis)\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {\n+            if (picosOfMicro != 0) {\n+                throw new IllegalArgumentException(\"Expected picosOfMicro to be 0 for precision <= 6: \" + picosOfMicro);\n+            }\n+\n+            if (rescale(rescale(epochMicros, 6, precision), precision, 6) != epochMicros) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MjM5MQ==", "bodyText": "round as above", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514542391", "createdAt": "2020-10-29T20:21:13Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -43,7 +45,26 @@ public static SqlTimestamp fromMillis(int precision, long millis)\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {\n+            if (picosOfMicro != 0) {\n+                throw new IllegalArgumentException(\"Expected picosOfMicro to be 0 for precision <= 6: \" + picosOfMicro);\n+            }\n+\n+            if (rescale(rescale(epochMicros, 6, precision), precision, 6) != epochMicros) {\n+                throw new IllegalArgumentException(format(\"Expected 0s for digits beyond precision %s: epochMicros = %s\", precision, epochMicros));\n+            }\n+        }\n+        else {\n+            if (rescale(rescale(picosOfMicro, 12, precision), precision, 12) != picosOfMicro) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MzIzNA==", "bodyText": "should the fromMillis above do rounding or checks?\nor maybe we (re)move it, since it is used in tests only", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514543234", "createdAt": "2020-10-29T20:22:57Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -43,7 +45,26 @@ public static SqlTimestamp fromMillis(int precision, long millis)\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0NTc1Ng==", "bodyText": "rescale method works great when the rounding is known to be not necessary.\nFor cases when rounding may be necessary, round, floorDiv seem to offer well defined semantics.\nIn this commit you're using the rounding-or-truncation of this method, but i'd change it to expect that value is pre-rounded. (actual check may be too expensive for runtime, idk).\nThis is more relevant when we allow negative numbers here.", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514545756", "createdAt": "2020-10-29T20:27:35Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/Timestamps.java", "diffHunk": "@@ -79,10 +79,6 @@ public static long round(long value, int magnitude)\n      */\n     static long rescale(long value, int fromPrecision, int toPrecision)\n     {\n-        if (value < 0) {\n-            throw new IllegalArgumentException(\"value must be >= 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDgxNTE1", "url": "https://github.com/trinodb/trino/pull/5742#pullrequestreview-520481515", "createdAt": "2020-10-30T09:05:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTowNToyMFrOHrGbpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTowNjoyM1rOHrGdhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NjE5OA==", "bodyText": "\"round down\"\nor \"round towards negative infinity\"", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514956198", "createdAt": "2020-10-30T09:05:20Z", "author": {"login": "findepi"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestTimestamps.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.Timestamps.roundDiv;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestTimestamps\n+{\n+    @Test\n+    public void testRoundDiv()\n+    {\n+        // round towards negative", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NjM3MA==", "bodyText": "\"round up\"", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514956370", "createdAt": "2020-10-30T09:05:42Z", "author": {"login": "findepi"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestTimestamps.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.Timestamps.roundDiv;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestTimestamps\n+{\n+    @Test\n+    public void testRoundDiv()\n+    {\n+        // round towards negative\n+        assertThat(roundDiv(44444, 1)).isEqualTo(44444);\n+        assertThat(roundDiv(44444, 10)).isEqualTo(4444);\n+        assertThat(roundDiv(44444, 100)).isEqualTo(444);\n+        assertThat(roundDiv(44444, 1000)).isEqualTo(44);\n+        assertThat(roundDiv(44444, 10000)).isEqualTo(4);\n+        assertThat(roundDiv(44444, 100000)).isEqualTo(0);\n+\n+        assertThat(roundDiv(-55556, 1)).isEqualTo(-55556);\n+        assertThat(roundDiv(-55556, 10)).isEqualTo(-5556);\n+        assertThat(roundDiv(-55556, 100)).isEqualTo(-556);\n+        assertThat(roundDiv(-55556, 1000)).isEqualTo(-56);\n+        assertThat(roundDiv(-55556, 10000)).isEqualTo(-6);\n+        assertThat(roundDiv(-55556, 100000)).isEqualTo(-1);\n+\n+        // round towards positive", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NjY3Ng==", "bodyText": "perhaps add a test with 0 divisor (failure)\nit would be great if negative divisor was rejected too", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514956676", "createdAt": "2020-10-30T09:06:23Z", "author": {"login": "findepi"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestTimestamps.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.Timestamps.roundDiv;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestTimestamps\n+{\n+    @Test\n+    public void testRoundDiv()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDg1MDc0", "url": "https://github.com/trinodb/trino/pull/5742#pullrequestreview-520485074", "createdAt": "2020-10-30T09:10:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxMDozOVrOHrGl6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxNDoyMlrOHrGtSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODgyNw==", "bodyText": "I dont understand the % here. If the value can >= PICOSECONDS_PER_MILLISECOND,  it seems we're discarding some information without compensating it (with eg epochMillis++ or whatever is appropriate)", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514958827", "createdAt": "2020-10-30T09:10:39Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/testing/DateTimeTestingUtils.java", "diffHunk": "@@ -63,7 +64,7 @@ public static SqlTimestampWithTimeZone sqlTimestampWithTimeZoneOf(int precision,\n         ZonedDateTime base = ZonedDateTime.of(year, month, day, hour, minute, second, 0, timeZoneKey.getZoneId());\n \n         long epochMillis = base.toEpochSecond() * MILLISECONDS_PER_SECOND + nanoOfSecond / NANOSECONDS_PER_MILLISECOND;\n-        int picosOfMilli = (int) scaleNanosToPicos(nanoOfSecond);\n+        int picosOfMilli = (int) (scaleNanosToPicos(nanoOfSecond) % PICOSECONDS_PER_MILLISECOND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTUyMA==", "bodyText": "This could use checkArgument too", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514959520", "createdAt": "2020-10-30T09:12:01Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -38,12 +39,24 @@\n \n     public static SqlTimestamp fromMillis(int precision, long millis)\n     {\n-        return newInstance(precision, millis * 1000, 0);\n+        return newInstanceWithRounding(precision, millis * 1000, 0);\n     }\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {\n+            checkArgument(picosOfMicro == 0, \"Expected picosOfMicro to be 0 for precision %s: %s\", precision, picosOfMicro);\n+            checkArgument(round(epochMicros, 6 - precision) == epochMicros, \"Expected 0s for digits beyond precision %s: epochMicros = %s\", precision, epochMicros);\n+        }\n+        else {\n+            checkArgument(round(picosOfMicro, 12 - precision) == picosOfMicro, \"Expected 0s for digits beyond precision %s: picosOfMicro = %s\", precision, picosOfMicro);\n+        }\n+\n+        if (picosOfMicro < 0 || picosOfMicro > PICOSECONDS_PER_MICROSECOND) {\n+            throw new IllegalArgumentException(\"picosOfMicro is out of range: \" + picosOfMicro);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTY4MQ==", "bodyText": "This could use checkArgument too", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514959681", "createdAt": "2020-10-30T09:12:18Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestampWithTimeZone.java", "diffHunk": "@@ -47,7 +48,19 @@ public static SqlTimestampWithTimeZone fromInstant(int precision, Instant instan\n \n     public static SqlTimestampWithTimeZone newInstance(int precision, long epochMillis, int picosOfMilli, TimeZoneKey timeZoneKey)\n     {\n-        return newInstanceWithRounding(precision, epochMillis, picosOfMilli, timeZoneKey);\n+        if (precision <= 3) {\n+            checkArgument(picosOfMilli == 0, \"Expected picosOfMilli to be 0 for precision %s: %s\", precision, picosOfMilli);\n+            checkArgument(round(epochMillis, 3 - precision) == epochMillis, \"Expected 0s for digits beyond precision %s: epochMicros = %s\", precision, epochMillis);\n+        }\n+        else {\n+            checkArgument(round(picosOfMilli, 12 - precision) == picosOfMilli, \"Expected 0s for digits beyond precision %s: picosOfMilli = %s\", precision, picosOfMilli);\n+        }\n+\n+        if (picosOfMilli < 0 || picosOfMilli > PICOSECONDS_PER_MILLISECOND) {\n+            throw new IllegalArgumentException(\"picosOfMilli is out of range: \" + picosOfMilli);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2MDcxNA==", "bodyText": "This deletion is part Make construction of SqlTimestamp and SqlTimestampWithTimeZone stricter commit.\nWould it mnake sense toi keep the test, replacing newInstance with newInstanceWithRounding here?", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514960714", "createdAt": "2020-10-30T09:14:22Z", "author": {"login": "findepi"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestSqlTimestamp.java", "diffHunk": "@@ -40,78 +40,6 @@ public void testBaseline()\n         assertThat(newInstance(12, 0, 0).toString()).isEqualTo(\"1970-01-01 00:00:00.000000000000\");\n     }\n \n-    @Test\n-    public void testPositiveEpoch()\n-    {\n-        // round down\n-        // represents a timestamp of 1970-01-01 00:00:00.111111111111\n-        assertThat(newInstance(0, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00\");\n-        assertThat(newInstance(1, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.1\");\n-        assertThat(newInstance(2, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.11\");\n-        assertThat(newInstance(3, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.111\");\n-        assertThat(newInstance(4, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.1111\");\n-        assertThat(newInstance(5, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.11111\");\n-        assertThat(newInstance(6, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.111111\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c6a259e3be9ba6d54a2094d0d699c589e04bb87", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/4c6a259e3be9ba6d54a2094d0d699c589e04bb87", "committedDate": "2020-11-02T15:39:13Z", "message": "Rename newInstance to fromInstant\n\nThis is to distinguish between the semantics of newInstance, which is not supposed to do\nany conversions (rounding, etc), with the version that constructs a instance from an Instance\nby applying any necessary rounding."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e630cecc7f0b3dbd8492b70608468b8bc61bd821", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/e630cecc7f0b3dbd8492b70608468b8bc61bd821", "committedDate": "2020-11-02T15:39:14Z", "message": "Fix roundDiv when factor is 1\n\nFor negative numbers, it will produce a result different\nfrom the original value, which is incorrect."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa3fe8c3b36dacc3efcbbd23cd902d98ad7a4d1", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/4aa3fe8c3b36dacc3efcbbd23cd902d98ad7a4d1", "committedDate": "2020-11-02T15:39:14Z", "message": "Fix rounding in cast from TIME to TIMESTAMP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba17097e495544fdb633c327a8c548f5858f54d4", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/ba17097e495544fdb633c327a8c548f5858f54d4", "committedDate": "2020-11-02T15:39:14Z", "message": "Make construction of SqlTimestamp and SqlTimestampWithTimeZone stricter\n\nPreviously, it was applying rounding rules, which ended up masking potential\nproblems in operations that are expected to do proper rounding."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "102b19707c3e086abe7bca8816fa635075d63a55", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/102b19707c3e086abe7bca8816fa635075d63a55", "committedDate": "2020-11-02T15:39:14Z", "message": "Move time->timestamp cast tests to TestTime class\n\nThey were in a separate class for when we had to parameterize the tests\nfor legacy vs new timestamp semantics. That's no longer necessary."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5b73afedc71f0d1f5095b2e4327b1a2268cf24", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/0b5b73afedc71f0d1f5095b2e4327b1a2268cf24", "committedDate": "2020-11-02T15:39:14Z", "message": "Add tests for SqlTimestamp.fromMillis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aed95b96c7d3e298baa2e10656fd000eabd487d", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/1aed95b96c7d3e298baa2e10656fd000eabd487d", "committedDate": "2020-11-02T15:39:14Z", "message": "Inline method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1aed95b96c7d3e298baa2e10656fd000eabd487d", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/1aed95b96c7d3e298baa2e10656fd000eabd487d", "committedDate": "2020-11-02T15:39:14Z", "message": "Inline method"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2690, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}