{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5Njk5MzQ2", "number": 4462, "title": "Add Kafka headers as column", "bodyText": "This PR adds the internal _headers field to the kafka connector.\nAs type a map with key String and value array of byte[] is used.\nFor better review the changes are splited into two commits:\n\nExtract the type definitions from the enum that describes the internal fields to a map that is initialized in the constructor where the TypeManager can be used.\nAdd the Header column and adapt the KafkaRecordCursor\n\nI would appreciate if someone could review the code.", "createdAt": "2020-07-15T19:53:48Z", "url": "https://github.com/trinodb/trino/pull/4462", "merged": true, "mergeCommit": {"oid": "d4469590a544771897d786349ae31cdf08f485f3"}, "closed": true, "closedAt": "2020-09-10T18:40:55Z", "author": {"login": "0xE282B0"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1QYz7gBqjM1NTAxNTUyMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHlR75gFqTQ4NjIxMzU1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjAxNTY1", "url": "https://github.com/trinodb/trino/pull/4462#pullrequestreview-450201565", "createdAt": "2020-07-16T20:43:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0Nzo0N1rOGy8NgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToxODoyM1rOGy9IpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2ODQ4MQ==", "bodyText": "There is a convenience method you can use here and when writing the value: TypeUtils.writeNativeValue(keyType, builder, header.getKey())", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456068481", "createdAt": "2020-07-16T20:47:47Z", "author": {"login": "aalbu"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaRecordSet.java", "diffHunk": "@@ -269,4 +279,58 @@ public void close()\n             kafkaConsumer.close();\n         }\n     }\n+\n+    public static FieldValueProvider headerMapValueProvider(MapType varcharMapType, Headers headers)\n+    {\n+        final Type keyType = varcharMapType.getTypeParameters().get(0);\n+        final Type valueArrayType = varcharMapType.getTypeParameters().get(1);\n+        final Type valueType = valueArrayType.getTypeParameters().get(0);\n+\n+        final BlockBuilder mapBlockBuilder = varcharMapType.createBlockBuilder(null, 1);\n+        final BlockBuilder builder = mapBlockBuilder.beginBlockEntry();\n+\n+        // Group by keys and collect values as array.\n+        final Map<String, List<byte[]>> headerMap = new HashMap<>();\n+        for (Header header : headers) {\n+            final String key = header.key();\n+            if (headerMap.containsKey(key)) {\n+                headerMap.get(key).add(header.value());\n+            }\n+            else {\n+                final List<byte[]> list = new ArrayList<>();\n+                list.add(header.value());\n+                headerMap.put(key, list);\n+            }\n+        }\n+\n+        for (Map.Entry<String, List<byte[]>> header : headerMap.entrySet()) {\n+            keyType.writeSlice(builder, utf8Slice(header.getKey()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3MDE5MQ==", "bodyText": "You could add an underscore after header_test to separate more clearly the random part.", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456070191", "createdAt": "2020-07-16T20:51:06Z", "author": {"login": "aalbu"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationSmokeTest.java", "diffHunk": "@@ -54,13 +55,16 @@\n {\n     private TestingKafka testingKafka;\n     private String rawFormatTopic;\n+    private String headersTopic;\n \n     @Override\n     protected QueryRunner createQueryRunner()\n             throws Exception\n     {\n         testingKafka = new TestingKafka();\n         rawFormatTopic = \"test_raw_\" + UUID.randomUUID().toString().replaceAll(\"-\", \"_\");\n+        headersTopic = \"header_test\" + UUID.randomUUID().toString().replaceAll(\"-\", \"_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3MjIxOA==", "bodyText": "I think it's more readable if you put the value on a different line, like the entry before.", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456072218", "createdAt": "2020-07-16T20:54:58Z", "author": {"login": "aalbu"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationSmokeTest.java", "diffHunk": "@@ -76,6 +80,7 @@ protected QueryRunner createQueryRunner()\n                                         createOneFieldDescription(\"boolean_int\", BooleanType.BOOLEAN, \"41\", \"INT\"),\n                                         createOneFieldDescription(\"boolean_short\", BooleanType.BOOLEAN, \"45\", \"SHORT\"),\n                                         createOneFieldDescription(\"boolean_byte\", BooleanType.BOOLEAN, \"47\", \"BYTE\")))))\n+                .put(new SchemaTableName(\"default\", headersTopic), new KafkaTopicDescription(headersTopic, Optional.empty(), headersTopic, Optional.empty(), Optional.empty()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3MzI5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ProducerRecord<byte[], byte[]> record = new ProducerRecord<byte[], byte[]>(topicName, null, \"{}\".getBytes(Charset.forName(\"UTF-8\")));\n          \n          \n            \n                        ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(topicName, null, \"{}\".getBytes(StandardCharsets.UTF_8));", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456073296", "createdAt": "2020-07-16T20:57:03Z", "author": {"login": "aalbu"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationSmokeTest.java", "diffHunk": "@@ -134,6 +139,22 @@ private void insertData(byte[] data)\n         }\n     }\n \n+    private void createMessagesWithHeader(String topicName)\n+    {\n+        try (KafkaProducer<byte[], byte[]> producer = createProducer()) {\n+            ProducerRecord<byte[], byte[]> record = new ProducerRecord<byte[], byte[]>(topicName, null, \"{}\".getBytes(Charset.forName(\"UTF-8\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3NTg5Nw==", "bodyText": "Can you change the value to something other than null?  As the test is written, it's not clear whether the null in the result comes from this header or the one a few lines below (.add(\"foo\", null)).", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456075897", "createdAt": "2020-07-16T21:02:08Z", "author": {"login": "aalbu"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationSmokeTest.java", "diffHunk": "@@ -134,6 +139,22 @@ private void insertData(byte[] data)\n         }\n     }\n \n+    private void createMessagesWithHeader(String topicName)\n+    {\n+        try (KafkaProducer<byte[], byte[]> producer = createProducer()) {\n+            ProducerRecord<byte[], byte[]> record = new ProducerRecord<byte[], byte[]>(topicName, null, \"{}\".getBytes(Charset.forName(\"UTF-8\")));\n+            record.headers()\n+                    .add(\"notfoo\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4MDQyNA==", "bodyText": "You don't need the cast.", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456080424", "createdAt": "2020-07-16T21:11:26Z", "author": {"login": "aalbu"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaRecordSet.java", "diffHunk": "@@ -269,4 +279,58 @@ public void close()\n             kafkaConsumer.close();\n         }\n     }\n+\n+    public static FieldValueProvider headerMapValueProvider(MapType varcharMapType, Headers headers)\n+    {\n+        final Type keyType = varcharMapType.getTypeParameters().get(0);\n+        final Type valueArrayType = varcharMapType.getTypeParameters().get(1);\n+        final Type valueType = valueArrayType.getTypeParameters().get(0);\n+\n+        final BlockBuilder mapBlockBuilder = varcharMapType.createBlockBuilder(null, 1);\n+        final BlockBuilder builder = mapBlockBuilder.beginBlockEntry();\n+\n+        // Group by keys and collect values as array.\n+        final Map<String, List<byte[]>> headerMap = new HashMap<>();\n+        for (Header header : headers) {\n+            final String key = header.key();\n+            if (headerMap.containsKey(key)) {\n+                headerMap.get(key).add(header.value());\n+            }\n+            else {\n+                final List<byte[]> list = new ArrayList<>();\n+                list.add(header.value());\n+                headerMap.put(key, list);\n+            }\n+        }\n+\n+        for (Map.Entry<String, List<byte[]>> header : headerMap.entrySet()) {\n+            keyType.writeSlice(builder, utf8Slice(header.getKey()));\n+            final BlockBuilder arrayBuilder = builder.beginBlockEntry();\n+            for (byte[] value : header.getValue()) {\n+                if (value == null) {\n+                    arrayBuilder.appendNull();\n+                }\n+                else {\n+                    valueType.writeSlice(arrayBuilder, wrappedBuffer(value));\n+                }\n+            }\n+            builder.closeEntry();\n+        }\n+\n+        mapBlockBuilder.closeEntry();\n+\n+        return new FieldValueProvider() {\n+            @Override\n+            public boolean isNull()\n+            {\n+                return !headers.iterator().hasNext();\n+            }\n+\n+            @Override\n+            public Block getBlock()\n+            {\n+                return (Block) varcharMapType.getObject(mapBlockBuilder, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4MzYyMQ==", "bodyText": "I don't know if this is fit for a Javadoc comment.", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456083621", "createdAt": "2020-07-16T21:18:23Z", "author": {"login": "aalbu"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaInternalFieldDescription.java", "diffHunk": "@@ -13,126 +13,191 @@\n  */\n package io.prestosql.plugin.kafka;\n \n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n import io.prestosql.spi.connector.ColumnMetadata;\n import io.prestosql.spi.type.BigintType;\n import io.prestosql.spi.type.BooleanType;\n import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n \n import java.util.Map;\n import java.util.Optional;\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Strings.isNullOrEmpty;\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.spi.type.TypeSignature.arrayType;\n+import static io.prestosql.spi.type.TypeSignature.mapType;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n import static java.util.Arrays.stream;\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n-/**\n- * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n- * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n- * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n- * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n- */\n-public enum KafkaInternalFieldDescription\n+public class KafkaInternalFieldDescription\n {\n     /**\n-     * <tt>_partition_id</tt> - Kafka partition id.\n-     */\n-    PARTITION_ID_FIELD(\"_partition_id\", BigintType.BIGINT, \"Partition Id\"),\n-\n-    /**\n-     * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n-     */\n-    PARTITION_OFFSET_FIELD(\"_partition_offset\", BigintType.BIGINT, \"Offset for the message within the partition\"),\n-\n-    /**\n-     * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", BooleanType.BOOLEAN, \"Message data is corrupt\"),\n-\n-    /**\n-     * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n-     */\n-    MESSAGE_FIELD(\"_message\", createUnboundedVarcharType(), \"Message text\"),\n-\n-    /**\n-     * <tt>_message_length</tt> - length in bytes of the message.\n-     */\n-    MESSAGE_LENGTH_FIELD(\"_message_length\", BigintType.BIGINT, \"Total number of message bytes\"),\n-\n-    /**\n-     * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    KEY_CORRUPT_FIELD(\"_key_corrupt\", BooleanType.BOOLEAN, \"Key data is corrupt\"),\n-\n-    /**\n-     * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+     * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n+     * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n+     * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n+     * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n      */\n-    KEY_FIELD(\"_key\", createUnboundedVarcharType(), \"Key text\"),\n-\n-    /**\n-     * <tt>_key_length</tt> - length in bytes of the key.\n-     */\n-    KEY_LENGTH_FIELD(\"_key_length\", BigintType.BIGINT, \"Total number of key bytes\");\n-\n-    private static final Map<String, KafkaInternalFieldDescription> BY_COLUMN_NAME =\n-            stream(KafkaInternalFieldDescription.values())\n-                    .collect(toImmutableMap(KafkaInternalFieldDescription::getColumnName, identity()));\n-\n-    public static KafkaInternalFieldDescription forColumnName(String columnName)\n-    {\n-        KafkaInternalFieldDescription description = BY_COLUMN_NAME.get(columnName);\n-        checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n-        return description;\n-    }\n-\n-    private final String columnName;\n-    private final Type type;\n-    private final String comment;\n-\n-    KafkaInternalFieldDescription(\n-            String columnName,\n-            Type type,\n-            String comment)\n+    public enum InternalFields\n     {\n-        checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n-        this.columnName = columnName;\n-        this.type = requireNonNull(type, \"type is null\");\n-        this.comment = requireNonNull(comment, \"comment is null\");\n+        /**\n+         * <tt>_partition_id</tt> - Kafka partition id.\n+         */\n+        PARTITION_ID_FIELD(\"_partition_id\", \"Partition Id\"),\n+\n+        /**\n+         * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n+         */\n+        PARTITION_OFFSET_FIELD(\"_partition_offset\", \"Offset for the message within the partition\"),\n+\n+        /**\n+         * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", \"Message data is corrupt\"),\n+\n+        /**\n+         * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n+         */\n+        MESSAGE_FIELD(\"_message\", \"Message text\"),\n+\n+        /**\n+         * <tt>_message_length</tt> - length in bytes of the message.\n+         */\n+        MESSAGE_LENGTH_FIELD(\"_message_length\", \"Total number of message bytes\"),\n+\n+        /**\n+         * <tt>_headers</tt> - The header fields of the Kafka message. Key is a UTF-8 String and values an array of byte[].\n+         */\n+        HEADERS_FIELD(\"_headers\", \"Headers of the message as map.\"),\n+\n+        /**\n+         * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        KEY_CORRUPT_FIELD(\"_key_corrupt\", \"Key data is corrupt\"),\n+\n+        /**\n+         * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+         */\n+        KEY_FIELD(\"_key\", \"Key text\"),\n+\n+        /**\n+         * <tt>_key_length</tt> - length in bytes of the key.\n+         */\n+        KEY_LENGTH_FIELD(\"_key_length\", \"Total number of key bytes\");\n+\n+        private static final Map<String, InternalFields> BY_COLUMN_NAME =\n+                stream(InternalFields.values())\n+                        .collect(toImmutableMap(InternalFields::getColumnName, identity()));\n+\n+        public static InternalFields forColumnName(String columnName)\n+        {\n+            InternalFields description = BY_COLUMN_NAME.get(columnName);\n+            checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n+            return description;\n+        }\n+\n+        private final String columnName;\n+        private final String comment;\n+\n+        InternalFields(\n+                String columnName,\n+                String comment)\n+        {\n+            checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n+            this.columnName = columnName;\n+            this.comment = requireNonNull(comment, \"comment is null\");\n+        }\n+\n+        public String getColumnName()\n+        {\n+            return columnName;\n+        }\n     }\n \n-    public String getColumnName()\n+    /**\n+     * Inner class that wraps the {@link InternalFields} enum and add {@link Type}.\n+     * With this bean a non static data structure with types from the {@link TypeManager} can be created.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 183}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzQwMDQ5", "url": "https://github.com/trinodb/trino/pull/4462#pullrequestreview-450340049", "createdAt": "2020-07-17T02:49:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjo0OToyM1rOGzDjQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjo0OToyM1rOGzDjQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4ODczNw==", "bodyText": "Can you also publish a message without headers?", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456188737", "createdAt": "2020-07-17T02:49:23Z", "author": {"login": "aalbu"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationSmokeTest.java", "diffHunk": "@@ -134,6 +139,22 @@ private void insertData(byte[] data)\n         }\n     }\n \n+    private void createMessagesWithHeader(String topicName)\n+    {\n+        try (KafkaProducer<byte[], byte[]> producer = createProducer()) {\n+            ProducerRecord<byte[], byte[]> record = new ProducerRecord<byte[], byte[]>(topicName, null, \"{}\".getBytes(Charset.forName(\"UTF-8\")));\n+            record.headers()\n+                    .add(\"notfoo\", null);\n+            producer.send(record);\n+            record = new ProducerRecord<byte[], byte[]>(topicName, null, \"{}\".getBytes(Charset.forName(\"UTF-8\")));\n+            record.headers()\n+                    .add(\"foo\", \"bar\".getBytes(Charset.forName(\"UTF-8\")))\n+                    .add(\"foo\", null)\n+                    .add(\"foo\", \"baz\".getBytes(Charset.forName(\"UTF-8\")));\n+            producer.send(record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzg4MDIw", "url": "https://github.com/trinodb/trino/pull/4462#pullrequestreview-450388020", "createdAt": "2020-07-17T05:49:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNTo0OTowOVrOGzGK4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNTo1MjoyMFrOGzGOdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIzMTY0OQ==", "bodyText": "Please make the table wider in a separate commit, as in https://github.com/prestosql/presto/pull/3771/commits", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456231649", "createdAt": "2020-07-17T05:49:09Z", "author": {"login": "findepi"}, "path": "presto-docs/src/main/sphinx/connector/kafka.rst", "diffHunk": "@@ -146,21 +146,22 @@ Internal Columns\n \n For each defined table, the connector maintains the following columns:\n \n-======================= ========= =============================\n-Column name             Type      Description\n-======================= ========= =============================\n-``_partition_id``       BIGINT    ID of the Kafka partition which contains this row.\n-``_partition_offset``   BIGINT    Offset within the Kafka partition for this row.\n-``_segment_start``      BIGINT    Lowest offset in the segment (inclusive) which contains this row. This offset is partition specific.\n-``_segment_end``        BIGINT    Highest offset in the segment (exclusive) which contains this row. The offset is partition specific. This is the same value as ``_segment_start`` of the next segment (if it exists).\n-``_segment_count``      BIGINT    Running count for the current row within the segment. For an uncompacted topic, ``_segment_start + _segment_count`` is equal to ``_partition_offset``.\n-``_message_corrupt``    BOOLEAN   True if the decoder could not decode the message for this row. When true, data columns mapped from the message should be treated as invalid.\n-``_message``            VARCHAR   Message bytes as an UTF-8 encoded string. This is only useful for a text topic.\n-``_message_length``     BIGINT    Number of bytes in the message.\n-``_key_corrupt``        BOOLEAN   True if the key decoder could not decode the key for this row. When true, data columns mapped from the key should be treated as invalid.\n-``_key``                VARCHAR   Key bytes as an UTF-8 encoded string. This is only useful for textual keys.\n-``_key_length``         BIGINT    Number of bytes in the key.\n-======================= ========= =============================\n+======================= =============================== =============================\n+Column name             Type                            Description\n+======================= =============================== =============================", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIzMTk4Mw==", "bodyText": "Per code style, we do not use final for local variables.\nFor short methods, it doesn't add to readability, and we strive to avoid long methods.", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456231983", "createdAt": "2020-07-17T05:50:17Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaRecordSet.java", "diffHunk": "@@ -269,4 +279,58 @@ public void close()\n             kafkaConsumer.close();\n         }\n     }\n+\n+    public static FieldValueProvider headerMapValueProvider(MapType varcharMapType, Headers headers)\n+    {\n+        final Type keyType = varcharMapType.getTypeParameters().get(0);\n+        final Type valueArrayType = varcharMapType.getTypeParameters().get(1);\n+        final Type valueType = valueArrayType.getTypeParameters().get(0);\n+\n+        final BlockBuilder mapBlockBuilder = varcharMapType.createBlockBuilder(null, 1);\n+        final BlockBuilder builder = mapBlockBuilder.beginBlockEntry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIzMjI3MQ==", "bodyText": "Is there a value in returning NULL when no headers?\nWhy not return empty map?", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456232271", "createdAt": "2020-07-17T05:51:22Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaRecordSet.java", "diffHunk": "@@ -269,4 +279,58 @@ public void close()\n             kafkaConsumer.close();\n         }\n     }\n+\n+    public static FieldValueProvider headerMapValueProvider(MapType varcharMapType, Headers headers)\n+    {\n+        final Type keyType = varcharMapType.getTypeParameters().get(0);\n+        final Type valueArrayType = varcharMapType.getTypeParameters().get(1);\n+        final Type valueType = valueArrayType.getTypeParameters().get(0);\n+\n+        final BlockBuilder mapBlockBuilder = varcharMapType.createBlockBuilder(null, 1);\n+        final BlockBuilder builder = mapBlockBuilder.beginBlockEntry();\n+\n+        // Group by keys and collect values as array.\n+        final Map<String, List<byte[]>> headerMap = new HashMap<>();\n+        for (Header header : headers) {\n+            final String key = header.key();\n+            if (headerMap.containsKey(key)) {\n+                headerMap.get(key).add(header.value());\n+            }\n+            else {\n+                final List<byte[]> list = new ArrayList<>();\n+                list.add(header.value());\n+                headerMap.put(key, list);\n+            }\n+        }\n+\n+        for (Map.Entry<String, List<byte[]>> header : headerMap.entrySet()) {\n+            keyType.writeSlice(builder, utf8Slice(header.getKey()));\n+            final BlockBuilder arrayBuilder = builder.beginBlockEntry();\n+            for (byte[] value : header.getValue()) {\n+                if (value == null) {\n+                    arrayBuilder.appendNull();\n+                }\n+                else {\n+                    valueType.writeSlice(arrayBuilder, wrappedBuffer(value));\n+                }\n+            }\n+            builder.closeEntry();\n+        }\n+\n+        mapBlockBuilder.closeEntry();\n+\n+        return new FieldValueProvider() {\n+            @Override\n+            public boolean isNull()\n+            {\n+                return !headers.iterator().hasNext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIzMjQ0MQ==", "bodyText": "this, + static import UTF_8", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456232441", "createdAt": "2020-07-17T05:51:52Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationSmokeTest.java", "diffHunk": "@@ -134,6 +139,22 @@ private void insertData(byte[] data)\n         }\n     }\n \n+    private void createMessagesWithHeader(String topicName)\n+    {\n+        try (KafkaProducer<byte[], byte[]> producer = createProducer()) {\n+            ProducerRecord<byte[], byte[]> record = new ProducerRecord<byte[], byte[]>(topicName, null, \"{}\".getBytes(Charset.forName(\"UTF-8\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3MzI5Ng=="}, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIzMjU2Nw==", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \" WHERE element_at(_headers,'foo') is not NULL\",\n          \n          \n            \n                                    \" WHERE element_at(_headers, 'foo') IS NOT NULL\",", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456232567", "createdAt": "2020-07-17T05:52:20Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationSmokeTest.java", "diffHunk": "@@ -171,6 +192,17 @@ public void testRoundTripAllFormats(RoundTripTestCase testCase)\n                 \"VALUES (\" + testCase.getFieldValues() + \"), (\" + testCase.getFieldValues() + \")\");\n     }\n \n+    @Test\n+    public void testKafkaHeaders()\n+    {\n+        createMessagesWithHeader(headersTopic);\n+\n+        assertQuery(\"SELECT from_utf8(value) FROM default.\" + headersTopic +\n+                        \" CROSS JOIN UNNEST(_headers['foo']) as arr (value)\" +\n+                        \" WHERE element_at(_headers,'foo') is not NULL\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzM5NDMx", "url": "https://github.com/trinodb/trino/pull/4462#pullrequestreview-450739431", "createdAt": "2020-07-17T15:10:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxMDozOVrOGzWzQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTo0Mzo1MVrOGzX_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwNDEzMA==", "bodyText": "Can be inline", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456504130", "createdAt": "2020-07-17T15:10:39Z", "author": {"login": "charlesjmorgan"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaInternalFieldDescription.java", "diffHunk": "@@ -13,126 +13,187 @@\n  */\n package io.prestosql.plugin.kafka;\n \n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n import io.prestosql.spi.connector.ColumnMetadata;\n import io.prestosql.spi.type.BigintType;\n import io.prestosql.spi.type.BooleanType;\n import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n \n import java.util.Map;\n import java.util.Optional;\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Strings.isNullOrEmpty;\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.spi.type.TypeSignature.arrayType;\n+import static io.prestosql.spi.type.TypeSignature.mapType;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n import static java.util.Arrays.stream;\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n-/**\n- * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n- * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n- * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n- * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n- */\n-public enum KafkaInternalFieldDescription\n+public class KafkaInternalFieldDescription\n {\n     /**\n-     * <tt>_partition_id</tt> - Kafka partition id.\n-     */\n-    PARTITION_ID_FIELD(\"_partition_id\", BigintType.BIGINT, \"Partition Id\"),\n-\n-    /**\n-     * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n-     */\n-    PARTITION_OFFSET_FIELD(\"_partition_offset\", BigintType.BIGINT, \"Offset for the message within the partition\"),\n-\n-    /**\n-     * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", BooleanType.BOOLEAN, \"Message data is corrupt\"),\n-\n-    /**\n-     * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n-     */\n-    MESSAGE_FIELD(\"_message\", createUnboundedVarcharType(), \"Message text\"),\n-\n-    /**\n-     * <tt>_message_length</tt> - length in bytes of the message.\n-     */\n-    MESSAGE_LENGTH_FIELD(\"_message_length\", BigintType.BIGINT, \"Total number of message bytes\"),\n-\n-    /**\n-     * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    KEY_CORRUPT_FIELD(\"_key_corrupt\", BooleanType.BOOLEAN, \"Key data is corrupt\"),\n-\n-    /**\n-     * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n-     */\n-    KEY_FIELD(\"_key\", createUnboundedVarcharType(), \"Key text\"),\n-\n-    /**\n-     * <tt>_key_length</tt> - length in bytes of the key.\n+     * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n+     * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n+     * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n+     * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n      */\n-    KEY_LENGTH_FIELD(\"_key_length\", BigintType.BIGINT, \"Total number of key bytes\");\n-\n-    private static final Map<String, KafkaInternalFieldDescription> BY_COLUMN_NAME =\n-            stream(KafkaInternalFieldDescription.values())\n-                    .collect(toImmutableMap(KafkaInternalFieldDescription::getColumnName, identity()));\n-\n-    public static KafkaInternalFieldDescription forColumnName(String columnName)\n+    public enum InternalFields\n     {\n-        KafkaInternalFieldDescription description = BY_COLUMN_NAME.get(columnName);\n-        checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n-        return description;\n+        /**\n+         * <tt>_partition_id</tt> - Kafka partition id.\n+         */\n+        PARTITION_ID_FIELD(\"_partition_id\", \"Partition Id\"),\n+\n+        /**\n+         * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n+         */\n+        PARTITION_OFFSET_FIELD(\"_partition_offset\", \"Offset for the message within the partition\"),\n+\n+        /**\n+         * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", \"Message data is corrupt\"),\n+\n+        /**\n+         * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n+         */\n+        MESSAGE_FIELD(\"_message\", \"Message text\"),\n+\n+        /**\n+         * <tt>_message_length</tt> - length in bytes of the message.\n+         */\n+        MESSAGE_LENGTH_FIELD(\"_message_length\", \"Total number of message bytes\"),\n+\n+        /**\n+         * <tt>_headers</tt> - The header fields of the Kafka message. Key is a UTF-8 String and values an array of byte[].\n+         */\n+        HEADERS_FIELD(\"_headers\", \"Headers of the message as map.\"),\n+\n+        /**\n+         * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        KEY_CORRUPT_FIELD(\"_key_corrupt\", \"Key data is corrupt\"),\n+\n+        /**\n+         * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+         */\n+        KEY_FIELD(\"_key\", \"Key text\"),\n+\n+        /**\n+         * <tt>_key_length</tt> - length in bytes of the key.\n+         */\n+        KEY_LENGTH_FIELD(\"_key_length\", \"Total number of key bytes\");\n+\n+        private static final Map<String, InternalFields> BY_COLUMN_NAME =\n+                stream(InternalFields.values())\n+                        .collect(toImmutableMap(InternalFields::getColumnName, identity()));\n+\n+        public static InternalFields forColumnName(String columnName)\n+        {\n+            InternalFields description = BY_COLUMN_NAME.get(columnName);\n+            checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n+            return description;\n+        }\n+\n+        private final String columnName;\n+        private final String comment;\n+\n+        InternalFields(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwNTIxMA==", "bodyText": "Can be inline", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456505210", "createdAt": "2020-07-17T15:12:27Z", "author": {"login": "charlesjmorgan"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaInternalFieldDescription.java", "diffHunk": "@@ -13,126 +13,187 @@\n  */\n package io.prestosql.plugin.kafka;\n \n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n import io.prestosql.spi.connector.ColumnMetadata;\n import io.prestosql.spi.type.BigintType;\n import io.prestosql.spi.type.BooleanType;\n import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n \n import java.util.Map;\n import java.util.Optional;\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Strings.isNullOrEmpty;\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.spi.type.TypeSignature.arrayType;\n+import static io.prestosql.spi.type.TypeSignature.mapType;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n import static java.util.Arrays.stream;\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n-/**\n- * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n- * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n- * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n- * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n- */\n-public enum KafkaInternalFieldDescription\n+public class KafkaInternalFieldDescription\n {\n     /**\n-     * <tt>_partition_id</tt> - Kafka partition id.\n-     */\n-    PARTITION_ID_FIELD(\"_partition_id\", BigintType.BIGINT, \"Partition Id\"),\n-\n-    /**\n-     * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n-     */\n-    PARTITION_OFFSET_FIELD(\"_partition_offset\", BigintType.BIGINT, \"Offset for the message within the partition\"),\n-\n-    /**\n-     * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", BooleanType.BOOLEAN, \"Message data is corrupt\"),\n-\n-    /**\n-     * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n-     */\n-    MESSAGE_FIELD(\"_message\", createUnboundedVarcharType(), \"Message text\"),\n-\n-    /**\n-     * <tt>_message_length</tt> - length in bytes of the message.\n-     */\n-    MESSAGE_LENGTH_FIELD(\"_message_length\", BigintType.BIGINT, \"Total number of message bytes\"),\n-\n-    /**\n-     * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    KEY_CORRUPT_FIELD(\"_key_corrupt\", BooleanType.BOOLEAN, \"Key data is corrupt\"),\n-\n-    /**\n-     * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n-     */\n-    KEY_FIELD(\"_key\", createUnboundedVarcharType(), \"Key text\"),\n-\n-    /**\n-     * <tt>_key_length</tt> - length in bytes of the key.\n+     * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n+     * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n+     * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n+     * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n      */\n-    KEY_LENGTH_FIELD(\"_key_length\", BigintType.BIGINT, \"Total number of key bytes\");\n-\n-    private static final Map<String, KafkaInternalFieldDescription> BY_COLUMN_NAME =\n-            stream(KafkaInternalFieldDescription.values())\n-                    .collect(toImmutableMap(KafkaInternalFieldDescription::getColumnName, identity()));\n-\n-    public static KafkaInternalFieldDescription forColumnName(String columnName)\n+    public enum InternalFields\n     {\n-        KafkaInternalFieldDescription description = BY_COLUMN_NAME.get(columnName);\n-        checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n-        return description;\n+        /**\n+         * <tt>_partition_id</tt> - Kafka partition id.\n+         */\n+        PARTITION_ID_FIELD(\"_partition_id\", \"Partition Id\"),\n+\n+        /**\n+         * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n+         */\n+        PARTITION_OFFSET_FIELD(\"_partition_offset\", \"Offset for the message within the partition\"),\n+\n+        /**\n+         * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", \"Message data is corrupt\"),\n+\n+        /**\n+         * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n+         */\n+        MESSAGE_FIELD(\"_message\", \"Message text\"),\n+\n+        /**\n+         * <tt>_message_length</tt> - length in bytes of the message.\n+         */\n+        MESSAGE_LENGTH_FIELD(\"_message_length\", \"Total number of message bytes\"),\n+\n+        /**\n+         * <tt>_headers</tt> - The header fields of the Kafka message. Key is a UTF-8 String and values an array of byte[].\n+         */\n+        HEADERS_FIELD(\"_headers\", \"Headers of the message as map.\"),\n+\n+        /**\n+         * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        KEY_CORRUPT_FIELD(\"_key_corrupt\", \"Key data is corrupt\"),\n+\n+        /**\n+         * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+         */\n+        KEY_FIELD(\"_key\", \"Key text\"),\n+\n+        /**\n+         * <tt>_key_length</tt> - length in bytes of the key.\n+         */\n+        KEY_LENGTH_FIELD(\"_key_length\", \"Total number of key bytes\");\n+\n+        private static final Map<String, InternalFields> BY_COLUMN_NAME =\n+                stream(InternalFields.values())\n+                        .collect(toImmutableMap(InternalFields::getColumnName, identity()));\n+\n+        public static InternalFields forColumnName(String columnName)\n+        {\n+            InternalFields description = BY_COLUMN_NAME.get(columnName);\n+            checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n+            return description;\n+        }\n+\n+        private final String columnName;\n+        private final String comment;\n+\n+        InternalFields(\n+                String columnName,\n+                String comment)\n+        {\n+            checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n+            this.columnName = columnName;\n+            this.comment = requireNonNull(comment, \"comment is null\");\n+        }\n+\n+        public String getColumnName()\n+        {\n+            return columnName;\n+        }\n     }\n \n-    private final String columnName;\n-    private final Type type;\n-    private final String comment;\n-\n-    KafkaInternalFieldDescription(\n-            String columnName,\n-            Type type,\n-            String comment)\n+    public static class InternalFieldDescription\n     {\n-        checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n-        this.columnName = columnName;\n-        this.type = requireNonNull(type, \"type is null\");\n-        this.comment = requireNonNull(comment, \"comment is null\");\n+        private final String columnName;\n+        private final Type type;\n+        private final String comment;\n+\n+        InternalFieldDescription(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwOTMzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    internalFields = new ImmutableMap.Builder<InternalFields, InternalFieldDescription>()\n          \n          \n            \n                    internalFields = ImmutableMap.<InternalFields, InternalFieldDescription>builder()", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456509332", "createdAt": "2020-07-17T15:19:09Z", "author": {"login": "charlesjmorgan"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaInternalFieldDescription.java", "diffHunk": "@@ -13,126 +13,187 @@\n  */\n package io.prestosql.plugin.kafka;\n \n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n import io.prestosql.spi.connector.ColumnMetadata;\n import io.prestosql.spi.type.BigintType;\n import io.prestosql.spi.type.BooleanType;\n import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n \n import java.util.Map;\n import java.util.Optional;\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Strings.isNullOrEmpty;\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.spi.type.TypeSignature.arrayType;\n+import static io.prestosql.spi.type.TypeSignature.mapType;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n import static java.util.Arrays.stream;\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n-/**\n- * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n- * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n- * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n- * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n- */\n-public enum KafkaInternalFieldDescription\n+public class KafkaInternalFieldDescription\n {\n     /**\n-     * <tt>_partition_id</tt> - Kafka partition id.\n-     */\n-    PARTITION_ID_FIELD(\"_partition_id\", BigintType.BIGINT, \"Partition Id\"),\n-\n-    /**\n-     * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n-     */\n-    PARTITION_OFFSET_FIELD(\"_partition_offset\", BigintType.BIGINT, \"Offset for the message within the partition\"),\n-\n-    /**\n-     * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", BooleanType.BOOLEAN, \"Message data is corrupt\"),\n-\n-    /**\n-     * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n-     */\n-    MESSAGE_FIELD(\"_message\", createUnboundedVarcharType(), \"Message text\"),\n-\n-    /**\n-     * <tt>_message_length</tt> - length in bytes of the message.\n-     */\n-    MESSAGE_LENGTH_FIELD(\"_message_length\", BigintType.BIGINT, \"Total number of message bytes\"),\n-\n-    /**\n-     * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    KEY_CORRUPT_FIELD(\"_key_corrupt\", BooleanType.BOOLEAN, \"Key data is corrupt\"),\n-\n-    /**\n-     * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n-     */\n-    KEY_FIELD(\"_key\", createUnboundedVarcharType(), \"Key text\"),\n-\n-    /**\n-     * <tt>_key_length</tt> - length in bytes of the key.\n+     * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n+     * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n+     * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n+     * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n      */\n-    KEY_LENGTH_FIELD(\"_key_length\", BigintType.BIGINT, \"Total number of key bytes\");\n-\n-    private static final Map<String, KafkaInternalFieldDescription> BY_COLUMN_NAME =\n-            stream(KafkaInternalFieldDescription.values())\n-                    .collect(toImmutableMap(KafkaInternalFieldDescription::getColumnName, identity()));\n-\n-    public static KafkaInternalFieldDescription forColumnName(String columnName)\n+    public enum InternalFields\n     {\n-        KafkaInternalFieldDescription description = BY_COLUMN_NAME.get(columnName);\n-        checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n-        return description;\n+        /**\n+         * <tt>_partition_id</tt> - Kafka partition id.\n+         */\n+        PARTITION_ID_FIELD(\"_partition_id\", \"Partition Id\"),\n+\n+        /**\n+         * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n+         */\n+        PARTITION_OFFSET_FIELD(\"_partition_offset\", \"Offset for the message within the partition\"),\n+\n+        /**\n+         * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", \"Message data is corrupt\"),\n+\n+        /**\n+         * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n+         */\n+        MESSAGE_FIELD(\"_message\", \"Message text\"),\n+\n+        /**\n+         * <tt>_message_length</tt> - length in bytes of the message.\n+         */\n+        MESSAGE_LENGTH_FIELD(\"_message_length\", \"Total number of message bytes\"),\n+\n+        /**\n+         * <tt>_headers</tt> - The header fields of the Kafka message. Key is a UTF-8 String and values an array of byte[].\n+         */\n+        HEADERS_FIELD(\"_headers\", \"Headers of the message as map.\"),\n+\n+        /**\n+         * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        KEY_CORRUPT_FIELD(\"_key_corrupt\", \"Key data is corrupt\"),\n+\n+        /**\n+         * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+         */\n+        KEY_FIELD(\"_key\", \"Key text\"),\n+\n+        /**\n+         * <tt>_key_length</tt> - length in bytes of the key.\n+         */\n+        KEY_LENGTH_FIELD(\"_key_length\", \"Total number of key bytes\");\n+\n+        private static final Map<String, InternalFields> BY_COLUMN_NAME =\n+                stream(InternalFields.values())\n+                        .collect(toImmutableMap(InternalFields::getColumnName, identity()));\n+\n+        public static InternalFields forColumnName(String columnName)\n+        {\n+            InternalFields description = BY_COLUMN_NAME.get(columnName);\n+            checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n+            return description;\n+        }\n+\n+        private final String columnName;\n+        private final String comment;\n+\n+        InternalFields(\n+                String columnName,\n+                String comment)\n+        {\n+            checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n+            this.columnName = columnName;\n+            this.comment = requireNonNull(comment, \"comment is null\");\n+        }\n+\n+        public String getColumnName()\n+        {\n+            return columnName;\n+        }\n     }\n \n-    private final String columnName;\n-    private final Type type;\n-    private final String comment;\n-\n-    KafkaInternalFieldDescription(\n-            String columnName,\n-            Type type,\n-            String comment)\n+    public static class InternalFieldDescription\n     {\n-        checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n-        this.columnName = columnName;\n-        this.type = requireNonNull(type, \"type is null\");\n-        this.comment = requireNonNull(comment, \"comment is null\");\n+        private final String columnName;\n+        private final Type type;\n+        private final String comment;\n+\n+        InternalFieldDescription(\n+                InternalFields internalField,\n+                Type type)\n+        {\n+            this.columnName = internalField.getColumnName();\n+            this.type = requireNonNull(type, \"type is null\");\n+            this.comment = internalField.comment;\n+        }\n+\n+        public String getColumnName()\n+        {\n+            return columnName;\n+        }\n+\n+        private Type getType()\n+        {\n+            return type;\n+        }\n+\n+        KafkaColumnHandle getColumnHandle(int index, boolean hidden)\n+        {\n+            return new KafkaColumnHandle(\n+                    getColumnName(),\n+                    getType(),\n+                    null,\n+                    null,\n+                    null,\n+                    false,\n+                    hidden,\n+                    true);\n+        }\n+\n+        ColumnMetadata getColumnMetadata(boolean hidden)\n+        {\n+            return ColumnMetadata.builder()\n+                    .setName(columnName)\n+                    .setType(type)\n+                    .setComment(Optional.ofNullable(comment))\n+                    .setHidden(hidden)\n+                    .build();\n+        }\n     }\n \n-    public String getColumnName()\n-    {\n-        return columnName;\n-    }\n-\n-    private Type getType()\n-    {\n-        return type;\n-    }\n+    private final Map<InternalFields, InternalFieldDescription> internalFields;\n \n-    KafkaColumnHandle getColumnHandle(int index, boolean hidden)\n+    @Inject\n+    public KafkaInternalFieldDescription(TypeManager typeManager)\n     {\n-        return new KafkaColumnHandle(\n-                getColumnName(),\n-                getType(),\n-                null,\n-                null,\n-                null,\n-                false,\n-                hidden,\n-                true);\n+        Type varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), arrayType(VARBINARY.getTypeSignature())));\n+\n+        internalFields = new ImmutableMap.Builder<InternalFields, InternalFieldDescription>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyMzUyNw==", "bodyText": "Move this before testRoundTripAllFormats so that it doesn't split that test from its data provider", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r456523527", "createdAt": "2020-07-17T15:43:51Z", "author": {"login": "charlesjmorgan"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationSmokeTest.java", "diffHunk": "@@ -171,6 +197,17 @@ public void testRoundTripAllFormats(RoundTripTestCase testCase)\n                 \"VALUES (\" + testCase.getFieldValues() + \"), (\" + testCase.getFieldValues() + \")\");\n     }\n \n+    @Test\n+    public void testKafkaHeaders()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MjczODQ1", "url": "https://github.com/trinodb/trino/pull/4462#pullrequestreview-457273845", "createdAt": "2020-07-29T07:46:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzo0Njo1NlrOG4sn8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoxMToyOFrOG4tdog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwNDU2Mg==", "bodyText": "singular InternalField", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r462104562", "createdAt": "2020-07-29T07:46:56Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaInternalFieldDescription.java", "diffHunk": "@@ -29,110 +32,160 @@\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n-/**\n- * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n- * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n- * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n- * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n- */\n-public enum KafkaInternalFieldDescription\n+public class KafkaInternalFieldDescription\n {\n     /**\n-     * <tt>_partition_id</tt> - Kafka partition id.\n-     */\n-    PARTITION_ID_FIELD(\"_partition_id\", BigintType.BIGINT, \"Partition Id\"),\n-\n-    /**\n-     * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n-     */\n-    PARTITION_OFFSET_FIELD(\"_partition_offset\", BigintType.BIGINT, \"Offset for the message within the partition\"),\n-\n-    /**\n-     * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", BooleanType.BOOLEAN, \"Message data is corrupt\"),\n-\n-    /**\n-     * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n-     */\n-    MESSAGE_FIELD(\"_message\", createUnboundedVarcharType(), \"Message text\"),\n-\n-    /**\n-     * <tt>_message_length</tt> - length in bytes of the message.\n-     */\n-    MESSAGE_LENGTH_FIELD(\"_message_length\", BigintType.BIGINT, \"Total number of message bytes\"),\n-\n-    /**\n-     * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    KEY_CORRUPT_FIELD(\"_key_corrupt\", BooleanType.BOOLEAN, \"Key data is corrupt\"),\n-\n-    /**\n-     * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+     * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n+     * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n+     * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n+     * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n      */\n-    KEY_FIELD(\"_key\", createUnboundedVarcharType(), \"Key text\"),\n-\n-    /**\n-     * <tt>_key_length</tt> - length in bytes of the key.\n-     */\n-    KEY_LENGTH_FIELD(\"_key_length\", BigintType.BIGINT, \"Total number of key bytes\");\n-\n-    private static final Map<String, KafkaInternalFieldDescription> BY_COLUMN_NAME =\n-            stream(KafkaInternalFieldDescription.values())\n-                    .collect(toImmutableMap(KafkaInternalFieldDescription::getColumnName, identity()));\n-\n-    public static KafkaInternalFieldDescription forColumnName(String columnName)\n-    {\n-        KafkaInternalFieldDescription description = BY_COLUMN_NAME.get(columnName);\n-        checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n-        return description;\n-    }\n-\n-    private final String columnName;\n-    private final Type type;\n-    private final String comment;\n-\n-    KafkaInternalFieldDescription(\n-            String columnName,\n-            Type type,\n-            String comment)\n+    public enum InternalFields", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwNTU1MA==", "bodyText": "Make it easy to notice this is internal field + type:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private final String columnName;\n          \n          \n            \n                    private final Type type;\n          \n          \n            \n                    private final String comment;\n          \n          \n            \n                    private final InternalField internalField;\n          \n          \n            \n                    private final Type type;\n          \n      \n    \n    \n  \n\nyou can still provide getColumnName accessor for convinience", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r462105550", "createdAt": "2020-07-29T07:48:48Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaInternalFieldDescription.java", "diffHunk": "@@ -29,110 +32,160 @@\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n-/**\n- * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n- * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n- * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n- * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n- */\n-public enum KafkaInternalFieldDescription\n+public class KafkaInternalFieldDescription\n {\n     /**\n-     * <tt>_partition_id</tt> - Kafka partition id.\n-     */\n-    PARTITION_ID_FIELD(\"_partition_id\", BigintType.BIGINT, \"Partition Id\"),\n-\n-    /**\n-     * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n-     */\n-    PARTITION_OFFSET_FIELD(\"_partition_offset\", BigintType.BIGINT, \"Offset for the message within the partition\"),\n-\n-    /**\n-     * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", BooleanType.BOOLEAN, \"Message data is corrupt\"),\n-\n-    /**\n-     * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n-     */\n-    MESSAGE_FIELD(\"_message\", createUnboundedVarcharType(), \"Message text\"),\n-\n-    /**\n-     * <tt>_message_length</tt> - length in bytes of the message.\n-     */\n-    MESSAGE_LENGTH_FIELD(\"_message_length\", BigintType.BIGINT, \"Total number of message bytes\"),\n-\n-    /**\n-     * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    KEY_CORRUPT_FIELD(\"_key_corrupt\", BooleanType.BOOLEAN, \"Key data is corrupt\"),\n-\n-    /**\n-     * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+     * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n+     * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n+     * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n+     * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n      */\n-    KEY_FIELD(\"_key\", createUnboundedVarcharType(), \"Key text\"),\n-\n-    /**\n-     * <tt>_key_length</tt> - length in bytes of the key.\n-     */\n-    KEY_LENGTH_FIELD(\"_key_length\", BigintType.BIGINT, \"Total number of key bytes\");\n-\n-    private static final Map<String, KafkaInternalFieldDescription> BY_COLUMN_NAME =\n-            stream(KafkaInternalFieldDescription.values())\n-                    .collect(toImmutableMap(KafkaInternalFieldDescription::getColumnName, identity()));\n-\n-    public static KafkaInternalFieldDescription forColumnName(String columnName)\n-    {\n-        KafkaInternalFieldDescription description = BY_COLUMN_NAME.get(columnName);\n-        checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n-        return description;\n-    }\n-\n-    private final String columnName;\n-    private final Type type;\n-    private final String comment;\n-\n-    KafkaInternalFieldDescription(\n-            String columnName,\n-            Type type,\n-            String comment)\n+    public enum InternalFields\n     {\n-        checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n-        this.columnName = columnName;\n-        this.type = requireNonNull(type, \"type is null\");\n-        this.comment = requireNonNull(comment, \"comment is null\");\n+        /**\n+         * <tt>_partition_id</tt> - Kafka partition id.\n+         */\n+        PARTITION_ID_FIELD(\"_partition_id\", \"Partition Id\"),\n+\n+        /**\n+         * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n+         */\n+        PARTITION_OFFSET_FIELD(\"_partition_offset\", \"Offset for the message within the partition\"),\n+\n+        /**\n+         * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", \"Message data is corrupt\"),\n+\n+        /**\n+         * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n+         */\n+        MESSAGE_FIELD(\"_message\", \"Message text\"),\n+\n+        /**\n+         * <tt>_message_length</tt> - length in bytes of the message.\n+         */\n+        MESSAGE_LENGTH_FIELD(\"_message_length\", \"Total number of message bytes\"),\n+\n+        /**\n+         * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        KEY_CORRUPT_FIELD(\"_key_corrupt\", \"Key data is corrupt\"),\n+\n+        /**\n+         * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+         */\n+        KEY_FIELD(\"_key\", \"Key text\"),\n+\n+        /**\n+         * <tt>_key_length</tt> - length in bytes of the key.\n+         */\n+        KEY_LENGTH_FIELD(\"_key_length\", \"Total number of key bytes\");\n+\n+        private static final Map<String, InternalFields> BY_COLUMN_NAME =\n+                stream(InternalFields.values())\n+                        .collect(toImmutableMap(InternalFields::getColumnName, identity()));\n+\n+        public static InternalFields forColumnName(String columnName)\n+        {\n+            InternalFields description = BY_COLUMN_NAME.get(columnName);\n+            checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n+            return description;\n+        }\n+\n+        private final String columnName;\n+        private final String comment;\n+\n+        InternalFields(\n+                String columnName,\n+                String comment)\n+        {\n+            checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n+            this.columnName = columnName;\n+            this.comment = requireNonNull(comment, \"comment is null\");\n+        }\n+\n+        public String getColumnName()\n+        {\n+            return columnName;\n+        }\n     }\n \n-    public String getColumnName()\n+    /**\n+     * Inner class that wraps the {@link InternalFields} enum and add {@link Type}.\n+     * With this bean a non static data structure with types from the {@link TypeManager} can be created.\n+     */\n+    public static class InternalFieldDescription\n     {\n-        return columnName;\n+        private final String columnName;\n+        private final Type type;\n+        private final String comment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExMTY1NQ==", "bodyText": "Instead of doing this mapping manually, delegate back to the enum:\ninternalFields = Stream.of(InternalField.values())\n            .map(toImmutableMap(\n              identity(), \n              internalField -> new InternalFieldDescription(internalField, internalField.getPrestoType(typeManager))));\n\nin the enum class, this can look like this:\n        InternalField(String columnName, String comment, Type type)\n        {\n            this(columnName, comment, typeManager -> type);\n        }\n\n        InternalField(String columnName, String comment, Function<TypeManager, Type> typeProvider)\n        {\n....\n\nthis way all the scalar fields remain simple in their definition (they just provide the type inline)\nand the headers field provides a type bearing function", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r462111655", "createdAt": "2020-07-29T07:59:37Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaInternalFieldDescription.java", "diffHunk": "@@ -29,110 +32,160 @@\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n \n-/**\n- * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n- * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n- * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n- * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n- */\n-public enum KafkaInternalFieldDescription\n+public class KafkaInternalFieldDescription\n {\n     /**\n-     * <tt>_partition_id</tt> - Kafka partition id.\n-     */\n-    PARTITION_ID_FIELD(\"_partition_id\", BigintType.BIGINT, \"Partition Id\"),\n-\n-    /**\n-     * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n-     */\n-    PARTITION_OFFSET_FIELD(\"_partition_offset\", BigintType.BIGINT, \"Offset for the message within the partition\"),\n-\n-    /**\n-     * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", BooleanType.BOOLEAN, \"Message data is corrupt\"),\n-\n-    /**\n-     * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n-     */\n-    MESSAGE_FIELD(\"_message\", createUnboundedVarcharType(), \"Message text\"),\n-\n-    /**\n-     * <tt>_message_length</tt> - length in bytes of the message.\n-     */\n-    MESSAGE_LENGTH_FIELD(\"_message_length\", BigintType.BIGINT, \"Total number of message bytes\"),\n-\n-    /**\n-     * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n-     */\n-    KEY_CORRUPT_FIELD(\"_key_corrupt\", BooleanType.BOOLEAN, \"Key data is corrupt\"),\n-\n-    /**\n-     * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+     * Describes an internal (managed by the connector) field which is added to each table row. The definition itself makes the row\n+     * show up in the tables (the columns are hidden by default, so they must be explicitly selected) but unless the field is hooked in using the\n+     * forBooleanValue/forLongValue/forBytesValue methods and the resulting FieldValueProvider is then passed into the appropriate row decoder, the fields\n+     * will be null. Most values are assigned in the {@link io.prestosql.plugin.kafka.KafkaRecordSet}.\n      */\n-    KEY_FIELD(\"_key\", createUnboundedVarcharType(), \"Key text\"),\n-\n-    /**\n-     * <tt>_key_length</tt> - length in bytes of the key.\n-     */\n-    KEY_LENGTH_FIELD(\"_key_length\", BigintType.BIGINT, \"Total number of key bytes\");\n-\n-    private static final Map<String, KafkaInternalFieldDescription> BY_COLUMN_NAME =\n-            stream(KafkaInternalFieldDescription.values())\n-                    .collect(toImmutableMap(KafkaInternalFieldDescription::getColumnName, identity()));\n-\n-    public static KafkaInternalFieldDescription forColumnName(String columnName)\n-    {\n-        KafkaInternalFieldDescription description = BY_COLUMN_NAME.get(columnName);\n-        checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n-        return description;\n-    }\n-\n-    private final String columnName;\n-    private final Type type;\n-    private final String comment;\n-\n-    KafkaInternalFieldDescription(\n-            String columnName,\n-            Type type,\n-            String comment)\n+    public enum InternalFields\n     {\n-        checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n-        this.columnName = columnName;\n-        this.type = requireNonNull(type, \"type is null\");\n-        this.comment = requireNonNull(comment, \"comment is null\");\n+        /**\n+         * <tt>_partition_id</tt> - Kafka partition id.\n+         */\n+        PARTITION_ID_FIELD(\"_partition_id\", \"Partition Id\"),\n+\n+        /**\n+         * <tt>_partition_offset</tt> - The current offset of the message in the partition.\n+         */\n+        PARTITION_OFFSET_FIELD(\"_partition_offset\", \"Offset for the message within the partition\"),\n+\n+        /**\n+         * <tt>_message_corrupt</tt> - True if the row converter could not read the a message. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        MESSAGE_CORRUPT_FIELD(\"_message_corrupt\", \"Message data is corrupt\"),\n+\n+        /**\n+         * <tt>_message</tt> - Represents the full topic as a text column. Format is UTF-8 which may be wrong for some topics. TODO: make charset configurable.\n+         */\n+        MESSAGE_FIELD(\"_message\", \"Message text\"),\n+\n+        /**\n+         * <tt>_message_length</tt> - length in bytes of the message.\n+         */\n+        MESSAGE_LENGTH_FIELD(\"_message_length\", \"Total number of message bytes\"),\n+\n+        /**\n+         * <tt>_key_corrupt</tt> - True if the row converter could not read the a key. May be null if the row converter does not set a value (e.g. the dummy row converter does not).\n+         */\n+        KEY_CORRUPT_FIELD(\"_key_corrupt\", \"Key data is corrupt\"),\n+\n+        /**\n+         * <tt>_key</tt> - Represents the key as a text column. Format is UTF-8 which may be wrong for topics. TODO: make charset configurable.\n+         */\n+        KEY_FIELD(\"_key\", \"Key text\"),\n+\n+        /**\n+         * <tt>_key_length</tt> - length in bytes of the key.\n+         */\n+        KEY_LENGTH_FIELD(\"_key_length\", \"Total number of key bytes\");\n+\n+        private static final Map<String, InternalFields> BY_COLUMN_NAME =\n+                stream(InternalFields.values())\n+                        .collect(toImmutableMap(InternalFields::getColumnName, identity()));\n+\n+        public static InternalFields forColumnName(String columnName)\n+        {\n+            InternalFields description = BY_COLUMN_NAME.get(columnName);\n+            checkArgument(description != null, \"Unknown internal column name %s\", columnName);\n+            return description;\n+        }\n+\n+        private final String columnName;\n+        private final String comment;\n+\n+        InternalFields(\n+                String columnName,\n+                String comment)\n+        {\n+            checkArgument(!isNullOrEmpty(columnName), \"name is null or is empty\");\n+            this.columnName = columnName;\n+            this.comment = requireNonNull(comment, \"comment is null\");\n+        }\n+\n+        public String getColumnName()\n+        {\n+            return columnName;\n+        }\n     }\n \n-    public String getColumnName()\n+    /**\n+     * Inner class that wraps the {@link InternalFields} enum and add {@link Type}.\n+     * With this bean a non static data structure with types from the {@link TypeManager} can be created.\n+     */\n+    public static class InternalFieldDescription\n     {\n-        return columnName;\n+        private final String columnName;\n+        private final Type type;\n+        private final String comment;\n+\n+        InternalFieldDescription(\n+                InternalFields internalField,\n+                Type type)\n+        {\n+            this.columnName = internalField.getColumnName();\n+            this.type = requireNonNull(type, \"type is null\");\n+            this.comment = internalField.comment;\n+        }\n+\n+        public String getColumnName()\n+        {\n+            return columnName;\n+        }\n+\n+        private Type getType()\n+        {\n+            return type;\n+        }\n+\n+        KafkaColumnHandle getColumnHandle(int index, boolean hidden)\n+        {\n+            return new KafkaColumnHandle(\n+                    getColumnName(),\n+                    getType(),\n+                    null,\n+                    null,\n+                    null,\n+                    false,\n+                    hidden,\n+                    true);\n+        }\n+\n+        ColumnMetadata getColumnMetadata(boolean hidden)\n+        {\n+            return ColumnMetadata.builder()\n+                    .setName(columnName)\n+                    .setType(type)\n+                    .setComment(Optional.ofNullable(comment))\n+                    .setHidden(hidden)\n+                    .build();\n+        }\n     }\n \n-    private Type getType()\n-    {\n-        return type;\n-    }\n+    private final Map<InternalFields, InternalFieldDescription> internalFields;\n \n-    KafkaColumnHandle getColumnHandle(int index, boolean hidden)\n+    @Inject\n+    public KafkaInternalFieldDescription()\n     {\n-        return new KafkaColumnHandle(\n-                getColumnName(),\n-                getType(),\n-                null,\n-                null,\n-                null,\n-                false,\n-                hidden,\n-                true);\n+        internalFields = new ImmutableMap.Builder<InternalFields, InternalFieldDescription>()\n+                .put(InternalFields.PARTITION_ID_FIELD, new InternalFieldDescription(InternalFields.PARTITION_ID_FIELD, BigintType.BIGINT))\n+                .put(InternalFields.PARTITION_OFFSET_FIELD, new InternalFieldDescription(InternalFields.PARTITION_OFFSET_FIELD, BigintType.BIGINT))\n+                .put(InternalFields.MESSAGE_CORRUPT_FIELD, new InternalFieldDescription(InternalFields.MESSAGE_CORRUPT_FIELD, BooleanType.BOOLEAN))\n+                .put(InternalFields.MESSAGE_FIELD, new InternalFieldDescription(InternalFields.MESSAGE_FIELD, createUnboundedVarcharType()))\n+                .put(InternalFields.MESSAGE_LENGTH_FIELD, new InternalFieldDescription(InternalFields.MESSAGE_LENGTH_FIELD, BigintType.BIGINT))\n+                .put(InternalFields.KEY_CORRUPT_FIELD, new InternalFieldDescription(InternalFields.KEY_CORRUPT_FIELD, BooleanType.BOOLEAN))\n+                .put(InternalFields.KEY_FIELD, new InternalFieldDescription(InternalFields.KEY_FIELD, createUnboundedVarcharType()))\n+                .put(InternalFields.KEY_LENGTH_FIELD, new InternalFieldDescription(InternalFields.KEY_LENGTH_FIELD, BigintType.BIGINT))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExMjU4Nw==", "bodyText": "Remove the comment in the previous commit, which was adding it", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r462112587", "createdAt": "2020-07-29T08:01:13Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaInternalFieldDescription.java", "diffHunk": "@@ -111,19 +118,13 @@ public String getColumnName()\n         }\n     }\n \n-    /**\n-     * Inner class that wraps the {@link InternalFields} enum and add {@link Type}.\n-     * With this bean a non static data structure with types from the {@link TypeManager} can be created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNjE1MQ==", "bodyText": "Use Multimap.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, List<byte[]>> headerMap = new HashMap<>();\n          \n          \n            \n                    for (Header header : headers) {\n          \n          \n            \n                        String key = header.key();\n          \n          \n            \n                        if (headerMap.containsKey(key)) {\n          \n          \n            \n                            headerMap.get(key).add(header.value());\n          \n          \n            \n                        }\n          \n          \n            \n                        else {\n          \n          \n            \n                            List<byte[]> list = new ArrayList<>();\n          \n          \n            \n                            list.add(header.value());\n          \n          \n            \n                            headerMap.put(key, list);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    Multimap<String, byte[]> headerMap = ArrayListMultimap.create();\n          \n          \n            \n                    for (Header header : headers) {\n          \n          \n            \n                        headerMap.put(header.key(), header.value());\n          \n          \n            \n                    }", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r462116151", "createdAt": "2020-07-29T08:07:38Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaRecordSet.java", "diffHunk": "@@ -269,4 +278,53 @@ public void close()\n             kafkaConsumer.close();\n         }\n     }\n+\n+    public static FieldValueProvider headerMapValueProvider(MapType varcharMapType, Headers headers)\n+    {\n+        Type keyType = varcharMapType.getTypeParameters().get(0);\n+        Type valueArrayType = varcharMapType.getTypeParameters().get(1);\n+        Type valueType = valueArrayType.getTypeParameters().get(0);\n+\n+        BlockBuilder mapBlockBuilder = varcharMapType.createBlockBuilder(null, 1);\n+        BlockBuilder builder = mapBlockBuilder.beginBlockEntry();\n+\n+        // Group by keys and collect values as array.\n+        Map<String, List<byte[]>> headerMap = new HashMap<>();\n+        for (Header header : headers) {\n+            String key = header.key();\n+            if (headerMap.containsKey(key)) {\n+                headerMap.get(key).add(header.value());\n+            }\n+            else {\n+                List<byte[]> list = new ArrayList<>();\n+                list.add(header.value());\n+                headerMap.put(key, list);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNzg3NA==", "bodyText": "I'd assume empty headers case is not a rare case, so we could want to cache a result for this (empty block).\n@dain wdyt?", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r462117874", "createdAt": "2020-07-29T08:10:44Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaRecordSet.java", "diffHunk": "@@ -269,4 +278,53 @@ public void close()\n             kafkaConsumer.close();\n         }\n     }\n+\n+    public static FieldValueProvider headerMapValueProvider(MapType varcharMapType, Headers headers)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExODMwNg==", "bodyText": "thanks for taking care of null values\ncan header key be null as well?", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r462118306", "createdAt": "2020-07-29T08:11:28Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationSmokeTest.java", "diffHunk": "@@ -134,6 +139,27 @@ private void insertData(byte[] data)\n         }\n     }\n \n+    private void createMessagesWithHeader(String topicName)\n+    {\n+        try (KafkaProducer<byte[], byte[]> producer = createProducer()) {\n+            // Message without headers\n+            ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(topicName, null, \"{}\".getBytes(UTF_8));\n+            producer.send(record);\n+            // Message with simple header\n+            record = new ProducerRecord<>(topicName, null, \"{}\".getBytes(UTF_8));\n+            record.headers()\n+                    .add(\"notfoo\", \"some value\".getBytes(UTF_8));\n+            producer.send(record);\n+            // Message with multiple same key headers\n+            record = new ProducerRecord<>(topicName, null, \"{}\".getBytes(UTF_8));\n+            record.headers()\n+                    .add(\"foo\", \"bar\".getBytes(UTF_8))\n+                    .add(\"foo\", null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "80dc7cea55e1005eff07c0bbca20ae938c58c020", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/80dc7cea55e1005eff07c0bbca20ae938c58c020", "committedDate": "2020-07-29T18:30:30Z", "message": "Add header column to Kafka Connector\n\nColumn definition has been added to KafkaInternalFieldDescription with\nmap(VARCHAR,array(VARBINARY)) type from TypeManager.\nValueProvider has been added to KafkaRecordSet\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80dc7cea55e1005eff07c0bbca20ae938c58c020", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/80dc7cea55e1005eff07c0bbca20ae938c58c020", "committedDate": "2020-07-29T18:30:30Z", "message": "Add header column to Kafka Connector\n\nColumn definition has been added to KafkaInternalFieldDescription with\nmap(VARCHAR,array(VARBINARY)) type from TypeManager.\nValueProvider has been added to KafkaRecordSet\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}, "afterCommit": {"oid": "b58473aba6619d686d5e3f86a9d60cc717b63a0e", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/b58473aba6619d686d5e3f86a9d60cc717b63a0e", "committedDate": "2020-07-29T20:54:55Z", "message": "Add header column to Kafka Connector\n\nColumn definition has been added to KafkaInternalFieldDescription with\nmap(VARCHAR,array(VARBINARY)) type from TypeManager.\nValueProvider has been added to KafkaRecordSet\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MjIxMDQ0", "url": "https://github.com/trinodb/trino/pull/4462#pullrequestreview-464221044", "createdAt": "2020-08-10T13:21:16Z", "commit": {"oid": "b58473aba6619d686d5e3f86a9d60cc717b63a0e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b58473aba6619d686d5e3f86a9d60cc717b63a0e", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/b58473aba6619d686d5e3f86a9d60cc717b63a0e", "committedDate": "2020-07-29T20:54:55Z", "message": "Add header column to Kafka Connector\n\nColumn definition has been added to KafkaInternalFieldDescription with\nmap(VARCHAR,array(VARBINARY)) type from TypeManager.\nValueProvider has been added to KafkaRecordSet\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}, "afterCommit": {"oid": "a8d59c3ba863da2c7258d8fa8a1043e4c802fa67", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/a8d59c3ba863da2c7258d8fa8a1043e4c802fa67", "committedDate": "2020-08-18T19:45:04Z", "message": "Add header column to Kafka Connector\n\nColumn definition has been added to KafkaInternalFieldDescription with\nmap(VARCHAR,array(VARBINARY)) type from TypeManager.\nValueProvider has been added to KafkaRecordSet\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzg4OTI3", "url": "https://github.com/trinodb/trino/pull/4462#pullrequestreview-471388927", "createdAt": "2020-08-20T08:46:58Z", "commit": {"oid": "a8d59c3ba863da2c7258d8fa8a1043e4c802fa67"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0Njo1OFrOHD0_-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0ODo0MlrOHD1FrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NjEyMQ==", "bodyText": "drop dot at the end :)", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r473776121", "createdAt": "2020-08-20T08:46:58Z", "author": {"login": "losipiuk"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaInternalFieldManager.java", "diffHunk": "@@ -138,6 +149,10 @@ public KafkaInternalFieldManager(TypeManager typeManager)\n                         MESSAGE_FIELD,\n                         \"Message text\",\n                         createUnboundedVarcharType()))\n+                .put(HEADERS_FIELD, new InternalField(\n+                        HEADERS_FIELD,\n+                        \"Headers of the message as map.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d59c3ba863da2c7258d8fa8a1043e4c802fa67"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NzU4MQ==", "bodyText": "@0xE282B0 can you address this one unless the assumption about the fact, that empty headers is a common thing, is false?", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r473777581", "createdAt": "2020-08-20T08:48:42Z", "author": {"login": "losipiuk"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaRecordSet.java", "diffHunk": "@@ -269,4 +278,53 @@ public void close()\n             kafkaConsumer.close();\n         }\n     }\n+\n+    public static FieldValueProvider headerMapValueProvider(MapType varcharMapType, Headers headers)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNzg3NA=="}, "originalCommit": null, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NDY5MDI5", "url": "https://github.com/trinodb/trino/pull/4462#pullrequestreview-478469029", "createdAt": "2020-08-31T09:48:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTo0ODoyMVrOHJx8Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTo1MDoyNFrOHJyASA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxNzQ5MQ==", "bodyText": "I am not aware. Looks good to me.\nNit: can you rename createEmptyMapBlockProvider to createEmptyHeadersFieldProvider\nand EMPTY_MAP_BLOCK_PROVIDER to EMPTY_HEADERS_FIELD_PROVIDER", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r480017491", "createdAt": "2020-08-31T09:48:21Z", "author": {"login": "losipiuk"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaRecordSet.java", "diffHunk": "@@ -269,4 +278,53 @@ public void close()\n             kafkaConsumer.close();\n         }\n     }\n+\n+    public static FieldValueProvider headerMapValueProvider(MapType varcharMapType, Headers headers)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNzg3NA=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxODUwNA==", "bodyText": "Also please add a test when we are reading _headers column but headers map is empty.", "url": "https://github.com/trinodb/trino/pull/4462#discussion_r480018504", "createdAt": "2020-08-31T09:50:24Z", "author": {"login": "losipiuk"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaRecordSet.java", "diffHunk": "@@ -269,4 +278,53 @@ public void close()\n             kafkaConsumer.close();\n         }\n     }\n+\n+    public static FieldValueProvider headerMapValueProvider(MapType varcharMapType, Headers headers)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNzg3NA=="}, "originalCommit": null, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b3479f0af25757c8eca876fcef8f57ff47ebf7df", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/b3479f0af25757c8eca876fcef8f57ff47ebf7df", "committedDate": "2020-08-31T15:27:01Z", "message": "Add header column to Kafka Connector\n\nColumn definition has been added to KafkaInternalFieldDescription with\nmap(VARCHAR,array(VARBINARY)) type from TypeManager.\nValueProvider has been added to KafkaRecordSet\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ddb4ae8ca8fdd25e1245a6f5a7542c25882e748", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/3ddb4ae8ca8fdd25e1245a6f5a7542c25882e748", "committedDate": "2020-09-09T06:56:13Z", "message": "Make Type column wider in Kafka columns documentation\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0daf4b198fbd91386ae51255642a9fc6b2fa0b8f", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/0daf4b198fbd91386ae51255642a9fc6b2fa0b8f", "committedDate": "2020-09-09T06:56:13Z", "message": "Refactor KafkaInternalFieldDescription to KafkaInternalFieldManager\n\nThe KafkaInternalFieldManager creates the internalFields map in the\nconsructor where the TypeManager can be used.\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "228e08b2b943e057b9e510824b73194b82fbd909", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/228e08b2b943e057b9e510824b73194b82fbd909", "committedDate": "2020-09-09T06:56:14Z", "message": "Add header column to Kafka Connector\n\nColumn definition has been added to KafkaInternalFieldDescription with\nmap(VARCHAR,array(VARBINARY)) type from TypeManager.\nValueProvider has been added to KafkaRecordSet\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3479f0af25757c8eca876fcef8f57ff47ebf7df", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/b3479f0af25757c8eca876fcef8f57ff47ebf7df", "committedDate": "2020-08-31T15:27:01Z", "message": "Add header column to Kafka Connector\n\nColumn definition has been added to KafkaInternalFieldDescription with\nmap(VARCHAR,array(VARBINARY)) type from TypeManager.\nValueProvider has been added to KafkaRecordSet\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}, "afterCommit": {"oid": "228e08b2b943e057b9e510824b73194b82fbd909", "author": {"user": {"login": "0xE282B0", "name": "Sven Pfennig"}}, "url": "https://github.com/trinodb/trino/commit/228e08b2b943e057b9e510824b73194b82fbd909", "committedDate": "2020-09-09T06:56:14Z", "message": "Add header column to Kafka Connector\n\nColumn definition has been added to KafkaInternalFieldDescription with\nmap(VARCHAR,array(VARBINARY)) type from TypeManager.\nValueProvider has been added to KafkaRecordSet\n\nSigned-off-by: Sven Pfennig <sven.pfennig@syncier.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjEzNTUz", "url": "https://github.com/trinodb/trino/pull/4462#pullrequestreview-486213553", "createdAt": "2020-09-10T18:40:47Z", "commit": {"oid": "228e08b2b943e057b9e510824b73194b82fbd909"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4706, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}