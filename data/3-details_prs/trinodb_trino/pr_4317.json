{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjU3ODU2", "number": 4317, "title": "Assorted language changes", "bodyText": "", "createdAt": "2020-07-02T17:38:41Z", "url": "https://github.com/trinodb/trino/pull/4317", "merged": true, "mergeCommit": {"oid": "209556980938967df2f8c5f75f01a6b721caf0c6"}, "closed": true, "closedAt": "2020-07-10T00:53:44Z", "author": {"login": "bentito"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxEaChABqjM1MDg1NTUwNzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczRfH2ABqjM1MzA0ODA0ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTgyNzA0", "url": "https://github.com/trinodb/trino/pull/4317#pullrequestreview-441982704", "createdAt": "2020-07-02T19:58:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDowMDoxOVrOGsbXHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDo1OTo0NlrOGsc2qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzODgxMg==", "bodyText": "We can drop this entirely. If the list of allowed addresses is not empty, we use it. No need for this extra config. Move it to @DefunctConfig on the class.", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449238812", "createdAt": "2020-07-02T20:00:19Z", "author": {"login": "electrum"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientConfig.java", "diffHunk": "@@ -341,27 +342,29 @@ public CassandraClientConfig setTokenAwareShuffleReplicas(boolean tokenAwareShuf\n         return this;\n     }\n \n-    public boolean isUseWhiteList()\n+    public boolean isUseAllowList()\n     {\n-        return this.useWhiteList;\n+        return this.useAllowList;\n     }\n \n-    @Config(\"cassandra.load-policy.use-white-list\")\n-    public CassandraClientConfig setUseWhiteList(boolean useWhiteList)\n+    @Config(\"cassandra.load-policy.use-allow-list\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzODk3Ng==", "bodyText": "Let's make this cassandra.load-policy.allowed-addresses and name the field allowedAddresses", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449238976", "createdAt": "2020-07-02T20:00:41Z", "author": {"login": "electrum"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientConfig.java", "diffHunk": "@@ -341,27 +342,29 @@ public CassandraClientConfig setTokenAwareShuffleReplicas(boolean tokenAwareShuf\n         return this;\n     }\n \n-    public boolean isUseWhiteList()\n+    public boolean isUseAllowList()\n     {\n-        return this.useWhiteList;\n+        return this.useAllowList;\n     }\n \n-    @Config(\"cassandra.load-policy.use-white-list\")\n-    public CassandraClientConfig setUseWhiteList(boolean useWhiteList)\n+    @Config(\"cassandra.load-policy.use-allow-list\")\n+    @LegacyConfig(\"cassandra.load-policy.use-white-list\")\n+    public CassandraClientConfig setUseAllowList(boolean useAllowList)\n     {\n-        this.useWhiteList = useWhiteList;\n+        this.useAllowList = useAllowList;\n         return this;\n     }\n \n-    public List<String> getWhiteListAddresses()\n+    public List<String> getAllowListAddresses()\n     {\n-        return whiteListAddresses;\n+        return allowListAddresses;\n     }\n \n-    @Config(\"cassandra.load-policy.white-list.addresses\")\n-    public CassandraClientConfig setWhiteListAddresses(String commaSeparatedList)\n+    @Config(\"cassandra.load-policy.allow-list.addresses\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzOTk2Ng==", "bodyText": "This will become\nif (!config.getAllowedAddresses().isEmpty())", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449239966", "createdAt": "2020-07-02T20:03:13Z", "author": {"login": "electrum"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientModule.java", "diffHunk": "@@ -122,13 +122,14 @@ public static CassandraSession createCassandraSession(CassandraClientConfig conf\n             loadPolicy = new TokenAwarePolicy(loadPolicy, config.isTokenAwareShuffleReplicas());\n         }\n \n-        if (config.isUseWhiteList()) {\n-            checkArgument(!config.getWhiteListAddresses().isEmpty(), \"empty WhiteListAddresses\");\n-            List<InetSocketAddress> whiteList = new ArrayList<>();\n-            for (String point : config.getWhiteListAddresses()) {\n-                whiteList.add(new InetSocketAddress(point, config.getNativeProtocolPort()));\n+        if (config.isUseAllowList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0OTUwNg==", "bodyText": "How about isInclusive()", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449249506", "createdAt": "2020-07-02T20:26:06Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/DiscreteValues.java", "diffHunk": "@@ -20,7 +20,7 @@\n     /**\n      * @return true if the values are to be included, false if the values are to be excluded\n      */\n-    boolean isWhiteList();\n+    boolean isAllowList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NDY0NA==", "bodyText": "How about inclusive. Then we don't need the \"aka\" in the comment above (which kind of indicates the field should be named better to be self-descriptive)", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449254644", "createdAt": "2020-07-02T20:37:59Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/EquatableValueSet.java", "diffHunk": "@@ -42,20 +42,20 @@\n \n /**\n  * A set containing values that are uniquely identifiable.\n- * Assumes an infinite number of possible values. The values may be collectively included (aka whitelist)\n- * or collectively excluded (aka !whitelist).\n+ * Assumes an infinite number of possible values. The values may be collectively included (aka allowList)\n+ * or collectively excluded (aka !allowList).\n  */\n public class EquatableValueSet\n         implements ValueSet\n {\n     private final Type type;\n-    private final boolean whiteList;\n+    private final boolean allowList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NTE0OA==", "bodyText": "Same, let's call this inclusive", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449255148", "createdAt": "2020-07-02T20:39:20Z", "author": {"login": "electrum"}, "path": "presto-thrift-api/src/main/java/io/prestosql/plugin/thrift/api/valuesets/PrestoThriftEquatableValueSet.java", "diffHunk": "@@ -33,27 +33,27 @@\n \n /**\n  * A set containing values that are uniquely identifiable.\n- * Assumes an infinite number of possible values. The values may be collectively included (aka whitelist)\n- * or collectively excluded (aka !whitelist).\n+ * Assumes an infinite number of possible values. The values may be collectively included (aka allowList)\n+ * or collectively excluded (aka !allowList).\n  * This structure is used with comparable, but not orderable types like \"json\", \"map\".\n  */\n @ThriftStruct\n public final class PrestoThriftEquatableValueSet\n {\n-    private final boolean whiteList;\n+    private final boolean allowList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NTM5Nw==", "bodyText": "Remove this along with removing the boolean property", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449255397", "createdAt": "2020-07-02T20:39:55Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/cassandra.rst", "diffHunk": "@@ -137,9 +137,9 @@ Property Name                                                 Description\n ``cassandra.load-policy.shuffle-replicas``                    Set to ``true`` to use ``TokenAwarePolicy`` with shuffling of replicas,\n                                                               defaults to ``false``.\n \n-``cassandra.load-policy.use-white-list``                      Set to ``true`` to use ``WhiteListPolicy``, defaults to ``false``.\n+``cassandra.load-policy.use-allow-list``                      Set to ``true`` to use ``AllowListPolicy``, defaults to ``false``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NjAzMg==", "bodyText": "The WhiteListPolicy is actually referring to the com.datastax.driver.core.policies.WhiteListPolicy class in the Cassandra driver. We can change the text to\n\nComma-separated list of hosts to allow.", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449256032", "createdAt": "2020-07-02T20:41:25Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/cassandra.rst", "diffHunk": "@@ -137,9 +137,9 @@ Property Name                                                 Description\n ``cassandra.load-policy.shuffle-replicas``                    Set to ``true`` to use ``TokenAwarePolicy`` with shuffling of replicas,\n                                                               defaults to ``false``.\n \n-``cassandra.load-policy.use-white-list``                      Set to ``true`` to use ``WhiteListPolicy``, defaults to ``false``.\n+``cassandra.load-policy.use-allow-list``                      Set to ``true`` to use ``AllowListPolicy``, defaults to ``false``.\n \n-``cassandra.load-policy.white-list.addresses``                Comma-separated list of hosts for ``WhiteListPolicy``.\n+``cassandra.load-policy.allow-list.addresses``                Comma-separated list of hosts for ``AllowListPolicy``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NjE0MA==", "bodyText": "inclusive", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449256140", "createdAt": "2020-07-02T20:41:40Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/include/PrestoThriftService.thrift", "diffHunk": "@@ -58,12 +58,12 @@ struct PrestoThriftAllOrNoneValueSet {\n \n /**\n  * A set containing values that are uniquely identifiable.\n- * Assumes an infinite number of possible values. The values may be collectively included (aka whitelist)\n- * or collectively excluded (aka !whitelist).\n+ * Assumes an infinite number of possible values. The values may be collectively included (aka allowList)\n+ * or collectively excluded (aka !allowList).\n  * This structure is used with comparable, but not orderable types like \"json\", \"map\".\n  */\n struct PrestoThriftEquatableValueSet {\n-  1: bool whiteList;\n+  1: bool allowList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1ODA0NQ==", "bodyText": "We can simplify the entire item (and make it more correct since there other types of plugins)\n\nPrevent plugis from seeing classes that are not part of the JDK (bootstrap classes) or the SPI.", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449258045", "createdAt": "2020-07-02T20:46:29Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/release/release-0.153.rst", "diffHunk": "@@ -151,7 +151,7 @@ SPI Changes\n * Make ``NodeManager`` specific to a connector instance.\n * Replace ``ConnectorFactoryContext`` with ``ConnectorContext``.\n * Use ``@SqlNullable`` for functions instead of ``@Nullable``.\n-* Use a whitelist model for plugin class loading. This prevents connectors\n+* Use an allow-list model for plugin class loading. This prevents connectors", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1ODUzNg==", "bodyText": "// TODO we should recognize exceptions which we suppress and try different alternative call", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449258536", "createdAt": "2020-07-02T20:47:42Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastore.java", "diffHunk": "@@ -1802,7 +1802,7 @@ else if (firstException != exception) {\n         throw propagate(firstException);\n     }\n \n-    // TODO instead of whitelisting exceptions we propagate we should recognize exceptions which we suppress and try different alternative call\n+    // TODO instead of allow-listing exceptions we propagate we should recognize exceptions which we suppress and try different alternative call", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1ODcwMQ==", "bodyText": "allowedExceptions", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449258701", "createdAt": "2020-07-02T20:48:06Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/RetryDriver.java", "diffHunk": "@@ -41,7 +41,7 @@\n     private final Duration maxSleepTime;\n     private final double scaleFactor;\n     private final Duration maxRetryTime;\n-    private final List<Class<? extends Exception>> exceptionWhiteList;\n+    private final List<Class<? extends Exception>> exceptionAllowList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1OTEzNQ==", "bodyText": "Let's this comment entirely. It's been here for years and we are unlikely to change it.", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449259135", "createdAt": "2020-07-02T20:49:19Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/metadata/DiscoveryNodeManager.java", "diffHunk": "@@ -198,8 +198,8 @@ public void refreshNodes()\n \n     private synchronized void refreshNodesInternal()\n     {\n-        // This is currently a blacklist.\n-        // TODO: make it a whitelist (a failure-detecting service selector) and maybe build in support for injecting this in airlift\n+        // This is currently a deny-list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1OTM2NQ==", "bodyText": "// inclusive", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449259365", "createdAt": "2020-07-02T20:49:51Z", "author": {"login": "electrum"}, "path": "presto-spi/src/test/java/io/prestosql/spi/predicate/TestEquatableValueSet.java", "diffHunk": "@@ -73,24 +73,24 @@ public void testSingleValue()\n \n         EquatableValueSet complement = (EquatableValueSet) EquatableValueSet.all(ID).subtract(equatables);\n \n-        // Whitelist\n+        // allow-list", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1OTQxOQ==", "bodyText": "// exclusive", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449259419", "createdAt": "2020-07-02T20:50:00Z", "author": {"login": "electrum"}, "path": "presto-spi/src/test/java/io/prestosql/spi/predicate/TestEquatableValueSet.java", "diffHunk": "@@ -73,24 +73,24 @@ public void testSingleValue()\n \n         EquatableValueSet complement = (EquatableValueSet) EquatableValueSet.all(ID).subtract(equatables);\n \n-        // Whitelist\n+        // allow-list\n         assertEquals(equatables.getType(), ID);\n         assertFalse(equatables.isNone());\n         assertFalse(equatables.isAll());\n         assertTrue(equatables.isSingleValue());\n-        assertTrue(equatables.isWhiteList());\n+        assertTrue(equatables.isAllowList());\n         assertTrue(Iterables.elementsEqual(equatables.getValues(), ImmutableList.of(10L)));\n         assertEquals(equatables.complement(), complement);\n         assertFalse(equatables.containsValue(0L));\n         assertFalse(equatables.containsValue(1L));\n         assertTrue(equatables.containsValue(10L));\n \n-        // Blacklist\n+        // deny-list", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1OTUwMA==", "bodyText": "// inclusive", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449259500", "createdAt": "2020-07-02T20:50:08Z", "author": {"login": "electrum"}, "path": "presto-spi/src/test/java/io/prestosql/spi/predicate/TestEquatableValueSet.java", "diffHunk": "@@ -105,12 +105,12 @@ public void testMultipleValues()\n \n         EquatableValueSet complement = (EquatableValueSet) EquatableValueSet.all(ID).subtract(equatables);\n \n-        // Whitelist\n+        // allow-list", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1OTU0Nw==", "bodyText": "// exclusive", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449259547", "createdAt": "2020-07-02T20:50:13Z", "author": {"login": "electrum"}, "path": "presto-spi/src/test/java/io/prestosql/spi/predicate/TestEquatableValueSet.java", "diffHunk": "@@ -119,12 +119,12 @@ public void testMultipleValues()\n         assertTrue(equatables.containsValue(3L));\n         assertFalse(equatables.containsValue(4L));\n \n-        // Blacklist\n+        // deny-list", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1OTg0Mw==", "bodyText": "// query has too many rows. Consider banning it.", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449259843", "createdAt": "2020-07-02T20:50:58Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/Validator.java", "diffHunk": "@@ -214,7 +214,7 @@ private boolean validate()\n         try {\n             controlResult = executePreAndMainForControl();\n \n-            // query has too many rows. Consider blacklisting.\n+            // query has too many rows. Consider using a deny-list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1OTk2OQ==", "bodyText": "allowedQueries", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449259969", "createdAt": "2020-07-02T20:51:13Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/Verifier.java", "diffHunk": "@@ -55,17 +55,17 @@\n     private final VerifierConfig config;\n     private final Set<EventClient> eventClients;\n     private final int threadCount;\n-    private final Set<String> whitelist;\n-    private final Set<String> blacklist;\n+    private final Set<String> allowList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDEwMg==", "bodyText": "bannedQueries", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449260102", "createdAt": "2020-07-02T20:51:31Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/Verifier.java", "diffHunk": "@@ -55,17 +55,17 @@\n     private final VerifierConfig config;\n     private final Set<EventClient> eventClients;\n     private final int threadCount;\n-    private final Set<String> whitelist;\n-    private final Set<String> blacklist;\n+    private final Set<String> allowList;\n+    private final Set<String> denyList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDE3OQ==", "bodyText": "Allowed Queries:", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449260179", "createdAt": "2020-07-02T20:51:41Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/Verifier.java", "diffHunk": "@@ -80,19 +80,19 @@ public int run(List<QueryPair> queries)\n         int totalQueries = queries.size() * config.getSuiteRepetitions() * config.getQueryRepetitions();\n         log.info(\"Total Queries:     %d\", totalQueries);\n \n-        log.info(\"Whitelisted Queries: %s\", Joiner.on(',').join(whitelist));\n+        log.info(\"Allow-listed Queries: %s\", Joiner.on(',').join(allowList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDQ2Mg==", "bodyText": "// If we have allowed queries, only run the tests on those", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449260462", "createdAt": "2020-07-02T20:52:25Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/Verifier.java", "diffHunk": "@@ -80,19 +80,19 @@ public int run(List<QueryPair> queries)\n         int totalQueries = queries.size() * config.getSuiteRepetitions() * config.getQueryRepetitions();\n         log.info(\"Total Queries:     %d\", totalQueries);\n \n-        log.info(\"Whitelisted Queries: %s\", Joiner.on(',').join(whitelist));\n+        log.info(\"Allow-listed Queries: %s\", Joiner.on(',').join(allowList));\n \n         int queriesSubmitted = 0;\n         for (int i = 0; i < config.getSuiteRepetitions(); i++) {\n             for (QueryPair query : queries) {\n                 for (int j = 0; j < config.getQueryRepetitions(); j++) {\n-                    // If a whitelist exists, only run the tests on the whitelist\n-                    if (!whitelist.isEmpty() && !whitelist.contains(query.getName())) {\n-                        log.debug(\"Query %s is not whitelisted\", query.getName());\n+                    // If a allowList exists, only run the tests on the allowList", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDU2MQ==", "bodyText": "Query %s is not allowed", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449260561", "createdAt": "2020-07-02T20:52:39Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/Verifier.java", "diffHunk": "@@ -80,19 +80,19 @@ public int run(List<QueryPair> queries)\n         int totalQueries = queries.size() * config.getSuiteRepetitions() * config.getQueryRepetitions();\n         log.info(\"Total Queries:     %d\", totalQueries);\n \n-        log.info(\"Whitelisted Queries: %s\", Joiner.on(',').join(whitelist));\n+        log.info(\"Allow-listed Queries: %s\", Joiner.on(',').join(allowList));\n \n         int queriesSubmitted = 0;\n         for (int i = 0; i < config.getSuiteRepetitions(); i++) {\n             for (QueryPair query : queries) {\n                 for (int j = 0; j < config.getQueryRepetitions(); j++) {\n-                    // If a whitelist exists, only run the tests on the whitelist\n-                    if (!whitelist.isEmpty() && !whitelist.contains(query.getName())) {\n-                        log.debug(\"Query %s is not whitelisted\", query.getName());\n+                    // If a allowList exists, only run the tests on the allowList\n+                    if (!allowList.isEmpty() && !allowList.contains(query.getName())) {\n+                        log.debug(\"Query %s is not allow-listed\", query.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDY3Mw==", "bodyText": "Query %s is banned", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449260673", "createdAt": "2020-07-02T20:52:59Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/Verifier.java", "diffHunk": "@@ -80,19 +80,19 @@ public int run(List<QueryPair> queries)\n         int totalQueries = queries.size() * config.getSuiteRepetitions() * config.getQueryRepetitions();\n         log.info(\"Total Queries:     %d\", totalQueries);\n \n-        log.info(\"Whitelisted Queries: %s\", Joiner.on(',').join(whitelist));\n+        log.info(\"Allow-listed Queries: %s\", Joiner.on(',').join(allowList));\n \n         int queriesSubmitted = 0;\n         for (int i = 0; i < config.getSuiteRepetitions(); i++) {\n             for (QueryPair query : queries) {\n                 for (int j = 0; j < config.getQueryRepetitions(); j++) {\n-                    // If a whitelist exists, only run the tests on the whitelist\n-                    if (!whitelist.isEmpty() && !whitelist.contains(query.getName())) {\n-                        log.debug(\"Query %s is not whitelisted\", query.getName());\n+                    // If a allowList exists, only run the tests on the allowList\n+                    if (!allowList.isEmpty() && !allowList.contains(query.getName())) {\n+                        log.debug(\"Query %s is not allow-listed\", query.getName());\n                         continue;\n                     }\n-                    if (blacklist.contains(query.getName())) {\n-                        log.debug(\"Query %s is blacklisted\", query.getName());\n+                    if (denyList.contains(query.getName())) {\n+                        log.debug(\"Query %s is deny-listed\", query.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDc5OQ==", "bodyText": "bannedQueries", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449260799", "createdAt": "2020-07-02T20:53:18Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/VerifierConfig.java", "diffHunk": "@@ -58,8 +58,8 @@\n     private String testGateway;\n     private Duration controlTimeout = new Duration(10, TimeUnit.MINUTES);\n     private Duration testTimeout = new Duration(1, TimeUnit.HOURS);\n-    private Set<String> blacklist = ImmutableSet.of();\n-    private Set<String> whitelist = ImmutableSet.of();\n+    private Set<String> denyList = ImmutableSet.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDgzMA==", "bodyText": "allowedQueries", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449260830", "createdAt": "2020-07-02T20:53:23Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/VerifierConfig.java", "diffHunk": "@@ -58,8 +58,8 @@\n     private String testGateway;\n     private Duration controlTimeout = new Duration(10, TimeUnit.MINUTES);\n     private Duration testTimeout = new Duration(1, TimeUnit.HOURS);\n-    private Set<String> blacklist = ImmutableSet.of();\n-    private Set<String> whitelist = ImmutableSet.of();\n+    private Set<String> denyList = ImmutableSet.of();\n+    private Set<String> allowList = ImmutableSet.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDk4NA==", "bodyText": "Names of queries that are banned", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449260984", "createdAt": "2020-07-02T20:53:54Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/VerifierConfig.java", "diffHunk": "@@ -271,40 +271,42 @@ public VerifierConfig setQueryDatabase(String queryDatabase)\n     }\n \n     @NotNull\n-    public Set<String> getBlacklist()\n+    public Set<String> getDenyList()\n     {\n-        return blacklist;\n+        return denyList;\n     }\n \n-    @ConfigDescription(\"Names of queries which are blacklisted\")\n-    @Config(\"blacklist\")\n-    public VerifierConfig setBlacklist(String blacklist)\n+    @ConfigDescription(\"Names of queries which are on the denyList\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTAxNQ==", "bodyText": "banned-queries", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449261015", "createdAt": "2020-07-02T20:54:01Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/VerifierConfig.java", "diffHunk": "@@ -271,40 +271,42 @@ public VerifierConfig setQueryDatabase(String queryDatabase)\n     }\n \n     @NotNull\n-    public Set<String> getBlacklist()\n+    public Set<String> getDenyList()\n     {\n-        return blacklist;\n+        return denyList;\n     }\n \n-    @ConfigDescription(\"Names of queries which are blacklisted\")\n-    @Config(\"blacklist\")\n-    public VerifierConfig setBlacklist(String blacklist)\n+    @ConfigDescription(\"Names of queries which are on the denyList\")\n+    @Config(\"denyList\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTE2MQ==", "bodyText": "bannedBuilder", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449261161", "createdAt": "2020-07-02T20:54:23Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/VerifierConfig.java", "diffHunk": "@@ -271,40 +271,42 @@ public VerifierConfig setQueryDatabase(String queryDatabase)\n     }\n \n     @NotNull\n-    public Set<String> getBlacklist()\n+    public Set<String> getDenyList()\n     {\n-        return blacklist;\n+        return denyList;\n     }\n \n-    @ConfigDescription(\"Names of queries which are blacklisted\")\n-    @Config(\"blacklist\")\n-    public VerifierConfig setBlacklist(String blacklist)\n+    @ConfigDescription(\"Names of queries which are on the denyList\")\n+    @Config(\"denyList\")\n+    @LegacyConfig(\"blacklist\")\n+    public VerifierConfig setDenyList(String denyList)\n     {\n-        ImmutableSet.Builder<String> blacklistBuilder = ImmutableSet.builder();\n-        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(blacklist)) {\n-            blacklistBuilder.add(value);\n+        ImmutableSet.Builder<String> denylistBuilder = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTUzNA==", "bodyText": "Names of queries which are allowed. If non-empty, only allowed queries are used.", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449261534", "createdAt": "2020-07-02T20:55:16Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/VerifierConfig.java", "diffHunk": "@@ -271,40 +271,42 @@ public VerifierConfig setQueryDatabase(String queryDatabase)\n     }\n \n     @NotNull\n-    public Set<String> getBlacklist()\n+    public Set<String> getDenyList()\n     {\n-        return blacklist;\n+        return denyList;\n     }\n \n-    @ConfigDescription(\"Names of queries which are blacklisted\")\n-    @Config(\"blacklist\")\n-    public VerifierConfig setBlacklist(String blacklist)\n+    @ConfigDescription(\"Names of queries which are on the denyList\")\n+    @Config(\"denyList\")\n+    @LegacyConfig(\"blacklist\")\n+    public VerifierConfig setDenyList(String denyList)\n     {\n-        ImmutableSet.Builder<String> blacklistBuilder = ImmutableSet.builder();\n-        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(blacklist)) {\n-            blacklistBuilder.add(value);\n+        ImmutableSet.Builder<String> denylistBuilder = ImmutableSet.builder();\n+        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(denyList)) {\n+            denylistBuilder.add(value);\n         }\n \n-        this.blacklist = blacklistBuilder.build();\n+        this.denyList = denylistBuilder.build();\n         return this;\n     }\n \n     @NotNull\n-    public Set<String> getWhitelist()\n+    public Set<String> getAllowList()\n     {\n-        return whitelist;\n+        return allowList;\n     }\n \n-    @ConfigDescription(\"Names of queries which are whitelisted. Whitelist is applied before the blacklist\")\n-    @Config(\"whitelist\")\n-    public VerifierConfig setWhitelist(String whitelist)\n+    @ConfigDescription(\"Names of queries which are on the allowList. allowList is applied before the denyList\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTcwMg==", "bodyText": "allowedBuilder", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449261702", "createdAt": "2020-07-02T20:55:38Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/VerifierConfig.java", "diffHunk": "@@ -271,40 +271,42 @@ public VerifierConfig setQueryDatabase(String queryDatabase)\n     }\n \n     @NotNull\n-    public Set<String> getBlacklist()\n+    public Set<String> getDenyList()\n     {\n-        return blacklist;\n+        return denyList;\n     }\n \n-    @ConfigDescription(\"Names of queries which are blacklisted\")\n-    @Config(\"blacklist\")\n-    public VerifierConfig setBlacklist(String blacklist)\n+    @ConfigDescription(\"Names of queries which are on the denyList\")\n+    @Config(\"denyList\")\n+    @LegacyConfig(\"blacklist\")\n+    public VerifierConfig setDenyList(String denyList)\n     {\n-        ImmutableSet.Builder<String> blacklistBuilder = ImmutableSet.builder();\n-        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(blacklist)) {\n-            blacklistBuilder.add(value);\n+        ImmutableSet.Builder<String> denylistBuilder = ImmutableSet.builder();\n+        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(denyList)) {\n+            denylistBuilder.add(value);\n         }\n \n-        this.blacklist = blacklistBuilder.build();\n+        this.denyList = denylistBuilder.build();\n         return this;\n     }\n \n     @NotNull\n-    public Set<String> getWhitelist()\n+    public Set<String> getAllowList()\n     {\n-        return whitelist;\n+        return allowList;\n     }\n \n-    @ConfigDescription(\"Names of queries which are whitelisted. Whitelist is applied before the blacklist\")\n-    @Config(\"whitelist\")\n-    public VerifierConfig setWhitelist(String whitelist)\n+    @ConfigDescription(\"Names of queries which are on the allowList. allowList is applied before the denyList\")\n+    @Config(\"allowList\")\n+    @LegacyConfig(\"whitelist\")\n+    public VerifierConfig setAllowList(String allowList)\n     {\n-        ImmutableSet.Builder<String> whitelistBuilder = ImmutableSet.builder();\n-        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(whitelist)) {\n-            whitelistBuilder.add(value);\n+        ImmutableSet.Builder<String> allowlistBuilder = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MzI3Mg==", "bodyText": "Let's remove this comment, as we are stuck on an old version of the driver for various reasons. If they deprecate this class name in the 3.x branch, we'd update the usage just like any other deprecated API migration.", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r449263272", "createdAt": "2020-07-02T20:59:46Z", "author": {"login": "electrum"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientModule.java", "diffHunk": "@@ -122,13 +122,14 @@ public static CassandraSession createCassandraSession(CassandraClientConfig conf\n             loadPolicy = new TokenAwarePolicy(loadPolicy, config.isTokenAwareShuffleReplicas());\n         }\n \n-        if (config.isUseWhiteList()) {\n-            checkArgument(!config.getWhiteListAddresses().isEmpty(), \"empty WhiteListAddresses\");\n-            List<InetSocketAddress> whiteList = new ArrayList<>();\n-            for (String point : config.getWhiteListAddresses()) {\n-                whiteList.add(new InetSocketAddress(point, config.getNativeProtocolPort()));\n+        if (config.isUseAllowList()) {\n+            checkArgument(!config.getAllowListAddresses().isEmpty(), \"empty AllowListAddresses\");\n+            List<InetSocketAddress> allowList = new ArrayList<>();\n+            for (String point : config.getAllowListAddresses()) {\n+                allowList.add(new InetSocketAddress(point, config.getNativeProtocolPort()));\n             }\n-            loadPolicy = new WhiteListPolicy(loadPolicy, whiteList);\n+            //TODO update this when com.datastax.driver is updated with regards to language", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTYxOTYy", "url": "https://github.com/trinodb/trino/pull/4317#pullrequestreview-443561962", "createdAt": "2020-07-07T04:57:08Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDo1NzowOVrOGtvF6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTowMzoyOVrOGtvMZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMDY2NQ==", "bodyText": "This needs to be named getAllowedQueries so that it matches the setter, as config classes use JavaBean conventions and thus require matching names. It causes a test failure:\nNo getter for @Config method [public io.prestosql.verifier.VerifierConfig io.prestosql.verifier.VerifierConfig.setAllowedQueries(java.lang.String)].", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r450610665", "createdAt": "2020-07-07T04:57:09Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/VerifierConfig.java", "diffHunk": "@@ -271,40 +271,42 @@ public VerifierConfig setQueryDatabase(String queryDatabase)\n     }\n \n     @NotNull\n-    public Set<String> getBlacklist()\n+    public Set<String> getBannedQueries()\n     {\n-        return blacklist;\n+        return bannedQueries;\n     }\n \n-    @ConfigDescription(\"Names of queries which are blacklisted\")\n-    @Config(\"blacklist\")\n-    public VerifierConfig setBlacklist(String blacklist)\n+    @ConfigDescription(\"Names of queries which are banned\")\n+    @Config(\"banned-queries\")\n+    @LegacyConfig(\"blacklist\")\n+    public VerifierConfig setBannedQueries(String bannedQueries)\n     {\n-        ImmutableSet.Builder<String> blacklistBuilder = ImmutableSet.builder();\n-        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(blacklist)) {\n-            blacklistBuilder.add(value);\n+        ImmutableSet.Builder<String> bannedBuilder = ImmutableSet.builder();\n+        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(bannedQueries)) {\n+            bannedBuilder.add(value);\n         }\n \n-        this.blacklist = blacklistBuilder.build();\n+        this.bannedQueries = bannedBuilder.build();\n         return this;\n     }\n \n     @NotNull\n-    public Set<String> getWhitelist()\n+    public Set<String> getAllowQueries()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMTAwNA==", "bodyText": "This is no longer used, so we can remove it (along with the getter/setter)", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r450611004", "createdAt": "2020-07-07T04:58:32Z", "author": {"login": "electrum"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientConfig.java", "diffHunk": "@@ -67,8 +68,8 @@\n     private boolean dcAwareAllowRemoteDCsForLocal;\n     private boolean useTokenAware;\n     private boolean tokenAwareShuffleReplicas;\n-    private boolean useWhiteList;\n-    private List<String> whiteListAddresses = ImmutableList.of();\n+    private boolean useAllowList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMTI0Mg==", "bodyText": "Since we're getting rid of cassandra.load-policy.use-white-list, anyone using this feature will need to update their configs, so we can move this to @DefunctConfig as well (no need to retain it as legacy).", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r450611242", "createdAt": "2020-07-07T04:59:20Z", "author": {"login": "electrum"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientConfig.java", "diffHunk": "@@ -341,27 +342,28 @@ public CassandraClientConfig setTokenAwareShuffleReplicas(boolean tokenAwareShuf\n         return this;\n     }\n \n-    public boolean isUseWhiteList()\n+    public boolean isUseAllowList()\n     {\n-        return this.useWhiteList;\n+        return this.useAllowList;\n     }\n \n-    @Config(\"cassandra.load-policy.use-white-list\")\n-    public CassandraClientConfig setUseWhiteList(boolean useWhiteList)\n+    @Config(\"cassandra.load-policy.use-allow-list\")\n+    public CassandraClientConfig setUseAllowList(boolean useAllowList)\n     {\n-        this.useWhiteList = useWhiteList;\n+        this.useAllowList = useAllowList;\n         return this;\n     }\n \n-    public List<String> getWhiteListAddresses()\n+    public List<String> getAllowedAddresses()\n     {\n-        return whiteListAddresses;\n+        return allowedAddresses;\n     }\n \n-    @Config(\"cassandra.load-policy.white-list.addresses\")\n-    public CassandraClientConfig setWhiteListAddresses(String commaSeparatedList)\n+    @Config(\"cassandra.load-policy.allowed.addresses\")\n+    @LegacyConfig(\"cassandra.load-policy.white-list.addresses\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMTU3NA==", "bodyText": "Please rename to inclusive", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r450611574", "createdAt": "2020-07-07T05:00:33Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/EquatableValueSet.java", "diffHunk": "@@ -42,20 +42,20 @@\n \n /**\n  * A set containing values that are uniquely identifiable.\n- * Assumes an infinite number of possible values. The values may be collectively included (aka whitelist)\n- * or collectively excluded (aka !whitelist).\n+ * Assumes an infinite number of possible values. The values may be collectively included\n+ * or collectively excluded.\n  */\n public class EquatableValueSet\n         implements ValueSet\n {\n     private final Type type;\n-    private final boolean whiteList;\n+    private final boolean allowList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMTY2MA==", "bodyText": "Change JSON property to inclusive", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r450611660", "createdAt": "2020-07-07T05:00:46Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/EquatableValueSet.java", "diffHunk": "@@ -42,20 +42,20 @@\n \n /**\n  * A set containing values that are uniquely identifiable.\n- * Assumes an infinite number of possible values. The values may be collectively included (aka whitelist)\n- * or collectively excluded (aka !whitelist).\n+ * Assumes an infinite number of possible values. The values may be collectively included\n+ * or collectively excluded.\n  */\n public class EquatableValueSet\n         implements ValueSet\n {\n     private final Type type;\n-    private final boolean whiteList;\n+    private final boolean allowList;\n     private final Set<ValueEntry> entries;\n \n     @JsonCreator\n     public EquatableValueSet(\n             @JsonProperty(\"type\") Type type,\n-            @JsonProperty(\"whiteList\") boolean whiteList,\n+            @JsonProperty(\"allowList\") boolean inclusive,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMjMyNg==", "bodyText": "Let's call this allowed-queries\nMake sure to update TestVerifierConfig to match", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r450612326", "createdAt": "2020-07-07T05:03:29Z", "author": {"login": "electrum"}, "path": "presto-verifier/src/main/java/io/prestosql/verifier/VerifierConfig.java", "diffHunk": "@@ -271,40 +271,42 @@ public VerifierConfig setQueryDatabase(String queryDatabase)\n     }\n \n     @NotNull\n-    public Set<String> getBlacklist()\n+    public Set<String> getBannedQueries()\n     {\n-        return blacklist;\n+        return bannedQueries;\n     }\n \n-    @ConfigDescription(\"Names of queries which are blacklisted\")\n-    @Config(\"blacklist\")\n-    public VerifierConfig setBlacklist(String blacklist)\n+    @ConfigDescription(\"Names of queries which are banned\")\n+    @Config(\"banned-queries\")\n+    @LegacyConfig(\"blacklist\")\n+    public VerifierConfig setBannedQueries(String bannedQueries)\n     {\n-        ImmutableSet.Builder<String> blacklistBuilder = ImmutableSet.builder();\n-        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(blacklist)) {\n-            blacklistBuilder.add(value);\n+        ImmutableSet.Builder<String> bannedBuilder = ImmutableSet.builder();\n+        for (String value : Splitter.on(',').trimResults().omitEmptyStrings().split(bannedQueries)) {\n+            bannedBuilder.add(value);\n         }\n \n-        this.blacklist = blacklistBuilder.build();\n+        this.bannedQueries = bannedBuilder.build();\n         return this;\n     }\n \n     @NotNull\n-    public Set<String> getWhitelist()\n+    public Set<String> getAllowQueries()\n     {\n-        return whitelist;\n+        return allowedQueries;\n     }\n \n-    @ConfigDescription(\"Names of queries which are whitelisted. Whitelist is applied before the blacklist\")\n-    @Config(\"whitelist\")\n-    public VerifierConfig setWhitelist(String whitelist)\n+    @ConfigDescription(\"Names of queries which are allowed. If non-empty, only allowed queries are used.\")\n+    @Config(\"allowList\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjgyNDMx", "url": "https://github.com/trinodb/trino/pull/4317#pullrequestreview-444282431", "createdAt": "2020-07-07T22:04:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNDo0MVrOGuRP9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNDo0MVrOGuRP9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MDI5Mg==", "bodyText": "Please change to cassandra.load-policy.allowed-addresses", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r451170292", "createdAt": "2020-07-07T22:04:41Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/cassandra.rst", "diffHunk": "@@ -137,9 +137,7 @@ Property Name                                                 Description\n ``cassandra.load-policy.shuffle-replicas``                    Set to ``true`` to use ``TokenAwarePolicy`` with shuffling of replicas,\n                                                               defaults to ``false``.\n \n-``cassandra.load-policy.use-white-list``                      Set to ``true`` to use ``WhiteListPolicy``, defaults to ``false``.\n-\n-``cassandra.load-policy.white-list.addresses``                Comma-separated list of hosts for ``WhiteListPolicy``.\n+``cassandra.load-policy.allow-list.addresses``                Comma-separated list of hosts to allow.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjgyNjc4", "url": "https://github.com/trinodb/trino/pull/4317#pullrequestreview-444282678", "createdAt": "2020-07-07T22:05:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNTowOVrOGuRQzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNTowOVrOGuRQzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MDUxMQ==", "bodyText": "This needs to call setAllowedAddresses()", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r451170511", "createdAt": "2020-07-07T22:05:09Z", "author": {"login": "electrum"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraClientConfig.java", "diffHunk": "@@ -58,8 +58,6 @@ public void testDefaults()\n                 .setDcAwareAllowRemoteDCsForLocal(false)\n                 .setUseTokenAware(false)\n                 .setTokenAwareShuffleReplicas(false)\n-                .setUseWhiteList(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjgyOTY0", "url": "https://github.com/trinodb/trino/pull/4317#pullrequestreview-444282964", "createdAt": "2020-07-07T22:05:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNTo0MlrOGuRRqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNTo0MlrOGuRRqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MDczMQ==", "bodyText": "Need to add\n.put(\"cassandra.load-policy.allowed-addresses\", \"host1,host2\")", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r451170731", "createdAt": "2020-07-07T22:05:42Z", "author": {"login": "electrum"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraClientConfig.java", "diffHunk": "@@ -99,8 +97,6 @@ public void testExplicitPropertyMappings()\n                 .put(\"cassandra.load-policy.dc-aware.allow-remote-dc-for-local\", \"true\")\n                 .put(\"cassandra.load-policy.use-token-aware\", \"true\")\n                 .put(\"cassandra.load-policy.token-aware.shuffle-replicas\", \"true\")\n-                .put(\"cassandra.load-policy.use-white-list\", \"true\")\n-                .put(\"cassandra.load-policy.white-list.addresses\", \"host1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjgzMTgw", "url": "https://github.com/trinodb/trino/pull/4317#pullrequestreview-444283180", "createdAt": "2020-07-07T22:06:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNjowOFrOGuRSUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNjowOFrOGuRSUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MDg5OA==", "bodyText": "We need a setter here\n@Config(\"cassandra.load-policy.allowed-addresses\")\npublic CassandraClientConfig setAllowedAddresses(String allowedAddresses)\n{\n    this.allowedAddresses = SPLITTER.splitToList(allowedAddresses);\n    return this;\n}", "url": "https://github.com/trinodb/trino/pull/4317#discussion_r451170898", "createdAt": "2020-07-07T22:06:08Z", "author": {"login": "electrum"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientConfig.java", "diffHunk": "@@ -341,28 +340,9 @@ public CassandraClientConfig setTokenAwareShuffleReplicas(boolean tokenAwareShuf\n         return this;\n     }\n \n-    public boolean isUseWhiteList()\n+    public List<String> getAllowedAddresses()\n     {\n-        return this.useWhiteList;\n-    }\n-\n-    @Config(\"cassandra.load-policy.use-white-list\")\n-    public CassandraClientConfig setUseWhiteList(boolean useWhiteList)\n-    {\n-        this.useWhiteList = useWhiteList;\n-        return this;\n-    }\n-\n-    public List<String> getWhiteListAddresses()\n-    {\n-        return whiteListAddresses;\n-    }\n-\n-    @Config(\"cassandra.load-policy.white-list.addresses\")\n-    public CassandraClientConfig setWhiteListAddresses(String commaSeparatedList)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f71437143f1af8d78be80f20fbefcd712e5c767", "author": {"user": {"login": "bentito", "name": "Brett Tofel"}}, "url": "https://github.com/trinodb/trino/commit/7f71437143f1af8d78be80f20fbefcd712e5c767", "committedDate": "2020-07-09T16:17:48Z", "message": "Assorted language changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "7f71437143f1af8d78be80f20fbefcd712e5c767", "author": {"user": {"login": "bentito", "name": "Brett Tofel"}}, "url": "https://github.com/trinodb/trino/commit/7f71437143f1af8d78be80f20fbefcd712e5c767", "committedDate": "2020-07-09T16:17:48Z", "message": "Assorted language changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4931, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}