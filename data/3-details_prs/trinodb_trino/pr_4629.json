{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4ODM5NTIy", "number": 4629, "title": "Add support for version function", "bodyText": "Fixes #4627", "createdAt": "2020-07-30T03:12:12Z", "url": "https://github.com/trinodb/trino/pull/4629", "merged": true, "mergeCommit": {"oid": "663f8a57ab511d45ebb71136c5cbc0868cfeb65f"}, "closed": true, "closedAt": "2021-01-05T08:16:31Z", "author": {"login": "ebyhr"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc53NzKgFqTQ1ODA0OTU5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtGDZVAFqTU2MTU3MjU4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MDQ5NTk3", "url": "https://github.com/trinodb/trino/pull/4629#pullrequestreview-458049597", "createdAt": "2020-07-30T03:39:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozOTozN1rOG5R6bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozOTozN1rOG5R6bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTUwMg==", "bodyText": "We should pick a fixed return type for this function. Otherwise, the type will change from version to version (especially, for non-release builds, which tend to have longer version numbers). Let's go with VARCHAR, since we can't predict what the maximum length of the version string will be in advance.", "url": "https://github.com/trinodb/trino/pull/4629#discussion_r462715502", "createdAt": "2020-07-30T03:39:37Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/VersionFunction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.prestosql.annotation.UsedByGeneratedCode;\n+import io.prestosql.metadata.BoundVariables;\n+import io.prestosql.metadata.FunctionMetadata;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.Signature;\n+import io.prestosql.metadata.SqlScalarFunction;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static io.prestosql.metadata.FunctionKind.SCALAR;\n+import static io.prestosql.spi.type.VarcharType.createVarcharType;\n+import static io.prestosql.util.Reflection.methodHandle;\n+\n+public final class VersionFunction\n+        extends SqlScalarFunction\n+{\n+    private static final MethodHandle METHOD_HANDLE = methodHandle(VersionFunction.class, \"getVersion\", String.class);\n+    private final String nodeVersion;\n+\n+    public VersionFunction(String nodeVersion)\n+    {\n+        super(new FunctionMetadata(\n+                new Signature(\n+                        \"version\",\n+                        ImmutableList.of(),\n+                        ImmutableList.of(),\n+                        createVarcharType(nodeVersion.length()).getTypeSignature(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MDY0ODQz", "url": "https://github.com/trinodb/trino/pull/4629#pullrequestreview-458064843", "createdAt": "2020-07-30T04:35:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDozNTozN1rOG5Sv3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDozNzowOVrOG5SxVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyOTE4MA==", "bodyText": "Let\u2019s call the this the server version, as \u201cnode\u201d implies it is the version of a specific node (and which node in the cluster would it be?)", "url": "https://github.com/trinodb/trino/pull/4629#discussion_r462729180", "createdAt": "2020-07-30T04:35:37Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/system.rst", "diffHunk": "@@ -0,0 +1,9 @@\n+==================\n+System Information\n+==================\n+\n+Functions providing information about the system environment.\n+\n+.. function:: version() -> varchar\n+\n+    Returns the node version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyOTU1OA==", "bodyText": "node -> server", "url": "https://github.com/trinodb/trino/pull/4629#discussion_r462729558", "createdAt": "2020-07-30T04:37:09Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/VersionFunction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.prestosql.annotation.UsedByGeneratedCode;\n+import io.prestosql.metadata.BoundVariables;\n+import io.prestosql.metadata.FunctionMetadata;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.Signature;\n+import io.prestosql.metadata.SqlScalarFunction;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static io.prestosql.metadata.FunctionKind.SCALAR;\n+import static io.prestosql.spi.type.VarcharType.createVarcharType;\n+import static io.prestosql.util.Reflection.methodHandle;\n+\n+public final class VersionFunction\n+        extends SqlScalarFunction\n+{\n+    private static final MethodHandle METHOD_HANDLE = methodHandle(VersionFunction.class, \"getVersion\", String.class);\n+    private final String nodeVersion;\n+\n+    public VersionFunction(String nodeVersion)\n+    {\n+        super(new FunctionMetadata(\n+                new Signature(\n+                        \"version\",\n+                        ImmutableList.of(),\n+                        ImmutableList.of(),\n+                        createVarcharType(nodeVersion.length()).getTypeSignature(),\n+                        ImmutableList.of(),\n+                        false),\n+                false,\n+                ImmutableList.of(),\n+                true,\n+                true,\n+                \"Return node version\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "fd8f385378aaba214d9537d2d2cafd83bdfc968d", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/fd8f385378aaba214d9537d2d2cafd83bdfc968d", "committedDate": "2020-07-30T09:39:14Z", "message": "Add support for version function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd8f385378aaba214d9537d2d2cafd83bdfc968d", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/fd8f385378aaba214d9537d2d2cafd83bdfc968d", "committedDate": "2020-07-30T09:39:14Z", "message": "Add support for version function"}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTY1MDE4", "url": "https://github.com/trinodb/trino/pull/4629#pullrequestreview-561165018", "createdAt": "2021-01-04T16:30:15Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjozMDoxNlrOIN4S1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjozMDoxNlrOIN4S1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyNDcyNg==", "bodyText": "This seems to be the only test and so we do not really know whether the function works or always returns \"\".\nDo we need a product test for this function?", "url": "https://github.com/trinodb/trino/pull/4629#discussion_r551424726", "createdAt": "2021-01-04T16:30:16Z", "author": {"login": "findepi"}, "path": "core/trino-main/src/test/java/io/trino/operator/scalar/TestVersionFunction.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.operator.scalar;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.trino.spi.type.VarcharType.VARCHAR;\n+\n+public class TestVersionFunction\n+        extends AbstractTestFunctions\n+{\n+    @Test\n+    public void testVersion()\n+    {\n+        assertFunction(\"version()\", VARCHAR, \"<unknown>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d37cd9ec4b43e693cff0ce6d96f6fdd73922b13f", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/d37cd9ec4b43e693cff0ce6d96f6fdd73922b13f", "committedDate": "2021-01-05T06:22:25Z", "message": "Add support for version function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "d37cd9ec4b43e693cff0ce6d96f6fdd73922b13f", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/d37cd9ec4b43e693cff0ce6d96f6fdd73922b13f", "committedDate": "2021-01-05T06:22:25Z", "message": "Add support for version function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNTcyNTg2", "url": "https://github.com/trinodb/trino/pull/4629#pullrequestreview-561572586", "createdAt": "2021-01-05T07:46:58Z", "commit": {"oid": "d37cd9ec4b43e693cff0ce6d96f6fdd73922b13f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4539, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}