{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MTUwNzgy", "number": 3305, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNDo0MlrODt2QHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo1Nzo0M1rODuT0-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAxMzcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNDo0MlrOF_gclA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNDo0MlrOF_gclA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNjIxMg==", "bodyText": "`filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains);", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402136212", "createdAt": "2020-04-02T08:24:42Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = node.getOutputSymbols().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAxNzA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNTozMFrOF_gegg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNTozMFrOF_gegg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNjcwNg==", "bodyText": "toImmutableMap", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402136706", "createdAt": "2020-04-02T08:25:30Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = node.getOutputSymbols().stream()\n+                .filter(referencedOutputs::contains)\n+                .collect(toImmutableList());\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)\n+                .collect(toImmutableList());\n+\n+        TableHandle handle = node.getTable();\n+        Optional<ProjectionApplicationResult<TableHandle>> result = metadata.applyProjection(\n+                session,\n+                handle,\n+                projections,\n+                newOutputs.stream()\n+                        .collect(Collectors.toMap(Symbol::getName, node.getAssignments()::get)));\n+\n+        Map<Symbol, ColumnHandle> newAssignments;\n+        // Attempt to push down the constrained list of columns into the connector.\n+        // Bail out if the connector does anything other than limit the list of columns (e.g., if it synthesizes arbitrary expressions)\n+        if (result.isPresent() && result.get().getProjections().stream().allMatch(Variable.class::isInstance)) {\n+            handle = result.get().getHandle();\n+\n+            Map<String, ColumnHandle> assignments = result.get().getAssignments().stream()\n+                    .collect(Collectors.toMap(ProjectionApplicationResult.Assignment::getVariable, ProjectionApplicationResult.Assignment::getColumn));\n+\n+            ImmutableMap.Builder<Symbol, ColumnHandle> builder = ImmutableMap.builder();\n+            for (int i = 0; i < newOutputs.size(); i++) {\n+                Variable variable = (Variable) result.get().getProjections().get(i);\n+                builder.put(newOutputs.get(i), assignments.get(variable.getName()));\n+            }\n+\n+            newAssignments = builder.build();\n+        }\n+        else {\n+            newAssignments = newOutputs.stream()\n+                    .collect(Collectors.toMap(Function.identity(), node.getAssignments()::get));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAxNzUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNTozOFrOF_geyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNTozOFrOF_geyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNjc3Ng==", "bodyText": "toImmutableMap", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402136776", "createdAt": "2020-04-02T08:25:38Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = node.getOutputSymbols().stream()\n+                .filter(referencedOutputs::contains)\n+                .collect(toImmutableList());\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)\n+                .collect(toImmutableList());\n+\n+        TableHandle handle = node.getTable();\n+        Optional<ProjectionApplicationResult<TableHandle>> result = metadata.applyProjection(\n+                session,\n+                handle,\n+                projections,\n+                newOutputs.stream()\n+                        .collect(Collectors.toMap(Symbol::getName, node.getAssignments()::get)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAzMjM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyOTo0OFrOF_goHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTozMzoxOVrOGAleZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzOTE2NQ==", "bodyText": "I think we should fail in case when connector returns something that engine does not support. Otherwise applyProjection is ineffective.\nIs it an actual case? Is there such connector that does something more than limit of columns?", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402139165", "createdAt": "2020-04-02T08:29:48Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = node.getOutputSymbols().stream()\n+                .filter(referencedOutputs::contains)\n+                .collect(toImmutableList());\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)\n+                .collect(toImmutableList());\n+\n+        TableHandle handle = node.getTable();\n+        Optional<ProjectionApplicationResult<TableHandle>> result = metadata.applyProjection(\n+                session,\n+                handle,\n+                projections,\n+                newOutputs.stream()\n+                        .collect(Collectors.toMap(Symbol::getName, node.getAssignments()::get)));\n+\n+        Map<Symbol, ColumnHandle> newAssignments;\n+        // Attempt to push down the constrained list of columns into the connector.\n+        // Bail out if the connector does anything other than limit the list of columns (e.g., if it synthesizes arbitrary expressions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0ODE3OA==", "bodyText": "No, it's perfectly legal for a connector to produce projections other than simple column references. For instance, it might decide that a column is constant and return a constant expression in its place.\n\nOtherwise applyProjection is ineffective.\n\nSee my comment here #3305 (comment)", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402448178", "createdAt": "2020-04-02T16:30:30Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = node.getOutputSymbols().stream()\n+                .filter(referencedOutputs::contains)\n+                .collect(toImmutableList());\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)\n+                .collect(toImmutableList());\n+\n+        TableHandle handle = node.getTable();\n+        Optional<ProjectionApplicationResult<TableHandle>> result = metadata.applyProjection(\n+                session,\n+                handle,\n+                projections,\n+                newOutputs.stream()\n+                        .collect(Collectors.toMap(Symbol::getName, node.getAssignments()::get)));\n+\n+        Map<Symbol, ColumnHandle> newAssignments;\n+        // Attempt to push down the constrained list of columns into the connector.\n+        // Bail out if the connector does anything other than limit the list of columns (e.g., if it synthesizes arbitrary expressions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzOTE2NQ=="}, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzI2Mg==", "bodyText": "it's perfectly legal for a connector to produce projections other than simple column references\n\nI get that.\nHowever, we trying here to pushdown limiting identity projection here (no fancy expressions here). Connector returned new table handle and some expressions. In case when we notice that there are some expressions we do not support, we should fail and not to try to return table scan node that has old handle and new assignments (that do not match table handle stored in table scan node) like it is right now.  Is it safe to just ignore what connector returned?", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402913262", "createdAt": "2020-04-03T10:34:02Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = node.getOutputSymbols().stream()\n+                .filter(referencedOutputs::contains)\n+                .collect(toImmutableList());\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)\n+                .collect(toImmutableList());\n+\n+        TableHandle handle = node.getTable();\n+        Optional<ProjectionApplicationResult<TableHandle>> result = metadata.applyProjection(\n+                session,\n+                handle,\n+                projections,\n+                newOutputs.stream()\n+                        .collect(Collectors.toMap(Symbol::getName, node.getAssignments()::get)));\n+\n+        Map<Symbol, ColumnHandle> newAssignments;\n+        // Attempt to push down the constrained list of columns into the connector.\n+        // Bail out if the connector does anything other than limit the list of columns (e.g., if it synthesizes arbitrary expressions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzOTE2NQ=="}, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3Nzk0Nw==", "bodyText": "We could ask connector to project all ROW's fields.\nAnd connector says \"hey, i will give you the ROW itself\", and please do projections on the engine side.\nI don't know why connector would choose that, but that's supposed to be legal, but cannot be accepted with current code.\n@martint i think this if deserves a TODO note, along maybe with \"merge PruneTableScanColumns with PushProjectionIntoTableScan rules\".", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r403077947", "createdAt": "2020-04-03T15:15:27Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = node.getOutputSymbols().stream()\n+                .filter(referencedOutputs::contains)\n+                .collect(toImmutableList());\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)\n+                .collect(toImmutableList());\n+\n+        TableHandle handle = node.getTable();\n+        Optional<ProjectionApplicationResult<TableHandle>> result = metadata.applyProjection(\n+                session,\n+                handle,\n+                projections,\n+                newOutputs.stream()\n+                        .collect(Collectors.toMap(Symbol::getName, node.getAssignments()::get)));\n+\n+        Map<Symbol, ColumnHandle> newAssignments;\n+        // Attempt to push down the constrained list of columns into the connector.\n+        // Bail out if the connector does anything other than limit the list of columns (e.g., if it synthesizes arbitrary expressions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzOTE2NQ=="}, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NzE3Mw==", "bodyText": "I don't know why connector would choose that, but that's supposed to be legal, but cannot be accepted with current code.\n\nIndeed. That's beyond the scope of this change and is handled by PushProjectionIntoTableScan (given the expectation that when pruning columns with rules there's always a projection above the tablescan). As I said above, this rule should probably be replaced by PushProjectionIntoTableScan, but I didn't want to go down that path just yet as it's a more involved process of tracking down all the places where it needs to be replaced, ensuring there are no other unwanted side-effects, etc.\nI'll add a TODO, though. That seems fair.", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r403267173", "createdAt": "2020-04-03T19:33:19Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = node.getOutputSymbols().stream()\n+                .filter(referencedOutputs::contains)\n+                .collect(toImmutableList());\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)\n+                .collect(toImmutableList());\n+\n+        TableHandle handle = node.getTable();\n+        Optional<ProjectionApplicationResult<TableHandle>> result = metadata.applyProjection(\n+                session,\n+                handle,\n+                projections,\n+                newOutputs.stream()\n+                        .collect(Collectors.toMap(Symbol::getName, node.getAssignments()::get)));\n+\n+        Map<Symbol, ColumnHandle> newAssignments;\n+        // Attempt to push down the constrained list of columns into the connector.\n+        // Bail out if the connector does anything other than limit the list of columns (e.g., if it synthesizes arbitrary expressions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzOTE2NQ=="}, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAzMzEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyOTo1OVrOF_gomQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyOTo1OVrOF_gomQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzOTI4OQ==", "bodyText": "toImmutableMap", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402139289", "createdAt": "2020-04-02T08:29:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = node.getOutputSymbols().stream()\n+                .filter(referencedOutputs::contains)\n+                .collect(toImmutableList());\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)\n+                .collect(toImmutableList());\n+\n+        TableHandle handle = node.getTable();\n+        Optional<ProjectionApplicationResult<TableHandle>> result = metadata.applyProjection(\n+                session,\n+                handle,\n+                projections,\n+                newOutputs.stream()\n+                        .collect(Collectors.toMap(Symbol::getName, node.getAssignments()::get)));\n+\n+        Map<Symbol, ColumnHandle> newAssignments;\n+        // Attempt to push down the constrained list of columns into the connector.\n+        // Bail out if the connector does anything other than limit the list of columns (e.g., if it synthesizes arbitrary expressions)\n+        if (result.isPresent() && result.get().getProjections().stream().allMatch(Variable.class::isInstance)) {\n+            handle = result.get().getHandle();\n+\n+            Map<String, ColumnHandle> assignments = result.get().getAssignments().stream()\n+                    .collect(Collectors.toMap(ProjectionApplicationResult.Assignment::getVariable, ProjectionApplicationResult.Assignment::getColumn));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAzNTkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODozMDo0N1rOF_gqZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyNjoxM1rOF_zTvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzOTc1MQ==", "bodyText": "what's the relation between this rule and PushProjectionIntoTableScan?", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402139751", "createdAt": "2020-04-02T08:30:47Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NTI0Nw==", "bodyText": "That's a good question. PushProjectionIntoTableScan is more general, as it can push down arbitrary sub-expressions from the projection. We'll probably want to remove this one, but I didn't want to conflate issues in this PR.", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402445247", "createdAt": "2020-04-02T16:26:13Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,109 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n-import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzOTc1MQ=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAzODM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PruneUnreferencedOutputs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODozMTozMFrOF_gr5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjozMjo1NlrOF_zlNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0MDEzMg==", "bodyText": "private", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402140132", "createdAt": "2020-04-02T08:31:30Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PruneUnreferencedOutputs.java", "diffHunk": "@@ -118,12 +130,27 @@ public PlanNode optimize(PlanNode plan, Session session, TypeProvider types, Sym\n         requireNonNull(symbolAllocator, \"symbolAllocator is null\");\n         requireNonNull(idAllocator, \"idAllocator is null\");\n \n-        return SimplePlanRewriter.rewriteWith(new Rewriter(), plan, ImmutableSet.of());\n+        return SimplePlanRewriter.rewriteWith(new Rewriter(metadata, types, typeAnalyzer, symbolAllocator, session), plan, ImmutableSet.of());\n     }\n \n     private static class Rewriter\n             extends SimplePlanRewriter<Set<Symbol>>\n     {\n+        private final Metadata metadata;\n+        private final TypeProvider types;\n+        private final TypeAnalyzer typeAnalyzer;\n+        private final SymbolAllocator symbolAllocator;\n+        private final Session session;\n+\n+        public Rewriter(Metadata metadata, TypeProvider types, TypeAnalyzer typeAnalyzer, SymbolAllocator symbolAllocator, Session session)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0OTcxOQ==", "bodyText": "From the point of view of the class, the constructor is public. The class itself is private.", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402449719", "createdAt": "2020-04-02T16:32:56Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PruneUnreferencedOutputs.java", "diffHunk": "@@ -118,12 +130,27 @@ public PlanNode optimize(PlanNode plan, Session session, TypeProvider types, Sym\n         requireNonNull(symbolAllocator, \"symbolAllocator is null\");\n         requireNonNull(idAllocator, \"idAllocator is null\");\n \n-        return SimplePlanRewriter.rewriteWith(new Rewriter(), plan, ImmutableSet.of());\n+        return SimplePlanRewriter.rewriteWith(new Rewriter(metadata, types, typeAnalyzer, symbolAllocator, session), plan, ImmutableSet.of());\n     }\n \n     private static class Rewriter\n             extends SimplePlanRewriter<Set<Symbol>>\n     {\n+        private final Metadata metadata;\n+        private final TypeProvider types;\n+        private final TypeAnalyzer typeAnalyzer;\n+        private final SymbolAllocator symbolAllocator;\n+        private final Session session;\n+\n+        public Rewriter(Metadata metadata, TypeProvider types, TypeAnalyzer typeAnalyzer, SymbolAllocator symbolAllocator, Session session)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0MDEzMg=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODU3MzQ0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo1MjowMVrOGAMEPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo1MjowMVrOGAMEPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MDg3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .map(Symbol::toSymbolReference)\n          \n          \n            \n                            .map(expression -> ConnectorExpressionTranslator.translate(\n          \n          \n            \n                                    session,\n          \n          \n            \n                                    expression,\n          \n          \n            \n                                    typeAnalyzer,\n          \n          \n            \n                                    types))\n          \n          \n            \n                            .map(Optional::get)\n          \n          \n            \n                            .map(symbol -> new Variable(symbol.getName(), types.get(symbol)))\n          \n      \n    \n    \n  \n\nnot only simple, this has added benefit that i dont have to wonder whether Optional can be empty ie whether ::get is safe", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402850876", "createdAt": "2020-04-03T08:52:01Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,108 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = filteredCopy(node.getOutputSymbols(), referencedOutputs::contains);\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg1OTQ1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo1Nzo0M1rOGAOtLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo1Nzo0M1rOGAOtLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NDEyNw==", "bodyText": "#3324 prevents NPE here.", "url": "https://github.com/trinodb/trino/pull/3305#discussion_r402894127", "createdAt": "2020-04-03T09:57:43Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneTableScanColumns.java", "diffHunk": "@@ -13,34 +13,108 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;\n \n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ProjectionApplicationResult;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.sql.planner.ConnectorExpressionTranslator;\n import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n import io.prestosql.sql.planner.plan.PlanNode;\n import io.prestosql.sql.planner.plan.TableScanNode;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n \n-import static com.google.common.collect.Maps.filterKeys;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n import static io.prestosql.util.MoreLists.filteredCopy;\n+import static java.util.Objects.requireNonNull;\n \n public class PruneTableScanColumns\n         extends ProjectOffPushDownRule<TableScanNode>\n {\n-    public PruneTableScanColumns()\n+    private final Metadata metadata;\n+    private final TypeAnalyzer typeAnalyzer;\n+\n+    public PruneTableScanColumns(Metadata metadata, TypeAnalyzer typeAnalyzer)\n     {\n         super(tableScan());\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.typeAnalyzer = requireNonNull(typeAnalyzer, \"typeAnalyzer is null\");\n     }\n \n     @Override\n-    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode tableScanNode, Set<Symbol> referencedOutputs)\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, TableScanNode node, Set<Symbol> referencedOutputs)\n     {\n-        return Optional.of(\n-                new TableScanNode(\n-                        tableScanNode.getId(),\n-                        tableScanNode.getTable(),\n-                        filteredCopy(tableScanNode.getOutputSymbols(), referencedOutputs::contains),\n-                        filterKeys(tableScanNode.getAssignments(), referencedOutputs::contains),\n-                        tableScanNode.getEnforcedConstraint()));\n+        Session session = context.getSession();\n+        TypeProvider types = context.getSymbolAllocator().getTypes();\n+\n+        return pruneColumns(metadata, typeAnalyzer, types, session, node, referencedOutputs);\n+    }\n+\n+    public static Optional<PlanNode> pruneColumns(Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, Session session, TableScanNode node, Set<Symbol> referencedOutputs)\n+    {\n+        List<Symbol> newOutputs = filteredCopy(node.getOutputSymbols(), referencedOutputs::contains);\n+\n+        if (newOutputs.size() == node.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        List<ConnectorExpression> projections = newOutputs.stream()\n+                .map(Symbol::toSymbolReference)\n+                .map(expression -> ConnectorExpressionTranslator.translate(\n+                        session,\n+                        expression,\n+                        typeAnalyzer,\n+                        types))\n+                .map(Optional::get)\n+                .collect(toImmutableList());\n+\n+        TableHandle handle = node.getTable();\n+        Optional<ProjectionApplicationResult<TableHandle>> result = metadata.applyProjection(\n+                session,\n+                handle,\n+                projections,\n+                newOutputs.stream()\n+                        .collect(toImmutableMap(Symbol::getName, node.getAssignments()::get)));\n+\n+        Map<Symbol, ColumnHandle> newAssignments;\n+        // Attempt to push down the constrained list of columns into the connector.\n+        // Bail out if the connector does anything other than limit the list of columns (e.g., if it synthesizes arbitrary expressions)\n+        if (result.isPresent() && result.get().getProjections().stream().allMatch(Variable.class::isInstance)) {\n+            handle = result.get().getHandle();\n+\n+            Map<String, ColumnHandle> assignments = result.get().getAssignments().stream()\n+                    .collect(toImmutableMap(ProjectionApplicationResult.Assignment::getVariable, ProjectionApplicationResult.Assignment::getColumn));\n+\n+            ImmutableMap.Builder<Symbol, ColumnHandle> builder = ImmutableMap.builder();\n+            for (int i = 0; i < newOutputs.size(); i++) {\n+                Variable variable = (Variable) result.get().getProjections().get(i);\n+                builder.put(newOutputs.get(i), assignments.get(variable.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 281, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}