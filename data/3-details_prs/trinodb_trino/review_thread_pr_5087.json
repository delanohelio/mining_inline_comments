{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMTgxMjY0", "number": 5087, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyOTozMVrOEg1pfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNToyNDoxNlrOEhFbBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODY4ODYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyOTozMVrOHN1xgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDozMjowNlrOHOW38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NDU2Mg==", "bodyText": "I realize \"lambda_\" + argumentPosition is enough from generated code perspective.\nI retained argument name in case there is any need to debug the generated code.", "url": "https://github.com/trinodb/trino/pull/5087#discussion_r484274562", "createdAt": "2020-09-07T08:29:31Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "diffHunk": "@@ -142,6 +142,14 @@ public static CompiledLambda preGenerateLambdaExpression(\n                 lambdaExpression);\n     }\n \n+    /**\n+     * Parameter name for the generated method.\n+     */\n+    private static String parameterName(int argumentPosition, String lambdaArgumentName)\n+    {\n+        return \"lambda_\" + argumentPosition + \"_\" + lambdaArgumentName.replaceAll(\"[^a-zA-Z_]\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc2NzYzMw==", "bodyText": "@Praveen2112 was there a similar escaping somewhere already? I think you did one, but I can't remember where was it.", "url": "https://github.com/trinodb/trino/pull/5087#discussion_r484767633", "createdAt": "2020-09-08T09:08:01Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "diffHunk": "@@ -142,6 +142,14 @@ public static CompiledLambda preGenerateLambdaExpression(\n                 lambdaExpression);\n     }\n \n+    /**\n+     * Parameter name for the generated method.\n+     */\n+    private static String parameterName(int argumentPosition, String lambdaArgumentName)\n+    {\n+        return \"lambda_\" + argumentPosition + \"_\" + lambdaArgumentName.replaceAll(\"[^a-zA-Z_]\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NDU2Mg=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc3OTM2OA==", "bodyText": "Yes !! It was in scalar function .. #2081", "url": "https://github.com/trinodb/trino/pull/5087#discussion_r484779368", "createdAt": "2020-09-08T09:27:17Z", "author": {"login": "Praveen2112"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "diffHunk": "@@ -142,6 +142,14 @@ public static CompiledLambda preGenerateLambdaExpression(\n                 lambdaExpression);\n     }\n \n+    /**\n+     * Parameter name for the generated method.\n+     */\n+    private static String parameterName(int argumentPosition, String lambdaArgumentName)\n+    {\n+        return \"lambda_\" + argumentPosition + \"_\" + lambdaArgumentName.replaceAll(\"[^a-zA-Z_]\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NDU2Mg=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxNjg4MA==", "bodyText": "Thanks, updated", "url": "https://github.com/trinodb/trino/pull/5087#discussion_r484816880", "createdAt": "2020-09-08T10:32:06Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "diffHunk": "@@ -142,6 +142,14 @@ public static CompiledLambda preGenerateLambdaExpression(\n                 lambdaExpression);\n     }\n \n+    /**\n+     * Parameter name for the generated method.\n+     */\n+    private static String parameterName(int argumentPosition, String lambdaArgumentName)\n+    {\n+        return \"lambda_\" + argumentPosition + \"_\" + lambdaArgumentName.replaceAll(\"[^a-zA-Z_]\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NDU2Mg=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTI3MzAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNToyNDoxNlrOHONGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzozMDoxMVrOHO6Sow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1Njc0MQ==", "bodyText": "The current approach in the PR makes sense, considering that the construction of the class definition shouldn't make any assumptions about the symbols, and do this sanitization before creating parameter names.\nAnother place to do this sanitization could be SymbolAllocator#newSymbol. As a side-effect, it  may improve plan readability (a minor benefit though). For example, if we truncate the string while \"sanitizing\" the symbols for the issue mentioned in #5088, the explain plan would display the truncated symbol. Thoughts?", "url": "https://github.com/trinodb/trino/pull/5087#discussion_r484656741", "createdAt": "2020-09-08T05:24:16Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "diffHunk": "@@ -142,6 +142,14 @@ public static CompiledLambda preGenerateLambdaExpression(\n                 lambdaExpression);\n     }\n \n+    /**\n+     * Parameter name for the generated method.\n+     */\n+    private static String parameterName(int argumentPosition, String lambdaArgumentName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5NzE1NQ==", "bodyText": "Another place to do this sanitization could be SymbolAllocator#newSymbol.\n\nI thought about that. IMO the change here does not preclude change in SymbolAllocator.\nAnd the change in SymbolAllocator does not make the change here obsolete:\ncompiler code should make as few assumptions about planner as possible.\nIt would feel wrong if planner had to consider Java class format constraints.\nFor  #5088, as you pointed out, there are other benefits from keeping symbols short.\nPlan readability, but also guard against any potential perf penalties\n(at least in theory, a potential DOS attack vector).", "url": "https://github.com/trinodb/trino/pull/5087#discussion_r485397155", "createdAt": "2020-09-09T07:30:11Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "diffHunk": "@@ -142,6 +142,14 @@ public static CompiledLambda preGenerateLambdaExpression(\n                 lambdaExpression);\n     }\n \n+    /**\n+     * Parameter name for the generated method.\n+     */\n+    private static String parameterName(int argumentPosition, String lambdaArgumentName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1Njc0MQ=="}, "originalCommit": null, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3158, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}