{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDMxNTA3", "number": 2679, "title": "Rubix integration", "bodyText": "RubixConfigurationInitializer is like other ConfigurationInitializers, it sets Rubix configs into Configuration object\n\nRubixInitializer initializes RubixConfigurationInitializer. It waits for the node to join the cluster and update RubixConfigurationInitializer with info like master address that will be\nneeded to be placed into Configuration objects by RubixConfigurationInitializer.\n\nFlow of events:\nPresto server is started\n\tRubixInitializer waits on the node to join cluster\n\tOn joining:\n\t\tIt initializes RubixConfigurationInitializer\n\t\tIt also creates the two servers needed by Rubix: BookkeeperServer and LocalDataTransferServer\n\t\tFinally, the BookKeeper object is registered with CachingFileSystem to be used for direct communication with BookkeeperServer instead of thrift \n\t\tIt informs RubixConfigurationInitializer of initialization complete so that RubixConfigurationInitializer can enable Rubix in Configuration objects from now on", "createdAt": "2020-01-30T11:50:43Z", "url": "https://github.com/trinodb/trino/pull/2679", "merged": true, "mergeCommit": {"oid": "540e14c7f1a82dffcb8b36432a646da1649e8596"}, "closed": true, "closedAt": "2020-03-18T18:29:28Z", "author": {"login": "shubhamtagra"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_pgbQgFqTM1MTMxOTUyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO7oKEgFqTM3NzEzMDkzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzE5NTI1", "url": "https://github.com/trinodb/trino/pull/2679#pullrequestreview-351319525", "createdAt": "2020-01-31T06:53:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjo1Mzo0MVrOFkCutw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNjo1Mzo0MVrOFkCutw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzNzc4Mw==", "bodyText": "should this and configs below be configurable", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373337783", "createdAt": "2020-01-31T06:53:41Z", "author": {"login": "ankitdixit"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.qubole.rubix.presto.CachingPrestoGoogleHadoopFileSystem;\n+import com.qubole.rubix.presto.CachingPrestoNativeAzureFileSystem;\n+import com.qubole.rubix.presto.CachingPrestoS3FileSystem;\n+import com.qubole.rubix.presto.PrestoClusterManager;\n+import com.qubole.rubix.spi.CacheConfig;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.HostAddress;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.qubole.rubix.spi.ClusterType.PRESTO_CLUSTER_MANAGER;\n+\n+public class RubixConfigurationInitializer\n+        implements ConfigurationInitializer\n+{\n+    private static final String RUBIX_S3_FS_CLASS_NAME = CachingPrestoS3FileSystem.class.getName();\n+    private static final String RUBIX_AZURE_FS_CLASS_NAME = CachingPrestoNativeAzureFileSystem.class.getName();\n+    private static final String RUBIX_GS_FS_CLASS_NAME = CachingPrestoGoogleHadoopFileSystem.class.getName();\n+\n+    private final boolean parallelWarmupEnabled;\n+    private final String cacheLocation;\n+\n+    // Configs below are dependent on node joining the cluster\n+    private boolean cacheNotReady = true;\n+    private boolean isMaster;\n+    private HostAddress masterAddress;\n+    private String nodeAddress;\n+\n+    @Inject\n+    public RubixConfigurationInitializer(RubixConfig config)\n+    {\n+        this.parallelWarmupEnabled = config.isParallelWarmupEnabled();\n+        this.cacheLocation = config.getCacheLocation();\n+    }\n+\n+    @Override\n+    public void initializeConfiguration(Configuration config)\n+    {\n+        if (cacheNotReady) {\n+            CacheConfig.setCacheDataEnabled(config, false);\n+            return;\n+        }\n+\n+        updateConfiguration(config);\n+    }\n+\n+    public Configuration updateConfiguration(Configuration config)\n+    {\n+        checkState(masterAddress != null, \"masterAddress is not set\");\n+        CacheConfig.setCacheDataEnabled(config, true);\n+        CacheConfig.setOnMaster(config, isMaster);\n+        CacheConfig.setCoordinatorHostName(config, masterAddress.getHostText());\n+        PrestoClusterManager.setPrestoServerPort(config, masterAddress.getPort());\n+        CacheConfig.setCurrentNodeHostName(config, nodeAddress);\n+\n+        CacheConfig.setIsParallelWarmupEnabled(config, parallelWarmupEnabled);\n+        CacheConfig.setCacheDataDirPrefix(config, cacheLocation);\n+\n+        CacheConfig.setEmbeddedMode(config, true);\n+        CacheConfig.setRubixClusterType(config, PRESTO_CLUSTER_MANAGER.ordinal());\n+        CacheConfig.enableHeartbeat(config, false);\n+        CacheConfig.setClusterNodeRefreshTime(config, 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzIyMTMy", "url": "https://github.com/trinodb/trino/pull/2679#pullrequestreview-351322132", "createdAt": "2020-01-31T07:03:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzowMzowMlrOFkC3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzowMzowMlrOFkC3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzOTk1MQ==", "bodyText": "It will be good to have parallelWarmupEnabled enabled by default", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373339951", "createdAt": "2020-01-31T07:03:02Z", "author": {"login": "raunaqmorarka"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    boolean rubixEnabled;\n+    boolean parallelWarmupEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDMzODE4", "url": "https://github.com/trinodb/trino/pull/2679#pullrequestreview-351433818", "createdAt": "2020-01-31T11:04:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTowNDoxNVrOFkIImA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTowNTowMFrOFkIJ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjMyOA==", "bodyText": "This should be hive.cache.enabled. The fact that it uses Rubix under the covers is an implementation detail that doesn't need to be exposed to users and admins (similar, for example, to how we expose \"http server\" properties and not \"jetty server\" properties).", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373426328", "createdAt": "2020-01-31T11:04:15Z", "author": {"login": "martint"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    boolean rubixEnabled;\n+    boolean parallelWarmupEnabled;\n+    String cacheLocation = \"/tmp\";\n+\n+    public boolean isRubixEnabled()\n+    {\n+        return rubixEnabled;\n+    }\n+\n+    public boolean isParallelWarmupEnabled()\n+    {\n+        return parallelWarmupEnabled;\n+    }\n+\n+    @Config(\"hive.rubix-enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjU3NA==", "bodyText": "This should be named hive.cache.parallel-warmup-enabled", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373426574", "createdAt": "2020-01-31T11:04:48Z", "author": {"login": "martint"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    boolean rubixEnabled;\n+    boolean parallelWarmupEnabled;\n+    String cacheLocation = \"/tmp\";\n+\n+    public boolean isRubixEnabled()\n+    {\n+        return rubixEnabled;\n+    }\n+\n+    public boolean isParallelWarmupEnabled()\n+    {\n+        return parallelWarmupEnabled;\n+    }\n+\n+    @Config(\"hive.rubix-enabled\")\n+    public RubixConfig setRubixEnabled(boolean value)\n+    {\n+        this.rubixEnabled = value;\n+        return this;\n+    }\n+\n+    @Config(\"hive.rubix.cache.parallel.warmup\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjY1OQ==", "bodyText": "Rename to hive.cache.location", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373426659", "createdAt": "2020-01-31T11:05:00Z", "author": {"login": "martint"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    boolean rubixEnabled;\n+    boolean parallelWarmupEnabled;\n+    String cacheLocation = \"/tmp\";\n+\n+    public boolean isRubixEnabled()\n+    {\n+        return rubixEnabled;\n+    }\n+\n+    public boolean isParallelWarmupEnabled()\n+    {\n+        return parallelWarmupEnabled;\n+    }\n+\n+    @Config(\"hive.rubix-enabled\")\n+    public RubixConfig setRubixEnabled(boolean value)\n+    {\n+        this.rubixEnabled = value;\n+        return this;\n+    }\n+\n+    @Config(\"hive.rubix.cache.parallel.warmup\")\n+    public RubixConfig setParallelWarmupEnabled(boolean value)\n+    {\n+        this.parallelWarmupEnabled = value;\n+        return this;\n+    }\n+\n+    public String getCacheLocation()\n+    {\n+        return cacheLocation;\n+    }\n+\n+    @Config(\"hive.rubix.cache.location\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTc5MjUz", "url": "https://github.com/trinodb/trino/pull/2679#pullrequestreview-352179253", "createdAt": "2020-02-03T11:12:58Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToxMjo1OVrOFkt7MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMToxOToyM1rOFkuFLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0NTQ4OQ==", "bodyText": "I think nodeManager.getAllNodes() should be called only once per loop here", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r374045489", "createdAt": "2020-02-03T11:12:59Z", "author": {"login": "raunaqmorarka"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.qubole.rubix.bookkeeper.BookKeeper;\n+import com.qubole.rubix.bookkeeper.BookKeeperServer;\n+import com.qubole.rubix.bookkeeper.LocalDataTransferServer;\n+import com.qubole.rubix.core.CachingFileSystem;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.Node;\n+import io.prestosql.spi.NodeManager;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/*\n+ * Responsibilities of this initializer:\n+ * 1. Lazily setup RubixConfigurationInitializer with information about master when it is available\n+ * 2. Start Rubix Servers.\n+ * 3. Inject BookKeeper object into CachingFileSystem class\n+ */\n+public class RubixInitializer\n+{\n+    private static final Logger log = Logger.get(RubixInitializer.class);\n+\n+    private final RubixConfigurationInitializer rubixConfigurationInitializer;\n+    private final Set<ConfigurationInitializer> configurationInitializers;\n+\n+    @Inject\n+    public RubixInitializer(RubixConfigurationInitializer rubixConfigurationInitializer, Set<ConfigurationInitializer> configurationInitializers)\n+    {\n+        this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n+        this.configurationInitializers = configurationInitializers;\n+    }\n+\n+    public void initializeRubix(NodeManager nodeManager)\n+    {\n+        ExecutorService initializerService = Executors.newSingleThreadExecutor();\n+        ListenableFuture<Boolean> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n+        {\n+            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0NTgyOA==", "bodyText": "we could use !allNodes.getActiveCoordinators().isEmpty() here", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r374045828", "createdAt": "2020-02-03T11:13:50Z", "author": {"login": "raunaqmorarka"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.qubole.rubix.bookkeeper.BookKeeper;\n+import com.qubole.rubix.bookkeeper.BookKeeperServer;\n+import com.qubole.rubix.bookkeeper.LocalDataTransferServer;\n+import com.qubole.rubix.core.CachingFileSystem;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.Node;\n+import io.prestosql.spi.NodeManager;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/*\n+ * Responsibilities of this initializer:\n+ * 1. Lazily setup RubixConfigurationInitializer with information about master when it is available\n+ * 2. Start Rubix Servers.\n+ * 3. Inject BookKeeper object into CachingFileSystem class\n+ */\n+public class RubixInitializer\n+{\n+    private static final Logger log = Logger.get(RubixInitializer.class);\n+\n+    private final RubixConfigurationInitializer rubixConfigurationInitializer;\n+    private final Set<ConfigurationInitializer> configurationInitializers;\n+\n+    @Inject\n+    public RubixInitializer(RubixConfigurationInitializer rubixConfigurationInitializer, Set<ConfigurationInitializer> configurationInitializers)\n+    {\n+        this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n+        this.configurationInitializers = configurationInitializers;\n+    }\n+\n+    public void initializeRubix(NodeManager nodeManager)\n+    {\n+        ExecutorService initializerService = Executors.newSingleThreadExecutor();\n+        ListenableFuture<Boolean> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n+        {\n+            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&\n+                nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0ODA0NA==", "bodyText": "Can we do this via InternalNodeManager#addNodeChangeListener rather than the looping here ?", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r374048044", "createdAt": "2020-02-03T11:19:23Z", "author": {"login": "raunaqmorarka"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.qubole.rubix.bookkeeper.BookKeeper;\n+import com.qubole.rubix.bookkeeper.BookKeeperServer;\n+import com.qubole.rubix.bookkeeper.LocalDataTransferServer;\n+import com.qubole.rubix.core.CachingFileSystem;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.Node;\n+import io.prestosql.spi.NodeManager;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/*\n+ * Responsibilities of this initializer:\n+ * 1. Lazily setup RubixConfigurationInitializer with information about master when it is available\n+ * 2. Start Rubix Servers.\n+ * 3. Inject BookKeeper object into CachingFileSystem class\n+ */\n+public class RubixInitializer\n+{\n+    private static final Logger log = Logger.get(RubixInitializer.class);\n+\n+    private final RubixConfigurationInitializer rubixConfigurationInitializer;\n+    private final Set<ConfigurationInitializer> configurationInitializers;\n+\n+    @Inject\n+    public RubixInitializer(RubixConfigurationInitializer rubixConfigurationInitializer, Set<ConfigurationInitializer> configurationInitializers)\n+    {\n+        this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n+        this.configurationInitializers = configurationInitializers;\n+    }\n+\n+    public void initializeRubix(NodeManager nodeManager)\n+    {\n+        ExecutorService initializerService = Executors.newSingleThreadExecutor();\n+        ListenableFuture<Boolean> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n+        {\n+            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzU2Mzkz", "url": "https://github.com/trinodb/trino/pull/2679#pullrequestreview-366756393", "createdAt": "2020-02-29T00:29:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoyOToxM1rOFwGXDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoyOToxM1rOFwGXDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MDE3Mw==", "bodyText": "This looks a bit strange. How about hive.cache.location", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r385980173", "createdAt": "2020-02-29T00:29:13Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.qubole.rubix.spi.CacheConfig;\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    private boolean cacheEnabled;\n+    private boolean parallelWarmupEnabled = true;\n+    private String cacheLocation = \"/tmp\";\n+    private int bookKeeperServerPort = CacheConfig.DEFAULT_BOOKKEEPER_SERVER_PORT;\n+    private int dataTransferServerPort = CacheConfig.DEFAULT_DATA_TRANSFER_SERVER_PORT;\n+\n+    public boolean isCacheEnabled()\n+    {\n+        return cacheEnabled;\n+    }\n+\n+    @Config(\"hive.cache.enabled\")\n+    public RubixConfig setCacheEnabled(boolean value)\n+    {\n+        this.cacheEnabled = value;\n+        return this;\n+    }\n+\n+    public boolean isParallelWarmupEnabled()\n+    {\n+        return parallelWarmupEnabled;\n+    }\n+\n+    @Config(\"hive.cache.parallel-warmup-enabled\")\n+    public RubixConfig setParallelWarmupEnabled(boolean value)\n+    {\n+        this.parallelWarmupEnabled = value;\n+        return this;\n+    }\n+\n+    public String getCacheLocation()\n+    {\n+        return cacheLocation;\n+    }\n+\n+    @Config(\"hive.cache.cache.location\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "author": {"user": {"login": "shubhamtagra", "name": "Shubham Tagra"}}, "url": "https://github.com/trinodb/trino/commit/1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "committedDate": "2020-03-06T04:50:22Z", "message": "Rubix integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "author": {"user": {"login": "shubhamtagra", "name": "Shubham Tagra"}}, "url": "https://github.com/trinodb/trino/commit/1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "committedDate": "2020-03-06T04:50:22Z", "message": "Rubix integration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTA3MTc5", "url": "https://github.com/trinodb/trino/pull/2679#pullrequestreview-370107179", "createdAt": "2020-03-06T06:34:25Z", "commit": {"oid": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjozNDoyNlrOFyubDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjozNDoyNlrOFyubDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMzcwOQ==", "bodyText": "fs.wasbs.impl missing here ?", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r388733709", "createdAt": "2020-03-06T06:34:26Z", "author": {"login": "raunaqmorarka"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.qubole.rubix.prestosql.CachingPrestoGoogleHadoopFileSystem;\n+import com.qubole.rubix.prestosql.CachingPrestoNativeAzureFileSystem;\n+import com.qubole.rubix.prestosql.CachingPrestoS3FileSystem;\n+import com.qubole.rubix.prestosql.PrestoClusterManager;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.HostAddress;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.qubole.rubix.spi.CacheConfig.enableHeartbeat;\n+import static com.qubole.rubix.spi.CacheConfig.setBookKeeperServerPort;\n+import static com.qubole.rubix.spi.CacheConfig.setCacheDataDirPrefix;\n+import static com.qubole.rubix.spi.CacheConfig.setCacheDataEnabled;\n+import static com.qubole.rubix.spi.CacheConfig.setClusterNodeRefreshTime;\n+import static com.qubole.rubix.spi.CacheConfig.setClusterNodesFetchRetryCount;\n+import static com.qubole.rubix.spi.CacheConfig.setCoordinatorHostName;\n+import static com.qubole.rubix.spi.CacheConfig.setCurrentNodeHostName;\n+import static com.qubole.rubix.spi.CacheConfig.setDataTransferServerPort;\n+import static com.qubole.rubix.spi.CacheConfig.setEmbeddedMode;\n+import static com.qubole.rubix.spi.CacheConfig.setIsParallelWarmupEnabled;\n+import static com.qubole.rubix.spi.CacheConfig.setOnMaster;\n+import static com.qubole.rubix.spi.CacheConfig.setRubixClusterType;\n+import static com.qubole.rubix.spi.CacheConfig.setWorkerNodeInfoExpiryPeriod;\n+import static com.qubole.rubix.spi.ClusterType.PRESTOSQL_CLUSTER_MANAGER;\n+\n+public class RubixConfigurationInitializer\n+        implements ConfigurationInitializer\n+{\n+    private static final String RUBIX_S3_FS_CLASS_NAME = CachingPrestoS3FileSystem.class.getName();\n+    private static final String RUBIX_AZURE_FS_CLASS_NAME = CachingPrestoNativeAzureFileSystem.class.getName();\n+    private static final String RUBIX_GS_FS_CLASS_NAME = CachingPrestoGoogleHadoopFileSystem.class.getName();\n+\n+    private final boolean parallelWarmupEnabled;\n+    private final String cacheLocation;\n+    private final int bookKeeperServerPort;\n+    private final int dataTransferServerPort;\n+\n+    // Configs below are dependent on node joining the cluster\n+    private boolean cacheNotReady = true;\n+    private boolean isMaster;\n+    private HostAddress masterAddress;\n+    private String nodeAddress;\n+\n+    @Inject\n+    public RubixConfigurationInitializer(RubixConfig config)\n+    {\n+        this.parallelWarmupEnabled = config.isParallelWarmupEnabled();\n+        this.cacheLocation = config.getCacheLocation();\n+        this.bookKeeperServerPort = config.getBookKeeperServerPort();\n+        this.dataTransferServerPort = config.getDataTransferServerPort();\n+    }\n+\n+    @Override\n+    public void initializeConfiguration(Configuration config)\n+    {\n+        if (cacheNotReady) {\n+            setCacheDataEnabled(config, false);\n+            return;\n+        }\n+\n+        updateConfiguration(config);\n+    }\n+\n+    public Configuration updateConfiguration(Configuration config)\n+    {\n+        checkState(masterAddress != null, \"masterAddress is not set\");\n+        setCacheDataEnabled(config, true);\n+        setOnMaster(config, isMaster);\n+        setCoordinatorHostName(config, masterAddress.getHostText());\n+        PrestoClusterManager.setPrestoServerPort(config, masterAddress.getPort());\n+        setCurrentNodeHostName(config, nodeAddress);\n+\n+        setIsParallelWarmupEnabled(config, parallelWarmupEnabled);\n+        setCacheDataDirPrefix(config, cacheLocation);\n+        setBookKeeperServerPort(config, bookKeeperServerPort);\n+        setDataTransferServerPort(config, dataTransferServerPort);\n+\n+        setEmbeddedMode(config, true);\n+        setRubixClusterType(config, PRESTOSQL_CLUSTER_MANAGER);\n+        enableHeartbeat(config, false);\n+        setClusterNodeRefreshTime(config, 10);\n+        setClusterNodesFetchRetryCount(config, Integer.MAX_VALUE);\n+        setWorkerNodeInfoExpiryPeriod(config, 1);\n+\n+        config.set(\"fs.s3.impl\", RUBIX_S3_FS_CLASS_NAME);\n+        config.set(\"fs.s3a.impl\", RUBIX_S3_FS_CLASS_NAME);\n+        config.set(\"fs.s3n.impl\", RUBIX_S3_FS_CLASS_NAME);\n+        config.set(\"fs.wasb.impl\", RUBIX_AZURE_FS_CLASS_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTMwOTM3", "url": "https://github.com/trinodb/trino/pull/2679#pullrequestreview-377130937", "createdAt": "2020-03-18T18:29:17Z", "commit": {"oid": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1741, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}