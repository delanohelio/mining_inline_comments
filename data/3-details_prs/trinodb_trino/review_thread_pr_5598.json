{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1OTg0Nzg2", "number": 5598, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo1NDoyOVrOEvW5ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0NTo1M1rOE1t98A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDkzNjY5OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo1NDoyOVrOHkS12w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODozMjoyNVrOHkcY6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxOTQ4Mw==", "bodyText": "set a version\n(@kokosing do we publish latest at all?)", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507819483", "createdAt": "2020-10-19T14:54:29Z", "author": {"login": "findepi"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -171,58 +171,29 @@ public static Connector getAccumuloConnector()\n         }\n \n         try {\n-            MiniAccumuloCluster accumulo = createMiniAccumuloCluster();\n-            Instance instance = new ZooKeeperInstance(accumulo.getInstanceName(), accumulo.getZooKeepers());\n-            connector = instance.getConnector(MAC_USER, new PasswordToken(MAC_PASSWORD));\n-            LOG.info(\"Connection to MAC instance %s at %s established, user %s password %s\", accumulo.getInstanceName(), accumulo.getZooKeepers(), MAC_USER, MAC_PASSWORD);\n+            FixedHostPortGenericContainer<?> accumuloContainer = new FixedHostPortGenericContainer<>(\"prestodev/accumulo:latest\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1NjcyNQ==", "bodyText": "trinodb/docker-images#74 will need released and then I will push up a version and that should get the CI to pass. AFAIK latest versions are not published.", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507956725", "createdAt": "2020-10-19T18:01:29Z", "author": {"login": "adamjshook"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -171,58 +171,29 @@ public static Connector getAccumuloConnector()\n         }\n \n         try {\n-            MiniAccumuloCluster accumulo = createMiniAccumuloCluster();\n-            Instance instance = new ZooKeeperInstance(accumulo.getInstanceName(), accumulo.getZooKeepers());\n-            connector = instance.getConnector(MAC_USER, new PasswordToken(MAC_PASSWORD));\n-            LOG.info(\"Connection to MAC instance %s at %s established, user %s password %s\", accumulo.getInstanceName(), accumulo.getZooKeepers(), MAC_USER, MAC_PASSWORD);\n+            FixedHostPortGenericContainer<?> accumuloContainer = new FixedHostPortGenericContainer<>(\"prestodev/accumulo:latest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxOTQ4Mw=="}, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2OTM3Ng==", "bodyText": "It looks like we do: https://hub.docker.com/layers/prestodev/hdp2.6-hive-kerberized/latest/images/sha256-5831557495ff24f1619325c0a847552a6871376f1b65473664d86ef54a67bc8e?context=explore\n@adamjshook you might want to to publish this image to some custom repository to just to see if everything works and then I will do the release so we can update the image here. WDYT?", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507969376", "createdAt": "2020-10-19T18:21:31Z", "author": {"login": "kokosing"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -171,58 +171,29 @@ public static Connector getAccumuloConnector()\n         }\n \n         try {\n-            MiniAccumuloCluster accumulo = createMiniAccumuloCluster();\n-            Instance instance = new ZooKeeperInstance(accumulo.getInstanceName(), accumulo.getZooKeepers());\n-            connector = instance.getConnector(MAC_USER, new PasswordToken(MAC_PASSWORD));\n-            LOG.info(\"Connection to MAC instance %s at %s established, user %s password %s\", accumulo.getInstanceName(), accumulo.getZooKeepers(), MAC_USER, MAC_PASSWORD);\n+            FixedHostPortGenericContainer<?> accumuloContainer = new FixedHostPortGenericContainer<>(\"prestodev/accumulo:latest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxOTQ4Mw=="}, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3NTkxMw==", "bodyText": "@kokosing Sure, I'm good with that \ud83d\udc4d", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507975913", "createdAt": "2020-10-19T18:32:25Z", "author": {"login": "adamjshook"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -171,58 +171,29 @@ public static Connector getAccumuloConnector()\n         }\n \n         try {\n-            MiniAccumuloCluster accumulo = createMiniAccumuloCluster();\n-            Instance instance = new ZooKeeperInstance(accumulo.getInstanceName(), accumulo.getZooKeepers());\n-            connector = instance.getConnector(MAC_USER, new PasswordToken(MAC_PASSWORD));\n-            LOG.info(\"Connection to MAC instance %s at %s established, user %s password %s\", accumulo.getInstanceName(), accumulo.getZooKeepers(), MAC_USER, MAC_PASSWORD);\n+            FixedHostPortGenericContainer<?> accumuloContainer = new FixedHostPortGenericContainer<>(\"prestodev/accumulo:latest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxOTQ4Mw=="}, "originalCommit": null, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDkzOTU3OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo1NTowMlrOHkS3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo1NTowMlrOHkS3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxOTkyOA==", "bodyText": "Hopefully redundant. testcontainers' Ryuk's responsibiliy.", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507819928", "createdAt": "2020-10-19T14:55:02Z", "author": {"login": "findepi"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -171,58 +171,29 @@ public static Connector getAccumuloConnector()\n         }\n \n         try {\n-            MiniAccumuloCluster accumulo = createMiniAccumuloCluster();\n-            Instance instance = new ZooKeeperInstance(accumulo.getInstanceName(), accumulo.getZooKeepers());\n-            connector = instance.getConnector(MAC_USER, new PasswordToken(MAC_PASSWORD));\n-            LOG.info(\"Connection to MAC instance %s at %s established, user %s password %s\", accumulo.getInstanceName(), accumulo.getZooKeepers(), MAC_USER, MAC_PASSWORD);\n+            FixedHostPortGenericContainer<?> accumuloContainer = new FixedHostPortGenericContainer<>(\"prestodev/accumulo:latest\");\n+            accumuloContainer.withFixedExposedPort(ACCUMULO_MASTER_PORT, ACCUMULO_MASTER_PORT);\n+            accumuloContainer.withFixedExposedPort(ACCUMULO_TSERVER_PORT, ACCUMULO_TSERVER_PORT);\n+            accumuloContainer.withFixedExposedPort(ZOOKEEPER_PORT, ZOOKEEPER_PORT);\n+            accumuloContainer.waitingFor(Wait.forHealthcheck().withStartupTimeout(Duration.ofMinutes(10)));\n+            accumuloContainer.start();\n+\n+            // Add shutdown hook to stop Docker container\n+            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+                LOG.info(\"Shutting down Accumulo\");\n+                accumuloContainer.stop();\n+            }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTg4MzE2OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODoyMjo1MFrOHkcCtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowMTo1M1rOHlBokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3MDIyOA==", "bodyText": "Do we still need a singleton? It would be nice to have it as regular closeable resource instead.", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507970228", "createdAt": "2020-10-19T18:22:50Z", "author": {"login": "kokosing"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -159,8 +159,8 @@ public static Session createSession()\n     }\n \n     /**\n-     * Gets the AccumuloConnector singleton, starting the MiniAccumuloCluster on initialization.\n-     * This singleton instance is required so all test cases access the same MiniAccumuloCluster.\n+     * Gets the AccumuloConnector singleton, starting the Accumulo Docker container on initialization.\n+     * This singleton instance is required so all test cases access the same Accumulo", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3NzU0Nw==", "bodyText": "No, not needed. I can create a TestingAccumuloServer and refactor the tests to use it to be more similar to how the other connectors work.", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507977547", "createdAt": "2020-10-19T18:34:32Z", "author": {"login": "adamjshook"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -159,8 +159,8 @@ public static Session createSession()\n     }\n \n     /**\n-     * Gets the AccumuloConnector singleton, starting the MiniAccumuloCluster on initialization.\n-     * This singleton instance is required so all test cases access the same MiniAccumuloCluster.\n+     * Gets the AccumuloConnector singleton, starting the Accumulo Docker container on initialization.\n+     * This singleton instance is required so all test cases access the same Accumulo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3MDIyOA=="}, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4NjEzMA==", "bodyText": "Turns out it is needed after all due to the fixed ports, multiple containers try to spawn at the same time and it fails. If I try a lock approach so only one container runs at a time, one of the test framework classes (distributed/integration smoke test) inexplicable fail because they are unable to connect to Accumulo once a new container is spawned.\nI suggest with stick with the Singleton -- I'll still refactor into a TestingAccumuloServer for cleanliness.", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r508586130", "createdAt": "2020-10-20T15:01:53Z", "author": {"login": "adamjshook"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -159,8 +159,8 @@ public static Session createSession()\n     }\n \n     /**\n-     * Gets the AccumuloConnector singleton, starting the MiniAccumuloCluster on initialization.\n-     * This singleton instance is required so all test cases access the same MiniAccumuloCluster.\n+     * Gets the AccumuloConnector singleton, starting the Accumulo Docker container on initialization.\n+     * This singleton instance is required so all test cases access the same Accumulo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3MDIyOA=="}, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTg4NjM2OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODoyMzozOVrOHkcEpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODoyMzozOVrOHkcEpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3MDcyNQ==", "bodyText": "just RuntimeException, it is test code", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507970725", "createdAt": "2020-10-19T18:23:39Z", "author": {"login": "kokosing"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -171,58 +171,29 @@ public static Connector getAccumuloConnector()\n         }\n \n         try {\n-            MiniAccumuloCluster accumulo = createMiniAccumuloCluster();\n-            Instance instance = new ZooKeeperInstance(accumulo.getInstanceName(), accumulo.getZooKeepers());\n-            connector = instance.getConnector(MAC_USER, new PasswordToken(MAC_PASSWORD));\n-            LOG.info(\"Connection to MAC instance %s at %s established, user %s password %s\", accumulo.getInstanceName(), accumulo.getZooKeepers(), MAC_USER, MAC_PASSWORD);\n+            FixedHostPortGenericContainer<?> accumuloContainer = new FixedHostPortGenericContainer<>(\"prestodev/accumulo:latest\");\n+            accumuloContainer.withFixedExposedPort(ACCUMULO_MASTER_PORT, ACCUMULO_MASTER_PORT);\n+            accumuloContainer.withFixedExposedPort(ACCUMULO_TSERVER_PORT, ACCUMULO_TSERVER_PORT);\n+            accumuloContainer.withFixedExposedPort(ZOOKEEPER_PORT, ZOOKEEPER_PORT);\n+            accumuloContainer.waitingFor(Wait.forHealthcheck().withStartupTimeout(Duration.ofMinutes(10)));\n+            accumuloContainer.start();\n+\n+            // Add shutdown hook to stop Docker container\n+            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+                LOG.info(\"Shutting down Accumulo\");\n+                accumuloContainer.stop();\n+            }));\n+\n+            Instance instance = new ZooKeeperInstance(ACCUMULO_INSTANCE, ACCUMULO_ZOOKEEPERS);\n+            connector = instance.getConnector(ACCUMULO_USER, new PasswordToken(ACCUMULO_PASSWORD));\n+            LOG.info(\"Connection to Accumulo instance %s at %s established, user %s password %s\", ACCUMULO_INSTANCE, ACCUMULO_ZOOKEEPERS, ACCUMULO_USER, ACCUMULO_PASSWORD);\n             return connector;\n         }\n-        catch (AccumuloException | AccumuloSecurityException | InterruptedException | IOException e) {\n+        catch (AccumuloException | AccumuloSecurityException e) {\n             throw new PrestoException(UNEXPECTED_ACCUMULO_ERROR, \"Failed to get connector to Accumulo\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTg4ODk3OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODoyNDoxOVrOHkcGIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODozODozNlrOHkcoAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3MTEwNw==", "bodyText": "do we need to use fixed ports? It would be nice to have them random.", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507971107", "createdAt": "2020-10-19T18:24:19Z", "author": {"login": "kokosing"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -171,58 +171,29 @@ public static Connector getAccumuloConnector()\n         }\n \n         try {\n-            MiniAccumuloCluster accumulo = createMiniAccumuloCluster();\n-            Instance instance = new ZooKeeperInstance(accumulo.getInstanceName(), accumulo.getZooKeepers());\n-            connector = instance.getConnector(MAC_USER, new PasswordToken(MAC_PASSWORD));\n-            LOG.info(\"Connection to MAC instance %s at %s established, user %s password %s\", accumulo.getInstanceName(), accumulo.getZooKeepers(), MAC_USER, MAC_PASSWORD);\n+            FixedHostPortGenericContainer<?> accumuloContainer = new FixedHostPortGenericContainer<>(\"prestodev/accumulo:latest\");\n+            accumuloContainer.withFixedExposedPort(ACCUMULO_MASTER_PORT, ACCUMULO_MASTER_PORT);\n+            accumuloContainer.withFixedExposedPort(ACCUMULO_TSERVER_PORT, ACCUMULO_TSERVER_PORT);\n+            accumuloContainer.withFixedExposedPort(ZOOKEEPER_PORT, ZOOKEEPER_PORT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3OTc3Nw==", "bodyText": "ZooKeeper doesn't need to be fixed -- I'll change that to random. But Accumulo needs to be fixed.  Clients discover the services from ZooKeeper and the ip:port that is advertised is the internal port that they are bound to.", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r507979777", "createdAt": "2020-10-19T18:38:36Z", "author": {"login": "adamjshook"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -171,58 +171,29 @@ public static Connector getAccumuloConnector()\n         }\n \n         try {\n-            MiniAccumuloCluster accumulo = createMiniAccumuloCluster();\n-            Instance instance = new ZooKeeperInstance(accumulo.getInstanceName(), accumulo.getZooKeepers());\n-            connector = instance.getConnector(MAC_USER, new PasswordToken(MAC_PASSWORD));\n-            LOG.info(\"Connection to MAC instance %s at %s established, user %s password %s\", accumulo.getInstanceName(), accumulo.getZooKeepers(), MAC_USER, MAC_PASSWORD);\n+            FixedHostPortGenericContainer<?> accumuloContainer = new FixedHostPortGenericContainer<>(\"prestodev/accumulo:latest\");\n+            accumuloContainer.withFixedExposedPort(ACCUMULO_MASTER_PORT, ACCUMULO_MASTER_PORT);\n+            accumuloContainer.withFixedExposedPort(ACCUMULO_TSERVER_PORT, ACCUMULO_TSERVER_PORT);\n+            accumuloContainer.withFixedExposedPort(ZOOKEEPER_PORT, ZOOKEEPER_PORT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3MTEwNw=="}, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Nzk2ODY0OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDozNzozNVrOHlWG8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDozNzozNVrOHlWG8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkyMTU4NQ==", "bodyText": "Remove version since this is the same in the root POM", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r508921585", "createdAt": "2020-10-21T00:37:35Z", "author": {"login": "electrum"}, "path": "presto-accumulo/pom.xml", "diffHunk": "@@ -349,7 +274,13 @@\n         <dependency>\n             <groupId>org.jetbrains</groupId>\n             <artifactId>annotations</artifactId>\n-            <version>13.0</version>\n+            <version>19.0.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Nzk2OTM0OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDozODowMVrOHlWHYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDozODowMVrOHlWHYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkyMTY5OQ==", "bodyText": "Nit: no need to wrap here", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r508921699", "createdAt": "2020-10-21T00:38:01Z", "author": {"login": "electrum"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/AccumuloQueryRunner.java", "diffHunk": "@@ -22,49 +22,31 @@\n import io.prestosql.plugin.accumulo.conf.AccumuloConfig;\n import io.prestosql.plugin.accumulo.serializers.LexicoderRowSerializer;\n import io.prestosql.plugin.tpch.TpchPlugin;\n-import io.prestosql.spi.PrestoException;\n import io.prestosql.testing.DistributedQueryRunner;\n import io.prestosql.testing.QueryRunner;\n import io.prestosql.tpch.TpchTable;\n-import org.apache.accumulo.core.client.AccumuloException;\n-import org.apache.accumulo.core.client.AccumuloSecurityException;\n-import org.apache.accumulo.core.client.Connector;\n-import org.apache.accumulo.core.client.Instance;\n-import org.apache.accumulo.core.client.ZooKeeperInstance;\n-import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n-import org.apache.accumulo.minicluster.MiniAccumuloCluster;\n-import org.apache.commons.io.FileUtils;\n import org.apache.hadoop.io.Text;\n import org.intellij.lang.annotations.Language;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Files;\n import java.util.Map;\n \n import static io.airlift.units.Duration.nanosSince;\n-import static io.prestosql.plugin.accumulo.AccumuloErrorCode.MINI_ACCUMULO;\n-import static io.prestosql.plugin.accumulo.AccumuloErrorCode.UNEXPECTED_ACCUMULO_ERROR;\n-import static io.prestosql.plugin.accumulo.MiniAccumuloConfigUtil.setConfigClassPath;\n import static io.prestosql.plugin.tpch.TpchMetadata.TINY_SCHEMA_NAME;\n import static io.prestosql.spi.type.BigintType.BIGINT;\n import static io.prestosql.testing.TestingSession.testSessionBuilder;\n import static java.lang.String.format;\n import static java.util.concurrent.TimeUnit.SECONDS;\n-import static org.apache.accumulo.minicluster.MemoryUnit.MEGABYTE;\n \n public final class AccumuloQueryRunner\n {\n     private static final Logger LOG = Logger.get(AccumuloQueryRunner.class);\n-    private static final String MAC_PASSWORD = \"secret\";\n-    private static final String MAC_USER = \"root\";\n \n     private static boolean tpchLoaded;\n-    private static Connector connector = getAccumuloConnector();\n \n     private AccumuloQueryRunner() {}\n \n-    public static synchronized DistributedQueryRunner createAccumuloQueryRunner(Map<String, String> extraProperties)\n+    public static synchronized DistributedQueryRunner createAccumuloQueryRunner(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Nzk4MzM0OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestingAccumuloServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMDo0NTo1MVrOHlWP8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0NzoyNFrOHuJptQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkyMzg4OQ==", "bodyText": "Using a singleton for now is fine as a transition from the old way, but we should move to a model where the Accumulo cluster is managed by AccumuloQueryRunner, the same way we do for other testing services. Shutting down resources immediately is useful since the CI machines can be resource constrained, and using a non-singleton allows things like testing multiple versions, testing with different config, etc.\nAdd a TODO here to make this not a singleton.", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r508923889", "createdAt": "2020-10-21T00:45:51Z", "author": {"login": "electrum"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestingAccumuloServer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.accumulo;\n+\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.ZooKeeperInstance;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import java.time.Duration;\n+\n+import static java.lang.String.format;\n+\n+public class TestingAccumuloServer\n+{\n+    private static final int ACCUMULO_MASTER_PORT = 9999;\n+    private static final int ACCUMULO_TSERVER_PORT = 9997;\n+    private static final int ZOOKEEPER_PORT = 2181;\n+\n+    private static final TestingAccumuloServer instance = new TestingAccumuloServer();\n+\n+    private final FixedHostPortGenericContainer<?> accumuloContainer;\n+\n+    public static TestingAccumuloServer getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    private TestingAccumuloServer()\n+    {\n+        // TODO Change to a prestodev/accumulo container once released\n+        accumuloContainer = new FixedHostPortGenericContainer<>(\"datacatessen/accumulo:1\");\n+        accumuloContainer.withFixedExposedPort(ACCUMULO_MASTER_PORT, ACCUMULO_MASTER_PORT);\n+        accumuloContainer.withFixedExposedPort(ACCUMULO_TSERVER_PORT, ACCUMULO_TSERVER_PORT);\n+        accumuloContainer.withExposedPorts(ZOOKEEPER_PORT);\n+        accumuloContainer.waitingFor(Wait.forHealthcheck().withStartupTimeout(Duration.ofMinutes(10)));\n+\n+        // No need for an explicit stop since this server is a singleton", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1NDY3Nw==", "bodyText": "but we should move to a model where the Accumulo cluster is managed by AccumuloQueryRunner,\n\nLet's create a github issue for this and add TODO comment (with link to the issue to the code).", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r518154677", "createdAt": "2020-11-05T15:47:24Z", "author": {"login": "kokosing"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestingAccumuloServer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.accumulo;\n+\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.ZooKeeperInstance;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import java.time.Duration;\n+\n+import static java.lang.String.format;\n+\n+public class TestingAccumuloServer\n+{\n+    private static final int ACCUMULO_MASTER_PORT = 9999;\n+    private static final int ACCUMULO_TSERVER_PORT = 9997;\n+    private static final int ZOOKEEPER_PORT = 2181;\n+\n+    private static final TestingAccumuloServer instance = new TestingAccumuloServer();\n+\n+    private final FixedHostPortGenericContainer<?> accumuloContainer;\n+\n+    public static TestingAccumuloServer getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    private TestingAccumuloServer()\n+    {\n+        // TODO Change to a prestodev/accumulo container once released\n+        accumuloContainer = new FixedHostPortGenericContainer<>(\"datacatessen/accumulo:1\");\n+        accumuloContainer.withFixedExposedPort(ACCUMULO_MASTER_PORT, ACCUMULO_MASTER_PORT);\n+        accumuloContainer.withFixedExposedPort(ACCUMULO_TSERVER_PORT, ACCUMULO_TSERVER_PORT);\n+        accumuloContainer.withExposedPorts(ZOOKEEPER_PORT);\n+        accumuloContainer.waitingFor(Wait.forHealthcheck().withStartupTimeout(Duration.ofMinutes(10)));\n+\n+        // No need for an explicit stop since this server is a singleton", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkyMzg4OQ=="}, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTg2NTQyOnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestingAccumuloServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDo0MzoxMVrOHtSk7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToxNjoxN1rOHt-nSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1MjMzMw==", "bodyText": "we still need to close https://github.com/prestosql/docker-images/pull/74", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r517252333", "createdAt": "2020-11-04T10:43:11Z", "author": {"login": "kokosing"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestingAccumuloServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.accumulo;\n+\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.ZooKeeperInstance;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import java.time.Duration;\n+\n+import static java.lang.String.format;\n+\n+// TODO Change this class to not be a singleton\n+public class TestingAccumuloServer\n+{\n+    private static final int ACCUMULO_MASTER_PORT = 9999;\n+    private static final int ACCUMULO_TSERVER_PORT = 9997;\n+    private static final int ZOOKEEPER_PORT = 2181;\n+\n+    private static final TestingAccumuloServer instance = new TestingAccumuloServer();\n+\n+    private final FixedHostPortGenericContainer<?> accumuloContainer;\n+\n+    public static TestingAccumuloServer getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    private TestingAccumuloServer()\n+    {\n+        // TODO Change to a prestodev/accumulo container once released\n+        accumuloContainer = new FixedHostPortGenericContainer<>(\"datacatessen/accumulo:1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MzgzMg==", "bodyText": "It is released, pleased update to prestodev/accumulo:35", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r517973832", "createdAt": "2020-11-05T11:16:17Z", "author": {"login": "kokosing"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestingAccumuloServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.accumulo;\n+\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.ZooKeeperInstance;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import java.time.Duration;\n+\n+import static java.lang.String.format;\n+\n+// TODO Change this class to not be a singleton\n+public class TestingAccumuloServer\n+{\n+    private static final int ACCUMULO_MASTER_PORT = 9999;\n+    private static final int ACCUMULO_TSERVER_PORT = 9997;\n+    private static final int ZOOKEEPER_PORT = 2181;\n+\n+    private static final TestingAccumuloServer instance = new TestingAccumuloServer();\n+\n+    private final FixedHostPortGenericContainer<?> accumuloContainer;\n+\n+    public static TestingAccumuloServer getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    private TestingAccumuloServer()\n+    {\n+        // TODO Change to a prestodev/accumulo container once released\n+        accumuloContainer = new FixedHostPortGenericContainer<>(\"datacatessen/accumulo:1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1MjMzMw=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzYzMTIwOnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestingAccumuloServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0NTo1M1rOHuJlEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjowNDozOFrOHuKcsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1MzQ5MQ==", "bodyText": "Please remove the comment", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r518153491", "createdAt": "2020-11-05T15:45:53Z", "author": {"login": "kokosing"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestingAccumuloServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.accumulo;\n+\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.ZooKeeperInstance;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import java.time.Duration;\n+\n+import static java.lang.String.format;\n+\n+// TODO Change this class to not be a singleton\n+public class TestingAccumuloServer\n+{\n+    private static final int ACCUMULO_MASTER_PORT = 9999;\n+    private static final int ACCUMULO_TSERVER_PORT = 9997;\n+    private static final int ZOOKEEPER_PORT = 2181;\n+\n+    private static final TestingAccumuloServer instance = new TestingAccumuloServer();\n+\n+    private final FixedHostPortGenericContainer<?> accumuloContainer;\n+\n+    public static TestingAccumuloServer getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    private TestingAccumuloServer()\n+    {\n+        // TODO Change to a prestodev/accumulo container once released", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE2NzcyOQ==", "bodyText": "\ud83e\udd26\u200d\u2642\ufe0f", "url": "https://github.com/trinodb/trino/pull/5598#discussion_r518167729", "createdAt": "2020-11-05T16:04:38Z", "author": {"login": "adamjshook"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestingAccumuloServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.accumulo;\n+\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.ZooKeeperInstance;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import java.time.Duration;\n+\n+import static java.lang.String.format;\n+\n+// TODO Change this class to not be a singleton\n+public class TestingAccumuloServer\n+{\n+    private static final int ACCUMULO_MASTER_PORT = 9999;\n+    private static final int ACCUMULO_TSERVER_PORT = 9997;\n+    private static final int ZOOKEEPER_PORT = 2181;\n+\n+    private static final TestingAccumuloServer instance = new TestingAccumuloServer();\n+\n+    private final FixedHostPortGenericContainer<?> accumuloContainer;\n+\n+    public static TestingAccumuloServer getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    private TestingAccumuloServer()\n+    {\n+        // TODO Change to a prestodev/accumulo container once released", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1MzQ5MQ=="}, "originalCommit": null, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4463, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}