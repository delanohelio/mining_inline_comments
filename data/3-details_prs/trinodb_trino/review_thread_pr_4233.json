{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjkyMjA4", "number": 4233, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToxMzo1N1rOEOmThw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowNDoyMVrOEOunMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzQzMTExOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToxMzo1N1rOGx1dOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToxMzo1N1rOGx1dOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwOTI0Mw==", "bodyText": "move this method below verifySelectDistinct", "url": "https://github.com/trinodb/trino/pull/4233#discussion_r454909243", "createdAt": "2020-07-15T09:13:57Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2597,21 +2545,56 @@ private Scope analyzeWith(Query node, Optional<Scope> scope)\n             return withScope;\n         }\n \n-        private void verifySelectDistinct(QuerySpecification node, List<Expression> outputExpressions)\n+        private Set<CanonicalizationAware<Identifier>> getAliases(Select node)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODc2MTU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo1NzozMFrOGyCRpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjoxNDo0N1rOGyFVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExOTI3MQ==", "bodyText": "Maybe add a comment why there's need to derive \"aliases\" from Identifiers and DereferenceExpressions?\nIf my understanding is correct, they cannot be identified by ScopeAwareKey, just like other expressions (e.g. a + b) because the Identifiers in ORDER BY are tied to a different RelationId than their source values.", "url": "https://github.com/trinodb/trino/pull/4233#discussion_r455119271", "createdAt": "2020-07-15T14:57:30Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2597,21 +2545,56 @@ private Scope analyzeWith(Query node, Optional<Scope> scope)\n             return withScope;\n         }\n \n-        private void verifySelectDistinct(QuerySpecification node, List<Expression> outputExpressions)\n+        private Set<CanonicalizationAware<Identifier>> getAliases(Select node)\n         {\n-            for (SortItem item : node.getOrderBy().get().getSortItems()) {\n-                Expression expression = item.getSortKey();\n+            ImmutableSet.Builder<CanonicalizationAware<Identifier>> aliases = ImmutableSet.builder();\n+            for (SelectItem item : node.getSelectItems()) {\n+                if (item instanceof SingleColumn) {\n+                    SingleColumn column = (SingleColumn) item;\n+                    Optional<Identifier> alias = column.getAlias();\n+                    if (alias.isPresent()) {\n+                        aliases.add(canonicalizationAwareKey(alias.get()));\n+                    }\n+                    else if (column.getExpression() instanceof Identifier) {\n+                        aliases.add(canonicalizationAwareKey((Identifier) column.getExpression()));\n+                    }\n+                    else if (column.getExpression() instanceof DereferenceExpression) {\n+                        aliases.add(canonicalizationAwareKey(((DereferenceExpression) column.getExpression()).getField()));\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2OTI4MQ==", "bodyText": "Exactly, if you have SELECT a FROM t ORDER BY a, the a in the SELECT clause is bound to the FROM scope, while the a in ORDER BY clause is bound to the a from the SELECT clause, so we can't compare by field id / relation id.", "url": "https://github.com/trinodb/trino/pull/4233#discussion_r455169281", "createdAt": "2020-07-15T16:14:47Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2597,21 +2545,56 @@ private Scope analyzeWith(Query node, Optional<Scope> scope)\n             return withScope;\n         }\n \n-        private void verifySelectDistinct(QuerySpecification node, List<Expression> outputExpressions)\n+        private Set<CanonicalizationAware<Identifier>> getAliases(Select node)\n         {\n-            for (SortItem item : node.getOrderBy().get().getSortItems()) {\n-                Expression expression = item.getSortKey();\n+            ImmutableSet.Builder<CanonicalizationAware<Identifier>> aliases = ImmutableSet.builder();\n+            for (SelectItem item : node.getSelectItems()) {\n+                if (item instanceof SingleColumn) {\n+                    SingleColumn column = (SingleColumn) item;\n+                    Optional<Identifier> alias = column.getAlias();\n+                    if (alias.isPresent()) {\n+                        aliases.add(canonicalizationAwareKey(alias.get()));\n+                    }\n+                    else if (column.getExpression() instanceof Identifier) {\n+                        aliases.add(canonicalizationAwareKey((Identifier) column.getExpression()));\n+                    }\n+                    else if (column.getExpression() instanceof DereferenceExpression) {\n+                        aliases.add(canonicalizationAwareKey(((DereferenceExpression) column.getExpression()).getField()));\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExOTI3MQ=="}, "originalCommit": null, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODc3NjE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestDistinctWithOrderBy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMDo1NlrOGyCa9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMDo1NlrOGyCa9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMTY1Mw==", "bodyText": "it is withDifferentQualification, too", "url": "https://github.com/trinodb/trino/pull/4233#discussion_r455121653", "createdAt": "2020-07-15T15:00:56Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestDistinctWithOrderBy.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.query;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestDistinctWithOrderBy\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testOrderByReferenceWithDifferentCapitalization()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODc5MjE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestDistinctWithOrderBy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowNDoyMVrOGyCkiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowNDoyMVrOGyCkiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNDEwNw==", "bodyText": "Consider adding a test with conflicting aliases, e.g. SELECT DISTINCT a, b a FROM (VALUES (1, 5), (2, 4)) T(a,b) ORDER BY T.a DESC", "url": "https://github.com/trinodb/trino/pull/4233#discussion_r455124107", "createdAt": "2020-07-15T15:04:21Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestDistinctWithOrderBy.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.query;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestDistinctWithOrderBy\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testOrderByReferenceWithDifferentCapitalization()\n+    {\n+        assertThat(assertions.query(\"SELECT DISTINCT t.A FROM (VALUES 2, 1, 2) t(a) ORDER BY t.a\"))\n+                .matches(\"VALUES 1, 2\");\n+\n+        assertThat(assertions.query(\"SELECT DISTINCT a FROM (VALUES 2, 1, 2) t(a) ORDER BY A\"))\n+                .matches(\"VALUES 1, 2\");\n+\n+        assertThat(assertions.query(\"SELECT DISTINCT a FROM (VALUES 2, 1, 2) t(a) ORDER BY t.A\"))\n+                .matches(\"VALUES 1, 2\");\n+\n+        assertThat(assertions.query(\"SELECT DISTINCT t.a FROM (VALUES 2, 1, 2) t(a) ORDER BY A\"))\n+                .matches(\"VALUES 1, 2\");\n+\n+        assertThat(assertions.query(\"SELECT DISTINCT a + B FROM (VALUES (2, 2), (1, 1), (2, 2)) t(a, b) ORDER BY a + b\"))\n+                .matches(\"VALUES 2, 4\");\n+\n+        assertThat(assertions.query(\"SELECT DISTINCT a + B FROM (VALUES (2, 2), (1, 1), (2, 2)) t(a, b) ORDER BY a + t.b\"))\n+                .matches(\"VALUES 2, 4\");\n+\n+        assertThat(assertions.query(\"SELECT DISTINCT a + t.B FROM (VALUES (2, 2), (1, 1), (2, 2)) t(a, b) ORDER BY a + b\"))\n+                .matches(\"VALUES 2, 4\");\n+\n+        assertThat(assertions.query(\"SELECT DISTINCT a + t.B FROM (VALUES (2, 2), (1, 1), (2, 2)) t(a, b) ORDER BY a + t.b\"))\n+                .matches(\"VALUES 2, 4\");\n+    }\n+\n+    @Test\n+    public void testSelectAllAliases()\n+    {\n+        assertThat(assertions.query(\"SELECT DISTINCT t.r.* AS (a, b) FROM (VALUES ROW(CAST(ROW(1,1) AS ROW(a BIGINT, b BIGINT)))) t(r) ORDER BY a\"))\n+                .matches(\"VALUES (BIGINT '1', BIGINT '1')\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3958, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}