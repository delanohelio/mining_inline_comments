{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODc1MjEx", "number": 4685, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNzoxN1rOEjQ01g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo1MjozNFrOEjRXTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDExMjg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SourcePartitionedScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNzoxN1rOHRhfgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNzoxN1rOHRhfgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNjU3Ng==", "bodyText": "I'd inline this", "url": "https://github.com/trinodb/trino/pull/4685#discussion_r488136576", "createdAt": "2020-09-14T18:27:17Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SourcePartitionedScheduler.java", "diffHunk": "@@ -478,6 +501,16 @@ public void close()\n         return newTasks.build();\n     }\n \n+    private Set<RemoteTask> createTaskOnRandomNode()\n+    {\n+        List<InternalNode> allNodes = splitPlacementPolicy.allNodes();\n+        checkState(allNodes.size() > 0, \"No nodes available\");\n+        int position = ThreadLocalRandom.current().nextInt(0, allNodes.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDExNDg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SourcePartitionedScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNzo1OVrOHRhg6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNzo1OVrOHRhg6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNjkzOA==", "bodyText": "Should stage.getScheduledNodes() be empty?  If so, I'd check it at the start of the method.", "url": "https://github.com/trinodb/trino/pull/4685#discussion_r488136938", "createdAt": "2020-09-14T18:27:59Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SourcePartitionedScheduler.java", "diffHunk": "@@ -478,6 +501,16 @@ public void close()\n         return newTasks.build();\n     }\n \n+    private Set<RemoteTask> createTaskOnRandomNode()\n+    {\n+        List<InternalNode> allNodes = splitPlacementPolicy.allNodes();\n+        checkState(allNodes.size() > 0, \"No nodes available\");\n+        int position = ThreadLocalRandom.current().nextInt(0, allNodes.size());\n+        InternalNode node = allNodes.get(position);\n+        checkState(!stage.getScheduledNodes().contains(node), \"Stage task is already scheduled on node\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEzMTI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMjo0NVrOHRhrBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNDo1NVrOHRhvog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzOTUyNw==", "bodyText": "rename plan to fragment", "url": "https://github.com/trinodb/trino/pull/4685#discussion_r488139527", "createdAt": "2020-09-14T18:32:45Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -189,6 +192,41 @@ public void removeQuery(QueryId queryId)\n         dynamicFilterContexts.remove(queryId);\n     }\n \n+    /**\n+     * Dynamic filters are collected in same stage as the join operator. This can result in deadlock\n+     * for source stage joins and connectors that wait for dynamic filters before generating splits\n+     * (probe splits might be blocked on dynamic filters which require at least one probe task in order to be collected).\n+     * To overcome this issue an initial task is created for source stages running broadcast join operator.\n+     * This task allows for dynamic filters collection without any probe side splits being scheduled.\n+     */\n+    public boolean needsDynamicFiltersCollectingTask(QueryId queryId, PlanFragment plan)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDcwNg==", "bodyText": "I find the name needs... to be a bit strange.  It sounds like the command I need....  Consider renaming to isCollectingTaskNeeded.  Given this is the DynamicFilterService the DynamicFilter in the name seems redundant.", "url": "https://github.com/trinodb/trino/pull/4685#discussion_r488140706", "createdAt": "2020-09-14T18:34:55Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -189,6 +192,41 @@ public void removeQuery(QueryId queryId)\n         dynamicFilterContexts.remove(queryId);\n     }\n \n+    /**\n+     * Dynamic filters are collected in same stage as the join operator. This can result in deadlock\n+     * for source stage joins and connectors that wait for dynamic filters before generating splits\n+     * (probe splits might be blocked on dynamic filters which require at least one probe task in order to be collected).\n+     * To overcome this issue an initial task is created for source stages running broadcast join operator.\n+     * This task allows for dynamic filters collection without any probe side splits being scheduled.\n+     */\n+    public boolean needsDynamicFiltersCollectingTask(QueryId queryId, PlanFragment plan)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzOTUyNw=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE0OTY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozODoxMVrOHRh2jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozODoxMVrOHRh2jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MjQ3Nw==", "bodyText": "Sets.difference and Sets.union return a \"view\" which is computed for each iteration and will change when the underlying sets change.  I would make a defensive copy here using ImmutableSet.", "url": "https://github.com/trinodb/trino/pull/4685#discussion_r488142477", "createdAt": "2020-09-14T18:38:11Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -327,8 +365,28 @@ void collectDynamicFilters()\n \n     private static Set<DynamicFilterId> getLazyDynamicFilters(PlanFragment plan)\n     {\n-        // lazy dynamic filters cannot be consumed by the same stage where they are produced as it would result in query deadlock\n-        return difference(getProducedDynamicFilters(plan.getRoot()), getConsumedDynamicFilters(plan.getRoot()));\n+        // To prevent deadlock dynamic filter can be lazy only when:\n+        // 1. it's consumed by different stage from where it's produced\n+        // 2. or it's produced by replicated join in source stage. In such case an extra\n+        //    task is created that will collect dynamic filter and prevent deadlock.\n+        Set<DynamicFilterId> interStageDynamicFilters = difference(getProducedDynamicFilters(plan.getRoot()), getConsumedDynamicFilters(plan.getRoot()));\n+        return union(interStageDynamicFilters, getSourceStageInnerLazyDynamicFilters(plan));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE3ODIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NjoxNVrOHRiHtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NjoxNVrOHRiHtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0Njg3MQ==", "bodyText": "same comment about Sets returning views", "url": "https://github.com/trinodb/trino/pull/4685#discussion_r488146871", "createdAt": "2020-09-14T18:46:15Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -327,8 +365,28 @@ void collectDynamicFilters()\n \n     private static Set<DynamicFilterId> getLazyDynamicFilters(PlanFragment plan)\n     {\n-        // lazy dynamic filters cannot be consumed by the same stage where they are produced as it would result in query deadlock\n-        return difference(getProducedDynamicFilters(plan.getRoot()), getConsumedDynamicFilters(plan.getRoot()));\n+        // To prevent deadlock dynamic filter can be lazy only when:\n+        // 1. it's consumed by different stage from where it's produced\n+        // 2. or it's produced by replicated join in source stage. In such case an extra\n+        //    task is created that will collect dynamic filter and prevent deadlock.\n+        Set<DynamicFilterId> interStageDynamicFilters = difference(getProducedDynamicFilters(plan.getRoot()), getConsumedDynamicFilters(plan.getRoot()));\n+        return union(interStageDynamicFilters, getSourceStageInnerLazyDynamicFilters(plan));\n+    }\n+\n+    @VisibleForTesting\n+    static Set<DynamicFilterId> getSourceStageInnerLazyDynamicFilters(PlanFragment plan)\n+    {\n+        if (!plan.getPartitioning().equals(SOURCE_DISTRIBUTION)) {\n+            // Only non-fixed source stages can have (replicated) lazy dynamic filters that are\n+            // produced and consumed within stage. This is because for such stages an extra\n+            // dynamic filtering collecting task can be added.\n+            return ImmutableSet.of();\n+        }\n+\n+        PlanNode planNode = plan.getRoot();\n+        Set<DynamicFilterId> innerStageDynamicFilters = intersection(getProducedDynamicFilters(planNode), getConsumedDynamicFilters(planNode));\n+        Set<DynamicFilterId> replicatedDynamicFilters = getReplicatedDynamicFilters(planNode);\n+        return intersection(innerStageDynamicFilters, replicatedDynamicFilters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE5OTEzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/scheduler/TestSourcePartitionedScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo1MjowMFrOHRiURg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo1MjowMFrOHRiURg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1MDA4Ng==", "bodyText": "I'm pretty sure this can just be new SymbolReference(\"DF_SYMBOL1\")", "url": "https://github.com/trinodb/trino/pull/4685#discussion_r488150086", "createdAt": "2020-09-14T18:52:00Z", "author": {"login": "dain"}, "path": "presto-main/src/test/java/io/prestosql/execution/scheduler/TestSourcePartitionedScheduler.java", "diffHunk": "@@ -446,6 +462,49 @@ public void testNoNewTaskScheduledWhenChildStageBufferIsOverutilized()\n         assertEquals(scheduleResult.getSplitsScheduled(), 0);\n     }\n \n+    @Test\n+    public void testDynamicFiltersUnblockedOnBlockedBuildSource()\n+    {\n+        StageExecutionPlan plan = createPlan(createBlockedSplitSource());\n+        NodeTaskMap nodeTaskMap = new NodeTaskMap(finalizerService);\n+        SqlStageExecution stage = createSqlStageExecution(plan, nodeTaskMap);\n+        NodeScheduler nodeScheduler = new NodeScheduler(new UniformNodeSelectorFactory(nodeManager, new NodeSchedulerConfig().setIncludeCoordinator(false), nodeTaskMap));\n+        DynamicFilterService dynamicFilterService = new DynamicFilterService(new FeaturesConfig());\n+        dynamicFilterService.registerQuery(\n+                QUERY_ID,\n+                ImmutableList::of,\n+                ImmutableSet.of(DYNAMIC_FILTER_ID),\n+                ImmutableSet.of(DYNAMIC_FILTER_ID),\n+                ImmutableSet.of(DYNAMIC_FILTER_ID));\n+        StageScheduler scheduler = newSourcePartitionedSchedulerAsStageScheduler(\n+                stage,\n+                Iterables.getOnlyElement(plan.getSplitSources().keySet()),\n+                Iterables.getOnlyElement(plan.getSplitSources().values()),\n+                new DynamicSplitPlacementPolicy(nodeScheduler.createNodeSelector(Optional.of(CONNECTOR_ID)), stage::getAllTasks),\n+                2,\n+                dynamicFilterService,\n+                () -> true);\n+\n+        Expression df1 = expression(\"DF_SYMBOL1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDIwMTA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/scheduler/TestSourcePartitionedScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo1MjozNFrOHRiVhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo1MjozNFrOHRiVhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1MDQwNQ==", "bodyText": "no need for the line wrap here and the next one", "url": "https://github.com/trinodb/trino/pull/4685#discussion_r488150405", "createdAt": "2020-09-14T18:52:34Z", "author": {"login": "dain"}, "path": "presto-main/src/test/java/io/prestosql/execution/scheduler/TestSourcePartitionedScheduler.java", "diffHunk": "@@ -446,6 +462,49 @@ public void testNoNewTaskScheduledWhenChildStageBufferIsOverutilized()\n         assertEquals(scheduleResult.getSplitsScheduled(), 0);\n     }\n \n+    @Test\n+    public void testDynamicFiltersUnblockedOnBlockedBuildSource()\n+    {\n+        StageExecutionPlan plan = createPlan(createBlockedSplitSource());\n+        NodeTaskMap nodeTaskMap = new NodeTaskMap(finalizerService);\n+        SqlStageExecution stage = createSqlStageExecution(plan, nodeTaskMap);\n+        NodeScheduler nodeScheduler = new NodeScheduler(new UniformNodeSelectorFactory(nodeManager, new NodeSchedulerConfig().setIncludeCoordinator(false), nodeTaskMap));\n+        DynamicFilterService dynamicFilterService = new DynamicFilterService(new FeaturesConfig());\n+        dynamicFilterService.registerQuery(\n+                QUERY_ID,\n+                ImmutableList::of,\n+                ImmutableSet.of(DYNAMIC_FILTER_ID),\n+                ImmutableSet.of(DYNAMIC_FILTER_ID),\n+                ImmutableSet.of(DYNAMIC_FILTER_ID));\n+        StageScheduler scheduler = newSourcePartitionedSchedulerAsStageScheduler(\n+                stage,\n+                Iterables.getOnlyElement(plan.getSplitSources().keySet()),\n+                Iterables.getOnlyElement(plan.getSplitSources().values()),\n+                new DynamicSplitPlacementPolicy(nodeScheduler.createNodeSelector(Optional.of(CONNECTOR_ID)), stage::getAllTasks),\n+                2,\n+                dynamicFilterService,\n+                () -> true);\n+\n+        Expression df1 = expression(\"DF_SYMBOL1\");\n+        DynamicFilter dynamicFilter = dynamicFilterService.createDynamicFilter(\n+                QUERY_ID,\n+                ImmutableList.of(\n+                        new DynamicFilters.Descriptor(DYNAMIC_FILTER_ID, df1)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3595, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}