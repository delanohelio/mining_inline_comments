{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NDYzNTgw", "number": 6074, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo1NToxN1rOE9mpgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjozNzowNlrOE9-0HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDMxODA4OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestSecondsJsonDateTimeFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo1NToxN1rOH6YUSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo1NToxN1rOH6YUSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Nzg2NA==", "bodyText": "preexisting, but there is no point to cover all aspects of the tested class within single test method.\nthese testTime, testTimestamp, etc above should be their own test methods.\nthen your new test cases would go to an isolated testTimestampWithTimeZone method", "url": "https://github.com/trinodb/trino/pull/6074#discussion_r530977864", "createdAt": "2020-11-26T11:55:17Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestSecondsJsonDateTimeFormatter.java", "diffHunk": "@@ -57,5 +78,12 @@ public void testSecondsDateTimeFunctions()\n         testTimestamp(sqlTimestampOf(3, 2020, 8, 18, 12, 38, 29, 0), LocalDateTime.of(2020, 8, 18, 12, 38, 29, 0).toEpochSecond(ZoneOffset.UTC));\n         testTimestamp(sqlTimestampOf(3, 1970, 1, 1, 0, 0, 0, 0), 0);\n         testTimestamp(sqlTimestampOf(3, 1800, 8, 18, 12, 38, 29, 0), LocalDateTime.of(1800, 8, 18, 12, 38, 29, 0).toEpochSecond(ZoneOffset.UTC));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDMyMDQ3OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestSecondsJsonDateTimeFormatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo1NTo1OVrOH6YVyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo1NTo1OVrOH6YVyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3ODI1MA==", "bodyText": "TZ -> TimeZone\nactualSeconds -> expected", "url": "https://github.com/trinodb/trino/pull/6074#discussion_r530978250", "createdAt": "2020-11-26T11:55:59Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestSecondsJsonDateTimeFormatter.java", "diffHunk": "@@ -47,6 +56,18 @@ private void testTimestamp(SqlTimestamp value, long actualSeconds)\n         assertEquals(Long.parseLong(formattedStr), actualSeconds);\n     }\n \n+    private void testTimestampWithTZ(SqlTimestampWithTimeZone value, long actualSeconds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDMzNjEyOnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestSecondsJsonDateTimeFormatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjowMDoxOVrOH6YfMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjowMDoxOVrOH6YfMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4MDY1Ng==", "bodyText": "that's very repetitive, but maybe that's fine... let's format this on lines:\n        testTimestampWithTZ(\n                sqlTimestampWithTimeZoneOf(3, 2020, 8, 18, 12, 38, 29, 123000000, UTC_KEY),\n                ZonedDateTime.of(2020, 8, 18, 12, 38, 29, 123000000, UTC).toEpochSecond());\n\nand remove getEpochSecondsFromDateTimeWithZone method", "url": "https://github.com/trinodb/trino/pull/6074#discussion_r530980656", "createdAt": "2020-11-26T12:00:19Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestSecondsJsonDateTimeFormatter.java", "diffHunk": "@@ -57,5 +78,12 @@ public void testSecondsDateTimeFunctions()\n         testTimestamp(sqlTimestampOf(3, 2020, 8, 18, 12, 38, 29, 0), LocalDateTime.of(2020, 8, 18, 12, 38, 29, 0).toEpochSecond(ZoneOffset.UTC));\n         testTimestamp(sqlTimestampOf(3, 1970, 1, 1, 0, 0, 0, 0), 0);\n         testTimestamp(sqlTimestampOf(3, 1800, 8, 18, 12, 38, 29, 0), LocalDateTime.of(1800, 8, 18, 12, 38, 29, 0).toEpochSecond(ZoneOffset.UTC));\n+\n+        testTimestampWithTZ(sqlTimestampWithTimeZoneOf(3, 2020, 8, 18, 12, 38, 29, 123000000, UTC_KEY), getEpochSecondsFromDateTimeWithZone(2020, 8, 18, 12, 38, 29, 123000000, UTC_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDMzNzE0OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestMillisecondsJsonDateTimeFormatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjowMDozNVrOH6Yf4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjowMDozNVrOH6Yf4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4MDgzMg==", "bodyText": "formattedStr -> formatted", "url": "https://github.com/trinodb/trino/pull/6074#discussion_r530980832", "createdAt": "2020-11-26T12:00:35Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestMillisecondsJsonDateTimeFormatter.java", "diffHunk": "@@ -49,6 +56,12 @@ private void testTimestamp(SqlTimestamp value, long actualMillis)\n         assertEquals(Long.parseLong(formattedStr), actualMillis);\n     }\n \n+    private void testTimestampWithTZ(SqlTimestampWithTimeZone value, long actualMillis)\n+    {\n+        String formattedStr = getFormatter().formatTimestampWithZone(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDMzNzYzOnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestMillisecondsJsonDateTimeFormatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjowMDo0M1rOH6YgJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjowMDo0M1rOH6YgJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4MDkwMg==", "bodyText": "actualMillis -> expected", "url": "https://github.com/trinodb/trino/pull/6074#discussion_r530980902", "createdAt": "2020-11-26T12:00:43Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestMillisecondsJsonDateTimeFormatter.java", "diffHunk": "@@ -49,6 +56,12 @@ private void testTimestamp(SqlTimestamp value, long actualMillis)\n         assertEquals(Long.parseLong(formattedStr), actualMillis);\n     }\n \n+    private void testTimestampWithTZ(SqlTimestampWithTimeZone value, long actualMillis)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDI3NzQxOnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestSecondsJsonDateTimeFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjozNzowNlrOH688sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzozNzoxM1rOH6-siQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3ODAzNQ==", "bodyText": "can you please extract test splitting as a prep commit?\n(i am aware you would need to squash&rebase the existing work piece for that)", "url": "https://github.com/trinodb/trino/pull/6074#discussion_r531578035", "createdAt": "2020-11-27T12:37:06Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestSecondsJsonDateTimeFormatter.java", "diffHunk": "@@ -35,27 +38,57 @@ private JsonDateTimeFormatter getFormatter()\n         return SECONDS_SINCE_EPOCH.getFormatter(Optional.empty());\n     }\n \n-    private void testTime(SqlTime value, int precision, long actualSeconds)\n+    @Test(dataProvider = \"testTimeProvider\")\n+    public void testTime(LocalTime time)\n     {\n-        String formattedStr = getFormatter().formatTime(value, precision);\n-        assertEquals(Long.parseLong(formattedStr), actualSeconds);\n+        String formatted = getFormatter().formatTime(sqlTimeOf(3, time), 3);\n+        assertEquals(Long.parseLong(formatted), time.toSecondOfDay());\n     }\n \n-    private void testTimestamp(SqlTimestamp value, long actualSeconds)\n+    @DataProvider\n+    public Object[][] testTimeProvider()\n     {\n-        String formattedStr = getFormatter().formatTimestamp(value);\n-        assertEquals(Long.parseLong(formattedStr), actualSeconds);\n+        return new Object[][] {\n+                {LocalTime.of(15, 36, 25, 0)},\n+                {LocalTime.of(0, 0, 0, 0)},\n+                {LocalTime.of(23, 59, 59, 0)},\n+        };\n     }\n \n-    @Test\n-    public void testSecondsDateTimeFunctions()\n+    @Test(dataProvider = \"testTimestampProvider\")\n+    public void testTimestamp(LocalDateTime dateTime)\n     {\n-        testTime(sqlTimeOf(3, 15, 36, 25, 0), 3, LocalTime.of(15, 36, 25, 0).toSecondOfDay());\n-        testTime(sqlTimeOf(3, 0, 0, 0, 0), 3, 0);\n-        testTime(sqlTimeOf(3, 23, 59, 59, 0), 3, LocalTime.of(23, 59, 59, 0).toSecondOfDay());\n+        String formatted = getFormatter().formatTimestamp(sqlTimestampOf(3, dateTime));\n+        assertEquals(Long.parseLong(formatted), dateTime.toEpochSecond(UTC));\n+    }\n+\n+    @DataProvider\n+    public Object[][] testTimestampProvider()\n+    {\n+        return new Object[][] {\n+                {LocalDateTime.of(2020, 8, 18, 12, 38, 29, 0)},\n+                {LocalDateTime.of(1970, 1, 1, 0, 0, 0, 0)},\n+                {LocalDateTime.of(1800, 8, 18, 12, 38, 29, 0)},\n+        };\n+    }\n \n-        testTimestamp(sqlTimestampOf(3, 2020, 8, 18, 12, 38, 29, 0), LocalDateTime.of(2020, 8, 18, 12, 38, 29, 0).toEpochSecond(ZoneOffset.UTC));\n-        testTimestamp(sqlTimestampOf(3, 1970, 1, 1, 0, 0, 0, 0), 0);\n-        testTimestamp(sqlTimestampOf(3, 1800, 8, 18, 12, 38, 29, 0), LocalDateTime.of(1800, 8, 18, 12, 38, 29, 0).toEpochSecond(ZoneOffset.UTC));\n+    @Test(dataProvider = \"testTimestampWithTimeZoneProvider\")\n+    public void testTimestampWithTimeZone(ZonedDateTime zonedDateTime)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNjY2NQ==", "bodyText": "Done. I'll do a follow up to clean-up some other test classes in the same module.", "url": "https://github.com/trinodb/trino/pull/6074#discussion_r531606665", "createdAt": "2020-11-27T13:37:13Z", "author": {"login": "hashhar"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestSecondsJsonDateTimeFormatter.java", "diffHunk": "@@ -35,27 +38,57 @@ private JsonDateTimeFormatter getFormatter()\n         return SECONDS_SINCE_EPOCH.getFormatter(Optional.empty());\n     }\n \n-    private void testTime(SqlTime value, int precision, long actualSeconds)\n+    @Test(dataProvider = \"testTimeProvider\")\n+    public void testTime(LocalTime time)\n     {\n-        String formattedStr = getFormatter().formatTime(value, precision);\n-        assertEquals(Long.parseLong(formattedStr), actualSeconds);\n+        String formatted = getFormatter().formatTime(sqlTimeOf(3, time), 3);\n+        assertEquals(Long.parseLong(formatted), time.toSecondOfDay());\n     }\n \n-    private void testTimestamp(SqlTimestamp value, long actualSeconds)\n+    @DataProvider\n+    public Object[][] testTimeProvider()\n     {\n-        String formattedStr = getFormatter().formatTimestamp(value);\n-        assertEquals(Long.parseLong(formattedStr), actualSeconds);\n+        return new Object[][] {\n+                {LocalTime.of(15, 36, 25, 0)},\n+                {LocalTime.of(0, 0, 0, 0)},\n+                {LocalTime.of(23, 59, 59, 0)},\n+        };\n     }\n \n-    @Test\n-    public void testSecondsDateTimeFunctions()\n+    @Test(dataProvider = \"testTimestampProvider\")\n+    public void testTimestamp(LocalDateTime dateTime)\n     {\n-        testTime(sqlTimeOf(3, 15, 36, 25, 0), 3, LocalTime.of(15, 36, 25, 0).toSecondOfDay());\n-        testTime(sqlTimeOf(3, 0, 0, 0, 0), 3, 0);\n-        testTime(sqlTimeOf(3, 23, 59, 59, 0), 3, LocalTime.of(23, 59, 59, 0).toSecondOfDay());\n+        String formatted = getFormatter().formatTimestamp(sqlTimestampOf(3, dateTime));\n+        assertEquals(Long.parseLong(formatted), dateTime.toEpochSecond(UTC));\n+    }\n+\n+    @DataProvider\n+    public Object[][] testTimestampProvider()\n+    {\n+        return new Object[][] {\n+                {LocalDateTime.of(2020, 8, 18, 12, 38, 29, 0)},\n+                {LocalDateTime.of(1970, 1, 1, 0, 0, 0, 0)},\n+                {LocalDateTime.of(1800, 8, 18, 12, 38, 29, 0)},\n+        };\n+    }\n \n-        testTimestamp(sqlTimestampOf(3, 2020, 8, 18, 12, 38, 29, 0), LocalDateTime.of(2020, 8, 18, 12, 38, 29, 0).toEpochSecond(ZoneOffset.UTC));\n-        testTimestamp(sqlTimestampOf(3, 1970, 1, 1, 0, 0, 0, 0), 0);\n-        testTimestamp(sqlTimestampOf(3, 1800, 8, 18, 12, 38, 29, 0), LocalDateTime.of(1800, 8, 18, 12, 38, 29, 0).toEpochSecond(ZoneOffset.UTC));\n+    @Test(dataProvider = \"testTimestampWithTimeZoneProvider\")\n+    public void testTimestampWithTimeZone(ZonedDateTime zonedDateTime)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3ODAzNQ=="}, "originalCommit": null, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4646, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}