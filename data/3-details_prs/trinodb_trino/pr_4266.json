{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjcyMzg5", "number": 4266, "title": "Handle NaN when extracting predicate", "bodyText": "Fixes #4119\nFixes #4272", "createdAt": "2020-06-29T22:03:02Z", "url": "https://github.com/trinodb/trino/pull/4266", "merged": true, "mergeCommit": {"oid": "d068a3f5e656118dcb4ca0d26877b0359c6b5a2c"}, "closed": true, "closedAt": "2020-07-01T07:34:59Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwJGL8gBqjM0OTQ4NjYwMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwX2blgBqjM0OTg1MTQ3NjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTY1NDc2", "url": "https://github.com/trinodb/trino/pull/4266#pullrequestreview-439565476", "createdAt": "2020-06-29T23:19:30Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoxOTozMVrOGql0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoxOTozMVrOGql0VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMjk4MQ==", "bodyText": "We should probably stop using == checks against types to avoid any future backward compatibility issues if we decide to create instances on the fly, and for consistency across all type checks. .equals() is more robust and can be implemented internally to do the == check as necessary.", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447312981", "createdAt": "2020-06-29T23:19:31Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeUtils.java", "diffHunk": "@@ -89,6 +93,17 @@ else if (value instanceof String) {\n         }\n     }\n \n+    public static boolean isFloatingPointNaN(Type type, Object value)\n+    {\n+        if (type == DOUBLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzIzNTEz", "url": "https://github.com/trinodb/trino/pull/4266#pullrequestreview-439723513", "createdAt": "2020-06-30T07:02:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzowMjowN1rOGquenw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzowMjowN1rOGquenw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDg3OQ==", "bodyText": "different commit?", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447454879", "createdAt": "2020-06-30T07:02:07Z", "author": {"login": "losipiuk"}, "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/SortedRangeSet.java", "diffHunk": "@@ -181,6 +182,9 @@ public boolean isDiscreteSet()\n     @Override\n     public boolean containsValue(Object value)\n     {\n+        if (isFloatingPointNaN(type, value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODE3ODk3", "url": "https://github.com/trinodb/trino/pull/4266#pullrequestreview-439817897", "createdAt": "2020-06-30T09:04:57Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTQ4ODMy", "url": "https://github.com/trinodb/trino/pull/4266#pullrequestreview-439948832", "createdAt": "2020-06-30T12:08:57Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowODo1N1rOGq5TtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowODo1N1rOGq5TtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMjMwOQ==", "bodyText": "@sopel39 suggests we can skip the NaN values instead (like we skip NULLs).", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447632309", "createdAt": "2020-06-30T12:08:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/DynamicFilterSourceOperator.java", "diffHunk": "@@ -249,15 +250,20 @@ public void finish()\n \n     private Domain convertToDomain(Type type, Block block)\n     {\n+        // Inner and right join doesn't match rows with null key column values.\n+        boolean nullAllowed = false;\n+\n         ImmutableList.Builder<Object> values = ImmutableList.builder();\n         for (int position = 0; position < block.getPositionCount(); ++position) {\n             Object value = TypeUtils.readNativeValue(type, block, position);\n             if (value != null) {\n+                if (isFloatingPointNaN(type, value)) {\n+                    return Domain.create(ValueSet.all(type), nullAllowed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "093c8b954d61db61b7ce226bfb35633177a401df", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/093c8b954d61db61b7ce226bfb35633177a401df", "committedDate": "2020-06-30T12:14:35Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96034b79ee4412de9377e0ad642c303d01c53d4d", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/96034b79ee4412de9377e0ad642c303d01c53d4d", "committedDate": "2020-06-30T12:14:36Z", "message": "Extract isFloatingPointNaN method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "189cf6a2011484129dad810e60ded52c9e6718ba", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/189cf6a2011484129dad810e60ded52c9e6718ba", "committedDate": "2020-06-30T12:14:37Z", "message": "Handle NaN when extracting VALUES predicate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "199daa745679f23cbcbbf844d55b83b933b7bd6d", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/199daa745679f23cbcbbf844d55b83b933b7bd6d", "committedDate": "2020-06-30T12:14:38Z", "message": "Add missing assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8f44b9d9fa4acccb7d05c8caeac72ab30c2a054", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/a8f44b9d9fa4acccb7d05c8caeac72ab30c2a054", "committedDate": "2020-06-30T12:14:39Z", "message": "Fix dynamic filter failure in presence of NaN"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTgxNTkz", "url": "https://github.com/trinodb/trino/pull/4266#pullrequestreview-439981593", "createdAt": "2020-06-30T12:52:50Z", "commit": {"oid": "189cf6a2011484129dad810e60ded52c9e6718ba"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo1Mjo1MFrOGq63XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo1NToyOVrOGq696g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NzgyMQ==", "bodyText": "Do we need to handle empty as special case? Should Domain.multipleValues handle that\nin order to reduce iffs?\nFor example:\nDomain.create(ValueSet.copyOf(type, ImmutableList.of()), false).isNone() == true\n\nYet multipleValues is implemented as\n    public static Domain multipleValues(Type type, List<?> values)\n    {\n        if (values.isEmpty()) {\n            throw new IllegalArgumentException(\"values cannot be empty\");\n        }\n        if (values.size() == 1) {\n            return singleValue(type, values.get(0));\n        }\n        return new Domain(ValueSet.of(type, values.get(0), values.subList(1, values.size()).toArray()), false);\n    }", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447657821", "createdAt": "2020-06-30T12:52:50Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "diffHunk": "@@ -364,10 +369,15 @@ public Expression visitValues(ValuesNode node, Void context)\n \n                 List<Object> values = builder.build();\n \n-                Domain domain = Domain.none(type);\n-\n-                if (!values.isEmpty()) {\n-                    domain = domain.union(Domain.multipleValues(type, values));\n+                Domain domain;\n+                if (values.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189cf6a2011484129dad810e60ded52c9e6718ba"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1OTQ5OA==", "bodyText": "Consider adding comment. It might not be obvious for reader why NaN makes TupleDomain accept all non-null values.", "url": "https://github.com/trinodb/trino/pull/4266#discussion_r447659498", "createdAt": "2020-06-30T12:55:29Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "diffHunk": "@@ -364,10 +369,15 @@ public Expression visitValues(ValuesNode node, Void context)\n \n                 List<Object> values = builder.build();\n \n-                Domain domain = Domain.none(type);\n-\n-                if (!values.isEmpty()) {\n-                    domain = domain.union(Domain.multipleValues(type, values));\n+                Domain domain;\n+                if (values.isEmpty()) {\n+                    domain = Domain.none(type);\n+                }\n+                else if (hasNaN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189cf6a2011484129dad810e60ded52c9e6718ba"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cdbb7cfd85bf50e3a79b71251ae145451cfe81d", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/5cdbb7cfd85bf50e3a79b71251ae145451cfe81d", "committedDate": "2020-06-30T16:01:35Z", "message": "Fix NaN handling in Hive partition column"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "5cdbb7cfd85bf50e3a79b71251ae145451cfe81d", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/5cdbb7cfd85bf50e3a79b71251ae145451cfe81d", "committedDate": "2020-06-30T16:01:35Z", "message": "Fix NaN handling in Hive partition column"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 262, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}