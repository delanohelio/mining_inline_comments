{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Mjc2MTAy", "number": 2659, "title": "Fix multi-join dynamic filtering", "bodyText": "It seems that dynamic filters may get \"stuck\" in join's node filter (when they can't be pushed down to scan nodes), e.g. see \"lower\" join node in the following plan:\n> EXPLAIN SELECT k1 FROM t0, t1, t2 WHERE (k0 = k1) AND (k0 = k2) AND (v0 + v1 = v2)\n\nOutput[k1]\n\u2502   Layout: [k0:integer]\n\u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n\u2502   k1 := k0\n\u2514\u2500 RemoteExchange[GATHER]\n   \u2502   Layout: [k0:integer]\n   \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n   \u2514\u2500 InnerJoin[(\"k0\" = \"k2\") AND (\"expr_3\" = \"v2\")][$hashvalue_7, $hashvalue_8]\n      \u2502   Layout: [k0:integer]\n      \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n      \u2502   Distribution: REPLICATED\n      \u2502   dynamicFilterAssignments = {k2 -> 421}\n      \u251c\u2500 Project[]\n      \u2502  \u2502   Layout: [expr_3:real, k0:integer, $hashvalue_7:bigint]\n      \u2502  \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n      \u2502  \u2502   $hashvalue_7 := \"combine_hash\"(\"combine_hash\"(bigint '0', COALESCE(\"$operator$hash_code\"(\"k0\"), 0)), COALESCE(\"$operator$hash_code\"(\"expr_3\"), 0))\n      \u2502  \u2514\u2500 Project[]\n      \u2502     \u2502   Layout: [expr_3:real, k0:integer]\n      \u2502     \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n      \u2502     \u2502   expr_3 := (\"v0\" + \"v1\")\n      \u2502     \u2514\u2500 InnerJoin[(\"k0\" = \"k1\") AND ((\"$internal$dynamic_filter_function\"((\"v0\" + \"v1\"), 'EQUAL', '123') AND \"$internal$dynamic_filter_function\"((\"v0\" + \"v1\"), 'EQUAL', '422')) AND \"$internal$dynamic_filter_function\"((\"v0\" + \"v1\"), 'EQUAL', '254'))][$hashvalue, $hashvalue_4]\n      \u2502        \u2502   Layout: [k0:integer, v0:real, v1:real]\n      \u2502        \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n      \u2502        \u2502   Distribution: REPLICATED\n      \u2502        \u2502   dynamicFilterAssignments = {k1 -> 424}\n      \u2502        \u251c\u2500 ScanFilterProject[table = memory:0, filterPredicate = (\"@$internal$dynamic_filter_function|scalar|boolean|integer|varchar|varchar@$internal$dynamic_filter_function<t>(t,varchar,varchar):boolean\"(\"k0\", 'EQUAL', '421') AND \"@$internal$dynamic_filter_function|scalar|boolean|integer|varchar|varchar@$internal$dynamic_filter_function<t>(t,varchar,varchar):boolean\"(\"k0\", 'EQUAL', '424'))]\n      \u2502        \u2502      Layout: [k0:integer, v0:real, $hashvalue:bigint]\n      \u2502        \u2502      Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: 0B}/{rows: ? (?), cpu: ?, memory: 0B, network: 0B}/{rows: ? (?), cpu: ?, memory: 0B, network: 0B}\n      \u2502        \u2502      $hashvalue := \"combine_hash\"(bigint '0', COALESCE(\"$operator$hash_code\"(\"k0\"), 0))\n      \u2502        \u2502      k0 := 0\n      \u2502        \u2502      v0 := 1\n      \u2502        \u2514\u2500 LocalExchange[HASH][$hashvalue_4] (\"k1\")\n      \u2502           \u2502   Layout: [k1:integer, v1:real, $hashvalue_4:bigint]\n      \u2502           \u2502   Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: ?}\n      \u2502           \u2514\u2500 RemoteExchange[REPLICATE]\n      \u2502              \u2502   Layout: [k1:integer, v1:real, $hashvalue_5:bigint]\n      \u2502              \u2502   Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: ?}\n      \u2502              \u2514\u2500 ScanFilterProject[table = memory:1, filterPredicate = \"@$internal$dynamic_filter_function|scalar|boolean|integer|varchar|varchar@$internal$dynamic_filter_function<t>(t,varchar,varchar):boolean\"(\"k1\", 'EQUAL', '421')]\n      \u2502                     Layout: [k1:integer, v1:real, $hashvalue_6:bigint]\n      \u2502                     Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: 0B}/{rows: ? (?), cpu: ?, memory: 0B, network: 0B}/{rows: ? (?), cpu: ?, memory: 0B, network: 0B}\n      \u2502                     $hashvalue_6 := \"combine_hash\"(bigint '0', COALESCE(\"$operator$hash_code\"(\"k1\"), 0))\n      \u2502                     k1 := 0\n      \u2502                     v1 := 1\n      \u2514\u2500 LocalExchange[HASH][$hashvalue_8] (\"k2\", \"v2\")\n         \u2502   Layout: [k2:integer, v2:real, $hashvalue_8:bigint]\n         \u2502   Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: ?}\n         \u2514\u2500 RemoteExchange[REPLICATE]\n            \u2502   Layout: [k2:integer, v2:real, $hashvalue_9:bigint]\n            \u2502   Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: ?}\n            \u2514\u2500 ScanProject[table = memory:2]\n                   Layout: [k2:integer, v2:real, $hashvalue_10:bigint]\n                   Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: 0B}/{rows: ? (?), cpu: ?, memory: 0B, network: 0B}\n                   $hashvalue_10 := \"combine_hash\"(\"combine_hash\"(bigint '0', COALESCE(\"$operator$hash_code\"(\"k2\"), 0)), COALESCE(\"$operator$hash_code\"(\"v2\"), 0))\n                   k2 := 0\n                   v2 := 1\n\nIn this case, Presto fails during the execution - since applying dynamic filters is implemented only for ScanFilterAndProject operators (and not LookupJoin operators):\n[ERROR] Tests run: 17, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 47.153 s <<< FAILURE! - in io.prestosql.plugin.memory.TestMemorySmoke\n[ERROR] testJoinDynamicFilteringMultiJoin(io.prestosql.plugin.memory.TestMemorySmoke)  Time elapsed: 1.321 s  <<< FAILURE!\njava.lang.AssertionError: Execution of 'actual' query failed: SELECT k0, k1, k2 FROM t0, t1, t2 WHERE (k0 = k1) AND (k0 = k2) AND (v0 + v1 = v2)\n\tat org.testng.Assert.fail(Assert.java:83)\n\tat io.prestosql.testing.QueryAssertions.assertQuery(QueryAssertions.java:147)\n\tat io.prestosql.testing.QueryAssertions.assertQuery(QueryAssertions.java:103)\n\tat io.prestosql.testing.AbstractTestQueryFramework.assertQuery(AbstractTestQueryFramework.java:135)\n\tat io.prestosql.plugin.memory.TestMemorySmoke.testJoinDynamicFilteringMultiJoin(TestMemorySmoke.java:156)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:645)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\nCaused by: java.lang.RuntimeException: java.lang.UnsupportedOperationException\n\tat io.prestosql.testing.AbstractTestingPrestoClient.execute(AbstractTestingPrestoClient.java:114)\n\tat io.prestosql.testing.DistributedQueryRunner.execute(DistributedQueryRunner.java:400)\n\tat io.prestosql.testing.QueryAssertions.assertQuery(QueryAssertions.java:144)\n\t... 16 more\nCaused by: java.lang.UnsupportedOperationException\n\tat io.prestosql.sql.DynamicFilters$Function.dynamicFilter(DynamicFilters.java:206)\n\tat io.prestosql.$gen.JoinFilterFunction_20200128_223248_88.filter(Unknown Source)\n\tat io.prestosql.operator.StandardJoinFilterFunction.filter(StandardJoinFilterFunction.java:49)\n\tat io.prestosql.operator.JoinHash.isJoinPositionEligible(JoinHash.java:118)\n\tat io.prestosql.operator.PartitionedLookupSource.isJoinPositionEligible(PartitionedLookupSource.java:169)\n\tat io.prestosql.operator.LookupJoinOperator$JoinProcessor.joinCurrentPosition(LookupJoinOperator.java:616)\n\tat io.prestosql.operator.LookupJoinOperator$JoinProcessor.processProbe(LookupJoinOperator.java:547)\n\tat io.prestosql.operator.LookupJoinOperator$JoinProcessor.lambda$processProbe$3(LookupJoinOperator.java:480)\n\tat io.prestosql.operator.PartitionedLookupSourceFactory$SpillAwareLookupSourceProvider.withLease(PartitionedLookupSourceFactory.java:437)\n\tat io.prestosql.operator.LookupJoinOperator$JoinProcessor.processProbe(LookupJoinOperator.java:477)\n\tat io.prestosql.operator.LookupJoinOperator$JoinProcessor.getOutput(LookupJoinOperator.java:392)\n\tat io.prestosql.operator.LookupJoinOperator$JoinProcessor.process(LookupJoinOperator.java:688)\n\tat io.prestosql.operator.LookupJoinOperator$JoinProcessor.process(LookupJoinOperator.java:139)\n\tat io.prestosql.operator.WorkProcessorUtils$3.process(WorkProcessorUtils.java:319)\n\tat io.prestosql.operator.WorkProcessorUtils$ProcessWorkProcessor.process(WorkProcessorUtils.java:372)\n\tat io.prestosql.operator.WorkProcessorOperatorAdapter.getOutput(WorkProcessorOperatorAdapter.java:90)\n\tat io.prestosql.operator.Driver.processInternal(Driver.java:379)\n\tat io.prestosql.operator.Driver.lambda$processFor$8(Driver.java:283)\n\tat io.prestosql.operator.Driver.tryWithLock(Driver.java:675)\n\tat io.prestosql.operator.Driver.processFor(Driver.java:276)\n\tat io.prestosql.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:1075)\n\tat io.prestosql.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:163)\n\tat io.prestosql.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:484)\n\tat io.prestosql.$gen.Presto_null__testversion____20200128_223220_4.run(Unknown Source)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\nIIUC, the fix may be to ignore dynamic filters that are left at the join nodes - since they should not affect correctness.", "createdAt": "2020-01-28T22:40:25Z", "url": "https://github.com/trinodb/trino/pull/2659", "merged": true, "mergeCommit": {"oid": "f1113ef0e1715ab75cd0b1c15ea716e883dfed05"}, "closed": true, "closedAt": "2020-01-31T10:41:40Z", "author": {"login": "rzeyde-varada"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb--pL4AFqTM0OTg2MDU0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_qaHpABqjI5OTYxNDM3NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODYwNTQ5", "url": "https://github.com/trinodb/trino/pull/2659#pullrequestreview-349860549", "createdAt": "2020-01-29T04:53:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNDo1MzozM1rOFi8jhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNDo1NzowNVrOFi8mPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4ODAzOA==", "bodyText": "I think we should extend DynamicFiltersChecker to verify that there are no DFs at Join operator and add a test to TestDynamicFiltersChecker", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372188038", "createdAt": "2020-01-29T04:53:33Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -127,7 +127,7 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n                         right,\n                         node.getCriteria(),\n                         node.getOutputSymbols(),\n-                        node.getFilter(),\n+                        node.getFilter().map(this::removeAllDynamicFilters),  // no DF support at Join operators.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4ODczMw==", "bodyText": "Since it's a planner bug, it will be better to add the test in TestDynamicFilter instead and verify that we get expected plan there. Once DynamicFiltersChecker is extended to cover this case, that will also ensure that we don't get beyond planning stage if wrong plan is generated.", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372188733", "createdAt": "2020-01-29T04:57:05Z", "author": {"login": "raunaqmorarka"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -136,6 +137,25 @@ public void testJoinDynamicFilteringSingleValue()\n         assertEquals(rowsRead, ImmutableSet.of(6L, buildSideRowsCount));\n     }\n \n+    @Test\n+    public void testJoinDynamicFilteringMultiJoin()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDI2OTQ1", "url": "https://github.com/trinodb/trino/pull/2659#pullrequestreview-350026945", "createdAt": "2020-01-29T11:10:07Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzI3NDA1", "url": "https://github.com/trinodb/trino/pull/2659#pullrequestreview-350727405", "createdAt": "2020-01-30T10:41:00Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0MTowMFrOFjmf0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0MTowMFrOFjmf0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTIxOQ==", "bodyText": "Could you inline PlanMatchPattern here ? It's easier to see the plan shape when there is only one pattern to look at, similar to the other test cases", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372875219", "createdAt": "2020-01-30T10:41:00Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -259,6 +261,33 @@ public void testNestedDynamicFiltersRemoval()\n                                                         tableScan(\"orders\", ImmutableMap.of(\"ORDERS_CK27\", \"clerk\"))))), metadata)));\n     }\n \n+    @Test\n+    public void testNonPushedDownJoinFilterRemoval()\n+    {\n+        PlanMatchPattern t0 = project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K0\", \"partkey\", \"V0\", \"size\"))));\n+        PlanMatchPattern t1 = exchange(project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K1\", \"partkey\", \"V1\", \"size\")))));\n+        PlanMatchPattern t2 = exchange(project(\n+                tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\"))));\n+\n+        PlanMatchPattern join1 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K1\")),\n+                t0, t1);\n+        PlanMatchPattern project1 = project(project(ImmutableMap.of(\"S\", expression(\"V0 + V1\")), join1));\n+        PlanMatchPattern join2 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K2\"), equiJoinClause(\"S\", \"V2\")),\n+                project1, t2);\n+        PlanMatchPattern matcher = anyTree(project(join2));\n+\n+        assertPlan(\"SELECT 1 FROM part t0, part t1, part t2 \" +\n+                        \"WHERE t0.partkey = t1.partkey AND t0.partkey = t2.partkey \" +\n+                        \"AND t0.size + t1.size = t2.size\",\n+                noJoinReordering(), matcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzMxODc1", "url": "https://github.com/trinodb/trino/pull/2659#pullrequestreview-350731875", "createdAt": "2020-01-30T10:48:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0ODoxNFrOFjmtVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo1MTowMVrOFjmymw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3ODY3Ng==", "bodyText": "I would use:\n.filter(expression -> !expression.equals(TRUE_LITERAL))\n\ninstead.", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372878676", "createdAt": "2020-01-30T10:48:14Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -120,14 +121,17 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n             PlanNode left = leftResult.getNode();\n             PlanNode right = rightResult.getNode();\n             if (!left.equals(node.getLeft()) || !right.equals(node.getRight()) || !dynamicFilters.equals(node.getDynamicFilters())) {\n+                Optional<Expression> filter = node\n+                        .getFilter().map(this::removeAllDynamicFilters)  // no DF support at Join operators.\n+                        .flatMap(expression -> expression.equals(TRUE_LITERAL) ? Optional.empty() : Optional.of(expression));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4MDAyNw==", "bodyText": "put this in new line", "url": "https://github.com/trinodb/trino/pull/2659#discussion_r372880027", "createdAt": "2020-01-30T10:51:01Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -259,6 +261,33 @@ public void testNestedDynamicFiltersRemoval()\n                                                         tableScan(\"orders\", ImmutableMap.of(\"ORDERS_CK27\", \"clerk\"))))), metadata)));\n     }\n \n+    @Test\n+    public void testNonPushedDownJoinFilterRemoval()\n+    {\n+        PlanMatchPattern t0 = project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K0\", \"partkey\", \"V0\", \"size\"))));\n+        PlanMatchPattern t1 = exchange(project(node(FilterNode.class,\n+                tableScan(\"part\", ImmutableMap.of(\"K1\", \"partkey\", \"V1\", \"size\")))));\n+        PlanMatchPattern t2 = exchange(project(\n+                tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\"))));\n+\n+        PlanMatchPattern join1 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K1\")),\n+                t0, t1);\n+        PlanMatchPattern project1 = project(project(ImmutableMap.of(\"S\", expression(\"V0 + V1\")), join1));\n+        PlanMatchPattern join2 = join(\n+                INNER,\n+                ImmutableList.of(equiJoinClause(\"K0\", \"K2\"), equiJoinClause(\"S\", \"V2\")),\n+                project1, t2);\n+        PlanMatchPattern matcher = anyTree(project(join2));\n+\n+        assertPlan(\"SELECT 1 FROM part t0, part t1, part t2 \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "601b0693e8e3212c76023c6970a8dc6def06721c", "author": {"user": {"login": "rzeyde-varada", "name": "Roman Z"}}, "url": "https://github.com/trinodb/trino/commit/601b0693e8e3212c76023c6970a8dc6def06721c", "committedDate": "2020-01-31T07:54:52Z", "message": "Fix multi-join dynamic filtering"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "601b0693e8e3212c76023c6970a8dc6def06721c", "author": {"user": {"login": "rzeyde-varada", "name": "Roman Z"}}, "url": "https://github.com/trinodb/trino/commit/601b0693e8e3212c76023c6970a8dc6def06721c", "committedDate": "2020-01-31T07:54:52Z", "message": "Fix multi-join dynamic filtering"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1717, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}