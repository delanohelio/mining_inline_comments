{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDg2MTAx", "number": 3676, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozMjo1NlrOENQgGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0NjozOFrOENQwzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzM3MzA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozMjo1NlrOGv1kKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzowMzo0NVrOGwH3Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMzg2Nw==", "bodyText": "should you use: io.prestosql.sql.analyzer.Analysis#getTypeOnlyCoercions here?", "url": "https://github.com/trinodb/trino/pull/3676#discussion_r452813867", "createdAt": "2020-07-10T12:32:56Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -797,6 +797,38 @@ public static Expression coerceIfNecessary(Analysis analysis, Expression origina\n                 analysis.isTypeOnlyCoercion(original));\n     }\n \n+    public static NodeAndMappings coerce(PlanNode node, List<Symbol> fields, List<Type> types, SymbolAllocator symbolAllocator, PlanNodeIdAllocator idAllocator)\n+    {\n+        Assignments.Builder assignments = Assignments.builder();\n+\n+        ImmutableList.Builder<Symbol> mappings = ImmutableList.builder();\n+        for (int i = 0; i < types.size(); i++) {\n+            Symbol input = fields.get(i);\n+            Type type = types.get(i);\n+\n+            if (!symbolAllocator.getTypes().get(input).equals(type)) {\n+                Symbol coerced = symbolAllocator.newSymbol(input.getName(), type);\n+                assignments.put(coerced, new Cast(input.toSymbolReference(), toSqlType(type)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMzY2Nw==", "bodyText": "Type-only coercions don't do anything anymore. They are only used to short-circuit the invocation of the cast in the generated bytecode, but since type-only coercions are just identity methods, that doesn't provide any value -- the JIT will inline the method and remove the call.", "url": "https://github.com/trinodb/trino/pull/3676#discussion_r453113667", "createdAt": "2020-07-10T23:03:45Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -797,6 +797,38 @@ public static Expression coerceIfNecessary(Analysis analysis, Expression origina\n                 analysis.isTypeOnlyCoercion(original));\n     }\n \n+    public static NodeAndMappings coerce(PlanNode node, List<Symbol> fields, List<Type> types, SymbolAllocator symbolAllocator, PlanNodeIdAllocator idAllocator)\n+    {\n+        Assignments.Builder assignments = Assignments.builder();\n+\n+        ImmutableList.Builder<Symbol> mappings = ImmutableList.builder();\n+        for (int i = 0; i < types.size(); i++) {\n+            Symbol input = fields.get(i);\n+            Type type = types.get(i);\n+\n+            if (!symbolAllocator.getTypes().get(input).equals(type)) {\n+                Symbol coerced = symbolAllocator.newSymbol(input.getName(), type);\n+                assignments.put(coerced, new Cast(input.toSymbolReference(), toSqlType(type)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMzg2Nw=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzM4MTA3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozNTozMlrOGv1pGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozNTozMlrOGv1pGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNTEzMQ==", "bodyText": "check argument that types.size() == fields.size()", "url": "https://github.com/trinodb/trino/pull/3676#discussion_r452815131", "createdAt": "2020-07-10T12:35:32Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -797,6 +797,38 @@ public static Expression coerceIfNecessary(Analysis analysis, Expression origina\n                 analysis.isTypeOnlyCoercion(original));\n     }\n \n+    public static NodeAndMappings coerce(PlanNode node, List<Symbol> fields, List<Type> types, SymbolAllocator symbolAllocator, PlanNodeIdAllocator idAllocator)\n+    {\n+        Assignments.Builder assignments = Assignments.builder();\n+\n+        ImmutableList.Builder<Symbol> mappings = ImmutableList.builder();\n+        for (int i = 0; i < types.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQxNTgyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0NjozOFrOGv1-JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzowODoyN1rOGwH8yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDUxNw==", "bodyText": "preserve processAndCoerceIfNecessary name. It was more accurate.", "url": "https://github.com/trinodb/trino/pull/3676#discussion_r452820517", "createdAt": "2020-07-10T12:46:38Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -797,6 +797,38 @@ public static Expression coerceIfNecessary(Analysis analysis, Expression origina\n                 analysis.isTypeOnlyCoercion(original));\n     }\n \n+    public static NodeAndMappings coerce(PlanNode node, List<Symbol> fields, List<Type> types, SymbolAllocator symbolAllocator, PlanNodeIdAllocator idAllocator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMjU3NA==", "bodyText": "\"process\" is not accurate. This just adds coercions (or identity projections if coercions are not needed). I'll rename to coerceIfNecessary", "url": "https://github.com/trinodb/trino/pull/3676#discussion_r453112574", "createdAt": "2020-07-10T22:59:13Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -797,6 +797,38 @@ public static Expression coerceIfNecessary(Analysis analysis, Expression origina\n                 analysis.isTypeOnlyCoercion(original));\n     }\n \n+    public static NodeAndMappings coerce(PlanNode node, List<Symbol> fields, List<Type> types, SymbolAllocator symbolAllocator, PlanNodeIdAllocator idAllocator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDUxNw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExNTA4MQ==", "bodyText": "Actually, no, I won't do that. The reason I went with this name is that there's already another method called coerceIfNecessary in RelationPlanner that conflicts with this one and requires qualifying the invocation with the class name", "url": "https://github.com/trinodb/trino/pull/3676#discussion_r453115081", "createdAt": "2020-07-10T23:08:27Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -797,6 +797,38 @@ public static Expression coerceIfNecessary(Analysis analysis, Expression origina\n                 analysis.isTypeOnlyCoercion(original));\n     }\n \n+    public static NodeAndMappings coerce(PlanNode node, List<Symbol> fields, List<Type> types, SymbolAllocator symbolAllocator, PlanNodeIdAllocator idAllocator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDUxNw=="}, "originalCommit": null, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 64, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}