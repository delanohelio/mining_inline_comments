{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzOTY1MzU1", "number": 6017, "title": "Do not collect mask for restricted columns", "bodyText": "Add test for masking not refrenced columns", "createdAt": "2020-11-19T13:46:26Z", "url": "https://github.com/trinodb/trino/pull/6017", "merged": true, "mergeCommit": {"oid": "6a47dfa92cd41069741306973f455e48a48252db"}, "closed": true, "closedAt": "2020-12-15T11:01:16Z", "author": {"login": "kokosing"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeDNasAFqTUzNDQ3MTIzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmXKFFgBqjQxMTM2MjgyMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NDcxMjM3", "url": "https://github.com/trinodb/trino/pull/6017#pullrequestreview-534471237", "createdAt": "2020-11-19T13:59:20Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NDg3NDQ2", "url": "https://github.com/trinodb/trino/pull/6017#pullrequestreview-534487446", "createdAt": "2020-11-19T14:16:08Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NDUxOTA5", "url": "https://github.com/trinodb/trino/pull/6017#pullrequestreview-537451909", "createdAt": "2020-11-24T12:41:34Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NDk3NjY2", "url": "https://github.com/trinodb/trino/pull/6017#pullrequestreview-537497666", "createdAt": "2020-11-24T13:37:38Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NzcyOTY3", "url": "https://github.com/trinodb/trino/pull/6017#pullrequestreview-537772967", "createdAt": "2020-11-24T18:00:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODowMDozNVrOH5OzKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODowMDozNVrOH5OzKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MzM1NQ==", "bodyText": "I don't like that this is deferring the analysis until planning time. One downside is that it can mess tracking of analysis timings, mask or hide certain issues (e.g, if the mask contains complex queries, analyzing it will require accessing metadata, resolving tables, etc)", "url": "https://github.com/trinodb/trino/pull/6017#discussion_r529773355", "createdAt": "2020-11-24T18:00:35Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1284,7 +1284,12 @@ private void analyzeFiltersAndMasks(Table table, QualifiedObjectName name, Optio\n                     List<ViewExpression> masks = accessControl.getColumnMasks(session.toSecurityContext(), name, field.getName().get(), field.getType());\n                     columnMasks.put(field, masks);\n \n-                    masks.forEach(mask -> analyzeColumnMask(session.getIdentity().getUser(), table, name, field, accessControlScope, mask));\n+                    masks.forEach(mask -> analysis.addColumnMask(\n+                            table,\n+                            field.getName().get(),\n+                            new ColumnMask(\n+                                    () -> analyzeColumnMask(session.getIdentity().getUser(), table, name, field, accessControlScope, mask),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5Nzk3MTg3", "url": "https://github.com/trinodb/trino/pull/6017#pullrequestreview-539797187", "createdAt": "2020-11-27T08:46:22Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0NjoyM1rOH61ktg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0OTozNFrOH61rRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NzIwNg==", "bodyText": "Why is it forbidden to insert or delete from table with a mask?", "url": "https://github.com/trinodb/trino/pull/6017#discussion_r531457206", "createdAt": "2020-11-27T08:46:23Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestColumnMask.java", "diffHunk": "@@ -492,4 +494,44 @@ public void testJoin()\n \n         assertThat(assertions.query(\"SELECT count(*) FROM orders JOIN orders USING (orderkey)\")).matches(\"VALUES BIGINT '15000'\");\n     }\n+\n+    @Test\n+    public void testColumnMaskingUsingRestrictedColumn()\n+    {\n+        accessControl.reset();\n+        accessControl.deny(privilege(\"orders.custkey\", SELECT_COLUMN));\n+        accessControl.columnMask(\n+                new QualifiedObjectName(CATALOG, \"tiny\", \"orders\"),\n+                \"orderkey\",\n+                USER,\n+                new ViewExpression(USER, Optional.empty(), Optional.empty(), \"custkey\"));\n+        assertThatThrownBy(() -> assertions.query(\"SELECT orderkey FROM orders\"))\n+                .hasMessageMatching(\"\\\\QAccess Denied: Cannot select from columns [orderkey, custkey] in table or view local.tiny.orders\");\n+    }\n+\n+    @Test\n+    public void testInsertWithColumnMasking()\n+    {\n+        accessControl.reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1ODg4NQ==", "bodyText": "You can replace those two lines with:\n`flatMap(field -> field.getName().stream())", "url": "https://github.com/trinodb/trino/pull/6017#discussion_r531458885", "createdAt": "2020-11-27T08:49:34Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1278,14 +1278,27 @@ private void analyzeFiltersAndMasks(Table table, QualifiedObjectName name, Optio\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n \n+            Set<String> allColumns = fields.stream()\n+                    .filter(field -> field.getName().isPresent())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDU3OTc0", "url": "https://github.com/trinodb/trino/pull/6017#pullrequestreview-543057974", "createdAt": "2020-12-02T17:12:24Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxMjoyNFrOH9lbZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxNToyMVrOH9ljYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODQwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (field.getName().isEmpty()) {\n          \n          \n            \n                                continue;\n          \n          \n            \n                            }\n          \n          \n            \n                            // do not collect mask for not accessible columns to prevent unnecessary semantic analysis\n          \n          \n            \n                            if (!visibleColumns.contains(field.getName().orElseThrow())) {\n          \n          \n            \n                                continue;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (field.getName().isPresent() && visibleColumns.contains(field.getName().orElseThrow())) {", "url": "https://github.com/trinodb/trino/pull/6017#discussion_r534338404", "createdAt": "2020-12-02T17:12:24Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1278,14 +1278,26 @@ private void analyzeFiltersAndMasks(Table table, QualifiedObjectName name, Optio\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n \n+            Set<String> allColumns = fields.stream()\n+                    .flatMap(field -> field.getName().stream())\n+                    .collect(toImmutableSet());\n+\n+            Set<String> visibleColumns = accessControl.filterColumns(session.toSecurityContext(), name.asCatalogSchemaTableName(), allColumns);\n+\n             ImmutableMap.Builder<Field, List<ViewExpression>> columnMasks = ImmutableMap.builder();\n             for (Field field : fields) {\n-                if (field.getName().isPresent()) {\n-                    List<ViewExpression> masks = accessControl.getColumnMasks(session.toSecurityContext(), name, field.getName().get(), field.getType());\n-                    columnMasks.put(field, masks);\n-\n-                    masks.forEach(mask -> analyzeColumnMask(session.getIdentity().getUser(), table, name, field, accessControlScope, mask));\n+                if (field.getName().isEmpty()) {\n+                    continue;\n+                }\n+                // do not collect mask for not accessible columns to prevent unnecessary semantic analysis\n+                if (!visibleColumns.contains(field.getName().orElseThrow())) {\n+                    continue;\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDQ1MA==", "bodyText": "This assumes that filterColumns agrees with the \"has select permissions\" on those columns. I'm not sure that's guaranteed to be always true. In the worst case (if filterColumns is more restrictive), we might miss adding a mask over a field that has one.", "url": "https://github.com/trinodb/trino/pull/6017#discussion_r534340450", "createdAt": "2020-12-02T17:15:21Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1278,14 +1278,26 @@ private void analyzeFiltersAndMasks(Table table, QualifiedObjectName name, Optio\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n \n+            Set<String> allColumns = fields.stream()\n+                    .flatMap(field -> field.getName().stream())\n+                    .collect(toImmutableSet());\n+\n+            Set<String> visibleColumns = accessControl.filterColumns(session.toSecurityContext(), name.asCatalogSchemaTableName(), allColumns);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMDk0OTQ0", "url": "https://github.com/trinodb/trino/pull/6017#pullrequestreview-552094944", "createdAt": "2020-12-15T04:21:49Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c0a81b531073bc924e17d54e121d13ffbfb86e", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/c7c0a81b531073bc924e17d54e121d13ffbfb86e", "committedDate": "2020-12-15T09:43:45Z", "message": "Throw AccessDeniedException when access is denied"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eecb8dcd81b8251b09c03588e253b0f49de3ba24", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/eecb8dcd81b8251b09c03588e253b0f49de3ba24", "committedDate": "2020-12-15T09:43:46Z", "message": "Test access control for DESCRIBE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31abfc071cea84a6c67eedc075b25631e677ba46", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/31abfc071cea84a6c67eedc075b25631e677ba46", "committedDate": "2020-12-15T09:43:47Z", "message": "Make ViewAccessControl to extend ForwardingAccessControl\n\nThat way instead of denying access that could lead unexpected behaviour,\nit will fail loudly indicating the bug in the code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39975389bf7d8ef369ac26fbf436ce5415772550", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/39975389bf7d8ef369ac26fbf436ce5415772550", "committedDate": "2020-12-15T09:43:49Z", "message": "Add more tests to TestColumnMask\n\nTest that:\n - that restricted column cannot be used in mask\n - column masks cannot be used with INSERT or DELETE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2772e59f91907e48ada021eabcc13dded8c12ee9", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/2772e59f91907e48ada021eabcc13dded8c12ee9", "committedDate": "2020-12-15T09:43:50Z", "message": "Do not collect mask for restricted columns"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2772e59f91907e48ada021eabcc13dded8c12ee9", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/2772e59f91907e48ada021eabcc13dded8c12ee9", "committedDate": "2020-12-15T09:43:50Z", "message": "Do not collect mask for restricted columns"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2657, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}