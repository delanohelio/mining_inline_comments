{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTc3NTU0", "number": 5460, "title": "Add column security, column mask, and row filter to file-based access controls", "bodyText": "", "createdAt": "2020-10-07T23:54:40Z", "url": "https://github.com/trinodb/trino/pull/5460", "merged": true, "mergeCommit": {"oid": "7711b445b5069b9763a0c2e1e6bb063dd9077554"}, "closed": true, "closedAt": "2020-10-17T19:30:29Z", "author": {"login": "dain"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQdJF0AFqTUwNDUxNzc5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTgJ4UgBqjM4ODk1OTkyNTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NTE3Nzk5", "url": "https://github.com/trinodb/trino/pull/5460#pullrequestreview-504517799", "createdAt": "2020-10-08T07:57:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo1NzowN1rOHeSV0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODoxNjowMlrOHeTCIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxOTgyNw==", "bodyText": "it would be nice to sort some parameters like: catalog, schema, table, columns.", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501519827", "createdAt": "2020-10-08T07:57:07Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/CatalogTableAccessControlRule.java", "diffHunk": "@@ -34,13 +35,14 @@\n     @JsonCreator\n     public CatalogTableAccessControlRule(\n             @JsonProperty(\"privileges\") Set<TablePrivilege> privileges,\n+            @JsonProperty(\"columns\") Optional<List<ColumnConstraint>> columns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMjk3OQ==", "bodyText": "Maybe you could use some predefined rule instead of using null. The if below would be easier. ?", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501522979", "createdAt": "2020-10-08T08:02:23Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -211,10 +212,28 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     @Override\n     public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n     {\n-        if (!checkAnyTablePermission(context, tableName)) {\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {\n+            return columns;\n+        }\n+\n+        ConnectorIdentity identity = context.getIdentity();\n+        TableAccessControlRule rule = tableRules.stream()\n+                .filter(tableRule -> tableRule.matches(identity.getUser(), identity.getGroups(), tableName))\n+                .findFirst()\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMzk5NQ==", "bodyText": "Can this be used for UPDATE or INSERT? What would be the semantic of that?", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501523995", "createdAt": "2020-10-08T08:04:14Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "diffHunk": "@@ -560,7 +570,13 @@ See below for an example.\n         {\n           \"schema\": \"default\",\n           \"table\": \".*\",\n-          \"privileges\": [\"SELECT\"]\n+          \"privileges\": [\"SELECT\"],\n+          \"columns\" : [", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNDY3Mw==", "bodyText": "Why?", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501524673", "createdAt": "2020-10-08T08:05:15Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -211,10 +212,28 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     @Override\n     public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n     {\n-        if (!checkAnyTablePermission(context, tableName)) {\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {\n+            return columns;\n+        }\n+\n+        ConnectorIdentity identity = context.getIdentity();\n+        TableAccessControlRule rule = tableRules.stream()\n+                .filter(tableRule -> tableRule.matches(identity.getUser(), identity.getGroups(), tableName))\n+                .findFirst()\n+                .orElse(null);\n+        if (rule == null || rule.getPrivileges().isEmpty()) {\n             return ImmutableList.of();\n         }\n-        return columns;\n+\n+        // if user has privileges other than select, show all columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNTY2NQ==", "bodyText": "It would be nice to have some test for this special case.", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501525665", "createdAt": "2020-10-08T08:06:51Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -211,10 +212,28 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     @Override\n     public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n     {\n-        if (!checkAnyTablePermission(context, tableName)) {\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNTk0Mw==", "bodyText": "It would nice to have a test for that each user has SELECT to INFORMATION_SCHEMA with grant option.", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501525943", "createdAt": "2020-10-08T08:07:24Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -320,11 +348,19 @@ public void checkCanDropView(ConnectorSecurityContext context, SchemaTableName v\n     @Override\n     public void checkCanCreateViewWithSelectFromColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columnNames)\n     {\n-        // TODO: implement column level permissions\n-        if (!checkTablePermission(context, tableName, SELECT)) {\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNjExNQ==", "bodyText": "same about null", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501526115", "createdAt": "2020-10-08T08:07:44Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -320,11 +348,19 @@ public void checkCanDropView(ConnectorSecurityContext context, SchemaTableName v\n     @Override\n     public void checkCanCreateViewWithSelectFromColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columnNames)\n     {\n-        // TODO: implement column level permissions\n-        if (!checkTablePermission(context, tableName, SELECT)) {\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {\n+            return;\n+        }\n+\n+        ConnectorIdentity identity = context.getIdentity();\n+        TableAccessControlRule rule = tableRules.stream()\n+                .filter(tableRule -> tableRule.matches(identity.getUser(), identity.getGroups(), tableName))\n+                .findFirst()\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNzEzMw==", "bodyText": "same, it is a pity that it was implemented this way for a such long time", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501527133", "createdAt": "2020-10-08T08:09:23Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -560,7 +561,28 @@ public void checkCanShowColumns(SystemSecurityContext context, CatalogSchemaTabl\n             return ImmutableList.of();\n         }\n \n-        return columns;\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaTableName().getSchemaName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNzIyMA==", "bodyText": "same", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501527220", "createdAt": "2020-10-08T08:09:31Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -560,7 +561,28 @@ public void checkCanShowColumns(SystemSecurityContext context, CatalogSchemaTabl\n             return ImmutableList.of();\n         }\n \n-        return columns;\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaTableName().getSchemaName())) {\n+            return columns;\n+        }\n+\n+        Identity identity = context.getIdentity();\n+        CatalogTableAccessControlRule rule = tableRules.stream()\n+                .filter(tableRule -> tableRule.matches(identity.getUser(), identity.getGroups(), tableName))\n+                .findFirst()\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNzM3MA==", "bodyText": "same", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501527370", "createdAt": "2020-10-08T08:09:47Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -560,7 +561,28 @@ public void checkCanShowColumns(SystemSecurityContext context, CatalogSchemaTabl\n             return ImmutableList.of();\n         }\n \n-        return columns;\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaTableName().getSchemaName())) {\n+            return columns;\n+        }\n+\n+        Identity identity = context.getIdentity();\n+        CatalogTableAccessControlRule rule = tableRules.stream()\n+                .filter(tableRule -> tableRule.matches(identity.getUser(), identity.getGroups(), tableName))\n+                .findFirst()\n+                .orElse(null);\n+        if (rule == null || rule.getPrivileges().isEmpty()) {\n+            return ImmutableList.of();\n+        }\n+\n+        // if user has privileges other than select, show all columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNzg0NA==", "bodyText": "same", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501527844", "createdAt": "2020-10-08T08:10:30Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -640,11 +676,23 @@ public void checkCanDropView(SystemSecurityContext context, CatalogSchemaTableNa\n     @Override\n     public void checkCanCreateViewWithSelectFromColumns(SystemSecurityContext context, CatalogSchemaTableName table, Set<String> columns)\n     {\n-        // TODO: implement column level permissions\n-        if (!checkTablePermission(context, table, SELECT)) {\n+        if (!canAccessCatalog(context, table.getCatalogName(), ALL)) {\n+            denySelectTable(table.toString());\n+        }\n+\n+        if (INFORMATION_SCHEMA_NAME.equals(table.getSchemaTableName().getSchemaName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyNzkxNQ==", "bodyText": "same", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501527915", "createdAt": "2020-10-08T08:10:37Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -640,11 +676,23 @@ public void checkCanDropView(SystemSecurityContext context, CatalogSchemaTableNa\n     @Override\n     public void checkCanCreateViewWithSelectFromColumns(SystemSecurityContext context, CatalogSchemaTableName table, Set<String> columns)\n     {\n-        // TODO: implement column level permissions\n-        if (!checkTablePermission(context, table, SELECT)) {\n+        if (!canAccessCatalog(context, table.getCatalogName(), ALL)) {\n+            denySelectTable(table.toString());\n+        }\n+\n+        if (INFORMATION_SCHEMA_NAME.equals(table.getSchemaTableName().getSchemaName())) {\n+            return;\n+        }\n+\n+        Identity identity = context.getIdentity();\n+        CatalogTableAccessControlRule rule = tableRules.stream()\n+                .filter(tableRule -> tableRule.matches(identity.getUser(), identity.getGroups(), table))\n+                .findFirst()\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyODIxNw==", "bodyText": "put columns under tableRegex", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501528217", "createdAt": "2020-10-08T08:11:04Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/TableAccessControlRule.java", "diffHunk": "@@ -31,9 +36,11 @@\n             Optional.empty(),\n             Optional.empty(),\n             Optional.empty(),\n+            Optional.empty(),\n             Optional.empty());\n \n     private final Set<TablePrivilege> privileges;\n+    private final Set<String> restrictedColumns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyODQzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            tableRegex.map(regex -> regex.matcher(table.getTableName()).matches()).orElse(true);\n          \n          \n            \n                            tableRegex.map(regex -> regex.matcher(table.getTableName()).matches())\n          \n          \n            \n                            .orElse(true);", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501528435", "createdAt": "2020-10-08T08:11:28Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/TableAccessControlRule.java", "diffHunk": "@@ -42,27 +49,39 @@\n     @JsonCreator\n     public TableAccessControlRule(\n             @JsonProperty(\"privileges\") Set<TablePrivilege> privileges,\n+            @JsonProperty(\"columns\") Optional<List<ColumnConstraint>> columns,\n             @JsonProperty(\"user\") Optional<Pattern> userRegex,\n             @JsonProperty(\"group\") Optional<Pattern> groupRegex,\n             @JsonProperty(\"schema\") Optional<Pattern> schemaRegex,\n             @JsonProperty(\"table\") Optional<Pattern> tableRegex)\n     {\n         this.privileges = ImmutableSet.copyOf(requireNonNull(privileges, \"privileges is null\"));\n+        this.restrictedColumns = requireNonNull(columns, \"columns is null\").orElse(ImmutableList.of()).stream()\n+                .filter(constraint -> !constraint.isAllowed())\n+                .map(ColumnConstraint::getName)\n+                .collect(toImmutableSet());\n         this.userRegex = requireNonNull(userRegex, \"user is null\");\n         this.groupRegex = requireNonNull(groupRegex, \"group is null\");\n         this.schemaRegex = requireNonNull(schemaRegex, \"sourceRegex is null\");\n         this.tableRegex = requireNonNull(tableRegex, \"tableRegex is null\");\n     }\n \n-    public Optional<Set<TablePrivilege>> match(String user, Set<String> groups, SchemaTableName table)\n+    public boolean matches(String user, Set<String> groups, SchemaTableName table)\n     {\n-        if (userRegex.map(regex -> regex.matcher(user).matches()).orElse(true) &&\n+        return userRegex.map(regex -> regex.matcher(user).matches()).orElse(true) &&\n                 groupRegex.map(regex -> groups.stream().anyMatch(group -> regex.matcher(group).matches())).orElse(true) &&\n                 schemaRegex.map(regex -> regex.matcher(table.getSchemaName()).matches()).orElse(true) &&\n-                tableRegex.map(regex -> regex.matcher(table.getTableName()).matches()).orElse(true)) {\n-            return Optional.of(privileges);\n-        }\n-        return Optional.empty();\n+                tableRegex.map(regex -> regex.matcher(table.getTableName()).matches()).orElse(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyODk5Mg==", "bodyText": "Does this belong to the next commit?", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501528992", "createdAt": "2020-10-08T08:12:24Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/ExpressionEnvironment.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.security;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExpressionEnvironment", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyOTA4OA==", "bodyText": "Does these two above belong to the next commit?", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501529088", "createdAt": "2020-10-08T08:12:33Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/ColumnConstraint.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.security;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Optional;\n+\n+public class ColumnConstraint\n+{\n+    private final String name;\n+    private final boolean allowed;\n+    private final Optional<String> mask;\n+    private final Optional<String> maskUser;\n+\n+    @JsonCreator\n+    public ColumnConstraint(\n+            @JsonProperty(\"name\") String name,\n+            @JsonProperty(\"allow\") Optional<Boolean> allow,\n+            @JsonProperty(\"mask\") Optional<String> mask,\n+            @JsonProperty(\"mask_user\") Optional<String> maskUser)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyOTk0Nw==", "bodyText": "That requires documentation that you cannot set masks for information_schema. Maybe we should be fail on initialization then if user specifies any rule against information_schema?", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501529947", "createdAt": "2020-10-08T08:13:59Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -455,7 +457,16 @@ public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaRou\n     @Override\n     public Optional<ViewExpression> getColumnMask(ConnectorSecurityContext context, SchemaTableName tableName, String columnName, Type type)\n     {\n-        return Optional.empty();\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzMTE3MA==", "bodyText": "same about documenting this", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r501531170", "createdAt": "2020-10-08T08:16:02Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -451,7 +451,16 @@ public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaRou\n     @Override\n     public Optional<ViewExpression> getRowFilter(ConnectorSecurityContext context, SchemaTableName tableName)\n     {\n-        return Optional.empty();\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTE2OTE5", "url": "https://github.com/trinodb/trino/pull/5460#pullrequestreview-507916919", "createdAt": "2020-10-14T00:30:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMDozMDowN1rOHg-Bug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMDozMjozMlrOHg-EKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzMjczMA==", "bodyText": "I looked at adding a DENY_ALL rule we could use here, but I didn't like how the rule worked out, so I'm going to leave this.", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r504332730", "createdAt": "2020-10-14T00:30:07Z", "author": {"login": "dain"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -211,10 +212,28 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     @Override\n     public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n     {\n-        if (!checkAnyTablePermission(context, tableName)) {\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {\n+            return columns;\n+        }\n+\n+        ConnectorIdentity identity = context.getIdentity();\n+        TableAccessControlRule rule = tableRules.stream()\n+                .filter(tableRule -> tableRule.matches(identity.getUser(), identity.getGroups(), tableName))\n+                .findFirst()\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMjk3OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzMzM1Mw==", "bodyText": "This matches the style of the existing code, and I think it is more readable as each line checks a single regex using the same same style", "url": "https://github.com/trinodb/trino/pull/5460#discussion_r504333353", "createdAt": "2020-10-14T00:32:32Z", "author": {"login": "dain"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/TableAccessControlRule.java", "diffHunk": "@@ -42,27 +49,39 @@\n     @JsonCreator\n     public TableAccessControlRule(\n             @JsonProperty(\"privileges\") Set<TablePrivilege> privileges,\n+            @JsonProperty(\"columns\") Optional<List<ColumnConstraint>> columns,\n             @JsonProperty(\"user\") Optional<Pattern> userRegex,\n             @JsonProperty(\"group\") Optional<Pattern> groupRegex,\n             @JsonProperty(\"schema\") Optional<Pattern> schemaRegex,\n             @JsonProperty(\"table\") Optional<Pattern> tableRegex)\n     {\n         this.privileges = ImmutableSet.copyOf(requireNonNull(privileges, \"privileges is null\"));\n+        this.restrictedColumns = requireNonNull(columns, \"columns is null\").orElse(ImmutableList.of()).stream()\n+                .filter(constraint -> !constraint.isAllowed())\n+                .map(ColumnConstraint::getName)\n+                .collect(toImmutableSet());\n         this.userRegex = requireNonNull(userRegex, \"user is null\");\n         this.groupRegex = requireNonNull(groupRegex, \"group is null\");\n         this.schemaRegex = requireNonNull(schemaRegex, \"sourceRegex is null\");\n         this.tableRegex = requireNonNull(tableRegex, \"tableRegex is null\");\n     }\n \n-    public Optional<Set<TablePrivilege>> match(String user, Set<String> groups, SchemaTableName table)\n+    public boolean matches(String user, Set<String> groups, SchemaTableName table)\n     {\n-        if (userRegex.map(regex -> regex.matcher(user).matches()).orElse(true) &&\n+        return userRegex.map(regex -> regex.matcher(user).matches()).orElse(true) &&\n                 groupRegex.map(regex -> groups.stream().anyMatch(group -> regex.matcher(group).matches())).orElse(true) &&\n                 schemaRegex.map(regex -> regex.matcher(table.getSchemaName()).matches()).orElse(true) &&\n-                tableRegex.map(regex -> regex.matcher(table.getTableName()).matches()).orElse(true)) {\n-            return Optional.of(privileges);\n-        }\n-        return Optional.empty();\n+                tableRegex.map(regex -> regex.matcher(table.getTableName()).matches()).orElse(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyODQzNQ=="}, "originalCommit": null, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MDk4ODEy", "url": "https://github.com/trinodb/trino/pull/5460#pullrequestreview-509098812", "createdAt": "2020-10-15T07:39:24Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d24afe930921a77afb299b627d2c04e8fa0fecd", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/4d24afe930921a77afb299b627d2c04e8fa0fecd", "committedDate": "2020-10-17T19:25:51Z", "message": "Document file access rules not applying to information_schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5e5ebeb3e7bec7116d298efa609124cb1f42df7", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/e5e5ebeb3e7bec7116d298efa609124cb1f42df7", "committedDate": "2020-10-17T19:25:51Z", "message": "Add column level security to file-based access controls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "249a8851bbca3b080039392dcdd52b22e95cf117", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/249a8851bbca3b080039392dcdd52b22e95cf117", "committedDate": "2020-10-17T19:29:19Z", "message": "Add column mask to file access control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "007db32119fb3fc2689423206d1de7af3ad6dc9b", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/007db32119fb3fc2689423206d1de7af3ad6dc9b", "committedDate": "2020-10-17T19:29:20Z", "message": "Add row filter to file access control"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "007db32119fb3fc2689423206d1de7af3ad6dc9b", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/007db32119fb3fc2689423206d1de7af3ad6dc9b", "committedDate": "2020-10-17T19:29:20Z", "message": "Add row filter to file access control"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3315, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}