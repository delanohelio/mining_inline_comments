{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Mjk1ODQ5", "number": 3535, "title": "Add an information_schema. role_authorization_descriptors table", "bodyText": "Update:\nthis is now called information_schema.role_authorization_descriptors\nThe schema of this table is:\n| role_name | grantor | grantor_type | grantee | grantee_type | is_grantable |\nConnectors can use that to make role grant information available to (admin) users by implementing ConnectorMetadata.listAllRoleGrants, with an option to filter by predicates for optimization.\nCurrently this is implemented in the Hive Connector only.\ngrantor and grantor_type are not yet supported and always null. (but it could be added in a separate DR).\nContinued from #3232", "createdAt": "2020-04-24T02:37:03Z", "url": "https://github.com/trinodb/trino/pull/3535", "merged": true, "mergeCommit": {"oid": "1e3690a23920e63514ff92be223d253303255b2a"}, "closed": true, "closedAt": "2020-06-01T07:59:55Z", "author": {"login": "lhofhansl"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbtfHSgFqTQwMDg1NDU0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmGDkcAH2gAyNDA4Mjk1ODQ5OmVmOWI1ZjA0NWQxNzljM2FmYzIxMzI0ZDRhMmI1NTBjNGJhZWI1OGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODU0NTQ4", "url": "https://github.com/trinodb/trino/pull/3535#pullrequestreview-400854548", "createdAt": "2020-04-27T11:16:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToxNjozNVrOGMd3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToyMTozN1rOGMeDNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyNTM4Mw==", "bodyText": "listGrantedPrincipals?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r415725383", "createdAt": "2020-04-27T11:16:35Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -2341,6 +2341,12 @@ public void dropRole(ConnectorSession session, String role)\n         return accessControlMetadata.listRoles(session);\n     }\n \n+    @Override\n+    public Set<RoleGrant> listPrincipals(ConnectorSession session, String role)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyNTc5OA==", "bodyText": "remove default? Other methods do not have default here?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r415725798", "createdAt": "2020-04-27T11:17:20Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/HiveMetastore.java", "diffHunk": "@@ -105,6 +108,11 @@\n \n     void revokeRoles(Set<String> roles, Set<HivePrincipal> grantees, boolean adminOption, HivePrincipal grantor);\n \n+    default Set<RoleGrant> listPrincipals(String role)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyNzQ5Ng==", "bodyText": "Can you test different users here? Like admin who sees everything, user that sees only his role grants and user that does not see anything because has no role grants?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r415727496", "createdAt": "2020-04-27T11:20:09Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4962,6 +4962,74 @@ public void testShowColumnMetadata()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testRoleGrants()\n+    {\n+        assertUpdate(\"CREATE ROLE test_role_grant1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODI4OQ==", "bodyText": "can you please add tests for role_grants here as well?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r415728289", "createdAt": "2020-04-27T11:21:23Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/tests/TestInformationSchemaConnector.java", "diffHunk": "@@ -52,12 +52,12 @@\n     public void testBasic()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODQzNw==", "bodyText": "why this numbers got higher?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r415728437", "createdAt": "2020-04-27T11:21:37Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/tests/TestInformationSchemaConnector.java", "diffHunk": "@@ -52,12 +52,12 @@\n     public void testBasic()\n     {\n         assertQuery(\"SELECT count(*) FROM tpch.information_schema.schemata\", \"VALUES 10\");\n-        assertQuery(\"SELECT count(*) FROM tpch.information_schema.tables\", \"VALUES 80\");\n-        assertQuery(\"SELECT count(*) FROM tpch.information_schema.columns\", \"VALUES 583\");\n+        assertQuery(\"SELECT count(*) FROM tpch.information_schema.tables\", \"VALUES 81\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODU4ODQy", "url": "https://github.com/trinodb/trino/pull/3535#pullrequestreview-400858842", "createdAt": "2020-04-27T11:23:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToyMzoyMlrOGMeHIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToyMzoyMlrOGMeHIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyOTQ0MA==", "bodyText": "@electrum Can you please take a look at this pull request too? I would like to have a second pair of eyes before adding any new table to information_schema?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r415729440", "createdAt": "2020-04-27T11:23:22Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -2341,6 +2341,12 @@ public void dropRole(ConnectorSession session, String role)\n         return accessControlMetadata.listRoles(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzE0MDc5", "url": "https://github.com/trinodb/trino/pull/3535#pullrequestreview-401314079", "createdAt": "2020-04-27T20:48:10Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzkyNjk0", "url": "https://github.com/trinodb/trino/pull/3535#pullrequestreview-412392694", "createdAt": "2020-05-15T06:58:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjo1ODozN1rOGV4yCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjo1ODozN1rOGV4yCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwMzU5Mg==", "bodyText": "If there's a more elegant to phrase this let me know.\nInstead of the break label that could build() and return as well.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r425603592", "createdAt": "2020-05-15T06:58:37Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -84,6 +87,62 @@ private static void checkRoleIsNotReserved(String role)\n         return ImmutableSet.copyOf(metastore.listRoles());\n     }\n \n+    @Override\n+    public Set<RoleGrant> listAllRoleGrants(ConnectorSession session, Optional<Set<String>> roles, Optional<Set<String>> grantees, OptionalLong limit)\n+    {\n+        /*\n+         * The Hive Metadata interface provides us with two ways to retrieve role grants:\n+         * 1. principals by single role\n+         * 2. roles by single principal\n+         *\n+         * We check the passed predicates to decide which path is most optimal.\n+         */\n+        if (roles.isPresent() && grantees.isPresent()) {\n+            if (roles.get().size() <= grantees.get().size() * 2) {\n+                // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n+                grantees = Optional.empty();\n+            }\n+            else {\n+                roles = Optional.empty();\n+            }\n+        }\n+\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();\n+        long count = 0;\n+        if (grantees.isPresent()) {\n+            TOP:\n+            for (String grantee : grantees.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MTk0MDY2", "url": "https://github.com/trinodb/trino/pull/3535#pullrequestreview-414194066", "createdAt": "2020-05-19T07:59:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzo1OTo1NVrOGXUXQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxOTo1OVrOGXVGuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNDA2NQ==", "bodyText": "The schema of this table is:\nrole_nane | grantor | grantor_type | grantee | grantee_type | is_grantable\n\nIs this how it is defined in standard? Does standard defines types for these columns? Do we use same column types?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427104065", "createdAt": "2020-05-19T07:59:55Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -2346,6 +2346,12 @@ public void dropRole(ConnectorSession session, String role)\n         return accessControlMetadata.listRoles(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNTI2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ImmutableSet.Builder<RoleGrant> result = ImmutableSet.builder();\n          \n          \n            \n                    result.addAll(listRoleGrantsSanitized().stream()\n          \n          \n            \n                            .filter(grant -> grant.getRoleName().equals(role))\n          \n          \n            \n                            .collect(toSet()));\n          \n          \n            \n                    return result.build();\n          \n          \n            \n                    return listRoleGrantsSanitized().stream()\n          \n          \n            \n                            .filter(grant -> grant.getRoleName().equals(role))\n          \n          \n            \n                            .collect(toImmutableSet());", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427105268", "createdAt": "2020-05-19T08:01:52Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -814,6 +814,16 @@ public synchronized void revokeRoles(Set<String> roles, Set<HivePrincipal> grant\n         }\n     }\n \n+    @Override\n+    public synchronized Set<RoleGrant> listGrantedPrincipals(String role)\n+    {\n+        ImmutableSet.Builder<RoleGrant> result = ImmutableSet.builder();\n+        result.addAll(listRoleGrantsSanitized().stream()\n+                .filter(grant -> grant.getRoleName().equals(role))\n+                .collect(toSet()));\n+        return result.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNTYxOA==", "bodyText": "s/resp/response", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427105618", "createdAt": "2020-05-19T08:02:26Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastoreClient.java", "diffHunk": "@@ -418,6 +420,15 @@ private void removeGrant(String role, String granteeName, PrincipalType granteeT\n         }\n     }\n \n+    @Override\n+    public List<RolePrincipalGrant> listGrantedPrincipals(String role)\n+            throws TException\n+    {\n+        GetPrincipalsInRoleRequest request = new GetPrincipalsInRoleRequest(role);\n+        GetPrincipalsInRoleResponse resp = client.get_principals_in_role(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNjI5NA==", "bodyText": "rename this variable to match the value it holds", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427106294", "createdAt": "2020-05-19T08:03:36Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -95,6 +95,7 @@\n     public static final String ADMIN_ROLE_NAME = \"admin\";\n     private static final String INFORMATION_SCHEMA_NAME = \"information_schema\";\n     private static final SchemaTableName ROLES = new SchemaTableName(INFORMATION_SCHEMA_NAME, \"roles\");\n+    private static final SchemaTableName ROLE_GRANTS = new SchemaTableName(INFORMATION_SCHEMA_NAME, \"role_authorization_descriptors\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNzAzMg==", "bodyText": "extract a method and use return?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427107032", "createdAt": "2020-05-19T08:04:54Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -84,6 +87,62 @@ private static void checkRoleIsNotReserved(String role)\n         return ImmutableSet.copyOf(metastore.listRoles());\n     }\n \n+    @Override\n+    public Set<RoleGrant> listAllRoleGrants(ConnectorSession session, Optional<Set<String>> roles, Optional<Set<String>> grantees, OptionalLong limit)\n+    {\n+        /*\n+         * The Hive Metadata interface provides us with two ways to retrieve role grants:\n+         * 1. principals by single role\n+         * 2. roles by single principal\n+         *\n+         * We check the passed predicates to decide which path is most optimal.\n+         */\n+        if (roles.isPresent() && grantees.isPresent()) {\n+            if (roles.get().size() <= grantees.get().size() * 2) {\n+                // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n+                grantees = Optional.empty();\n+            }\n+            else {\n+                roles = Optional.empty();\n+            }\n+        }\n+\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();\n+        long count = 0;\n+        if (grantees.isPresent()) {\n+            TOP:\n+            for (String grantee : grantees.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwMzU5Mg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNzkyNA==", "bodyText": "use some constant for \"public\". There should be some already.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427107924", "createdAt": "2020-05-19T08:06:23Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -84,6 +87,62 @@ private static void checkRoleIsNotReserved(String role)\n         return ImmutableSet.copyOf(metastore.listRoles());\n     }\n \n+    @Override\n+    public Set<RoleGrant> listAllRoleGrants(ConnectorSession session, Optional<Set<String>> roles, Optional<Set<String>> grantees, OptionalLong limit)\n+    {\n+        /*\n+         * The Hive Metadata interface provides us with two ways to retrieve role grants:\n+         * 1. principals by single role\n+         * 2. roles by single principal\n+         *\n+         * We check the passed predicates to decide which path is most optimal.\n+         */\n+        if (roles.isPresent() && grantees.isPresent()) {\n+            if (roles.get().size() <= grantees.get().size() * 2) {\n+                // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n+                grantees = Optional.empty();\n+            }\n+            else {\n+                roles = Optional.empty();\n+            }\n+        }\n+\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();\n+        long count = 0;\n+        if (grantees.isPresent()) {\n+            TOP:\n+            for (String grantee : grantees.get()) {\n+                for (PrincipalType type : new PrincipalType[]{USER, ROLE}) {\n+                    for (RoleGrant grant : metastore.listRoleGrants(new HivePrincipal(type, grantee))) {\n+                        if (limit.isPresent() && count >= limit.getAsLong()) {\n+                            break TOP;\n+                        }\n+                        // Filter out the \"public\" role since it is not explicitly granted in Hive.\n+                        if (\"public\".equals(grant.getRoleName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwODQ0Mw==", "bodyText": "please extract one method for collecting output for grantees and one method for roles", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427108443", "createdAt": "2020-05-19T08:07:16Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -84,6 +87,62 @@ private static void checkRoleIsNotReserved(String role)\n         return ImmutableSet.copyOf(metastore.listRoles());\n     }\n \n+    @Override\n+    public Set<RoleGrant> listAllRoleGrants(ConnectorSession session, Optional<Set<String>> roles, Optional<Set<String>> grantees, OptionalLong limit)\n+    {\n+        /*\n+         * The Hive Metadata interface provides us with two ways to retrieve role grants:\n+         * 1. principals by single role\n+         * 2. roles by single principal\n+         *\n+         * We check the passed predicates to decide which path is most optimal.\n+         */\n+        if (roles.isPresent() && grantees.isPresent()) {\n+            if (roles.get().size() <= grantees.get().size() * 2) {\n+                // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n+                grantees = Optional.empty();\n+            }\n+            else {\n+                roles = Optional.empty();\n+            }\n+        }\n+\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();\n+        long count = 0;\n+        if (grantees.isPresent()) {\n+            TOP:\n+            for (String grantee : grantees.get()) {\n+                for (PrincipalType type : new PrincipalType[]{USER, ROLE}) {\n+                    for (RoleGrant grant : metastore.listRoleGrants(new HivePrincipal(type, grantee))) {\n+                        if (limit.isPresent() && count >= limit.getAsLong()) {\n+                            break TOP;\n+                        }\n+                        // Filter out the \"public\" role since it is not explicitly granted in Hive.\n+                        if (\"public\".equals(grant.getRoleName())) {\n+                            continue;\n+                        }\n+                        count++;\n+                        builder.add(grant);\n+                    }\n+                }\n+            }\n+            return builder.build();\n+        }\n+\n+        // if no roles or grantees were passed get a list of roles from the metastore\n+        for (String role : roles.orElseGet(() -> metastore.listRoles())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwODczMw==", "bodyText": "update test name to match role_authorization_descriptors", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427108733", "createdAt": "2020-05-19T08:07:45Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4973,6 +4973,87 @@ public void testShowColumnMetadata()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testRoleGrants()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwOTA1MQ==", "bodyText": "Please add some test with LIMIT", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427109051", "createdAt": "2020-05-19T08:08:16Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4973,6 +4973,87 @@ public void testShowColumnMetadata()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testRoleGrants()\n+    {\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(\"CREATE ROLE test_role_grant1\");\n+        assertUpdate(\"CREATE ROLE test_role_grant2\");\n+        assertUpdate(\"CREATE ROLE test_role_grant3\");\n+\n+        // nothing showing because no roles have been granted\n+        assertQueryReturnsEmptyResult(\"SELECT * FROM information_schema.role_authorization_descriptors\");\n+\n+        // role_authorization_descriptors is not accessible for a non-admin user, even when it's empty\n+        assertQueryFails(user, \"SELECT * FROM information_schema.role_authorization_descriptors\",\n+                \"Access Denied: Cannot select from table information_schema.role_authorization_descriptors\");\n+\n+        assertUpdate(\"GRANT test_role_grant1 TO USER user\");\n+        // user with same name as a role\n+        assertUpdate(\"GRANT test_role_grant2 TO USER test_role_grant1\");\n+        assertUpdate(\"GRANT test_role_grant2 TO USER user1 WITH ADMIN OPTION\");\n+        assertUpdate(\"GRANT test_role_grant2 TO USER user2\");\n+        assertUpdate(\"GRANT test_role_grant2 TO ROLE test_role_grant1\");\n+\n+        // role_authorization_descriptors is not accessible for a non-admin user\n+        assertQueryFails(user, \"SELECT * FROM information_schema.role_authorization_descriptors\",\n+                \"Access Denied: Cannot select from table information_schema.role_authorization_descriptors\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors\",\n+                \"VALUES \" +\n+                        \"('test_role_grant2', null, null, 'test_role_grant1', 'ROLE', 'NO'),\" +\n+                        \"('test_role_grant2', null, null, 'user2', 'USER', 'NO'),\" +\n+                        \"('test_role_grant2', null, null, 'user1', 'USER', 'YES'),\" +\n+                        \"('test_role_grant2', null, null, 'test_role_grant1', 'USER', 'NO'),\" +\n+                        \"('test_role_grant1', null, null, 'user', 'USER', 'NO')\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors WHERE role_name = 'test_role_grant2'\",\n+                \"VALUES \" +\n+                        \"('test_role_grant2', null, null, 'test_role_grant1', 'USER', 'NO'),\" +\n+                        \"('test_role_grant2', null, null, 'test_role_grant1', 'ROLE', 'NO'),\" +\n+                        \"('test_role_grant2', null, null, 'user1', 'USER', 'YES'),\" +\n+                        \"('test_role_grant2', null, null, 'user2', 'USER', 'NO')\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors WHERE grantee = 'user'\",\n+                \"VALUES ('test_role_grant1', null, null, 'user', 'USER', 'NO')\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors WHERE grantee like 'user%'\",\n+                \"VALUES \" +\n+                        \"('test_role_grant1', null, null, 'user', 'USER', 'NO'),\" +\n+                        \"('test_role_grant2', null, null, 'user2', 'USER', 'NO'),\" +\n+                        \"('test_role_grant2', null, null, 'user1', 'USER', 'YES')\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors WHERE grantee = 'test_role_grant1'\",\n+                \"VALUES \" +\n+                        \"('test_role_grant2', null, null, 'test_role_grant1', 'ROLE', 'NO'),\" +\n+                        \"('test_role_grant2', null, null, 'test_role_grant1', 'USER', 'NO')\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors WHERE grantee = 'test_role_grant1' AND grantee_type = 'USER'\",\n+                \"VALUES ('test_role_grant2', null, null, 'test_role_grant1', 'USER', 'NO')\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors WHERE grantee = 'test_role_grant1' AND grantee_type = 'ROLE'\",\n+                \"VALUES ('test_role_grant2', null, null, 'test_role_grant1', 'ROLE', 'NO')\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors WHERE grantee_type = 'ROLE'\",\n+                \"VALUES ('test_role_grant2', null, null, 'test_role_grant1', 'ROLE', 'NO')\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMDA5NA==", "bodyText": "It would be nice to have these defined in RoleGrant, but being unused currently. So other connector implementations could benefit from that.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427110094", "createdAt": "2020-05-19T08:10:01Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaPageSource.java", "diffHunk": "@@ -346,13 +355,35 @@ private void addRolesRecords()\n         }\n     }\n \n+    private void addRoleAuthorizationDescriptorRecords()\n+    {\n+        try {\n+            accessControl.checkCanShowRoles(session.toSecurityContext(), catalogName);\n+        }\n+        catch (AccessDeniedException exception) {\n+            return;\n+        }\n+\n+        for (RoleGrant grant : metadata.listAllRoleGrants(session, catalogName, roles, grantees, limit)) {\n+            addRecord(\n+                    grant.getRoleName(),\n+                    null, // grantor", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMDQ0Nw==", "bodyText": "I think we need dedicated access control method for that.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427110447", "createdAt": "2020-05-19T08:10:37Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaPageSource.java", "diffHunk": "@@ -346,13 +355,35 @@ private void addRolesRecords()\n         }\n     }\n \n+    private void addRoleAuthorizationDescriptorRecords()\n+    {\n+        try {\n+            accessControl.checkCanShowRoles(session.toSecurityContext(), catalogName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMjI0Mg==", "bodyText": "it's because it does not work in all connectors\n\nThis test is using dedicated testing connector called CountingMockConnector\n\nThere are 0 tests for any other role or access related stuff\n\nThat is a mistake (we didn't catch that). I think having such tests bring a lot of value. Could you please add them? Adding tests for other tables could be done in separate commits.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427112242", "createdAt": "2020-05-19T08:13:33Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/tests/TestInformationSchemaConnector.java", "diffHunk": "@@ -52,12 +52,12 @@\n     public void testBasic()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyODI4OQ=="}, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExNDY1Mw==", "bodyText": "I don't think we should do such ifs. I would prefer to try to update prefixes and grantees always. And if any of them is not changed return Optional.empty() (as it was before).", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427114653", "createdAt": "2020-05-19T08:17:23Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaMetadata.java", "diffHunk": "@@ -191,19 +195,24 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n     {\n         InformationSchemaTableHandle table = (InformationSchemaTableHandle) handle;\n \n-        if (!isTablesEnumeratingTable(table.getTable()) || !table.getPrefixes().equals(defaultPrefixes(catalogName))) {\n-            return Optional.empty();\n+        Optional<Set<String>> roles = table.getRoles();\n+        Optional<Set<String>> grantees = table.getGrantees();\n+        if (ROLE_AUTHORIZATION_DESCRIPTORS.equals(table.getTable()) && table.getRoles().isEmpty() && table.getGrantees().isEmpty()) {\n+            roles = calculateRoles(session, constraint.getSummary(), constraint.predicate());\n+            grantees = calculateGrantees(session, constraint.getSummary(), constraint.predicate());\n         }\n \n-        Set<QualifiedTablePrefix> prefixes = getPrefixes(session, table, constraint);\n-\n-        if (prefixes.equals(table.getPrefixes())) {\n-            return Optional.empty();\n+        Set<QualifiedTablePrefix> prefixes = table.getPrefixes();\n+        if (isTablesEnumeratingTable(table.getTable()) && table.getPrefixes().equals(defaultPrefixes(catalogName))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExNjIxNg==", "bodyText": "Do we have a tests that covers cases like filter(limit(scan) and limit(filter(scan)). In other words I think we should consider banning filter pushdown if there is already limit applied as I guess it is buggy today.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427116216", "createdAt": "2020-05-19T08:19:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaMetadata.java", "diffHunk": "@@ -182,7 +186,7 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         }\n \n         return Optional.of(new LimitApplicationResult<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTc2NDQ5", "url": "https://github.com/trinodb/trino/pull/3535#pullrequestreview-414976449", "createdAt": "2020-05-20T04:01:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowMToxMlrOGX6dng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDo1MjowOVrOGX7K5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyODI4Ng==", "bodyText": "Use ImmutableSet.toImmutableSet(), then there is no need to use Builder.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427728286", "createdAt": "2020-05-20T04:01:12Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -814,6 +814,16 @@ public synchronized void revokeRoles(Set<String> roles, Set<HivePrincipal> grant\n         }\n     }\n \n+    @Override\n+    public synchronized Set<RoleGrant> listGrantedPrincipals(String role)\n+    {\n+        ImmutableSet.Builder<RoleGrant> result = ImmutableSet.builder();\n+        result.addAll(listRoleGrantsSanitized().stream()\n+                .filter(grant -> grant.getRoleName().equals(role))\n+                .collect(toUnmodifiableSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyODcwOQ==", "bodyText": "This is unrelated to the change so it should go as separate commit.\nInstead collect and addAll I would use forEach(result::add)", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427728709", "createdAt": "2020-05-20T04:03:15Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -826,7 +836,7 @@ public synchronized void revokeRoles(Set<String> roles, Set<HivePrincipal> grant\n         }\n         result.addAll(listRoleGrantsSanitized().stream()\n                 .filter(grant -> HivePrincipal.from(grant.getGrantee()).equals(principal))\n-                .collect(toSet()));\n+                .collect(toUnmodifiableSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMDE2NQ==", "bodyText": "you should verify limit before doing a call to HMS (in outer loop), then you could simply use break.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427730165", "createdAt": "2020-05-20T04:09:49Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -84,6 +88,69 @@ private static void checkRoleIsNotReserved(String role)\n         return ImmutableSet.copyOf(metastore.listRoles());\n     }\n \n+    @Override\n+    public Set<RoleGrant> listAllRoleGrants(ConnectorSession session, Optional<Set<String>> roles, Optional<Set<String>> grantees, OptionalLong limit)\n+    {\n+        /*\n+         * The Hive Metadata interface provides us with two ways to retrieve role grants:\n+         * 1. principals by single role\n+         * 2. roles by single principal\n+         *\n+         * We check the passed predicates to decide which path is most optimal.\n+         */\n+        if (grantees.isPresent()) {\n+            if (roles.isPresent() && roles.get().size() <= grantees.get().size() * 2) {\n+                // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n+                return getRoleGrantsByRoles(roles.get(), limit);\n+            }\n+            else {\n+                return getRoleGrantsByGrantees(grantees.get(), limit);\n+            }\n+        }\n+        else {\n+            // if roles are present use those, otherwise get a list of roles from the metastore\n+            return getRoleGrantsByRoles(roles.orElseGet(() -> metastore.listRoles()), limit);\n+        }\n+    }\n+\n+    private Set<RoleGrant> getRoleGrantsByGrantees(Set<String> grantees, OptionalLong limit)\n+    {\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();\n+        int count = 0;\n+        for (String grantee : grantees) {\n+            for (PrincipalType type : new PrincipalType[]{USER, ROLE}) {\n+                for (RoleGrant grant : metastore.listRoleGrants(new HivePrincipal(type, grantee))) {\n+                    if (limit.isPresent() && count >= limit.getAsLong()) {\n+                        return builder.build();\n+                    }\n+                    // Filter out the \"public\" role since it is not explicitly granted in Hive.\n+                    if (PUBLIC_ROLE_NAME.equals(grant.getRoleName())) {\n+                        continue;\n+                    }\n+                    count++;\n+                    builder.add(grant);\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    private Set<RoleGrant> getRoleGrantsByRoles(Set<String> roles, OptionalLong limit)\n+    {\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();\n+        int count = 0;\n+        for (String role : roles) {\n+            for (RoleGrant grant : metastore.listGrantedPrincipals(role)) {\n+                if (limit.isPresent() && count >= limit.getAsLong()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMDQwMA==", "bodyText": "you should verify limit before doing a call to HMS (in the middle loop)", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427730400", "createdAt": "2020-05-20T04:10:42Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -84,6 +88,69 @@ private static void checkRoleIsNotReserved(String role)\n         return ImmutableSet.copyOf(metastore.listRoles());\n     }\n \n+    @Override\n+    public Set<RoleGrant> listAllRoleGrants(ConnectorSession session, Optional<Set<String>> roles, Optional<Set<String>> grantees, OptionalLong limit)\n+    {\n+        /*\n+         * The Hive Metadata interface provides us with two ways to retrieve role grants:\n+         * 1. principals by single role\n+         * 2. roles by single principal\n+         *\n+         * We check the passed predicates to decide which path is most optimal.\n+         */\n+        if (grantees.isPresent()) {\n+            if (roles.isPresent() && roles.get().size() <= grantees.get().size() * 2) {\n+                // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n+                return getRoleGrantsByRoles(roles.get(), limit);\n+            }\n+            else {\n+                return getRoleGrantsByGrantees(grantees.get(), limit);\n+            }\n+        }\n+        else {\n+            // if roles are present use those, otherwise get a list of roles from the metastore\n+            return getRoleGrantsByRoles(roles.orElseGet(() -> metastore.listRoles()), limit);\n+        }\n+    }\n+\n+    private Set<RoleGrant> getRoleGrantsByGrantees(Set<String> grantees, OptionalLong limit)\n+    {\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();\n+        int count = 0;\n+        for (String grantee : grantees) {\n+            for (PrincipalType type : new PrincipalType[]{USER, ROLE}) {\n+                for (RoleGrant grant : metastore.listRoleGrants(new HivePrincipal(type, grantee))) {\n+                    if (limit.isPresent() && count >= limit.getAsLong()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMDQ5OQ==", "bodyText": "s/builder/roleGrants", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427730499", "createdAt": "2020-05-20T04:11:12Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -84,6 +88,69 @@ private static void checkRoleIsNotReserved(String role)\n         return ImmutableSet.copyOf(metastore.listRoles());\n     }\n \n+    @Override\n+    public Set<RoleGrant> listAllRoleGrants(ConnectorSession session, Optional<Set<String>> roles, Optional<Set<String>> grantees, OptionalLong limit)\n+    {\n+        /*\n+         * The Hive Metadata interface provides us with two ways to retrieve role grants:\n+         * 1. principals by single role\n+         * 2. roles by single principal\n+         *\n+         * We check the passed predicates to decide which path is most optimal.\n+         */\n+        if (grantees.isPresent()) {\n+            if (roles.isPresent() && roles.get().size() <= grantees.get().size() * 2) {\n+                // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n+                return getRoleGrantsByRoles(roles.get(), limit);\n+            }\n+            else {\n+                return getRoleGrantsByGrantees(grantees.get(), limit);\n+            }\n+        }\n+        else {\n+            // if roles are present use those, otherwise get a list of roles from the metastore\n+            return getRoleGrantsByRoles(roles.orElseGet(() -> metastore.listRoles()), limit);\n+        }\n+    }\n+\n+    private Set<RoleGrant> getRoleGrantsByGrantees(Set<String> grantees, OptionalLong limit)\n+    {\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMDUyMw==", "bodyText": "s/builder/roleGrants", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427730523", "createdAt": "2020-05-20T04:11:17Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -84,6 +88,69 @@ private static void checkRoleIsNotReserved(String role)\n         return ImmutableSet.copyOf(metastore.listRoles());\n     }\n \n+    @Override\n+    public Set<RoleGrant> listAllRoleGrants(ConnectorSession session, Optional<Set<String>> roles, Optional<Set<String>> grantees, OptionalLong limit)\n+    {\n+        /*\n+         * The Hive Metadata interface provides us with two ways to retrieve role grants:\n+         * 1. principals by single role\n+         * 2. roles by single principal\n+         *\n+         * We check the passed predicates to decide which path is most optimal.\n+         */\n+        if (grantees.isPresent()) {\n+            if (roles.isPresent() && roles.get().size() <= grantees.get().size() * 2) {\n+                // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n+                return getRoleGrantsByRoles(roles.get(), limit);\n+            }\n+            else {\n+                return getRoleGrantsByGrantees(grantees.get(), limit);\n+            }\n+        }\n+        else {\n+            // if roles are present use those, otherwise get a list of roles from the metastore\n+            return getRoleGrantsByRoles(roles.orElseGet(() -> metastore.listRoles()), limit);\n+        }\n+    }\n+\n+    private Set<RoleGrant> getRoleGrantsByGrantees(Set<String> grantees, OptionalLong limit)\n+    {\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();\n+        int count = 0;\n+        for (String grantee : grantees) {\n+            for (PrincipalType type : new PrincipalType[]{USER, ROLE}) {\n+                for (RoleGrant grant : metastore.listRoleGrants(new HivePrincipal(type, grantee))) {\n+                    if (limit.isPresent() && count >= limit.getAsLong()) {\n+                        return builder.build();\n+                    }\n+                    // Filter out the \"public\" role since it is not explicitly granted in Hive.\n+                    if (PUBLIC_ROLE_NAME.equals(grant.getRoleName())) {\n+                        continue;\n+                    }\n+                    count++;\n+                    builder.add(grant);\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    private Set<RoleGrant> getRoleGrantsByRoles(Set<String> roles, OptionalLong limit)\n+    {\n+        ImmutableSet.Builder<RoleGrant> builder = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMjIyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    /*\n          \n          \n            \n                     * The Hive Metadata interface provides us with two ways to retrieve role grants:\n          \n          \n            \n                     * 1. principals by single role\n          \n          \n            \n                     * 2. roles by single principal\n          \n          \n            \n                     *\n          \n          \n            \n                     * We check the passed predicates to decide which path is most optimal.\n          \n          \n            \n                     */\n          \n          \n            \n                    if (grantees.isPresent()) {\n          \n          \n            \n                        if (roles.isPresent() && roles.get().size() <= grantees.get().size() * 2) {\n          \n          \n            \n                            // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n          \n          \n            \n                            return getRoleGrantsByRoles(roles.get(), limit);\n          \n          \n            \n                        }\n          \n          \n            \n                        else {\n          \n          \n            \n                            return getRoleGrantsByGrantees(grantees.get(), limit);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        // if roles are present use those, otherwise get a list of roles from the metastore\n          \n          \n            \n                        return getRoleGrantsByRoles(roles.orElseGet(() -> metastore.listRoles()), limit);\n          \n          \n            \n                    }\n          \n          \n            \n                    Set<String> actualRoles = roles.orElseGet(() -> metastore.listRoles());\n          \n          \n            \n                  \n          \n          \n            \n                    // choose more efficient path\n          \n          \n            \n                    if (grantees.isPresent() && actualRoles.size() > grantees.get().size() * 2) {\n          \n          \n            \n                            // 2x because we check two grantee types (ROLE or USER)\n          \n          \n            \n                            return getRoleGrantsByGrantees(grantees.get(), limit);\n          \n          \n            \n                    }\n          \n          \n            \n                    return getRoleGrantsByRoles(actualRoles, limit);", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427732226", "createdAt": "2020-05-20T04:18:29Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -84,6 +88,69 @@ private static void checkRoleIsNotReserved(String role)\n         return ImmutableSet.copyOf(metastore.listRoles());\n     }\n \n+    @Override\n+    public Set<RoleGrant> listAllRoleGrants(ConnectorSession session, Optional<Set<String>> roles, Optional<Set<String>> grantees, OptionalLong limit)\n+    {\n+        /*\n+         * The Hive Metadata interface provides us with two ways to retrieve role grants:\n+         * 1. principals by single role\n+         * 2. roles by single principal\n+         *\n+         * We check the passed predicates to decide which path is most optimal.\n+         */\n+        if (grantees.isPresent()) {\n+            if (roles.isPresent() && roles.get().size() <= grantees.get().size() * 2) {\n+                // 2x because for the grantees we do not know the grantee type (ROLE or USER)\n+                return getRoleGrantsByRoles(roles.get(), limit);\n+            }\n+            else {\n+                return getRoleGrantsByGrantees(grantees.get(), limit);\n+            }\n+        }\n+        else {\n+            // if roles are present use those, otherwise get a list of roles from the metastore\n+            return getRoleGrantsByRoles(roles.orElseGet(() -> metastore.listRoles()), limit);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMzE4OQ==", "bodyText": "use LIMIT 5", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427733189", "createdAt": "2020-05-20T04:22:29Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4973,6 +4973,113 @@ public void testShowColumnMetadata()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testRoleAuthorizationDescriptors()\n+    {\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(\"CREATE ROLE test_r_a_d1\");\n+        assertUpdate(\"CREATE ROLE test_r_a_d2\");\n+        assertUpdate(\"CREATE ROLE test_r_a_d3\");\n+\n+        // nothing showing because no roles have been granted\n+        assertQueryReturnsEmptyResult(\"SELECT * FROM information_schema.role_authorization_descriptors\");\n+\n+        // role_authorization_descriptors is not accessible for a non-admin user, even when it's empty\n+        assertQueryFails(user, \"SELECT * FROM information_schema.role_authorization_descriptors\",\n+                \"Access Denied: Cannot select from table information_schema.role_authorization_descriptors\");\n+\n+        assertUpdate(\"GRANT test_r_a_d1 TO USER user\");\n+        // user with same name as a role\n+        assertUpdate(\"GRANT test_r_a_d2 TO USER test_r_a_d1\");\n+        assertUpdate(\"GRANT test_r_a_d2 TO USER user1 WITH ADMIN OPTION\");\n+        assertUpdate(\"GRANT test_r_a_d2 TO USER user2\");\n+        assertUpdate(\"GRANT test_r_a_d2 TO ROLE test_r_a_d1\");\n+\n+        // role_authorization_descriptors is not accessible for a non-admin user\n+        assertQueryFails(user, \"SELECT * FROM information_schema.role_authorization_descriptors\",\n+                \"Access Denied: Cannot select from table information_schema.role_authorization_descriptors\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors\",\n+                \"VALUES \" +\n+                        \"('test_r_a_d2', null, null, 'test_r_a_d1', 'ROLE', 'NO'),\" +\n+                        \"('test_r_a_d2', null, null, 'user2', 'USER', 'NO'),\" +\n+                        \"('test_r_a_d2', null, null, 'user1', 'USER', 'YES'),\" +\n+                        \"('test_r_a_d2', null, null, 'test_r_a_d1', 'USER', 'NO'),\" +\n+                        \"('test_r_a_d1', null, null, 'user', 'USER', 'NO')\");\n+\n+        assertQuery(\n+                \"SELECT * FROM information_schema.role_authorization_descriptors LIMIT 1000000000\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczNjM5NA==", "bodyText": "Framework might have such tests but for regular tables. I think we need to add new ones for information_schema tables.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427736394", "createdAt": "2020-05-20T04:36:58Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaMetadata.java", "diffHunk": "@@ -182,7 +186,7 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         }\n \n         return Optional.of(new LimitApplicationResult<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExNjIxNg=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczODUxNg==", "bodyText": "Presto SPI do not assume much about authorization system implementation. Having separate method allows it to decide how it should behave. I would prefer to have separate method.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427738516", "createdAt": "2020-05-20T04:46:09Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaPageSource.java", "diffHunk": "@@ -346,13 +355,35 @@ private void addRolesRecords()\n         }\n     }\n \n+    private void addRoleAuthorizationDescriptorRecords()\n+    {\n+        try {\n+            accessControl.checkCanShowRoles(session.toSecurityContext(), catalogName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMDQ0Nw=="}, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczOTMzOQ==", "bodyText": "Do you think it is doable to implement predicate and limit pushdown only here (instead of SqlStandardAccessControlMetadata)? That way it will out of the box for any other connectors or even for any access control metadata in hive. That would possibly require adding different methods to metadata (more granular ones).\nWDYT?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427739339", "createdAt": "2020-05-20T04:49:53Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaPageSource.java", "diffHunk": "@@ -346,13 +355,35 @@ private void addRolesRecords()\n         }\n     }\n \n+    private void addRoleAuthorizationDescriptorRecords()\n+    {\n+        try {\n+            accessControl.checkCanShowRoles(session.toSecurityContext(), catalogName);\n+        }\n+        catch (AccessDeniedException exception) {\n+            return;\n+        }\n+\n+        for (RoleGrant grant : metadata.listAllRoleGrants(session, catalogName, roles, grantees, limit)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczOTg3OQ==", "bodyText": "can you use assertMetadataCalls to make sure that predicate pushdown and limit works.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r427739879", "createdAt": "2020-05-20T04:52:09Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/tests/TestInformationSchemaConnector.java", "diffHunk": "@@ -97,6 +97,17 @@ public void testLimit()\n         assertQuery(\"SELECT count(*) FROM (SELECT * FROM test_catalog.information_schema.tables LIMIT 1000)\", \"VALUES 1000\");\n     }\n \n+    @Test\n+    public void testRoleAuthorizationDescriptor()\n+    {\n+        assertQuery(\"SELECT count(*) FROM test_catalog.information_schema.role_authorization_descriptors\", \"VALUES 100\");\n+        assertQuery(\"SELECT count(*) FROM test_catalog.information_schema.roles\", \"VALUES 50\");\n+        assertQuery(\"SELECT count(*) FROM test_catalog.information_schema.enabled_roles\", \"VALUES 50\");\n+        assertQuery(\"SELECT count(*) FROM test_catalog.information_schema.applicable_roles\", \"VALUES 1\");\n+        assertQuery(\"SELECT role_name FROM test_catalog.information_schema.role_authorization_descriptors WHERE grantee = 'user5'\", \"VALUES ('role2')\");\n+        assertQuery(\"SELECT grantee FROM test_catalog.information_schema.role_authorization_descriptors WHERE role_name = 'role2'\", \"VALUES ('user4'), ('user5')\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5ODYwNDA3", "url": "https://github.com/trinodb/trino/pull/3535#pullrequestreview-419860407", "createdAt": "2020-05-28T07:51:47Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzo1MTo0N1rOGbppMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzo1ODozNFrOGbp3iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY0NzAyNg==", "bodyText": "You might want to invert the condition (just to have less code nested)", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r431647026", "createdAt": "2020-05-28T07:51:47Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaMetadata.java", "diffHunk": "@@ -242,6 +251,65 @@ public static boolean isTablesEnumeratingTable(InformationSchemaTable table)\n         return ImmutableSet.of(COLUMNS, VIEWS, TABLES, TABLE_PRIVILEGES).contains(table);\n     }\n \n+    private Optional<Set<String>> calculateRoles(\n+            ConnectorSession connectorSession,\n+            TupleDomain<ColumnHandle> constraint,\n+            Optional<Predicate<Map<ColumnHandle, NullableValue>>> predicate)\n+    {\n+        if (constraint.isNone()) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<Set<String>> roles = filterString(constraint, ROLE_NAME_COLUMN_HANDLE);\n+        if (roles.isPresent()) {\n+            Set<String> result = roles.get().stream()\n+                    .filter(this::isLowerCase)\n+                    .filter(role -> !predicate.isPresent() || predicate.get().test(roleAsFixedValues(role)))\n+                    .collect(toImmutableSet());\n+\n+            if (result.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            if (result.size() <= MAX_ROLE_COUNT) {\n+                return Optional.of(result);\n+            }\n+        }\n+\n+        if (!predicate.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Session session = ((FullConnectorSession) connectorSession).getSession();\n+        return Optional.of(metadata.listRoles(session, catalogName)\n+                .stream()\n+                .filter(role -> predicate.get().test(roleAsFixedValues(role)))\n+                .collect(toImmutableSet()));\n+    }\n+\n+    private Optional<Set<String>> calculateGrantees(\n+            ConnectorSession connectorSession,\n+            TupleDomain<ColumnHandle> constraint,\n+            Optional<Predicate<Map<ColumnHandle, NullableValue>>> predicate)\n+    {\n+        if (constraint.isNone()) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<Set<String>> grantees = filterString(constraint, GRANTEE_COLUMN_HANDLE);\n+        if (grantees.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1MDY5OQ==", "bodyText": "listRowGrantsCallsCounter, rolesPushedCounter, rolesPushedCounter and limitPushedCounter should be grouped into a single bean that represents interaction with metadata call. Typically we had single counter per method, you had 4. Using bean we would maintain having single counter per method, where one counter is just complex.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r431650699", "createdAt": "2020-05-28T07:58:34Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/CountingMockConnector.java", "diffHunk": "@@ -101,6 +121,19 @@ private ConnectorFactory getConnectorFactory()\n                     getColumnsCallsCounter.incrementAndGet();\n                     return defaultGetColumns().apply(schemaTableName);\n                 })\n+                .withRoleGrants((connectorSession, roles, grantees, limit) -> {\n+                    listRowGrantsCallsCounter.incrementAndGet();\n+                    if (roles.isPresent()) {\n+                        rolesPushedCounter.incrementAndGet();\n+                    }\n+                    if (grantees.isPresent()) {\n+                        granteesPushedCounter.incrementAndGet();\n+                    }\n+                    if (limit.isPresent()) {\n+                        limitPushedCounter.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODM4MjM1", "url": "https://github.com/trinodb/trino/pull/3535#pullrequestreview-420838235", "createdAt": "2020-05-29T10:34:26Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozNDoyNlrOGcXjIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozNTo0MFrOGcXlKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5OTEzNg==", "bodyText": "That is very nice. How about going one step further and having this more fluent, like\nnew MetadataCallsCount().with(roleGrantCount(/*method calls count*/ 1).withGranteesPushedDown(1));\n\n?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r432399136", "createdAt": "2020-05-29T10:34:26Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/tests/TestInformationSchemaConnector.java", "diffHunk": "@@ -97,6 +97,48 @@ public void testLimit()\n         assertQuery(\"SELECT count(*) FROM (SELECT * FROM test_catalog.information_schema.tables LIMIT 1000)\", \"VALUES 1000\");\n     }\n \n+    @Test\n+    public void testRoleAuthorizationDescriptor()\n+    {\n+        assertQuery(\"SELECT count(*) FROM test_catalog.information_schema.role_authorization_descriptors\", \"VALUES 100\");\n+        assertQuery(\"SELECT count(*) FROM test_catalog.information_schema.roles\", \"VALUES 50\");\n+        assertQuery(\"SELECT count(*) FROM test_catalog.information_schema.enabled_roles\", \"VALUES 50\");\n+        assertQuery(\"SELECT count(*) FROM test_catalog.information_schema.applicable_roles\", \"VALUES 1\");\n+        assertQuery(\"SELECT role_name FROM test_catalog.information_schema.role_authorization_descriptors WHERE grantee = 'user5'\", \"VALUES ('role2')\");\n+        assertQuery(\"SELECT grantee FROM test_catalog.information_schema.role_authorization_descriptors WHERE role_name = 'role2'\", \"VALUES ('user4'), ('user5')\");\n+\n+        assertMetadataCalls(\n+                \"SELECT count(*) FROM test_catalog.information_schema.role_authorization_descriptors\", \"VALUES 100\",\n+                new MetadataCallsCount()\n+                        .withRoleGrantCount(1, 0, 0, 0));\n+\n+        assertMetadataCalls(\n+                \"SELECT role_name FROM test_catalog.information_schema.role_authorization_descriptors WHERE grantee = 'user5'\", \"VALUES ('role2')\",\n+                new MetadataCallsCount()\n+                        .withRoleGrantCount(1, 0, 1, 0));\n+\n+        assertMetadataCalls(\n+                \"SELECT grantee FROM test_catalog.information_schema.role_authorization_descriptors WHERE role_name = 'role2'\", \"VALUES ('user4'), ('user5')\",\n+                new MetadataCallsCount()\n+                        .withRoleGrantCount(1, 1, 0, 0));\n+\n+        assertMetadataCalls(\n+                \"SELECT grantee FROM test_catalog.information_schema.role_authorization_descriptors WHERE role_name = 'role2' AND grantee = 'user4'\", \"VALUES 'user4'\",\n+                new MetadataCallsCount()\n+                        .withRoleGrantCount(1, 1, 1, 0));\n+\n+        assertMetadataCalls(\n+                \"SELECT count(*) FROM (SELECT * FROM test_catalog.information_schema.role_authorization_descriptors LIMIT 1)\", \"VALUES 1\",\n+                new MetadataCallsCount()\n+                        .withRoleGrantCount(1, 0, 0, 1));\n+\n+        // verify that predicate and LIMIT are not pushed down together\n+        assertMetadataCalls(\n+                \"SELECT count(*) FROM (SELECT * FROM test_catalog.information_schema.role_authorization_descriptors WHERE grantee = 'user5' LIMIT 1)\", \"VALUES 1\",\n+                new MetadataCallsCount()\n+                        .withRoleGrantCount(1, 0, 1, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5OTQzMQ==", "bodyText": "RoleGrantCounter?", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r432399431", "createdAt": "2020-05-29T10:35:07Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/CountingMockConnector.java", "diffHunk": "@@ -167,6 +202,103 @@ public String toString()\n                     .add(\"listSchemasCount\", listSchemasCount)\n                     .add(\"listTablesCount\", listTablesCount)\n                     .add(\"getColumnsCount\", getColumnsCount)\n+                    .add(\"roleGrantCount\", roleGrantCount)\n+                    .toString();\n+        }\n+    }\n+\n+    public static class RoleGrantCounter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5OTY1OA==", "bodyText": "I would prefer to have bean to be immutable. incrementListRoleGrants could return new instance. Then you don't need two classes.", "url": "https://github.com/trinodb/trino/pull/3535#discussion_r432399658", "createdAt": "2020-05-29T10:35:40Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/CountingMockConnector.java", "diffHunk": "@@ -167,6 +202,103 @@ public String toString()\n                     .add(\"listSchemasCount\", listSchemasCount)\n                     .add(\"listTablesCount\", listTablesCount)\n                     .add(\"getColumnsCount\", getColumnsCount)\n+                    .add(\"roleGrantCount\", roleGrantCount)\n+                    .toString();\n+        }\n+    }\n+\n+    public static class RoleGrantCounter\n+    {\n+        private final AtomicLong listRowGrantsCallsCounter = new AtomicLong();\n+        private final AtomicLong rolesPushedCounter = new AtomicLong();\n+        private final AtomicLong granteesPushedCounter = new AtomicLong();\n+        private final AtomicLong limitPushedCounter = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef9b5f045d179c3afc21324d4a2b550c4baeb58f", "author": {"user": {"login": "lhofhansl", "name": null}}, "url": "https://github.com/trinodb/trino/commit/ef9b5f045d179c3afc21324d4a2b550c4baeb58f", "committedDate": "2020-05-29T17:38:32Z", "message": "Add information_schema.role_authorization_descriptors\n\nThe schema of this table is:\nrole_nane | grantor | grantor_type | grantee | grantee_type | is_grantable\n\nFor Hive, queries on this table are translated to calls to\nmetastore.get_principals_in_role or metastore.get_role_grants_for_principal,\nwith proper predicate pushdown to avoid excessive requests to the metastore.\n\ngrantor and grantor_type are not yet implemented and always NULL."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1644, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}