{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3ODkyNDQw", "number": 4141, "title": "Return null columns in result to match previous behaviour", "bodyText": "#2860 broke TestingPrestoClient inside addResults function:\nif (types.get() == null && statusInfo.getColumns() != null) {\n     types.set(getTypes(statusInfo.getColumns()));\n}\n\nThis PR restores old behaviour.\nFixes #4169", "createdAt": "2020-06-22T11:59:08Z", "url": "https://github.com/trinodb/trino/pull/4141", "merged": true, "mergeCommit": {"oid": "b24124ffec2f6c2b6c006a7e4b30740f345ab9bc"}, "closed": true, "closedAt": "2020-06-24T22:14:14Z", "author": {"login": "wendigo"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctwPkDgFqTQzNDg4NjI5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuc78ggBqjM0Nzg0MDAwOTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0ODg2Mjk2", "url": "https://github.com/trinodb/trino/pull/4141#pullrequestreview-434886296", "createdAt": "2020-06-22T12:45:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjo0NTowN1rOGm_AWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjo0NTowN1rOGm_AWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUzMTM1NA==", "bodyText": "I do not know this part of code so I do not want to make final call.\nThe question which comes to my mind is: are there legitimate cases when column list is empty and we want to distinguish it from null?", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r443531354", "createdAt": "2020-06-22T12:45:07Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -90,8 +92,13 @@ public boolean isEmpty()\n         return totalRows == 0;\n     }\n \n+    @Nullable\n     public List<Column> getColumns()\n     {\n+        if (columns.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTc1MzM2", "url": "https://github.com/trinodb/trino/pull/4141#pullrequestreview-434975336", "createdAt": "2020-06-22T14:25:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNToyMVrOGnDBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozMjoyOVrOGnDX0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NzIxOA==", "bodyText": "Either revert the change here, or update data to be Optional as well", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r443597218", "createdAt": "2020-06-22T14:25:21Z", "author": {"login": "findepi"}, "path": "presto-client/src/main/java/io/prestosql/client/QueryResults.java", "diffHunk": "@@ -79,7 +80,7 @@ public QueryResults(\n             URI infoUri,\n             URI partialCancelUri,\n             URI nextUri,\n-            List<Column> columns,\n+            Optional<List<Column>> columns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMDMwMQ==", "bodyText": "should types be treated the same? ie also become Optional?", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r443600301", "createdAt": "2020-06-22T14:29:14Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -82,15 +82,15 @@ private QueryResultRows(Session session, List<Type> types, List<Column> columns,\n         this.currentPage = this.pages.pollFirst();\n         this.supportsParametricDateTime = session.getClientCapabilities().contains(ClientCapabilities.PARAMETRIC_DATETIME.toString());\n \n-        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMDg2Mw==", "bodyText": "you can this right above, so that feels redundnat", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r443600863", "createdAt": "2020-06-22T14:29:56Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -107,7 +107,14 @@ public long getTotalRowsCount()\n     public Optional<Long> getUpdateCount()\n     {\n         // We should have exactly single bigint value as an update count.\n-        if (totalRows != 1 || columns.size() != 1 || !columns.get(0).getType().equals(StandardTypes.BIGINT)) {\n+        if (totalRows != 1 || columns.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        verify(columns.isPresent(), \"columns are not present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMTgyMQ==", "bodyText": "current implies this changes over time, while column information does not.\nyou can use columns for the local var (yes, shadowing the field)", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r443601821", "createdAt": "2020-06-22T14:31:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -107,7 +107,14 @@ public long getTotalRowsCount()\n     public Optional<Long> getUpdateCount()\n     {\n         // We should have exactly single bigint value as an update count.\n-        if (totalRows != 1 || columns.size() != 1 || !columns.get(0).getType().equals(StandardTypes.BIGINT)) {\n+        if (totalRows != 1 || columns.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        verify(columns.isPresent(), \"columns are not present\");\n+        List<Column> currentColumns = columns.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMjg5OQ==", "bodyText": "add a ctor validation that presence of data implies presence of columns", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r443602899", "createdAt": "2020-06-22T14:32:29Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -150,7 +157,8 @@ public long getTotalRowsCount()\n \n     private Optional<List<Object>> getRowValues()\n     {\n-        List<Object> row = new ArrayList<>(columns.size());\n+        verify(columns.isPresent(), \"columns are not present\");\n+        List<Object> row = new ArrayList<>(columns.get().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzAyODEy", "url": "https://github.com/trinodb/trino/pull/4141#pullrequestreview-435702812", "createdAt": "2020-06-23T11:49:43Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTo0OTo0M1rOGnllqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTo1NDo0OFrOGnlvtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2MzQ5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return columns.map(columns -> columns.stream().map(ColumnAndType::getColumn).collect(toUnmodifiableList()));\n          \n          \n            \n                    return columns.map(columns -> columns.stream()\n          \n          \n            \n                    .map(ColumnAndType::getColumn)\n          \n          \n            \n                    .collect(toImmutableList()));", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444163499", "createdAt": "2020-06-23T11:49:43Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -66,33 +64,27 @@\n     private int rowPosition = -1;\n     private int inPageIndex = -1;\n \n-    private QueryResultRows(Session session, List<Type> types, List<Column> columns, List<Page> pages)\n-    {\n-        this(session, types, columns, pages, null);\n-    }\n-\n-    private QueryResultRows(Session session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    private QueryResultRows(Session session, Optional<List<ColumnAndType>> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n     {\n         this.session = requireNonNull(session, \"session is null\").toConnectorSession();\n-        this.types = requireNonNull(types, \"types is null\");\n         this.columns = requireNonNull(columns, \"columns is null\");\n         this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n         this.exceptionConsumer = Optional.ofNullable(exceptionConsumer);\n         this.totalRows = countRows(pages);\n         this.currentPage = this.pages.pollFirst();\n         this.supportsParametricDateTime = session.getClientCapabilities().contains(ClientCapabilities.PARAMETRIC_DATETIME.toString());\n \n-        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+        verify(totalRows == 0 || (totalRows > 0 && columns.isPresent()), \"data present without columns and types\");\n     }\n \n     public boolean isEmpty()\n     {\n         return totalRows == 0;\n     }\n \n-    public List<Column> getColumns()\n+    public Optional<List<Column>> getColumns()\n     {\n-        return columns;\n+        return columns.map(columns -> columns.stream().map(ColumnAndType::getColumn).collect(toUnmodifiableList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2Mzg0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<ColumnAndType> columns = this.columns.get();\n          \n          \n            \n                    List<ColumnAndType> columns = this.columns.orElseThrow();\n          \n      \n    \n    \n  \n\n(get() triggers an IDE warning)", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444163849", "createdAt": "2020-06-23T11:50:24Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -150,10 +148,13 @@ public long getTotalRowsCount()\n \n     private Optional<List<Object>> getRowValues()\n     {\n+        // types are present if data is present\n+        List<ColumnAndType> columns = this.columns.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2NDg3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        verify(columns.size() == types.size(), \"columns and types size mismatch\");\n          \n          \n            \n            \n          \n          \n            \n                        ImmutableList.Builder<ColumnAndType> builder = ImmutableList.builder();\n          \n          \n            \n            \n          \n          \n            \n                        for (int i = 0; i < columns.size(); i++) {\n          \n          \n            \n                            builder.add(new ColumnAndType(columns.get(i), types.get(i)));\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        return Optional.of(builder.build());\n          \n          \n            \n                        checkArgument(columns != null && types != null, \"columns and types must be present at the same time\");\n          \n          \n            \n                        checkArgument(columns.size() == types.size(), \"columns and types size mismatch\");\n          \n          \n            \n            \n          \n          \n            \n                        ImmutableList.Builder<ColumnAndType> builder = ImmutableList.builder();\n          \n          \n            \n                        for (int i = 0; i < columns.size(); i++) {\n          \n          \n            \n                            builder.add(new ColumnAndType(columns.get(i), types.get(i)));\n          \n          \n            \n                        }\n          \n          \n            \n                        return Optional.of(builder.build());", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444164874", "createdAt": "2020-06-23T11:52:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -274,10 +270,57 @@ public QueryResultRows build()\n         {\n             return new QueryResultRows(\n                     session,\n-                    types,\n                     columns,\n                     pages.build(),\n                     exceptionConsumer);\n         }\n+\n+        private static Optional<List<ColumnAndType>> combine(List<Column> columns, List<Type> types)\n+        {\n+            if (columns == null || types == null) {\n+                return Optional.empty();\n+            }\n+\n+            verify(columns.size() == types.size(), \"columns and types size mismatch\");\n+\n+            ImmutableList.Builder<ColumnAndType> builder = ImmutableList.builder();\n+\n+            for (int i = 0; i < columns.size(); i++) {\n+                builder.add(new ColumnAndType(columns.get(i), types.get(i)));\n+            }\n+\n+            return Optional.of(builder.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2NTU4Mg==", "bodyText": "That's a bit unintuitive because Column also has type information (String type and ClientTypeSignature typeSignature)\ncc @electrum ?", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444165582", "createdAt": "2020-06-23T11:53:47Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -274,10 +270,57 @@ public QueryResultRows build()\n         {\n             return new QueryResultRows(\n                     session,\n-                    types,\n                     columns,\n                     pages.build(),\n                     exceptionConsumer);\n         }\n+\n+        private static Optional<List<ColumnAndType>> combine(List<Column> columns, List<Type> types)\n+        {\n+            if (columns == null || types == null) {\n+                return Optional.empty();\n+            }\n+\n+            verify(columns.size() == types.size(), \"columns and types size mismatch\");\n+\n+            ImmutableList.Builder<ColumnAndType> builder = ImmutableList.builder();\n+\n+            for (int i = 0; i < columns.size(); i++) {\n+                builder.add(new ColumnAndType(columns.get(i), types.get(i)));\n+            }\n+\n+            return Optional.of(builder.build());\n+        }\n+    }\n+\n+    private static class ColumnAndType\n+    {\n+        private final Column column;\n+        private final Type type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2NjA2OA==", "bodyText": "This is a new verification, it should be added as a separate commit.\n(when splitting, make sure to split the tests accordingly too)", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444166068", "createdAt": "2020-06-23T11:54:48Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -66,33 +64,27 @@\n     private int rowPosition = -1;\n     private int inPageIndex = -1;\n \n-    private QueryResultRows(Session session, List<Type> types, List<Column> columns, List<Page> pages)\n-    {\n-        this(session, types, columns, pages, null);\n-    }\n-\n-    private QueryResultRows(Session session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    private QueryResultRows(Session session, Optional<List<ColumnAndType>> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n     {\n         this.session = requireNonNull(session, \"session is null\").toConnectorSession();\n-        this.types = requireNonNull(types, \"types is null\");\n         this.columns = requireNonNull(columns, \"columns is null\");\n         this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n         this.exceptionConsumer = Optional.ofNullable(exceptionConsumer);\n         this.totalRows = countRows(pages);\n         this.currentPage = this.pages.pollFirst();\n         this.supportsParametricDateTime = session.getClientCapabilities().contains(ClientCapabilities.PARAMETRIC_DATETIME.toString());\n \n-        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+        verify(totalRows == 0 || (totalRows > 0 && columns.isPresent()), \"data present without columns and types\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTMwNjIw", "url": "https://github.com/trinodb/trino/pull/4141#pullrequestreview-436130620", "createdAt": "2020-06-23T20:29:21Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoyOToyMVrOGn5Y5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTozMjozMFrOGn7aDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NzkxMA==", "bodyText": "This shouldn't return Optional since it always returns something. It never returns empty so having it return Optional is misleading.", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444487910", "createdAt": "2020-06-23T20:29:21Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -274,10 +270,54 @@ public QueryResultRows build()\n         {\n             return new QueryResultRows(\n                     session,\n-                    types,\n                     columns,\n                     pages.build(),\n                     exceptionConsumer);\n         }\n+\n+        private static Optional<List<ColumnAndType>> combine(List<Column> columns, List<Type> types)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4OTIzMQ==", "bodyText": "I agree, but don't see a way around it since Column is a wire protocol object.", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444489231", "createdAt": "2020-06-23T20:32:02Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -274,10 +270,57 @@ public QueryResultRows build()\n         {\n             return new QueryResultRows(\n                     session,\n-                    types,\n                     columns,\n                     pages.build(),\n                     exceptionConsumer);\n         }\n+\n+        private static Optional<List<ColumnAndType>> combine(List<Column> columns, List<Type> types)\n+        {\n+            if (columns == null || types == null) {\n+                return Optional.empty();\n+            }\n+\n+            verify(columns.size() == types.size(), \"columns and types size mismatch\");\n+\n+            ImmutableList.Builder<ColumnAndType> builder = ImmutableList.builder();\n+\n+            for (int i = 0; i < columns.size(); i++) {\n+                builder.add(new ColumnAndType(columns.get(i), types.get(i)));\n+            }\n+\n+            return Optional.of(builder.build());\n+        }\n+    }\n+\n+    private static class ColumnAndType\n+    {\n+        private final Column column;\n+        private final Type type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2NTU4Mg=="}, "originalCommit": null, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxNDU1OQ==", "bodyText": "Let's verify the contents as well", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444514559", "createdAt": "2020-06-23T21:18:38Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/TestServer.java", "diffHunk": "@@ -127,6 +128,27 @@ public void testInvalidSessionError()\n         assertEquals(queryError.getMessage(), expected.getMessage());\n     }\n \n+    @Test\n+    public void testFirstResponseColumns()\n+    {\n+        List<QueryResults> queryResults = postQuery(request -> request\n+                .setBodyGenerator(createStaticBodyGenerator(\"show catalogs\", UTF_8))\n+                .setHeader(PRESTO_CATALOG, \"catalog\")\n+                .setHeader(PRESTO_SCHEMA, \"schema\")\n+                .setHeader(PRESTO_PATH, \"path\"))\n+                .map(JsonResponse::getValue)\n+                .collect(toImmutableList());\n+\n+        QueryResults first = queryResults.get(0);\n+        QueryResults last = queryResults.get(queryResults.size() - 1);\n+\n+        assertNull(first.getColumns());\n+        assertEquals(first.getStats().getState(), \"QUEUED\");\n+\n+        assertNotNull(last.getColumns());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxODAyNg==", "bodyText": "Use orElseThrow() for all of these get() calls as that's the new preferred method when the value presence is not previously checked (so the expected behavior of throwing is clear).", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444518026", "createdAt": "2020-06-23T21:26:18Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -65,7 +66,7 @@ public void shouldReturnSingleValue()\n \n         assertThat((Iterable<? extends List<Object>>) rows).as(\"rows\").isNotEmpty();\n         assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(true));\n-        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.getColumns().get()).containsOnly(column);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxOTE3OA==", "bodyText": "Maybe extract a constant for this since it's shared across tests.", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444519178", "createdAt": "2020-06-23T21:28:42Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -232,6 +233,59 @@ public void shouldHandleNullValues()\n                 .containsExactly(newArrayList(0, null), newArrayList(1, null), newArrayList(2, true));\n     }\n \n+    @Test\n+    public void shouldNotThrowWhenDataAndColumnsAreMissing()\n+    {\n+        QueryResultRows.empty(getSession());\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"columns and types size mismatch\")\n+    public void shouldThrowWhenColumnsAndTypesSizeMismatch()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BooleanType.BOOLEAN);\n+\n+        List<Page> pages = rowPagesBuilder(types)\n+                .row(0, null)\n+                .build();\n+\n+        queryResultRowsBuilder(getSession())\n+                .addPages(pages)\n+                .withColumnsAndTypes(columns, types)\n+                .build();\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"columns and types must be present at the same time\")\n+    public void shouldThrowWhenColumnsAreNull()\n+    {\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BooleanType.BOOLEAN);\n+\n+        List<Page> pages = rowPagesBuilder(types)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxOTc2MQ==", "bodyText": "We could shorten this to column now", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444519761", "createdAt": "2020-06-23T21:29:56Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -178,10 +178,10 @@ else if (type instanceof TimestampWithTimeZoneType && !supportsParametricDateTim\n         return Optional.of(unmodifiableList(row));\n     }\n \n-    private void propagateException(int row, int column, ColumnAndType columnAndType, Throwable cause)\n+    private void propagateException(int row, ColumnAndType columnAndType, Throwable cause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMDk3NQ==", "bodyText": "We'd need to annotate these parameters with @Nullable as well. Instead of pushing nulls further, let's move the null checks into the caller.", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444520975", "createdAt": "2020-06-23T21:32:30Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -280,6 +282,10 @@ public QueryResultRows build()\n \n         private static Optional<List<ColumnAndType>> combine(List<Column> columns, List<Type> types)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzgyMTEz", "url": "https://github.com/trinodb/trino/pull/4141#pullrequestreview-436782113", "createdAt": "2020-06-24T15:51:19Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo1MToxOVrOGoYc4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoyODowN1rOGoZ5eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NjgzMw==", "bodyText": "Inverting an expression makes it harder to read. We can write as\nif (columns != null || types != null)", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444996833", "createdAt": "2020-06-24T15:51:19Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -245,10 +246,11 @@ public Builder addPages(List<Page> page)\n             return this;\n         }\n \n-        public Builder withColumns(List<Column> columns, List<Type> types)\n+        public Builder withColumnsAndTypes(@Nullable List<Column> columns, @Nullable List<Type> types)\n         {\n-            this.columns = firstNonNull(columns, emptyList());\n-            this.types = firstNonNull(types, emptyList());\n+            if (!(columns == null && types == null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NzM3Ng==", "bodyText": "Move this check into the caller. Otherwise we need to annotate the arguments with @Nullable", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444997376", "createdAt": "2020-06-24T15:52:07Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -274,10 +275,54 @@ public QueryResultRows build()\n         {\n             return new QueryResultRows(\n                     session,\n-                    types,\n                     columns,\n                     pages.build(),\n                     exceptionConsumer);\n         }\n+\n+        private static List<ColumnAndType> combine(List<Column> columns, List<Type> types)\n+        {\n+            checkArgument(columns != null && types != null, \"columns and types must be present at the same time\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5ODAzMw==", "bodyText": "This is getting long, please wrap the arguments for readability", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r444998033", "createdAt": "2020-06-24T15:53:07Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -180,10 +180,10 @@ else if (type instanceof TimestampWithTimeZoneType && !supportsParametricDateTim\n         return Optional.of(unmodifiableList(row));\n     }\n \n-    private void propagateException(int row, int column, ColumnAndType columnAndType, Throwable cause)\n+    private void propagateException(int row, ColumnAndType column, Throwable cause)\n     {\n         // columns and rows are 0-indexed\n-        String message = format(\"Could not serialize type '%s' value at position %d:%d\", columnAndType.getColumn().getType(), row + 1, column + 1);\n+        String message = format(\"Could not serialize column '%s' of type '%s' at position %d:%d\", column.getColumn().getName(), column.getType(), row + 1, column.getPosition() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMDUzNw==", "bodyText": "See comment. We should verify the contents here", "url": "https://github.com/trinodb/trino/pull/4141#discussion_r445020537", "createdAt": "2020-06-24T16:28:07Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/TestServer.java", "diffHunk": "@@ -127,6 +128,27 @@ public void testInvalidSessionError()\n         assertEquals(queryError.getMessage(), expected.getMessage());\n     }\n \n+    @Test\n+    public void testFirstResponseColumns()\n+    {\n+        List<QueryResults> queryResults = postQuery(request -> request\n+                .setBodyGenerator(createStaticBodyGenerator(\"show catalogs\", UTF_8))\n+                .setHeader(PRESTO_CATALOG, \"catalog\")\n+                .setHeader(PRESTO_SCHEMA, \"schema\")\n+                .setHeader(PRESTO_PATH, \"path\"))\n+                .map(JsonResponse::getValue)\n+                .collect(toImmutableList());\n+\n+        QueryResults first = queryResults.get(0);\n+        QueryResults last = queryResults.get(queryResults.size() - 1);\n+\n+        assertNull(first.getColumns());\n+        assertEquals(first.getStats().getState(), \"QUEUED\");\n+\n+        assertNotNull(last.getColumns());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxNDU1OQ=="}, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf8947fab66d462dc691b7e79b24cdbf52a6054a", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/bf8947fab66d462dc691b7e79b24cdbf52a6054a", "committedDate": "2020-06-24T16:43:15Z", "message": "Return null columns in result to match previous behaviour"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bc3c831e443344cf87660caf63ac974f6aecaa3", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/5bc3c831e443344cf87660caf63ac974f6aecaa3", "committedDate": "2020-06-24T16:43:15Z", "message": "Improve exception message on serialization error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1914035e1e2adb650ddc810bb73a34a67b148565", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/1914035e1e2adb650ddc810bb73a34a67b148565", "committedDate": "2020-06-24T16:43:16Z", "message": "Verify if columns and types information is present when data is"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f0a59f3f577cf4345476c504b6b0288ff3e3ff9", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/1f0a59f3f577cf4345476c504b6b0288ff3e3ff9", "committedDate": "2020-06-24T16:43:16Z", "message": "Extract common column types builders"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1f0a59f3f577cf4345476c504b6b0288ff3e3ff9", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/1f0a59f3f577cf4345476c504b6b0288ff3e3ff9", "committedDate": "2020-06-24T16:43:16Z", "message": "Extract common column types builders"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 482, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}