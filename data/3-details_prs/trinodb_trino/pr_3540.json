{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NzA2Nzc0", "number": 3540, "title": "Add a query with WHERE clause to DataTypeTest", "bodyText": "This is useful for testing predicate pushdown.\nPlease note that this doesn't fail if predicate evaluation happens on Presto side, you still need an assertion that checks for that.\nFixes #496", "createdAt": "2020-04-24T18:40:39Z", "url": "https://github.com/trinodb/trino/pull/3540", "merged": true, "mergeCommit": {"oid": "d26aab96cd7221094d9bcdb8273b894f93c033c7"}, "closed": true, "closedAt": "2020-06-16T13:51:14Z", "author": {"login": "MiguelWeezardo"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccKG2vAFqTQwMjE5MTUyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr0Uq6ABqjM0NDg3MTA5OTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMTkxNTI3", "url": "https://github.com/trinodb/trino/pull/3540#pullrequestreview-402191527", "createdAt": "2020-04-28T20:36:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDozNjowN1rOGNl46g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDo0MDozNVrOGNmCvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA==", "bodyText": "Why not always?", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416905450", "createdAt": "2020-04-28T20:36:07Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -31,16 +33,31 @@\n {\n     private final List<Input<?>> inputs = new ArrayList<>();\n \n-    private DataTypeTest() {}\n+    private boolean runSelectWithWhere;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNjAwNQ==", "bodyText": "is not needed because toPrestoLiteral handles NULLs", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416906005", "createdAt": "2020-04-28T20:37:10Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +72,66 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+                MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+                checkResults(expectedTypes, expectedResults, filteredRows);\n+            }\n+        }\n+    }\n+\n+    private String buildPrestoQueryWithWhereClauses(TestTable testTable)\n+    {\n+        List<String> predicates = new ArrayList<>();\n+        for (int i = 0; i < inputs.size(); i++) {\n+            Input<?> input = inputs.get(i);\n+            if (input.isUseInWhereClause()) {\n+                if (input.isNullValue()) {\n+                    predicates.add(format(\"col_%d IS NULL\", i));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNzIxMw==", "bodyText": "When this fails, it would be good to have a way to distinguish this failure from checkResults above.\nPoor man's wold be to extract the body of this if section to a new method", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416907213", "createdAt": "2020-04-28T20:39:15Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +72,66 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+                MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+                checkResults(expectedTypes, expectedResults, filteredRows);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNzYyNA==", "bodyText": "why do we need this?", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416907624", "createdAt": "2020-04-28T20:40:00Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +72,66 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+                MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+                checkResults(expectedTypes, expectedResults, filteredRows);\n+            }\n+        }\n+    }\n+\n+    private String buildPrestoQueryWithWhereClauses(TestTable testTable)\n+    {\n+        List<String> predicates = new ArrayList<>();\n+        for (int i = 0; i < inputs.size(); i++) {\n+            Input<?> input = inputs.get(i);\n+            if (input.isUseInWhereClause()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNzk2Nw==", "bodyText": "intentional? (same for other methods)", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416907967", "createdAt": "2020-04-28T20:40:35Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -90,9 +146,14 @@ Object toPrestoQueryResult()\n             return dataType.toPrestoQueryResult(value);\n         }\n \n-        String toLiteral()\n+        public String toLiteral()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 123}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjcyNDQ0", "url": "https://github.com/trinodb/trino/pull/3540#pullrequestreview-430672444", "createdAt": "2020-06-15T14:01:08Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDowMTowOVrOGjzhRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDowMzoyOFrOGjznPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NzQ0Ng==", "bodyText": "Use io.prestosql.testing.datatype.DataType.realDataType().toLiteral()", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440197446", "createdAt": "2020-06-15T14:01:09Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1546,7 +1553,17 @@ private static void checkIsDoubled(ZoneId zone, LocalDateTime dateTime)\n                         return \"'NaN'::real\";\n                     }\n                     return format(\"'%sInfinity'::real\", value > 0 ? \"+\" : \"-\");\n-                });\n+                },\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"nan()\";\n+                    }\n+                    return format(\"%sinfinity()\", value > 0 ? \"+\" : \"-\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NzY5NA==", "bodyText": "What is an example failure from here?", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440197694", "createdAt": "2020-06-15T14:01:31Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +75,85 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                queryWithWhere(prestoExecutor, session, expectedTypes, expectedResults, testTable);\n+            }\n+        }\n+    }\n+\n+    private void queryWithWhere(QueryRunner prestoExecutor, Session session, List<Type> expectedTypes, List<Object> expectedResults, TestTable testTable)\n+    {\n+        String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+        try {\n+            MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+            checkResults(expectedTypes, expectedResults, filteredRows);\n+        }\n+        catch (RuntimeException e) {\n+            log.error(\"Exception caught during query with merged WHERE clause, querying one column at a time\", e);\n+            debugTypes(prestoExecutor, session, expectedTypes, expectedResults, testTable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5Nzk2NQ==", "bodyText": "unused? remove.", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440197965", "createdAt": "2020-06-15T14:01:56Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +75,85 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                queryWithWhere(prestoExecutor, session, expectedTypes, expectedResults, testTable);\n+            }\n+        }\n+    }\n+\n+    private void queryWithWhere(QueryRunner prestoExecutor, Session session, List<Type> expectedTypes, List<Object> expectedResults, TestTable testTable)\n+    {\n+        String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+        try {\n+            MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+            checkResults(expectedTypes, expectedResults, filteredRows);\n+        }\n+        catch (RuntimeException e) {\n+            log.error(\"Exception caught during query with merged WHERE clause, querying one column at a time\", e);\n+            debugTypes(prestoExecutor, session, expectedTypes, expectedResults, testTable);\n+        }\n+    }\n+\n+    private void debugTypes(QueryRunner prestoExecutor, Session session, List<Type> expectedTypes, List<Object> expectedResults, TestTable testTable)\n+    {\n+        for (int i = 0; i < inputs.size(); i++) {\n+            Input<?> input = inputs.get(i);\n+            if (input.isUseInWhereClause()) {\n+                String debugQuery = String.format(\"SELECT col_%d FROM %s WHERE col_%d IS NOT DISTINCT FROM %s\", i, testTable.getName(), i, input.toPrestoLiteral());\n+                log.info(\"Querying input: %d (expected type: %s, expectedResult: %s) using: %s\", i, expectedTypes.get(i), expectedResults.get(i), debugQuery);\n+                MaterializedResult debugRows = prestoExecutor.execute(session, debugQuery);\n+                checkResults(expectedTypes.subList(i, i + 1), expectedResults.subList(i, i + 1), debugRows);\n+            }\n+        }\n+    }\n+\n+    private String buildPrestoQueryWithWhereClauses(TestTable testTable)\n+    {\n+        List<String> predicates = new ArrayList<>();\n+        for (int i = 0; i < inputs.size(); i++) {\n+            Input<?> input = inputs.get(i);\n+            if (input.isUseInWhereClause()) {\n+                predicates.add(format(\"col_%d IS NOT DISTINCT FROM %s\", i, input.toPrestoLiteral()));\n             }\n         }\n+        return \"SELECT * FROM \" + testTable.getName() + \" WHERE \" + join(\" AND \", predicates);\n+    }\n+\n+    private void checkResults(List<Type> expectedTypes, List<Object> expectedResults, MaterializedResult materializedRows)\n+    {\n+        assertEquals(materializedRows.getTypes(), expectedTypes);\n+        List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n+        assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n+        for (int i = 0; i < expectedResults.size(); i++) {\n+            assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+        }\n     }\n \n     public static class Input<T>\n     {\n         private final DataType<T> dataType;\n         private final T value;\n+        private final boolean useInWhereClause;\n \n-        public Input(DataType<T> dataType, T value)\n+        public Input(DataType<T> dataType, T value, boolean useInWhereClause)\n         {\n             this.dataType = dataType;\n             this.value = value;\n+            this.useInWhereClause = useInWhereClause;\n         }\n \n-        String getInsertType()\n+        public boolean isUseInWhereClause()\n+        {\n+            return useInWhereClause;\n+        }\n+\n+        public boolean isNullValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5ODk3Mg==", "bodyText": "Similar here", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440198972", "createdAt": "2020-06-15T14:03:28Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1560,6 +1577,16 @@ private static void checkIsDoubled(ZoneId zone, LocalDateTime dateTime)\n                         return \"'NaN'::double precision\";\n                     }\n                     return format(\"'%sInfinity'::double precision\", value > 0 ? \"+\" : \"-\");\n-                });\n+                },\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"nan()\";\n+                    }\n+                    return format(\"%sinfinity()\", value > 0 ? \"+\" : \"-\");\n+                },\n+                Function.identity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 168}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "343d69a990037073725b808d4a39952b9a0fba20", "author": {"user": {"login": "MiguelWeezardo", "name": "Micha\u0142 \u015alizak"}}, "url": "https://github.com/trinodb/trino/commit/343d69a990037073725b808d4a39952b9a0fba20", "committedDate": "2020-06-16T12:22:25Z", "message": "Add a query with WHERE clause to DataTypeTest\n\nThis is useful for testing predicate pushdown.\n\nPlease note that this doesn't fail if predicate evaluation happens\non Presto side, you still need an assertion that checks for that.\n\nDebug one column at a time if DataTypeTest fails on WHERE query\n\nAdd WHERE clause to queries in Postgres type tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "343d69a990037073725b808d4a39952b9a0fba20", "author": {"user": {"login": "MiguelWeezardo", "name": "Micha\u0142 \u015alizak"}}, "url": "https://github.com/trinodb/trino/commit/343d69a990037073725b808d4a39952b9a0fba20", "committedDate": "2020-06-16T12:22:25Z", "message": "Add a query with WHERE clause to DataTypeTest\n\nThis is useful for testing predicate pushdown.\n\nPlease note that this doesn't fail if predicate evaluation happens\non Presto side, you still need an assertion that checks for that.\n\nDebug one column at a time if DataTypeTest fails on WHERE query\n\nAdd WHERE clause to queries in Postgres type tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1655, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}