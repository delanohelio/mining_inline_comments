{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MTk0MTMw", "number": 5214, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDowOTo1N1rOEk54tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxMDozOVrOEk7IRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTMyNTk4OnYy", "diffSide": "LEFT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDowOTo1N1rOHUGvww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDowOTo1N1rOHUGvww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NDA5OQ==", "bodyText": "typo in commit messge", "url": "https://github.com/trinodb/trino/pull/5214#discussion_r490844099", "createdAt": "2020-09-18T10:09:57Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -211,17 +211,19 @@ private DataTypeTest varbinaryTestCases(DataType<byte[]> varbinaryDataType)\n     }\n \n     @Test\n-    public void testPrestoCreatedParameterizedVarchar()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTMzMDA3OnYy", "diffSide": "LEFT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxMToxMlrOHUGyPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxMToxMlrOHUGyPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NDczMg==", "bodyText": "not reviewing this one. Assume it is just moving code around.", "url": "https://github.com/trinodb/trino/pull/5214#discussion_r490844732", "createdAt": "2020-09-18T10:11:12Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -190,78 +190,44 @@ public void testBasicTypes()\n     }\n \n     @Test\n-    public void testVarbinary()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTM1MzczOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxODo1M1rOHUHApQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNTozNjozMVrOHUsuYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0ODQyMQ==", "bodyText": "why unbounded? Would bounded varchar, which has higher limit, be more appropriate here?", "url": "https://github.com/trinodb/trino/pull/5214#discussion_r490848421", "createdAt": "2020-09-18T10:18:53Z", "author": {"login": "losipiuk"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -468,9 +467,10 @@ public static LocalTime fromPrestoTime(long value)\n \n             case Types.CHAR:\n             case Types.NCHAR:\n-                // TODO this is wrong, we're going to construct malformed Slice representation if source > charLength\n-                int charLength = min(columnSize, CharType.MAX_LENGTH);\n-                return Optional.of(charColumnMapping(createCharType(charLength)));\n+                if (columnSize > CharType.MAX_LENGTH) {\n+                    return Optional.of(varcharColumnMapping(createUnboundedVarcharType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ2NDg0Nw==", "bodyText": "Agree. Will add a TODO, as this should be test-covered", "url": "https://github.com/trinodb/trino/pull/5214#discussion_r491464847", "createdAt": "2020-09-19T15:20:54Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -468,9 +467,10 @@ public static LocalTime fromPrestoTime(long value)\n \n             case Types.CHAR:\n             case Types.NCHAR:\n-                // TODO this is wrong, we're going to construct malformed Slice representation if source > charLength\n-                int charLength = min(columnSize, CharType.MAX_LENGTH);\n-                return Optional.of(charColumnMapping(createCharType(charLength)));\n+                if (columnSize > CharType.MAX_LENGTH) {\n+                    return Optional.of(varcharColumnMapping(createUnboundedVarcharType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0ODQyMQ=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ2NjMzOA==", "bodyText": "Implemented as requested", "url": "https://github.com/trinodb/trino/pull/5214#discussion_r491466338", "createdAt": "2020-09-19T15:36:31Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -468,9 +467,10 @@ public static LocalTime fromPrestoTime(long value)\n \n             case Types.CHAR:\n             case Types.NCHAR:\n-                // TODO this is wrong, we're going to construct malformed Slice representation if source > charLength\n-                int charLength = min(columnSize, CharType.MAX_LENGTH);\n-                return Optional.of(charColumnMapping(createCharType(charLength)));\n+                if (columnSize > CharType.MAX_LENGTH) {\n+                    return Optional.of(varcharColumnMapping(createUnboundedVarcharType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0ODQyMQ=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTUyNjczOnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowOTo0NFrOHUIkog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowOTo0NFrOHUIkog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NDAxOA==", "bodyText": "I would make these tests parametric instead. IDE supports to run test with particular parameters which is nice. That it is also cleaner, separate tests are in separate test executions.", "url": "https://github.com/trinodb/trino/pull/5214#discussion_r490874018", "createdAt": "2020-09-18T11:09:44Z", "author": {"login": "kokosing"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1271,10 +1272,10 @@ private DataTypeTest hstoreTestCases(DataType<Map<String, String>> varcharMapDat\n     public void testUuid()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTUyOTY1OnYy", "diffSide": "LEFT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxMDozOVrOHUImXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNTozMjoxNVrOHUssvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NDQ2MQ==", "bodyText": "Actually it is against the good practice to keep separate test cases in separate tests.\n\nWe usually test all aspects of a type within single test method.\n\nWe do it, and I am not very proud of it.", "url": "https://github.com/trinodb/trino/pull/5214#discussion_r490874461", "createdAt": "2020-09-18T11:10:39Z", "author": {"login": "kokosing"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -234,38 +236,20 @@ private DataTypeTest varcharDataTypeTest()\n                 .addRoundTrip(varcharDataType(), \"unbounded\");\n     }\n \n-    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ2NTkxOA==", "bodyText": "I am guessing this comment is attached to Merge test methods commit.\nI disagree, at least today. The test mapping test to be quite long, and having a way to reduce number of test methods -- without harming readability -- is useful and helps navigate the class.\nThis  is similar to how we group several test cases in here\nhttps://github.com/prestosql/presto/blob/d54e663db8d819ca4791ab61695f3d26cc0fccfb/presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java#L246-L272\nI am happy we do not try to invent descriptive names for each of the test cases\n(i like descriptive names, but i believe this is not really doable in a e consistent manner)\nAnyway, I am dropping the  Merge test methods commit (and Reorder test methods) commits here.", "url": "https://github.com/trinodb/trino/pull/5214#discussion_r491465918", "createdAt": "2020-09-19T15:32:15Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -234,38 +236,20 @@ private DataTypeTest varcharDataTypeTest()\n                 .addRoundTrip(varcharDataType(), \"unbounded\");\n     }\n \n-    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NDQ2MQ=="}, "originalCommit": null, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2992, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}