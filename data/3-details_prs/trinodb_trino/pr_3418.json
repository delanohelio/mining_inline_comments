{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNDExMTA4", "number": 3418, "title": "Require PrestoException in assertQueryFails", "bodyText": "", "createdAt": "2020-04-12T22:50:55Z", "url": "https://github.com/trinodb/trino/pull/3418", "merged": true, "mergeCommit": {"oid": "7fa92370bed82e05914f746325be41cce5decfd0"}, "closed": true, "closedAt": "2020-04-20T15:29:44Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXUIkWABqjMyMjgyODcyMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZayywAFqTM5NjIzNzMxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "02d6b3060f7a4f1861dcc1c16dddf2b85c1cd72d", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/02d6b3060f7a4f1861dcc1c16dddf2b85c1cd72d", "committedDate": "2020-04-13T21:31:04Z", "message": "Move parser test to appropriate test class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDU1MDUy", "url": "https://github.com/trinodb/trino/pull/3418#pullrequestreview-392455052", "createdAt": "2020-04-13T21:32:14Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozMjoxNFrOGE2G0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozMjoxNFrOGE2G0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMzk2OA==", "bodyText": "Note: this is needed e.g. because of TestDistributedEngineOnlyQueries / TestLocalEngineOnlyQueries.", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r407733968", "createdAt": "2020-04-13T21:32:14Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/QueryAssertions.java", "diffHunk": "@@ -339,4 +339,39 @@ public static void copyTable(QueryRunner queryRunner, QualifiedObjectName table,\n         long rows = (Long) queryRunner.execute(session, sql).getMaterializedRows().get(0).getField(0);\n         log.info(\"Imported %s rows for %s in %s\", rows, table.getObjectName(), nanosSince(start).convertToMostSuccinctTimeUnit());\n     }\n+\n+    static RuntimeException getPrestoExceptionCause(Throwable e)\n+    {\n+        return Throwables.getCausalChain(e).stream()\n+                .filter(QueryAssertions::isPrestoException)\n+                .findFirst() // TODO .collect(toOptional()) -- should be exactly one in the causal chain\n+                .map(RuntimeException.class::cast)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Exception does not have PrestoException cause\", e));\n+    }\n+\n+    private static boolean isPrestoException(Throwable exception)\n+    {\n+        requireNonNull(exception, \"exception is null\");\n+\n+        if (exception instanceof PrestoException) {\n+            return true;\n+        }\n+        if (exception instanceof ParsingException) {\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "committedDate": "2020-04-14T08:42:39Z", "message": "Require PrestoException in assertQueryFails"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/1ce256e2b0ebeaaed8d43f8334a4ac4075684333", "committedDate": "2020-04-14T08:42:39Z", "message": "Require PrestoException in assertQueryFails"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MjM3MzEy", "url": "https://github.com/trinodb/trino/pull/3418#pullrequestreview-396237312", "createdAt": "2020-04-20T08:20:50Z", "commit": {"oid": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoyMDo1MFrOGIIxmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoyNzowN1rOGIJCHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NTU2Mw==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411185563", "createdAt": "2020-04-20T08:20:50Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/QueryAssertions.java", "diffHunk": "@@ -68,9 +69,10 @@ public void assertFails(@Language(\"SQL\") String sql, @Language(\"RegExp\") String\n             fail(format(\"Expected query to fail: %s\", sql));\n         }\n         catch (RuntimeException exception) {\n-            if (!nullToEmpty(exception.getMessage()).matches(expectedMessageRegExp)) {\n-                fail(format(\"Expected exception message '%s' to match '%s' for query: %s\", exception.getMessage(), expectedMessageRegExp, sql), exception);\n-            }\n+            exception.addSuppressed(new Exception(\"Query: \" + sql));\n+            assertThat(exception)\n+                    .isInstanceOf(PrestoException.class)\n+                    .hasMessageMatching(expectedMessageRegExp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NjI4Mg==", "bodyText": "Is this needed? Is this going to be printed by assertj? Maybe please add a comment.", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411186282", "createdAt": "2020-04-20T08:21:54Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/QueryAssertions.java", "diffHunk": "@@ -68,9 +69,10 @@ public void assertFails(@Language(\"SQL\") String sql, @Language(\"RegExp\") String\n             fail(format(\"Expected query to fail: %s\", sql));\n         }\n         catch (RuntimeException exception) {\n-            if (!nullToEmpty(exception.getMessage()).matches(expectedMessageRegExp)) {\n-                fail(format(\"Expected exception message '%s' to match '%s' for query: %s\", exception.getMessage(), expectedMessageRegExp, sql), exception);\n-            }\n+            exception.addSuppressed(new Exception(\"Query: \" + sql));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NjU0Nw==", "bodyText": "ditto", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411186547", "createdAt": "2020-04-20T08:22:19Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/QueryAssertions.java", "diffHunk": "@@ -286,8 +290,11 @@ protected static void assertQueryFails(QueryRunner queryRunner, Session session,\n             queryRunner.execute(session, sql);\n             fail(format(\"Expected query to fail: %s\", sql));\n         }\n-        catch (RuntimeException ex) {\n-            assertExceptionMessage(sql, ex, expectedMessageRegExp);\n+        catch (RuntimeException exception) {\n+            exception.addSuppressed(new Exception(\"Query: \" + sql));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4OTc4OQ==", "bodyText": "\ud83d\ude2e", "url": "https://github.com/trinodb/trino/pull/3418#discussion_r411189789", "createdAt": "2020-04-20T08:27:07Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/QueryAssertions.java", "diffHunk": "@@ -339,4 +339,36 @@ public static void copyTable(QueryRunner queryRunner, QualifiedObjectName table,\n         long rows = (Long) queryRunner.execute(session, sql).getMaterializedRows().get(0).getField(0);\n         log.info(\"Imported %s rows for %s in %s\", rows, table.getObjectName(), nanosSince(start).convertToMostSuccinctTimeUnit());\n     }\n+\n+    static RuntimeException getPrestoExceptionCause(Throwable e)\n+    {\n+        return Throwables.getCausalChain(e).stream()\n+                .filter(QueryAssertions::isPrestoException)\n+                .findFirst() // TODO .collect(toOptional()) -- should be exactly one in the causal chain\n+                .map(RuntimeException.class::cast)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Exception does not have PrestoException cause\", e));\n+    }\n+\n+    private static boolean isPrestoException(Throwable exception)\n+    {\n+        requireNonNull(exception, \"exception is null\");\n+\n+        if (exception instanceof PrestoException || exception instanceof ParsingException) {\n+            return true;\n+        }\n+\n+        if (exception.getClass().getName().equals(\"io.prestosql.client.FailureInfo$FailureException\")) {\n+            try {\n+                String originalClassName = exception.toString().split(\":\", 2)[0];\n+                Class<? extends Throwable> originalClass = Class.forName(originalClassName).asSubclass(Throwable.class);\n+                return PrestoException.class.isAssignableFrom(originalClass) ||\n+                        ParsingException.class.isAssignableFrom(originalClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce256e2b0ebeaaed8d43f8334a4ac4075684333"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1915, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}