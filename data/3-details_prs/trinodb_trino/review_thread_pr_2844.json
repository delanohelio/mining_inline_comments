{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NzY0NDM4", "number": 2844, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDoyMjozOFrODgLz2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDoyNToyMlrODiAJrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc0NTIzOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDoyMjozOFrOFqRIiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNDozNzoyNlrOFqTvOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTIyNw==", "bodyText": "I think this can be\nreturn type.getLogicalTypeAnnotation().getType() == STRING;", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379865227", "createdAt": "2020-02-16T00:22:38Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -220,6 +223,24 @@ private static void readTypeSchema(Types.GroupBuilder<?> builder, Iterator<Schem\n         return columnStatistics;\n     }\n \n+    private static boolean isStringType(PrimitiveType type)\n+    {\n+        if (type.getLogicalTypeAnnotation() == null) {\n+            return false;\n+        }\n+\n+        return type.getLogicalTypeAnnotation()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNzg5OQ==", "bodyText": "getType() is package private.", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379907899", "createdAt": "2020-02-16T14:37:26Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -220,6 +223,24 @@ private static void readTypeSchema(Types.GroupBuilder<?> builder, Iterator<Schem\n         return columnStatistics;\n     }\n \n+    private static boolean isStringType(PrimitiveType type)\n+    {\n+        if (type.getLogicalTypeAnnotation() == null) {\n+            return false;\n+        }\n+\n+        return type.getLogicalTypeAnnotation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTIyNw=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc0ODAwOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDoyNTo1NFrOFqRJsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNDozODozOVrOFqTvhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTUyMQ==", "bodyText": "Use the getters", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379865521", "createdAt": "2020-02-16T00:25:54Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -314,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)\n+    private static LogicalTypeAnnotation getLogicalTypeAnnotation(ConvertedType type, SchemaElement schemaElement)\n     {\n         switch (type) {\n             case UTF8:\n-                return OriginalType.UTF8;\n+                return LogicalTypeAnnotation.stringType();\n             case MAP:\n-                return OriginalType.MAP;\n+                return LogicalTypeAnnotation.mapType();\n             case MAP_KEY_VALUE:\n-                return OriginalType.MAP_KEY_VALUE;\n+                return LogicalTypeAnnotation.MapKeyValueTypeAnnotation.getInstance();\n             case LIST:\n-                return OriginalType.LIST;\n+                return LogicalTypeAnnotation.listType();\n             case ENUM:\n-                return OriginalType.ENUM;\n+                return LogicalTypeAnnotation.enumType();\n             case DECIMAL:\n-                return OriginalType.DECIMAL;\n+                int scale = (schemaElement == null ? 0 : schemaElement.scale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNzk3Mw==", "bodyText": "This is verbatim copy of org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation, I'd prefer to keep it this way.", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379907973", "createdAt": "2020-02-16T14:38:39Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -314,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)\n+    private static LogicalTypeAnnotation getLogicalTypeAnnotation(ConvertedType type, SchemaElement schemaElement)\n     {\n         switch (type) {\n             case UTF8:\n-                return OriginalType.UTF8;\n+                return LogicalTypeAnnotation.stringType();\n             case MAP:\n-                return OriginalType.MAP;\n+                return LogicalTypeAnnotation.mapType();\n             case MAP_KEY_VALUE:\n-                return OriginalType.MAP_KEY_VALUE;\n+                return LogicalTypeAnnotation.MapKeyValueTypeAnnotation.getInstance();\n             case LIST:\n-                return OriginalType.LIST;\n+                return LogicalTypeAnnotation.listType();\n             case ENUM:\n-                return OriginalType.ENUM;\n+                return LogicalTypeAnnotation.enumType();\n             case DECIMAL:\n-                return OriginalType.DECIMAL;\n+                int scale = (schemaElement == null ? 0 : schemaElement.scale);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTUyMQ=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc0OTE0OnYy", "diffSide": "LEFT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDoyODo1OFrOFqRKQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNDozOTo1MlrOFqTvuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTY2Nw==", "bodyText": "The original error message seems good. IAE is correct since this is a bad argument.", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379865667", "createdAt": "2020-02-16T00:28:58Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -314,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)\n+    private static LogicalTypeAnnotation getLogicalTypeAnnotation(ConvertedType type, SchemaElement schemaElement)\n     {\n         switch (type) {\n             case UTF8:\n-                return OriginalType.UTF8;\n+                return LogicalTypeAnnotation.stringType();\n             case MAP:\n-                return OriginalType.MAP;\n+                return LogicalTypeAnnotation.mapType();\n             case MAP_KEY_VALUE:\n-                return OriginalType.MAP_KEY_VALUE;\n+                return LogicalTypeAnnotation.MapKeyValueTypeAnnotation.getInstance();\n             case LIST:\n-                return OriginalType.LIST;\n+                return LogicalTypeAnnotation.listType();\n             case ENUM:\n-                return OriginalType.ENUM;\n+                return LogicalTypeAnnotation.enumType();\n             case DECIMAL:\n-                return OriginalType.DECIMAL;\n+                int scale = (schemaElement == null ? 0 : schemaElement.scale);\n+                int precision = (schemaElement == null ? 0 : schemaElement.precision);\n+                return LogicalTypeAnnotation.decimalType(scale, precision);\n             case DATE:\n-                return OriginalType.DATE;\n+                return LogicalTypeAnnotation.dateType();\n             case TIME_MILLIS:\n-                return OriginalType.TIME_MILLIS;\n+                return LogicalTypeAnnotation.timeType(true, LogicalTypeAnnotation.TimeUnit.MILLIS);\n+            case TIME_MICROS:\n+                return LogicalTypeAnnotation.timeType(true, LogicalTypeAnnotation.TimeUnit.MICROS);\n             case TIMESTAMP_MILLIS:\n-                return OriginalType.TIMESTAMP_MILLIS;\n+                return LogicalTypeAnnotation.timestampType(true, LogicalTypeAnnotation.TimeUnit.MILLIS);\n+            case TIMESTAMP_MICROS:\n+                return LogicalTypeAnnotation.timestampType(true, LogicalTypeAnnotation.TimeUnit.MICROS);\n             case INTERVAL:\n-                return OriginalType.INTERVAL;\n+                return LogicalTypeAnnotation.IntervalLogicalTypeAnnotation.getInstance();\n             case INT_8:\n-                return OriginalType.INT_8;\n+                return LogicalTypeAnnotation.intType(8, true);\n             case INT_16:\n-                return OriginalType.INT_16;\n+                return LogicalTypeAnnotation.intType(16, true);\n             case INT_32:\n-                return OriginalType.INT_32;\n+                return LogicalTypeAnnotation.intType(32, true);\n             case INT_64:\n-                return OriginalType.INT_64;\n+                return LogicalTypeAnnotation.intType(64, true);\n             case UINT_8:\n-                return OriginalType.UINT_8;\n+                return LogicalTypeAnnotation.intType(8, false);\n             case UINT_16:\n-                return OriginalType.UINT_16;\n+                return LogicalTypeAnnotation.intType(16, false);\n             case UINT_32:\n-                return OriginalType.UINT_32;\n+                return LogicalTypeAnnotation.intType(32, false);\n             case UINT_64:\n-                return OriginalType.UINT_64;\n+                return LogicalTypeAnnotation.intType(64, false);\n             case JSON:\n-                return OriginalType.JSON;\n+                return LogicalTypeAnnotation.jsonType();\n             case BSON:\n-                return OriginalType.BSON;\n-            case TIMESTAMP_MICROS:\n-                return OriginalType.TIMESTAMP_MICROS;\n-            case TIME_MICROS:\n-                return OriginalType.TIME_MICROS;\n+                return LogicalTypeAnnotation.bsonType();\n             default:\n-                throw new IllegalArgumentException(\"Unknown converted type \" + type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwODAyNQ==", "bodyText": "This is verbatim copy of org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation, I'd prefer to keep it this way.\nThis should never be raised anyway, so likely it doesn't matter.", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379908025", "createdAt": "2020-02-16T14:39:52Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -314,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)\n+    private static LogicalTypeAnnotation getLogicalTypeAnnotation(ConvertedType type, SchemaElement schemaElement)\n     {\n         switch (type) {\n             case UTF8:\n-                return OriginalType.UTF8;\n+                return LogicalTypeAnnotation.stringType();\n             case MAP:\n-                return OriginalType.MAP;\n+                return LogicalTypeAnnotation.mapType();\n             case MAP_KEY_VALUE:\n-                return OriginalType.MAP_KEY_VALUE;\n+                return LogicalTypeAnnotation.MapKeyValueTypeAnnotation.getInstance();\n             case LIST:\n-                return OriginalType.LIST;\n+                return LogicalTypeAnnotation.listType();\n             case ENUM:\n-                return OriginalType.ENUM;\n+                return LogicalTypeAnnotation.enumType();\n             case DECIMAL:\n-                return OriginalType.DECIMAL;\n+                int scale = (schemaElement == null ? 0 : schemaElement.scale);\n+                int precision = (schemaElement == null ? 0 : schemaElement.precision);\n+                return LogicalTypeAnnotation.decimalType(scale, precision);\n             case DATE:\n-                return OriginalType.DATE;\n+                return LogicalTypeAnnotation.dateType();\n             case TIME_MILLIS:\n-                return OriginalType.TIME_MILLIS;\n+                return LogicalTypeAnnotation.timeType(true, LogicalTypeAnnotation.TimeUnit.MILLIS);\n+            case TIME_MICROS:\n+                return LogicalTypeAnnotation.timeType(true, LogicalTypeAnnotation.TimeUnit.MICROS);\n             case TIMESTAMP_MILLIS:\n-                return OriginalType.TIMESTAMP_MILLIS;\n+                return LogicalTypeAnnotation.timestampType(true, LogicalTypeAnnotation.TimeUnit.MILLIS);\n+            case TIMESTAMP_MICROS:\n+                return LogicalTypeAnnotation.timestampType(true, LogicalTypeAnnotation.TimeUnit.MICROS);\n             case INTERVAL:\n-                return OriginalType.INTERVAL;\n+                return LogicalTypeAnnotation.IntervalLogicalTypeAnnotation.getInstance();\n             case INT_8:\n-                return OriginalType.INT_8;\n+                return LogicalTypeAnnotation.intType(8, true);\n             case INT_16:\n-                return OriginalType.INT_16;\n+                return LogicalTypeAnnotation.intType(16, true);\n             case INT_32:\n-                return OriginalType.INT_32;\n+                return LogicalTypeAnnotation.intType(32, true);\n             case INT_64:\n-                return OriginalType.INT_64;\n+                return LogicalTypeAnnotation.intType(64, true);\n             case UINT_8:\n-                return OriginalType.UINT_8;\n+                return LogicalTypeAnnotation.intType(8, false);\n             case UINT_16:\n-                return OriginalType.UINT_16;\n+                return LogicalTypeAnnotation.intType(16, false);\n             case UINT_32:\n-                return OriginalType.UINT_32;\n+                return LogicalTypeAnnotation.intType(32, false);\n             case UINT_64:\n-                return OriginalType.UINT_64;\n+                return LogicalTypeAnnotation.intType(64, false);\n             case JSON:\n-                return OriginalType.JSON;\n+                return LogicalTypeAnnotation.jsonType();\n             case BSON:\n-                return OriginalType.BSON;\n-            case TIMESTAMP_MICROS:\n-                return OriginalType.TIMESTAMP_MICROS;\n-            case TIME_MICROS:\n-                return OriginalType.TIME_MICROS;\n+                return LogicalTypeAnnotation.bsonType();\n             default:\n-                throw new IllegalArgumentException(\"Unknown converted type \" + type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTY2Nw=="}, "originalCommit": null, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc1MjEyOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDozODoyNFrOFqRLsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNDo1MTo1OFrOFqTy3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NjAzNA==", "bodyText": "We could add a shim to call this in the shaded Hive build, like this: https://github.com/prestosql/presto-hive-apache/blob/master/src/main/java/org/apache/parquet/io/ColumnIOUtil.java", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379866034", "createdAt": "2020-02-16T00:38:24Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -293,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwODgzMA==", "bodyText": "trinodb/trino-hive-apache#8", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379908830", "createdAt": "2020-02-16T14:51:58Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -293,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NjAzNA=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTgwNjUzOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDoyNToyMlrOFtDmlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNTowNzo1MFrOG76YBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4OTI3MQ==", "bodyText": "don't forget to update this", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r382789271", "createdAt": "2020-02-21T20:25:22Z", "author": {"login": "findepi"}, "path": "pom.xml", "diffHunk": "@@ -444,7 +444,7 @@\n             <dependency>\n                 <groupId>io.prestosql.hive</groupId>\n                 <artifactId>hive-apache</artifactId>\n-                <version>3.0.0-4</version>\n+                <version>3.0.0-5-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ3NTU5MA==", "bodyText": "You can update this now to 3.0.0-5", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r465475590", "createdAt": "2020-08-05T05:07:50Z", "author": {"login": "electrum"}, "path": "pom.xml", "diffHunk": "@@ -444,7 +444,7 @@\n             <dependency>\n                 <groupId>io.prestosql.hive</groupId>\n                 <artifactId>hive-apache</artifactId>\n-                <version>3.0.0-4</version>\n+                <version>3.0.0-5-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4OTI3MQ=="}, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 940, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}