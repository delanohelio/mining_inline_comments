{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NzI0ODcy", "number": 5054, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDozMjo0MVrOEfZHqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxMjo1N1rOEh6VAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzUyODcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/FunctionRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDozMjo0MVrOHLo_mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDozMjo0MVrOHLo_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2ODAyNg==", "bodyText": "Can we use Murmur3Hash32 which is available in Slice ?", "url": "https://github.com/trinodb/trino/pull/5054#discussion_r481968026", "createdAt": "2020-09-02T10:32:41Z", "author": {"login": "Praveen2112"}, "path": "presto-main/src/main/java/io/prestosql/metadata/FunctionRegistry.java", "diffHunk": "@@ -127,6 +127,7 @@\n import io.prestosql.operator.scalar.MapValues;\n import io.prestosql.operator.scalar.MathFunctions;\n import io.prestosql.operator.scalar.MultimapFromEntriesFunction;\n+import io.prestosql.operator.scalar.MurmurHashFunction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjQ3NDU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMurmurHashFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDo1MTo1N1rOHMGcsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDo1NjozOFrOHMqoMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ1MDYwOA==", "bodyText": "@martint should these return varbinary like the other hash functions?", "url": "https://github.com/trinodb/trino/pull/5054#discussion_r482450608", "createdAt": "2020-09-02T20:51:57Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMurmurHashFunction.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.SmallintType;\n+import io.prestosql.spi.type.TinyintType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import io.prestosql.type.JsonType;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testing.SqlVarbinaryTestingUtil.sqlVarbinaryFromHex;\n+\n+public class TestMurmurHashFunction\n+        extends AbstractTestFunctions\n+{\n+    @Test\n+    public void testMurmur3Hash()\n+    {\n+        assertFunction(\"murmur3_hash(1)\", IntegerType.INTEGER, 1392991556);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0MzM3OA==", "bodyText": "Yes, the result of murmur3 is a binary value (32 or 128 hits, depending on which version is used), so the result should be a binary type. If the result needs to be converted to a number, the user can do so with one of the functions dedicated to that. There are many ways to do so, so the murmur3 function should not dictate any particular way.", "url": "https://github.com/trinodb/trino/pull/5054#discussion_r483043378", "createdAt": "2020-09-03T14:56:38Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMurmurHashFunction.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.SmallintType;\n+import io.prestosql.spi.type.TinyintType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import io.prestosql.type.JsonType;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testing.SqlVarbinaryTestingUtil.sqlVarbinaryFromHex;\n+\n+public class TestMurmurHashFunction\n+        extends AbstractTestFunctions\n+{\n+    @Test\n+    public void testMurmur3Hash()\n+    {\n+        assertFunction(\"murmur3_hash(1)\", IntegerType.INTEGER, 1392991556);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ1MDYwOA=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTk0MTE0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/VarbinaryFunctions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxMjo1N1rOHPfZUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1NjozMlrOHYWquA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNTA3NA==", "bodyText": "Why seed = 1? Let's use the version with default seed:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Murmur3Hash128.hash(1, slice, 0, slice.length());\n          \n          \n            \n                    return Murmur3Hash128.hash(slice, 0, slice.length());", "url": "https://github.com/trinodb/trino/pull/5054#discussion_r486005074", "createdAt": "2020-09-10T01:12:57Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/VarbinaryFunctions.java", "diffHunk": "@@ -279,6 +280,14 @@ public static Slice sha512(@SqlType(StandardTypes.VARBINARY) Slice slice)\n         return computeHash(Hashing.sha512(), slice);\n     }\n \n+    @Description(\"Compute murmur3 hash\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.VARBINARY)\n+    public static Slice murmur3(@SqlType(StandardTypes.VARBINARY) Slice slice)\n+    {\n+        return Murmur3Hash128.hash(1, slice, 0, slice.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMDQ3Nw==", "bodyText": "With default seed, this method returns all zero bytes for empty string, thats why i added a seed.", "url": "https://github.com/trinodb/trino/pull/5054#discussion_r486110477", "createdAt": "2020-09-10T07:02:55Z", "author": {"login": "yashaswaj"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/VarbinaryFunctions.java", "diffHunk": "@@ -279,6 +280,14 @@ public static Slice sha512(@SqlType(StandardTypes.VARBINARY) Slice slice)\n         return computeHash(Hashing.sha512(), slice);\n     }\n \n+    @Description(\"Compute murmur3 hash\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.VARBINARY)\n+    public static Slice murmur3(@SqlType(StandardTypes.VARBINARY) Slice slice)\n+    {\n+        return Murmur3Hash128.hash(1, slice, 0, slice.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNTA3NA=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5OTI1Ng==", "bodyText": "That's the expected hash for an empty string. For example,\nIn python:\n>>> import mmh3\n>>> mmh3.hash('')\n0\n\nIn Java:\nSystem.out.println(Hashing.murmur3_32().hashBytes(new byte[0]).asInt());\n-> 0", "url": "https://github.com/trinodb/trino/pull/5054#discussion_r495299256", "createdAt": "2020-09-25T22:56:32Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/VarbinaryFunctions.java", "diffHunk": "@@ -279,6 +280,14 @@ public static Slice sha512(@SqlType(StandardTypes.VARBINARY) Slice slice)\n         return computeHash(Hashing.sha512(), slice);\n     }\n \n+    @Description(\"Compute murmur3 hash\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.VARBINARY)\n+    public static Slice murmur3(@SqlType(StandardTypes.VARBINARY) Slice slice)\n+    {\n+        return Murmur3Hash128.hash(1, slice, 0, slice.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNTA3NA=="}, "originalCommit": null, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3118, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}