{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTIxMDI1", "number": 2665, "title": "Show stats for permissions", "bodyText": "Fixes #2107\nFirst commit introduces possibility to get stats for subset of columns:\nSHOW STATS FOR (SELECT column1, column2 AS some_name FROM table)\nSecond commit checks if we have permissions to columns we are fetching stats for.", "createdAt": "2020-01-29T12:05:20Z", "url": "https://github.com/trinodb/trino/pull/2665", "merged": true, "mergeCommit": {"oid": "1f9088dc5757d18abf1f622f64d8bad4a87e8e2b"}, "closed": true, "closedAt": "2020-03-18T13:38:23Z", "author": {"login": "wendigo"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_FNRngBqjI5ODkzMzMzNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO1HKkgBqjMxNDA5MzQxNzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNDI2NTYx", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-350426561", "createdAt": "2020-01-29T21:11:30Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMToxMTozMFrOFjXoKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMToxMTozMFrOFjXoKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYzMTU5NA==", "bodyText": "Since this isn't used (or needed) by the SPI. I would inline this into the one call site in the main module.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372631594", "createdAt": "2020-01-29T21:11:30Z", "author": {"login": "dain"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -156,6 +156,11 @@ public static void denyShowColumnsMetadata(String tableName)\n         throw new AccessDeniedException(format(\"Cannot show columns of table %s\", tableName));\n     }\n \n+    public static void denyShowTableStats(String tableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjYxMDk0", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-350661094", "createdAt": "2020-01-30T08:54:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo1NDo1OVrOFjjXgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOTo1NDowMVrOFjlE8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyMzkzNw==", "bodyText": "change the condition regionkey > 10 or regionkey < 0 in this test cases so that it shows some real data\nmaybe this one could be without any condition at all? (you don't have such a test case yet)", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372823937", "createdAt": "2020-01-30T08:54:59Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -129,6 +129,24 @@ public void testShowStats()\n                         \"   ('name', 0.0, 0.0, 0.0, null, null, null), \" +\n                         \"   ('comment', 0.0, 0.0, 0.0, null, null, null), \" +\n                         \"   (null, null, null, null, 0.0, null, null))\");\n+\n+        assertQuery(\"SHOW STATS FOR (SELECT regionkey FROM nation_partitioned WHERE regionkey > 10 or regionkey < 0)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('regionkey', null, 0.0, 0.0, null, null, null), \" +\n+                        \"   (null, null, null, null, 0.0, null, null))\");\n+\n+        assertQuery(\"SHOW STATS FOR (SELECT regionkey, nationkey AS nation FROM nation_partitioned WHERE regionkey > 10 or regionkey < 0)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('regionkey', null, 0.0, 0.0, null, null, null), \" +\n+                        \"   ('nation', null, 0.0, 0.0, null, null, null), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTEyMA==", "bodyText": "CONCAT('nation', 'key')  looks as if related to nationkey column.\nif your intention is to reference a column in an expression, use eg nationkey + 1\nif your intention is not to reference any column, use eg 42", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372825120", "createdAt": "2020-01-30T08:57:20Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -143,6 +161,18 @@ public void testShowStatsWithMultipleFromFails()\n         assertQueryFails(\"SHOW STATS FOR (SELECT * FROM nation_partitioned, region)\", \".*There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n     }\n \n+    @Test\n+    public void testShowStatsForNonExistingColumnFails()\n+    {\n+        assertQueryFails(\"SHOW STATS FOR (SELECT column_does_not_exist FROM nation_partitioned)\", \".*Column 'column_does_not_exist' cannot be resolved\");\n+    }\n+\n+    @Test\n+    public void testShowStatsForNonIdentifierColumnFails()\n+    {\n+        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('nation', 'key') FROM nation_partitioned)\", \".*Only table columns names are supported in SELECT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0MDUzOA==", "bodyText": "Unnecessary change, move this back please", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372840538", "createdAt": "2020-01-30T09:31:09Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -158,27 +162,59 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n             check(!querySpecification.getHaving().isPresent(), node, \"HAVING is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getGroupBy().isPresent(), node, \"GROUP BY is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getSelect().isDistinct(), node, \"DISTINCT is not supported by SHOW STATS SELECT clause\");\n-\n-            List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n-            check(selectItems.size() == 1 && selectItems.get(0) instanceof AllColumns, node, \"Only SELECT * is supported in SHOW STATS SELECT clause\");\n         }\n \n-        private Node rewriteShowStats(ShowStats node, Table table, Constraint constraint)\n+        private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n+            List<String> statsColumnNames = buildColumnsNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0MDcwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                    List<String> statsColumnNames = buildColumnsNames();", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372840700", "createdAt": "2020-01-30T09:31:27Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -158,27 +162,59 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n             check(!querySpecification.getHaving().isPresent(), node, \"HAVING is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getGroupBy().isPresent(), node, \"GROUP BY is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getSelect().isDistinct(), node, \"DISTINCT is not supported by SHOW STATS SELECT clause\");\n-\n-            List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n-            check(selectItems.size() == 1 && selectItems.get(0) instanceof AllColumns, node, \"Only SELECT * is supported in SHOW STATS SELECT clause\");\n         }\n \n-        private Node rewriteShowStats(ShowStats node, Table table, Constraint constraint)\n+        private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n+            List<String> statsColumnNames = buildColumnsNames();\n             TableHandle tableHandle = getTableHandle(node, table.getName());\n             TableStatistics tableStatistics = metadata.getTableStatistics(session, tableHandle, constraint);\n-            List<String> statsColumnNames = buildColumnsNames();\n-            List<SelectItem> selectItems = buildSelectItems(statsColumnNames);\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0MTU3Mw==", "bodyText": "spell this out: id -> identifier", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372841573", "createdAt": "2020-01-30T09:33:22Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -158,27 +162,59 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n             check(!querySpecification.getHaving().isPresent(), node, \"HAVING is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getGroupBy().isPresent(), node, \"GROUP BY is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getSelect().isDistinct(), node, \"DISTINCT is not supported by SHOW STATS SELECT clause\");\n-\n-            List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n-            check(selectItems.size() == 1 && selectItems.get(0) instanceof AllColumns, node, \"Only SELECT * is supported in SHOW STATS SELECT clause\");\n         }\n \n-        private Node rewriteShowStats(ShowStats node, Table table, Constraint constraint)\n+        private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n+            List<String> statsColumnNames = buildColumnsNames();\n             TableHandle tableHandle = getTableHandle(node, table.getName());\n             TableStatistics tableStatistics = metadata.getTableStatistics(session, tableHandle, constraint);\n-            List<String> statsColumnNames = buildColumnsNames();\n-            List<SelectItem> selectItems = buildSelectItems(statsColumnNames);\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+\n             Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n-            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, tableStatistics);\n+            Multimap<String, String> extractNamedResultColumns = extractNamedResultColumns(node, tableMetadata, selectItems);\n+            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, extractNamedResultColumns, tableStatistics);\n \n-            return simpleQuery(selectAll(selectItems),\n+            return simpleQuery(selectAll(buildSelectItems(statsColumnNames)),\n                     aliased(new Values(resultRows),\n                             \"table_stats_for_\" + table.getName(),\n                             statsColumnNames));\n         }\n \n+        private Multimap<String, String> extractNamedResultColumns(ShowStats node, TableMetadata metadata, List<SelectItem> selectItems)\n+        {\n+            ImmutableMultimap.Builder<String, String> assignments = ImmutableMultimap.builder();\n+\n+            for (SelectItem item : selectItems) {\n+                if (item instanceof AllColumns) {\n+                    for (ColumnMetadata column : metadata.getColumns()) {\n+                        if (!column.isHidden()) {\n+                            assignments.put(column.getName(), column.getName());\n+                        }\n+                    }\n+                }\n+\n+                if (item instanceof SingleColumn) {\n+                    SingleColumn column = (SingleColumn) item;\n+                    Optional<Identifier> alias = column.getAlias();\n+                    Expression expression = column.getExpression();\n+\n+                    // TODO: Better error?\n+                    check(expression instanceof Identifier, node, \"Only table columns names are supported in SELECT\");\n+\n+                    Identifier id = (Identifier) expression;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0MjE0NQ==", "bodyText": "this if is misleading, because it's known to be Identifier.\nand it's concerning because there is no further else\n\nremove if\nyou can add verify(column.getExpression() instanceof Identifier) inside else block", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372842145", "createdAt": "2020-01-30T09:34:36Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -158,27 +162,59 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n             check(!querySpecification.getHaving().isPresent(), node, \"HAVING is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getGroupBy().isPresent(), node, \"GROUP BY is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getSelect().isDistinct(), node, \"DISTINCT is not supported by SHOW STATS SELECT clause\");\n-\n-            List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n-            check(selectItems.size() == 1 && selectItems.get(0) instanceof AllColumns, node, \"Only SELECT * is supported in SHOW STATS SELECT clause\");\n         }\n \n-        private Node rewriteShowStats(ShowStats node, Table table, Constraint constraint)\n+        private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n+            List<String> statsColumnNames = buildColumnsNames();\n             TableHandle tableHandle = getTableHandle(node, table.getName());\n             TableStatistics tableStatistics = metadata.getTableStatistics(session, tableHandle, constraint);\n-            List<String> statsColumnNames = buildColumnsNames();\n-            List<SelectItem> selectItems = buildSelectItems(statsColumnNames);\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+\n             Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n-            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, tableStatistics);\n+            Multimap<String, String> extractNamedResultColumns = extractNamedResultColumns(node, tableMetadata, selectItems);\n+            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, extractNamedResultColumns, tableStatistics);\n \n-            return simpleQuery(selectAll(selectItems),\n+            return simpleQuery(selectAll(buildSelectItems(statsColumnNames)),\n                     aliased(new Values(resultRows),\n                             \"table_stats_for_\" + table.getName(),\n                             statsColumnNames));\n         }\n \n+        private Multimap<String, String> extractNamedResultColumns(ShowStats node, TableMetadata metadata, List<SelectItem> selectItems)\n+        {\n+            ImmutableMultimap.Builder<String, String> assignments = ImmutableMultimap.builder();\n+\n+            for (SelectItem item : selectItems) {\n+                if (item instanceof AllColumns) {\n+                    for (ColumnMetadata column : metadata.getColumns()) {\n+                        if (!column.isHidden()) {\n+                            assignments.put(column.getName(), column.getName());\n+                        }\n+                    }\n+                }\n+\n+                if (item instanceof SingleColumn) {\n+                    SingleColumn column = (SingleColumn) item;\n+                    Optional<Identifier> alias = column.getAlias();\n+                    Expression expression = column.getExpression();\n+\n+                    // TODO: Better error?\n+                    check(expression instanceof Identifier, node, \"Only table columns names are supported in SELECT\");\n+\n+                    Identifier id = (Identifier) expression;\n+                    if (alias.isPresent()) {\n+                        assignments.put(id.getValue(), alias.get().getValue());\n+                    }\n+                    else if (column.getExpression() instanceof Identifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0MzM4Nw==", "bodyText": "Add a test cases where two columns are aliased to same alias:\nnationkey AS a, regionkey AS a\n\nand same column\nnationkey AS a, nationkey AS a\n\nboth should be disallowed.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372843387", "createdAt": "2020-01-30T09:37:11Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -158,27 +162,59 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n             check(!querySpecification.getHaving().isPresent(), node, \"HAVING is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getGroupBy().isPresent(), node, \"GROUP BY is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getSelect().isDistinct(), node, \"DISTINCT is not supported by SHOW STATS SELECT clause\");\n-\n-            List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n-            check(selectItems.size() == 1 && selectItems.get(0) instanceof AllColumns, node, \"Only SELECT * is supported in SHOW STATS SELECT clause\");\n         }\n \n-        private Node rewriteShowStats(ShowStats node, Table table, Constraint constraint)\n+        private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n+            List<String> statsColumnNames = buildColumnsNames();\n             TableHandle tableHandle = getTableHandle(node, table.getName());\n             TableStatistics tableStatistics = metadata.getTableStatistics(session, tableHandle, constraint);\n-            List<String> statsColumnNames = buildColumnsNames();\n-            List<SelectItem> selectItems = buildSelectItems(statsColumnNames);\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+\n             Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n-            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, tableStatistics);\n+            Multimap<String, String> extractNamedResultColumns = extractNamedResultColumns(node, tableMetadata, selectItems);\n+            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, extractNamedResultColumns, tableStatistics);\n \n-            return simpleQuery(selectAll(selectItems),\n+            return simpleQuery(selectAll(buildSelectItems(statsColumnNames)),\n                     aliased(new Values(resultRows),\n                             \"table_stats_for_\" + table.getName(),\n                             statsColumnNames));\n         }\n \n+        private Multimap<String, String> extractNamedResultColumns(ShowStats node, TableMetadata metadata, List<SelectItem> selectItems)\n+        {\n+            ImmutableMultimap.Builder<String, String> assignments = ImmutableMultimap.builder();\n+\n+            for (SelectItem item : selectItems) {\n+                if (item instanceof AllColumns) {\n+                    for (ColumnMetadata column : metadata.getColumns()) {\n+                        if (!column.isHidden()) {\n+                            assignments.put(column.getName(), column.getName());\n+                        }\n+                    }\n+                }\n+\n+                if (item instanceof SingleColumn) {\n+                    SingleColumn column = (SingleColumn) item;\n+                    Optional<Identifier> alias = column.getAlias();\n+                    Expression expression = column.getExpression();\n+\n+                    // TODO: Better error?\n+                    check(expression instanceof Identifier, node, \"Only table columns names are supported in SELECT\");\n+\n+                    Identifier id = (Identifier) expression;\n+                    if (alias.isPresent()) {\n+                        assignments.put(id.getValue(), alias.get().getValue());\n+                    }\n+                    else if (column.getExpression() instanceof Identifier) {\n+                        assignments.put(id.getValue(), id.getValue());\n+                    }\n+                }\n+            }\n+\n+            return assignments.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1MDQ2Mg==", "bodyText": "it's OK to keep this inline", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372850462", "createdAt": "2020-01-30T09:51:17Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -232,22 +268,31 @@ private TableHandle getTableHandle(ShowStats node, QualifiedName table)\n                     .collect(toImmutableList());\n         }\n \n-        private List<Expression> buildStatisticsRows(TableMetadata tableMetadata, Map<String, ColumnHandle> columnHandles, TableStatistics tableStatistics)\n+        private List<Expression> buildStatisticsRows(TableMetadata tableMetadata, Map<String, ColumnHandle> columnHandles, Multimap<String, String> resultColumns, TableStatistics tableStatistics)\n         {\n             ImmutableList.Builder<Expression> rowsBuilder = ImmutableList.builder();\n             for (ColumnMetadata columnMetadata : tableMetadata.getColumns()) {\n                 if (columnMetadata.isHidden()) {\n                     continue;\n                 }\n                 String columnName = columnMetadata.getName();\n-                Type columnType = columnMetadata.getType();\n+\n+                if (!resultColumns.containsKey(columnName)) {\n+                    continue;\n+                }\n+\n                 ColumnHandle columnHandle = columnHandles.get(columnName);\n+                Type columnType = columnMetadata.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1MTk1Mg==", "bodyText": "Actually i'd drop support for aliases for now.\nFor pretending we support real simple select items, we should also support identifier columns:\nSHOW STATS FOR (SELECT nation.nationkey FROM nation)\n\nand table aliases\nSHOW STATS FOR (SELECT t.nationkey FROM nation AS t)\n\n-- let's not do this now & keep things as simple as only needed for the permission check\nIn the long term, we should change the SHOW STATS FOR (subquery) so that it allows any subquery. This will be slight semantics change, so the less we support now, the better.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372851952", "createdAt": "2020-01-30T09:54:01Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -158,27 +162,59 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n             check(!querySpecification.getHaving().isPresent(), node, \"HAVING is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getGroupBy().isPresent(), node, \"GROUP BY is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getSelect().isDistinct(), node, \"DISTINCT is not supported by SHOW STATS SELECT clause\");\n-\n-            List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n-            check(selectItems.size() == 1 && selectItems.get(0) instanceof AllColumns, node, \"Only SELECT * is supported in SHOW STATS SELECT clause\");\n         }\n \n-        private Node rewriteShowStats(ShowStats node, Table table, Constraint constraint)\n+        private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n+            List<String> statsColumnNames = buildColumnsNames();\n             TableHandle tableHandle = getTableHandle(node, table.getName());\n             TableStatistics tableStatistics = metadata.getTableStatistics(session, tableHandle, constraint);\n-            List<String> statsColumnNames = buildColumnsNames();\n-            List<SelectItem> selectItems = buildSelectItems(statsColumnNames);\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+\n             Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n-            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, tableStatistics);\n+            Multimap<String, String> extractNamedResultColumns = extractNamedResultColumns(node, tableMetadata, selectItems);\n+            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, extractNamedResultColumns, tableStatistics);\n \n-            return simpleQuery(selectAll(selectItems),\n+            return simpleQuery(selectAll(buildSelectItems(statsColumnNames)),\n                     aliased(new Values(resultRows),\n                             \"table_stats_for_\" + table.getName(),\n                             statsColumnNames));\n         }\n \n+        private Multimap<String, String> extractNamedResultColumns(ShowStats node, TableMetadata metadata, List<SelectItem> selectItems)\n+        {\n+            ImmutableMultimap.Builder<String, String> assignments = ImmutableMultimap.builder();\n+\n+            for (SelectItem item : selectItems) {\n+                if (item instanceof AllColumns) {\n+                    for (ColumnMetadata column : metadata.getColumns()) {\n+                        if (!column.isHidden()) {\n+                            assignments.put(column.getName(), column.getName());\n+                        }\n+                    }\n+                }\n+\n+                if (item instanceof SingleColumn) {\n+                    SingleColumn column = (SingleColumn) item;\n+                    Optional<Identifier> alias = column.getAlias();\n+                    Expression expression = column.getExpression();\n+\n+                    // TODO: Better error?\n+                    check(expression instanceof Identifier, node, \"Only table columns names are supported in SELECT\");\n+\n+                    Identifier id = (Identifier) expression;\n+                    if (alias.isPresent()) {\n+                        assignments.put(id.getValue(), alias.get().getValue());\n+                    }\n+                    else if (column.getExpression() instanceof Identifier) {\n+                        assignments.put(id.getValue(), id.getValue());\n+                    }\n+                }\n+            }\n+\n+            return assignments.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0MzM4Nw=="}, "originalCommit": null, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjk3ODUy", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-350697852", "createdAt": "2020-01-30T09:54:53Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOTo1NDo1M1rOFjlGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOTo1NTo1NVrOFjlIzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1MjQyMg==", "bodyText": "Does this belong to prev commit?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372852422", "createdAt": "2020-01-30T09:54:53Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -170,7 +170,7 @@ public void testShowStatsForNonExistingColumnFails()\n     @Test\n     public void testShowStatsForNonIdentifierColumnFails()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('nation', 'key') FROM nation_partitioned)\", \".*Only table columns names are supported in SELECT\");\n+        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('nation', 'key') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1MjU2Mg==", "bodyText": "Does this belong to prev commit?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372852562", "createdAt": "2020-01-30T09:55:12Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -185,14 +185,6 @@ public void testShowStatsWithHavingFails()\n         assertQueryFails(\"SHOW STATS FOR (SELECT count(nationkey) FROM nation_partitioned GROUP BY regionkey HAVING regionkey > 0)\", \".*HAVING is not supported in SHOW STATS SELECT clause\");\n     }\n \n-    @Test\n-    public void testShowStatsSelectNonStarFails()\n-    {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT orderkey FROM orders)\", \".*Only SELECT \\\\* is supported in SHOW STATS SELECT clause\");\n-        assertQueryFails(\"SHOW STATS FOR (SELECT orderkey, custkey FROM orders)\", \".*Only SELECT \\\\* is supported in SHOW STATS SELECT clause\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1Mjk0Mw==", "bodyText": "unnecessary change?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r372852943", "createdAt": "2020-01-30T09:55:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -166,19 +170,26 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n \n         private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n-            List<String> statsColumnNames = buildColumnsNames();\n             TableHandle tableHandle = getTableHandle(node, table.getName());\n             TableStatistics tableStatistics = metadata.getTableStatistics(session, tableHandle, constraint);\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n \n-            Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n             Multimap<String, String> extractNamedResultColumns = extractNamedResultColumns(node, tableMetadata, selectItems);\n+\n+            try {\n+                accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableMetadata.getQualifiedName(), extractNamedResultColumns.keySet());\n+            }\n+            catch (AccessDeniedException e) {\n+                throw new AccessDeniedException(format(\"Cannot show stats for table %s\", tableMetadata.getTable().toString()));\n+            }\n+\n+            Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n             List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, extractNamedResultColumns, tableStatistics);\n \n-            return simpleQuery(selectAll(buildSelectItems(statsColumnNames)),\n+            return simpleQuery(selectAll(buildSelectItems()),\n                     aliased(new Values(resultRows),\n                             \"table_stats_for_\" + table.getName(),\n-                            statsColumnNames));\n+                            buildColumnsNames()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTIwNDIw", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-355120420", "createdAt": "2020-02-07T12:22:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoyMjowOFrOFm7Zjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoyNzoxM1rOFm7g8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2MzQwNg==", "bodyText": "This belongs to the first commit", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r376363406", "createdAt": "2020-02-07T12:22:08Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -196,14 +196,6 @@ public void testShowStatsWithHavingFails()\n         assertQueryFails(\"SHOW STATS FOR (SELECT count(nationkey) FROM nation_partitioned GROUP BY regionkey HAVING regionkey > 0)\", \".*HAVING is not supported in SHOW STATS SELECT clause\");\n     }\n \n-    @Test\n-    public void testShowStatsSelectNonStarFails()\n-    {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT orderkey FROM orders)\", \".*Only SELECT \\\\* is supported in SHOW STATS SELECT clause\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2MzQzNQ==", "bodyText": "This belongs to the first commit", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r376363435", "createdAt": "2020-02-07T12:22:13Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -213,8 +205,8 @@ public void testShowStatsWithSelectDistinctFails()\n     @Test\n     public void testShowStatsWithSelectFunctionCallFails()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\", \".*Only SELECT \\\\* is supported in SHOW STATS SELECT clause\");\n-        assertQueryFails(\"SHOW STATS FOR (SELECT count(*) FROM orders)\", \".*Only SELECT \\\\* is supported in SHOW STATS SELECT clause\");\n+        assertQueryFails(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NDI5OA==", "bodyText": "Add a test with SHOW STATS FOR (SELECT *, nationkey ...\nAdd a test with SHOW STATS FOR (SELECT *, * ...", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r376364298", "createdAt": "2020-02-07T12:24:30Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -158,28 +162,54 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n             check(!querySpecification.getHaving().isPresent(), node, \"HAVING is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getGroupBy().isPresent(), node, \"GROUP BY is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getSelect().isDistinct(), node, \"DISTINCT is not supported by SHOW STATS SELECT clause\");\n-\n-            List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n-            check(selectItems.size() == 1 && selectItems.get(0) instanceof AllColumns, node, \"Only SELECT * is supported in SHOW STATS SELECT clause\");\n         }\n \n-        private Node rewriteShowStats(ShowStats node, Table table, Constraint constraint)\n+        private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n+            List<String> statsColumnNames = buildColumnsNames();\n             TableHandle tableHandle = getTableHandle(node, table.getName());\n             TableStatistics tableStatistics = metadata.getTableStatistics(session, tableHandle, constraint);\n-            List<String> statsColumnNames = buildColumnsNames();\n-            List<SelectItem> selectItems = buildSelectItems(statsColumnNames);\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+\n             Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n-            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, tableStatistics);\n+            Set<String> extractNamedResultColumns = extractStatsColumns(tableMetadata, selectItems);\n+            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, extractNamedResultColumns, tableStatistics);\n \n-            return simpleQuery(selectAll(selectItems),\n+            return simpleQuery(selectAll(buildSelectItems(statsColumnNames)),\n                     aliased(new Values(resultRows),\n                             \"table_stats_for_\" + table.getName(),\n                             statsColumnNames));\n         }\n \n-        private static void check(boolean condition, ShowStats node, String message)\n+        private Set<String> extractStatsColumns(TableMetadata metadata, List<SelectItem> selectItems)\n+        {\n+            ImmutableSet.Builder<String> columns = ImmutableSet.builder();\n+\n+            for (SelectItem item : selectItems) {\n+                if (item instanceof AllColumns) {\n+                    for (ColumnMetadata column : metadata.getColumns()) {\n+                        if (!column.isHidden()) {\n+                            columns.add(column.getName());\n+                        }\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NTI5Ng==", "bodyText": "unrelated to introduction of access control;\nbtw why aren't you passing statsColumnNames anymore?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r376365296", "createdAt": "2020-02-07T12:27:13Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -166,19 +170,26 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n \n         private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n-            List<String> statsColumnNames = buildColumnsNames();\n             TableHandle tableHandle = getTableHandle(node, table.getName());\n             TableStatistics tableStatistics = metadata.getTableStatistics(session, tableHandle, constraint);\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n \n             Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n             Set<String> extractNamedResultColumns = extractStatsColumns(tableMetadata, selectItems);\n+\n+            try {\n+                accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableMetadata.getQualifiedName(), extractNamedResultColumns);\n+            }\n+            catch (AccessDeniedException e) {\n+                throw new AccessDeniedException(format(\"Cannot show stats for table %s\", tableMetadata.getTable().toString()));\n+            }\n+\n             List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, extractNamedResultColumns, tableStatistics);\n \n-            return simpleQuery(selectAll(buildSelectItems(statsColumnNames)),\n+            return simpleQuery(selectAll(buildSelectItems()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTc2MjM0", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-355176234", "createdAt": "2020-02-07T14:04:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDowNDo0NFrOFm9_Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxMzowMlrOFm-OtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTg0Mg==", "bodyText": "You can omit SELECT * FROM ( and use just VALUES (1, 2), (3, 4)", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r376405842", "createdAt": "2020-02-07T14:04:44Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -129,6 +129,17 @@ public void testShowStats()\n                         \"   ('name', 0.0, 0.0, 0.0, null, null, null), \" +\n                         \"   ('comment', 0.0, 0.0, 0.0, null, null, null), \" +\n                         \"   (null, null, null, null, 0.0, null, null))\");\n+\n+        assertQuery(\"SHOW STATS FOR (SELECT regionkey FROM nation_partitioned WHERE regionkey BETWEEN 1 AND 1 + 2)\",\n+                \"SELECT * FROM (VALUES \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwOTc4MA==", "bodyText": "Can you please write test in io.prestosql.tests.AbstractTestQueries#testAccessControl for that as well? Product test sounds like an overkill, but once you wrote it could stay here as well.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r376409780", "createdAt": "2020-02-07T14:13:02Z", "author": {"login": "kokosing"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSqlStandardAccessControlChecks.java", "diffHunk": "@@ -222,6 +222,16 @@ public void testAccessControlShowColumns()\n         assertThat(bobExecutor.executeQuery(format(\"SHOW COLUMNS FROM %s\", tableName))).hasRowsCount(2);\n     }\n \n+    @Test(groups = {AUTHORIZATION, PROFILE_SPECIFIC_TESTS})", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MDYwOTU2", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-358060956", "createdAt": "2020-02-13T09:21:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToyMTo1NVrOFpMUzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTozMzoyNlrOFpMuMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczNzg3MQ==", "bodyText": "as discussed offline, make it a separate change", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r378737871", "createdAt": "2020-02-13T09:21:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -123,19 +129,35 @@ protected Node visitShowStats(ShowStats node, Void context)\n             if (node.getRelation() instanceof TableSubquery) {\n                 Query query = ((TableSubquery) node.getRelation()).getQuery();\n                 QuerySpecification specification = (QuerySpecification) query.getQueryBody();\n-                Plan plan = queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);\n+                Plan plan = getPlanForSpecification(specification);\n                 validateShowStatsSubquery(node, query, specification, plan);\n                 Table table = (Table) specification.getFrom().get();\n                 Constraint constraint = getConstraint(plan);\n-                return rewriteShowStats(node, table, constraint);\n+                return rewriteShowStats(node, table, specification.getSelect().getSelectItems(), constraint);\n             }\n             if (node.getRelation() instanceof Table) {\n                 Table table = (Table) node.getRelation();\n-                return rewriteShowStats(node, table, Constraint.alwaysTrue());\n+                return rewriteShowStats(node, table, ImmutableList.of(new AllColumns()), Constraint.alwaysTrue());\n             }\n             throw new IllegalArgumentException(\"Expected either TableSubquery or Table as relation\");\n         }\n \n+        private TableMetadata getTableMetadata(Node node, QualifiedName table)\n+        {\n+            return metadata.getTableMetadata(session, getTableHandle(node, table));\n+        }\n+\n+        private Plan getPlanForSpecification(QuerySpecification specification)\n+        {\n+            try {\n+                return queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);\n+            }\n+            catch (AccessDeniedException e) {\n+                TableMetadata metadata = getTableMetadata(specification, ((Table) specification.getFrom().get()).getName());\n+                throw new AccessDeniedException(format(\"Cannot show stats for table %s\", metadata.getTable()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0NDM2OQ==", "bodyText": "I am concerned about cast in catch clause, as this is an assumption.\nOn  the calling side, this assumption is already made in a form of a cast: ((Table) specification.getFrom().get()).\nSo pass the Table object here.\nSecond, I think we can skip getTableMetadata here and use Table#getName for error reporting directly.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r378744369", "createdAt": "2020-02-13T09:33:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -123,19 +129,35 @@ protected Node visitShowStats(ShowStats node, Void context)\n             if (node.getRelation() instanceof TableSubquery) {\n                 Query query = ((TableSubquery) node.getRelation()).getQuery();\n                 QuerySpecification specification = (QuerySpecification) query.getQueryBody();\n-                Plan plan = queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);\n+                Plan plan = getPlanForSpecification(specification);\n                 validateShowStatsSubquery(node, query, specification, plan);\n                 Table table = (Table) specification.getFrom().get();\n                 Constraint constraint = getConstraint(plan);\n-                return rewriteShowStats(node, table, constraint);\n+                return rewriteShowStats(node, table, specification.getSelect().getSelectItems(), constraint);\n             }\n             if (node.getRelation() instanceof Table) {\n                 Table table = (Table) node.getRelation();\n-                return rewriteShowStats(node, table, Constraint.alwaysTrue());\n+                return rewriteShowStats(node, table, ImmutableList.of(new AllColumns()), Constraint.alwaysTrue());\n             }\n             throw new IllegalArgumentException(\"Expected either TableSubquery or Table as relation\");\n         }\n \n+        private TableMetadata getTableMetadata(Node node, QualifiedName table)\n+        {\n+            return metadata.getTableMetadata(session, getTableHandle(node, table));\n+        }\n+\n+        private Plan getPlanForSpecification(QuerySpecification specification)\n+        {\n+            try {\n+                return queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);\n+            }\n+            catch (AccessDeniedException e) {\n+                TableMetadata metadata = getTableMetadata(specification, ((Table) specification.getFrom().get()).getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzA0MDQ2", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-362704046", "createdAt": "2020-02-21T15:20:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNToyMDowOVrOFs6cSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjozODozMVrOFs9NFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzOTE3Ng==", "bodyText": "remove", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382639176", "createdAt": "2020-02-21T15:20:09Z", "author": {"login": "findepi"}, "path": "presto-main/etc/hive-default-fs-site.xml", "diffHunk": "@@ -0,0 +1,6 @@\n+<configuration>\n+    <property>\n+        <name>fs.default.name</name>\n+        <value>hdfs://hadoop-master:9000</value>\n+    </property>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDA5Ng==", "bodyText": "provide exact columns in the message\nhere it's only one, but would be good in other cases too", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382680096", "createdAt": "2020-02-21T16:30:32Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -4697,6 +4697,13 @@ public void testAccessControl()\n         assertAccessDenied(\"SELECT name AS my_alias FROM nation\", \"Cannot select from columns \\\\[name\\\\] in table .*.nation.*\", privilege(\"name\", SELECT_COLUMN));\n         assertAccessDenied(\"SHOW CREATE TABLE orders\", \"Cannot show columns of table .*.orders.*\", privilege(\"orders\", SHOW_COLUMNS));\n         assertAccessAllowed(\"SHOW CREATE TABLE lineitem\", privilege(\"orders\", SHOW_COLUMNS));\n+        assertAccessAllowed(\"SHOW STATS FOR lineitem\");\n+        assertAccessAllowed(\"SHOW STATS FOR lineitem\", privilege(\"orders\", SELECT_COLUMN));\n+        assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\");\n+        assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\", privilege(\"orders\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM lineitem)\", \"Cannot select from columns \\\\[.*\\\\] in table or view .*.lineitem.*\", privilege(\"lineitem\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot select from columns \\\\[.*\\\\] in table or view .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDQ0MQ==", "bodyText": "intentional?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382680441", "createdAt": "2020-02-21T16:31:08Z", "author": {"login": "findepi"}, "path": "presto-main/etc/catalog/blackhole.properties", "diffHunk": "@@ -1,8 +0,0 @@\n-#\n-# WARNING\n-# ^^^^^^^\n-# This configuration file is for development only and should NOT be used\n-# in production. For example configuration, see the Presto documentation.\n-#\n-\n-connector.name=blackhole", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDYwMg==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382680602", "createdAt": "2020-02-21T16:31:25Z", "author": {"login": "findepi"}, "path": "presto-main/etc/config.properties", "diffHunk": "@@ -29,24 +29,8 @@ query.min-expire-age=30m\n \n plugin.bundles=\\\n   ../presto-resource-group-managers/pom.xml,\\\n-  ../presto-password-authenticators/pom.xml, \\\n-  ../presto-iceberg/pom.xml,\\\n-  ../presto-blackhole/pom.xml,\\\n-  ../presto-memory/pom.xml,\\\n-  ../presto-jmx/pom.xml,\\\n-  ../presto-raptor-legacy/pom.xml,\\\n-  ../presto-hive-hadoop2/pom.xml,\\\n-  ../presto-example-http/pom.xml,\\\n-  ../presto-kafka/pom.xml, \\\n-  ../presto-tpch/pom.xml, \\\n-  ../presto-local-file/pom.xml, \\\n-  ../presto-mysql/pom.xml,\\\n-  ../presto-memsql/pom.xml,\\\n-  ../presto-sqlserver/pom.xml, \\\n-  ../presto-postgresql/pom.xml, \\\n-  ../presto-thrift/pom.xml, \\\n-  ../presto-tpcds/pom.xml, \\\n-  ../presto-google-sheets/pom.xml", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MDgwNg==", "bodyText": "unnecessary change", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382680806", "createdAt": "2020-02-21T16:31:46Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -133,8 +133,8 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 QuerySpecification specification = (QuerySpecification) query.getQueryBody();\n                 Plan plan = getPlanForSpecification(specification);\n                 validateShowStatsSubquery(node, query, specification, plan);\n-                Table table = (Table) specification.getFrom().get();\n                 Constraint constraint = getConstraint(plan);\n+                Table table = (Table) specification.getFrom().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MjMwOQ==", "bodyText": "In the next commit you remove this catch clause, and in the subsequent you add it back. Am i reading it right?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382682309", "createdAt": "2020-02-21T16:34:37Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -123,19 +129,35 @@ protected Node visitShowStats(ShowStats node, Void context)\n             if (node.getRelation() instanceof TableSubquery) {\n                 Query query = ((TableSubquery) node.getRelation()).getQuery();\n                 QuerySpecification specification = (QuerySpecification) query.getQueryBody();\n-                Plan plan = queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);\n+                Plan plan = getPlanForSpecification(specification);\n                 validateShowStatsSubquery(node, query, specification, plan);\n                 Table table = (Table) specification.getFrom().get();\n                 Constraint constraint = getConstraint(plan);\n-                return rewriteShowStats(node, table, constraint);\n+                return rewriteShowStats(node, table, specification.getSelect().getSelectItems(), constraint);\n             }\n             if (node.getRelation() instanceof Table) {\n                 Table table = (Table) node.getRelation();\n-                return rewriteShowStats(node, table, Constraint.alwaysTrue());\n+                return rewriteShowStats(node, table, ImmutableList.of(new AllColumns()), Constraint.alwaysTrue());\n             }\n             throw new IllegalArgumentException(\"Expected either TableSubquery or Table as relation\");\n         }\n \n+        private TableMetadata getTableMetadata(Node node, QualifiedName table)\n+        {\n+            return metadata.getTableMetadata(session, getTableHandle(node, table));\n+        }\n+\n+        private Plan getPlanForSpecification(QuerySpecification specification)\n+        {\n+            try {\n+                return queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);\n+            }\n+            catch (AccessDeniedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MjYzOQ==", "bodyText": "unnecessary change", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382682639", "createdAt": "2020-02-21T16:35:11Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -232,17 +279,24 @@ private TableHandle getTableHandle(ShowStats node, QualifiedName table)\n                     .collect(toImmutableList());\n         }\n \n-        private List<Expression> buildStatisticsRows(TableMetadata tableMetadata, Map<String, ColumnHandle> columnHandles, TableStatistics tableStatistics)\n+        private List<Expression> buildStatisticsRows(TableMetadata tableMetadata, Map<String, ColumnHandle> columnHandles, Set<String> resultColumns, TableStatistics tableStatistics)\n         {\n             ImmutableList.Builder<Expression> rowsBuilder = ImmutableList.builder();\n             for (ColumnMetadata columnMetadata : tableMetadata.getColumns()) {\n                 if (columnMetadata.isHidden()) {\n                     continue;\n                 }\n                 String columnName = columnMetadata.getName();\n-                Type columnType = columnMetadata.getType();\n+\n+                if (!resultColumns.contains(columnName)) {\n+                    continue;\n+                }\n+\n                 ColumnHandle columnHandle = columnHandles.get(columnName);\n+                Type columnType = columnMetadata.getType();\n+\n                 ColumnStatistics columnStatistics = tableStatistics.getColumnStatistics().get(columnHandle);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MjY4MA==", "bodyText": "unnecessary change", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382682680", "createdAt": "2020-02-21T16:35:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -232,17 +279,24 @@ private TableHandle getTableHandle(ShowStats node, QualifiedName table)\n                     .collect(toImmutableList());\n         }\n \n-        private List<Expression> buildStatisticsRows(TableMetadata tableMetadata, Map<String, ColumnHandle> columnHandles, TableStatistics tableStatistics)\n+        private List<Expression> buildStatisticsRows(TableMetadata tableMetadata, Map<String, ColumnHandle> columnHandles, Set<String> resultColumns, TableStatistics tableStatistics)\n         {\n             ImmutableList.Builder<Expression> rowsBuilder = ImmutableList.builder();\n             for (ColumnMetadata columnMetadata : tableMetadata.getColumns()) {\n                 if (columnMetadata.isHidden()) {\n                     continue;\n                 }\n                 String columnName = columnMetadata.getName();\n-                Type columnType = columnMetadata.getType();\n+\n+                if (!resultColumns.contains(columnName)) {\n+                    continue;\n+                }\n+\n                 ColumnHandle columnHandle = columnHandles.get(columnName);\n+                Type columnType = columnMetadata.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4MzcyMQ==", "bodyText": "If the table name was qualified in query, it should be qualified in error message\n(there is no opposite implication IMO)", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382683721", "createdAt": "2020-02-21T16:37:08Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -191,7 +198,7 @@ private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> sele\n                 accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableMetadata.getQualifiedName(), extractNamedResultColumns);\n             }\n             catch (AccessDeniedException e) {\n-                throw new AccessDeniedException(format(\"Cannot show stats for table %s\", tableMetadata.getTable().toString()));\n+                throw new AccessDeniedException(format(\"Cannot show stats for table %s\", tableMetadata.getTable().getTableName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDQzOA==", "bodyText": "Would be good to remove .* in the commit where you added this test, so that the next commit shows what's being changed here\nAlso, add test cases where lineitem is qualified with schema and catalog.schema.\n@kokosing @electrum  what about moving io.prestosql.testing.AbstractTestQueries#testAccessControl to TLQ? Maybe along with testNonQueryAccessControl?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r382684438", "createdAt": "2020-02-21T16:38:31Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -4701,9 +4701,9 @@ public void testAccessControl()\n         assertAccessAllowed(\"SHOW STATS FOR lineitem\", privilege(\"orders\", SELECT_COLUMN));\n         assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\");\n         assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\", privilege(\"orders\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM lineitem)\", \"Cannot select from columns \\\\[.*\\\\] in table or view .*.lineitem.*\", privilege(\"lineitem\", SELECT_COLUMN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzQwNjEx", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-363340611", "createdAt": "2020-02-24T12:02:20Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowMjoyMFrOFteSvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowMjoyMFrOFteSvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNjU1Nw==", "bodyText": "When one column is denied access but others are allowed, do we want to indicate this anyhow?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r383226557", "createdAt": "2020-02-24T12:02:20Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -4704,11 +4704,9 @@ public void testAccessControl()\n         assertAccessAllowed(\"SHOW STATS FOR lineitem\", privilege(\"orders\", SELECT_COLUMN));\n         assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\");\n         assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\", privilege(\"orders\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM lineitem)\",\n-                \"Cannot select from columns \\\\[returnflag, linenumber, orderkey, quantity, shipmode, discount, tax, suppkey, partkey, shipinstruct, linestatus, extendedprice, comment, receiptdate, commitdate, shipdate] in table or view .*.lineitem.*\",\n-                privilege(\"lineitem\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot select from columns \\\\[nationkey\\\\] in table or view .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM nation)\", \"Cannot select from columns \\\\[nationkey, regionkey, name, comment\\\\] in table or view .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM lineitem)\", \"Cannot show stats for table .*.lineitem\", privilege(\"lineitem\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot show stats for table .*.nation\", privilege(\"nation\", SELECT_COLUMN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNDY5ODY2", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-373469866", "createdAt": "2020-03-12T11:20:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMToyMDoxN1rOF1alkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMToyMDoxN1rOF1alkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1NDQ0OA==", "bodyText": "how SHOW STATS FOR lineitem is going to work when user has access only to subset of columns? Is it only a sugar for SHOW STATS FOR (SELECT * FROM lineitem)? And I should expect a failure that user is not allowed to see some columns, or it should just filter only visible columns?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r391554448", "createdAt": "2020-03-12T11:20:17Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -4700,6 +4700,12 @@ public void testAccessControl()\n         assertAccessDenied(\"SELECT name AS my_alias FROM nation\", \"Cannot select from columns \\\\[name\\\\] in table .*.nation.*\", privilege(\"name\", SELECT_COLUMN));\n         assertAccessDenied(\"SHOW CREATE TABLE orders\", \"Cannot show create table for .*.orders.*\", privilege(\"orders\", SHOW_CREATE_TABLE));\n         assertAccessAllowed(\"SHOW CREATE TABLE lineitem\", privilege(\"orders\", SHOW_CREATE_TABLE));\n+        assertAccessAllowed(\"SHOW STATS FOR lineitem\");\n+        assertAccessAllowed(\"SHOW STATS FOR lineitem\", privilege(\"orders\", SELECT_COLUMN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNDcxMzQz", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-373471343", "createdAt": "2020-03-12T11:22:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMToyMjozOFrOF1aqSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTozMzo0OFrOF1a-Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1NTY1Ng==", "bodyText": "does it make sense to have this, method? Maybe inline?", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r391555656", "createdAt": "2020-03-12T11:22:38Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -123,19 +128,29 @@ protected Node visitShowStats(ShowStats node, Void context)\n             if (node.getRelation() instanceof TableSubquery) {\n                 Query query = ((TableSubquery) node.getRelation()).getQuery();\n                 QuerySpecification specification = (QuerySpecification) query.getQueryBody();\n-                Plan plan = queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);\n+                Plan plan = getPlanForSpecification(specification);\n                 validateShowStatsSubquery(node, query, specification, plan);\n                 Table table = (Table) specification.getFrom().get();\n                 Constraint constraint = getConstraint(plan);\n-                return rewriteShowStats(node, table, constraint);\n+                return rewriteShowStats(node, table, specification.getSelect().getSelectItems(), constraint);\n             }\n             if (node.getRelation() instanceof Table) {\n                 Table table = (Table) node.getRelation();\n-                return rewriteShowStats(node, table, Constraint.alwaysTrue());\n+                return rewriteShowStats(node, table, ImmutableList.of(new AllColumns()), Constraint.alwaysTrue());\n             }\n             throw new IllegalArgumentException(\"Expected either TableSubquery or Table as relation\");\n         }\n \n+        private TableMetadata getTableMetadata(Node node, QualifiedName table)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1NjM5OA==", "bodyText": "I would undo this change. It is simple refactor not related to the main change. Also value of this refactor is questionable. If you see a value in this, then please extract this to separate commit.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r391556398", "createdAt": "2020-03-12T11:24:09Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -123,19 +128,29 @@ protected Node visitShowStats(ShowStats node, Void context)\n             if (node.getRelation() instanceof TableSubquery) {\n                 Query query = ((TableSubquery) node.getRelation()).getQuery();\n                 QuerySpecification specification = (QuerySpecification) query.getQueryBody();\n-                Plan plan = queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);\n+                Plan plan = getPlanForSpecification(specification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1OTkwNg==", "bodyText": "SHOW STATS FOR (SELECT *, nationkey  I guess it should be coherent with regular SELECT *, nationkey, so I think we should  produce duplicate columns if user requested so. However I see no reason why he might do so.\nIn future we might want to support stats for arbitrary queries then that would like:\nSHOW STATS FOR (SELECT a+1, a+1, a+2). Then removing duplicates might be \"surprising\" to user.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r391559906", "createdAt": "2020-03-12T11:31:50Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -158,28 +162,54 @@ private void validateShowStatsSubquery(ShowStats node, Query query, QuerySpecifi\n             check(!querySpecification.getHaving().isPresent(), node, \"HAVING is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getGroupBy().isPresent(), node, \"GROUP BY is not supported in SHOW STATS SELECT clause\");\n             check(!querySpecification.getSelect().isDistinct(), node, \"DISTINCT is not supported by SHOW STATS SELECT clause\");\n-\n-            List<SelectItem> selectItems = querySpecification.getSelect().getSelectItems();\n-            check(selectItems.size() == 1 && selectItems.get(0) instanceof AllColumns, node, \"Only SELECT * is supported in SHOW STATS SELECT clause\");\n         }\n \n-        private Node rewriteShowStats(ShowStats node, Table table, Constraint constraint)\n+        private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> selectItems, Constraint constraint)\n         {\n+            List<String> statsColumnNames = buildColumnsNames();\n             TableHandle tableHandle = getTableHandle(node, table.getName());\n             TableStatistics tableStatistics = metadata.getTableStatistics(session, tableHandle, constraint);\n-            List<String> statsColumnNames = buildColumnsNames();\n-            List<SelectItem> selectItems = buildSelectItems(statsColumnNames);\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+\n             Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n-            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, tableStatistics);\n+            Set<String> extractNamedResultColumns = extractStatsColumns(tableMetadata, selectItems);\n+            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, extractNamedResultColumns, tableStatistics);\n \n-            return simpleQuery(selectAll(selectItems),\n+            return simpleQuery(selectAll(buildSelectItems(statsColumnNames)),\n                     aliased(new Values(resultRows),\n                             \"table_stats_for_\" + table.getName(),\n                             statsColumnNames));\n         }\n \n-        private static void check(boolean condition, ShowStats node, String message)\n+        private Set<String> extractStatsColumns(TableMetadata metadata, List<SelectItem> selectItems)\n+        {\n+            ImmutableSet.Builder<String> columns = ImmutableSet.builder();\n+\n+            for (SelectItem item : selectItems) {\n+                if (item instanceof AllColumns) {\n+                    for (ColumnMetadata column : metadata.getColumns()) {\n+                        if (!column.isHidden()) {\n+                            columns.add(column.getName());\n+                        }\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NDI5OA=="}, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2MDM0OQ==", "bodyText": "I know. It is a syntax sugar. I fine with that, but please add a test.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r391560349", "createdAt": "2020-03-12T11:32:52Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -4700,6 +4700,12 @@ public void testAccessControl()\n         assertAccessDenied(\"SELECT name AS my_alias FROM nation\", \"Cannot select from columns \\\\[name\\\\] in table .*.nation.*\", privilege(\"name\", SELECT_COLUMN));\n         assertAccessDenied(\"SHOW CREATE TABLE orders\", \"Cannot show create table for .*.orders.*\", privilege(\"orders\", SHOW_CREATE_TABLE));\n         assertAccessAllowed(\"SHOW CREATE TABLE lineitem\", privilege(\"orders\", SHOW_CREATE_TABLE));\n+        assertAccessAllowed(\"SHOW STATS FOR lineitem\");\n+        assertAccessAllowed(\"SHOW STATS FOR lineitem\", privilege(\"orders\", SELECT_COLUMN));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1NDQ0OA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2MDc5MA==", "bodyText": "undo formatting, it is hard to follow what changed actually.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r391560790", "createdAt": "2020-03-12T11:33:48Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -4704,11 +4704,8 @@ public void testAccessControl()\n         assertAccessAllowed(\"SHOW STATS FOR lineitem\", privilege(\"orders\", SELECT_COLUMN));\n         assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\");\n         assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\", privilege(\"orders\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM lineitem)\",\n-                \"Cannot select from columns \\\\[returnflag, linenumber, orderkey, quantity, shipmode, discount, tax, suppkey, partkey, shipinstruct, linestatus, extendedprice, comment, receiptdate, commitdate, shipdate] in table or view .*.lineitem.*\",\n-                privilege(\"lineitem\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot select from columns \\\\[nationkey\\\\] in table or view .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM nation)\", \"Cannot select from columns \\\\[nationkey, regionkey, name, comment\\\\] in table or view .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM nation)\", \"Cannot show stats for columns \\\\[nationkey, regionkey, name, comment\\\\] in table or view .*.nation\", privilege(\"nation\", SELECT_COLUMN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MjM5NzY3", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-374239767", "createdAt": "2020-03-13T11:50:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTo1MDozNlrOF2A5Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTo1MDozNlrOF2A5Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4MjA2Mg==", "bodyText": "I think this should be moved to rewriteShowStats so we check access for SHOW STATS FOR nation as well.", "url": "https://github.com/trinodb/trino/pull/2665#discussion_r392182062", "createdAt": "2020-03-13T11:50:36Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -172,8 +182,15 @@ private Node rewriteShowStats(ShowStats node, Table table, List<SelectItem> sele\n             TableMetadata tableMetadata = metadata.getTableMetadata(session, getTableHandle(node, table.getName()));\n             Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n             Set<String> extractNamedResultColumns = extractStatsColumns(tableMetadata, selectItems);\n-            List<Expression> resultRows = buildStatisticsRows(tableMetadata, columnHandles, extractNamedResultColumns, tableStatistics);\n \n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzQ5MTIy", "url": "https://github.com/trinodb/trino/pull/2665#pullrequestreview-376749122", "createdAt": "2020-03-18T10:47:56Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "356e424fd744a0cd123da8638e3f26cb3b740959", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/356e424fd744a0cd123da8638e3f26cb3b740959", "committedDate": "2020-03-18T10:53:37Z", "message": "Allow subsets of columns in SHOW STATS FOR (SELECT)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf9b799f52121ecdaf79d0cc1665214940e2e122", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/cf9b799f52121ecdaf79d0cc1665214940e2e122", "committedDate": "2020-03-18T10:53:38Z", "message": "Check SELECT permissions for SHOW STATS FOR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c84a1b24c3dc3b20a1618a5a8ee75665e24366", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/c7c84a1b24c3dc3b20a1618a5a8ee75665e24366", "committedDate": "2020-03-18T10:53:38Z", "message": "Make access denied messages consistent for SHOW STATS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c7c84a1b24c3dc3b20a1618a5a8ee75665e24366", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/c7c84a1b24c3dc3b20a1618a5a8ee75665e24366", "committedDate": "2020-03-18T10:53:38Z", "message": "Make access denied messages consistent for SHOW STATS"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1721, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}