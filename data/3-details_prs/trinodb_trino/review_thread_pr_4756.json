{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MTE4OTU3", "number": 4756, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoxNzo0MVrOEWmY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODo0NzowNlrOEWmh_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTMzMTE5OnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoxNzo0MVrOG981Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoxNzo0MVrOG981Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxMjk4Nw==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467612987", "createdAt": "2020-08-09T18:17:41Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -52,7 +52,7 @@\n \n public class PrometheusClient\n {\n-    static final Type TIMESTAMP_COLUMN_TYPE = TimestampType.createTimestampType(3);\n+    static final Type TIMESTAMP_COLUMN_TYPE = TimestampWithTimeZoneType.createTimestampWithTimeZoneType(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTMzMTc4OnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoxODozN1rOG981gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoxODozN1rOG981gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxMzA1OA==", "bodyText": "You can use ZoneOffset.UTC which is a ZoneId", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467613058", "createdAt": "2020-08-09T18:18:37Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClock.java", "diffHunk": "@@ -29,21 +29,21 @@\n     @Inject\n     public PrometheusClock()\n     {\n-        this(Clock.systemDefaultZone());\n+        this(Clock.systemUTC());\n     }\n \n     private PrometheusClock(Clock clock)\n     {\n         this.clock = clock;\n     }\n \n-    public LocalDateTime now()\n+    public Instant now()\n     {\n-        return LocalDateTime.now(clock);\n+        return clock.instant();\n     }\n \n-    public static PrometheusClock fixedClockAt(LocalDateTime date)\n+    public static PrometheusClock fixedClockAt(Instant fixedInstant)\n     {\n-        return new PrometheusClock(Clock.fixed(date.atZone(ZoneId.systemDefault()).toInstant(), ZoneId.systemDefault()));\n+        return new PrometheusClock(Clock.fixed(fixedInstant, ZoneId.of(\"UTC\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTMzMzk3OnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusRecordCursor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoyMTowMFrOG982gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMjoxMDo0NlrOG9-Jww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxMzMxMw==", "bodyText": "This seems strange the data is coming from a different system (unlikely JMX where it's local to that JVM). Using session time zone seems better. Though in practice these are likely to be the same.", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467613313", "createdAt": "2020-08-09T18:21:00Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusRecordCursor.java", "diffHunk": "@@ -139,8 +141,10 @@ public long getLong(int field)\n     {\n         Type type = getType(field);\n         if (type.equals(TIMESTAMP_COLUMN_TYPE)) {\n-            Timestamp timestamp = (Timestamp) requireNonNull(getFieldValue(field));\n-            return timestamp.toInstant().toEpochMilli();\n+            Instant dateTime = (Instant) requireNonNull(getFieldValue(field));\n+            // render with the fixed offset of the Presto server", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNDYyNw==", "bodyText": "I think it should either be JVM or a configuration.  We can add a configuration later if people want.", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467634627", "createdAt": "2020-08-09T22:10:46Z", "author": {"login": "dain"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusRecordCursor.java", "diffHunk": "@@ -139,8 +141,10 @@ public long getLong(int field)\n     {\n         Type type = getType(field);\n         if (type.equals(TIMESTAMP_COLUMN_TYPE)) {\n-            Timestamp timestamp = (Timestamp) requireNonNull(getFieldValue(field));\n-            return timestamp.toInstant().toEpochMilli();\n+            Instant dateTime = (Instant) requireNonNull(getFieldValue(field));\n+            // render with the fixed offset of the Presto server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxMzMxMw=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTMzODE2OnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoyNjowN1rOG984ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoyNjowN1rOG984ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxMzc5Nw==", "bodyText": "Lowercase Uri", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467613797", "createdAt": "2020-08-09T18:26:07Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -13,75 +13,82 @@\n  */\n package io.prestosql.plugin.prometheus;\n \n-import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n-import com.google.common.io.Files;\n import io.airlift.json.JsonCodec;\n import io.prestosql.spi.PrestoException;\n import io.prestosql.spi.type.DoubleType;\n-import io.prestosql.spi.type.MapType;\n import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n import io.prestosql.spi.type.TypeManager;\n import okhttp3.OkHttpClient;\n+import okhttp3.OkHttpClient.Builder;\n import okhttp3.Request;\n import okhttp3.Response;\n-import okhttp3.ResponseBody;\n import org.apache.http.client.utils.URIBuilder;\n \n import javax.inject.Inject;\n \n import java.io.File;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Supplier;\n \n import static io.prestosql.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n import static io.prestosql.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n import static io.prestosql.spi.StandardErrorCode.NOT_FOUND;\n import static io.prestosql.spi.type.TypeSignature.mapType;\n import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.nio.file.Files.readString;\n import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public class PrometheusClient\n {\n-    private PrometheusConnectorConfig config;\n+    static final Type TIMESTAMP_COLUMN_TYPE = TimestampType.createTimestampType(3);\n     static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n-    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();\n+    private static final OkHttpClient httpClient = new Builder().build();\n+\n+    private final Optional<File> bearerTokenFile;\n     private final Supplier<Map<String, Object>> tableSupplier;\n-    private final TypeManager typeManager;\n+    private final Type varcharMapType;\n \n     @Inject\n     public PrometheusClient(PrometheusConnectorConfig config, JsonCodec<Map<String, Object>> metricCodec, TypeManager typeManager)\n-            throws URISyntaxException\n     {\n         requireNonNull(config, \"config is null\");\n         requireNonNull(metricCodec, \"metricCodec is null\");\n         requireNonNull(typeManager, \"typeManager is null\");\n \n-        tableSupplier = Suppliers.memoizeWithExpiration(metricsSupplier(metricCodec, getPrometheusMetricsURI(config)),\n-                (long) config.getCacheDuration().getValue(), config.getCacheDuration().getUnit());\n-        this.typeManager = typeManager;\n-        this.config = config;\n+        bearerTokenFile = config.getBearerTokenFile();\n+        URI prometheusMetricsUri = getPrometheusMetricsURI(config.getPrometheusURI());\n+        tableSupplier = Suppliers.memoizeWithExpiration(\n+                () -> fetchMetrics(metricCodec, prometheusMetricsUri),\n+                config.getCacheDuration().toMillis(),\n+                MILLISECONDS);\n+        varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n     }\n \n-    private URI getPrometheusMetricsURI(PrometheusConnectorConfig config)\n-            throws URISyntaxException\n+    private static URI getPrometheusMetricsURI(URI prometheusURI)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTM0MDU3OnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoyOTozMVrOG985kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODoyOTozMVrOG985kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxNDA5OQ==", "bodyText": "We should get rid of this usage of org.apache.http.client.utils.URIBuilder. There's another PR #4698 to use Airlift HTTP client.\nreturn new URI(uri.getScheme(), uri.getAuthority(), uri.getPath() + METRICS_ENDPOINT, null, null);", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467614099", "createdAt": "2020-08-09T18:29:31Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -13,75 +13,82 @@\n  */\n package io.prestosql.plugin.prometheus;\n \n-import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n-import com.google.common.io.Files;\n import io.airlift.json.JsonCodec;\n import io.prestosql.spi.PrestoException;\n import io.prestosql.spi.type.DoubleType;\n-import io.prestosql.spi.type.MapType;\n import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n import io.prestosql.spi.type.TypeManager;\n import okhttp3.OkHttpClient;\n+import okhttp3.OkHttpClient.Builder;\n import okhttp3.Request;\n import okhttp3.Response;\n-import okhttp3.ResponseBody;\n import org.apache.http.client.utils.URIBuilder;\n \n import javax.inject.Inject;\n \n import java.io.File;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Supplier;\n \n import static io.prestosql.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n import static io.prestosql.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n import static io.prestosql.spi.StandardErrorCode.NOT_FOUND;\n import static io.prestosql.spi.type.TypeSignature.mapType;\n import static io.prestosql.spi.type.VarcharType.VARCHAR;\n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.nio.file.Files.readString;\n import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public class PrometheusClient\n {\n-    private PrometheusConnectorConfig config;\n+    static final Type TIMESTAMP_COLUMN_TYPE = TimestampType.createTimestampType(3);\n     static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n-    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();\n+    private static final OkHttpClient httpClient = new Builder().build();\n+\n+    private final Optional<File> bearerTokenFile;\n     private final Supplier<Map<String, Object>> tableSupplier;\n-    private final TypeManager typeManager;\n+    private final Type varcharMapType;\n \n     @Inject\n     public PrometheusClient(PrometheusConnectorConfig config, JsonCodec<Map<String, Object>> metricCodec, TypeManager typeManager)\n-            throws URISyntaxException\n     {\n         requireNonNull(config, \"config is null\");\n         requireNonNull(metricCodec, \"metricCodec is null\");\n         requireNonNull(typeManager, \"typeManager is null\");\n \n-        tableSupplier = Suppliers.memoizeWithExpiration(metricsSupplier(metricCodec, getPrometheusMetricsURI(config)),\n-                (long) config.getCacheDuration().getValue(), config.getCacheDuration().getUnit());\n-        this.typeManager = typeManager;\n-        this.config = config;\n+        bearerTokenFile = config.getBearerTokenFile();\n+        URI prometheusMetricsUri = getPrometheusMetricsURI(config.getPrometheusURI());\n+        tableSupplier = Suppliers.memoizeWithExpiration(\n+                () -> fetchMetrics(metricCodec, prometheusMetricsUri),\n+                config.getCacheDuration().toMillis(),\n+                MILLISECONDS);\n+        varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n     }\n \n-    private URI getPrometheusMetricsURI(PrometheusConnectorConfig config)\n-            throws URISyntaxException\n+    private static URI getPrometheusMetricsURI(URI prometheusURI)\n     {\n-        // endpoint to retrieve metric names from Prometheus\n-        URI uri = config.getPrometheusURI();\n-        return new URIBuilder()\n-                .setScheme(uri.getScheme())\n-                .setHost(uri.getAuthority())\n-                .setPath(uri.getPath().concat(METRICS_ENDPOINT))\n-                .build();\n+        try {\n+            // endpoint to retrieve metric names from Prometheus\n+            return new URIBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTM0MTUxOnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODozMDoyOFrOG986BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODozMDoyOFrOG986BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxNDIxMw==", "bodyText": "No need to wrap here", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467614213", "createdAt": "2020-08-09T18:30:28Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -106,72 +113,59 @@ public PrometheusTable getTable(String schema, String tableName)\n     {\n         requireNonNull(schema, \"schema is null\");\n         requireNonNull(tableName, \"tableName is null\");\n-        if (schema.equals(\"default\")) {\n-            List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n-            if (tableNames == null) {\n-                return null;\n-            }\n-            if (!tableNames.contains(tableName)) {\n-                return null;\n-            }\n-            MapType varcharMapType = (MapType) typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n-            PrometheusTable table = new PrometheusTable(\n-                    tableName,\n-                    ImmutableList.of(\n-                            new PrometheusColumn(\"labels\", varcharMapType),\n-                            new PrometheusColumn(\"timestamp\", TimestampType.TIMESTAMP),\n-                            new PrometheusColumn(\"value\", DoubleType.DOUBLE)));\n-            PrometheusTableHandle tableHandle = new PrometheusTableHandle(schema, tableName);\n-            return table;\n+        if (!schema.equals(\"default\")) {\n+            return null;\n+        }\n+\n+        List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n+        if (tableNames == null) {\n+            return null;\n         }\n-        return null;\n+        if (!tableNames.contains(tableName)) {\n+            return null;\n+        }\n+        return new PrometheusTable(\n+                tableName,\n+                ImmutableList.of(\n+                        new PrometheusColumn(\"labels\", varcharMapType),\n+                        new PrometheusColumn(\"timestamp\", TIMESTAMP_COLUMN_TYPE),\n+                        new PrometheusColumn(\"value\", DoubleType.DOUBLE)));\n     }\n \n-    private static Supplier<Map<String, Object>> metricsSupplier(final JsonCodec<Map<String, Object>> metricsCodec, final URI metadataUri)\n+    private Map<String, Object> fetchMetrics(JsonCodec<Map<String, Object>> metricsCodec, URI metadataUri)\n     {\n-        return () -> {\n-            try {\n-                byte[] json = getHttpResponse(metadataUri).bytes();\n-                Map<String, Object> metrics = metricsCodec.fromJson(json);\n-                return metrics;\n-            }\n-            catch (IOException | URISyntaxException e) {\n-                throw new UncheckedIOException((IOException) e);\n-            }\n-        };\n+        return metricsCodec.fromJson(fetchUri(metadataUri));\n     }\n \n-    static ResponseBody getHttpResponse(URI uri)\n-            throws IOException, URISyntaxException\n+    public byte[] fetchUri(URI uri)\n     {\n-        Request.Builder requestBuilder = new Request.Builder();\n-        if (new PrometheusConnectorConfig() != null) {\n-            getBearerAuthInfoFromFile().map(bearerToken ->\n-                    requestBuilder.header(\"Authorization\", \"Bearer \" + bearerToken));\n-        }\n-        requestBuilder.url(uri.toURL());\n-        Request request = requestBuilder.build();\n-        Response response = httpClient.newCall(request).execute();\n-        if (response.isSuccessful()) {\n-            return response.body();\n+        Request.Builder requestBuilder = new Request.Builder()\n+                .url(uri.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTM0MjcyOnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODozMTo1N1rOG986mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODozMTo1N1rOG986mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxNDM2MA==", "bodyText": "IOException", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467614360", "createdAt": "2020-08-09T18:31:57Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -106,72 +113,59 @@ public PrometheusTable getTable(String schema, String tableName)\n     {\n         requireNonNull(schema, \"schema is null\");\n         requireNonNull(tableName, \"tableName is null\");\n-        if (schema.equals(\"default\")) {\n-            List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n-            if (tableNames == null) {\n-                return null;\n-            }\n-            if (!tableNames.contains(tableName)) {\n-                return null;\n-            }\n-            MapType varcharMapType = (MapType) typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n-            PrometheusTable table = new PrometheusTable(\n-                    tableName,\n-                    ImmutableList.of(\n-                            new PrometheusColumn(\"labels\", varcharMapType),\n-                            new PrometheusColumn(\"timestamp\", TimestampType.TIMESTAMP),\n-                            new PrometheusColumn(\"value\", DoubleType.DOUBLE)));\n-            PrometheusTableHandle tableHandle = new PrometheusTableHandle(schema, tableName);\n-            return table;\n+        if (!schema.equals(\"default\")) {\n+            return null;\n+        }\n+\n+        List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n+        if (tableNames == null) {\n+            return null;\n         }\n-        return null;\n+        if (!tableNames.contains(tableName)) {\n+            return null;\n+        }\n+        return new PrometheusTable(\n+                tableName,\n+                ImmutableList.of(\n+                        new PrometheusColumn(\"labels\", varcharMapType),\n+                        new PrometheusColumn(\"timestamp\", TIMESTAMP_COLUMN_TYPE),\n+                        new PrometheusColumn(\"value\", DoubleType.DOUBLE)));\n     }\n \n-    private static Supplier<Map<String, Object>> metricsSupplier(final JsonCodec<Map<String, Object>> metricsCodec, final URI metadataUri)\n+    private Map<String, Object> fetchMetrics(JsonCodec<Map<String, Object>> metricsCodec, URI metadataUri)\n     {\n-        return () -> {\n-            try {\n-                byte[] json = getHttpResponse(metadataUri).bytes();\n-                Map<String, Object> metrics = metricsCodec.fromJson(json);\n-                return metrics;\n-            }\n-            catch (IOException | URISyntaxException e) {\n-                throw new UncheckedIOException((IOException) e);\n-            }\n-        };\n+        return metricsCodec.fromJson(fetchUri(metadataUri));\n     }\n \n-    static ResponseBody getHttpResponse(URI uri)\n-            throws IOException, URISyntaxException\n+    public byte[] fetchUri(URI uri)\n     {\n-        Request.Builder requestBuilder = new Request.Builder();\n-        if (new PrometheusConnectorConfig() != null) {\n-            getBearerAuthInfoFromFile().map(bearerToken ->\n-                    requestBuilder.header(\"Authorization\", \"Bearer \" + bearerToken));\n-        }\n-        requestBuilder.url(uri.toURL());\n-        Request request = requestBuilder.build();\n-        Response response = httpClient.newCall(request).execute();\n-        if (response.isSuccessful()) {\n-            return response.body();\n+        Request.Builder requestBuilder = new Request.Builder()\n+                .url(uri.toString());\n+        getBearerAuthInfoFromFile().map(bearerToken -> requestBuilder.header(\"Authorization\", \"Bearer \" + bearerToken));\n+\n+        Response response;\n+        try {\n+            response = httpClient.newCall(requestBuilder.build()).execute();\n+            if (response.isSuccessful() && response.body() != null) {\n+                return response.body().bytes();\n+            }\n         }\n-        else {\n-            throw new PrestoException(PROMETHEUS_UNKNOWN_ERROR, \"Bad response \" + response.code() + response.message());\n+        catch (IOException e) {\n+            throw new PrestoException(PROMETHEUS_UNKNOWN_ERROR, \"Error reading metrics\", e);\n         }\n+\n+        throw new PrestoException(PROMETHEUS_UNKNOWN_ERROR, \"Bad response \" + response.code() + response.message());\n     }\n \n-    static Optional<String> getBearerAuthInfoFromFile()\n-            throws URISyntaxException\n+    private Optional<String> getBearerAuthInfoFromFile()\n     {\n-        return new PrometheusConnectorConfig().getBearerTokenFile()\n-                .map(tokenFileName -> {\n-                    try {\n-                        File tokenFile = tokenFileName;\n-                        return Optional.of(Files.toString(tokenFile, UTF_8));\n-                    }\n-                    catch (Exception e) {\n-                        throw new PrestoException(NOT_FOUND, \"Failed to find/read file: \" + tokenFileName, e);\n-                    }\n-                }).orElse(Optional.empty());\n+        return bearerTokenFile.map(tokenFileName -> {\n+            try {\n+                return readString(tokenFileName.toPath(), UTF_8);\n+            }\n+            catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTM0NDI2OnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODozNDowOVrOG987UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODozNDowOVrOG987UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxNDU0NA==", "bodyText": "Let's make this\nthrow new PrestoException(PROMETHEUS_UNKNOWN_ERROR, \"Failed to read bearer token file: \" + tokenFileName, e);", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467614544", "createdAt": "2020-08-09T18:34:09Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -106,72 +113,59 @@ public PrometheusTable getTable(String schema, String tableName)\n     {\n         requireNonNull(schema, \"schema is null\");\n         requireNonNull(tableName, \"tableName is null\");\n-        if (schema.equals(\"default\")) {\n-            List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n-            if (tableNames == null) {\n-                return null;\n-            }\n-            if (!tableNames.contains(tableName)) {\n-                return null;\n-            }\n-            MapType varcharMapType = (MapType) typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n-            PrometheusTable table = new PrometheusTable(\n-                    tableName,\n-                    ImmutableList.of(\n-                            new PrometheusColumn(\"labels\", varcharMapType),\n-                            new PrometheusColumn(\"timestamp\", TimestampType.TIMESTAMP),\n-                            new PrometheusColumn(\"value\", DoubleType.DOUBLE)));\n-            PrometheusTableHandle tableHandle = new PrometheusTableHandle(schema, tableName);\n-            return table;\n+        if (!schema.equals(\"default\")) {\n+            return null;\n+        }\n+\n+        List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n+        if (tableNames == null) {\n+            return null;\n         }\n-        return null;\n+        if (!tableNames.contains(tableName)) {\n+            return null;\n+        }\n+        return new PrometheusTable(\n+                tableName,\n+                ImmutableList.of(\n+                        new PrometheusColumn(\"labels\", varcharMapType),\n+                        new PrometheusColumn(\"timestamp\", TIMESTAMP_COLUMN_TYPE),\n+                        new PrometheusColumn(\"value\", DoubleType.DOUBLE)));\n     }\n \n-    private static Supplier<Map<String, Object>> metricsSupplier(final JsonCodec<Map<String, Object>> metricsCodec, final URI metadataUri)\n+    private Map<String, Object> fetchMetrics(JsonCodec<Map<String, Object>> metricsCodec, URI metadataUri)\n     {\n-        return () -> {\n-            try {\n-                byte[] json = getHttpResponse(metadataUri).bytes();\n-                Map<String, Object> metrics = metricsCodec.fromJson(json);\n-                return metrics;\n-            }\n-            catch (IOException | URISyntaxException e) {\n-                throw new UncheckedIOException((IOException) e);\n-            }\n-        };\n+        return metricsCodec.fromJson(fetchUri(metadataUri));\n     }\n \n-    static ResponseBody getHttpResponse(URI uri)\n-            throws IOException, URISyntaxException\n+    public byte[] fetchUri(URI uri)\n     {\n-        Request.Builder requestBuilder = new Request.Builder();\n-        if (new PrometheusConnectorConfig() != null) {\n-            getBearerAuthInfoFromFile().map(bearerToken ->\n-                    requestBuilder.header(\"Authorization\", \"Bearer \" + bearerToken));\n-        }\n-        requestBuilder.url(uri.toURL());\n-        Request request = requestBuilder.build();\n-        Response response = httpClient.newCall(request).execute();\n-        if (response.isSuccessful()) {\n-            return response.body();\n+        Request.Builder requestBuilder = new Request.Builder()\n+                .url(uri.toString());\n+        getBearerAuthInfoFromFile().map(bearerToken -> requestBuilder.header(\"Authorization\", \"Bearer \" + bearerToken));\n+\n+        Response response;\n+        try {\n+            response = httpClient.newCall(requestBuilder.build()).execute();\n+            if (response.isSuccessful() && response.body() != null) {\n+                return response.body().bytes();\n+            }\n         }\n-        else {\n-            throw new PrestoException(PROMETHEUS_UNKNOWN_ERROR, \"Bad response \" + response.code() + response.message());\n+        catch (IOException e) {\n+            throw new PrestoException(PROMETHEUS_UNKNOWN_ERROR, \"Error reading metrics\", e);\n         }\n+\n+        throw new PrestoException(PROMETHEUS_UNKNOWN_ERROR, \"Bad response \" + response.code() + response.message());\n     }\n \n-    static Optional<String> getBearerAuthInfoFromFile()\n-            throws URISyntaxException\n+    private Optional<String> getBearerAuthInfoFromFile()\n     {\n-        return new PrometheusConnectorConfig().getBearerTokenFile()\n-                .map(tokenFileName -> {\n-                    try {\n-                        File tokenFile = tokenFileName;\n-                        return Optional.of(Files.toString(tokenFile, UTF_8));\n-                    }\n-                    catch (Exception e) {\n-                        throw new PrestoException(NOT_FOUND, \"Failed to find/read file: \" + tokenFileName, e);\n-                    }\n-                }).orElse(Optional.empty());\n+        return bearerTokenFile.map(tokenFileName -> {\n+            try {\n+                return readString(tokenFileName.toPath(), UTF_8);\n+            }\n+            catch (Exception e) {\n+                throw new PrestoException(NOT_FOUND, \"Failed to find/read file: \" + tokenFileName, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTM0NTM2OnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODozNToyM1rOG987zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODozNToyM1rOG987zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxNDY2OQ==", "bodyText": "Fix abbreviation", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467614669", "createdAt": "2020-08-09T18:35:23Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusMetadata.java", "diffHunk": "@@ -171,9 +171,8 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n     @Override\n     public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)\n     {\n-        PrometheusTableHandle promHandle = (PrometheusTableHandle) handle;\n-        promHandle = new PrometheusTableHandle(promHandle.getSchemaName(), promHandle.getTableName());\n-        promHandle.setPredicate(Optional.of(constraint.getSummary()));\n+        PrometheusTableHandle promHandle = ((PrometheusTableHandle) handle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTM1NDIyOnYy", "diffSide": "RIGHT", "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusQueryResponseParse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODo0NzowNlrOG99ADA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQxODo0NzowNlrOG99ADA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYxNTc1Ng==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/4756#discussion_r467615756", "createdAt": "2020-08-09T18:47:06Z", "author": {"login": "electrum"}, "path": "presto-prometheus/src/main/java/io/prestosql/plugin/prometheus/PrometheusQueryResponseParse.java", "diffHunk": "@@ -105,14 +95,13 @@ private boolean parse()\n                     break;\n                 case \"scalar\":\n                 case \"string\":\n-                    stringOrScalarResult = mapper.readValue(result, new TypeReference<PrometheusTimeSeriesValue>() {});\n+                    PrometheusTimeSeriesValue stringOrScalarResult = mapper.readValue(result, new TypeReference<PrometheusTimeSeriesValue>() {});\n                     Map<String, String> madeUpMetricHeader = new HashMap<>();\n                     madeUpMetricHeader.put(\"__name__\", resultType);\n-                    PrometheusTimeSeriesValueArray timeSeriesValues = new PrometheusTimeSeriesValueArray(Arrays.asList(stringOrScalarResult));\n-                    results = Arrays.asList(new PrometheusMetricResult(madeUpMetricHeader, timeSeriesValues));\n+                    PrometheusTimeSeriesValueArray timeSeriesValues = new PrometheusTimeSeriesValueArray(Collections.singletonList(stringOrScalarResult));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3414, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}