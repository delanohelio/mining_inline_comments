{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Mjg5NDU1", "number": 6115, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxMTowNVrOE9-WDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxNjo0MlrOE9-c6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDIwMDQ2OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxMTowNVrOH68N-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNjowNjo1MVrOH7kwBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ==", "bodyText": "I think this method should be @Deprecated because it's not much better than\ncomputeActual(\"EXPLAIN ANALYZE \" + query); // ensure does not fail\n\nyet, it pretends it is does something useful", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531566075", "createdAt": "2020-11-27T12:11:05Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -321,6 +323,16 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n         assertEquals(actual, expected);\n     }\n \n+    protected void assertExplainAnalyze(@Language(\"SQL\") String query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559db648c90e38e95d30e6e4ef1ae7b22b929268"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NjYxMw==", "bodyText": "It does some very basic matching.\nI have extended this method to support extra expected matches.", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531586613", "createdAt": "2020-11-27T12:56:12Z", "author": {"login": "sopel39"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -321,6 +323,16 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n         assertEquals(actual, expected);\n     }\n \n+    protected void assertExplainAnalyze(@Language(\"SQL\") String query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ=="}, "originalCommit": {"oid": "559db648c90e38e95d30e6e4ef1ae7b22b929268"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwOTU5OQ==", "bodyText": "i do not think this is the right direction. I'd expect the test to do assertThat() and do validation as found fit in this particular case", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531609599", "createdAt": "2020-11-27T13:42:56Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -321,6 +323,16 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n         assertEquals(actual, expected);\n     }\n \n+    protected void assertExplainAnalyze(@Language(\"SQL\") String query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ=="}, "originalCommit": {"oid": "559db648c90e38e95d30e6e4ef1ae7b22b929268"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyMDE5OA==", "bodyText": "I'm pretty sure you would end up with similar helper method that would cut boilerplate", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531620198", "createdAt": "2020-11-27T14:03:56Z", "author": {"login": "sopel39"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -321,6 +323,16 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n         assertEquals(actual, expected);\n     }\n \n+    protected void assertExplainAnalyze(@Language(\"SQL\") String query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ=="}, "originalCommit": {"oid": "559db648c90e38e95d30e6e4ef1ae7b22b929268"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIzMDE1MQ==", "bodyText": "#6139", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r532230151", "createdAt": "2020-11-29T16:06:51Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -321,6 +323,16 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n         assertEquals(actual, expected);\n     }\n \n+    protected void assertExplainAnalyze(@Language(\"SQL\") String query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ=="}, "originalCommit": {"oid": "559db648c90e38e95d30e6e4ef1ae7b22b929268"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDIwNDg0OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxMjozNVrOH68QrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxMjozNVrOH68QrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2Njc2NA==", "bodyText": "Can you please verify some selected parts of the output?\nLike the thing you mentioned in \"Advanced join stats are back\" comment\n#6115 (comment)", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531566764", "createdAt": "2020-11-27T12:12:35Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -4158,6 +4159,14 @@ public void testExplainSetSessionWithUsing()\n                         \"Parameters: [7]\");\n     }\n \n+    @Test\n+    public void testExplainAnalyze()\n+    {\n+        assertExplainAnalyze(\n+                noJoinReordering(BROADCAST),\n+                \"EXPLAIN ANALYZE SELECT * FROM (SELECT nationkey, regionkey FROM nation GROUP BY nationkey, regionkey) a, nation b WHERE a.regionkey = b.regionkey\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDIwOTcyOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxNDowNVrOH68Tag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjo1Njo1NFrOH69fVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NzQ2Ng==", "bodyText": "as assertExplainAnalyze(String) brings very little benefit, let's not add an overload to it.\ninstead, in the actual test, just call computeActual and run assertThat on the returned String\n(and computeActual already accepts a session)", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531567466", "createdAt": "2020-11-27T12:14:05Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -325,7 +325,12 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n \n     protected void assertExplainAnalyze(@Language(\"SQL\") String query)\n     {\n-        String value = (String) computeActual(query).getOnlyValue();\n+        assertExplainAnalyze(getSession(), query);\n+    }\n+\n+    protected void assertExplainAnalyze(Session session, @Language(\"SQL\") String query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NjkwMw==", "bodyText": "I have extended this method to support expected matches", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531586903", "createdAt": "2020-11-27T12:56:54Z", "author": {"login": "sopel39"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -325,7 +325,12 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n \n     protected void assertExplainAnalyze(@Language(\"SQL\") String query)\n     {\n-        String value = (String) computeActual(query).getOnlyValue();\n+        assertExplainAnalyze(getSession(), query);\n+    }\n+\n+    protected void assertExplainAnalyze(Session session, @Language(\"SQL\") String query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NzQ2Ng=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDIxNTEzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/TextRenderer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxNTo0MlrOH68WrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0MzozOVrOH6-5WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2ODMwMA==", "bodyText": "Where can this be a case? Shouldn't we attempt to do a merge?", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531568300", "createdAt": "2020-11-27T12:15:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/TextRenderer.java", "diffHunk": "@@ -163,28 +153,34 @@ private void printDistributions(StringBuilder output, PlanNodeStats stats)\n             output.append(translatedOperatorType);\n             output.append(format(Locale.US, \"Input avg.: %s rows, Input std.dev.: %s%%\\n\",\n                     formatDouble(inputAverage), formatDouble(100.0d * inputStdDevs.get(operator) / inputAverage)));\n+        }\n+    }\n \n-            double hashCollisionsAverage = hashCollisionsAverages.getOrDefault(operator, 0.0d);\n-            double expectedHashCollisionsAverage = expectedHashCollisionsAverages.getOrDefault(operator, 0.0d);\n-            if (hashCollisionsAverage != 0.0d) {\n-                double hashCollisionsStdDevRatio = hashCollisionsStdDevs.get(operator) / hashCollisionsAverage;\n-\n-                if (!translatedOperatorType.isEmpty()) {\n-                    output.append(indentString(2));\n-                }\n-\n-                if (expectedHashCollisionsAverage != 0.0d) {\n-                    double hashCollisionsRatio = hashCollisionsAverage / expectedHashCollisionsAverage;\n-                    output.append(format(Locale.US, \"Collisions avg.: %s (%s%% est.), Collisions std.dev.: %s%%\",\n-                            formatDouble(hashCollisionsAverage), formatDouble(hashCollisionsRatio * 100.0d), formatDouble(hashCollisionsStdDevRatio * 100.0d)));\n-                }\n-                else {\n-                    output.append(format(Locale.US, \"Collisions avg.: %s, Collisions std.dev.: %s%%\",\n-                            formatDouble(hashCollisionsAverage), formatDouble(hashCollisionsStdDevRatio * 100.0d)));\n-                }\n-\n-                output.append(\"\\n\");\n-            }\n+    private void printCollisions(StringBuilder output, PlanNodeStats stats)\n+    {\n+        if (!(stats instanceof HashCollisionPlanNodeStats)) {\n+            return;\n+        }\n+\n+        HashCollisionPlanNodeStats collisionStats = (HashCollisionPlanNodeStats) stats;\n+        if (collisionStats.getOperatorHashCollisionsAverages().keySet().size() != 1) {\n+            // no support for multiple operators that produced collision stats for same plan node", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NzU2MA==", "bodyText": "I don't think this can be the case. I've changed this to assertion.\nThere is no plan node that translates into two operators producing hash collision stats.\nTho operators that produce hash collision stats are HashAggregationOperator/HashBuilderOperator, but they are not produced from same plan node id.", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531587560", "createdAt": "2020-11-27T12:58:19Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/TextRenderer.java", "diffHunk": "@@ -163,28 +153,34 @@ private void printDistributions(StringBuilder output, PlanNodeStats stats)\n             output.append(translatedOperatorType);\n             output.append(format(Locale.US, \"Input avg.: %s rows, Input std.dev.: %s%%\\n\",\n                     formatDouble(inputAverage), formatDouble(100.0d * inputStdDevs.get(operator) / inputAverage)));\n+        }\n+    }\n \n-            double hashCollisionsAverage = hashCollisionsAverages.getOrDefault(operator, 0.0d);\n-            double expectedHashCollisionsAverage = expectedHashCollisionsAverages.getOrDefault(operator, 0.0d);\n-            if (hashCollisionsAverage != 0.0d) {\n-                double hashCollisionsStdDevRatio = hashCollisionsStdDevs.get(operator) / hashCollisionsAverage;\n-\n-                if (!translatedOperatorType.isEmpty()) {\n-                    output.append(indentString(2));\n-                }\n-\n-                if (expectedHashCollisionsAverage != 0.0d) {\n-                    double hashCollisionsRatio = hashCollisionsAverage / expectedHashCollisionsAverage;\n-                    output.append(format(Locale.US, \"Collisions avg.: %s (%s%% est.), Collisions std.dev.: %s%%\",\n-                            formatDouble(hashCollisionsAverage), formatDouble(hashCollisionsRatio * 100.0d), formatDouble(hashCollisionsStdDevRatio * 100.0d)));\n-                }\n-                else {\n-                    output.append(format(Locale.US, \"Collisions avg.: %s, Collisions std.dev.: %s%%\",\n-                            formatDouble(hashCollisionsAverage), formatDouble(hashCollisionsStdDevRatio * 100.0d)));\n-                }\n-\n-                output.append(\"\\n\");\n-            }\n+    private void printCollisions(StringBuilder output, PlanNodeStats stats)\n+    {\n+        if (!(stats instanceof HashCollisionPlanNodeStats)) {\n+            return;\n+        }\n+\n+        HashCollisionPlanNodeStats collisionStats = (HashCollisionPlanNodeStats) stats;\n+        if (collisionStats.getOperatorHashCollisionsAverages().keySet().size() != 1) {\n+            // no support for multiple operators that produced collision stats for same plan node", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2ODMwMA=="}, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwOTk0NQ==", "bodyText": "if this can't be the case, why not verify() here?", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531609945", "createdAt": "2020-11-27T13:43:39Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/TextRenderer.java", "diffHunk": "@@ -163,28 +153,34 @@ private void printDistributions(StringBuilder output, PlanNodeStats stats)\n             output.append(translatedOperatorType);\n             output.append(format(Locale.US, \"Input avg.: %s rows, Input std.dev.: %s%%\\n\",\n                     formatDouble(inputAverage), formatDouble(100.0d * inputStdDevs.get(operator) / inputAverage)));\n+        }\n+    }\n \n-            double hashCollisionsAverage = hashCollisionsAverages.getOrDefault(operator, 0.0d);\n-            double expectedHashCollisionsAverage = expectedHashCollisionsAverages.getOrDefault(operator, 0.0d);\n-            if (hashCollisionsAverage != 0.0d) {\n-                double hashCollisionsStdDevRatio = hashCollisionsStdDevs.get(operator) / hashCollisionsAverage;\n-\n-                if (!translatedOperatorType.isEmpty()) {\n-                    output.append(indentString(2));\n-                }\n-\n-                if (expectedHashCollisionsAverage != 0.0d) {\n-                    double hashCollisionsRatio = hashCollisionsAverage / expectedHashCollisionsAverage;\n-                    output.append(format(Locale.US, \"Collisions avg.: %s (%s%% est.), Collisions std.dev.: %s%%\",\n-                            formatDouble(hashCollisionsAverage), formatDouble(hashCollisionsRatio * 100.0d), formatDouble(hashCollisionsStdDevRatio * 100.0d)));\n-                }\n-                else {\n-                    output.append(format(Locale.US, \"Collisions avg.: %s, Collisions std.dev.: %s%%\",\n-                            formatDouble(hashCollisionsAverage), formatDouble(hashCollisionsStdDevRatio * 100.0d)));\n-                }\n-\n-                output.append(\"\\n\");\n-            }\n+    private void printCollisions(StringBuilder output, PlanNodeStats stats)\n+    {\n+        if (!(stats instanceof HashCollisionPlanNodeStats)) {\n+            return;\n+        }\n+\n+        HashCollisionPlanNodeStats collisionStats = (HashCollisionPlanNodeStats) stats;\n+        if (collisionStats.getOperatorHashCollisionsAverages().keySet().size() != 1) {\n+            // no support for multiple operators that produced collision stats for same plan node", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2ODMwMA=="}, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDIxODAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/TextRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxNjo0MlrOH68YgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxNjo0MlrOH68YgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2ODc2OQ==", "bodyText": "Maybe add a test with EXPLAIN ANALYZE over JOIN, and over AGG,\nverifying \"Collisions\" is in the output ?", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531568769", "createdAt": "2020-11-27T12:16:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/TextRenderer.java", "diffHunk": "@@ -132,6 +131,7 @@ private String printStats(PlanRepresentation plan, NodeRepresentation node)\n         output.append(format(\", Output: %s (%s)\\n\", formatPositions(nodeStats.getPlanNodeOutputPositions()), nodeStats.getPlanNodeOutputDataSize().toString()));\n \n         printDistributions(output, nodeStats);\n+        printCollisions(output, nodeStats);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4685, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}