{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjU4ODEz", "number": 3178, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0NToyMFrODp9eZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozMjowOVrODweoFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzI1NDE1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneSampleChildrenColumns.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0NToyMFrOF5dfpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0NToyMFrOF5dfpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NjM5MQ==", "bodyText": "PruneSampleColumns", "url": "https://github.com/trinodb/trino/pull/3178#discussion_r395796391", "createdAt": "2020-03-20T17:45:20Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneSampleChildrenColumns.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+import io.prestosql.sql.planner.plan.SampleNode;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.sql.planner.iterative.rule.Util.restrictChildOutputs;\n+import static io.prestosql.sql.planner.plan.Patterns.sample;\n+\n+public class PruneSampleChildrenColumns", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzI2MjYyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneSampleChildrenColumns.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0ODowM1rOF5dlPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0ODowM1rOF5dlPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NzgyMQ==", "bodyText": "This level of abstraction does not make the code easier to read and reason about. Inline in both places where it's used and create the Assignments directly as they are expected by the test.", "url": "https://github.com/trinodb/trino/pull/3178#discussion_r395797821", "createdAt": "2020-03-20T17:48:03Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneSampleChildrenColumns.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.rule.test.BaseRuleTest;\n+import io.prestosql.sql.planner.iterative.rule.test.PlanBuilder;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.planner.plan.SampleNode;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.base.Predicates.alwaysTrue;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.expression;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.node;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.strictProject;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.values;\n+import static io.prestosql.sql.planner.plan.SampleNode.Type.SYSTEM;\n+\n+public class TestPruneSampleChildrenColumns\n+        extends BaseRuleTest\n+{\n+    @Test\n+    public void testNotAllInputsReferenced()\n+    {\n+        tester().assertThat(new PruneSampleChildrenColumns())\n+                .on(p -> buildProjectedSample(p, symbol -> symbol.getName().equals(\"b\")))\n+                .matches(\n+                        strictProject(\n+                                ImmutableMap.of(\"b\", expression(\"b\")),\n+                                node(SampleNode.class,\n+                                        strictProject(\n+                                                ImmutableMap.of(\"b\", expression(\"b\")),\n+                                                values(\"a\", \"b\")))));\n+    }\n+\n+    @Test\n+    public void testAllOutputsReferenced()\n+    {\n+        tester().assertThat(new PruneSampleChildrenColumns())\n+                .on(p -> buildProjectedSample(p, alwaysTrue()))\n+                .doesNotFire();\n+    }\n+\n+    private ProjectNode buildProjectedSample(PlanBuilder planBuilder, Predicate<Symbol> projectionFilter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTYwMDIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneSampleColumns.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozMjowOVrOGDgX_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyODowMFrOGDiWiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyOTM0MQ==", "bodyText": "This method is not used anywhere", "url": "https://github.com/trinodb/trino/pull/3178#discussion_r406329341", "createdAt": "2020-04-09T16:32:09Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneSampleColumns.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.rule.test.BaseRuleTest;\n+import io.prestosql.sql.planner.iterative.rule.test.PlanBuilder;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.planner.plan.SampleNode;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.expression;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.node;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.strictProject;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.values;\n+import static io.prestosql.sql.planner.plan.SampleNode.Type.SYSTEM;\n+\n+public class TestPruneSampleColumns\n+        extends BaseRuleTest\n+{\n+    @Test\n+    public void testNotAllInputsReferenced()\n+    {\n+        tester().assertThat(new PruneSampleColumns())\n+                .on(p -> p.project(\n+                        Assignments.identity(p.symbol(\"b\")),\n+                        p.sample(\n+                                0.5,\n+                                SYSTEM,\n+                                p.values(p.symbol(\"a\"), p.symbol(\"b\")))))\n+                .matches(\n+                        strictProject(\n+                                ImmutableMap.of(\"b\", expression(\"b\")),\n+                                node(SampleNode.class,\n+                                        strictProject(\n+                                                ImmutableMap.of(\"b\", expression(\"b\")),\n+                                                values(\"a\", \"b\")))));\n+    }\n+\n+    @Test\n+    public void testAllOutputsReferenced()\n+    {\n+        tester().assertThat(new PruneSampleColumns())\n+                .on(p -> p.project(\n+                        Assignments.identity(p.symbol(\"a\"), p.symbol(\"b\")),\n+                        p.sample(\n+                                0.5,\n+                                SYSTEM,\n+                                p.values(p.symbol(\"a\"), p.symbol(\"b\"))))).doesNotFire();\n+    }\n+\n+    private ProjectNode buildProjectedSample(PlanBuilder planBuilder, Predicate<Symbol> projectionFilter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTczOQ==", "bodyText": "Thanks for the feedback !! Applied the changes", "url": "https://github.com/trinodb/trino/pull/3178#discussion_r406361739", "createdAt": "2020-04-09T17:28:00Z", "author": {"login": "Praveen2112"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneSampleColumns.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.rule.test.BaseRuleTest;\n+import io.prestosql.sql.planner.iterative.rule.test.PlanBuilder;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.planner.plan.SampleNode;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.expression;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.node;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.strictProject;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.values;\n+import static io.prestosql.sql.planner.plan.SampleNode.Type.SYSTEM;\n+\n+public class TestPruneSampleColumns\n+        extends BaseRuleTest\n+{\n+    @Test\n+    public void testNotAllInputsReferenced()\n+    {\n+        tester().assertThat(new PruneSampleColumns())\n+                .on(p -> p.project(\n+                        Assignments.identity(p.symbol(\"b\")),\n+                        p.sample(\n+                                0.5,\n+                                SYSTEM,\n+                                p.values(p.symbol(\"a\"), p.symbol(\"b\")))))\n+                .matches(\n+                        strictProject(\n+                                ImmutableMap.of(\"b\", expression(\"b\")),\n+                                node(SampleNode.class,\n+                                        strictProject(\n+                                                ImmutableMap.of(\"b\", expression(\"b\")),\n+                                                values(\"a\", \"b\")))));\n+    }\n+\n+    @Test\n+    public void testAllOutputsReferenced()\n+    {\n+        tester().assertThat(new PruneSampleColumns())\n+                .on(p -> p.project(\n+                        Assignments.identity(p.symbol(\"a\"), p.symbol(\"b\")),\n+                        p.sample(\n+                                0.5,\n+                                SYSTEM,\n+                                p.values(p.symbol(\"a\"), p.symbol(\"b\"))))).doesNotFire();\n+    }\n+\n+    private ProjectNode buildProjectedSample(PlanBuilder planBuilder, Predicate<Symbol> projectionFilter)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyOTM0MQ=="}, "originalCommit": null, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 434, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}