{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDQ2NDE1", "number": 3432, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowMjowMVrODx2mBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowNToxM1rODx2pCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjAxMjg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/TransformCorrelatedScalarAggregationToJoin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowMjowMVrOGFj9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowMjowMVrOGFj9Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NTE3OQ==", "bodyText": "Annotate with @VisibleForTesting", "url": "https://github.com/trinodb/trino/pull/3432#discussion_r408485179", "createdAt": "2020-04-14T23:02:01Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/TransformCorrelatedScalarAggregationToJoin.java", "diffHunk": "@@ -66,55 +75,124 @@\n  * Note that only conjunction predicates in FilterNode are supported\n  */\n public class TransformCorrelatedScalarAggregationToJoin\n-        implements Rule<CorrelatedJoinNode>\n {\n-    private static final Pattern<CorrelatedJoinNode> PATTERN = correlatedJoin()\n-            .with(nonEmpty(correlation()))\n-            .with(filter().equalTo(TRUE_LITERAL)); // todo non-trivial join filter: adding filter/project on top of aggregation\n-\n-    @Override\n-    public Pattern<CorrelatedJoinNode> getPattern()\n-    {\n-        return PATTERN;\n-    }\n-\n     private final Metadata metadata;\n \n     public TransformCorrelatedScalarAggregationToJoin(Metadata metadata)\n     {\n         this.metadata = requireNonNull(metadata, \"metadata is null\");\n     }\n \n-    @Override\n-    public Result apply(CorrelatedJoinNode correlatedJoinNode, Captures captures, Context context)\n+    public Set<Rule<?>> rules()\n+    {\n+        return ImmutableSet.of(\n+                new TransformCorrelatedScalarAggregationToJoin.TransformCorrelatedScalarAggregationWithProjection(metadata),\n+                new TransformCorrelatedScalarAggregationToJoin.TransformCorrelatedScalarAggregationWithoutProjection(metadata));\n+    }\n+\n+    static final class TransformCorrelatedScalarAggregationWithProjection", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjAyMDU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/TransformCorrelatedScalarAggregationToJoin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowNToxM1rOGFkBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowNToxM1rOGFkBog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NjMwNg==", "bodyText": "Annotate with @VisibleForTesting", "url": "https://github.com/trinodb/trino/pull/3432#discussion_r408486306", "createdAt": "2020-04-14T23:05:13Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/TransformCorrelatedScalarAggregationToJoin.java", "diffHunk": "@@ -66,55 +75,124 @@\n  * Note that only conjunction predicates in FilterNode are supported\n  */\n public class TransformCorrelatedScalarAggregationToJoin\n-        implements Rule<CorrelatedJoinNode>\n {\n-    private static final Pattern<CorrelatedJoinNode> PATTERN = correlatedJoin()\n-            .with(nonEmpty(correlation()))\n-            .with(filter().equalTo(TRUE_LITERAL)); // todo non-trivial join filter: adding filter/project on top of aggregation\n-\n-    @Override\n-    public Pattern<CorrelatedJoinNode> getPattern()\n-    {\n-        return PATTERN;\n-    }\n-\n     private final Metadata metadata;\n \n     public TransformCorrelatedScalarAggregationToJoin(Metadata metadata)\n     {\n         this.metadata = requireNonNull(metadata, \"metadata is null\");\n     }\n \n-    @Override\n-    public Result apply(CorrelatedJoinNode correlatedJoinNode, Captures captures, Context context)\n+    public Set<Rule<?>> rules()\n+    {\n+        return ImmutableSet.of(\n+                new TransformCorrelatedScalarAggregationToJoin.TransformCorrelatedScalarAggregationWithProjection(metadata),\n+                new TransformCorrelatedScalarAggregationToJoin.TransformCorrelatedScalarAggregationWithoutProjection(metadata));\n+    }\n+\n+    static final class TransformCorrelatedScalarAggregationWithProjection\n+            implements Rule<CorrelatedJoinNode>\n     {\n-        PlanNode subquery = correlatedJoinNode.getSubquery();\n+        private static final Capture<ProjectNode> PROJECTION = newCapture();\n+        private static final Capture<AggregationNode> AGGREGATION = newCapture();\n+\n+        private static final Pattern<CorrelatedJoinNode> PATTERN = correlatedJoin()\n+                .with(nonEmpty(correlation()))\n+                .with(filter().equalTo(TRUE_LITERAL))\n+                .with(subquery().matching(project()\n+                        .capturedAs(PROJECTION)\n+                        .with(source().matching(aggregation()\n+                                .with(empty(groupingColumns()))\n+                                .capturedAs(AGGREGATION)))));\n+\n+        private final Metadata metadata;\n \n-        if (!isScalar(subquery, context.getLookup())) {\n-            return Result.empty();\n+        TransformCorrelatedScalarAggregationWithProjection(Metadata metadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 133, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}