{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMjE0MTgx", "number": 6345, "title": "Add SQL literals-based type mapping tests", "bodyText": "This generalizes the approach already used in some existing tests, e.g.\nTestPostgreSqlTypeMapping.testTimeCoercion,\nTestPostgreSqlTypeMapping.testTimestampCoercion.\nIt has some advantages over testCreateTableAsAndInsertConsistency used\nthere:\n\nSqlDataTypeTest is meant to be reused, not copied\nSqlDataTypeTest verifies predicate pushdown correctness (something\nthat DataTypeTest does but testCreateTableAsAndInsertConsistency\ndid not do)\nSqlDataTypeTest supports explicit result type verifications\nSqlDataTypeTest is faster, as saves round trip times, by creating a\ntest table once, and verifying results in bulk\n\nIt has also advantages over existing DataTypeTest:\n\nSqlDataTypeTest is based in SQL literals, so supports anything that\ncan be expressed in SQL, including date/time types with picoseconds\nSqlDataTypeTest avoids coupling inserted and expected values, making\nunifications like DataType#toPrestoQueryResult redundant\noh, and SqlDataTypeTest makes all DataType structures redundant.\nTests are simple again.", "createdAt": "2020-12-15T12:29:12Z", "url": "https://github.com/trinodb/trino/pull/6345", "merged": true, "mergeCommit": {"oid": "36735ee5c42c735512d752b02c09d724d339c640"}, "closed": true, "closedAt": "2020-12-19T00:51:34Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmZ9tLgBqjQxMTQ0NjExNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnh6v1gBqjQxMzE5NTI3ODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDU4NzM3", "url": "https://github.com/trinodb/trino/pull/6345#pullrequestreview-552458737", "createdAt": "2020-12-15T13:40:50Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MDo1MVrOIGLZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0NDo0MlrOIGLkqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0OTE1MA==", "bodyText": "The previous method name was more clear about what it's doing. This one is more generic and also conflicts with String.format.\nIf you do want to rename I'd prefer something like formatAsLiteral.", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543349150", "createdAt": "2020-12-15T13:40:51Z", "author": {"login": "hashhar"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "diffHunk": "@@ -40,17 +39,20 @@ public CreateAsSelectDataSetup(SqlExecutor sqlExecutor, String tableNamePrefix)\n     public TestTable setupTestTable(List<ColumnSetup> inputs)\n     {\n         List<String> columnValues = inputs.stream()\n-                .map(this::literalInExplicitCast)\n+                .map(this::format)\n                 .collect(toList());\n         Stream<String> columnValuesWithNames = range(0, columnValues.size())\n-                .mapToObj(i -> format(\"%s col_%d\", columnValues.get(i), i));\n+                .mapToObj(i -> String.format(\"%s col_%d\", columnValues.get(i), i));\n         String selectBody = Joiner.on(\",\\n\").join(columnValuesWithNames.iterator());\n         return new TestTable(sqlExecutor, tableNamePrefix, \"AS SELECT \" + selectBody);\n     }\n \n-    private String literalInExplicitCast(ColumnSetup input)\n+    private String format(ColumnSetup input)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MTk3Ng==", "bodyText": "Non-standard inequality for creating empty tables but I like how literal it is.", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543351976", "createdAt": "2020-12-15T13:44:42Z", "author": {"login": "hashhar"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAndInsertDataSetup.java", "diffHunk": "@@ -71,16 +71,26 @@ private void insertRows(TestTable testTable, List<ColumnSetup> inputs)\n \n     private TestTable createTestTable(List<ColumnSetup> inputs)\n     {\n-        return new TestTable(sqlExecutor, tableNamePrefix, \"(\" + columnDefinitions(inputs) + \")\");\n+        return new TestTable(sqlExecutor, tableNamePrefix, tableDefinition(inputs));\n     }\n \n-    private String columnDefinitions(List<ColumnSetup> inputs)\n+    private String tableDefinition(List<ColumnSetup> inputs)\n     {\n-        List<String> columnTypeDefinitions = inputs.stream()\n-                .map(input -> input.getDeclaredType().orElseThrow(() -> new IllegalArgumentException(\"declared type not set\")))\n-                .collect(toList());\n-        Stream<String> columnDefinitions = range(0, columnTypeDefinitions.size())\n-                .mapToObj(i -> format(\"col_%d %s\", i, columnTypeDefinitions.get(i)));\n-        return Joiner.on(\",\\n\").join(columnDefinitions.iterator());\n+        if (inputs.stream().allMatch(input -> input.getDeclaredType().isPresent())) {\n+            return IntStream.range(0, inputs.size())\n+                    .mapToObj(column -> format(\"col_%d %s\", column, inputs.get(column).getDeclaredType().orElseThrow()))\n+                    .collect(joining(\",\\n\", \"(\\n\", \")\"));\n+        }\n+\n+        return IntStream.range(0, inputs.size())\n+                .mapToObj(column -> {\n+                    ColumnSetup input = inputs.get(column);\n+                    if (input.getDeclaredType().isEmpty()) {\n+                        return format(\"%s AS col_%d\", input.getInputLiteral(), column);\n+                    }\n+\n+                    return format(\"CAST(%s AS %s) AS col_%d\", input.getInputLiteral(), input.getDeclaredType().get(), column);\n+                })\n+                .collect(joining(\",\\n\", \"AS\\nSELECT\\n\", \"\\nWHERE 'with no' = 'data'\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzMTIw", "url": "https://github.com/trinodb/trino/pull/6345#pullrequestreview-553883120", "createdAt": "2020-12-16T16:48:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODoxN1rOIHO-Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODoxN1rOIHO-Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjIzMQ==", "bodyText": "orElseThrow no longer needed below.", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r544456231", "createdAt": "2020-12-16T16:48:17Z", "author": {"login": "losipiuk"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "diffHunk": "@@ -40,17 +39,20 @@ public CreateAsSelectDataSetup(SqlExecutor sqlExecutor, String tableNamePrefix)\n     public TestTable setupTestTable(List<ColumnSetup> inputs)\n     {\n         List<String> columnValues = inputs.stream()\n-                .map(this::literalInExplicitCast)\n+                .map(this::format)\n                 .collect(toList());\n         Stream<String> columnValuesWithNames = range(0, columnValues.size())\n-                .mapToObj(i -> format(\"%s col_%d\", columnValues.get(i), i));\n+                .mapToObj(i -> String.format(\"%s col_%d\", columnValues.get(i), i));\n         String selectBody = Joiner.on(\",\\n\").join(columnValuesWithNames.iterator());\n         return new TestTable(sqlExecutor, tableNamePrefix, \"AS SELECT \" + selectBody);\n     }\n \n-    private String literalInExplicitCast(ColumnSetup input)\n+    private String format(ColumnSetup input)\n     {\n-        return format(\n+        if (input.getDeclaredType().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODg3MzM1", "url": "https://github.com/trinodb/trino/pull/6345#pullrequestreview-553887335", "createdAt": "2020-12-16T16:52:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1MjozMlrOIHPLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1MjozMlrOIHPLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1OTYwNg==", "bodyText": "Why not just leave this one?", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r544459606", "createdAt": "2020-12-16T16:52:32Z", "author": {"login": "losipiuk"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAndInsertDataSetup.java", "diffHunk": "@@ -71,16 +71,26 @@ private void insertRows(TestTable testTable, List<ColumnSetup> inputs)\n \n     private TestTable createTestTable(List<ColumnSetup> inputs)\n     {\n-        return new TestTable(sqlExecutor, tableNamePrefix, \"(\" + columnDefinitions(inputs) + \")\");\n+        return new TestTable(sqlExecutor, tableNamePrefix, tableDefinition(inputs));\n     }\n \n-    private String columnDefinitions(List<ColumnSetup> inputs)\n+    private String tableDefinition(List<ColumnSetup> inputs)\n     {\n-        List<String> columnTypeDefinitions = inputs.stream()\n-                .map(input -> input.getDeclaredType().orElseThrow(() -> new IllegalArgumentException(\"declared type not set\")))\n-                .collect(toList());\n-        Stream<String> columnDefinitions = range(0, columnTypeDefinitions.size())\n-                .mapToObj(i -> format(\"col_%d %s\", i, columnTypeDefinitions.get(i)));\n-        return Joiner.on(\",\\n\").join(columnDefinitions.iterator());\n+        if (inputs.stream().allMatch(input -> input.getDeclaredType().isPresent())) {\n+            return IntStream.range(0, inputs.size())\n+                    .mapToObj(column -> format(\"col_%d %s\", column, inputs.get(column).getDeclaredType().orElseThrow()))\n+                    .collect(joining(\",\\n\", \"(\\n\", \")\"));\n+        }\n+\n+        return IntStream.range(0, inputs.size())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDI0NTc2", "url": "https://github.com/trinodb/trino/pull/6345#pullrequestreview-555424576", "createdAt": "2020-12-18T11:52:59Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dd234d402c5c178d73aea681faaf69a0ff5bad0", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/1dd234d402c5c178d73aea681faaf69a0ff5bad0", "committedDate": "2020-12-19T00:51:10Z", "message": "Separate data setup from expected results with an interface\n\nAdd `ColumnSetup` interface to abstract data setup from\n`io.prestosql.testing.datatype.DataTypeTest.Input`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4da55458875634247865e06454c2a3bb6bafaad8", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/4da55458875634247865e06454c2a3bb6bafaad8", "committedDate": "2020-12-19T00:51:10Z", "message": "Support implicit types in CreateAsSelectDataSetup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68ff6520dba209241d02033603b8a939d51488d0", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/68ff6520dba209241d02033603b8a939d51488d0", "committedDate": "2020-12-19T00:51:10Z", "message": "Support implicit types in CreateAndInsertDataSetup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d814b524dc27df9d85f08affd431b34a9d56361", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/1d814b524dc27df9d85f08affd431b34a9d56361", "committedDate": "2020-12-19T00:51:10Z", "message": "Add QueryAssert #hasOutputTypes and #outputHasType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b37968455969ad15458d0e3c1f59adc21fafbf5e", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/b37968455969ad15458d0e3c1f59adc21fafbf5e", "committedDate": "2020-12-19T00:51:11Z", "message": "Add SQL literals-based type mapping tests\n\nThis generalizes the approach already used in some existing tests, e.g.\n`TestPostgreSqlTypeMapping.testTimeCoercion`,\n`TestPostgreSqlTypeMapping.testTimestampCoercion`.\n\nIt has some advantages over `testCreateTableAsAndInsertConsistency` used\nthere:\n\n- `SqlDataTypeTest` is meant to be reused, not copied\n- `SqlDataTypeTest` verifies predicate pushdown correctness (something\n  that `DataTypeTest` does but `testCreateTableAsAndInsertConsistency`\n  did not do)\n- `SqlDataTypeTest` supports explicit result type verifications\n- `SqlDataTypeTest` is faster, as saves round trip times, by creating a\n  test table once, and verifying results in bulk\n\nIt has also advantages over existing `DataTypeTest`:\n\n- `SqlDataTypeTest` is based in SQL literals, so supports anything that\n  can be expressed in SQL, including date/time types with picoseconds\n- `SqlDataTypeTest` avoids coupling inserted and expected values, making\n  unifications like `DataType#toPrestoQueryResult` redundant\n- oh, and `SqlDataTypeTest` makes all `DataType` structures redundant.\n  Tests are simple again."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b935b60a36128a97fbe8ddfc21fc4d82de1679e", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/3b935b60a36128a97fbe8ddfc21fc4d82de1679e", "committedDate": "2020-12-19T00:51:11Z", "message": "Use SqlDataTypeTest in TestPostgreSqlTypeMapping time/timestamp coercions tests\n\nUse `SqlDataTypeTest` for `TestPostgreSqlTypeMapping.testTimeCoercion`\nand `TestPostgreSqlTypeMapping.testTimestampCoercion`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58d7bbb400faf5bef1ac5809d2896c83dc035815", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/58d7bbb400faf5bef1ac5809d2896c83dc035815", "committedDate": "2020-12-19T00:51:11Z", "message": "Use SqlDataTypeTest for TestPostgreSqlTypeMapping.testBasicTypes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ed600615d879349a18f61573eddf89d39736d3a", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/6ed600615d879349a18f61573eddf89d39736d3a", "committedDate": "2020-12-19T00:51:11Z", "message": "Join stream elements fluently\n\nMigrate from `Joiner` to `collect(joining())`."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6ed600615d879349a18f61573eddf89d39736d3a", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/6ed600615d879349a18f61573eddf89d39736d3a", "committedDate": "2020-12-19T00:51:11Z", "message": "Join stream elements fluently\n\nMigrate from `Joiner` to `collect(joining())`."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1839, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}