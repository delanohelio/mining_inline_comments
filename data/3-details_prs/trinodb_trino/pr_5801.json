{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0OTM5NTA2", "number": 5801, "title": "Refactor ValuesNode", "bodyText": "Change inner rows structure of ValuesNode from List<List<Expression>>\nto List<Expression>.\nFix the issue of Values rows specified by expressions other than Row\nbut evaluating to RowType.\nIn that case, Values node failed at Planning, as the expression\nwas considered a single field specification instead of\nrow specification.\nFixes #3398", "createdAt": "2020-11-03T19:12:21Z", "url": "https://github.com/trinodb/trino/pull/5801", "merged": true, "mergeCommit": {"oid": "c4e81f786960c086c30e3cdc39522f680900d7e5"}, "closed": true, "closedAt": "2020-11-16T19:30:28Z", "author": {"login": "kasiafi"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY_acLgBqjM5NTQ3MjYwNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddHilagBqjQwMDExOTMyNzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTg4NzI3", "url": "https://github.com/trinodb/trino/pull/5801#pullrequestreview-523588727", "createdAt": "2020-11-04T17:36:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNzozNjozOFrOHtitUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDoyNToxNlrOHxdBcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUxNjYyNA==", "bodyText": "The Optional is unfortunate. Once we split the AST from the IR, we can have an abstraction for tuple types that can have 0 fields -- we can then represent a VALUES that produces rows with no columns as a list of empty tuples.", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r517516624", "createdAt": "2020-11-04T17:36:38Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/ValuesNode.java", "diffHunk": "@@ -18,33 +18,85 @@\n import com.google.common.collect.ImmutableList;\n import io.prestosql.sql.planner.Symbol;\n import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.Row;\n \n import javax.annotation.concurrent.Immutable;\n \n import java.util.List;\n+import java.util.Optional;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static io.prestosql.util.MoreLists.listOfListsCopy;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.util.Objects.requireNonNull;\n \n @Immutable\n public class ValuesNode\n         extends PlanNode\n {\n     private final List<Symbol> outputSymbols;\n-    private final List<List<Expression>> rows;\n+    private final int rowCount;\n+    // If ValuesNode produces output symbols, each row in ValuesNode is represented by a single expression in `rows` list.\n+    // It can be an expression of type Row or any other expression that evaluates to RowType.\n+    // In case when output symbols are present but ValuesNode does not have any rows, `rows` is an Optional with empty list.\n+    // If ValuesNode does not produce any output symbols, `rows` is Optional.empty().\n+    private final Optional<List<Expression>> rows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUzOTAxNA==", "bodyText": "This shouldn't be necessary. The branch below should be able to handle evaluating a Row expression, just like any other expression.", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r521539014", "createdAt": "2020-11-11T17:56:45Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/cost/ValuesStatsRule.java", "diffHunk": "@@ -61,28 +67,42 @@ public ValuesStatsRule(Metadata metadata)\n     public Optional<PlanNodeStatsEstimate> calculate(ValuesNode node, StatsProvider sourceStats, Lookup lookup, Session session, TypeProvider types)\n     {\n         PlanNodeStatsEstimate.Builder statsBuilder = PlanNodeStatsEstimate.builder();\n-        statsBuilder.setOutputRowCount(node.getRows().size());\n+        statsBuilder.setOutputRowCount(node.getRowCount());\n \n         for (int symbolId = 0; symbolId < node.getOutputSymbols().size(); ++symbolId) {\n             Symbol symbol = node.getOutputSymbols().get(symbolId);\n-            List<Object> symbolValues = getSymbolValues(node, symbolId, session, types.get(symbol));\n+            List<Object> symbolValues = getSymbolValues(\n+                    node,\n+                    symbolId,\n+                    session,\n+                    RowType.anonymous(node.getOutputSymbols().stream()\n+                            .map(types::get)\n+                            .collect(toImmutableList())));\n             statsBuilder.addSymbolStatistics(symbol, buildSymbolStatistics(symbolValues, session, types.get(symbol)));\n         }\n \n         return Optional.of(statsBuilder.build());\n     }\n \n-    private List<Object> getSymbolValues(ValuesNode valuesNode, int symbolId, Session session, Type symbolType)\n+    private List<Object> getSymbolValues(ValuesNode valuesNode, int symbolId, Session session, Type rowType)\n     {\n+        Type symbolType = rowType.getTypeParameters().get(symbolId);\n         if (UNKNOWN.equals(symbolType)) {\n             // special casing for UNKNOWN as evaluateConstantExpression does not handle that\n-            return IntStream.range(0, valuesNode.getRows().size())\n+            return IntStream.range(0, valuesNode.getRowCount())\n                     .mapToObj(rowId -> null)\n                     .collect(toList());\n         }\n-        return valuesNode.getRows().stream()\n-                .map(row -> row.get(symbolId))\n-                .map(expression -> evaluateConstantExpression(expression, symbolType, metadata, session, new AllowAllAccessControl(), ImmutableMap.of()))\n+        checkState(valuesNode.getRows().isPresent(), \"rows is empty\");\n+        return valuesNode.getRows().get().stream()\n+                .map(row -> {\n+                    if (row instanceof Row) {\n+                        Expression item = ((Row) row).getItems().get(symbolId);\n+                        return evaluateConstantExpression(item, symbolType, metadata, session, new AllowAllAccessControl(), ImmutableMap.of());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU0NzU1NQ==", "bodyText": "This is ok for now, but it should eventually be modeled as a whole-row cast and moved to an optimizer rule. Please add a TODO.", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r521547555", "createdAt": "2020-11-11T18:11:40Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1858,67 +1859,70 @@ protected Scope visitValues(Values node, Optional<Scope> scope)\n         {\n             checkState(node.getRows().size() >= 1);\n \n-            List<List<Type>> rowTypes = node.getRows().stream()\n+            List<Type> rowTypes = node.getRows().stream()\n                     .map(row -> analyzeExpression(row, createScope(scope)).getType(row))\n                     .map(type -> {\n                         if (type instanceof RowType) {\n-                            return type.getTypeParameters();\n+                            return type;\n                         }\n-                        return ImmutableList.of(type);\n+                        return RowType.anonymousRow(type);\n                     })\n                     .collect(toImmutableList());\n \n-            // determine common super type of the rows\n-            List<Type> fieldTypes = new ArrayList<>(rowTypes.iterator().next());\n-            for (List<Type> rowType : rowTypes) {\n+            int fieldCount = rowTypes.get(0).getTypeParameters().size();\n+            Type commonSuperType = rowTypes.get(0);\n+            for (Type rowType : rowTypes) {\n                 // check field count consistency for rows\n-                if (rowType.size() != fieldTypes.size()) {\n+                if (rowType.getTypeParameters().size() != fieldCount) {\n+                    throw semanticException(TYPE_MISMATCH,\n+                            node,\n+                            \"Values rows have mismatched sizes: %s vs %s\",\n+                            fieldCount,\n+                            rowType.getTypeParameters().size());\n+                }\n+\n+                // determine common super type of the rows\n+                Optional<Type> partialSuperType = typeCoercion.getCommonSuperType(rowType, commonSuperType);\n+                if (partialSuperType.isEmpty()) {\n                     throw semanticException(TYPE_MISMATCH,\n                             node,\n                             \"Values rows have mismatched types: %s vs %s\",\n                             rowTypes.get(0),\n                             rowType);\n                 }\n-\n-                for (int i = 0; i < rowType.size(); i++) {\n-                    Type fieldType = rowType.get(i);\n-                    Type superType = fieldTypes.get(i);\n-\n-                    Optional<Type> commonSuperType = typeCoercion.getCommonSuperType(fieldType, superType);\n-                    if (commonSuperType.isEmpty()) {\n-                        throw semanticException(TYPE_MISMATCH,\n-                                node,\n-                                \"Values rows have mismatched types: %s vs %s\",\n-                                rowTypes.get(0),\n-                                rowType);\n-                    }\n-                    fieldTypes.set(i, commonSuperType.get());\n-                }\n+                commonSuperType = partialSuperType.get();\n             }\n \n-            // add coercions for the rows\n+            // add coercions\n             for (Expression row : node.getRows()) {\n+                Type actualType = analysis.getType(row);\n                 if (row instanceof Row) {\n-                    List<Expression> items = ((Row) row).getItems();\n-                    for (int i = 0; i < items.size(); i++) {\n-                        Type expectedType = fieldTypes.get(i);\n-                        Expression item = items.get(i);\n-                        Type actualType = analysis.getType(item);\n-                        if (!actualType.equals(expectedType)) {\n-                            analysis.addCoercion(item, expectedType, typeCoercion.isTypeOnlyCoercion(actualType, expectedType));\n+                    // coerce Row by fields to preserve Row structure and enable optimizations based on this structure, e.g. pruning, predicate extraction\n+                    for (int i = 0; i < actualType.getTypeParameters().size(); i++) {\n+                        Expression item = ((Row) row).getItems().get(i);\n+                        Type actualItemType = actualType.getTypeParameters().get(i);\n+                        Type expectedItemType = commonSuperType.getTypeParameters().get(i);\n+                        if (!actualItemType.equals(expectedItemType)) {\n+                            analysis.addCoercion(item, expectedItemType, typeCoercion.isTypeOnlyCoercion(actualItemType, expectedItemType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU0OTkwMg==", "bodyText": "This shouldn't be necessary. The analyzer should be able to analyze Row expressions (and their elements), as well.", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r521549902", "createdAt": "2020-11-11T18:16:06Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "diffHunk": "@@ -336,69 +340,103 @@ public Expression visitValues(ValuesNode node, Void context)\n                 return TRUE_LITERAL;\n             }\n \n-            // get all types in one shot -- needed for the expression optimizer below\n-            List<Expression> allExpressions = node.getRows().stream()\n-                    .flatMap(List::stream)\n-                    .collect(Collectors.toList());\n-\n-            Map<NodeRef<Expression>, Type> expressionTypes = typeAnalyzer.getTypes(session, types, allExpressions);\n-\n-            ImmutableMap.Builder<Symbol, Domain> domains = ImmutableMap.builder();\n-\n-            for (int column = 0; column < node.getOutputSymbols().size(); column++) {\n-                Symbol symbol = node.getOutputSymbols().get(column);\n-                Type type = types.get(symbol);\n+            // for each row of Values, get all expressions that will be evaluated:\n+            // - if the row is of type Row, evaluate fields of the row\n+            // - otherwise evaluate the whole expression and then analyze fields of the resulting row\n+            checkState(node.getRows().isPresent(), \"rows is empty\");\n+            List<Expression> processedExpressions = node.getRows().get().stream()\n+                    .flatMap(row -> {\n+                        if (row instanceof Row) {\n+                            return ((Row) row).getItems().stream();\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NDk5Mw==", "bodyText": "In theory, the result may be a Row expression with partially constant-folded items. In that case, we want to go through the same treatment as above.", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r521554993", "createdAt": "2020-11-11T18:25:26Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/EffectivePredicateExtractor.java", "diffHunk": "@@ -336,69 +340,103 @@ public Expression visitValues(ValuesNode node, Void context)\n                 return TRUE_LITERAL;\n             }\n \n-            // get all types in one shot -- needed for the expression optimizer below\n-            List<Expression> allExpressions = node.getRows().stream()\n-                    .flatMap(List::stream)\n-                    .collect(Collectors.toList());\n-\n-            Map<NodeRef<Expression>, Type> expressionTypes = typeAnalyzer.getTypes(session, types, allExpressions);\n-\n-            ImmutableMap.Builder<Symbol, Domain> domains = ImmutableMap.builder();\n-\n-            for (int column = 0; column < node.getOutputSymbols().size(); column++) {\n-                Symbol symbol = node.getOutputSymbols().get(column);\n-                Type type = types.get(symbol);\n+            // for each row of Values, get all expressions that will be evaluated:\n+            // - if the row is of type Row, evaluate fields of the row\n+            // - otherwise evaluate the whole expression and then analyze fields of the resulting row\n+            checkState(node.getRows().isPresent(), \"rows is empty\");\n+            List<Expression> processedExpressions = node.getRows().get().stream()\n+                    .flatMap(row -> {\n+                        if (row instanceof Row) {\n+                            return ((Row) row).getItems().stream();\n+                        }\n+                        return Stream.of(row);\n+                    })\n+                    .collect(toImmutableList());\n \n-                ImmutableList.Builder<Object> builder = ImmutableList.builder();\n-                boolean hasNull = false;\n-                boolean hasNaN = false;\n-                boolean nonDeterministic = false;\n-                for (int row = 0; row < node.getRows().size(); row++) {\n-                    Expression value = node.getRows().get(row).get(column);\n+            Map<NodeRef<Expression>, Type> expressionTypes = typeAnalyzer.getTypes(session, types, processedExpressions);\n \n-                    if (!DeterminismEvaluator.isDeterministic(value, metadata)) {\n-                        nonDeterministic = true;\n-                        break;\n+            boolean[] hasNull = new boolean[node.getOutputSymbols().size()];\n+            boolean[] hasNaN = new boolean[node.getOutputSymbols().size()];\n+            boolean[] nonDeterministic = new boolean[node.getOutputSymbols().size()];\n+            ImmutableList.Builder<ImmutableList.Builder<Object>> builders = ImmutableList.builder();\n+            for (int i = 0; i < node.getOutputSymbols().size(); i++) {\n+                builders.add(ImmutableList.builder());\n+            }\n+            List<ImmutableList.Builder<Object>> valuesBuilders = builders.build();\n+\n+            for (Expression row : node.getRows().get()) {\n+                if (row instanceof Row) {\n+                    for (int i = 0; i < node.getOutputSymbols().size(); i++) {\n+                        Expression value = ((Row) row).getItems().get(i);\n+                        if (!DeterminismEvaluator.isDeterministic(value, metadata)) {\n+                            nonDeterministic[i] = true;\n+                        }\n+                        else {\n+                            ExpressionInterpreter interpreter = ExpressionInterpreter.expressionOptimizer(value, metadata, session, expressionTypes);\n+                            Object item = interpreter.optimize(NoOpSymbolResolver.INSTANCE);\n+                            if (item instanceof Expression) {\n+                                return TRUE_LITERAL;\n+                            }\n+                            if (item == null) {\n+                                hasNull[i] = true;\n+                            }\n+                            else {\n+                                Type type = types.get(node.getOutputSymbols().get(i));\n+                                if (isFloatingPointNaN(type, item)) {\n+                                    hasNaN[i] = true;\n+                                }\n+                                valuesBuilders.get(i).add(item);\n+                            }\n+                        }\n                     }\n-\n-                    ExpressionInterpreter interpreter = ExpressionInterpreter.expressionOptimizer(value, metadata, session, expressionTypes);\n+                }\n+                else {\n+                    ExpressionInterpreter interpreter = ExpressionInterpreter.expressionOptimizer(row, metadata, session, expressionTypes);\n                     Object evaluated = interpreter.optimize(NoOpSymbolResolver.INSTANCE);\n-\n                     if (evaluated instanceof Expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NjUwMg==", "bodyText": "The rewriter should be able to handle the case of a Row expression natively, so this branch shouldn't be needed.", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r521556502", "createdAt": "2020-11-11T18:28:18Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/ExpressionRewriteRuleSet.java", "diffHunk": "@@ -285,18 +285,27 @@ public Result apply(JoinNode joinNode, Captures captures, Context context)\n         @Override\n         public Result apply(ValuesNode valuesNode, Captures captures, Context context)\n         {\n+            if (valuesNode.getRows().isEmpty()) {\n+                return Result.empty();\n+            }\n+\n             boolean anyRewritten = false;\n-            ImmutableList.Builder<List<Expression>> rows = ImmutableList.builder();\n-            for (List<Expression> row : valuesNode.getRows()) {\n-                ImmutableList.Builder<Expression> newRow = ImmutableList.builder();\n-                for (Expression expression : row) {\n-                    Expression rewritten = rewriter.rewrite(expression, context);\n-                    if (!expression.equals(rewritten)) {\n-                        anyRewritten = true;\n-                    }\n-                    newRow.add(rewritten);\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n+            for (Expression row : valuesNode.getRows().get()) {\n+                Expression rewritten;\n+                if (row instanceof Row) {\n+                    // preserve the structure of row\n+                    rewritten = new Row(((Row) row).getItems().stream()\n+                            .map(item -> rewriter.rewrite(item, context))\n+                            .collect(toImmutableList()));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMzA2MQ==", "bodyText": "Alternatively:\n        if (!valuesNode.getRows().get().stream().allMatch(Row.class::isInstance)) {", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r521613061", "createdAt": "2020-11-11T20:15:58Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneValuesColumns.java", "diffHunk": "@@ -39,6 +41,17 @@ public PruneValuesColumns()\n     @Override\n     protected Optional<PlanNode> pushDownProjectOff(Context context, ValuesNode valuesNode, Set<Symbol> referencedOutputs)\n     {\n+        // no symbols to prune\n+        if (valuesNode.getOutputSymbols().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        checkState(valuesNode.getRows().isPresent(), \"rows is empty\");\n+        // if any of ValuesNode's rows is specified by expression other than Row, the redundant piece cannot be extracted and pruned\n+        if (valuesNode.getRows().get().stream().anyMatch(row -> !(row instanceof Row))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxNDQ5NQ==", "bodyText": "Alternatively:\n        if (!node.getRows().get().stream().allMatch(Row.class::isInstance)) {", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r521614495", "createdAt": "2020-11-11T20:18:49Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PruneUnreferencedOutputs.java", "diffHunk": "@@ -763,10 +764,20 @@ private PlanNode rewriteSetOperationChildren(SetOperationNode node, RewriteConte\n         @Override\n         public PlanNode visitValues(ValuesNode node, RewriteContext<Set<Symbol>> context)\n         {\n+            // nothing to prune: no output symbols and no expressions\n+            if (node.getRows().isEmpty()) {\n+                return node;\n+            }\n+\n+            // if any of ValuesNode's rows is specified by expression other than Row, the redundant piece cannot be extracted and pruned\n+            if (node.getRows().get().stream().anyMatch(row -> !(row instanceof Row))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxNTM4Ng==", "bodyText": "Format as:\nnew ValuesNode(node.getId(), newOutputs, newRows)", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r521615386", "createdAt": "2020-11-11T20:20:25Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/UnaliasSymbolReferences.java", "diffHunk": "@@ -462,11 +463,34 @@ public PlanAndMappings visitValues(ValuesNode node, UnaliasContext context)\n             Map<Symbol, Symbol> mapping = new HashMap<>(context.getCorrelationMapping());\n             SymbolMapper mapper = symbolMapper(mapping);\n \n+            // nothing to map: no output symbols and no expressions\n+            if (node.getRows().isEmpty()) {\n+                return new PlanAndMappings(node, mapping);\n+            }\n+\n+            // if any of ValuesNode's rows is specified by expression other than Row, we cannot reason about individual fields\n+            if (node.getRows().get().stream().anyMatch(row -> !(row instanceof Row))) {\n+                List<Expression> newRows = node.getRows().get().stream()\n+                        .map(mapper::map)\n+                        .collect(toImmutableList());\n+                List<Symbol> newOutputs = node.getOutputSymbols().stream()\n+                        .map(mapper::map)\n+                        .distinct()\n+                        .collect(toImmutableList());\n+                checkState(newOutputs.size() == node.getOutputSymbols().size(), \"duplicate output symbol in Values\");\n+                return new PlanAndMappings(\n+                        new ValuesNode(\n+                                node.getId(),\n+                                newOutputs,\n+                                newRows),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxNzc3Ng==", "bodyText": "Why is this needed? The expression printer should be able to print a Row expression directly.", "url": "https://github.com/trinodb/trino/pull/5801#discussion_r521617776", "createdAt": "2020-11-11T20:25:16Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -697,11 +698,25 @@ public Void visitTableScan(TableScanNode node, Void context)\n         public Void visitValues(ValuesNode node, Void context)\n         {\n             NodeRepresentation nodeOutput = addNode(node, \"Values\");\n-            for (List<Expression> row : node.getRows()) {\n-                nodeOutput.appendDetailsLine(row.stream()\n-                        .map(PlanPrinter::unresolveFunctions)\n-                        .map(Expression::toString)\n-                        .collect(joining(\", \", \"(\", \")\")));\n+            if (node.getRows().isEmpty()) {\n+                for (int i = 0; i < node.getRowCount(); i++) {\n+                    nodeOutput.appendDetailsLine(\"()\");\n+                }\n+                return null;\n+            }\n+            List<String> rows = node.getRows().get().stream()\n+                    .map(row -> {\n+                        if (row instanceof Row) {\n+                            return ((Row) row).getItems().stream()\n+                                    .map(PlanPrinter::unresolveFunctions)\n+                                    .map(Expression::toString)\n+                                    .collect(joining(\", \", \"(\", \")\"));\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dd7c5c73ab82c72471312cb73aaf5c6ce52db32", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/0dd7c5c73ab82c72471312cb73aaf5c6ce52db32", "committedDate": "2020-11-16T16:27:56Z", "message": "Fix literal type in a rule\n\nIn `PruneCountAggregationOverScalar` rule changes the type of\nused literal from LongLiteral to Bigint."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a0833c2235e1d352b7d960b03f25bc68df8604", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/f8a0833c2235e1d352b7d960b03f25bc68df8604", "committedDate": "2020-11-16T16:27:56Z", "message": "Use proper literal type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f4c1ab71ca9803bfd8d1c484f1570627014fab", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/27f4c1ab71ca9803bfd8d1c484f1570627014fab", "committedDate": "2020-11-16T16:27:56Z", "message": "Use proper literal type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "838bcf014aef88a0e132b53b3eef6c14299613f6", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/838bcf014aef88a0e132b53b3eef6c14299613f6", "committedDate": "2020-11-16T16:27:56Z", "message": "Refactor ValuesNode\n\nChange inner rows structure of ValuesNode from List<List<Expression>>\nto List<Expression>.\nFix the issue of Values rows specified by expressions other than Row\nbut evaluating to RowType.\nIn that case, Values node failed at Planning, as the expression\nwas considered a single field specification instead of\nrow specification."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3f3aea21b2ed215cdfe6403c4c9fb87f4deb5e4", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/d3f3aea21b2ed215cdfe6403c4c9fb87f4deb5e4", "committedDate": "2020-11-16T16:27:56Z", "message": "Support pruning all columns from ValuesNode with non-Row expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9e09de4e2604f7bfd2bc5a6e544c91ba10f653b", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/a9e09de4e2604f7bfd2bc5a6e544c91ba10f653b", "committedDate": "2020-11-16T16:27:56Z", "message": "Recognize ValuesNode with no rows as a node with distinct output\n\nIn DistinctOutputQueryUtil, before this change, only ValuesNode\nwith single row was considered as having distinct output."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beb2f7c0bdcd5749b3d3e985cd0c9e3fc7987574", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/beb2f7c0bdcd5749b3d3e985cd0c9e3fc7987574", "committedDate": "2020-11-16T16:27:57Z", "message": "Handle the case of no ValuesNode outputs left in PruneUnreferencedOutputs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "beb2f7c0bdcd5749b3d3e985cd0c9e3fc7987574", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/beb2f7c0bdcd5749b3d3e985cd0c9e3fc7987574", "committedDate": "2020-11-16T16:27:57Z", "message": "Handle the case of no ValuesNode outputs left in PruneUnreferencedOutputs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2792, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}