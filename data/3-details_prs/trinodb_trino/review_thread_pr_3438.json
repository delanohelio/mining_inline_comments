{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjM3ODk3", "number": 3438, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDoxNVrODx_QLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1NjoxMFrOD0zX_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQzMTUwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/FeaturesConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDoxNVrOGFxQtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozMTo1MFrOGHQczw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMzE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Config(\"exchange.data-integrity-verification\")\n          \n          \n            \n                @Config(\"exchange.data-integrity-protection\")\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408703156", "createdAt": "2020-04-15T09:24:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -814,6 +823,18 @@ public FeaturesConfig setExchangeCompressionEnabled(boolean exchangeCompressionE\n         return this;\n     }\n \n+    public DataIntegrityVerification getExchangeDataIntegrityVerification()\n+    {\n+        return exchangeDataIntegrityVerification;\n+    }\n+\n+    @Config(\"exchange.data-integrity-verification\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MjczNQ==", "bodyText": "I like verification more. Or data-integrity-checking.\nIf you decide on different name, change the variables/methods/.. too of course.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410262735", "createdAt": "2020-04-17T14:31:50Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -814,6 +823,18 @@ public FeaturesConfig setExchangeCompressionEnabled(boolean exchangeCompressionE\n         return this;\n     }\n \n+    public DataIntegrityVerification getExchangeDataIntegrityVerification()\n+    {\n+        return exchangeDataIntegrityVerification;\n+    }\n+\n+    @Config(\"exchange.data-integrity-verification\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMzE1Ng=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQ2ODA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTozNDoxMFrOGFxnkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozNDoyOVrOGHgeEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwOTAxMQ==", "bodyText": "cc @electrum", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408709011", "createdAt": "2020-04-15T09:34:10Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -605,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNTIwMg==", "bodyText": "I'd file an issue for this and include it in the comment", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410525202", "createdAt": "2020-04-18T00:34:29Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -605,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwOTAxMQ=="}, "originalCommit": null, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODAxNzU3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNDo1NlrOGF25XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNDo1NlrOGF25XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5NTQ4NQ==", "bodyText": "???\nShould there be magic instead -42\nNVM: noticed a fixup", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408795485", "createdAt": "2020-04-15T12:14:56Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -593,7 +594,13 @@ public PagesResponse handle(Request request, Response response)\n                 boolean complete = getComplete(response);\n \n                 try (SliceInput input = new InputStreamSliceInput(response.getInputStream())) {\n+                    int magic = input.readInt();\n+                    if (magic != SERIALIZED_PAGES_MAGIC) {\n+                        throw new IllegalStateException(format(\"Invalid stream header, expected 0x%08x, but was 0x%08x\", SERIALIZED_PAGES_MAGIC, -42));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODA2MDY4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoyNjo1MVrOGF3TTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo0MDo0OFrOGF3zCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMjEyNA==", "bodyText": "Do we care about backward compatibility of the protocol?\nWith such implementation one will have to upgrade whole cluster at one go. Upgrading node-by node will not be possible.\nProbably it is hard to workaround that now. But even if we make the backward incompatible change now, we can extend the protocol in such way, that if we want to add something here in the future, we can do that in a way which allows rolling upgrade. One option to achieve that would be to put an extensible structure (protobuf/json/thrift) in place of raw sequence of longs.\nNot sure if that is worth of an effort though.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408802124", "createdAt": "2020-04-15T12:26:51Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "diffHunk": "@@ -82,6 +97,10 @@ public void writeTo(List<SerializedPage> serializedPages,\n         try {\n             SliceOutput sliceOutput = new OutputStreamSliceOutput(output);\n             sliceOutput.writeInt(SERIALIZED_PAGES_MAGIC);\n+            sliceOutput.writeLong(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwNjI1OQ==", "bodyText": "Upgrading node-by node will not be possible.\n\nit was never supported. E.g. currently, all nodes must declare same presto version or are not considered part of the cluster.\nIf we want to support rolling upgrade, we would need to do much more than just declare the intent.\nLike certain provisions on the protocol level, but same for block serialization. Define version compatibility matrix/ranges.\nAnd tests.\nSince we're talking about this... I think this is dead end road in general. I am strongly convinced that rolling upgrade should be handled\non per-cluster rather than per-node basis. This delivers same behavior in most environments (except for fixed-size on-prem bare-metal\nenvironments), with way lower complexity.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408806259", "createdAt": "2020-04-15T12:34:04Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "diffHunk": "@@ -82,6 +97,10 @@ public void writeTo(List<SerializedPage> serializedPages,\n         try {\n             SliceOutput sliceOutput = new OutputStreamSliceOutput(output);\n             sliceOutput.writeInt(SERIALIZED_PAGES_MAGIC);\n+            sliceOutput.writeLong(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMjEyNA=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxMDI0OQ==", "bodyText": "I am strongly convinced that rolling upgrade should be handled on per-cluster rather than per-node basis\n\nI think I agree actually. The behaviour is not the same, but similar. The cost is a bit different - but should no matter in most of the cases. And the \"bare-metal\" situation is very problematic - not sure if we care though. And similarly to bare-metal situation, spinning up a HUGE replacement cluster may result in stockout in public cloud zone.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408810249", "createdAt": "2020-04-15T12:40:48Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "diffHunk": "@@ -82,6 +97,10 @@ public void writeTo(List<SerializedPage> serializedPages,\n         try {\n             SliceOutput sliceOutput = new OutputStreamSliceOutput(output);\n             sliceOutput.writeInt(SERIALIZED_PAGES_MAGIC);\n+            sliceOutput.writeLong(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMjEyNA=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzIwMjU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxOTozNFrOGHP8-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTo0Mjo1OFrOGHTLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NDU4Ng==", "bodyText": "nit: Can you use a nicer number ;) https://en.wikipedia.org/wiki/Hexspeak", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410254586", "createdAt": "2020-04-17T14:19:34Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "diffHunk": "@@ -41,6 +41,8 @@\n public class PagesResponseWriter\n         implements MessageBodyWriter<List<SerializedPage>>\n {\n+    public static final int SERIALIZED_PAGES_MAGIC = 0xfea4f001;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5MDcwNQ==", "bodyText": "this will be \"fearful\", if you let yourself read it this way", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410290705", "createdAt": "2020-04-17T15:15:39Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "diffHunk": "@@ -41,6 +41,8 @@\n public class PagesResponseWriter\n         implements MessageBodyWriter<List<SerializedPage>>\n {\n+    public static final int SERIALIZED_PAGES_MAGIC = 0xfea4f001;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NDU4Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNzM2Mg==", "bodyText": "Oh yeah - looked like garbage. But now I see it. Thanks. It can stay ;)", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410307362", "createdAt": "2020-04-17T15:42:58Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "diffHunk": "@@ -41,6 +41,8 @@\n public class PagesResponseWriter\n         implements MessageBodyWriter<List<SerializedPage>>\n {\n+    public static final int SERIALIZED_PAGES_MAGIC = 0xfea4f001;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NDU4Ng=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzIxOTA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/TestingExchangeHttpClientHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyMzo0NlrOGHQH3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoyMjo1N1rOGJp1Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NzM3NA==", "bodyText": "Nit: Maybe extract method writeSerializedPagesHeader(int numPages) and put it in PagesSerdeUtil?\nOr maybe MAGIC and pages count should be written by writeSerializedPages?", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410257374", "createdAt": "2020-04-17T14:23:46Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestingExchangeHttpClientHandler.java", "diffHunk": "@@ -73,13 +74,18 @@ public Response handle(Request request)\n             headers.put(PRESTO_PAGE_NEXT_TOKEN, String.valueOf(pageToken + 1));\n             headers.put(PRESTO_BUFFER_COMPLETE, String.valueOf(false));\n             DynamicSliceOutput output = new DynamicSliceOutput(256);\n+            output.writeInt(SERIALIZED_PAGES_MAGIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3NTcxMQ==", "bodyText": "Extracting write is nice, but it would call for extracting read as well. And this won't work, unless I introduce a new class for the header (count, magic).\nIt would be warranted if we wanted to pack more information here, or make the protocol extensible / future-proof, but since we don't have such plans, let me not do this now.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r412775711", "createdAt": "2020-04-22T08:22:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestingExchangeHttpClientHandler.java", "diffHunk": "@@ -73,13 +74,18 @@ public Response handle(Request request)\n             headers.put(PRESTO_PAGE_NEXT_TOKEN, String.valueOf(pageToken + 1));\n             headers.put(PRESTO_BUFFER_COMPLETE, String.valueOf(false));\n             DynamicSliceOutput output = new DynamicSliceOutput(256);\n+            output.writeInt(SERIALIZED_PAGES_MAGIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NzM3NA=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzIyMTU3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/PagesSerdeUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyNDoyM1rOGHQJhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyNDoyM1rOGHQJhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1Nzc5Nw==", "bodyText": "Oh - this one is nice. You can do it right if you try ;)", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410257797", "createdAt": "2020-04-17T14:24:23Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/PagesSerdeUtil.java", "diffHunk": "@@ -32,6 +35,13 @@\n {\n     private PagesSerdeUtil() {}\n \n+    /**\n+     * Special checksum value used to verify configuration consistency across nodes (all nodes need to have data integrity configured the same way).\n+     *\n+     * @implNote It's not just 0, so that hypothetical zero-ed out data is not treated as valid payload with no checksum.\n+     */\n+    public static final long NO_CHECKSUM = 0x0123456789abcdefL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI0MzE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyOTo1OVrOGHQX-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoyMzozNVrOGJp2-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MTQ5Nw==", "bodyText": "Given code above is right this will result in an retry. It should probably be an GENERIC_INTERNAL_ERROR here.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410261497", "createdAt": "2020-04-17T14:29:59Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -612,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication\n+            switch (dataIntegrityVerification) {\n+                case NONE:\n+                    if (readChecksum != NO_CHECKSUM) {\n+                        throw new IllegalStateException(format(\"Expected checksum to be NO_CHECKSUM (0x%08x) but is 0x%08x, when reading from %s\", NO_CHECKSUM, readChecksum, uri));\n+                    }\n+                    return;\n+\n+                case ABORT:\n+                case RETRY:\n+                    long calculatedChecksum = calculateChecksum(pages);\n+                    if (readChecksum != calculatedChecksum) {\n+                        String message = format(\"Data corruption, read checksum: 0x%08x, calculated checksum: 0x%08x, when reading from %s\", readChecksum, calculatedChecksum, uri);\n+                        if (dataIntegrityVerification == DataIntegrityVerification.RETRY) {\n+                            throw new IllegalStateException(message);\n+                        }\n+                        throw new PrestoException(GENERIC_INTERNAL_ERROR, message);\n+                    }\n+                    return;\n+\n+                default:\n+                    throw new IllegalStateException(\"Unknown DataIntegrityVerification type: \" + dataIntegrityVerification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3NjE4Ng==", "bodyText": "checksum verification & retry is reworked, please see new code", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r412776186", "createdAt": "2020-04-22T08:23:35Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -612,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication\n+            switch (dataIntegrityVerification) {\n+                case NONE:\n+                    if (readChecksum != NO_CHECKSUM) {\n+                        throw new IllegalStateException(format(\"Expected checksum to be NO_CHECKSUM (0x%08x) but is 0x%08x, when reading from %s\", NO_CHECKSUM, readChecksum, uri));\n+                    }\n+                    return;\n+\n+                case ABORT:\n+                case RETRY:\n+                    long calculatedChecksum = calculateChecksum(pages);\n+                    if (readChecksum != calculatedChecksum) {\n+                        String message = format(\"Data corruption, read checksum: 0x%08x, calculated checksum: 0x%08x, when reading from %s\", readChecksum, calculatedChecksum, uri);\n+                        if (dataIntegrityVerification == DataIntegrityVerification.RETRY) {\n+                            throw new IllegalStateException(message);\n+                        }\n+                        throw new PrestoException(GENERIC_INTERNAL_ERROR, message);\n+                    }\n+                    return;\n+\n+                default:\n+                    throw new IllegalStateException(\"Unknown DataIntegrityVerification type: \" + dataIntegrityVerification);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MTQ5Nw=="}, "originalCommit": null, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI1MzM3OnYy", "diffSide": "LEFT", "path": "presto-main/src/test/java/io/prestosql/operator/MockExchangeRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozMjoyN1rOGHQecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOToxNToyNFrOGJsJ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MzE1Mg==", "bodyText": "previous commit?", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410263152", "createdAt": "2020-04-17T14:32:27Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/MockExchangeRequestProcessor.java", "diffHunk": "@@ -98,7 +99,8 @@ public Response handle(Request request)\n         HttpStatus status;\n         if (!result.getSerializedPages().isEmpty()) {\n             DynamicSliceOutput sliceOutput = new DynamicSliceOutput(64);\n-            sliceOutput.writeInt(PagesResponseWriter.SERIALIZED_PAGES_MAGIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxMzgwMw==", "bodyText": "fixed", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r412813803", "createdAt": "2020-04-22T09:15:24Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/MockExchangeRequestProcessor.java", "diffHunk": "@@ -98,7 +99,8 @@ public Response handle(Request request)\n         HttpStatus status;\n         if (!result.getSerializedPages().isEmpty()) {\n             DynamicSliceOutput sliceOutput = new DynamicSliceOutput(64);\n-            sliceOutput.writeInt(PagesResponseWriter.SERIALIZED_PAGES_MAGIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MzE1Mg=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI2NDQ4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozNTowNFrOGHQlVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NDowNlrOGJ0X3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NDkxNg==", "bodyText": "How does this surface to the user? It'd be ideal if it could be mapped to a proper error code.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410264916", "createdAt": "2020-04-17T14:35:04Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -593,7 +619,15 @@ public PagesResponse handle(Request request, Response response)\n                 boolean complete = getComplete(response);\n \n                 try (SliceInput input = new InputStreamSliceInput(response.getInputStream())) {\n+                    int magic = input.readInt();\n+                    if (magic != SERIALIZED_PAGES_MAGIC) {\n+                        throw new IllegalStateException(format(\"Invalid stream header, expected 0x%08x, but was 0x%08x\", SERIALIZED_PAGES_MAGIC, magic));\n+                    }\n+                    long checksum = input.readLong();\n+                    int pagesCount = input.readInt();\n                     List<SerializedPage> pages = ImmutableList.copyOf(readSerializedPages(input));\n+                    verifyChecksum(request.getUri(), checksum, pages);\n+                    checkState(pages.size() == pagesCount, \"Wrong number of pages, expected %s, but read %s\", pagesCount, pages.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0ODQ0Ng==", "bodyText": "In practise, this is reachable only when checksum verification is OFF. This is then treated as if IO error occurred and retried.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r412948446", "createdAt": "2020-04-22T12:44:06Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -593,7 +619,15 @@ public PagesResponse handle(Request request, Response response)\n                 boolean complete = getComplete(response);\n \n                 try (SliceInput input = new InputStreamSliceInput(response.getInputStream())) {\n+                    int magic = input.readInt();\n+                    if (magic != SERIALIZED_PAGES_MAGIC) {\n+                        throw new IllegalStateException(format(\"Invalid stream header, expected 0x%08x, but was 0x%08x\", SERIALIZED_PAGES_MAGIC, magic));\n+                    }\n+                    long checksum = input.readLong();\n+                    int pagesCount = input.readInt();\n                     List<SerializedPage> pages = ImmutableList.copyOf(readSerializedPages(input));\n+                    verifyChecksum(request.getUri(), checksum, pages);\n+                    checkState(pages.size() == pagesCount, \"Wrong number of pages, expected %s, but read %s\", pagesCount, pages.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NDkxNg=="}, "originalCommit": null, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI3MDA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozNjozNlrOGHQo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo0OTo0NVrOGJ3gVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTgzNQ==", "bodyText": "How does this surface to the user? It'd be ideal if it could be mapped to a proper error code indicating there's a misconfiguration in the cluster (and skip the retry).", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410265835", "createdAt": "2020-04-17T14:36:36Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -605,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication\n+            switch (dataIntegrityVerification) {\n+                case NONE:\n+                    if (readChecksum != NO_CHECKSUM) {\n+                        throw new IllegalStateException(format(\"Expected checksum to be NO_CHECKSUM (0x%08x) but is 0x%08x, when reading from %s\", NO_CHECKSUM, readChecksum, uri));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5OTc2Ng==", "bodyText": "The same way as a checksum verification failure, as in #3438 (comment)", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r412999766", "createdAt": "2020-04-22T13:49:45Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -605,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication\n+            switch (dataIntegrityVerification) {\n+                case NONE:\n+                    if (readChecksum != NO_CHECKSUM) {\n+                        throw new IllegalStateException(format(\"Expected checksum to be NO_CHECKSUM (0x%08x) but is 0x%08x, when reading from %s\", NO_CHECKSUM, readChecksum, uri));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTgzNQ=="}, "originalCommit": null, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI4MjE0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozOTo0NlrOGHQw9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozMjoxN1rOGJz3Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2Nzg5Mw==", "bodyText": "This is brittle. We need a better mechanism to indicate we want to retry than the type of exception. This logic to check for retry policy should really be in the code that performs the actual retries, otherwise there's a high chance it will get out of sync in the future.\nWe should throw a non-retryable exception in the case of configuration or a \"checksum failed\" exception otherwise. The code that does retries in HttpPageBufferClient should check the retry policy and act accordingly in case of \"checksum failed\".", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410267893", "createdAt": "2020-04-17T14:39:46Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -605,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication\n+            switch (dataIntegrityVerification) {\n+                case NONE:\n+                    if (readChecksum != NO_CHECKSUM) {\n+                        throw new IllegalStateException(format(\"Expected checksum to be NO_CHECKSUM (0x%08x) but is 0x%08x, when reading from %s\", NO_CHECKSUM, readChecksum, uri));\n+                    }\n+                    return;\n+\n+                case ABORT:\n+                case RETRY:\n+                    long calculatedChecksum = calculateChecksum(pages);\n+                    if (readChecksum != calculatedChecksum) {\n+                        String message = format(\"Data corruption, read checksum: 0x%08x, calculated checksum: 0x%08x, when reading from %s\", readChecksum, calculatedChecksum, uri);\n+                        if (dataIntegrityVerification == DataIntegrityVerification.RETRY) {\n+                            throw new IllegalStateException(message);\n+                        }\n+                        throw new PrestoException(GENERIC_INTERNAL_ERROR, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0MDExNQ==", "bodyText": "Updated the retry code.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r412940115", "createdAt": "2020-04-22T12:32:17Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -605,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication\n+            switch (dataIntegrityVerification) {\n+                case NONE:\n+                    if (readChecksum != NO_CHECKSUM) {\n+                        throw new IllegalStateException(format(\"Expected checksum to be NO_CHECKSUM (0x%08x) but is 0x%08x, when reading from %s\", NO_CHECKSUM, readChecksum, uri));\n+                    }\n+                    return;\n+\n+                case ABORT:\n+                case RETRY:\n+                    long calculatedChecksum = calculateChecksum(pages);\n+                    if (readChecksum != calculatedChecksum) {\n+                        String message = format(\"Data corruption, read checksum: 0x%08x, calculated checksum: 0x%08x, when reading from %s\", readChecksum, calculatedChecksum, uri);\n+                        if (dataIntegrityVerification == DataIntegrityVerification.RETRY) {\n+                            throw new IllegalStateException(message);\n+                        }\n+                        throw new PrestoException(GENERIC_INTERNAL_ERROR, message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2Nzg5Mw=="}, "originalCommit": null, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Njk0MjcxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/PagesSerdeUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1NjoxMFrOGJ68_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoyMjowOVrOGJ_NjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NjI1Mw==", "bodyText": "nit: aren't we typically ordering methods that usage is first and declaration follows?", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r413056253", "createdAt": "2020-04-22T14:56:10Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/PagesSerdeUtil.java", "diffHunk": "@@ -60,6 +70,16 @@ public static void writeSerializedPage(SliceOutput output, SerializedPage page)\n         output.writeBytes(page.getSlice());\n     }\n \n+    private static void updateChecksum(XxHash64 hash, SerializedPage page)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyNjAyOQ==", "bodyText": "updateChecksum is placed right under writeSerializedPage, because they need to stay in sync.\ni added a code comment", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r413126029", "createdAt": "2020-04-22T16:22:09Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/PagesSerdeUtil.java", "diffHunk": "@@ -60,6 +70,16 @@ public static void writeSerializedPage(SliceOutput output, SerializedPage page)\n         output.writeBytes(page.getSlice());\n     }\n \n+    private static void updateChecksum(XxHash64 hash, SerializedPage page)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NjI1Mw=="}, "originalCommit": null, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 146, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}