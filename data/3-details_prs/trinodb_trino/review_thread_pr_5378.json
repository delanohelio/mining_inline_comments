{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MzA0NTY3", "number": 5378, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0NToyOFrOErpkuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0NjowOVrOErpmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjA1MzcxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0NToyOFrOHeiNHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0NToyOFrOHeiNHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3OTc0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public interface TestAggregationState\n          \n          \n            \n                        extends AccumulatorState\n          \n          \n            \n                {\n          \n          \n            \n                }\n          \n          \n            \n                public interface TestAggregationState\n          \n          \n            \n                        extends AccumulatorState {}", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501779740", "createdAt": "2020-10-08T14:45:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjA1NTE1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0NTo0N1rOHeiN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNToxNToxN1rOHejnIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3OTk2Nw==", "bodyText": "Any existing aggs that can benefit from your change?", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501779967", "createdAt": "2020-10-08T14:45:47Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }\n+\n+    @ReportUnannotatedMethods.Suppress\n+    public static void longTimestampAggregationInput(TestAggregationState state, LongTimestamp value) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwMjc4Ng==", "bodyText": "nope :)", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501802786", "createdAt": "2020-10-08T15:15:17Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }\n+\n+    @ReportUnannotatedMethods.Suppress\n+    public static void longTimestampAggregationInput(TestAggregationState state, LongTimestamp value) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3OTk2Nw=="}, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjA1NzA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0NjowOVrOHeiPOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0NjowOVrOHeiPOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MDI4MA==", "bodyText": "Just move those static methods into inner class (just as if you were declaring aggregation)", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501780280", "createdAt": "2020-10-08T14:46:09Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }\n+\n+    @ReportUnannotatedMethods.Suppress", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4761, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}