{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjcwODM3", "number": 4232, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNTo0MVrOEJK1wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoyNjo1NlrOEJSlkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUwMjQxOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNTo0MlrOGpkujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNTo0NlrOGpr9zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjU0Mg==", "bodyText": "Remove?", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446246542", "createdAt": "2020-06-26T15:15:42Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -255,9 +268,12 @@ private void testPartitionedTableWithNullValues(Session session, FileFormat file\n                 \", null _real\" +\n                 \", null _double\" +\n                 \", null _boolean\" +\n-//                \", CAST('3.14' AS DECIMAL(3,2)) _decimal_short\" +\n-//                \", CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) _decimal_long\" +\n-//                \", CAST('2017-05-01 10:12:34' AS TIMESTAMP) _timestamp\" +\n+                returnSqlIfFormatSupportsDecimalsAndTimestamps(fileFormat, \", null _decimal_short\" +\n+                        \", null _decimal_long\" +\n+                        \", null _timestamp\") +\n+//                formatSupportsDecimalsAndTimestamps(fileFormat, \", CAST('3.14' AS DECIMAL(3,2)) _decimal_short\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTEzNQ==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446365135", "createdAt": "2020-06-26T19:15:46Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -255,9 +268,12 @@ private void testPartitionedTableWithNullValues(Session session, FileFormat file\n                 \", null _real\" +\n                 \", null _double\" +\n                 \", null _boolean\" +\n-//                \", CAST('3.14' AS DECIMAL(3,2)) _decimal_short\" +\n-//                \", CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) _decimal_long\" +\n-//                \", CAST('2017-05-01 10:12:34' AS TIMESTAMP) _timestamp\" +\n+                returnSqlIfFormatSupportsDecimalsAndTimestamps(fileFormat, \", null _decimal_short\" +\n+                        \", null _decimal_long\" +\n+                        \", null _timestamp\") +\n+//                formatSupportsDecimalsAndTimestamps(fileFormat, \", CAST('3.14' AS DECIMAL(3,2)) _decimal_short\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjU0Mg=="}, "originalCommit": null, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUwNDA5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/Decimals.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNjoxMVrOGpkvsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNTo0OVrOGpr97w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjgzNQ==", "bodyText": "There's already a isShortDecimal method", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446246835", "createdAt": "2020-06-26T15:16:11Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/Decimals.java", "diffHunk": "@@ -326,4 +326,9 @@ private static void checkArgument(boolean condition)\n             throw new IllegalArgumentException();\n         }\n     }\n+\n+    public static boolean isShortDecimalType(DecimalType decimalType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTE2Nw==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446365167", "createdAt": "2020-06-26T19:15:49Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/Decimals.java", "diffHunk": "@@ -326,4 +326,9 @@ private static void checkArgument(boolean condition)\n             throw new IllegalArgumentException();\n         }\n     }\n+\n+    public static boolean isShortDecimalType(DecimalType decimalType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjgzNQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUwNTMzOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNjozMFrOGpkwdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNTo1MlrOGpr-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NzAzMA==", "bodyText": "Nit: \"else\" is redundant", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446247030", "createdAt": "2020-06-26T15:16:30Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -175,6 +179,19 @@ private static Object getValue(Type type, Marker marker, ConnectorSession sessio\n             return ((Slice) marker.getValue()).getBytes();\n         }\n \n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            Object value = marker.getValue();\n+            if (Decimals.isShortDecimalType(decimalType)) {\n+                checkArgument(value instanceof Long, \"A short decimal should be represented by a long value but was \" + value);\n+                return value;\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTE4OA==", "bodyText": "Removed", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446365188", "createdAt": "2020-06-26T19:15:52Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -175,6 +179,19 @@ private static Object getValue(Type type, Marker marker, ConnectorSession sessio\n             return ((Slice) marker.getValue()).getBytes();\n         }\n \n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            Object value = marker.getValue();\n+            if (Decimals.isShortDecimalType(decimalType)) {\n+                checkArgument(value instanceof Long, \"A short decimal should be represented by a long value but was \" + value);\n+                return value;\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NzAzMA=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUxNzQ3OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyMDoyMVrOGpk4jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNTo1OVrOGpr-LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0OTEwMw==", "bodyText": "checkArgument takes string format so use %s instead of concatenation. Also, we should print the class since it might not be obvious from the toString()\ncheckArgument(value instanceof Slice, \"A long decimal should be represented by a Slice value but was %s\", value.getClass().getName());", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446249103", "createdAt": "2020-06-26T15:20:21Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -175,6 +179,19 @@ private static Object getValue(Type type, Marker marker, ConnectorSession sessio\n             return ((Slice) marker.getValue()).getBytes();\n         }\n \n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            Object value = marker.getValue();\n+            if (Decimals.isShortDecimalType(decimalType)) {\n+                checkArgument(value instanceof Long, \"A short decimal should be represented by a long value but was \" + value);\n+                return value;\n+            }\n+            else {\n+                checkArgument(value instanceof Slice, \"A long decimal should be represented by a Slice value but was \" + value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTIyOA==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446365228", "createdAt": "2020-06-26T19:15:59Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -175,6 +179,19 @@ private static Object getValue(Type type, Marker marker, ConnectorSession sessio\n             return ((Slice) marker.getValue()).getBytes();\n         }\n \n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            Object value = marker.getValue();\n+            if (Decimals.isShortDecimalType(decimalType)) {\n+                checkArgument(value instanceof Long, \"A short decimal should be represented by a long value but was \" + value);\n+                return value;\n+            }\n+            else {\n+                checkArgument(value instanceof Slice, \"A long decimal should be represented by a Slice value but was \" + value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0OTEwMw=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTc2NDYzOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoyMTozMlrOGpxHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMDozODowMVrOGpx3uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTQyNw==", "bodyText": "Preconditions only support %s for formatting.\nNote that in general, %s is preferred, since it works for all types. Use the others like %02d when you need special type-specific formatting.", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446449427", "createdAt": "2020-06-26T23:21:32Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -101,15 +102,34 @@ public void testShowCreateTable()\n     @Test\n     public void testDecimal()\n     {\n-        assertUpdate(\"CREATE TABLE test_decimal_short (x decimal(3,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_short VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_short\", \"SELECT CAST('3.14' AS DECIMAL(3,2))\");\n-        dropTable(getSession(), \"test_decimal_short\");\n-\n-        assertUpdate(\"CREATE TABLE test_decimal_long (x decimal(25,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_long VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_long\", \"SELECT CAST('3.14' AS DECIMAL(25,2))\");\n-        dropTable(getSession(), \"test_decimal_long\");\n+        for (int precision = 1; precision <= 38; precision++) {\n+            testDecimalWithPrecisionAndScale(precision, precision - 1);\n+        }\n+\n+        for (int scale = 1; scale < 37; scale++) {\n+            testDecimalWithPrecisionAndScale(38, scale);\n+        }\n+\n+        for (int scale = 1; scale < 17; scale++) {\n+            testDecimalWithPrecisionAndScale(18, scale);\n+        }\n+    }\n+\n+    private void testDecimalWithPrecisionAndScale(int precision, int scale)\n+    {\n+        checkArgument(precision >= 1 && precision <= 38, \"Decimal precision must be between 1 and 38 inclusive, but was %d\", precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTc4NQ==", "bodyText": "We could shorten these messages by putting the values inline\n\"Decimal precision (%s) must be between 1 and 38 inclusive\"\n\"Decimal scale (%s) must be less than the precision (%s) and non-negative\"", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446449785", "createdAt": "2020-06-26T23:23:19Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -101,15 +102,34 @@ public void testShowCreateTable()\n     @Test\n     public void testDecimal()\n     {\n-        assertUpdate(\"CREATE TABLE test_decimal_short (x decimal(3,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_short VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_short\", \"SELECT CAST('3.14' AS DECIMAL(3,2))\");\n-        dropTable(getSession(), \"test_decimal_short\");\n-\n-        assertUpdate(\"CREATE TABLE test_decimal_long (x decimal(25,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_long VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_long\", \"SELECT CAST('3.14' AS DECIMAL(25,2))\");\n-        dropTable(getSession(), \"test_decimal_long\");\n+        for (int precision = 1; precision <= 38; precision++) {\n+            testDecimalWithPrecisionAndScale(precision, precision - 1);\n+        }\n+\n+        for (int scale = 1; scale < 37; scale++) {\n+            testDecimalWithPrecisionAndScale(38, scale);\n+        }\n+\n+        for (int scale = 1; scale < 17; scale++) {\n+            testDecimalWithPrecisionAndScale(18, scale);\n+        }\n+    }\n+\n+    private void testDecimalWithPrecisionAndScale(int precision, int scale)\n+    {\n+        checkArgument(precision >= 1 && precision <= 38, \"Decimal precision must be between 1 and 38 inclusive, but was %d\", precision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTQyNw=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTg4MQ==", "bodyText": "Good idea; done.", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446461881", "createdAt": "2020-06-27T00:38:01Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -101,15 +102,34 @@ public void testShowCreateTable()\n     @Test\n     public void testDecimal()\n     {\n-        assertUpdate(\"CREATE TABLE test_decimal_short (x decimal(3,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_short VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_short\", \"SELECT CAST('3.14' AS DECIMAL(3,2))\");\n-        dropTable(getSession(), \"test_decimal_short\");\n-\n-        assertUpdate(\"CREATE TABLE test_decimal_long (x decimal(25,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_long VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_long\", \"SELECT CAST('3.14' AS DECIMAL(25,2))\");\n-        dropTable(getSession(), \"test_decimal_long\");\n+        for (int precision = 1; precision <= 38; precision++) {\n+            testDecimalWithPrecisionAndScale(precision, precision - 1);\n+        }\n+\n+        for (int scale = 1; scale < 37; scale++) {\n+            testDecimalWithPrecisionAndScale(38, scale);\n+        }\n+\n+        for (int scale = 1; scale < 17; scale++) {\n+            testDecimalWithPrecisionAndScale(18, scale);\n+        }\n+    }\n+\n+    private void testDecimalWithPrecisionAndScale(int precision, int scale)\n+    {\n+        checkArgument(precision >= 1 && precision <= 38, \"Decimal precision must be between 1 and 38 inclusive, but was %d\", precision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTQyNw=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTc2NTcxOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoyMjoyM1rOGpxHsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMDozNzo1OVrOGpx3tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTU4NA==", "bodyText": "No need to wrap here", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446449584", "createdAt": "2020-06-26T23:22:23Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -101,15 +102,34 @@ public void testShowCreateTable()\n     @Test\n     public void testDecimal()\n     {\n-        assertUpdate(\"CREATE TABLE test_decimal_short (x decimal(3,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_short VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_short\", \"SELECT CAST('3.14' AS DECIMAL(3,2))\");\n-        dropTable(getSession(), \"test_decimal_short\");\n-\n-        assertUpdate(\"CREATE TABLE test_decimal_long (x decimal(25,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_long VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_long\", \"SELECT CAST('3.14' AS DECIMAL(25,2))\");\n-        dropTable(getSession(), \"test_decimal_long\");\n+        for (int precision = 1; precision <= 38; precision++) {\n+            testDecimalWithPrecisionAndScale(precision, precision - 1);\n+        }\n+\n+        for (int scale = 1; scale < 37; scale++) {\n+            testDecimalWithPrecisionAndScale(38, scale);\n+        }\n+\n+        for (int scale = 1; scale < 17; scale++) {\n+            testDecimalWithPrecisionAndScale(18, scale);\n+        }\n+    }\n+\n+    private void testDecimalWithPrecisionAndScale(int precision, int scale)\n+    {\n+        checkArgument(precision >= 1 && precision <= 38, \"Decimal precision must be between 1 and 38 inclusive, but was %d\", precision);\n+        checkArgument(scale < precision && scale >= 0, \"Decimal scale must be less than the precision and non-negative, but was %d with precision %d\",\n+                scale, precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTg3OA==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446461878", "createdAt": "2020-06-27T00:37:59Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -101,15 +102,34 @@ public void testShowCreateTable()\n     @Test\n     public void testDecimal()\n     {\n-        assertUpdate(\"CREATE TABLE test_decimal_short (x decimal(3,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_short VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_short\", \"SELECT CAST('3.14' AS DECIMAL(3,2))\");\n-        dropTable(getSession(), \"test_decimal_short\");\n-\n-        assertUpdate(\"CREATE TABLE test_decimal_long (x decimal(25,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_long VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_long\", \"SELECT CAST('3.14' AS DECIMAL(25,2))\");\n-        dropTable(getSession(), \"test_decimal_long\");\n+        for (int precision = 1; precision <= 38; precision++) {\n+            testDecimalWithPrecisionAndScale(precision, precision - 1);\n+        }\n+\n+        for (int scale = 1; scale < 37; scale++) {\n+            testDecimalWithPrecisionAndScale(38, scale);\n+        }\n+\n+        for (int scale = 1; scale < 17; scale++) {\n+            testDecimalWithPrecisionAndScale(18, scale);\n+        }\n+    }\n+\n+    private void testDecimalWithPrecisionAndScale(int precision, int scale)\n+    {\n+        checkArgument(precision >= 1 && precision <= 38, \"Decimal precision must be between 1 and 38 inclusive, but was %d\", precision);\n+        checkArgument(scale < precision && scale >= 0, \"Decimal scale must be less than the precision and non-negative, but was %d with precision %d\",\n+                scale, precision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTU4NA=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTc3MTY5OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoyNjo1NlrOGpxLOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMDozNzo1MlrOGpx3qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MDQ5MQ==", "bodyText": "We often use the trick of \"\" + to format multi-line strings so that the arguments line up:\nreturnSqlIfFormatSupportsDecimalsAndTimestamps(fileFormat, \"\" +\n        \", _decimal_short DECIMAL(3,2)\" +\n        \", _decimal_long DECIMAL(30,10)\" +\n        \", _timestamp TIMESTAMP\") +\nThis works with the code style and IntelliJ formatter rules.", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446450491", "createdAt": "2020-06-26T23:26:56Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -139,9 +159,9 @@ private void testCreatePartitionedTable(Session session, FileFormat fileFormat)\n                 \", _real REAL\" +\n                 \", _double DOUBLE\" +\n                 \", _boolean BOOLEAN\" +\n-//                \", _decimal_short DECIMAL(3,2)\" +\n-//                \", _decimal_long DECIMAL(30,10)\" +\n-//                \", _timestamp TIMESTAMP\" +\n+                returnSqlIfFormatSupportsDecimalsAndTimestamps(fileFormat, \", _decimal_short DECIMAL(3,2)\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTg2NA==", "bodyText": "That's much neater; changed in all calls to the method.", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446461864", "createdAt": "2020-06-27T00:37:52Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -139,9 +159,9 @@ private void testCreatePartitionedTable(Session session, FileFormat fileFormat)\n                 \", _real REAL\" +\n                 \", _double DOUBLE\" +\n                 \", _boolean BOOLEAN\" +\n-//                \", _decimal_short DECIMAL(3,2)\" +\n-//                \", _decimal_long DECIMAL(30,10)\" +\n-//                \", _timestamp TIMESTAMP\" +\n+                returnSqlIfFormatSupportsDecimalsAndTimestamps(fileFormat, \", _decimal_short DECIMAL(3,2)\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MDQ5MQ=="}, "originalCommit": null, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3955, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}