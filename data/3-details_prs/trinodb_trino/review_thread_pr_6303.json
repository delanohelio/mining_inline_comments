{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2OTA1MjIw", "number": 6303, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0Mjo0OVrOFEEfxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0NDozM1rOFEEinA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODEyMjk1OnYy", "diffSide": "RIGHT", "path": "presto-memsql/src/test/java/io/prestosql/plugin/memsql/TestMemSqlDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0Mjo0OVrOIEA35w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxOTo0MFrOIECUSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTUyNw==", "bodyText": "We should be able to enable the test now for memsql.\n(make a PR from inside the repo to have memsql tests run)", "url": "https://github.com/trinodb/trino/pull/6303#discussion_r541079527", "createdAt": "2020-12-11T16:42:49Z", "author": {"login": "findepi"}, "path": "presto-memsql/src/test/java/io/prestosql/plugin/memsql/TestMemSqlDistributedQueries.java", "diffHunk": "@@ -130,7 +130,7 @@ protected boolean isColumnNameRejected(Exception exception, String columnName, b\n     }\n \n     @Override\n-    public void testLargeIn()\n+    public void testLargeIn(int valuesCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "128a7e877732cb70d61f5e876eb582888fd1d416"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMzE3Ng==", "bodyText": "#6313", "url": "https://github.com/trinodb/trino/pull/6303#discussion_r541103176", "createdAt": "2020-12-11T17:19:40Z", "author": {"login": "losipiuk"}, "path": "presto-memsql/src/test/java/io/prestosql/plugin/memsql/TestMemSqlDistributedQueries.java", "diffHunk": "@@ -130,7 +130,7 @@ protected boolean isColumnNameRejected(Exception exception, String columnName, b\n     }\n \n     @Override\n-    public void testLargeIn()\n+    public void testLargeIn(int valuesCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTUyNw=="}, "originalCommit": {"oid": "128a7e877732cb70d61f5e876eb582888fd1d416"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODEyNTIzOnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0MzoyOVrOIEA5Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0MzoyOVrOIEA5Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTkwMw==", "bodyText": "We should be able to enable the test now for phoenix, provided that @sopel39 's capping works for phoenix too.", "url": "https://github.com/trinodb/trino/pull/6303#discussion_r541079903", "createdAt": "2020-12-11T16:43:29Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "diffHunk": "@@ -75,7 +75,7 @@ protected TestTable createTableWithDefaultColumns()\n     }\n \n     @Override\n-    public void testLargeIn()\n+    public void testLargeIn(int valuesCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "128a7e877732cb70d61f5e876eb582888fd1d416"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODEzMDIwOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0NDozM1rOIEA8TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxOTowNFrOIECSwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4MDY1Mw==", "bodyText": "would it be possible to calc expected values without h2? would that improve test runtime?\nlike:\nassertThat(query(\".....\"))\n  .matches( materialized result )\n\n(treat this optional)", "url": "https://github.com/trinodb/trino/pull/6303#discussion_r541080653", "createdAt": "2020-12-11T16:44:33Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -652,10 +653,10 @@ public void testIn()\n         assertQuery(\"SELECT orderkey FROM orders WHERE totalprice IN (1, 2, 3)\");\n     }\n \n-    @Test\n-    public void testLargeIn()\n+    @Test(dataProvider = \"largeInValuesCount\")\n+    public void testLargeIn(int valuesCount)\n     {\n-        String longValues = range(0, 5000)\n+        String longValues = range(0, valuesCount)\n                 .mapToObj(Integer::toString)\n                 .collect(joining(\", \"));\n         assertQuery(\"SELECT orderkey FROM orders WHERE orderkey IN (\" + longValues + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "128a7e877732cb70d61f5e876eb582888fd1d416"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMjc4Ng==", "bodyText": "I will skip this one. Materialized rows for \"not in\" are kinda painful.", "url": "https://github.com/trinodb/trino/pull/6303#discussion_r541102786", "createdAt": "2020-12-11T17:19:04Z", "author": {"login": "losipiuk"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -652,10 +653,10 @@ public void testIn()\n         assertQuery(\"SELECT orderkey FROM orders WHERE totalprice IN (1, 2, 3)\");\n     }\n \n-    @Test\n-    public void testLargeIn()\n+    @Test(dataProvider = \"largeInValuesCount\")\n+    public void testLargeIn(int valuesCount)\n     {\n-        String longValues = range(0, 5000)\n+        String longValues = range(0, valuesCount)\n                 .mapToObj(Integer::toString)\n                 .collect(joining(\", \"));\n         assertQuery(\"SELECT orderkey FROM orders WHERE orderkey IN (\" + longValues + \")\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4MDY1Mw=="}, "originalCommit": {"oid": "128a7e877732cb70d61f5e876eb582888fd1d416"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4569, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}