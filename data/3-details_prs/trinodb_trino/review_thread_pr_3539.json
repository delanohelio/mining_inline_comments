{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NjIxODcx", "number": 3539, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowMToxNlrOD16eww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowNzowMVrOD16m5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODU5MjY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowMToxNlrOGLlOsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0NjoyNFrOGLmtYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NzQ5MQ==", "bodyText": "Why exactly?\nThis is just short-circuiting for speed?\nI am concerned this may reduce robustness of the code below (eg should initializePlanBuilder(plan) have possibility of failing, it would not fail, because masks are rare).\nif this stays, this should be likewise applied in the addRowFilters", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414797491", "createdAt": "2020-04-24T19:01:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -196,11 +201,15 @@ private RelationPlan addRowFilters(Table node, RelationPlan plan)\n \n     private RelationPlan addColumnMasks(Table table, RelationPlan plan)\n     {\n+        Map<String, List<Expression>> columnMasks = analysis.getColumnMasks(table);\n+\n+        if (columnMasks.isEmpty()) {\n+            return plan;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwNTM1MA==", "bodyText": "For WITH clauses, there will be a call to addColumnMasks with a map that will be empty (column masks don't apply to WITH clauses, only tables and views). The code below tries to walk over the list of fields from that relation, which is expected to have names as it's supposed to originate from a view or table. In the case of a WITH clause, names may be missing, causing a failure.\nFor row filters it doesn't matter, as they don't refer to columns by name.\nI debated going this route or making the loop below skip fields that don't have a name. There's no case where there can be column masks and some fields not have a name, so it felt unnecessary. I would also likely be a bug if that happened, and the current approach will fail with the expected error if it happens.\nI can add a comment to clarify, as it's evidently not obvious why it's there.", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414805350", "createdAt": "2020-04-24T19:15:54Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -196,11 +201,15 @@ private RelationPlan addRowFilters(Table node, RelationPlan plan)\n \n     private RelationPlan addColumnMasks(Table table, RelationPlan plan)\n     {\n+        Map<String, List<Expression>> columnMasks = analysis.getColumnMasks(table);\n+\n+        if (columnMasks.isEmpty()) {\n+            return plan;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NzQ5MQ=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjk3Nw==", "bodyText": "That deserves a code comment.\nHowever, can we explicitly exclude CTEs from this code?", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414816977", "createdAt": "2020-04-24T19:37:50Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -196,11 +201,15 @@ private RelationPlan addRowFilters(Table node, RelationPlan plan)\n \n     private RelationPlan addColumnMasks(Table table, RelationPlan plan)\n     {\n+        Map<String, List<Expression>> columnMasks = analysis.getColumnMasks(table);\n+\n+        if (columnMasks.isEmpty()) {\n+            return plan;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NzQ5MQ=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMDcyMA==", "bodyText": "That's hard. At this point of the process there's no difference between a view and a CTE -- they are all just \"named queries\".", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414820720", "createdAt": "2020-04-24T19:44:35Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -196,11 +201,15 @@ private RelationPlan addRowFilters(Table node, RelationPlan plan)\n \n     private RelationPlan addColumnMasks(Table table, RelationPlan plan)\n     {\n+        Map<String, List<Expression>> columnMasks = analysis.getColumnMasks(table);\n+\n+        if (columnMasks.isEmpty()) {\n+            return plan;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NzQ5MQ=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMTczMA==", "bodyText": "Then a comment.", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414821730", "createdAt": "2020-04-24T19:46:24Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -196,11 +201,15 @@ private RelationPlan addRowFilters(Table node, RelationPlan plan)\n \n     private RelationPlan addColumnMasks(Table table, RelationPlan plan)\n     {\n+        Map<String, List<Expression>> columnMasks = analysis.getColumnMasks(table);\n+\n+        if (columnMasks.isEmpty()) {\n+            return plan;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NzQ5MQ=="}, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODYwMjg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowNDowNVrOGLlUvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozNjoyMlrOGLmXlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5OTAzOA==", "bodyText": "This block is for Views and CTEs.\nWe shouldn't try to apply masks/filters on CTEs.\nThis works probably because we do columnMasks.getOrDefault in io.prestosql.sql.analyzer.Analysis#getColumnMasks, but this can also mask (no pun intended) bugs.", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414799038", "createdAt": "2020-04-24T19:04:05Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -148,34 +148,39 @@ protected RelationPlan visitTable(Table node, Void context)\n         Query namedQuery = analysis.getNamedQuery(node);\n         Scope scope = analysis.getScope(node);\n \n+        RelationPlan plan;\n         if (namedQuery != null) {\n             RelationPlan subPlan = process(namedQuery, null);\n \n             // Add implicit coercions if view query produces types that don't match the declared output types\n             // of the view (e.g., if the underlying tables referenced by the view changed)\n             Type[] types = scope.getRelationType().getAllFields().stream().map(Field::getType).toArray(Type[]::new);\n             RelationPlan withCoercions = addCoercions(subPlan, types);\n-            return new RelationPlan(withCoercions.getRoot(), scope, withCoercions.getFieldMappings());\n+\n+            plan = new RelationPlan(withCoercions.getRoot(), scope, withCoercions.getFieldMappings());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwNjUyOQ==", "bodyText": "We shouldn't try to apply masks/filters on CTEs.\n\nWe don't. In that case, the Table node will have no column masks associated with it.", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414806529", "createdAt": "2020-04-24T19:17:58Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -148,34 +148,39 @@ protected RelationPlan visitTable(Table node, Void context)\n         Query namedQuery = analysis.getNamedQuery(node);\n         Scope scope = analysis.getScope(node);\n \n+        RelationPlan plan;\n         if (namedQuery != null) {\n             RelationPlan subPlan = process(namedQuery, null);\n \n             // Add implicit coercions if view query produces types that don't match the declared output types\n             // of the view (e.g., if the underlying tables referenced by the view changed)\n             Type[] types = scope.getRelationType().getAllFields().stream().map(Field::getType).toArray(Type[]::new);\n             RelationPlan withCoercions = addCoercions(subPlan, types);\n-            return new RelationPlan(withCoercions.getRoot(), scope, withCoercions.getFieldMappings());\n+\n+            plan = new RelationPlan(withCoercions.getRoot(), scope, withCoercions.getFieldMappings());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5OTAzOA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjE0OQ==", "bodyText": "That's my understanding.", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414816149", "createdAt": "2020-04-24T19:36:22Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -148,34 +148,39 @@ protected RelationPlan visitTable(Table node, Void context)\n         Query namedQuery = analysis.getNamedQuery(node);\n         Scope scope = analysis.getScope(node);\n \n+        RelationPlan plan;\n         if (namedQuery != null) {\n             RelationPlan subPlan = process(namedQuery, null);\n \n             // Add implicit coercions if view query produces types that don't match the declared output types\n             // of the view (e.g., if the underlying tables referenced by the view changed)\n             Type[] types = scope.getRelationType().getAllFields().stream().map(Field::getType).toArray(Type[]::new);\n             RelationPlan withCoercions = addCoercions(subPlan, types);\n-            return new RelationPlan(withCoercions.getRoot(), scope, withCoercions.getFieldMappings());\n+\n+            plan = new RelationPlan(withCoercions.getRoot(), scope, withCoercions.getFieldMappings());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5OTAzOA=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODYxMzUwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestRowFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowNzowMVrOGLlbEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowNzowMVrOGLlbEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwMDY1OQ==", "bodyText": ":)", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414800659", "createdAt": "2020-04-24T19:07:01Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestRowFilter.java", "diffHunk": "@@ -189,6 +189,16 @@ public void testView()\n \n             assertions.assertQuery(session, \"SELECT count(*) FROM mock.default.nation_view\", \"VALUES BIGINT '25'\");\n         });\n+\n+        // filter on the view\n+        assertions.executeExclusively(() -> {\n+            accessControl.reset();\n+            accessControl.rowFilter(\n+                    new QualifiedObjectName(MOCK_CATALOG, \"default\", \"nation_view\"),\n+                    USER,\n+                    new ViewExpression(USER, Optional.of(CATALOG), Optional.of(\"tiny\"), \"nationkey = 1\"));\n+            assertions.assertQuery(\"SELECT name FROM mock.default.nation_view\", \"VALUES CAST('ARGENTINA' AS VARCHAR(25))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 246, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}