{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MDc2ODMz", "number": 4595, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0NDo0OVrOESVWrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo1NzoxOVrOESsl8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjU5Njk0OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0NDo0OVrOG3dO4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0NDo0OVrOG3dO4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMzgxMQ==", "bodyText": "#4594", "url": "https://github.com/trinodb/trino/pull/4595#discussion_r460803811", "createdAt": "2020-07-27T10:44:49Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSet.java", "diffHunk": "@@ -246,10 +269,83 @@ public void testObjectTypes()\n         });\n     }\n \n+    @Test\n+    public void testIpAddress()\n+            throws Exception\n+    {\n+        checkRepresentation(\"IPADDRESS '1.2.3.4'\", Types.JAVA_OBJECT, \"1.2.3.4\");\n+    }\n+\n+    @Test\n+    public void testUuid()\n+            throws Exception\n+    {\n+        checkRepresentation(\"UUID '0397e63b-2b78-4b7b-9c87-e085fa225dd8'\", Types.JAVA_OBJECT, \"0397e63b-2b78-4b7b-9c87-e085fa225dd8\");\n+    }\n+\n+    @Test\n+    public void testArray()\n+            throws Exception\n+    {\n+        checkRepresentation(\"ARRAY[1, 2]\", Types.ARRAY, (rs, column) -> assertEquals(rs.getArray(column).getArray(), new int[] {1, 2}));\n+    }\n+\n+    @Test\n+    public void testMap()\n+            throws Exception\n+    {\n+        checkRepresentation(\"map(ARRAY['k1', 'k2'], ARRAY[BIGINT '42', -117])\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"k1\", 42L, \"k2\", -117L));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"k1\", 42L, \"k2\", -117L));\n+        });\n+\n+        // NULL value\n+        checkRepresentation(\"map(ARRAY['k1', 'k2'], ARRAY[42, NULL])\", Types.JAVA_OBJECT, (rs, column) -> {\n+            Map<String, Integer> expected = new HashMap<>();\n+            expected.put(\"k1\", 42);\n+            expected.put(\"k2\", null);\n+            assertEquals(rs.getObject(column), expected);\n+            assertEquals(rs.getObject(column, Map.class), expected);\n+        });\n+    }\n+\n+    @Test\n+    public void testRow()\n+            throws Exception\n+    {\n+        // named row\n+        checkRepresentation(\"CAST(ROW(42, 'Presto') AS ROW(a_bigint bigint, a_varchar varchar(17)))\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"a_bigint\", 42L, \"a_varchar\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"a_bigint\", 42L, \"a_varchar\", \"Presto\"));\n+        });\n+\n+        // partially named row\n+        checkRepresentation(\"CAST(ROW(42, 'Presto') AS ROW(a_bigint bigint, varchar(17)))\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"a_bigint\", 42L, \"field1\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"a_bigint\", 42L, \"field1\", \"Presto\"));\n+        });\n+\n+        // anonymous row\n+        checkRepresentation(\"ROW(42, 'Presto')\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"field0\", 42, \"field1\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"field0\", 42, \"field1\", \"Presto\"));\n+        });\n+\n+        // name collision\n+        checkRepresentation(\"CAST(ROW(42, 'Presto') AS ROW(field1 integer, varchar(17)))\", Types.JAVA_OBJECT, (rs, column) -> {\n+            // TODO (https://github.com/prestosql/presto/issues/4594) both fields should be visible or exception thrown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6e5fdb29e95841119d93048476b361d35b5fac"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDQwNDMyOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo1NzoxOVrOG4BCxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOToxMDowNlrOG4Dwjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5MDUzMg==", "bodyText": "Can you explain what is the ordering rule and motivation in the commit message?", "url": "https://github.com/trinodb/trino/pull/4595#discussion_r461390532", "createdAt": "2020-07-28T07:57:19Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSet.java", "diffHunk": "@@ -116,13 +116,6 @@ public void testPrimitiveTypes()\n         checkRepresentation(\"cast('foo' as char(5))\", Types.CHAR, \"foo  \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed84506d48aef4f03fdf0827789d8e5eba7b623"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNTAyMg==", "bodyText": "I just wanted to have simple types before composite types.\nAnd standard types before extensions/\"less standard\" types.\nI do not want to make a rule out of that though. (Too many\nrules are not helpful, even if every each of them is sound.)", "url": "https://github.com/trinodb/trino/pull/4595#discussion_r461435022", "createdAt": "2020-07-28T09:10:06Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSet.java", "diffHunk": "@@ -116,13 +116,6 @@ public void testPrimitiveTypes()\n         checkRepresentation(\"cast('foo' as char(5))\", Types.CHAR, \"foo  \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5MDUzMg=="}, "originalCommit": {"oid": "8ed84506d48aef4f03fdf0827789d8e5eba7b623"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3522, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}