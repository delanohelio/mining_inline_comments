{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTUwNjAz", "number": 3361, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToyODoyOVrODvXSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjoyOVrODvveEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTkxMTI2OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToyODoyOVrOGBvujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToyODoyOVrOGBvujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MzcyNw==", "bodyText": "Wrapping the Assignment arguments would make this easier to read. Maybe also static import it.", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404483727", "createdAt": "2020-04-07T01:28:29Z", "author": {"login": "electrum"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -107,12 +111,45 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n                 handle.getCatalogName(),\n                 handle.getSchemaName(),\n                 handle.getTableName(),\n+                handle.getColumns(),\n                 newDomain,\n                 handle.getLimit());\n \n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<ProjectionApplicationResult<ConnectorTableHandle>> applyProjection(\n+            ConnectorSession session,\n+            ConnectorTableHandle table,\n+            List<ConnectorExpression> projections,\n+            Map<String, ColumnHandle> assignments)\n+    {\n+        JdbcTableHandle handle = (JdbcTableHandle) table;\n+\n+        List<JdbcColumnHandle> newColumns = assignments.values().stream()\n+                .map(JdbcColumnHandle.class::cast)\n+                .collect(Collectors.toList());\n+\n+        if (handle.getColumns().isPresent() && containSameElements(newColumns, handle.getColumns().get())) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(new ProjectionApplicationResult<>(\n+                new JdbcTableHandle(\n+                        handle.getSchemaTableName(),\n+                        handle.getCatalogName(),\n+                        handle.getSchemaName(),\n+                        handle.getTableName(),\n+                        Optional.of(newColumns),\n+                        handle.getConstraint(),\n+                        handle.getLimit()),\n+                projections,\n+                assignments.entrySet().stream()\n+                        .map(assignment -> new ProjectionApplicationResult.Assignment(assignment.getKey(), assignment.getValue(), ((JdbcColumnHandle) assignment.getValue()).getColumnType()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTkxNzc4OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTozMjowMFrOGBvyWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTozMjowMFrOGBvyWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4NDY5Nw==", "bodyText": "This will print like\ncolumns=Optional.empty\n\nor\ncolumns=Optional[[orderkey:bigint:bigint],...]\n\nIt would look nicer to skip when not present\ncolumns.ifPresent(value -> builder.append(\" columns=\").append(value));\nThis is the rendering of the table in explain plans, so we want it to look good.", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404484697", "createdAt": "2020-04-07T01:32:00Z", "author": {"login": "electrum"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -125,6 +137,7 @@ public String toString()\n         StringBuilder builder = new StringBuilder();\n         builder.append(schemaTableName).append(\" \");\n         Joiner.on(\".\").skipNulls().appendTo(builder, catalogName, schemaName, tableName);\n+        builder.append(\" columns=\").append(columns);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDM5MzkzOnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjowODozMlrOGB0MMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjowODozMlrOGB0MMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1Njg0OQ==", "bodyText": "How will SELECT * work for such a table?\nDo we have a test for this?\n(IIRC i added the check here to prevent obscure errors later on, but this may be outdated.)", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404556849", "createdAt": "2020-04-07T06:08:32Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -480,9 +480,6 @@ public TableMetadata getTableMetadata(Session session, TableHandle tableHandle)\n         CatalogName catalogName = tableHandle.getCatalogName();\n         ConnectorMetadata metadata = getMetadata(session, catalogName);\n         ConnectorTableMetadata tableMetadata = metadata.getTableMetadata(session.toConnectorSession(catalogName), tableHandle.getConnectorHandle());\n-        if (tableMetadata.getColumns().isEmpty()) {\n-            throw new PrestoException(NOT_SUPPORTED, \"Table has no columns: \" + tableHandle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDM5NzY0OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoxMDowOFrOGB0ONQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowOTozM1rOGCISjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1NzM2NQ==", "bodyText": "ImmutableList", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404557365", "createdAt": "2020-04-07T06:10:08Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -107,12 +112,48 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n                 handle.getCatalogName(),\n                 handle.getSchemaName(),\n                 handle.getTableName(),\n+                handle.getColumns(),\n                 newDomain,\n                 handle.getLimit());\n \n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<ProjectionApplicationResult<ConnectorTableHandle>> applyProjection(\n+            ConnectorSession session,\n+            ConnectorTableHandle table,\n+            List<ConnectorExpression> projections,\n+            Map<String, ColumnHandle> assignments)\n+    {\n+        JdbcTableHandle handle = (JdbcTableHandle) table;\n+\n+        List<JdbcColumnHandle> newColumns = assignments.values().stream()\n+                .map(JdbcColumnHandle.class::cast)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4ODgxOA==", "bodyText": "io.prestosql.util.MoreLists#mappedCopy (requires move to plugin toolkit)", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404588818", "createdAt": "2020-04-07T07:20:11Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -107,12 +112,48 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n                 handle.getCatalogName(),\n                 handle.getSchemaName(),\n                 handle.getTableName(),\n+                handle.getColumns(),\n                 newDomain,\n                 handle.getLimit());\n \n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<ProjectionApplicationResult<ConnectorTableHandle>> applyProjection(\n+            ConnectorSession session,\n+            ConnectorTableHandle table,\n+            List<ConnectorExpression> projections,\n+            Map<String, ColumnHandle> assignments)\n+    {\n+        JdbcTableHandle handle = (JdbcTableHandle) table;\n+\n+        List<JdbcColumnHandle> newColumns = assignments.values().stream()\n+                .map(JdbcColumnHandle.class::cast)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1NzM2NQ=="}, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4NjE1Ng==", "bodyText": "io.prestosql.util.MoreLists#mappedCopy (requires move to plugin toolkit)\n\nThat's overkill for such a simple usage.", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404886156", "createdAt": "2020-04-07T15:09:33Z", "author": {"login": "martint"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -107,12 +112,48 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n                 handle.getCatalogName(),\n                 handle.getSchemaName(),\n                 handle.getTableName(),\n+                handle.getColumns(),\n                 newDomain,\n                 handle.getLimit());\n \n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<ProjectionApplicationResult<ConnectorTableHandle>> applyProjection(\n+            ConnectorSession session,\n+            ConnectorTableHandle table,\n+            List<ConnectorExpression> projections,\n+            Map<String, ColumnHandle> assignments)\n+    {\n+        JdbcTableHandle handle = (JdbcTableHandle) table;\n+\n+        List<JdbcColumnHandle> newColumns = assignments.values().stream()\n+                .map(JdbcColumnHandle.class::cast)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1NzM2NQ=="}, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDQwMjMzOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoxMjowM1rOGB0Q7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToxMzozNVrOGCIe7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1ODA2Mw==", "bodyText": "rnn columns", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404558063", "createdAt": "2020-04-07T06:12:03Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -51,13 +55,15 @@ public JdbcTableHandle(\n             @JsonProperty(\"catalogName\") @Nullable String catalogName,\n             @JsonProperty(\"schemaName\") @Nullable String schemaName,\n             @JsonProperty(\"tableName\") String tableName,\n+            @JsonProperty(\"columns\") Optional<List<JdbcColumnHandle>> columns,\n             @JsonProperty(\"constraint\") TupleDomain<ColumnHandle> constraint,\n             @JsonProperty(\"limit\") OptionalLong limit)\n     {\n         this.schemaTableName = requireNonNull(schemaTableName, \"schemaTableName is null\");\n         this.catalogName = catalogName;\n         this.schemaName = schemaName;\n         this.tableName = requireNonNull(tableName, \"tableName is null\");\n+        this.columns = columns.map(ImmutableList::copyOf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NDI0NQ==", "bodyText": "It\u2019s unnecessary. The call to copy the list will fail eagerly with an NPE anyway. There\u2019s no danger of holding on to an invalid value that will later cause the program to fail - this is the actual goal of validating arguments eagerly.", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404564245", "createdAt": "2020-04-07T06:27:45Z", "author": {"login": "martint"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -51,13 +55,15 @@ public JdbcTableHandle(\n             @JsonProperty(\"catalogName\") @Nullable String catalogName,\n             @JsonProperty(\"schemaName\") @Nullable String schemaName,\n             @JsonProperty(\"tableName\") String tableName,\n+            @JsonProperty(\"columns\") Optional<List<JdbcColumnHandle>> columns,\n             @JsonProperty(\"constraint\") TupleDomain<ColumnHandle> constraint,\n             @JsonProperty(\"limit\") OptionalLong limit)\n     {\n         this.schemaTableName = requireNonNull(schemaTableName, \"schemaTableName is null\");\n         this.catalogName = catalogName;\n         this.schemaName = schemaName;\n         this.tableName = requireNonNull(tableName, \"tableName is null\");\n+        this.columns = columns.map(ImmutableList::copyOf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1ODA2Mw=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMDE2NA==", "bodyText": "yes, but it would fail with NPE without clear message, so we still prefer rnn", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404610164", "createdAt": "2020-04-07T07:56:44Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -51,13 +55,15 @@ public JdbcTableHandle(\n             @JsonProperty(\"catalogName\") @Nullable String catalogName,\n             @JsonProperty(\"schemaName\") @Nullable String schemaName,\n             @JsonProperty(\"tableName\") String tableName,\n+            @JsonProperty(\"columns\") Optional<List<JdbcColumnHandle>> columns,\n             @JsonProperty(\"constraint\") TupleDomain<ColumnHandle> constraint,\n             @JsonProperty(\"limit\") OptionalLong limit)\n     {\n         this.schemaTableName = requireNonNull(schemaTableName, \"schemaTableName is null\");\n         this.catalogName = catalogName;\n         this.schemaName = schemaName;\n         this.tableName = requireNonNull(tableName, \"tableName is null\");\n+        this.columns = columns.map(ImmutableList::copyOf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1ODA2Mw=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4OTMyNA==", "bodyText": "You can look at the stacktrace to see it (since you're going to be debugging anyway). The original motivation for adding these when we started using them in the early years of airlift was what I described above, but ok. One day when we move to Java 14+ we can get rid of all these usages.", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404889324", "createdAt": "2020-04-07T15:13:35Z", "author": {"login": "martint"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -51,13 +55,15 @@ public JdbcTableHandle(\n             @JsonProperty(\"catalogName\") @Nullable String catalogName,\n             @JsonProperty(\"schemaName\") @Nullable String schemaName,\n             @JsonProperty(\"tableName\") String tableName,\n+            @JsonProperty(\"columns\") Optional<List<JdbcColumnHandle>> columns,\n             @JsonProperty(\"constraint\") TupleDomain<ColumnHandle> constraint,\n             @JsonProperty(\"limit\") OptionalLong limit)\n     {\n         this.schemaTableName = requireNonNull(schemaTableName, \"schemaTableName is null\");\n         this.catalogName = catalogName;\n         this.schemaName = schemaName;\n         this.tableName = requireNonNull(tableName, \"tableName is null\");\n+        this.columns = columns.map(ImmutableList::copyOf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1ODA2Mw=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDc0MTA3OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1ODowM1rOGB3fmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo0MTowM1rOGCJzXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMDk2OQ==", "bodyText": "add verification in io.prestosql.plugin.jdbc.BaseJdbcClient#buildSql that table handle's columns are same as the one passed explicitly", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404610969", "createdAt": "2020-04-07T07:58:03Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -88,6 +94,12 @@ public String getTableName()\n         return tableName;\n     }\n \n+    @JsonProperty\n+    public Optional<List<JdbcColumnHandle>> getColumns()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxMDk0MA==", "bodyText": "I added it to JdbcRecordsetProvider", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r404910940", "createdAt": "2020-04-07T15:41:03Z", "author": {"login": "martint"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -88,6 +94,12 @@ public String getTableName()\n         return tableName;\n     }\n \n+    @JsonProperty\n+    public Optional<List<JdbcColumnHandle>> getColumns()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMDk2OQ=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzY2NTIxOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcRecordSetProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDowNzo0N1rOGCUJEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNTo0MFrOGCUZ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MDMzOQ==", "bodyText": "what about the order?", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r405080339", "createdAt": "2020-04-07T20:07:47Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcRecordSetProvider.java", "diffHunk": "@@ -45,6 +47,13 @@ public RecordSet getRecordSet(ConnectorTransactionHandle transaction, ConnectorS\n         JdbcSplit jdbcSplit = (JdbcSplit) split;\n         JdbcTableHandle jdbcTable = (JdbcTableHandle) table;\n \n+        // In the current API, the columns (and order) needed by the engine are provided via an argument to this method. Make sure that\n+        // any columns that were recorded in the table handle match the requested set.\n+        // If no columns are recorded, it means that applyProjection never got called (e.g., in the case all columns are being used) and all\n+        // table columns should be returned. TODO: this is something that should be addressed once the getRecordSet API is revamped\n+        jdbcTable.getColumns()\n+                .ifPresent(tableColumns -> verify(ImmutableSet.copyOf(columns).equals(ImmutableSet.copyOf(tableColumns))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDYyOQ==", "bodyText": "Yes, good catch. I didn't recall if we made any guarantees, but the LocalExecutionPlanner respects the order of the output symbols of the TableScan. I'll update to check that, too.", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r405084629", "createdAt": "2020-04-07T20:15:40Z", "author": {"login": "martint"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcRecordSetProvider.java", "diffHunk": "@@ -45,6 +47,13 @@ public RecordSet getRecordSet(ConnectorTransactionHandle transaction, ConnectorS\n         JdbcSplit jdbcSplit = (JdbcSplit) split;\n         JdbcTableHandle jdbcTable = (JdbcTableHandle) table;\n \n+        // In the current API, the columns (and order) needed by the engine are provided via an argument to this method. Make sure that\n+        // any columns that were recorded in the table handle match the requested set.\n+        // If no columns are recorded, it means that applyProjection never got called (e.g., in the case all columns are being used) and all\n+        // table columns should be returned. TODO: this is something that should be addressed once the getRecordSet API is revamped\n+        jdbcTable.getColumns()\n+                .ifPresent(tableColumns -> verify(ImmutableSet.copyOf(columns).equals(ImmutableSet.copyOf(tableColumns))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MDMzOQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzg3NDA5OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjoyOVrOGCWIkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxMjoyMFrOGCYB7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMjk3Ng==", "bodyText": "What about order here?", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r405112976", "createdAt": "2020-04-07T21:06:29Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -322,4 +363,9 @@ public void dropSchema(ConnectorSession session, String schemaName)\n     {\n         jdbcClient.dropSchema(JdbcIdentity.from(session), schemaName);\n     }\n+\n+    private static boolean containSameElements(Iterable<? extends ColumnHandle> first, Iterable<? extends ColumnHandle> second)\n+    {\n+        return ImmutableSet.copyOf(first).equals(ImmutableSet.copyOf(second));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e3f08e5b858920b65e1bdf726cf73f193d33fcb"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzODQ0MQ==", "bodyText": "I can change it, but it doesn't really matter here. There's not much benefit in accepting a pushdown if it only changes the order of the fields (other than eliminating an almost-free projection from the plan)", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r405138441", "createdAt": "2020-04-07T21:58:56Z", "author": {"login": "martint"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -322,4 +363,9 @@ public void dropSchema(ConnectorSession session, String schemaName)\n     {\n         jdbcClient.dropSchema(JdbcIdentity.from(session), schemaName);\n     }\n+\n+    private static boolean containSameElements(Iterable<? extends ColumnHandle> first, Iterable<? extends ColumnHandle> second)\n+    {\n+        return ImmutableSet.copyOf(first).equals(ImmutableSet.copyOf(second));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMjk3Ng=="}, "originalCommit": {"oid": "6e3f08e5b858920b65e1bdf726cf73f193d33fcb"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDA0Nw==", "bodyText": "Actually, we have to keep it like this for now. There's something going on in PushProjectionsIntoTableScan that's not preserving the order as it extracts the expressions to project. As a result, the plan never converges. I'll look into it separately and change this later when it's fixed.", "url": "https://github.com/trinodb/trino/pull/3361#discussion_r405144047", "createdAt": "2020-04-07T22:12:20Z", "author": {"login": "martint"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -322,4 +363,9 @@ public void dropSchema(ConnectorSession session, String schemaName)\n     {\n         jdbcClient.dropSchema(JdbcIdentity.from(session), schemaName);\n     }\n+\n+    private static boolean containSameElements(Iterable<? extends ColumnHandle> first, Iterable<? extends ColumnHandle> second)\n+    {\n+        return ImmutableSet.copyOf(first).equals(ImmutableSet.copyOf(second));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMjk3Ng=="}, "originalCommit": {"oid": "6e3f08e5b858920b65e1bdf726cf73f193d33fcb"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 347, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}