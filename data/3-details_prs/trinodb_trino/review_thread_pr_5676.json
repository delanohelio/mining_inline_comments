{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4OTEzMDU0", "number": 5676, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozNTo0OVrOExNYEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToxODoxOVrOExQCRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDM0ODMzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/util/TestTimeZoneUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozNTo0OVrOHnOJKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozNTo0OVrOHnOJKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4ODIzMg==", "bodyText": "remove", "url": "https://github.com/trinodb/trino/pull/5676#discussion_r510888232", "createdAt": "2020-10-23T13:35:49Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/util/TestTimeZoneUtils.java", "diffHunk": "@@ -60,9 +64,22 @@ public void testOffsets()\n \n     public static void assertTimeZone(String zoneId, DateTimeZone dateTimeZone)\n     {\n-        long dateTimeWithTimeZone = packDateTimeWithZone(new DateTime(42, dateTimeZone));\n-        assertEquals(packDateTimeWithZone(42L, dateTimeZone.toTimeZone().getID()), dateTimeWithTimeZone);\n-        DateTimeZone unpackedZone = unpackDateTimeZone(dateTimeWithTimeZone);\n+        long packWithDateTime = packDateTimeWithZone(new DateTime(42, dateTimeZone));\n+        long packWithZoneId = packDateTimeWithZone(42L, dateTimeZone.toTimeZone().getID());\n+        if (packWithDateTime != packWithZoneId) {\n+            fail(format(\n+                    \"packWithDateTime and packWithZoneId differ for zone [%s] / [%s]: %s [%s %s] and %s [%s %s]\",\n+                    zoneId,\n+                    dateTimeZone,\n+                    packWithDateTime,\n+                    unpackMillisUtc(packWithDateTime),\n+                    unpackZoneKey(packWithDateTime),\n+                    packWithZoneId,\n+                    unpackMillisUtc(packWithZoneId),\n+                    unpackZoneKey(packWithZoneId)));\n+        }\n+        assertEquals(packWithZoneId, packWithDateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDc4NDA2OnYy", "diffSide": "RIGHT", "path": "src/modernizer/violations.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToxODoxOVrOHnSWcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozMTowMlrOHnVInQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NzE3MA==", "bodyText": "as it returns GMT for a zone not supported by the JVM\n\nwow!", "url": "https://github.com/trinodb/trino/pull/5676#discussion_r510957170", "createdAt": "2020-10-23T15:18:19Z", "author": {"login": "martint"}, "path": "src/modernizer/violations.xml", "diffHunk": "@@ -67,6 +67,12 @@\n         <comment>Prefer new Configuration(false)</comment>\n     </violation>\n \n+    <violation>\n+        <name>org/joda/time/DateTimeZone.toTimeZone:()Ljava/util/TimeZone;</name>\n+        <version>1.8</version>\n+        <comment>Avoid DateTimeZone.toTimeZone as it returns GMT for a zone not supported by the JVM. Use TimeZone.getTimeZone(ZoneId.of(dtz.getId())) instead.</comment>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7108b41b9e39ea0b9b133871cffd045e737d3d7c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwMjc4MQ==", "bodyText": "I will likewise block use of TimeZone.forTimeZone(String).", "url": "https://github.com/trinodb/trino/pull/5676#discussion_r511002781", "createdAt": "2020-10-23T16:31:02Z", "author": {"login": "findepi"}, "path": "src/modernizer/violations.xml", "diffHunk": "@@ -67,6 +67,12 @@\n         <comment>Prefer new Configuration(false)</comment>\n     </violation>\n \n+    <violation>\n+        <name>org/joda/time/DateTimeZone.toTimeZone:()Ljava/util/TimeZone;</name>\n+        <version>1.8</version>\n+        <comment>Avoid DateTimeZone.toTimeZone as it returns GMT for a zone not supported by the JVM. Use TimeZone.getTimeZone(ZoneId.of(dtz.getId())) instead.</comment>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NzE3MA=="}, "originalCommit": {"oid": "7108b41b9e39ea0b9b133871cffd045e737d3d7c"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4513, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}