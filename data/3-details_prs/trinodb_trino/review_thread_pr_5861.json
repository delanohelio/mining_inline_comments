{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODEyMDUz", "number": 5861, "reviewThreads": {"totalCount": 118, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxNDoxN1rOFBAGyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QxMzo0MjoyOFrOFpRxcg==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk0NjM1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxNDoxN1rOH_kK1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MjoyMVrOIAPz-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNDkzMg==", "bodyText": "Move private methods to end of class", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536414932", "createdAt": "2020-12-04T22:14:17Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTk3OA==", "bodyText": "Moved.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129978", "createdAt": "2020-12-06T21:42:21Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNDkzMg=="}, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk1Njg0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxNzoyOVrOH_kQeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MjoyNFrOIAPz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNjM3Nw==", "bodyText": "Static import MaskDeletedRowsFunction", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536416377", "createdAt": "2020-12-04T22:17:29Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableList.Builder<Integer> dependencyIndexBuilder = ImmutableList.builder();\n+        int dependencyIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (dependencyColumns.contains(handle)) {\n+                dependencyIndexBuilder.add(dependencyIndex++);\n+            }\n+            else if (nonUpdatedColumns.contains(handle)) {\n+                dependencyIndex++;\n+            }\n+        }\n+        return dependencyIndexBuilder.build();\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getAllDataColumns()\n+    {\n+        return allDataColumns;\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getUpdatedColumns()\n+    {\n+        return updatedColumns;\n+    }\n+\n+    @JsonIgnore\n+    public List<HiveColumnHandle> getNonUpdatedColumns()\n+    {\n+        return nonUpdatedColumns;\n+    }\n+\n+    /**\n+     * Merge the non-updated columns with the update dependencies, in allDataColumns order,\n+     * and finally add the rowId column as the last dependency.\n+     */\n+    public List<HiveColumnHandle> mergeWithNonUpdatedColumns(List<HiveColumnHandle> updateDependencies)\n+    {\n+        ImmutableList.Builder<HiveColumnHandle> builder = ImmutableList.builder();\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle) || updateDependencies.contains(handle)) {\n+                builder.add(handle);\n+            }\n+        }\n+        // The last updateDependency is the rowId column\n+        builder.add(updateDependencies.get(updateDependencies.size() - 1));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Create a RowBlock containing four children: the three ACID columns - - originalTransaction,\n+     * rowId, bucket - - and a RowBlock containing all the data columns not changed\n+     * by the UPDATE statement.\n+     */\n+    public Block createUpdateRowBlock(Page page, List<HiveColumnHandle> updateDependencies, OrcDeletedRows.MaskDeletedRowsFunction maskDeletedRowsFunction)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTk4Mg==", "bodyText": "Imported.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129982", "createdAt": "2020-12-06T21:42:24Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableList.Builder<Integer> dependencyIndexBuilder = ImmutableList.builder();\n+        int dependencyIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (dependencyColumns.contains(handle)) {\n+                dependencyIndexBuilder.add(dependencyIndex++);\n+            }\n+            else if (nonUpdatedColumns.contains(handle)) {\n+                dependencyIndex++;\n+            }\n+        }\n+        return dependencyIndexBuilder.build();\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getAllDataColumns()\n+    {\n+        return allDataColumns;\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getUpdatedColumns()\n+    {\n+        return updatedColumns;\n+    }\n+\n+    @JsonIgnore\n+    public List<HiveColumnHandle> getNonUpdatedColumns()\n+    {\n+        return nonUpdatedColumns;\n+    }\n+\n+    /**\n+     * Merge the non-updated columns with the update dependencies, in allDataColumns order,\n+     * and finally add the rowId column as the last dependency.\n+     */\n+    public List<HiveColumnHandle> mergeWithNonUpdatedColumns(List<HiveColumnHandle> updateDependencies)\n+    {\n+        ImmutableList.Builder<HiveColumnHandle> builder = ImmutableList.builder();\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle) || updateDependencies.contains(handle)) {\n+                builder.add(handle);\n+            }\n+        }\n+        // The last updateDependency is the rowId column\n+        builder.add(updateDependencies.get(updateDependencies.size() - 1));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Create a RowBlock containing four children: the three ACID columns - - originalTransaction,\n+     * rowId, bucket - - and a RowBlock containing all the data columns not changed\n+     * by the UPDATE statement.\n+     */\n+    public Block createUpdateRowBlock(Page page, List<HiveColumnHandle> updateDependencies, OrcDeletedRows.MaskDeletedRowsFunction maskDeletedRowsFunction)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNjM3Nw=="}, "originalCommit": null, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk3MjkxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoyMjozMFrOH_kZPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MjozNVrOIAP0Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxODYyMg==", "bodyText": "Maybe simplify to\nBlock[] blocks = acidBlocks + new Block[nonUpdatedColumns.isEmpty() ? 0 : 1];", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536418622", "createdAt": "2020-12-04T22:22:30Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableList.Builder<Integer> dependencyIndexBuilder = ImmutableList.builder();\n+        int dependencyIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (dependencyColumns.contains(handle)) {\n+                dependencyIndexBuilder.add(dependencyIndex++);\n+            }\n+            else if (nonUpdatedColumns.contains(handle)) {\n+                dependencyIndex++;\n+            }\n+        }\n+        return dependencyIndexBuilder.build();\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getAllDataColumns()\n+    {\n+        return allDataColumns;\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getUpdatedColumns()\n+    {\n+        return updatedColumns;\n+    }\n+\n+    @JsonIgnore\n+    public List<HiveColumnHandle> getNonUpdatedColumns()\n+    {\n+        return nonUpdatedColumns;\n+    }\n+\n+    /**\n+     * Merge the non-updated columns with the update dependencies, in allDataColumns order,\n+     * and finally add the rowId column as the last dependency.\n+     */\n+    public List<HiveColumnHandle> mergeWithNonUpdatedColumns(List<HiveColumnHandle> updateDependencies)\n+    {\n+        ImmutableList.Builder<HiveColumnHandle> builder = ImmutableList.builder();\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle) || updateDependencies.contains(handle)) {\n+                builder.add(handle);\n+            }\n+        }\n+        // The last updateDependency is the rowId column\n+        builder.add(updateDependencies.get(updateDependencies.size() - 1));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Create a RowBlock containing four children: the three ACID columns - - originalTransaction,\n+     * rowId, bucket - - and a RowBlock containing all the data columns not changed\n+     * by the UPDATE statement.\n+     */\n+    public Block createUpdateRowBlock(Page page, List<HiveColumnHandle> updateDependencies, OrcDeletedRows.MaskDeletedRowsFunction maskDeletedRowsFunction)\n+    {\n+        requireNonNull(page, \"page is null\");\n+        requireNonNull(updateDependencies, \"updateDependencies is null\");\n+        Map<HiveColumnHandle, Integer> nonUpdatedChannelNumbers = makeNonUpdatedChannelNumbers(updateDependencies);\n+        int acidBlocks = 3;\n+        checkArgument(page.getChannelCount() >= acidBlocks + nonUpdatedColumns.size(), \"page doesn't have enough columns\");\n+\n+        Block[] blocks = new Block[nonUpdatedColumns.isEmpty() ? acidBlocks : acidBlocks + 1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDAxOA==", "bodyText": "I think you mean:\nBlock[] blocks = new Block[acidBlocks + (nonUpdatedColumns.isEmpty() ? 0 : 1)];\nand indeed that's nicer.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537130018", "createdAt": "2020-12-06T21:42:35Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableList.Builder<Integer> dependencyIndexBuilder = ImmutableList.builder();\n+        int dependencyIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (dependencyColumns.contains(handle)) {\n+                dependencyIndexBuilder.add(dependencyIndex++);\n+            }\n+            else if (nonUpdatedColumns.contains(handle)) {\n+                dependencyIndex++;\n+            }\n+        }\n+        return dependencyIndexBuilder.build();\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getAllDataColumns()\n+    {\n+        return allDataColumns;\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getUpdatedColumns()\n+    {\n+        return updatedColumns;\n+    }\n+\n+    @JsonIgnore\n+    public List<HiveColumnHandle> getNonUpdatedColumns()\n+    {\n+        return nonUpdatedColumns;\n+    }\n+\n+    /**\n+     * Merge the non-updated columns with the update dependencies, in allDataColumns order,\n+     * and finally add the rowId column as the last dependency.\n+     */\n+    public List<HiveColumnHandle> mergeWithNonUpdatedColumns(List<HiveColumnHandle> updateDependencies)\n+    {\n+        ImmutableList.Builder<HiveColumnHandle> builder = ImmutableList.builder();\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle) || updateDependencies.contains(handle)) {\n+                builder.add(handle);\n+            }\n+        }\n+        // The last updateDependency is the rowId column\n+        builder.add(updateDependencies.get(updateDependencies.size() - 1));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Create a RowBlock containing four children: the three ACID columns - - originalTransaction,\n+     * rowId, bucket - - and a RowBlock containing all the data columns not changed\n+     * by the UPDATE statement.\n+     */\n+    public Block createUpdateRowBlock(Page page, List<HiveColumnHandle> updateDependencies, OrcDeletedRows.MaskDeletedRowsFunction maskDeletedRowsFunction)\n+    {\n+        requireNonNull(page, \"page is null\");\n+        requireNonNull(updateDependencies, \"updateDependencies is null\");\n+        Map<HiveColumnHandle, Integer> nonUpdatedChannelNumbers = makeNonUpdatedChannelNumbers(updateDependencies);\n+        int acidBlocks = 3;\n+        checkArgument(page.getChannelCount() >= acidBlocks + nonUpdatedColumns.size(), \"page doesn't have enough columns\");\n+\n+        Block[] blocks = new Block[nonUpdatedColumns.isEmpty() ? acidBlocks : acidBlocks + 1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxODYyMg=="}, "originalCommit": null, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTE2ODgxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxOTo0OTowNFrOIAAoBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0Mjo0MVrOIAP0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTE1OA==", "bodyText": "We could compute this channel list up front, rather than for every page", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536881158", "createdAt": "2020-12-05T19:49:04Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableList.Builder<Integer> dependencyIndexBuilder = ImmutableList.builder();\n+        int dependencyIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (dependencyColumns.contains(handle)) {\n+                dependencyIndexBuilder.add(dependencyIndex++);\n+            }\n+            else if (nonUpdatedColumns.contains(handle)) {\n+                dependencyIndex++;\n+            }\n+        }\n+        return dependencyIndexBuilder.build();\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getAllDataColumns()\n+    {\n+        return allDataColumns;\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getUpdatedColumns()\n+    {\n+        return updatedColumns;\n+    }\n+\n+    @JsonIgnore\n+    public List<HiveColumnHandle> getNonUpdatedColumns()\n+    {\n+        return nonUpdatedColumns;\n+    }\n+\n+    /**\n+     * Merge the non-updated columns with the update dependencies, in allDataColumns order,\n+     * and finally add the rowId column as the last dependency.\n+     */\n+    public List<HiveColumnHandle> mergeWithNonUpdatedColumns(List<HiveColumnHandle> updateDependencies)\n+    {\n+        ImmutableList.Builder<HiveColumnHandle> builder = ImmutableList.builder();\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle) || updateDependencies.contains(handle)) {\n+                builder.add(handle);\n+            }\n+        }\n+        // The last updateDependency is the rowId column\n+        builder.add(updateDependencies.get(updateDependencies.size() - 1));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Create a RowBlock containing four children: the three ACID columns - - originalTransaction,\n+     * rowId, bucket - - and a RowBlock containing all the data columns not changed\n+     * by the UPDATE statement.\n+     */\n+    public Block createUpdateRowBlock(Page page, List<HiveColumnHandle> updateDependencies, OrcDeletedRows.MaskDeletedRowsFunction maskDeletedRowsFunction)\n+    {\n+        requireNonNull(page, \"page is null\");\n+        requireNonNull(updateDependencies, \"updateDependencies is null\");\n+        Map<HiveColumnHandle, Integer> nonUpdatedChannelNumbers = makeNonUpdatedChannelNumbers(updateDependencies);\n+        int acidBlocks = 3;\n+        checkArgument(page.getChannelCount() >= acidBlocks + nonUpdatedColumns.size(), \"page doesn't have enough columns\");\n+\n+        Block[] blocks = new Block[nonUpdatedColumns.isEmpty() ? acidBlocks : acidBlocks + 1];\n+        blocks[ORIGINAL_TRANSACTION_CHANNEL] = page.getBlock(ORIGINAL_TRANSACTION_CHANNEL);\n+        blocks[ROW_ID_CHANNEL] = page.getBlock(ROW_ID_CHANNEL);\n+        blocks[BUCKET_CHANNEL] = page.getBlock(BUCKET_CHANNEL);\n+\n+        if (!nonUpdatedColumns.isEmpty()) {\n+            Block[] nonUpdatedColumnBlocks = new Block[getNonUpdatedColumns().size()];\n+            int offset = 0;\n+            for (HiveColumnHandle handle : getNonUpdatedColumns()) {\n+                Integer sourceChannel = nonUpdatedChannelNumbers.get(handle);\n+                requireNonNull(sourceChannel, \"sourceChannel is null\");\n+                nonUpdatedColumnBlocks[offset] = page.getBlock(acidBlocks + sourceChannel);\n+                offset++;\n+            }\n+            blocks[ROW_CHANNEL] = RowBlock.fromFieldBlocks(page.getPositionCount(), Optional.empty(), nonUpdatedColumnBlocks);\n+        }\n+        return maskDeletedRowsFunction.apply(fromFieldBlocks(\n+                page.getPositionCount(),\n+                Optional.empty(),\n+                blocks));\n+    }\n+\n+    /**\n+     * Project expects the page to begin with the update dependencies, followed by\n+     * the \"rowId\" column.  Remove columns from the page if they are not\n+     * update dependencies.\n+     */\n+    public Page removeNonDependencyColumns(Page page, List<HiveColumnHandle> dependencyColumns)\n+    {\n+        List<Integer> dependencyChannels = makeDependencyChannelNumbers(dependencyColumns);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDAzNA==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537130034", "createdAt": "2020-12-06T21:42:41Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableList.Builder<Integer> dependencyIndexBuilder = ImmutableList.builder();\n+        int dependencyIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (dependencyColumns.contains(handle)) {\n+                dependencyIndexBuilder.add(dependencyIndex++);\n+            }\n+            else if (nonUpdatedColumns.contains(handle)) {\n+                dependencyIndex++;\n+            }\n+        }\n+        return dependencyIndexBuilder.build();\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getAllDataColumns()\n+    {\n+        return allDataColumns;\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getUpdatedColumns()\n+    {\n+        return updatedColumns;\n+    }\n+\n+    @JsonIgnore\n+    public List<HiveColumnHandle> getNonUpdatedColumns()\n+    {\n+        return nonUpdatedColumns;\n+    }\n+\n+    /**\n+     * Merge the non-updated columns with the update dependencies, in allDataColumns order,\n+     * and finally add the rowId column as the last dependency.\n+     */\n+    public List<HiveColumnHandle> mergeWithNonUpdatedColumns(List<HiveColumnHandle> updateDependencies)\n+    {\n+        ImmutableList.Builder<HiveColumnHandle> builder = ImmutableList.builder();\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle) || updateDependencies.contains(handle)) {\n+                builder.add(handle);\n+            }\n+        }\n+        // The last updateDependency is the rowId column\n+        builder.add(updateDependencies.get(updateDependencies.size() - 1));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Create a RowBlock containing four children: the three ACID columns - - originalTransaction,\n+     * rowId, bucket - - and a RowBlock containing all the data columns not changed\n+     * by the UPDATE statement.\n+     */\n+    public Block createUpdateRowBlock(Page page, List<HiveColumnHandle> updateDependencies, OrcDeletedRows.MaskDeletedRowsFunction maskDeletedRowsFunction)\n+    {\n+        requireNonNull(page, \"page is null\");\n+        requireNonNull(updateDependencies, \"updateDependencies is null\");\n+        Map<HiveColumnHandle, Integer> nonUpdatedChannelNumbers = makeNonUpdatedChannelNumbers(updateDependencies);\n+        int acidBlocks = 3;\n+        checkArgument(page.getChannelCount() >= acidBlocks + nonUpdatedColumns.size(), \"page doesn't have enough columns\");\n+\n+        Block[] blocks = new Block[nonUpdatedColumns.isEmpty() ? acidBlocks : acidBlocks + 1];\n+        blocks[ORIGINAL_TRANSACTION_CHANNEL] = page.getBlock(ORIGINAL_TRANSACTION_CHANNEL);\n+        blocks[ROW_ID_CHANNEL] = page.getBlock(ROW_ID_CHANNEL);\n+        blocks[BUCKET_CHANNEL] = page.getBlock(BUCKET_CHANNEL);\n+\n+        if (!nonUpdatedColumns.isEmpty()) {\n+            Block[] nonUpdatedColumnBlocks = new Block[getNonUpdatedColumns().size()];\n+            int offset = 0;\n+            for (HiveColumnHandle handle : getNonUpdatedColumns()) {\n+                Integer sourceChannel = nonUpdatedChannelNumbers.get(handle);\n+                requireNonNull(sourceChannel, \"sourceChannel is null\");\n+                nonUpdatedColumnBlocks[offset] = page.getBlock(acidBlocks + sourceChannel);\n+                offset++;\n+            }\n+            blocks[ROW_CHANNEL] = RowBlock.fromFieldBlocks(page.getPositionCount(), Optional.empty(), nonUpdatedColumnBlocks);\n+        }\n+        return maskDeletedRowsFunction.apply(fromFieldBlocks(\n+                page.getPositionCount(),\n+                Optional.empty(),\n+                blocks));\n+    }\n+\n+    /**\n+     * Project expects the page to begin with the update dependencies, followed by\n+     * the \"rowId\" column.  Remove columns from the page if they are not\n+     * update dependencies.\n+     */\n+    public Page removeNonDependencyColumns(Page page, List<HiveColumnHandle> dependencyColumns)\n+    {\n+        List<Integer> dependencyChannels = makeDependencyChannelNumbers(dependencyColumns);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTE1OA=="}, "originalCommit": null, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTE3MDU0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxOTo1MDoxMVrOIAAowg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0Mjo0NFrOIAP0QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTM0Ng==", "bodyText": "Same comments as above", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536881346", "createdAt": "2020-12-05T19:50:11Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDA0OQ==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537130049", "createdAt": "2020-12-06T21:42:44Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTM0Ng=="}, "originalCommit": null, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTE3Mjc3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxOTo1MTo0NVrOIAApuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0Mjo1MVrOIAP0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTU5NQ==", "bodyText": "Using contains on a list is O(n), and I don't like relying on the equality semantics of HiveColumnHandle here. It's probably better to put the column names into a set.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536881595", "createdAt": "2020-12-05T19:51:45Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDA1OQ==", "bodyText": "I changed everything that does .contains() or .containsAll() to be a Set, and precomputed the required Sets and Map.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537130059", "createdAt": "2020-12-06T21:42:51Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTU5NQ=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTE3NTc5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxOTo1NDowMVrOIAArDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0Mjo1N1rOIAP0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTkzNQ==", "bodyText": "Rather than doing map lookups by column handle for every page, we could compute the list of the source channels up front.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536881935", "createdAt": "2020-12-05T19:54:01Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableList.Builder<Integer> dependencyIndexBuilder = ImmutableList.builder();\n+        int dependencyIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (dependencyColumns.contains(handle)) {\n+                dependencyIndexBuilder.add(dependencyIndex++);\n+            }\n+            else if (nonUpdatedColumns.contains(handle)) {\n+                dependencyIndex++;\n+            }\n+        }\n+        return dependencyIndexBuilder.build();\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getAllDataColumns()\n+    {\n+        return allDataColumns;\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getUpdatedColumns()\n+    {\n+        return updatedColumns;\n+    }\n+\n+    @JsonIgnore\n+    public List<HiveColumnHandle> getNonUpdatedColumns()\n+    {\n+        return nonUpdatedColumns;\n+    }\n+\n+    /**\n+     * Merge the non-updated columns with the update dependencies, in allDataColumns order,\n+     * and finally add the rowId column as the last dependency.\n+     */\n+    public List<HiveColumnHandle> mergeWithNonUpdatedColumns(List<HiveColumnHandle> updateDependencies)\n+    {\n+        ImmutableList.Builder<HiveColumnHandle> builder = ImmutableList.builder();\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle) || updateDependencies.contains(handle)) {\n+                builder.add(handle);\n+            }\n+        }\n+        // The last updateDependency is the rowId column\n+        builder.add(updateDependencies.get(updateDependencies.size() - 1));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Create a RowBlock containing four children: the three ACID columns - - originalTransaction,\n+     * rowId, bucket - - and a RowBlock containing all the data columns not changed\n+     * by the UPDATE statement.\n+     */\n+    public Block createUpdateRowBlock(Page page, List<HiveColumnHandle> updateDependencies, OrcDeletedRows.MaskDeletedRowsFunction maskDeletedRowsFunction)\n+    {\n+        requireNonNull(page, \"page is null\");\n+        requireNonNull(updateDependencies, \"updateDependencies is null\");\n+        Map<HiveColumnHandle, Integer> nonUpdatedChannelNumbers = makeNonUpdatedChannelNumbers(updateDependencies);\n+        int acidBlocks = 3;\n+        checkArgument(page.getChannelCount() >= acidBlocks + nonUpdatedColumns.size(), \"page doesn't have enough columns\");\n+\n+        Block[] blocks = new Block[nonUpdatedColumns.isEmpty() ? acidBlocks : acidBlocks + 1];\n+        blocks[ORIGINAL_TRANSACTION_CHANNEL] = page.getBlock(ORIGINAL_TRANSACTION_CHANNEL);\n+        blocks[ROW_ID_CHANNEL] = page.getBlock(ROW_ID_CHANNEL);\n+        blocks[BUCKET_CHANNEL] = page.getBlock(BUCKET_CHANNEL);\n+\n+        if (!nonUpdatedColumns.isEmpty()) {\n+            Block[] nonUpdatedColumnBlocks = new Block[getNonUpdatedColumns().size()];\n+            int offset = 0;\n+            for (HiveColumnHandle handle : getNonUpdatedColumns()) {\n+                Integer sourceChannel = nonUpdatedChannelNumbers.get(handle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDA3MA==", "bodyText": "Done, and much nicer.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537130070", "createdAt": "2020-12-06T21:42:57Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);\n+            }\n+            else if (dependencyColumns.contains(handle)) {\n+                nonUpdatedIndex++;\n+            }\n+        }\n+        return nonUpdatedNumbersBuilder.build();\n+    }\n+\n+    private List<Integer> makeDependencyChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableList.Builder<Integer> dependencyIndexBuilder = ImmutableList.builder();\n+        int dependencyIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (dependencyColumns.contains(handle)) {\n+                dependencyIndexBuilder.add(dependencyIndex++);\n+            }\n+            else if (nonUpdatedColumns.contains(handle)) {\n+                dependencyIndex++;\n+            }\n+        }\n+        return dependencyIndexBuilder.build();\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getAllDataColumns()\n+    {\n+        return allDataColumns;\n+    }\n+\n+    @JsonProperty\n+    public List<HiveColumnHandle> getUpdatedColumns()\n+    {\n+        return updatedColumns;\n+    }\n+\n+    @JsonIgnore\n+    public List<HiveColumnHandle> getNonUpdatedColumns()\n+    {\n+        return nonUpdatedColumns;\n+    }\n+\n+    /**\n+     * Merge the non-updated columns with the update dependencies, in allDataColumns order,\n+     * and finally add the rowId column as the last dependency.\n+     */\n+    public List<HiveColumnHandle> mergeWithNonUpdatedColumns(List<HiveColumnHandle> updateDependencies)\n+    {\n+        ImmutableList.Builder<HiveColumnHandle> builder = ImmutableList.builder();\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle) || updateDependencies.contains(handle)) {\n+                builder.add(handle);\n+            }\n+        }\n+        // The last updateDependency is the rowId column\n+        builder.add(updateDependencies.get(updateDependencies.size() - 1));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Create a RowBlock containing four children: the three ACID columns - - originalTransaction,\n+     * rowId, bucket - - and a RowBlock containing all the data columns not changed\n+     * by the UPDATE statement.\n+     */\n+    public Block createUpdateRowBlock(Page page, List<HiveColumnHandle> updateDependencies, OrcDeletedRows.MaskDeletedRowsFunction maskDeletedRowsFunction)\n+    {\n+        requireNonNull(page, \"page is null\");\n+        requireNonNull(updateDependencies, \"updateDependencies is null\");\n+        Map<HiveColumnHandle, Integer> nonUpdatedChannelNumbers = makeNonUpdatedChannelNumbers(updateDependencies);\n+        int acidBlocks = 3;\n+        checkArgument(page.getChannelCount() >= acidBlocks + nonUpdatedColumns.size(), \"page doesn't have enough columns\");\n+\n+        Block[] blocks = new Block[nonUpdatedColumns.isEmpty() ? acidBlocks : acidBlocks + 1];\n+        blocks[ORIGINAL_TRANSACTION_CHANNEL] = page.getBlock(ORIGINAL_TRANSACTION_CHANNEL);\n+        blocks[ROW_ID_CHANNEL] = page.getBlock(ROW_ID_CHANNEL);\n+        blocks[BUCKET_CHANNEL] = page.getBlock(BUCKET_CHANNEL);\n+\n+        if (!nonUpdatedColumns.isEmpty()) {\n+            Block[] nonUpdatedColumnBlocks = new Block[getNonUpdatedColumns().size()];\n+            int offset = 0;\n+            for (HiveColumnHandle handle : getNonUpdatedColumns()) {\n+                Integer sourceChannel = nonUpdatedChannelNumbers.get(handle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTkzNQ=="}, "originalCommit": null, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTE3OTEyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/PartitionAndStatementId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxOTo1NjoyM1rOIAAsiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MzowMVrOIAP0Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjMxNQ==", "bodyText": "return deltaDirectory\n        .map(directory -> ImmutableList.of(deleteDeltaDirectory, directory))\n        .orElseGet(() -> ImmutableList.of(deleteDeltaDirectory));", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536882315", "createdAt": "2020-12-05T19:56:23Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/PartitionAndStatementId.java", "diffHunk": "@@ -67,6 +74,23 @@ public String getDeleteDeltaDirectory()\n         return deleteDeltaDirectory;\n     }\n \n+    @JsonProperty\n+    public Optional<String> getDeltaDirectory()\n+    {\n+        return deltaDirectory;\n+    }\n+\n+    @JsonIgnore\n+    public List<String> getAllDirectories()\n+    {\n+        if (deltaDirectory.isPresent()) {\n+            return ImmutableList.of(deleteDeltaDirectory, deltaDirectory.get());\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDA3NQ==", "bodyText": "Nice!   Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537130075", "createdAt": "2020-12-06T21:43:01Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/PartitionAndStatementId.java", "diffHunk": "@@ -67,6 +74,23 @@ public String getDeleteDeltaDirectory()\n         return deleteDeltaDirectory;\n     }\n \n+    @JsonProperty\n+    public Optional<String> getDeltaDirectory()\n+    {\n+        return deltaDirectory;\n+    }\n+\n+    @JsonIgnore\n+    public List<String> getAllDirectories()\n+    {\n+        if (deltaDirectory.isPresent()) {\n+            return ImmutableList.of(deleteDeltaDirectory, deltaDirectory.get());\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjMxNQ=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTE5MTk1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMDowNToyOVrOIAAyGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MzowN1rOIAP0ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MzczOQ==", "bodyText": "Can this be\n.flatMap(ps -> ps.getAllDirectories().stream())\n.forEach(directory -> ...)", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536883739", "createdAt": "2020-12-05T20:05:29Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -1625,6 +1693,33 @@ private void prepareDeleteRowsFromExistingTable(HdfsContext context, TableAndMor\n             updateTableWriteId(identity, databaseName, tableName, transactionId, writeId, OptionalLong.of(-totalRowsDeleted));\n         }\n \n+        private void prepareUpdateExistingTable(HdfsContext context, TableAndMore tableAndMore)\n+        {\n+            TableAndAcidDirectories updateState = (TableAndAcidDirectories) tableAndMore;\n+            List<PartitionAndStatementId> partitionAndStatementIds = updateState.getPartitionAndStatementIds();\n+            checkArgument(!partitionAndStatementIds.isEmpty(), \"partitionAndStatementIds is empty\");\n+\n+            Table table = updateState.getTable();\n+            checkArgument(currentHiveTransaction.isPresent(), \"currentHiveTransaction isn't present\");\n+            AcidTransaction transaction = currentHiveTransaction.get().getTransaction();\n+            checkArgument(transaction.isUpdate(), \"transaction should be update, but is %s\", transaction);\n+\n+            updateState.getPartitionAndStatementIds().stream()\n+                    .map(ps -> ps.getAllDirectories())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDA4NA==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537130084", "createdAt": "2020-12-06T21:43:07Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -1625,6 +1693,33 @@ private void prepareDeleteRowsFromExistingTable(HdfsContext context, TableAndMor\n             updateTableWriteId(identity, databaseName, tableName, transactionId, writeId, OptionalLong.of(-totalRowsDeleted));\n         }\n \n+        private void prepareUpdateExistingTable(HdfsContext context, TableAndMore tableAndMore)\n+        {\n+            TableAndAcidDirectories updateState = (TableAndAcidDirectories) tableAndMore;\n+            List<PartitionAndStatementId> partitionAndStatementIds = updateState.getPartitionAndStatementIds();\n+            checkArgument(!partitionAndStatementIds.isEmpty(), \"partitionAndStatementIds is empty\");\n+\n+            Table table = updateState.getTable();\n+            checkArgument(currentHiveTransaction.isPresent(), \"currentHiveTransaction isn't present\");\n+            AcidTransaction transaction = currentHiveTransaction.get().getTransaction();\n+            checkArgument(transaction.isUpdate(), \"transaction should be update, but is %s\", transaction);\n+\n+            updateState.getPartitionAndStatementIds().stream()\n+                    .map(ps -> ps.getAllDirectories())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MzczOQ=="}, "originalCommit": null, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTE5Mjc4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMDowNjowNVrOIAAyeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MzoxMFrOIAP0ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MzgzNA==", "bodyText": "Add trailing comma", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536883834", "createdAt": "2020-12-05T20:06:05Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -2462,7 +2557,8 @@ private void checkHoldsLock()\n         ADD,\n         ALTER,\n         INSERT_EXISTING,\n-        DELETE_ROWS\n+        DELETE_ROWS,\n+        UPDATE", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDA5MA==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537130090", "createdAt": "2020-12-06T21:43:10Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -2462,7 +2557,8 @@ private void checkHoldsLock()\n         ADD,\n         ALTER,\n         INSERT_EXISTING,\n-        DELETE_ROWS\n+        DELETE_ROWS,\n+        UPDATE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MzgzNA=="}, "originalCommit": null, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTI2OTY2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/orc/OrcPageSourceFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTowNDowMlrOIABT1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MzoxNlrOIAP0ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5MjM3NA==", "bodyText": "Use method reference", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536892374", "createdAt": "2020-12-05T21:04:02Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/orc/OrcPageSourceFactory.java", "diffHunk": "@@ -399,6 +404,13 @@ else if (column.getBaseHiveColumnIndex() < fileColumns.size()) {\n                     columnAdaptations.add(ColumnAdaptation.rowIdColumn());\n                 }\n             }\n+            else if (transaction.isUpdate()) {\n+                checkArgument(updateProcessor.isPresent(), \"updateProcessor isn't present\");\n+                List<HiveColumnHandle> dependencyColumns = projections.stream()\n+                        .filter(projection -> projection.isBaseColumn())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDEwNw==", "bodyText": "Replaced.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537130107", "createdAt": "2020-12-06T21:43:16Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/orc/OrcPageSourceFactory.java", "diffHunk": "@@ -399,6 +404,13 @@ else if (column.getBaseHiveColumnIndex() < fileColumns.size()) {\n                     columnAdaptations.add(ColumnAdaptation.rowIdColumn());\n                 }\n             }\n+            else if (transaction.isUpdate()) {\n+                checkArgument(updateProcessor.isPresent(), \"updateProcessor isn't present\");\n+                List<HiveColumnHandle> dependencyColumns = projections.stream()\n+                        .filter(projection -> projection.isBaseColumn())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5MjM3NA=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDg1NzA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/UpdateNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo1NzowOVrOIAtq_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0Njo0M1rOIBFqGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxOTE5OA==", "bodyText": "Given #5861 (comment), add some validation to ensure the list of columns in target is the same size as the updatedColumnValueSymbols", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537619198", "createdAt": "2020-12-07T15:57:09Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/UpdateNode.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.plan;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TableWriterNode.UpdateTarget;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Immutable\n+public class UpdateNode\n+        extends PlanNode\n+{\n+    private final PlanNode source;\n+    private final UpdateTarget target;\n+    private final Symbol rowId;\n+    private final List<Symbol> updatedColumnValueSymbols;\n+    private final List<Symbol> outputs;\n+\n+    @JsonCreator\n+    public UpdateNode(\n+            @JsonProperty(\"id\") PlanNodeId id,\n+            @JsonProperty(\"source\") PlanNode source,\n+            @JsonProperty(\"target\") UpdateTarget target,\n+            @JsonProperty(\"rowId\") Symbol rowId,\n+            @JsonProperty(\"updatedColumnValueSymbols\") List<Symbol> updatedColumnValueSymbols,\n+            @JsonProperty(\"outputs\") List<Symbol> outputs)\n+    {\n+        super(id);\n+\n+        this.source = requireNonNull(source, \"source is null\");\n+        this.target = requireNonNull(target, \"target is null\");\n+        this.rowId = requireNonNull(rowId, \"rowId is null\");\n+        this.updatedColumnValueSymbols = ImmutableList.copyOf(requireNonNull(updatedColumnValueSymbols, \"updatedColumnValueSymbols is null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMjE4NQ==", "bodyText": "I added a check to ensure they have the same sizes.  I also renamed the list of symbols and the corresponding list of channels to be the more accurate columnValueAndRowIdSymbols / columnValueAndRowIdChannels.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r538012185", "createdAt": "2020-12-08T03:46:43Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/UpdateNode.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.plan;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TableWriterNode.UpdateTarget;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Immutable\n+public class UpdateNode\n+        extends PlanNode\n+{\n+    private final PlanNode source;\n+    private final UpdateTarget target;\n+    private final Symbol rowId;\n+    private final List<Symbol> updatedColumnValueSymbols;\n+    private final List<Symbol> outputs;\n+\n+    @JsonCreator\n+    public UpdateNode(\n+            @JsonProperty(\"id\") PlanNodeId id,\n+            @JsonProperty(\"source\") PlanNode source,\n+            @JsonProperty(\"target\") UpdateTarget target,\n+            @JsonProperty(\"rowId\") Symbol rowId,\n+            @JsonProperty(\"updatedColumnValueSymbols\") List<Symbol> updatedColumnValueSymbols,\n+            @JsonProperty(\"outputs\") List<Symbol> outputs)\n+    {\n+        super(id);\n+\n+        this.source = requireNonNull(source, \"source is null\");\n+        this.target = requireNonNull(target, \"target is null\");\n+        this.rowId = requireNonNull(rowId, \"rowId is null\");\n+        this.updatedColumnValueSymbols = ImmutableList.copyOf(requireNonNull(updatedColumnValueSymbols, \"updatedColumnValueSymbols is null\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxOTE5OA=="}, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDg5MTkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjowMzo1MFrOIAt_-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzo0Njo0MFrOIBFqBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyNDU3MA==", "bodyText": "In #5861 (comment), you mentioned that the list of columns in UpdateTarget needs to have the same order as updatedColumnValues. However, now this is a Map, so the order is not guaranteed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537624570", "createdAt": "2020-12-07T16:03:50Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +474,65 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create a list of column SET expressions, in table column order\n+        ImmutableList.Builder<Expression> orderedColumnValuesBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index >= 0) {\n+                orderedColumnValuesBuilder.add(node.getAssignments().get(index).getValue());\n+            }\n+        }\n+        List<Expression> orderedColumnValues = orderedColumnValuesBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedColumnValues, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedColumnValues, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+\n+        ImmutableList.Builder<Symbol> updatedColumnValuesBuilder = ImmutableList.builder();\n+        orderedColumnValues.forEach(columnValue -> updatedColumnValuesBuilder.add(planAndMappings.get(columnValue)));\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+        updatedColumnValuesBuilder.add(rowId);\n+        List<Symbol> updatedColumnValues = updatedColumnValuesBuilder.build();\n+\n+        Map<String, ColumnHandle> updatedColumns = dataColumnHandles.entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAxMjE2NQ==", "bodyText": "I'm glad you pushed on this @martint!  I rewrote this code to use Lists exclusively, avoiding the Map order hazard.  I also did some renaming to make the usage more obvious.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r538012165", "createdAt": "2020-12-08T03:46:40Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +474,65 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create a list of column SET expressions, in table column order\n+        ImmutableList.Builder<Expression> orderedColumnValuesBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index >= 0) {\n+                orderedColumnValuesBuilder.add(node.getAssignments().get(index).getValue());\n+            }\n+        }\n+        List<Expression> orderedColumnValues = orderedColumnValuesBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedColumnValues, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedColumnValues, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+\n+        ImmutableList.Builder<Symbol> updatedColumnValuesBuilder = ImmutableList.builder();\n+        orderedColumnValues.forEach(columnValue -> updatedColumnValuesBuilder.add(planAndMappings.get(columnValue)));\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+        updatedColumnValuesBuilder.add(rowId);\n+        List<Symbol> updatedColumnValues = updatedColumnValuesBuilder.build();\n+\n+        Map<String, ColumnHandle> updatedColumns = dataColumnHandles.entrySet().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyNDU3MA=="}, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTk1NzIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/TableWriterNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozMTowMVrOIBvpzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1Mzo1MVrOIBw2kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMDIzOQ==", "bodyText": "Verify that updateColumns and updatedColumnHandles have the same length.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r538700239", "createdAt": "2020-12-08T18:31:01Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/TableWriterNode.java", "diffHunk": "@@ -451,4 +452,56 @@ public String toString()\n             return handle.toString();\n         }\n     }\n+\n+    public static class UpdateTarget\n+            extends WriterTarget\n+    {\n+        private final TableHandle handle;\n+        private final SchemaTableName schemaTableName;\n+        private final List<String> updatedColumns;\n+        private final List<ColumnHandle> updatedColumnHandles;\n+\n+        @JsonCreator\n+        public UpdateTarget(\n+                @JsonProperty(\"handle\") TableHandle handle,\n+                @JsonProperty(\"schemaTableName\") SchemaTableName schemaTableName,\n+                @JsonProperty(\"updatedColumns\") List<String> updatedColumns,\n+                @JsonProperty(\"updatedColumnHandles\") List<ColumnHandle> updatedColumnHandles)\n+        {\n+            this.handle = requireNonNull(handle, \"handle is null\");\n+            this.schemaTableName = requireNonNull(schemaTableName, \"schemaTableName is null\");\n+            this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+            this.updatedColumnHandles = requireNonNull(updatedColumnHandles, \"updatedColumnHandles is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxOTg4OA==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r538719888", "createdAt": "2020-12-08T18:53:51Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/TableWriterNode.java", "diffHunk": "@@ -451,4 +452,56 @@ public String toString()\n             return handle.toString();\n         }\n     }\n+\n+    public static class UpdateTarget\n+            extends WriterTarget\n+    {\n+        private final TableHandle handle;\n+        private final SchemaTableName schemaTableName;\n+        private final List<String> updatedColumns;\n+        private final List<ColumnHandle> updatedColumnHandles;\n+\n+        @JsonCreator\n+        public UpdateTarget(\n+                @JsonProperty(\"handle\") TableHandle handle,\n+                @JsonProperty(\"schemaTableName\") SchemaTableName schemaTableName,\n+                @JsonProperty(\"updatedColumns\") List<String> updatedColumns,\n+                @JsonProperty(\"updatedColumnHandles\") List<ColumnHandle> updatedColumnHandles)\n+        {\n+            this.handle = requireNonNull(handle, \"handle is null\");\n+            this.schemaTableName = requireNonNull(schemaTableName, \"schemaTableName is null\");\n+            this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+            this.updatedColumnHandles = requireNonNull(updatedColumnHandles, \"updatedColumnHandles is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMDIzOQ=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDAxMzM2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDo1NDo0OFrOIDc4Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMTo1Njo1OFrOIGoJRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4OTc4Mg==", "bodyText": "The base file and delta files can coexist as well before the subsequent compaction. Is that handled?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r540489782", "createdAt": "2020-12-10T20:54:48Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -114,36 +131,58 @@ public HiveUpdatablePageSource(\n         this.hiveRowTypeNullsBlock = nativeValueToBlock(hiveRowType.getType(typeManager), null);\n         checkArgument(hiveTableHandle.isInAcidTransaction(), \"Not in a transaction; hiveTableHandle: %s\", hiveTableHandle);\n         this.writeId = hiveTableHandle.getWriteId();\n+        this.updateKind = requireNonNull(updateKind, \"updateKind is null\");\n         this.hiveAcidSchema = createAcidSchema(hiveRowType);\n         requireNonNull(bucketPath, \"bucketPath is null\");\n+        Matcher matcher;\n         if (originalFile) {\n-            Matcher matcher = ORIGINAL_FILE_PATH_MATCHER.matcher(bucketPath.toString());\n+            matcher = ORIGINAL_FILE_PATH_MATCHER.matcher(bucketPath.toString());\n             checkArgument(matcher.matches(), \"Original file bucketPath doesn't have the required format: %s\", bucketPath);\n             this.bucketFilename = format(\"bucket_%05d\", bucketNumber.isEmpty() ? 0 : bucketNumber.getAsInt());\n-            this.deleteDeltaDirectory = new Path(format(\"%s/%s\", matcher.group(\"rootDir\"), deleteDeltaSubdir(writeId, writeId, statementId)));\n         }\n         else {\n-            Matcher matcher = BUCKET_PATH_MATCHER.matcher(bucketPath.toString());\n-            checkArgument(matcher.matches(), \"bucketPath doesn't have the required format: %s\", bucketPath);\n-            // delete_delta bucket files should not have attemptId suffix\n-            this.bucketFilename = matcher.group(\"filenameBase\");\n-            this.deleteDeltaDirectory = new Path(format(\"%s/%s\", matcher.group(\"rootDir\"), deleteDeltaSubdir(writeId, writeId, statementId)));\n+            matcher = BASE_PATH_MATCHER.matcher(bucketPath.toString());\n+            if (matcher.matches()) {\n+                this.bucketFilename = matcher.group(\"filenameBase\");\n+            }\n+            else {\n+                matcher = BUCKET_PATH_MATCHER.matcher(bucketPath.toString());\n+                checkArgument(matcher.matches(), \"bucketPath doesn't have the required format: %s\", bucketPath);\n+                this.bucketFilename = matcher.group(\"filenameBase\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgyMDEwMg==", "bodyText": "It's a good point.  I just updated product test TestHiveTransactionalTable.testAcidUpdateMajorCompaction to add a series of operations that create more delta files in addition to the compacted base image, showing that they can coexist.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r543820102", "createdAt": "2020-12-16T01:56:58Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -114,36 +131,58 @@ public HiveUpdatablePageSource(\n         this.hiveRowTypeNullsBlock = nativeValueToBlock(hiveRowType.getType(typeManager), null);\n         checkArgument(hiveTableHandle.isInAcidTransaction(), \"Not in a transaction; hiveTableHandle: %s\", hiveTableHandle);\n         this.writeId = hiveTableHandle.getWriteId();\n+        this.updateKind = requireNonNull(updateKind, \"updateKind is null\");\n         this.hiveAcidSchema = createAcidSchema(hiveRowType);\n         requireNonNull(bucketPath, \"bucketPath is null\");\n+        Matcher matcher;\n         if (originalFile) {\n-            Matcher matcher = ORIGINAL_FILE_PATH_MATCHER.matcher(bucketPath.toString());\n+            matcher = ORIGINAL_FILE_PATH_MATCHER.matcher(bucketPath.toString());\n             checkArgument(matcher.matches(), \"Original file bucketPath doesn't have the required format: %s\", bucketPath);\n             this.bucketFilename = format(\"bucket_%05d\", bucketNumber.isEmpty() ? 0 : bucketNumber.getAsInt());\n-            this.deleteDeltaDirectory = new Path(format(\"%s/%s\", matcher.group(\"rootDir\"), deleteDeltaSubdir(writeId, writeId, statementId)));\n         }\n         else {\n-            Matcher matcher = BUCKET_PATH_MATCHER.matcher(bucketPath.toString());\n-            checkArgument(matcher.matches(), \"bucketPath doesn't have the required format: %s\", bucketPath);\n-            // delete_delta bucket files should not have attemptId suffix\n-            this.bucketFilename = matcher.group(\"filenameBase\");\n-            this.deleteDeltaDirectory = new Path(format(\"%s/%s\", matcher.group(\"rootDir\"), deleteDeltaSubdir(writeId, writeId, statementId)));\n+            matcher = BASE_PATH_MATCHER.matcher(bucketPath.toString());\n+            if (matcher.matches()) {\n+                this.bucketFilename = matcher.group(\"filenameBase\");\n+            }\n+            else {\n+                matcher = BUCKET_PATH_MATCHER.matcher(bucketPath.toString());\n+                checkArgument(matcher.matches(), \"bucketPath doesn't have the required format: %s\", bucketPath);\n+                this.bucketFilename = matcher.group(\"filenameBase\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4OTc4Mg=="}, "originalCommit": null, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDAxNDc1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDo1NTowOVrOIDc5BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMTo1NzowMVrOIGoJWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4OTk4OQ==", "bodyText": "nit: s/compaction/major compaction/g\nMinor compaction does not create the base directory", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r540489989", "createdAt": "2020-12-10T20:55:09Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -62,13 +67,18 @@\n     public static final int ORIGINAL_TRANSACTION_CHANNEL = 0;\n     public static final int ROW_ID_CHANNEL = 1;\n     public static final int BUCKET_CHANNEL = 2;\n+    // Used for UPDATE operations\n+    public static final int ROW_CHANNEL = 3;\n     public static final int ACID_ROW_STRUCT_COLUMN_ID = 6;\n     public static final Block DELETE_OPERATION_BLOCK = nativeValueToBlock(INTEGER, Long.valueOf(DELETE.getOperationNumber()));\n+    public static final Block INSERT_OPERATION_BLOCK = nativeValueToBlock(INTEGER, Long.valueOf(INSERT.getOperationNumber()));\n \n     // The bucketPath looks like .../delta_nnnnnnn_mmmmmmm_ssss/bucket_bbbbb(_aaaa)?\n     public static final Pattern BUCKET_PATH_MATCHER = Pattern.compile(\"(?s)(?<rootDir>.*)/(?<dirStart>delta_[\\\\d]+_[\\\\d]+)_(?<statementId>[\\\\d]+)/(?<filenameBase>bucket_(?<bucketNumber>[\\\\d]+))(?<attemptId>_[\\\\d]+)?$\");\n     // The orignal file path looks like .../nnnnnnn_m(_copy_ccc)?\n     public static final Pattern ORIGINAL_FILE_PATH_MATCHER = Pattern.compile(\"(?s)(?<rootDir>.*)/(?<filename>(?<bucketNumber>[\\\\d]+)_(?<rest>.*)?)$\");\n+    // After compaction, the bucketPath looks like .../base_nnnnnnn/bucket_bbbbb(_aaaa)?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgyMDEyMw==", "bodyText": "Replaced.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r543820123", "createdAt": "2020-12-16T01:57:01Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -62,13 +67,18 @@\n     public static final int ORIGINAL_TRANSACTION_CHANNEL = 0;\n     public static final int ROW_ID_CHANNEL = 1;\n     public static final int BUCKET_CHANNEL = 2;\n+    // Used for UPDATE operations\n+    public static final int ROW_CHANNEL = 3;\n     public static final int ACID_ROW_STRUCT_COLUMN_ID = 6;\n     public static final Block DELETE_OPERATION_BLOCK = nativeValueToBlock(INTEGER, Long.valueOf(DELETE.getOperationNumber()));\n+    public static final Block INSERT_OPERATION_BLOCK = nativeValueToBlock(INTEGER, Long.valueOf(INSERT.getOperationNumber()));\n \n     // The bucketPath looks like .../delta_nnnnnnn_mmmmmmm_ssss/bucket_bbbbb(_aaaa)?\n     public static final Pattern BUCKET_PATH_MATCHER = Pattern.compile(\"(?s)(?<rootDir>.*)/(?<dirStart>delta_[\\\\d]+_[\\\\d]+)_(?<statementId>[\\\\d]+)/(?<filenameBase>bucket_(?<bucketNumber>[\\\\d]+))(?<attemptId>_[\\\\d]+)?$\");\n     // The orignal file path looks like .../nnnnnnn_m(_copy_ccc)?\n     public static final Pattern ORIGINAL_FILE_PATH_MATCHER = Pattern.compile(\"(?s)(?<rootDir>.*)/(?<filename>(?<bucketNumber>[\\\\d]+)_(?<rest>.*)?)$\");\n+    // After compaction, the bucketPath looks like .../base_nnnnnnn/bucket_bbbbb(_aaaa)?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4OTk4OQ=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjc2ODgyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzowMzoyMFrOIGj7aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMTo1NzoyMFrOIGoKAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1MTAxOQ==", "bodyText": "Optional third argument targetTable expected", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r543751019", "createdAt": "2020-12-15T23:03:20Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1785,6 +1813,105 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, assignment.getName(), \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating a table with a row filter is not supported\");\n+            }\n+\n+            // TODO: how to deal with connectors that need to see the pre-image of rows to perform the update without\n+            //       flowing that data through the masking logic\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Updating a table with column masks is not supported\");\n+                }\n+            }\n+\n+            List<ColumnMetadata> updatedColumns = allColumns.stream()\n+                    .filter(column -> assignmentTargets.contains(column.getName()))\n+                    .collect(toImmutableList());\n+            analysis.setUpdateType(\"UPDATE\", tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgyMDI4OA==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r543820288", "createdAt": "2020-12-16T01:57:20Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1785,6 +1813,105 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, assignment.getName(), \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating a table with a row filter is not supported\");\n+            }\n+\n+            // TODO: how to deal with connectors that need to see the pre-image of rows to perform the update without\n+            //       flowing that data through the masking logic\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Updating a table with column masks is not supported\");\n+                }\n+            }\n+\n+            List<ColumnMetadata> updatedColumns = allColumns.stream()\n+                    .filter(column -> assignmentTargets.contains(column.getName()))\n+                    .collect(toImmutableList());\n+            analysis.setUpdateType(\"UPDATE\", tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1MTAxOQ=="}, "originalCommit": null, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4ODI3MTIyOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/connector/UpdatablePageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QxMzo0MjoyOFrOI7zX2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QxMzo0MjoyOFrOI7zX2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU3ODU4Ng==", "bodyText": "Add some info how this list should be decomposed, perhaps as a javadoc", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r599578586", "createdAt": "2021-03-23T13:42:28Z", "author": {"login": "findepi"}, "path": "core/trino-spi/src/main/java/io/trino/spi/connector/UpdatablePageSource.java", "diffHunk": "@@ -14,15 +14,25 @@\n package io.trino.spi.connector;\n \n import io.airlift.slice.Slice;\n+import io.trino.spi.Page;\n import io.trino.spi.block.Block;\n \n import java.util.Collection;\n+import java.util.List;\n import java.util.concurrent.CompletableFuture;\n \n public interface UpdatablePageSource\n         extends ConnectorPageSource\n {\n-    void deleteRows(Block rowIds);\n+    default void deleteRows(Block rowIds)\n+    {\n+        throw new UnsupportedOperationException(\"This connector does not support row-level delete\");\n+    }\n+\n+    default void updateRows(Page page, List<Integer> columnValueAndRowIdChannels)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8e8acbae62b0e1ce361c7184456e945c284c55"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjE2Mjc3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoyMDo1N1rOHu0lsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNjo1OFrOHvB2kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1ODE2MA==", "bodyText": "isUpdateQuery and updateKind should be folded into a single argument. Otherwise, this allows for non-sensical combinations such as isUpdateQuery == false and updateKind == UPDATE.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518858160", "createdAt": "2020-11-06T16:20:57Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -326,12 +331,14 @@ public Scope analyzeForUpdate(Table table, Optional<Scope> outerQueryScope)\n         private final Optional<Scope> outerQueryScope;\n         private final WarningCollector warningCollector;\n         private final boolean isUpdateQuery;\n+        private final UpdateKind updateKind;\n \n-        private Visitor(Optional<Scope> outerQueryScope, WarningCollector warningCollector, boolean isUpdateQuery)\n+        private Visitor(Optional<Scope> outerQueryScope, WarningCollector warningCollector, boolean isUpdateQuery, UpdateKind updateKind)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTQ3NA==", "bodyText": "Good point - - as you suggest below, conveying both intentions in an Optional<UpdateKind> is the right thing, and removes the cursed NO_UPDATE enum value.  Done!", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075474", "createdAt": "2020-11-07T01:16:58Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -326,12 +331,14 @@ public Scope analyzeForUpdate(Table table, Optional<Scope> outerQueryScope)\n         private final Optional<Scope> outerQueryScope;\n         private final WarningCollector warningCollector;\n         private final boolean isUpdateQuery;\n+        private final UpdateKind updateKind;\n \n-        private Visitor(Optional<Scope> outerQueryScope, WarningCollector warningCollector, boolean isUpdateQuery)\n+        private Visitor(Optional<Scope> outerQueryScope, WarningCollector warningCollector, boolean isUpdateQuery, UpdateKind updateKind)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1ODE2MA=="}, "originalCommit": null, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjE2NzQ4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/UpdateKind.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoyMjoxMFrOHu0oqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNzowNVrOHvB2pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1ODkyMw==", "bodyText": "Why is this in the SPI? It's only used as an internal detail of the analyzer.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518858923", "createdAt": "2020-11-06T16:22:10Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/UpdateKind.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+public enum UpdateKind", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTQ5NA==", "bodyText": "It's a leftover from an earlier era of the UPDATE API.  It used to be an argument to ConnectorMetadata.getUpdateRowIdColumnHandle() before we broke that into two different methods, one for DELETE and one for UPDATE.  It's a great point that it doesn't belong in the SPI.  Demoted to be a private enum in StatementAnalyzer.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075494", "createdAt": "2020-11-07T01:17:05Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/UpdateKind.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+public enum UpdateKind", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1ODkyMw=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjE3OTk5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/UpdateKind.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoyNToyNFrOHu0wdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNzoxNlrOHvB2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2MDkxNg==", "bodyText": "Instead of representing \"no update\" a type of update, make callers use an Optional<UpdateKind>. This will also make callsites where an UpdateKind is needed more obvious and coherent. For instance, in:\npublic Scope analyzeForUpdate(Table table, Optional<Scope> outerQueryScope, UpdateKind updateKind)\n\nIt would be wrong or strange to call that method with UpdateKind.NO_UPDATE (and the method would need to check internally for this case).", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518860916", "createdAt": "2020-11-06T16:25:24Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/UpdateKind.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+public enum UpdateKind\n+{\n+    NO_UPDATE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTUxMw==", "bodyText": "Converted to Optional, a much cleaner solution, making the NO_UPDATE enum value vanish.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075513", "createdAt": "2020-11-07T01:17:16Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/UpdateKind.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+public enum UpdateKind\n+{\n+    NO_UPDATE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2MDkxNg=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg5NzE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowMDo1NVrOHu7rOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNzoyNFrOHvB2xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NDI2NA==", "bodyText": "Add a condition to make sure this is UpdateKind.DELETE. Otherwise, this can break in the future if a new value is added to that enum. I might structure it as:\nswitch (updateKind) {\n    case UPDATE: {\n        ...\n        break;\n    }\n    case DELETE: {\n        ...\n        break;\n    }\n    default:\n        throw new UnsupportedOperationException(\"Update kind not supported:\" + updateKind);\n}", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518974264", "createdAt": "2020-11-06T20:00:55Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1243,11 +1250,24 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n \n             if (isUpdateQuery) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumn;\n+                if (updateKind == UpdateKind.UPDATE) {\n+                    Optional<List<ColumnMetadata>> updatedColumnMetadata = analysis.getUpdatedColumns();\n+                    checkArgument(updatedColumnMetadata.isPresent(), \"updatedColumnMetadata isn't present\");\n+                    Set<String> updatedColumnNames = updatedColumnMetadata.get().stream().map(ColumnMetadata::getName).collect(toImmutableSet());\n+                    List<ColumnHandle> updatedColumns = columnHandles.entrySet().stream()\n+                            .filter(entry -> updatedColumnNames.contains(entry.getKey()))\n+                            .map(Map.Entry::getValue)\n+                            .collect(toImmutableList());\n+                    rowIdColumn = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get(), columnHandles, updatedColumns);\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTUyNw==", "bodyText": "Converted to a switch statement.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075527", "createdAt": "2020-11-07T01:17:24Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1243,11 +1250,24 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n \n             if (isUpdateQuery) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumn;\n+                if (updateKind == UpdateKind.UPDATE) {\n+                    Optional<List<ColumnMetadata>> updatedColumnMetadata = analysis.getUpdatedColumns();\n+                    checkArgument(updatedColumnMetadata.isPresent(), \"updatedColumnMetadata isn't present\");\n+                    Set<String> updatedColumnNames = updatedColumnMetadata.get().stream().map(ColumnMetadata::getName).collect(toImmutableSet());\n+                    List<ColumnHandle> updatedColumns = columnHandles.entrySet().stream()\n+                            .filter(entry -> updatedColumnNames.contains(entry.getKey()))\n+                            .map(Map.Entry::getValue)\n+                            .collect(toImmutableList());\n+                    rowIdColumn = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get(), columnHandles, updatedColumns);\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NDI2NA=="}, "originalCommit": null, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjkxMDk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowNTo1M1rOHu7zyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNzozMVrOHvB20w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NjQ1OA==", "bodyText": "Format as:\nSet<String> updatedTargetNames = update.getTargets().stream()\n        .map(Identifier::getValue)\n        .collect(toImmutableSet());", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518976458", "createdAt": "2020-11-06T20:05:53Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1785,93 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, update.getTargets().stream().map(Identifier::getValue).collect(toUnmodifiableSet()));\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns().stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableList());\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getTargets().stream().map(Identifier::getValue).collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTUzOQ==", "bodyText": "Converted.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075539", "createdAt": "2020-11-07T01:17:31Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1785,93 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, update.getTargets().stream().map(Identifier::getValue).collect(toUnmodifiableSet()));\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns().stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableList());\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getTargets().stream().map(Identifier::getValue).collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NjQ1OA=="}, "originalCommit": null, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjkxNjg0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowNzowOVrOHu73bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNzozN1rOHvB21w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NzM5MQ==", "bodyText": "Format as:\nList<ColumnMetadata> updatedColumns = allColumns.stream()\n        .filter(column -> updatedTargetNames.contains(column.getName()))\n        .collect(toImmutableList());", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518977391", "createdAt": "2020-11-06T20:07:09Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1785,93 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, update.getTargets().stream().map(Identifier::getValue).collect(toUnmodifiableSet()));\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns().stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableList());\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getTargets().stream().map(Identifier::getValue).collect(toImmutableSet());\n+            List<ColumnMetadata> updatedColumns = allColumns.stream().filter(column -> updatedTargetNames.contains(column.getName())).collect(toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTU0Mw==", "bodyText": "Converted.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075543", "createdAt": "2020-11-07T01:17:37Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1785,93 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, update.getTargets().stream().map(Identifier::getValue).collect(toUnmodifiableSet()));\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns().stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableList());\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getTargets().stream().map(Identifier::getValue).collect(toImmutableSet());\n+            List<ColumnMetadata> updatedColumns = allColumns.stream().filter(column -> updatedTargetNames.contains(column.getName())).collect(toImmutableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NzM5MQ=="}, "originalCommit": null, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjkyMjUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowODoyMVrOHu77CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNzo0MFrOHvB24Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3ODMxMg==", "bodyText": "Unrelated changes", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518978312", "createdAt": "2020-11-06T20:08:21Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -250,13 +252,16 @@ private RelationPlan planStatementWithoutOutput(Analysis analysis, Statement sta\n             checkState(analysis.getInsert().isPresent(), \"Insert handle is missing\");\n             return createInsertPlan(analysis, (Insert) statement);\n         }\n-        else if (statement instanceof RefreshMaterializedView) {\n+        if (statement instanceof RefreshMaterializedView) {\n             checkState(analysis.getRefreshMaterializedView().isPresent(), \"RefreshMaterializedViewAnalysis handle is missing\");\n             return createRefreshMaterializedViewPlan(analysis);\n         }\n-        else if (statement instanceof Delete) {\n+        if (statement instanceof Delete) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTU1Mw==", "bodyText": "Reverted.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075553", "createdAt": "2020-11-07T01:17:40Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -250,13 +252,16 @@ private RelationPlan planStatementWithoutOutput(Analysis analysis, Statement sta\n             checkState(analysis.getInsert().isPresent(), \"Insert handle is missing\");\n             return createInsertPlan(analysis, (Insert) statement);\n         }\n-        else if (statement instanceof RefreshMaterializedView) {\n+        if (statement instanceof RefreshMaterializedView) {\n             checkState(analysis.getRefreshMaterializedView().isPresent(), \"RefreshMaterializedViewAnalysis handle is missing\");\n             return createRefreshMaterializedViewPlan(analysis);\n         }\n-        else if (statement instanceof Delete) {\n+        if (statement instanceof Delete) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3ODMxMg=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjkyNTY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowOTowMlrOHu788Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNzo0NlrOHvB28g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3ODgwMQ==", "bodyText": "Why?\nAlso, this change seems unrelated.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518978801", "createdAt": "2020-11-06T20:09:02Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanBuilder.java", "diffHunk": "@@ -115,7 +115,7 @@ public PlanBuilder appendProjections(Iterable<Expression> expressions, SymbolAll\n         // add an identity projection for underlying plan\n         projections.putIdentities(root.getOutputSymbols());\n \n-        Map<ScopeAware<Expression>, Symbol> mappings = new HashMap<>();\n+        Map<ScopeAware<Expression>, Symbol> mappings = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTU3MA==", "bodyText": "It was needed at one point in the evolution of the implementation, but isn't any more.  Reverted.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075570", "createdAt": "2020-11-07T01:17:46Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanBuilder.java", "diffHunk": "@@ -115,7 +115,7 @@ public PlanBuilder appendProjections(Iterable<Expression> expressions, SymbolAll\n         // add an identity projection for underlying plan\n         projections.putIdentities(root.getOutputSymbols());\n \n-        Map<ScopeAware<Expression>, Symbol> mappings = new HashMap<>();\n+        Map<ScopeAware<Expression>, Symbol> mappings = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3ODgwMQ=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk1MDkyOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/Update.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxMzo1NlrOHu8Mqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNzo1NFrOHvB2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4MjgyNw==", "bodyText": "I would model them in a single list of \"assignments\". Then, you don't have to worry about whether the incoming lists have different numbers of elements.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518982827", "createdAt": "2020-11-06T20:13:56Z", "author": {"login": "martint"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/Update.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class Update\n+        extends Statement\n+{\n+    private final Table table;\n+    private final List<Identifier> targets;\n+    private final List<Expression> values;\n+    private final Optional<Expression> where;\n+\n+    public Update(Table table, List<Identifier> targets, List<Expression> values, Optional<Expression> where)\n+    {\n+        this(Optional.empty(), table, targets, values, where);\n+    }\n+\n+    public Update(NodeLocation location, Table table, List<Identifier> targets, List<Expression> values, Optional<Expression> where)\n+    {\n+        this(Optional.of(location), table, targets, values, where);\n+    }\n+\n+    private Update(Optional<NodeLocation> location, Table table, List<Identifier> targets, List<Expression> values, Optional<Expression> where)\n+    {\n+        super(location);\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.targets = requireNonNull(targets, \"targets is null\");\n+        this.values = requireNonNull(values, \"values is null\");\n+        checkArgument(targets.size() == values.size(), \"targets (%s) and values (%s) have differents sizes\", targets.size(), values.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTU4Mw==", "bodyText": "Indeed, this is much nicer!  Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075583", "createdAt": "2020-11-07T01:17:54Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/Update.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class Update\n+        extends Statement\n+{\n+    private final Table table;\n+    private final List<Identifier> targets;\n+    private final List<Expression> values;\n+    private final Optional<Expression> where;\n+\n+    public Update(Table table, List<Identifier> targets, List<Expression> values, Optional<Expression> where)\n+    {\n+        this(Optional.empty(), table, targets, values, where);\n+    }\n+\n+    public Update(NodeLocation location, Table table, List<Identifier> targets, List<Expression> values, Optional<Expression> where)\n+    {\n+        this(Optional.of(location), table, targets, values, where);\n+    }\n+\n+    private Update(Optional<NodeLocation> location, Table table, List<Identifier> targets, List<Expression> values, Optional<Expression> where)\n+    {\n+        super(location);\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.targets = requireNonNull(targets, \"targets is null\");\n+        this.values = requireNonNull(values, \"values is null\");\n+        checkArgument(targets.size() == values.size(), \"targets (%s) and values (%s) have differents sizes\", targets.size(), values.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4MjgyNw=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk2MTc3OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxNzo1MVrOHu8TLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxODowM1rOHvB3DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDQ5Mg==", "bodyText": "See my comment in the Update class about modeling these as \"assignments\". Take a look at how we do it for io.prestosql.sql.tree.Property", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518984492", "createdAt": "2020-11-06T20:17:51Z", "author": {"login": "martint"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -140,6 +140,10 @@ statement\n     | DESCRIBE INPUT identifier                                        #describeInput\n     | DESCRIBE OUTPUT identifier                                       #describeOutput\n     | SET PATH pathSpecification                                       #setPath\n+    | UPDATE qualifiedName\n+        SET targets+=identifier '=' values+=updateSource\n+            (',' targets+=identifier '=' values+=updateSource)*\n+        (WHERE where=booleanExpression)?                               #update", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTU5Nw==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075597", "createdAt": "2020-11-07T01:18:03Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -140,6 +140,10 @@ statement\n     | DESCRIBE INPUT identifier                                        #describeInput\n     | DESCRIBE OUTPUT identifier                                       #describeOutput\n     | SET PATH pathSpecification                                       #setPath\n+    | UPDATE qualifiedName\n+        SET targets+=identifier '=' values+=updateSource\n+            (',' targets+=identifier '=' values+=updateSource)*\n+        (WHERE where=booleanExpression)?                               #update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDQ5Mg=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk5MTU5OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyOToyOVrOHu8ltg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxODowOFrOHvB3Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTIzOA==", "bodyText": "DEFAULT will be interpreted as an identifier (and as a column named \"default\"), but it should be treated a special entity that has distinct semantics. We'll need to introduce a Default expression for this.\nSince we're not handling this at all in the code, I would get rid of it for now and do it as a future enhancement.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r518989238", "createdAt": "2020-11-06T20:29:29Z", "author": {"login": "martint"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -460,6 +464,9 @@ frameBound\n     | expression boundType=(PRECEDING | FOLLOWING)  #boundedFrame\n     ;\n \n+updateSource\n+    : (expression | DEFAULT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTYxOA==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r519075618", "createdAt": "2020-11-07T01:18:08Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -460,6 +464,9 @@ frameBound\n     | expression boundType=(PRECEDING | FOLLOWING)  #boundedFrame\n     ;\n \n+updateSource\n+    : (expression | DEFAULT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTIzOA=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDczNjk1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/develop.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMTo1NDo0OVrOH2D14g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMjo1OFrOH2MX7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0ODA5OA==", "bodyText": "Let's move this after example-http since it is related to connectors", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526448098", "createdAt": "2020-11-18T21:54:49Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/develop.rst", "diffHunk": "@@ -17,3 +17,4 @@ This guide is intended for Presto contributors and plugin developers.\n     develop/certificate-authenticator\n     develop/group-provider\n     develop/event-listener\n+    develop/delete-and-update", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4Nzg4NQ==", "bodyText": "Moved.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526587885", "createdAt": "2020-11-19T04:32:58Z", "author": {"login": "djsstarburst"}, "path": "presto-docs/src/main/sphinx/develop.rst", "diffHunk": "@@ -17,3 +17,4 @@ This guide is intended for Presto contributors and plugin developers.\n     develop/certificate-authenticator\n     develop/group-provider\n     develop/event-listener\n+    develop/delete-and-update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0ODA5OA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDg3OTcwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive.rst", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjozNzo0OVrOH2FMFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzowNFrOH2MYDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3MDE2NA==", "bodyText": "This change to the Hive docs is in the wrong commit", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526470164", "createdAt": "2020-11-18T22:37:49Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/hive.rst", "diffHunk": "@@ -88,7 +88,9 @@ Transactional and ACID Tables\n \n When connecting to a Hive metastore version 3.x, the Hive connector supports\n reading from and writing to insert-only and ACID tables, with full support for\n-partitioning and bucketing. Row-level deletes are supported for ACID tables.\n+partitioning and bucketing. Row-level DELETE is supported for ACID tables,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3MDk3MA==", "bodyText": "How about changing the sentence to\n\nACID tables support UPDATE and row-level DELETE. Updating the values of partition keys or bucket columns is not supported.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526470970", "createdAt": "2020-11-18T22:39:32Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/hive.rst", "diffHunk": "@@ -88,7 +88,9 @@ Transactional and ACID Tables\n \n When connecting to a Hive metastore version 3.x, the Hive connector supports\n reading from and writing to insert-only and ACID tables, with full support for\n-partitioning and bucketing. Row-level deletes are supported for ACID tables.\n+partitioning and bucketing. Row-level DELETE is supported for ACID tables,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3MDE2NA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4NzkxOA==", "bodyText": "Removed from this commit.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526587918", "createdAt": "2020-11-19T04:33:04Z", "author": {"login": "djsstarburst"}, "path": "presto-docs/src/main/sphinx/connector/hive.rst", "diffHunk": "@@ -88,7 +88,9 @@ Transactional and ACID Tables\n \n When connecting to a Hive metastore version 3.x, the Hive connector supports\n reading from and writing to insert-only and ACID tables, with full support for\n-partitioning and bucketing. Row-level deletes are supported for ACID tables.\n+partitioning and bucketing. Row-level DELETE is supported for ACID tables,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3MDE2NA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDkzMjYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjo1NTo1NFrOH2FsHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzowOFrOH2MYIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3ODM2NA==", "bodyText": "Remove the default methods and move this to AbstractMockMetadata, since this is an internal interface.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526478364", "createdAt": "2020-11-18T22:55:54Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -317,6 +322,22 @@\n      */\n     void finishDelete(Session session, TableHandle tableHandle, Collection<Slice> fragments);\n \n+    /**\n+     * Begin update query\n+     */\n+    default TableHandle beginUpdate(Session session, TableHandle tableHandle, List<ColumnHandle> updatedColumns, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4NzkzOQ==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526587939", "createdAt": "2020-11-19T04:33:08Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -317,6 +322,22 @@\n      */\n     void finishDelete(Session session, TableHandle tableHandle, Collection<Slice> fragments);\n \n+    /**\n+     * Begin update query\n+     */\n+    default TableHandle beginUpdate(Session session, TableHandle tableHandle, List<ColumnHandle> updatedColumns, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3ODM2NA=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDkzOTY4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjo1ODoyMlrOH2FwWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzoxMlrOH2MYJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTQ1MQ==", "bodyText": "This doesn't need to be qualified", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526479451", "createdAt": "2020-11-18T22:58:22Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.UpdatablePageSource;\n+import io.prestosql.sql.planner.plan.PlanNodeId;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.airlift.concurrent.MoreFutures.toListenableFuture;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateOperator\n+        implements Operator\n+{\n+    public static class UpdateOperatorFactory\n+            implements OperatorFactory\n+    {\n+        private final int operatorId;\n+        private final PlanNodeId planNodeId;\n+        private final int rowIdChannel;\n+        private boolean closed;\n+\n+        public UpdateOperatorFactory(int operatorId, PlanNodeId planNodeId, int rowIdChannel)\n+        {\n+            this.operatorId = operatorId;\n+            this.planNodeId = requireNonNull(planNodeId, \"planNodeId is null\");\n+            this.rowIdChannel = rowIdChannel;\n+        }\n+\n+        @Override\n+        public Operator createOperator(DriverContext driverContext)\n+        {\n+            checkState(!closed, \"Factory is already closed\");\n+            OperatorContext context = driverContext.addOperatorContext(operatorId, planNodeId, UpdateOperator.class.getSimpleName());\n+            return new UpdateOperator(context, rowIdChannel);\n+        }\n+\n+        @Override\n+        public void noMoreOperators()\n+        {\n+            closed = true;\n+        }\n+\n+        @Override\n+        public OperatorFactory duplicate()\n+        {\n+            return new UpdateOperator.UpdateOperatorFactory(operatorId, planNodeId, rowIdChannel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4Nzk0Mw==", "bodyText": "Unqualified.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526587943", "createdAt": "2020-11-19T04:33:12Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.UpdatablePageSource;\n+import io.prestosql.sql.planner.plan.PlanNodeId;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.airlift.concurrent.MoreFutures.toListenableFuture;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateOperator\n+        implements Operator\n+{\n+    public static class UpdateOperatorFactory\n+            implements OperatorFactory\n+    {\n+        private final int operatorId;\n+        private final PlanNodeId planNodeId;\n+        private final int rowIdChannel;\n+        private boolean closed;\n+\n+        public UpdateOperatorFactory(int operatorId, PlanNodeId planNodeId, int rowIdChannel)\n+        {\n+            this.operatorId = operatorId;\n+            this.planNodeId = requireNonNull(planNodeId, \"planNodeId is null\");\n+            this.rowIdChannel = rowIdChannel;\n+        }\n+\n+        @Override\n+        public Operator createOperator(DriverContext driverContext)\n+        {\n+            checkState(!closed, \"Factory is already closed\");\n+            OperatorContext context = driverContext.addOperatorContext(operatorId, planNodeId, UpdateOperator.class.getSimpleName());\n+            return new UpdateOperator(context, rowIdChannel);\n+        }\n+\n+        @Override\n+        public void noMoreOperators()\n+        {\n+            closed = true;\n+        }\n+\n+        @Override\n+        public OperatorFactory duplicate()\n+        {\n+            return new UpdateOperator.UpdateOperatorFactory(operatorId, planNodeId, rowIdChannel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTQ1MQ=="}, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk0MTIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjo1OTowM1rOH2FxWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzoxOVrOH2MYRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTcwNQ==", "bodyText": "No need to qualify State. This can be\nif (state == State.RUNNING) {", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526479705", "createdAt": "2020-11-18T22:59:03Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.UpdatablePageSource;\n+import io.prestosql.sql.planner.plan.PlanNodeId;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.airlift.concurrent.MoreFutures.toListenableFuture;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateOperator\n+        implements Operator\n+{\n+    public static class UpdateOperatorFactory\n+            implements OperatorFactory\n+    {\n+        private final int operatorId;\n+        private final PlanNodeId planNodeId;\n+        private final int rowIdChannel;\n+        private boolean closed;\n+\n+        public UpdateOperatorFactory(int operatorId, PlanNodeId planNodeId, int rowIdChannel)\n+        {\n+            this.operatorId = operatorId;\n+            this.planNodeId = requireNonNull(planNodeId, \"planNodeId is null\");\n+            this.rowIdChannel = rowIdChannel;\n+        }\n+\n+        @Override\n+        public Operator createOperator(DriverContext driverContext)\n+        {\n+            checkState(!closed, \"Factory is already closed\");\n+            OperatorContext context = driverContext.addOperatorContext(operatorId, planNodeId, UpdateOperator.class.getSimpleName());\n+            return new UpdateOperator(context, rowIdChannel);\n+        }\n+\n+        @Override\n+        public void noMoreOperators()\n+        {\n+            closed = true;\n+        }\n+\n+        @Override\n+        public OperatorFactory duplicate()\n+        {\n+            return new UpdateOperator.UpdateOperatorFactory(operatorId, planNodeId, rowIdChannel);\n+        }\n+    }\n+\n+    private enum State\n+    {\n+        RUNNING, FINISHING, FINISHED\n+    }\n+\n+    private final OperatorContext operatorContext;\n+    private final int rowIdChannel;\n+\n+    private UpdateOperator.State state = UpdateOperator.State.RUNNING;\n+    private long rowCount;\n+    private boolean closed;\n+    private ListenableFuture<Collection<Slice>> finishFuture;\n+    private Supplier<Optional<UpdatablePageSource>> pageSource = Optional::empty;\n+\n+    public UpdateOperator(OperatorContext operatorContext, int rowIdChannel)\n+    {\n+        this.operatorContext = requireNonNull(operatorContext, \"operatorContext is null\");\n+        this.rowIdChannel = rowIdChannel;\n+    }\n+\n+    @Override\n+    public OperatorContext getOperatorContext()\n+    {\n+        return operatorContext;\n+    }\n+\n+    @Override\n+    public void finish()\n+    {\n+        if (state == UpdateOperator.State.RUNNING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4Nzk3Mw==", "bodyText": "All UpdateOperator. qualifications removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526587973", "createdAt": "2020-11-19T04:33:19Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.UpdatablePageSource;\n+import io.prestosql.sql.planner.plan.PlanNodeId;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.airlift.concurrent.MoreFutures.toListenableFuture;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateOperator\n+        implements Operator\n+{\n+    public static class UpdateOperatorFactory\n+            implements OperatorFactory\n+    {\n+        private final int operatorId;\n+        private final PlanNodeId planNodeId;\n+        private final int rowIdChannel;\n+        private boolean closed;\n+\n+        public UpdateOperatorFactory(int operatorId, PlanNodeId planNodeId, int rowIdChannel)\n+        {\n+            this.operatorId = operatorId;\n+            this.planNodeId = requireNonNull(planNodeId, \"planNodeId is null\");\n+            this.rowIdChannel = rowIdChannel;\n+        }\n+\n+        @Override\n+        public Operator createOperator(DriverContext driverContext)\n+        {\n+            checkState(!closed, \"Factory is already closed\");\n+            OperatorContext context = driverContext.addOperatorContext(operatorId, planNodeId, UpdateOperator.class.getSimpleName());\n+            return new UpdateOperator(context, rowIdChannel);\n+        }\n+\n+        @Override\n+        public void noMoreOperators()\n+        {\n+            closed = true;\n+        }\n+\n+        @Override\n+        public OperatorFactory duplicate()\n+        {\n+            return new UpdateOperator.UpdateOperatorFactory(operatorId, planNodeId, rowIdChannel);\n+        }\n+    }\n+\n+    private enum State\n+    {\n+        RUNNING, FINISHING, FINISHED\n+    }\n+\n+    private final OperatorContext operatorContext;\n+    private final int rowIdChannel;\n+\n+    private UpdateOperator.State state = UpdateOperator.State.RUNNING;\n+    private long rowCount;\n+    private boolean closed;\n+    private ListenableFuture<Collection<Slice>> finishFuture;\n+    private Supplier<Optional<UpdatablePageSource>> pageSource = Optional::empty;\n+\n+    public UpdateOperator(OperatorContext operatorContext, int rowIdChannel)\n+    {\n+        this.operatorContext = requireNonNull(operatorContext, \"operatorContext is null\");\n+        this.rowIdChannel = rowIdChannel;\n+    }\n+\n+    @Override\n+    public OperatorContext getOperatorContext()\n+    {\n+        return operatorContext;\n+    }\n+\n+    @Override\n+    public void finish()\n+    {\n+        if (state == UpdateOperator.State.RUNNING) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTcwNQ=="}, "originalCommit": null, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk0NDcxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowMDoxOVrOH2FzXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzoyM1rOH2MYVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MDIyMQ==", "bodyText": "This is not used", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526480221", "createdAt": "2020-11-18T23:00:19Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.UpdatablePageSource;\n+import io.prestosql.sql.planner.plan.PlanNodeId;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.airlift.concurrent.MoreFutures.toListenableFuture;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateOperator\n+        implements Operator\n+{\n+    public static class UpdateOperatorFactory\n+            implements OperatorFactory\n+    {\n+        private final int operatorId;\n+        private final PlanNodeId planNodeId;\n+        private final int rowIdChannel;\n+        private boolean closed;\n+\n+        public UpdateOperatorFactory(int operatorId, PlanNodeId planNodeId, int rowIdChannel)\n+        {\n+            this.operatorId = operatorId;\n+            this.planNodeId = requireNonNull(planNodeId, \"planNodeId is null\");\n+            this.rowIdChannel = rowIdChannel;\n+        }\n+\n+        @Override\n+        public Operator createOperator(DriverContext driverContext)\n+        {\n+            checkState(!closed, \"Factory is already closed\");\n+            OperatorContext context = driverContext.addOperatorContext(operatorId, planNodeId, UpdateOperator.class.getSimpleName());\n+            return new UpdateOperator(context, rowIdChannel);\n+        }\n+\n+        @Override\n+        public void noMoreOperators()\n+        {\n+            closed = true;\n+        }\n+\n+        @Override\n+        public OperatorFactory duplicate()\n+        {\n+            return new UpdateOperator.UpdateOperatorFactory(operatorId, planNodeId, rowIdChannel);\n+        }\n+    }\n+\n+    private enum State\n+    {\n+        RUNNING, FINISHING, FINISHED\n+    }\n+\n+    private final OperatorContext operatorContext;\n+    private final int rowIdChannel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4Nzk4OQ==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526587989", "createdAt": "2020-11-19T04:33:23Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.UpdatablePageSource;\n+import io.prestosql.sql.planner.plan.PlanNodeId;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.airlift.concurrent.MoreFutures.toListenableFuture;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateOperator\n+        implements Operator\n+{\n+    public static class UpdateOperatorFactory\n+            implements OperatorFactory\n+    {\n+        private final int operatorId;\n+        private final PlanNodeId planNodeId;\n+        private final int rowIdChannel;\n+        private boolean closed;\n+\n+        public UpdateOperatorFactory(int operatorId, PlanNodeId planNodeId, int rowIdChannel)\n+        {\n+            this.operatorId = operatorId;\n+            this.planNodeId = requireNonNull(planNodeId, \"planNodeId is null\");\n+            this.rowIdChannel = rowIdChannel;\n+        }\n+\n+        @Override\n+        public Operator createOperator(DriverContext driverContext)\n+        {\n+            checkState(!closed, \"Factory is already closed\");\n+            OperatorContext context = driverContext.addOperatorContext(operatorId, planNodeId, UpdateOperator.class.getSimpleName());\n+            return new UpdateOperator(context, rowIdChannel);\n+        }\n+\n+        @Override\n+        public void noMoreOperators()\n+        {\n+            closed = true;\n+        }\n+\n+        @Override\n+        public OperatorFactory duplicate()\n+        {\n+            return new UpdateOperator.UpdateOperatorFactory(operatorId, planNodeId, rowIdChannel);\n+        }\n+    }\n+\n+    private enum State\n+    {\n+        RUNNING, FINISHING, FINISHED\n+    }\n+\n+    private final OperatorContext operatorContext;\n+    private final int rowIdChannel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MDIyMQ=="}, "originalCommit": null, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk1Njc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowNDo1OVrOH2F6iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzoyN1rOH2MYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MjA1OQ==", "bodyText": "List<ColumnMetadata>> updatedColumnMetadata = analysis.getUpdatedColumns()\n        .orElseThrow(() -> new VerifyException(\"updated columns not set\"));", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526482059", "createdAt": "2020-11-18T23:04:59Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1241,13 +1251,31 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n                 analysis.setColumn(field, columnHandle);\n             }\n \n-            if (isUpdateQuery) {\n+            if (updateKind.isPresent()) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumn;\n+                switch (updateKind.get()) {\n+                    case DELETE:\n+                        rowIdColumn = metadata.getDeleteRowIdColumnHandle(session, tableHandle.get());\n+                        break;\n+                    case UPDATE:\n+                        Optional<List<ColumnMetadata>> updatedColumnMetadata = analysis.getUpdatedColumns();\n+                        checkArgument(updatedColumnMetadata.isPresent(), \"updatedColumnMetadata isn't present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4Nzk5Ng==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526587996", "createdAt": "2020-11-19T04:33:27Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1241,13 +1251,31 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n                 analysis.setColumn(field, columnHandle);\n             }\n \n-            if (isUpdateQuery) {\n+            if (updateKind.isPresent()) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumn;\n+                switch (updateKind.get()) {\n+                    case DELETE:\n+                        rowIdColumn = metadata.getDeleteRowIdColumnHandle(session, tableHandle.get());\n+                        break;\n+                    case UPDATE:\n+                        Optional<List<ColumnMetadata>> updatedColumnMetadata = analysis.getUpdatedColumns();\n+                        checkArgument(updatedColumnMetadata.isPresent(), \"updatedColumnMetadata isn't present\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MjA1OQ=="}, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk1OTEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowNTo0OVrOH2F73A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzozMFrOH2MYag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MjM5Ng==", "bodyText": "Use VerifyException since this would be a bug", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526482396", "createdAt": "2020-11-18T23:05:49Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1241,13 +1251,31 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n                 analysis.setColumn(field, columnHandle);\n             }\n \n-            if (isUpdateQuery) {\n+            if (updateKind.isPresent()) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumn;\n+                switch (updateKind.get()) {\n+                    case DELETE:\n+                        rowIdColumn = metadata.getDeleteRowIdColumnHandle(session, tableHandle.get());\n+                        break;\n+                    case UPDATE:\n+                        Optional<List<ColumnMetadata>> updatedColumnMetadata = analysis.getUpdatedColumns();\n+                        checkArgument(updatedColumnMetadata.isPresent(), \"updatedColumnMetadata isn't present\");\n+                        Set<String> updatedColumnNames = updatedColumnMetadata.get().stream().map(ColumnMetadata::getName).collect(toImmutableSet());\n+                        List<ColumnHandle> updatedColumns = columnHandles.entrySet().stream()\n+                                .filter(entry -> updatedColumnNames.contains(entry.getKey()))\n+                                .map(Map.Entry::getValue)\n+                                .collect(toImmutableList());\n+                        rowIdColumn = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get(), updatedColumns);\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unknown UpdateKind \" + updateKind.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODAxMA==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588010", "createdAt": "2020-11-19T04:33:30Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1241,13 +1251,31 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n                 analysis.setColumn(field, columnHandle);\n             }\n \n-            if (isUpdateQuery) {\n+            if (updateKind.isPresent()) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumn;\n+                switch (updateKind.get()) {\n+                    case DELETE:\n+                        rowIdColumn = metadata.getDeleteRowIdColumnHandle(session, tableHandle.get());\n+                        break;\n+                    case UPDATE:\n+                        Optional<List<ColumnMetadata>> updatedColumnMetadata = analysis.getUpdatedColumns();\n+                        checkArgument(updatedColumnMetadata.isPresent(), \"updatedColumnMetadata isn't present\");\n+                        Set<String> updatedColumnNames = updatedColumnMetadata.get().stream().map(ColumnMetadata::getName).collect(toImmutableSet());\n+                        List<ColumnHandle> updatedColumns = columnHandles.entrySet().stream()\n+                                .filter(entry -> updatedColumnNames.contains(entry.getKey()))\n+                                .map(Map.Entry::getValue)\n+                                .collect(toImmutableList());\n+                        rowIdColumn = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get(), updatedColumns);\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unknown UpdateKind \" + updateKind.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MjM5Ng=="}, "originalCommit": null, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk2NTEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowODoxN1rOH2F_aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMzowMjozN1rOH2KyyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MzMwNA==", "bodyText": "We don't do this for delete. I'm not sure why we do it for insert. I don't think we should exclude hidden columns here unless there is a good reason. cc @martint", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526483304", "createdAt": "2020-11-18T23:08:17Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1793,101 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU2MTk5Mg==", "bodyText": "Here is the definition of HiveColumnHandle.isHidden():\n    public boolean isHidden()\n    {\n        return columnType == SYNTHESIZED;\n    }\n\nHere is the complete list of SYNTHESIZED columns:\n    public static HiveColumnHandle getDeleteRowIdColumnHandle();\n    public static HiveColumnHandle updateRowIdColumnHandle(List<HiveColumnHandle> columnHandles, List<ColumnHandle> updatedColumns);\n    public static HiveColumnHandle pathColumnHandle();\n    public static HiveColumnHandle bucketColumnHandle();\n    public static HiveColumnHandle fileSizeColumnHandle();\n    public static HiveColumnHandle fileModifiedTimeColumnHandle();\n    public static HiveColumnHandle partitionColumnHandle();\n\nAFAICT none of these can be UPDATE SET targets.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526561992", "createdAt": "2020-11-19T03:02:37Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1793,101 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MzMwNA=="}, "originalCommit": null, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk4NTY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxNjozNFrOH2GLvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzo0MlrOH2MYpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NjQ2MA==", "bodyText": "I don't think we should filter here. We should be able to update a hidden column, just like we can select one.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526486460", "createdAt": "2020-11-18T23:16:34Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1793,101 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns().stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableList());\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            List<ColumnMetadata> updatedColumns = allColumns.stream()\n+                    .filter(column -> updatedTargetNames.contains(column.getName()))\n+                    .collect(toImmutableList());\n+            analysis.setUpdateType(\"UPDATE\", tableName);\n+            analysis.setUpdatedColumns(updatedColumns);\n+\n+            // Analyzer checks for select permissions but UPDATE has a separate permission, so disable access checks\n+            StatementAnalyzer analyzer = new StatementAnalyzer(\n+                    analysis,\n+                    metadata,\n+                    sqlParser,\n+                    new AllowAllAccessControl(),\n+                    session,\n+                    warningCollector,\n+                    CorrelationSupport.ALLOWED);\n+\n+            Scope tableScope = analyzer.analyzeForUpdate(table, scope, UpdateKind.UPDATE);\n+            update.getWhere().ifPresent(where -> analyzeWhere(update, tableScope, where));\n+\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .filter(column -> !column.isHidden())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODA2OQ==", "bodyText": "Since allColumns is filtered above, it's certainly doesn't need to be filtered again here.  Filtering removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588069", "createdAt": "2020-11-19T04:33:42Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1793,101 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns().stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableList());\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            List<ColumnMetadata> updatedColumns = allColumns.stream()\n+                    .filter(column -> updatedTargetNames.contains(column.getName()))\n+                    .collect(toImmutableList());\n+            analysis.setUpdateType(\"UPDATE\", tableName);\n+            analysis.setUpdatedColumns(updatedColumns);\n+\n+            // Analyzer checks for select permissions but UPDATE has a separate permission, so disable access checks\n+            StatementAnalyzer analyzer = new StatementAnalyzer(\n+                    analysis,\n+                    metadata,\n+                    sqlParser,\n+                    new AllowAllAccessControl(),\n+                    session,\n+                    warningCollector,\n+                    CorrelationSupport.ALLOWED);\n+\n+            Scope tableScope = analyzer.analyzeForUpdate(table, scope, UpdateKind.UPDATE);\n+            update.getWhere().ifPresent(where -> analyzeWhere(update, tableScope, where));\n+\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .filter(column -> !column.isHidden())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NjQ2MA=="}, "originalCommit": null, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk5Mjg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxOToxM1rOH2GPzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo1OToyN1rOH4fHiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NzUwMw==", "bodyText": "Rather than doing a null check here, we should verify that the target column name exists up above, with a proper semantic error, before we do security checks or anything else using it.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526487503", "createdAt": "2020-11-18T23:19:13Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1793,101 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns().stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableList());\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            List<ColumnMetadata> updatedColumns = allColumns.stream()\n+                    .filter(column -> updatedTargetNames.contains(column.getName()))\n+                    .collect(toImmutableList());\n+            analysis.setUpdateType(\"UPDATE\", tableName);\n+            analysis.setUpdatedColumns(updatedColumns);\n+\n+            // Analyzer checks for select permissions but UPDATE has a separate permission, so disable access checks\n+            StatementAnalyzer analyzer = new StatementAnalyzer(\n+                    analysis,\n+                    metadata,\n+                    sqlParser,\n+                    new AllowAllAccessControl(),\n+                    session,\n+                    warningCollector,\n+                    CorrelationSupport.ALLOWED);\n+\n+            Scope tableScope = analyzer.analyzeForUpdate(table, scope, UpdateKind.UPDATE);\n+            update.getWhere().ifPresent(where -> analyzeWhere(update, tableScope, where));\n+\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            ImmutableList.Builder<ExpressionAnalysis> analysesBuilder = ImmutableList.builder();\n+            ImmutableList.Builder<Type> expressionTypesBuilder = ImmutableList.builder();\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                Expression expression = assignment.getValue();\n+                ExpressionAnalysis analysis = analyzeExpression(expression, tableScope);\n+                analysesBuilder.add(analysis);\n+                expressionTypesBuilder.add(analysis.getType(expression));\n+            }\n+            List<ExpressionAnalysis> analyses = analysesBuilder.build();\n+            List<Type> expressionTypes = expressionTypesBuilder.build();\n+\n+            List<Type> tableTypes = update.getAssignments().stream()\n+                    .map(assignment -> requireNonNull(columns.get(assignment.getName().getValue())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODEwNw==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588107", "createdAt": "2020-11-19T04:33:50Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1793,101 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns().stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableList());\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            List<ColumnMetadata> updatedColumns = allColumns.stream()\n+                    .filter(column -> updatedTargetNames.contains(column.getName()))\n+                    .collect(toImmutableList());\n+            analysis.setUpdateType(\"UPDATE\", tableName);\n+            analysis.setUpdatedColumns(updatedColumns);\n+\n+            // Analyzer checks for select permissions but UPDATE has a separate permission, so disable access checks\n+            StatementAnalyzer analyzer = new StatementAnalyzer(\n+                    analysis,\n+                    metadata,\n+                    sqlParser,\n+                    new AllowAllAccessControl(),\n+                    session,\n+                    warningCollector,\n+                    CorrelationSupport.ALLOWED);\n+\n+            Scope tableScope = analyzer.analyzeForUpdate(table, scope, UpdateKind.UPDATE);\n+            update.getWhere().ifPresent(where -> analyzeWhere(update, tableScope, where));\n+\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            ImmutableList.Builder<ExpressionAnalysis> analysesBuilder = ImmutableList.builder();\n+            ImmutableList.Builder<Type> expressionTypesBuilder = ImmutableList.builder();\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                Expression expression = assignment.getValue();\n+                ExpressionAnalysis analysis = analyzeExpression(expression, tableScope);\n+                analysesBuilder.add(analysis);\n+                expressionTypesBuilder.add(analysis.getType(expression));\n+            }\n+            List<ExpressionAnalysis> analyses = analysesBuilder.build();\n+            List<Type> expressionTypes = expressionTypesBuilder.build();\n+\n+            List<Type> tableTypes = update.getAssignments().stream()\n+                    .map(assignment -> requireNonNull(columns.get(assignment.getName().getValue())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NzUwMw=="}, "originalCommit": null, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MjEzNg==", "bodyText": "Is this resolved? I still see the null check.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528992136", "createdAt": "2020-11-23T20:59:27Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1765,6 +1793,101 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+            // Strip out the \"hidden\" columns\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns().stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableList());\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            List<ColumnMetadata> updatedColumns = allColumns.stream()\n+                    .filter(column -> updatedTargetNames.contains(column.getName()))\n+                    .collect(toImmutableList());\n+            analysis.setUpdateType(\"UPDATE\", tableName);\n+            analysis.setUpdatedColumns(updatedColumns);\n+\n+            // Analyzer checks for select permissions but UPDATE has a separate permission, so disable access checks\n+            StatementAnalyzer analyzer = new StatementAnalyzer(\n+                    analysis,\n+                    metadata,\n+                    sqlParser,\n+                    new AllowAllAccessControl(),\n+                    session,\n+                    warningCollector,\n+                    CorrelationSupport.ALLOWED);\n+\n+            Scope tableScope = analyzer.analyzeForUpdate(table, scope, UpdateKind.UPDATE);\n+            update.getWhere().ifPresent(where -> analyzeWhere(update, tableScope, where));\n+\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .filter(column -> !column.isHidden())\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            ImmutableList.Builder<ExpressionAnalysis> analysesBuilder = ImmutableList.builder();\n+            ImmutableList.Builder<Type> expressionTypesBuilder = ImmutableList.builder();\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                Expression expression = assignment.getValue();\n+                ExpressionAnalysis analysis = analyzeExpression(expression, tableScope);\n+                analysesBuilder.add(analysis);\n+                expressionTypesBuilder.add(analysis.getType(expression));\n+            }\n+            List<ExpressionAnalysis> analyses = analysesBuilder.build();\n+            List<Type> expressionTypes = expressionTypesBuilder.build();\n+\n+            List<Type> tableTypes = update.getAssignments().stream()\n+                    .map(assignment -> requireNonNull(columns.get(assignment.getName().getValue())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NzUwMw=="}, "originalCommit": null, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk5ODkzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoyMTo0NVrOH2GTXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzo1M1rOH2MY1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4ODQxNQ==", "bodyText": "Remove \"else\" here as well", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526488415", "createdAt": "2020-11-18T23:21:45Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -250,13 +252,16 @@ private RelationPlan planStatementWithoutOutput(Analysis analysis, Statement sta\n             checkState(analysis.getInsert().isPresent(), \"Insert handle is missing\");\n             return createInsertPlan(analysis, (Insert) statement);\n         }\n-        else if (statement instanceof RefreshMaterializedView) {\n+        if (statement instanceof RefreshMaterializedView) {\n             checkState(analysis.getRefreshMaterializedView().isPresent(), \"RefreshMaterializedViewAnalysis handle is missing\");\n             return createRefreshMaterializedViewPlan(analysis);\n         }\n         else if (statement instanceof Delete) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODExNw==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588117", "createdAt": "2020-11-19T04:33:53Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -250,13 +252,16 @@ private RelationPlan planStatementWithoutOutput(Analysis analysis, Statement sta\n             checkState(analysis.getInsert().isPresent(), \"Insert handle is missing\");\n             return createInsertPlan(analysis, (Insert) statement);\n         }\n-        else if (statement instanceof RefreshMaterializedView) {\n+        if (statement instanceof RefreshMaterializedView) {\n             checkState(analysis.getRefreshMaterializedView().isPresent(), \"RefreshMaterializedViewAnalysis handle is missing\");\n             return createRefreshMaterializedViewPlan(analysis);\n         }\n         else if (statement instanceof Delete) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4ODQxNQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTAwMzQ0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoyMzo0OFrOH2GWIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozMzo1OVrOH2MY7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4OTEyMw==", "bodyText": "Good change, but unrelated", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526489123", "createdAt": "2020-11-18T23:23:48Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -396,8 +402,7 @@ public RelationPlan plan(QuerySpecification node)\n \n             // The new scope is the composite of the fields from the FROM and SELECT clause (local nested scopes). Fields from the bottom of\n             // the scope stack need to be placed first to match the expected layout for nested scopes.\n-            List<Symbol> newFields = new ArrayList<>();\n-            newFields.addAll(builder.getTranslations().getFieldSymbols());\n+            List<Symbol> newFields = new ArrayList<>(builder.getTranslations().getFieldSymbols());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODE0Mw==", "bodyText": "Reverted.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588143", "createdAt": "2020-11-19T04:33:59Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -396,8 +402,7 @@ public RelationPlan plan(QuerySpecification node)\n \n             // The new scope is the composite of the fields from the FROM and SELECT clause (local nested scopes). Fields from the bottom of\n             // the scope stack need to be placed first to match the expected layout for nested scopes.\n-            List<Symbol> newFields = new ArrayList<>();\n-            newFields.addAll(builder.getTranslations().getFieldSymbols());\n+            List<Symbol> newFields = new ArrayList<>(builder.getTranslations().getFieldSymbols());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4OTEyMw=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTAxNDc3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoyODo0OVrOH2Gc1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDowNFrOH2MZBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5MDgzNw==", "bodyText": "Calling this ordered might be better since it's not really sorted", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526490837", "createdAt": "2020-11-18T23:28:49Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODE2NA==", "bodyText": "Yes, ordered is better.  Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588164", "createdAt": "2020-11-19T04:34:04Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5MDgzNw=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTA0MTAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzozOTozNFrOH2Gs0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDowOVrOH2MZGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5NDkzMQ==", "bodyText": "sortedAssignments is only used here, so we could inline this into the creation loop", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526494931", "createdAt": "2020-11-18T23:39:34Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODE4NA==", "bodyText": "Done; nice cleanup!", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588184", "createdAt": "2020-11-19T04:34:09Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5NDkzMQ=="}, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTA2MjMzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo0ODoxM1rOH2G5xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDoxNFrOH2MZMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5ODI0Ng==", "bodyText": "toImmutableList", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526498246", "createdAt": "2020-11-18T23:48:13Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()\n+                .map(UpdateAssignment::getValue)\n+                .collect(toImmutableList());\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(sortedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, sortedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = sortedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODIwOA==", "bodyText": "This loop was removed in the previous cleanup.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588208", "createdAt": "2020-11-19T04:34:14Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()\n+                .map(UpdateAssignment::getValue)\n+                .collect(toImmutableList());\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(sortedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, sortedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = sortedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5ODI0Ng=="}, "originalCommit": null, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTA3MjA2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo1MjoxN1rOH2G_nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDoyM1rOH2MZSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5OTc0Mw==", "bodyText": "Split this out into\nupdateExpressionChannelNumbers[index] = symbolCounter;\nsymbolCounter++;\nWe avoid using increment as an expression", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526499743", "createdAt": "2020-11-18T23:52:17Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()\n+                .map(UpdateAssignment::getValue)\n+                .collect(toImmutableList());\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(sortedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, sortedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = sortedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,\n+                updateExpressionChannelNumbers,\n+                outputs);\n+    }\n+\n+    private List<Integer> createUpdateExpressionChannelNumbers(Assignments assignments, List<Symbol> expressionSymbols)\n+    {\n+        Integer[] updateExpressionChannelNumbers = new Integer[expressionSymbols.size()];\n+        int symbolCounter = 0;\n+        // This depends on the assignment symbols being ordered as the blocks of the\n+        // resulting page are ordered.\n+        for (Symbol symbol : assignments.getSymbols()) {\n+            int index = expressionSymbols.indexOf(symbol);\n+            if (index < 0) {\n+                continue;\n+            }\n+            updateExpressionChannelNumbers[index] = symbolCounter++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODIzNQ==", "bodyText": "Ok, I'll remember that.  Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588235", "createdAt": "2020-11-19T04:34:23Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()\n+                .map(UpdateAssignment::getValue)\n+                .collect(toImmutableList());\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(sortedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, sortedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = sortedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,\n+                updateExpressionChannelNumbers,\n+                outputs);\n+    }\n+\n+    private List<Integer> createUpdateExpressionChannelNumbers(Assignments assignments, List<Symbol> expressionSymbols)\n+    {\n+        Integer[] updateExpressionChannelNumbers = new Integer[expressionSymbols.size()];\n+        int symbolCounter = 0;\n+        // This depends on the assignment symbols being ordered as the blocks of the\n+        // resulting page are ordered.\n+        for (Symbol symbol : assignments.getSymbols()) {\n+            int index = expressionSymbols.indexOf(symbol);\n+            if (index < 0) {\n+                continue;\n+            }\n+            updateExpressionChannelNumbers[index] = symbolCounter++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5OTc0Mw=="}, "originalCommit": null, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTA3MzQ3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo1Mjo1N1rOH2HAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDozMVrOH2MZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5OTk4Mg==", "bodyText": "You can use int[] here along with Guava's Ints.asList()", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526499982", "createdAt": "2020-11-18T23:52:57Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()\n+                .map(UpdateAssignment::getValue)\n+                .collect(toImmutableList());\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(sortedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, sortedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = sortedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,\n+                updateExpressionChannelNumbers,\n+                outputs);\n+    }\n+\n+    private List<Integer> createUpdateExpressionChannelNumbers(Assignments assignments, List<Symbol> expressionSymbols)\n+    {\n+        Integer[] updateExpressionChannelNumbers = new Integer[expressionSymbols.size()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODI4OA==", "bodyText": "Let's chat about this - - I don't see how Ints.asList() is applicable to this case.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588288", "createdAt": "2020-11-19T04:34:31Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()\n+                .map(UpdateAssignment::getValue)\n+                .collect(toImmutableList());\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(sortedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, sortedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = sortedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,\n+                updateExpressionChannelNumbers,\n+                outputs);\n+    }\n+\n+    private List<Integer> createUpdateExpressionChannelNumbers(Assignments assignments, List<Symbol> expressionSymbols)\n+    {\n+        Integer[] updateExpressionChannelNumbers = new Integer[expressionSymbols.size()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5OTk4Mg=="}, "originalCommit": null, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTA4NDA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo1NzoxM1rOH2HG-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDozNVrOH2MZkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMTYyNw==", "bodyText": "Can this method be static?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526501627", "createdAt": "2020-11-18T23:57:13Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()\n+                .map(UpdateAssignment::getValue)\n+                .collect(toImmutableList());\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(sortedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, sortedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = sortedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,\n+                updateExpressionChannelNumbers,\n+                outputs);\n+    }\n+\n+    private List<Integer> createUpdateExpressionChannelNumbers(Assignments assignments, List<Symbol> expressionSymbols)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODMwNg==", "bodyText": "Indeed it can.  Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588306", "createdAt": "2020-11-19T04:34:35Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,106 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<UpdateAssignment> sortedAssignmentsBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            sortedAssignmentsBuilder.add(node.getAssignments().get(index));\n+        }\n+        List<UpdateAssignment> sortedAssignments = sortedAssignmentsBuilder.build();\n+        List<Expression> sortedExpressions = sortedAssignments.stream()\n+                .map(UpdateAssignment::getValue)\n+                .collect(toImmutableList());\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(sortedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, sortedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = sortedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,\n+                updateExpressionChannelNumbers,\n+                outputs);\n+    }\n+\n+    private List<Integer> createUpdateExpressionChannelNumbers(Assignments assignments, List<Symbol> expressionSymbols)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMTYyNw=="}, "originalCommit": null, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE3NjE1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozODoyOFrOH2H9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDozOVrOH2MZqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTU4Ng==", "bodyText": "Can shorten to \"Invalid descendant ...\" since the method name will be in the stack trace", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526515586", "createdAt": "2020-11-19T00:38:28Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "diffHunk": "@@ -195,7 +225,39 @@ private WriterTarget createWriterTarget(WriterTarget target)\n             throw new IllegalArgumentException(\"Unhandled target type: \" + target.getClass().getSimpleName());\n         }\n \n-        private PlanNode rewriteDeleteTableScan(PlanNode node, TableHandle handle)\n+        private TableHandle getTableHandleFromSource(PlanNode node)\n+        {\n+            if (node instanceof TableScanNode) {\n+                return ((TableScanNode) node).getTable();\n+            }\n+            if (node instanceof DeleteNode) {\n+                return getTableHandleFromSource(((DeleteNode) node).getSource());\n+            }\n+            if (node instanceof UpdateNode) {\n+                return getTableHandleFromSource(((UpdateNode) node).getSource());\n+            }\n+            if (node instanceof ExchangeNode) {\n+                return getTableHandleFromSource(node.getSources().get(0));\n+            }\n+            if (node instanceof FilterNode) {\n+                return getTableHandleFromSource(((FilterNode) node).getSource());\n+            }\n+            if (node instanceof ProjectNode) {\n+                return getTableHandleFromSource(((ProjectNode) node).getSource());\n+            }\n+            if (node instanceof SemiJoinNode) {\n+                return getTableHandleFromSource(((SemiJoinNode) node).getSource());\n+            }\n+            if (node instanceof JoinNode) {\n+                JoinNode joinNode = (JoinNode) node;\n+                if (joinNode.getType() == JoinNode.Type.INNER && isAtMostScalar(joinNode.getRight())) {\n+                    return getTableHandleFromSource(joinNode.getLeft());\n+                }\n+            }\n+            throw new IllegalArgumentException(\"In getTableHandleFromSource, invalid descendant for DeleteNode or UpdateNode: \" + node.getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODMzMA==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588330", "createdAt": "2020-11-19T04:34:39Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "diffHunk": "@@ -195,7 +225,39 @@ private WriterTarget createWriterTarget(WriterTarget target)\n             throw new IllegalArgumentException(\"Unhandled target type: \" + target.getClass().getSimpleName());\n         }\n \n-        private PlanNode rewriteDeleteTableScan(PlanNode node, TableHandle handle)\n+        private TableHandle getTableHandleFromSource(PlanNode node)\n+        {\n+            if (node instanceof TableScanNode) {\n+                return ((TableScanNode) node).getTable();\n+            }\n+            if (node instanceof DeleteNode) {\n+                return getTableHandleFromSource(((DeleteNode) node).getSource());\n+            }\n+            if (node instanceof UpdateNode) {\n+                return getTableHandleFromSource(((UpdateNode) node).getSource());\n+            }\n+            if (node instanceof ExchangeNode) {\n+                return getTableHandleFromSource(node.getSources().get(0));\n+            }\n+            if (node instanceof FilterNode) {\n+                return getTableHandleFromSource(((FilterNode) node).getSource());\n+            }\n+            if (node instanceof ProjectNode) {\n+                return getTableHandleFromSource(((ProjectNode) node).getSource());\n+            }\n+            if (node instanceof SemiJoinNode) {\n+                return getTableHandleFromSource(((SemiJoinNode) node).getSource());\n+            }\n+            if (node instanceof JoinNode) {\n+                JoinNode joinNode = (JoinNode) node;\n+                if (joinNode.getType() == JoinNode.Type.INNER && isAtMostScalar(joinNode.getRight())) {\n+                    return getTableHandleFromSource(joinNode.getLeft());\n+                }\n+            }\n+            throw new IllegalArgumentException(\"In getTableHandleFromSource, invalid descendant for DeleteNode or UpdateNode: \" + node.getClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTU4Ng=="}, "originalCommit": null, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE4ODMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MzozM1rOH2IETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDo0M1rOH2MZvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNzMyNg==", "bodyText": "Use getOnlyElement() from Iterables so we fail if there are multiple sources", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526517326", "createdAt": "2020-11-19T00:43:33Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "diffHunk": "@@ -195,7 +225,39 @@ private WriterTarget createWriterTarget(WriterTarget target)\n             throw new IllegalArgumentException(\"Unhandled target type: \" + target.getClass().getSimpleName());\n         }\n \n-        private PlanNode rewriteDeleteTableScan(PlanNode node, TableHandle handle)\n+        private TableHandle getTableHandleFromSource(PlanNode node)\n+        {\n+            if (node instanceof TableScanNode) {\n+                return ((TableScanNode) node).getTable();\n+            }\n+            if (node instanceof DeleteNode) {\n+                return getTableHandleFromSource(((DeleteNode) node).getSource());\n+            }\n+            if (node instanceof UpdateNode) {\n+                return getTableHandleFromSource(((UpdateNode) node).getSource());\n+            }\n+            if (node instanceof ExchangeNode) {\n+                return getTableHandleFromSource(node.getSources().get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODM1MA==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588350", "createdAt": "2020-11-19T04:34:43Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "diffHunk": "@@ -195,7 +225,39 @@ private WriterTarget createWriterTarget(WriterTarget target)\n             throw new IllegalArgumentException(\"Unhandled target type: \" + target.getClass().getSimpleName());\n         }\n \n-        private PlanNode rewriteDeleteTableScan(PlanNode node, TableHandle handle)\n+        private TableHandle getTableHandleFromSource(PlanNode node)\n+        {\n+            if (node instanceof TableScanNode) {\n+                return ((TableScanNode) node).getTable();\n+            }\n+            if (node instanceof DeleteNode) {\n+                return getTableHandleFromSource(((DeleteNode) node).getSource());\n+            }\n+            if (node instanceof UpdateNode) {\n+                return getTableHandleFromSource(((UpdateNode) node).getSource());\n+            }\n+            if (node instanceof ExchangeNode) {\n+                return getTableHandleFromSource(node.getSources().get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNzMyNg=="}, "originalCommit": null, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE5NjkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/UpdateNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0NzowN1rOH2IJMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDo0N1rOH2MZyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxODU3OQ==", "bodyText": "Make defensive copies of all lists", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526518579", "createdAt": "2020-11-19T00:47:07Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/UpdateNode.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.plan;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TableWriterNode.UpdateTarget;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Immutable\n+public class UpdateNode\n+        extends PlanNode\n+{\n+    private final PlanNode source;\n+    private final UpdateTarget target;\n+    private final Symbol rowId;\n+    private final List<Symbol> projectedSymbols;\n+    private final List<Integer> updateExpressionChannelNumbers;\n+    private final List<Symbol> outputs;\n+\n+    @JsonCreator\n+    public UpdateNode(\n+            @JsonProperty(\"id\") PlanNodeId id,\n+            @JsonProperty(\"source\") PlanNode source,\n+            @JsonProperty(\"target\") UpdateTarget target,\n+            @JsonProperty(\"rowId\") Symbol rowId,\n+            @JsonProperty(\"projectedSymbols\") List<Symbol> projectedSymbols,\n+            @JsonProperty(\"updateExpressionChannelNumbers\") List<Integer> updateExpressionChannelNumbers,\n+            @JsonProperty(\"outputs\") List<Symbol> outputs)\n+    {\n+        super(id);\n+\n+        this.source = requireNonNull(source, \"source is null\");\n+        this.target = requireNonNull(target, \"target is null\");\n+        this.rowId = requireNonNull(rowId, \"rowId is null\");\n+        this.projectedSymbols = requireNonNull(projectedSymbols, \"projectedSymbols is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODM2Mw==", "bodyText": "Copied.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588363", "createdAt": "2020-11-19T04:34:47Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/UpdateNode.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.plan;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TableWriterNode.UpdateTarget;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Immutable\n+public class UpdateNode\n+        extends PlanNode\n+{\n+    private final PlanNode source;\n+    private final UpdateTarget target;\n+    private final Symbol rowId;\n+    private final List<Symbol> projectedSymbols;\n+    private final List<Integer> updateExpressionChannelNumbers;\n+    private final List<Symbol> outputs;\n+\n+    @JsonCreator\n+    public UpdateNode(\n+            @JsonProperty(\"id\") PlanNodeId id,\n+            @JsonProperty(\"source\") PlanNode source,\n+            @JsonProperty(\"target\") UpdateTarget target,\n+            @JsonProperty(\"rowId\") Symbol rowId,\n+            @JsonProperty(\"projectedSymbols\") List<Symbol> projectedSymbols,\n+            @JsonProperty(\"updateExpressionChannelNumbers\") List<Integer> updateExpressionChannelNumbers,\n+            @JsonProperty(\"outputs\") List<Symbol> outputs)\n+    {\n+        super(id);\n+\n+        this.source = requireNonNull(source, \"source is null\");\n+        this.target = requireNonNull(target, \"target is null\");\n+        this.rowId = requireNonNull(rowId, \"rowId is null\");\n+        this.projectedSymbols = requireNonNull(projectedSymbols, \"projectedSymbols is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxODU3OQ=="}, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE5OTc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/ValidateDependenciesChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0ODozNVrOH2IK9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNDo1N1rOH2MZ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxOTAyOA==", "bodyText": "Should we validate that the row ID is present, like visitDelete does? Also, should the projectedSymbols be validated? (see other methods for examples of checks)", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526519028", "createdAt": "2020-11-19T00:48:35Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/ValidateDependenciesChecker.java", "diffHunk": "@@ -573,6 +574,15 @@ public Void visitDelete(DeleteNode node, Set<Symbol> boundSymbols)\n             return null;\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Set<Symbol> boundSymbols)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODQxMw==", "bodyText": "I added validation of row ID.  Validation of projectedSymbols will take a bit more thought.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588413", "createdAt": "2020-11-19T04:34:57Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/ValidateDependenciesChecker.java", "diffHunk": "@@ -573,6 +574,15 @@ public Void visitDelete(DeleteNode node, Set<Symbol> boundSymbols)\n             return null;\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Set<Symbol> boundSymbols)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxOTAyOA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIwNTcxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/resourcegroups/QueryType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1MToxNFrOH2IOgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNTowMlrOH2MaGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxOTkzOA==", "bodyText": "Put this after INSERT", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526519938", "createdAt": "2020-11-19T00:51:14Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/resourcegroups/QueryType.java", "diffHunk": "@@ -21,5 +21,6 @@\n     EXPLAIN,\n     ANALYZE,\n     INSERT,\n-    SELECT\n+    SELECT,\n+    UPDATE", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODQ0Mw==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588443", "createdAt": "2020-11-19T04:35:02Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/resourcegroups/QueryType.java", "diffHunk": "@@ -21,5 +21,6 @@\n     EXPLAIN,\n     ANALYZE,\n     INSERT,\n-    SELECT\n+    SELECT,\n+    UPDATE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxOTkzOA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIwNzAzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/UpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1MTo1MFrOH2IPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNTowN1rOH2MaKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDExNw==", "bodyText": "Make deleteRows default as well, allowing a connector to implement update but not delete", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526520117", "createdAt": "2020-11-19T00:51:50Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/UpdatablePageSource.java", "diffHunk": "@@ -24,6 +25,11 @@\n {\n     void deleteRows(Block rowIds);\n \n+    default void updateRows(Page page)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODQ1Nw==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588457", "createdAt": "2020-11-19T04:35:07Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/UpdatablePageSource.java", "diffHunk": "@@ -24,6 +25,11 @@\n {\n     void deleteRows(Block rowIds);\n \n+    default void updateRows(Page page)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDExNw=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIwODA2OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/EmptyPageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1MjoyMFrOH2IP3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNToxMVrOH2MaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDI4NQ==", "bodyText": "This should probably throw, like deleteRows", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526520285", "createdAt": "2020-11-19T00:52:20Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/EmptyPageSource.java", "diffHunk": "@@ -32,6 +32,9 @@ public void deleteRows(Block rowIds)\n         throw new UnsupportedOperationException(\"deleteRows called on EmptyPageSource\");\n     }\n \n+    @Override\n+    public void updateRows(Page page) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODQ3Mw==", "bodyText": "Throwing.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588473", "createdAt": "2020-11-19T04:35:11Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/EmptyPageSource.java", "diffHunk": "@@ -32,6 +32,9 @@ public void deleteRows(Block rowIds)\n         throw new UnsupportedOperationException(\"deleteRows called on EmptyPageSource\");\n     }\n \n+    @Override\n+    public void updateRows(Page page) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDI4NQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIwOTMwOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1Mjo1MlrOH2IQlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNToxNVrOH2MaSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDQ2OA==", "bodyText": "Move these methods above, to be after finishDelete", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526520468", "createdAt": "2020-11-19T00:52:52Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -1045,4 +1055,38 @@ default MaterializedViewFreshness getMaterializedViewFreshness(ConnectorSession\n     {\n         return new MaterializedViewFreshness(false);\n     }\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODQ5MA==", "bodyText": "Moved.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588490", "createdAt": "2020-11-19T04:35:15Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -1045,4 +1055,38 @@ default MaterializedViewFreshness getMaterializedViewFreshness(ConnectorSession\n     {\n         return new MaterializedViewFreshness(false);\n     }\n+\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDQ2OA=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIxMTE4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1Mzo1MlrOH2IRzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNToxOVrOH2MaUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDc4Mw==", "bodyText": "This can be shortened to\n@param updateExpressionChannelNumbers provides the ...", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526520783", "createdAt": "2020-11-19T00:53:52Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -1045,4 +1055,38 @@ default MaterializedViewFreshness getMaterializedViewFreshness(ConnectorSession\n     {\n         return new MaterializedViewFreshness(false);\n     }\n+\n+    /**\n+     * Do whatever is necessary to start an UPDATE query, returning the {@link ConnectorTableHandle}\n+     * instance that will be passed to split generation, and to the {@link #finishUpdate} method.\n+     * @param session The session in which to start the update operation.\n+     * @param tableHandle A ConnectorTableHandle for the table to be updated.\n+     * @param updatedColumns A list of the ColumnHandles of columns that will be updated by this UPDATE\n+     * operation, in table column order.\n+     * @param updateExpressionChannelNumbers updateExpressionChannelNumbers provides the channel", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODQ5OQ==", "bodyText": "Shortened.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588499", "createdAt": "2020-11-19T04:35:19Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -1045,4 +1055,38 @@ default MaterializedViewFreshness getMaterializedViewFreshness(ConnectorSession\n     {\n         return new MaterializedViewFreshness(false);\n     }\n+\n+    /**\n+     * Do whatever is necessary to start an UPDATE query, returning the {@link ConnectorTableHandle}\n+     * instance that will be passed to split generation, and to the {@link #finishUpdate} method.\n+     * @param session The session in which to start the update operation.\n+     * @param tableHandle A ConnectorTableHandle for the table to be updated.\n+     * @param updatedColumns A list of the ColumnHandles of columns that will be updated by this UPDATE\n+     * operation, in table column order.\n+     * @param updateExpressionChannelNumbers updateExpressionChannelNumbers provides the channel", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDc4Mw=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIxNDkwOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1NToxNlrOH2IT3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNToyM1rOH2MaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMTMwOA==", "bodyText": "Change the last sentence to\n\nThe last element of the list is the channel number of the rowId column.\n\nRepeating the parameter name is redundant, and row ID might not be a row block (it can be any type).", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526521308", "createdAt": "2020-11-19T00:55:16Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -1045,4 +1055,38 @@ default MaterializedViewFreshness getMaterializedViewFreshness(ConnectorSession\n     {\n         return new MaterializedViewFreshness(false);\n     }\n+\n+    /**\n+     * Do whatever is necessary to start an UPDATE query, returning the {@link ConnectorTableHandle}\n+     * instance that will be passed to split generation, and to the {@link #finishUpdate} method.\n+     * @param session The session in which to start the update operation.\n+     * @param tableHandle A ConnectorTableHandle for the table to be updated.\n+     * @param updatedColumns A list of the ColumnHandles of columns that will be updated by this UPDATE\n+     * operation, in table column order.\n+     * @param updateExpressionChannelNumbers updateExpressionChannelNumbers provides the channel\n+     * numbers in the final projected page produced by the Presto engine and passed to\n+     * {@link UpdatablePageSource#updateRows}.  There is a channel number for column handle in {#link #updatedColumns},\n+     * in the same order as the updatedColumns list.  The last element of the updateExpressionChannelNumbers\n+     * list is the channel number of the RowBlock containing the rowId column.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODUxNQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588515", "createdAt": "2020-11-19T04:35:23Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -1045,4 +1055,38 @@ default MaterializedViewFreshness getMaterializedViewFreshness(ConnectorSession\n     {\n         return new MaterializedViewFreshness(false);\n     }\n+\n+    /**\n+     * Do whatever is necessary to start an UPDATE query, returning the {@link ConnectorTableHandle}\n+     * instance that will be passed to split generation, and to the {@link #finishUpdate} method.\n+     * @param session The session in which to start the update operation.\n+     * @param tableHandle A ConnectorTableHandle for the table to be updated.\n+     * @param updatedColumns A list of the ColumnHandles of columns that will be updated by this UPDATE\n+     * operation, in table column order.\n+     * @param updateExpressionChannelNumbers updateExpressionChannelNumbers provides the channel\n+     * numbers in the final projected page produced by the Presto engine and passed to\n+     * {@link UpdatablePageSource#updateRows}.  There is a channel number for column handle in {#link #updatedColumns},\n+     * in the same order as the updatedColumns list.  The last element of the updateExpressionChannelNumbers\n+     * list is the channel number of the RowBlock containing the rowId column.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMTMwOA=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIxNzA1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1NjowOVrOH2IVIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNToyOVrOH2MamQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMTYzMw==", "bodyText": "Shorten to\n@return a ConnectorTableHandle that ...\n\nThe \"Returns\" part is redundant for @return", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526521633", "createdAt": "2020-11-19T00:56:09Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -1045,4 +1055,38 @@ default MaterializedViewFreshness getMaterializedViewFreshness(ConnectorSession\n     {\n         return new MaterializedViewFreshness(false);\n     }\n+\n+    /**\n+     * Do whatever is necessary to start an UPDATE query, returning the {@link ConnectorTableHandle}\n+     * instance that will be passed to split generation, and to the {@link #finishUpdate} method.\n+     * @param session The session in which to start the update operation.\n+     * @param tableHandle A ConnectorTableHandle for the table to be updated.\n+     * @param updatedColumns A list of the ColumnHandles of columns that will be updated by this UPDATE\n+     * operation, in table column order.\n+     * @param updateExpressionChannelNumbers updateExpressionChannelNumbers provides the channel\n+     * numbers in the final projected page produced by the Presto engine and passed to\n+     * {@link UpdatablePageSource#updateRows}.  There is a channel number for column handle in {#link #updatedColumns},\n+     * in the same order as the updatedColumns list.  The last element of the updateExpressionChannelNumbers\n+     * list is the channel number of the RowBlock containing the rowId column.\n+     * @return Returns a ConnectorTableHandle that will be passed to split generation, and to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODU2OQ==", "bodyText": "Shortened.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588569", "createdAt": "2020-11-19T04:35:29Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -1045,4 +1055,38 @@ default MaterializedViewFreshness getMaterializedViewFreshness(ConnectorSession\n     {\n         return new MaterializedViewFreshness(false);\n     }\n+\n+    /**\n+     * Do whatever is necessary to start an UPDATE query, returning the {@link ConnectorTableHandle}\n+     * instance that will be passed to split generation, and to the {@link #finishUpdate} method.\n+     * @param session The session in which to start the update operation.\n+     * @param tableHandle A ConnectorTableHandle for the table to be updated.\n+     * @param updatedColumns A list of the ColumnHandles of columns that will be updated by this UPDATE\n+     * operation, in table column order.\n+     * @param updateExpressionChannelNumbers updateExpressionChannelNumbers provides the channel\n+     * numbers in the final projected page produced by the Presto engine and passed to\n+     * {@link UpdatablePageSource#updateRows}.  There is a channel number for column handle in {#link #updatedColumns},\n+     * in the same order as the updatedColumns list.  The last element of the updateExpressionChannelNumbers\n+     * list is the channel number of the RowBlock containing the rowId column.\n+     * @return Returns a ConnectorTableHandle that will be passed to split generation, and to the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMTYzMw=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIyMTkxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1ODoxNlrOH2IYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNTozNFrOH2Masw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMjM4Mg==", "bodyText": "You could use join() from String. But instead, just pass updatedColumnNames directly to format(), since that will format nicely with [] around it for readability.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526522382", "createdAt": "2020-11-19T00:58:16Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -303,6 +304,17 @@ public static void denyDeleteTable(String tableName, String extraInfo)\n         throw new AccessDeniedException(format(\"Cannot delete from table %s%s\", tableName, formatExtraInfo(extraInfo)));\n     }\n \n+    public static void denyUpdateTableColumns(String tableName, Set<String> updatedColumnNames)\n+    {\n+        denyUpdateTableColumns(tableName, updatedColumnNames, null);\n+    }\n+\n+    public static void denyUpdateTableColumns(String tableName, Set<String> updatedColumnNames, String extraInfo)\n+    {\n+        String columnsString = updatedColumnNames.stream().collect(joining(\", \"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODU5NQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588595", "createdAt": "2020-11-19T04:35:34Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -303,6 +304,17 @@ public static void denyDeleteTable(String tableName, String extraInfo)\n         throw new AccessDeniedException(format(\"Cannot delete from table %s%s\", tableName, formatExtraInfo(extraInfo)));\n     }\n \n+    public static void denyUpdateTableColumns(String tableName, Set<String> updatedColumnNames)\n+    {\n+        denyUpdateTableColumns(tableName, updatedColumnNames, null);\n+    }\n+\n+    public static void denyUpdateTableColumns(String tableName, Set<String> updatedColumnNames, String extraInfo)\n+    {\n+        String columnsString = updatedColumnNames.stream().collect(joining(\", \"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMjM4Mg=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIyNDQ4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/StandardErrorCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1OToyOFrOH2IZpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNTozOVrOH2MayQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMjc4OQ==", "bodyText": "These are all Hive specific errors, so not appropriate for the engine. But I think it's fine to just use NOT_SUPPORTED", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526522789", "createdAt": "2020-11-19T00:59:28Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/StandardErrorCode.java", "diffHunk": "@@ -112,6 +112,9 @@\n     NESTED_RECURSIVE(89, USER_ERROR),\n     INVALID_LIMIT_CLAUSE(90, USER_ERROR),\n     INVALID_ORDER_BY(91, USER_ERROR),\n+    UPDATE_OF_PARTITION_COLUMNS(92, USER_ERROR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODYxNw==", "bodyText": "Removed, and uses changed to NOT_SUPPORTED.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588617", "createdAt": "2020-11-19T04:35:39Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/StandardErrorCode.java", "diffHunk": "@@ -112,6 +112,9 @@\n     NESTED_RECURSIVE(89, USER_ERROR),\n     INVALID_LIMIT_CLAUSE(90, USER_ERROR),\n     INVALID_ORDER_BY(91, USER_ERROR),\n+    UPDATE_OF_PARTITION_COLUMNS(92, USER_ERROR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMjc4OQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIzMTY0OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/UpdateAssignment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowMjo0MlrOH2Id5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNTo0NFrOH2Ma1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMzg3Nw==", "bodyText": "It might be nicer to format like\nreturn format(\"%s = %s\", name, value);", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526523877", "createdAt": "2020-11-19T01:02:42Z", "author": {"login": "electrum"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/UpdateAssignment.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateAssignment\n+        extends Node\n+{\n+    private final Identifier name;\n+    private final Expression value;\n+\n+    public UpdateAssignment(Identifier name, Expression value)\n+    {\n+        this(Optional.empty(), name, value);\n+    }\n+\n+    public UpdateAssignment(NodeLocation location, Identifier name, Expression value)\n+    {\n+        this(Optional.of(location), name, value);\n+    }\n+\n+    private UpdateAssignment(Optional<NodeLocation> location, Identifier name, Expression value)\n+    {\n+        super(location);\n+        this.name = requireNonNull(name, \"name is null\");\n+        this.value = requireNonNull(value, \"value is null\");\n+    }\n+\n+    public Identifier getName()\n+    {\n+        return name;\n+    }\n+\n+    public Expression getValue()\n+    {\n+        return value;\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context)\n+    {\n+        return visitor.visitUpdateAssignment(this, context);\n+    }\n+\n+    @Override\n+    public List<? extends Node> getChildren()\n+    {\n+        return ImmutableList.of(name, value);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj)\n+    {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        UpdateAssignment other = (UpdateAssignment) obj;\n+        return Objects.equals(name, other.name) &&\n+                Objects.equals(value, other.value);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(name, value);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODYzMQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588631", "createdAt": "2020-11-19T04:35:44Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/UpdateAssignment.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateAssignment\n+        extends Node\n+{\n+    private final Identifier name;\n+    private final Expression value;\n+\n+    public UpdateAssignment(Identifier name, Expression value)\n+    {\n+        this(Optional.empty(), name, value);\n+    }\n+\n+    public UpdateAssignment(NodeLocation location, Identifier name, Expression value)\n+    {\n+        this(Optional.of(location), name, value);\n+    }\n+\n+    private UpdateAssignment(Optional<NodeLocation> location, Identifier name, Expression value)\n+    {\n+        super(location);\n+        this.name = requireNonNull(name, \"name is null\");\n+        this.value = requireNonNull(value, \"value is null\");\n+    }\n+\n+    public Identifier getName()\n+    {\n+        return name;\n+    }\n+\n+    public Expression getValue()\n+    {\n+        return value;\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context)\n+    {\n+        return visitor.visitUpdateAssignment(this, context);\n+    }\n+\n+    @Override\n+    public List<? extends Node> getChildren()\n+    {\n+        return ImmutableList.of(name, value);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj)\n+    {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        UpdateAssignment other = (UpdateAssignment) obj;\n+        return Objects.equals(name, other.name) &&\n+                Objects.equals(value, other.value);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(name, value);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMzg3Nw=="}, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIzMzE4OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/Update.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowMzozNlrOH2Ie7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNTo0OFrOH2Ma8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNDE0Mw==", "bodyText": "Make this\n.add(\"where\", where.orElse(null))\n.omitNullValues()\n.toString()", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526524143", "createdAt": "2020-11-19T01:03:36Z", "author": {"login": "electrum"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/Update.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class Update\n+        extends Statement\n+{\n+    private final Table table;\n+    private final List<UpdateAssignment> assignments;\n+    private final Optional<Expression> where;\n+\n+    public Update(Table table, List<UpdateAssignment> assignments, Optional<Expression> where)\n+    {\n+        this(Optional.empty(), table, assignments, where);\n+    }\n+\n+    public Update(NodeLocation location, Table table, List<UpdateAssignment> assignments, Optional<Expression> where)\n+    {\n+        this(Optional.of(location), table, assignments, where);\n+    }\n+\n+    private Update(Optional<NodeLocation> location, Table table, List<UpdateAssignment> assignments, Optional<Expression> where)\n+    {\n+        super(location);\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.assignments = requireNonNull(assignments, \"targets is null\");\n+        this.where = requireNonNull(where, \"where is null\");\n+    }\n+\n+    public Table getTable()\n+    {\n+        return table;\n+    }\n+\n+    public List<UpdateAssignment> getAssignments()\n+    {\n+        return assignments;\n+    }\n+\n+    public Optional<Expression> getWhere()\n+    {\n+        return where;\n+    }\n+\n+    @Override\n+    public List<? extends Node> getChildren()\n+    {\n+        ImmutableList.Builder<Node> nodes = ImmutableList.builder();\n+        nodes.addAll(assignments);\n+        where.ifPresent(nodes::add);\n+        return nodes.build();\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context)\n+    {\n+        return visitor.visitUpdate(this, context);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        Update update = (Update) o;\n+        return table.equals(update.table) &&\n+                assignments.equals(update.assignments) &&\n+                where.equals(update.where);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(table, assignments, where);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"table\", table)\n+                .add(\"assignments\", assignments)\n+                .add(\"where\", where)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODY1Ng==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588656", "createdAt": "2020-11-19T04:35:48Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/Update.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class Update\n+        extends Statement\n+{\n+    private final Table table;\n+    private final List<UpdateAssignment> assignments;\n+    private final Optional<Expression> where;\n+\n+    public Update(Table table, List<UpdateAssignment> assignments, Optional<Expression> where)\n+    {\n+        this(Optional.empty(), table, assignments, where);\n+    }\n+\n+    public Update(NodeLocation location, Table table, List<UpdateAssignment> assignments, Optional<Expression> where)\n+    {\n+        this(Optional.of(location), table, assignments, where);\n+    }\n+\n+    private Update(Optional<NodeLocation> location, Table table, List<UpdateAssignment> assignments, Optional<Expression> where)\n+    {\n+        super(location);\n+        this.table = requireNonNull(table, \"table is null\");\n+        this.assignments = requireNonNull(assignments, \"targets is null\");\n+        this.where = requireNonNull(where, \"where is null\");\n+    }\n+\n+    public Table getTable()\n+    {\n+        return table;\n+    }\n+\n+    public List<UpdateAssignment> getAssignments()\n+    {\n+        return assignments;\n+    }\n+\n+    public Optional<Expression> getWhere()\n+    {\n+        return where;\n+    }\n+\n+    @Override\n+    public List<? extends Node> getChildren()\n+    {\n+        ImmutableList.Builder<Node> nodes = ImmutableList.builder();\n+        nodes.addAll(assignments);\n+        where.ifPresent(nodes::add);\n+        return nodes.build();\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context)\n+    {\n+        return visitor.visitUpdate(this, context);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        Update update = (Update) o;\n+        return table.equals(update.table) &&\n+                assignments.equals(update.assignments) &&\n+                where.equals(update.where);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(table, assignments, where);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"table\", table)\n+                .add(\"assignments\", assignments)\n+                .add(\"where\", where)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNDE0Mw=="}, "originalCommit": null, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTI0MjU0OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowNzo1MVrOH2IkVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNTo1MVrOH2Ma_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNTUyNw==", "bodyText": "We should only output a blank line if there is a WHERE\nif (node.getWhere().isPresent()) {\n    builder.append(\"\\nWHERE \").append(...);\n}", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526525527", "createdAt": "2020-11-19T01:07:51Z", "author": {"login": "electrum"}, "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -1219,6 +1220,28 @@ protected Void visitInsert(Insert node, Integer indent)\n             return null;\n         }\n \n+        @Override\n+        protected Void visitUpdate(Update node, Integer indent)\n+        {\n+            builder.append(\"UPDATE \")\n+                    .append(node.getTable().getName());\n+\n+            builder.append(\"\\n\")\n+                    .append(indentString(indent + 1))\n+                    .append(\"SET \");\n+            builder.append(node.getAssignments().stream()\n+                    .map(assignment -> format(\"%s = %s\", assignment.getName().getValue(), formatExpression(assignment.getValue())))\n+                    .collect(joining(\", \")));\n+            builder.append(\"\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODY2OQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588669", "createdAt": "2020-11-19T04:35:51Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -1219,6 +1220,28 @@ protected Void visitInsert(Insert node, Integer indent)\n             return null;\n         }\n \n+        @Override\n+        protected Void visitUpdate(Update node, Integer indent)\n+        {\n+            builder.append(\"UPDATE \")\n+                    .append(node.getTable().getName());\n+\n+            builder.append(\"\\n\")\n+                    .append(indentString(indent + 1))\n+                    .append(\"SET \");\n+            builder.append(node.getAssignments().stream()\n+                    .map(assignment -> format(\"%s = %s\", assignment.getName().getValue(), formatExpression(assignment.getValue())))\n+                    .collect(joining(\", \")));\n+            builder.append(\"\\n\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNTUyNw=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTI0MjkxOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowNzo1OVrOH2Ikiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNTo1NVrOH2MbEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNTU3OQ==", "bodyText": "We shouldn't add a trailing newline", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526525579", "createdAt": "2020-11-19T01:07:59Z", "author": {"login": "electrum"}, "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -1219,6 +1220,28 @@ protected Void visitInsert(Insert node, Integer indent)\n             return null;\n         }\n \n+        @Override\n+        protected Void visitUpdate(Update node, Integer indent)\n+        {\n+            builder.append(\"UPDATE \")\n+                    .append(node.getTable().getName());\n+\n+            builder.append(\"\\n\")\n+                    .append(indentString(indent + 1))\n+                    .append(\"SET \");\n+            builder.append(node.getAssignments().stream()\n+                    .map(assignment -> format(\"%s = %s\", assignment.getName().getValue(), formatExpression(assignment.getValue())))\n+                    .collect(joining(\", \")));\n+            builder.append(\"\\n\")\n+                    .append(indentString(indent));\n+            if (node.getWhere().isPresent()) {\n+                builder.append(\"WHERE \").append(formatExpression(node.getWhere().get()));\n+            }\n+            builder.append(\"\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODY4OA==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588688", "createdAt": "2020-11-19T04:35:55Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -1219,6 +1220,28 @@ protected Void visitInsert(Insert node, Integer indent)\n             return null;\n         }\n \n+        @Override\n+        protected Void visitUpdate(Update node, Integer indent)\n+        {\n+            builder.append(\"UPDATE \")\n+                    .append(node.getTable().getName());\n+\n+            builder.append(\"\\n\")\n+                    .append(indentString(indent + 1))\n+                    .append(\"SET \");\n+            builder.append(node.getAssignments().stream()\n+                    .map(assignment -> format(\"%s = %s\", assignment.getName().getValue(), formatExpression(assignment.getValue())))\n+                    .collect(joining(\", \")));\n+            builder.append(\"\\n\")\n+                    .append(indentString(indent));\n+            if (node.getWhere().isPresent()) {\n+                builder.append(\"WHERE \").append(formatExpression(node.getWhere().get()));\n+            }\n+            builder.append(\"\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNTU3OQ=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTI0MzcwOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowODoxOFrOH2IlAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNTo1OVrOH2MbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNTY5Ng==", "bodyText": "Add another one without a WHERE", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526525696", "createdAt": "2020-11-19T01:08:18Z", "author": {"login": "electrum"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "diffHunk": "@@ -2710,6 +2712,23 @@ public void testNullTreatment()\n                         ImmutableList.of(new Identifier(\"x\"), new LongLiteral(\"1\"))));\n     }\n \n+    @Test\n+    public void testUpdate()\n+    {\n+        assertStatement(\"\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODY5OQ==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588699", "createdAt": "2020-11-19T04:35:59Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "diffHunk": "@@ -2710,6 +2712,23 @@ public void testNullTreatment()\n                         ImmutableList.of(new Identifier(\"x\"), new LongLiteral(\"1\"))));\n     }\n \n+    @Test\n+    public void testUpdate()\n+    {\n+        assertStatement(\"\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNTY5Ng=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTI0NjU3OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowOTo0M1rOH2Imsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNjowMlrOH2MbKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNjEzMQ==", "bodyText": "Let's put each one on a separate line, so it looks like\nUPDATE foo SET\n    abc = 123,\n    xyz = 456\nWHERE something", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526526131", "createdAt": "2020-11-19T01:09:43Z", "author": {"login": "electrum"}, "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -1219,6 +1220,28 @@ protected Void visitInsert(Insert node, Integer indent)\n             return null;\n         }\n \n+        @Override\n+        protected Void visitUpdate(Update node, Integer indent)\n+        {\n+            builder.append(\"UPDATE \")\n+                    .append(node.getTable().getName());\n+\n+            builder.append(\"\\n\")\n+                    .append(indentString(indent + 1))\n+                    .append(\"SET \");\n+            builder.append(node.getAssignments().stream()\n+                    .map(assignment -> format(\"%s = %s\", assignment.getName().getValue(), formatExpression(assignment.getValue())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODcxMg==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588712", "createdAt": "2020-11-19T04:36:02Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -1219,6 +1220,28 @@ protected Void visitInsert(Insert node, Integer indent)\n             return null;\n         }\n \n+        @Override\n+        protected Void visitUpdate(Update node, Integer indent)\n+        {\n+            builder.append(\"UPDATE \")\n+                    .append(node.getTable().getName());\n+\n+            builder.append(\"\\n\")\n+                    .append(indentString(indent + 1))\n+                    .append(\"SET \");\n+            builder.append(node.getAssignments().stream()\n+                    .map(assignment -> format(\"%s = %s\", assignment.getName().getValue(), formatExpression(assignment.getValue())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNjEzMQ=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTI0Nzc2OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMToxMDoxNFrOH2InXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNjowNlrOH2MbLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNjMwMw==", "bodyText": "This seems to be unused", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526526303", "createdAt": "2020-11-19T01:10:14Z", "author": {"login": "electrum"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -598,6 +605,7 @@ DATA: 'DATA';\n DATE: 'DATE';\n DAY: 'DAY';\n DEALLOCATE: 'DEALLOCATE';\n+DEFAULT: 'DEFAULT';", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODcxOA==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588718", "createdAt": "2020-11-19T04:36:06Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -598,6 +605,7 @@ DATA: 'DATA';\n DATE: 'DATE';\n DAY: 'DAY';\n DEALLOCATE: 'DEALLOCATE';\n+DEFAULT: 'DEFAULT';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNjMwMw=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTI1MDQxOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMToxMTozMlrOH2Io_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDozNjowOVrOH2MbOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNjcxOA==", "bodyText": "I'd format this so the assignment list is together\n| UPDATE qualifiedName\n    SET updateAssignment (',' updateAssignment)*\n    (WHERE where=booleanExpression)?                               #update", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526526718", "createdAt": "2020-11-19T01:11:32Z", "author": {"login": "electrum"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -140,6 +140,10 @@ statement\n     | DESCRIBE INPUT identifier                                        #describeInput\n     | DESCRIBE OUTPUT identifier                                       #describeOutput\n     | SET PATH pathSpecification                                       #setPath\n+    | UPDATE qualifiedName", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4ODczMA==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526588730", "createdAt": "2020-11-19T04:36:09Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -140,6 +140,10 @@ statement\n     | DESCRIBE INPUT identifier                                        #describeInput\n     | DESCRIBE OUTPUT identifier                                       #describeOutput\n     | SET PATH pathSpecification                                       #setPath\n+    | UPDATE qualifiedName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNjcxOA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjU3NDMwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTo0NzoyN1rOH2UxkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxNDoyNFrOH20DzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTUyMQ==", "bodyText": "Should we overload the rowId columnHandle abstraction with the \"any other fields of the row that the connector will need to complete the UPDATE operation\" or have a separate abstraction for the same which could be optional? Ideally the RowIdColumnHandle should only identify the updated rowIds", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526725521", "createdAt": "2020-11-19T09:47:27Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "diffHunk": "@@ -0,0 +1,203 @@\n+====================================\n+Supporting ``DELETE`` and ``UPDATE``\n+====================================\n+\n+The Presto engine provides APIs to support row-level SQL ``DELETE`` and ``UPDATE``.\n+To implement ``DELETE`` or ``UPDATE``, a connector must layer an ``UpdatablePageSource``\n+on top of the connector's usual ``ConnectorPageSource``, and define ``ConnectorMetadata``\n+methods to get a \"rowId\" column handle; to start the operation; and to finish the operation.\n+\n+``DELETE`` and ``UPDATE`` Data Flow\n+===================================\n+\n+``DELETE`` and ``UPDATE`` have a similar flow:\n+\n+* For each split, the connector will create an ``UpdatablePageSource`` instance, layered over the\n+  connector's ``ConnectorPageSource``, to read pages on behalf of the Presto engine, and to\n+  write deletions and/or updates to the underlying data store.\n+* The connector's ``UpdatablePageSource.getNextPage()`` implementation fetches the next page\n+  from the underlying ``ConnectorPageSource``, optionally reformats the page, and returns it\n+  to the Presto engine.\n+* The Presto engine performs filtering and projection on the page read, producing a page of filtered,\n+  projected results.\n+* The Presto engine passes that filtered, projected page of results to the connector's\n+  ``UpdatablePageSource`` ``deleteRows()`` or ``updateRows()`` method.  Those methods persist\n+  the deletions or updates in the underlying data store.\n+* When all the pages for a specific split have been processed, the Presto engine calls\n+  ``UpdatablePageSource.finish()``, which returns a ``Collection<Slice>`` of \"fragments\"\n+  representing connector-specific information about the rows processed by the calls to\n+  ``deleteRows`` or ``updateRows``.\n+* When all pages for all splits have been processed, the Presto engine calls ``ConnectorMetadata.finishDelete()`` or\n+  ``finishUpdate``, passing a collection containing all the \"fragments\" from all the splits.  The connector\n+  does what is required to finalize the operation, for example, committing the transaction.\n+\n+The rowId Column Abstraction\n+============================\n+\n+The Presto engine and connectors use a \"rowId\" column handle abstraction to agree on the identities of rows\n+to be updated or deleted.  The rowId column handle is opaque to the Presto engine.  Depending on the connector,\n+the rowId column handle abstraction could represent several physical columns.  For the JDBC connector, the rowId\n+column handle points might be the primary key for the table.  For deletion in Hive ACID tables, the rowId consists\n+of the three ACID columns that uniquely identify rows.\n+\n+The rowId Column for ``DELETE``\n+-------------------------------\n+\n+The Presto engine identifies the rows to be deleted using a connector-specific\n+rowId column handle, returned by the connector's ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+method, whose full signature is::\n+\n+    ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+The rowId Column for ``UPDATE``\n+-------------------------------\n+\n+The Presto engine identifies rows to be updated using a connector-specific rowId column handle,\n+returned by the connector's ``ConnectorMetadata.getUpdateRowIdColumnHandle()``\n+method.  In addition to the columns that identify the row, for ``UPDATE`` the rowId column will contain\n+any columns that the connector requires in order to perform the ``UPDATE`` operation.  In Hive ACID, for example,\n+the rowId column contains the values of all columns *not* updated by the ``UPDATE`` operation, since Hive ACID\n+implements ``UPDATE`` as a ``DELETE`` paired with an INSERT.\n+\n+UpdatablePageSource API\n+=======================\n+\n+As mentioned above, to support ``DELETE`` or ``UPDATE``, the connector must define a subclass of\n+``UpdatablePageSource``, layered over the connector's usual ``ConnectorPageSource``.  The interesting methods are:\n+\n+* ``Page getNextPage()``.  When the Presto engine calls ``getNextPage()``, the ``UpdatablePageSource`` calls\n+  its underlying ``ConnectorPageSource.getNextPage()`` method to get a page.  Some connectors will reformat\n+  the page before returning it to the Presto engine.\n+\n+* ``void deleteRows(Block rowIds)``.  The Presto engine calls the ``deleteRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page,  passing a block of \"rowIds\", created by the Presto engine based on the column\n+  handle returned by ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+\n+* ``void updateRows(Page page)``.  The Presto engine calls the ``updateRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page, passing a page of projected columns, one for each updated column and one for\n+  the rowId column.  The order of projected columns is defined by the Presto engine, and that order is reflected in the\n+  ``updateExpressionChannelNumbers`` argument to ``ConnectorMetadata.beginUpdate()``.  The job of ``updateRows()`` is to:\n+\n+  * Extract the updated column blocks and the rowId block from the projected page.\n+  * Assemble them in whatever order is required by the connector for storage.\n+  * Store the update result in the underlying file store.\n+\n+  In the case of Hive ACID, ``updateRows()`` stores a file of records that delete the\n+  previous contents of the updated rows, and a separate file that inserts completely\n+  new rows containing the updated and non-updated column values.\n+\n+* ``CompletableFuture<Collection<Slice>> finish()``.  The Presto engine calls ``finish()`` when all the pages\n+  of a split have been processed.  The connector returns a future containing a collection of ``Slice``, representing\n+  connector-specific information about the rows processed.  Usually this will include the row count, and might\n+  include information like the files or partitions created or changed.\n+\n+``ConnectorMetadata`` ``DELETE`` API\n+====================================\n+\n+A connector implementing ``DELETE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getDeleteRowIdColumnHandle()``::\n+\n+   ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be deleted, as\n+  well as any other fields of the row that the connector will need to complete the ``DELETE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  With the Hive connector and a Hive ACID table, for example, the ``DELETE`` rowId consists of the three ORC ACID columns\n+  that identify the row.\n+\n+* ``beginDelete()``::\n+\n+    ConnectorTableHandle beginDelete(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles)\n+\n+  As the last step in creating the ``DELETE`` execution plan, the connector's ``beginDelete()`` method is called.\n+  In addition to the ``session`` and ``tableHandle``, a map of all column hanedles is supplied.\n+\n+  ``beginDelete()`` performs any orchestration needed in the connector to start processing the ``DELETE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginDelete()``\n+  checks that the table is transactional and starts a Hive Metastore transaction.\n+\n+  ``beginDelete()`` returns a ``ConnectorTableHandle`` with any added information the connector needs when the handle\n+  is passed back to ``finishDelete()`` and the split generation machinery.  For most connectors, the returned table\n+  handle contains a flag identifying the table handle as a table handle for a ``DELETE`` operation.\n+\n+* ``finishDelete()``::\n+\n+      void finishDelete(\n+          ConnectorSession session,\n+          ConnectorTableHandle tableHandle,\n+          Collection<Slice> fragments)\n+\n+  During ``DELETE`` processing, the Presto engine accumulates the ``Slice`` collections returned by ``UpdatablePageSource.finish()``.\n+  After all splits have been processed, the engine calls ``finishDelete()``, passing the table handle and that\n+  collection of ``Slice`` fragments.  In response, the connector takes appropriate actions to complete the ``Delete`` operation.\n+  Those actions might include committing the transaction, assuming the connector supports a transaction paradigm.\n+\n+``ConnectorMetadata`` ``UPDATE`` API\n+====================================\n+\n+A connector implementing ``UPDATE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getUpdateRowIdColumnHandle``::\n+\n+   ColumnHandle getUpdateRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle,\n+        List<ColumnHandle> updatedColumns)\n+\n+  The ``updatedColumns`` list contains column handles for all columns updated by the ``UPDATE`` operation in table column order.\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be updated, as\n+  well as any other fields of the row that the connector will need to complete the ``UPDATE`` operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzMDI4Nw==", "bodyText": "The challenge is that some connectors won't have any other values.  For example, the JDBC connector may not need any other column values besides the SET  expressions, while the Hive connector needs the values of all columns that are not the targets of SET expressions.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526930287", "createdAt": "2020-11-19T14:30:08Z", "author": {"login": "djsstarburst"}, "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "diffHunk": "@@ -0,0 +1,203 @@\n+====================================\n+Supporting ``DELETE`` and ``UPDATE``\n+====================================\n+\n+The Presto engine provides APIs to support row-level SQL ``DELETE`` and ``UPDATE``.\n+To implement ``DELETE`` or ``UPDATE``, a connector must layer an ``UpdatablePageSource``\n+on top of the connector's usual ``ConnectorPageSource``, and define ``ConnectorMetadata``\n+methods to get a \"rowId\" column handle; to start the operation; and to finish the operation.\n+\n+``DELETE`` and ``UPDATE`` Data Flow\n+===================================\n+\n+``DELETE`` and ``UPDATE`` have a similar flow:\n+\n+* For each split, the connector will create an ``UpdatablePageSource`` instance, layered over the\n+  connector's ``ConnectorPageSource``, to read pages on behalf of the Presto engine, and to\n+  write deletions and/or updates to the underlying data store.\n+* The connector's ``UpdatablePageSource.getNextPage()`` implementation fetches the next page\n+  from the underlying ``ConnectorPageSource``, optionally reformats the page, and returns it\n+  to the Presto engine.\n+* The Presto engine performs filtering and projection on the page read, producing a page of filtered,\n+  projected results.\n+* The Presto engine passes that filtered, projected page of results to the connector's\n+  ``UpdatablePageSource`` ``deleteRows()`` or ``updateRows()`` method.  Those methods persist\n+  the deletions or updates in the underlying data store.\n+* When all the pages for a specific split have been processed, the Presto engine calls\n+  ``UpdatablePageSource.finish()``, which returns a ``Collection<Slice>`` of \"fragments\"\n+  representing connector-specific information about the rows processed by the calls to\n+  ``deleteRows`` or ``updateRows``.\n+* When all pages for all splits have been processed, the Presto engine calls ``ConnectorMetadata.finishDelete()`` or\n+  ``finishUpdate``, passing a collection containing all the \"fragments\" from all the splits.  The connector\n+  does what is required to finalize the operation, for example, committing the transaction.\n+\n+The rowId Column Abstraction\n+============================\n+\n+The Presto engine and connectors use a \"rowId\" column handle abstraction to agree on the identities of rows\n+to be updated or deleted.  The rowId column handle is opaque to the Presto engine.  Depending on the connector,\n+the rowId column handle abstraction could represent several physical columns.  For the JDBC connector, the rowId\n+column handle points might be the primary key for the table.  For deletion in Hive ACID tables, the rowId consists\n+of the three ACID columns that uniquely identify rows.\n+\n+The rowId Column for ``DELETE``\n+-------------------------------\n+\n+The Presto engine identifies the rows to be deleted using a connector-specific\n+rowId column handle, returned by the connector's ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+method, whose full signature is::\n+\n+    ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+The rowId Column for ``UPDATE``\n+-------------------------------\n+\n+The Presto engine identifies rows to be updated using a connector-specific rowId column handle,\n+returned by the connector's ``ConnectorMetadata.getUpdateRowIdColumnHandle()``\n+method.  In addition to the columns that identify the row, for ``UPDATE`` the rowId column will contain\n+any columns that the connector requires in order to perform the ``UPDATE`` operation.  In Hive ACID, for example,\n+the rowId column contains the values of all columns *not* updated by the ``UPDATE`` operation, since Hive ACID\n+implements ``UPDATE`` as a ``DELETE`` paired with an INSERT.\n+\n+UpdatablePageSource API\n+=======================\n+\n+As mentioned above, to support ``DELETE`` or ``UPDATE``, the connector must define a subclass of\n+``UpdatablePageSource``, layered over the connector's usual ``ConnectorPageSource``.  The interesting methods are:\n+\n+* ``Page getNextPage()``.  When the Presto engine calls ``getNextPage()``, the ``UpdatablePageSource`` calls\n+  its underlying ``ConnectorPageSource.getNextPage()`` method to get a page.  Some connectors will reformat\n+  the page before returning it to the Presto engine.\n+\n+* ``void deleteRows(Block rowIds)``.  The Presto engine calls the ``deleteRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page,  passing a block of \"rowIds\", created by the Presto engine based on the column\n+  handle returned by ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+\n+* ``void updateRows(Page page)``.  The Presto engine calls the ``updateRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page, passing a page of projected columns, one for each updated column and one for\n+  the rowId column.  The order of projected columns is defined by the Presto engine, and that order is reflected in the\n+  ``updateExpressionChannelNumbers`` argument to ``ConnectorMetadata.beginUpdate()``.  The job of ``updateRows()`` is to:\n+\n+  * Extract the updated column blocks and the rowId block from the projected page.\n+  * Assemble them in whatever order is required by the connector for storage.\n+  * Store the update result in the underlying file store.\n+\n+  In the case of Hive ACID, ``updateRows()`` stores a file of records that delete the\n+  previous contents of the updated rows, and a separate file that inserts completely\n+  new rows containing the updated and non-updated column values.\n+\n+* ``CompletableFuture<Collection<Slice>> finish()``.  The Presto engine calls ``finish()`` when all the pages\n+  of a split have been processed.  The connector returns a future containing a collection of ``Slice``, representing\n+  connector-specific information about the rows processed.  Usually this will include the row count, and might\n+  include information like the files or partitions created or changed.\n+\n+``ConnectorMetadata`` ``DELETE`` API\n+====================================\n+\n+A connector implementing ``DELETE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getDeleteRowIdColumnHandle()``::\n+\n+   ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be deleted, as\n+  well as any other fields of the row that the connector will need to complete the ``DELETE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  With the Hive connector and a Hive ACID table, for example, the ``DELETE`` rowId consists of the three ORC ACID columns\n+  that identify the row.\n+\n+* ``beginDelete()``::\n+\n+    ConnectorTableHandle beginDelete(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles)\n+\n+  As the last step in creating the ``DELETE`` execution plan, the connector's ``beginDelete()`` method is called.\n+  In addition to the ``session`` and ``tableHandle``, a map of all column hanedles is supplied.\n+\n+  ``beginDelete()`` performs any orchestration needed in the connector to start processing the ``DELETE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginDelete()``\n+  checks that the table is transactional and starts a Hive Metastore transaction.\n+\n+  ``beginDelete()`` returns a ``ConnectorTableHandle`` with any added information the connector needs when the handle\n+  is passed back to ``finishDelete()`` and the split generation machinery.  For most connectors, the returned table\n+  handle contains a flag identifying the table handle as a table handle for a ``DELETE`` operation.\n+\n+* ``finishDelete()``::\n+\n+      void finishDelete(\n+          ConnectorSession session,\n+          ConnectorTableHandle tableHandle,\n+          Collection<Slice> fragments)\n+\n+  During ``DELETE`` processing, the Presto engine accumulates the ``Slice`` collections returned by ``UpdatablePageSource.finish()``.\n+  After all splits have been processed, the engine calls ``finishDelete()``, passing the table handle and that\n+  collection of ``Slice`` fragments.  In response, the connector takes appropriate actions to complete the ``Delete`` operation.\n+  Those actions might include committing the transaction, assuming the connector supports a transaction paradigm.\n+\n+``ConnectorMetadata`` ``UPDATE`` API\n+====================================\n+\n+A connector implementing ``UPDATE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getUpdateRowIdColumnHandle``::\n+\n+   ColumnHandle getUpdateRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle,\n+        List<ColumnHandle> updatedColumns)\n+\n+  The ``updatedColumns`` list contains column handles for all columns updated by the ``UPDATE`` operation in table column order.\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be updated, as\n+  well as any other fields of the row that the connector will need to complete the ``UPDATE`` operation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTUyMQ=="}, "originalCommit": null, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MzQ1NA==", "bodyText": "You can think of the \"row ID\" field as being anything that the connector needs to pass between the table scan and the update/delete. I would agree that name \"row ID\" is a bit misleading with that definition, but from an API and implementation perspective, having a single column is simpler. (since with a row type, you can have any number of nested columns)", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r527043454", "createdAt": "2020-11-19T16:54:49Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "diffHunk": "@@ -0,0 +1,203 @@\n+====================================\n+Supporting ``DELETE`` and ``UPDATE``\n+====================================\n+\n+The Presto engine provides APIs to support row-level SQL ``DELETE`` and ``UPDATE``.\n+To implement ``DELETE`` or ``UPDATE``, a connector must layer an ``UpdatablePageSource``\n+on top of the connector's usual ``ConnectorPageSource``, and define ``ConnectorMetadata``\n+methods to get a \"rowId\" column handle; to start the operation; and to finish the operation.\n+\n+``DELETE`` and ``UPDATE`` Data Flow\n+===================================\n+\n+``DELETE`` and ``UPDATE`` have a similar flow:\n+\n+* For each split, the connector will create an ``UpdatablePageSource`` instance, layered over the\n+  connector's ``ConnectorPageSource``, to read pages on behalf of the Presto engine, and to\n+  write deletions and/or updates to the underlying data store.\n+* The connector's ``UpdatablePageSource.getNextPage()`` implementation fetches the next page\n+  from the underlying ``ConnectorPageSource``, optionally reformats the page, and returns it\n+  to the Presto engine.\n+* The Presto engine performs filtering and projection on the page read, producing a page of filtered,\n+  projected results.\n+* The Presto engine passes that filtered, projected page of results to the connector's\n+  ``UpdatablePageSource`` ``deleteRows()`` or ``updateRows()`` method.  Those methods persist\n+  the deletions or updates in the underlying data store.\n+* When all the pages for a specific split have been processed, the Presto engine calls\n+  ``UpdatablePageSource.finish()``, which returns a ``Collection<Slice>`` of \"fragments\"\n+  representing connector-specific information about the rows processed by the calls to\n+  ``deleteRows`` or ``updateRows``.\n+* When all pages for all splits have been processed, the Presto engine calls ``ConnectorMetadata.finishDelete()`` or\n+  ``finishUpdate``, passing a collection containing all the \"fragments\" from all the splits.  The connector\n+  does what is required to finalize the operation, for example, committing the transaction.\n+\n+The rowId Column Abstraction\n+============================\n+\n+The Presto engine and connectors use a \"rowId\" column handle abstraction to agree on the identities of rows\n+to be updated or deleted.  The rowId column handle is opaque to the Presto engine.  Depending on the connector,\n+the rowId column handle abstraction could represent several physical columns.  For the JDBC connector, the rowId\n+column handle points might be the primary key for the table.  For deletion in Hive ACID tables, the rowId consists\n+of the three ACID columns that uniquely identify rows.\n+\n+The rowId Column for ``DELETE``\n+-------------------------------\n+\n+The Presto engine identifies the rows to be deleted using a connector-specific\n+rowId column handle, returned by the connector's ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+method, whose full signature is::\n+\n+    ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+The rowId Column for ``UPDATE``\n+-------------------------------\n+\n+The Presto engine identifies rows to be updated using a connector-specific rowId column handle,\n+returned by the connector's ``ConnectorMetadata.getUpdateRowIdColumnHandle()``\n+method.  In addition to the columns that identify the row, for ``UPDATE`` the rowId column will contain\n+any columns that the connector requires in order to perform the ``UPDATE`` operation.  In Hive ACID, for example,\n+the rowId column contains the values of all columns *not* updated by the ``UPDATE`` operation, since Hive ACID\n+implements ``UPDATE`` as a ``DELETE`` paired with an INSERT.\n+\n+UpdatablePageSource API\n+=======================\n+\n+As mentioned above, to support ``DELETE`` or ``UPDATE``, the connector must define a subclass of\n+``UpdatablePageSource``, layered over the connector's usual ``ConnectorPageSource``.  The interesting methods are:\n+\n+* ``Page getNextPage()``.  When the Presto engine calls ``getNextPage()``, the ``UpdatablePageSource`` calls\n+  its underlying ``ConnectorPageSource.getNextPage()`` method to get a page.  Some connectors will reformat\n+  the page before returning it to the Presto engine.\n+\n+* ``void deleteRows(Block rowIds)``.  The Presto engine calls the ``deleteRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page,  passing a block of \"rowIds\", created by the Presto engine based on the column\n+  handle returned by ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+\n+* ``void updateRows(Page page)``.  The Presto engine calls the ``updateRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page, passing a page of projected columns, one for each updated column and one for\n+  the rowId column.  The order of projected columns is defined by the Presto engine, and that order is reflected in the\n+  ``updateExpressionChannelNumbers`` argument to ``ConnectorMetadata.beginUpdate()``.  The job of ``updateRows()`` is to:\n+\n+  * Extract the updated column blocks and the rowId block from the projected page.\n+  * Assemble them in whatever order is required by the connector for storage.\n+  * Store the update result in the underlying file store.\n+\n+  In the case of Hive ACID, ``updateRows()`` stores a file of records that delete the\n+  previous contents of the updated rows, and a separate file that inserts completely\n+  new rows containing the updated and non-updated column values.\n+\n+* ``CompletableFuture<Collection<Slice>> finish()``.  The Presto engine calls ``finish()`` when all the pages\n+  of a split have been processed.  The connector returns a future containing a collection of ``Slice``, representing\n+  connector-specific information about the rows processed.  Usually this will include the row count, and might\n+  include information like the files or partitions created or changed.\n+\n+``ConnectorMetadata`` ``DELETE`` API\n+====================================\n+\n+A connector implementing ``DELETE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getDeleteRowIdColumnHandle()``::\n+\n+   ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be deleted, as\n+  well as any other fields of the row that the connector will need to complete the ``DELETE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  With the Hive connector and a Hive ACID table, for example, the ``DELETE`` rowId consists of the three ORC ACID columns\n+  that identify the row.\n+\n+* ``beginDelete()``::\n+\n+    ConnectorTableHandle beginDelete(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles)\n+\n+  As the last step in creating the ``DELETE`` execution plan, the connector's ``beginDelete()`` method is called.\n+  In addition to the ``session`` and ``tableHandle``, a map of all column hanedles is supplied.\n+\n+  ``beginDelete()`` performs any orchestration needed in the connector to start processing the ``DELETE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginDelete()``\n+  checks that the table is transactional and starts a Hive Metastore transaction.\n+\n+  ``beginDelete()`` returns a ``ConnectorTableHandle`` with any added information the connector needs when the handle\n+  is passed back to ``finishDelete()`` and the split generation machinery.  For most connectors, the returned table\n+  handle contains a flag identifying the table handle as a table handle for a ``DELETE`` operation.\n+\n+* ``finishDelete()``::\n+\n+      void finishDelete(\n+          ConnectorSession session,\n+          ConnectorTableHandle tableHandle,\n+          Collection<Slice> fragments)\n+\n+  During ``DELETE`` processing, the Presto engine accumulates the ``Slice`` collections returned by ``UpdatablePageSource.finish()``.\n+  After all splits have been processed, the engine calls ``finishDelete()``, passing the table handle and that\n+  collection of ``Slice`` fragments.  In response, the connector takes appropriate actions to complete the ``Delete`` operation.\n+  Those actions might include committing the transaction, assuming the connector supports a transaction paradigm.\n+\n+``ConnectorMetadata`` ``UPDATE`` API\n+====================================\n+\n+A connector implementing ``UPDATE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getUpdateRowIdColumnHandle``::\n+\n+   ColumnHandle getUpdateRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle,\n+        List<ColumnHandle> updatedColumns)\n+\n+  The ``updatedColumns`` list contains column handles for all columns updated by the ``UPDATE`` operation in table column order.\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be updated, as\n+  well as any other fields of the row that the connector will need to complete the ``UPDATE`` operation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTUyMQ=="}, "originalCommit": null, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODA5Mw==", "bodyText": "makes sense from an implementation perspective, but probably we can rename it accordingly", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r527238093", "createdAt": "2020-11-19T22:14:24Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "diffHunk": "@@ -0,0 +1,203 @@\n+====================================\n+Supporting ``DELETE`` and ``UPDATE``\n+====================================\n+\n+The Presto engine provides APIs to support row-level SQL ``DELETE`` and ``UPDATE``.\n+To implement ``DELETE`` or ``UPDATE``, a connector must layer an ``UpdatablePageSource``\n+on top of the connector's usual ``ConnectorPageSource``, and define ``ConnectorMetadata``\n+methods to get a \"rowId\" column handle; to start the operation; and to finish the operation.\n+\n+``DELETE`` and ``UPDATE`` Data Flow\n+===================================\n+\n+``DELETE`` and ``UPDATE`` have a similar flow:\n+\n+* For each split, the connector will create an ``UpdatablePageSource`` instance, layered over the\n+  connector's ``ConnectorPageSource``, to read pages on behalf of the Presto engine, and to\n+  write deletions and/or updates to the underlying data store.\n+* The connector's ``UpdatablePageSource.getNextPage()`` implementation fetches the next page\n+  from the underlying ``ConnectorPageSource``, optionally reformats the page, and returns it\n+  to the Presto engine.\n+* The Presto engine performs filtering and projection on the page read, producing a page of filtered,\n+  projected results.\n+* The Presto engine passes that filtered, projected page of results to the connector's\n+  ``UpdatablePageSource`` ``deleteRows()`` or ``updateRows()`` method.  Those methods persist\n+  the deletions or updates in the underlying data store.\n+* When all the pages for a specific split have been processed, the Presto engine calls\n+  ``UpdatablePageSource.finish()``, which returns a ``Collection<Slice>`` of \"fragments\"\n+  representing connector-specific information about the rows processed by the calls to\n+  ``deleteRows`` or ``updateRows``.\n+* When all pages for all splits have been processed, the Presto engine calls ``ConnectorMetadata.finishDelete()`` or\n+  ``finishUpdate``, passing a collection containing all the \"fragments\" from all the splits.  The connector\n+  does what is required to finalize the operation, for example, committing the transaction.\n+\n+The rowId Column Abstraction\n+============================\n+\n+The Presto engine and connectors use a \"rowId\" column handle abstraction to agree on the identities of rows\n+to be updated or deleted.  The rowId column handle is opaque to the Presto engine.  Depending on the connector,\n+the rowId column handle abstraction could represent several physical columns.  For the JDBC connector, the rowId\n+column handle points might be the primary key for the table.  For deletion in Hive ACID tables, the rowId consists\n+of the three ACID columns that uniquely identify rows.\n+\n+The rowId Column for ``DELETE``\n+-------------------------------\n+\n+The Presto engine identifies the rows to be deleted using a connector-specific\n+rowId column handle, returned by the connector's ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+method, whose full signature is::\n+\n+    ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+The rowId Column for ``UPDATE``\n+-------------------------------\n+\n+The Presto engine identifies rows to be updated using a connector-specific rowId column handle,\n+returned by the connector's ``ConnectorMetadata.getUpdateRowIdColumnHandle()``\n+method.  In addition to the columns that identify the row, for ``UPDATE`` the rowId column will contain\n+any columns that the connector requires in order to perform the ``UPDATE`` operation.  In Hive ACID, for example,\n+the rowId column contains the values of all columns *not* updated by the ``UPDATE`` operation, since Hive ACID\n+implements ``UPDATE`` as a ``DELETE`` paired with an INSERT.\n+\n+UpdatablePageSource API\n+=======================\n+\n+As mentioned above, to support ``DELETE`` or ``UPDATE``, the connector must define a subclass of\n+``UpdatablePageSource``, layered over the connector's usual ``ConnectorPageSource``.  The interesting methods are:\n+\n+* ``Page getNextPage()``.  When the Presto engine calls ``getNextPage()``, the ``UpdatablePageSource`` calls\n+  its underlying ``ConnectorPageSource.getNextPage()`` method to get a page.  Some connectors will reformat\n+  the page before returning it to the Presto engine.\n+\n+* ``void deleteRows(Block rowIds)``.  The Presto engine calls the ``deleteRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page,  passing a block of \"rowIds\", created by the Presto engine based on the column\n+  handle returned by ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+\n+* ``void updateRows(Page page)``.  The Presto engine calls the ``updateRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page, passing a page of projected columns, one for each updated column and one for\n+  the rowId column.  The order of projected columns is defined by the Presto engine, and that order is reflected in the\n+  ``updateExpressionChannelNumbers`` argument to ``ConnectorMetadata.beginUpdate()``.  The job of ``updateRows()`` is to:\n+\n+  * Extract the updated column blocks and the rowId block from the projected page.\n+  * Assemble them in whatever order is required by the connector for storage.\n+  * Store the update result in the underlying file store.\n+\n+  In the case of Hive ACID, ``updateRows()`` stores a file of records that delete the\n+  previous contents of the updated rows, and a separate file that inserts completely\n+  new rows containing the updated and non-updated column values.\n+\n+* ``CompletableFuture<Collection<Slice>> finish()``.  The Presto engine calls ``finish()`` when all the pages\n+  of a split have been processed.  The connector returns a future containing a collection of ``Slice``, representing\n+  connector-specific information about the rows processed.  Usually this will include the row count, and might\n+  include information like the files or partitions created or changed.\n+\n+``ConnectorMetadata`` ``DELETE`` API\n+====================================\n+\n+A connector implementing ``DELETE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getDeleteRowIdColumnHandle()``::\n+\n+   ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be deleted, as\n+  well as any other fields of the row that the connector will need to complete the ``DELETE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  With the Hive connector and a Hive ACID table, for example, the ``DELETE`` rowId consists of the three ORC ACID columns\n+  that identify the row.\n+\n+* ``beginDelete()``::\n+\n+    ConnectorTableHandle beginDelete(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles)\n+\n+  As the last step in creating the ``DELETE`` execution plan, the connector's ``beginDelete()`` method is called.\n+  In addition to the ``session`` and ``tableHandle``, a map of all column hanedles is supplied.\n+\n+  ``beginDelete()`` performs any orchestration needed in the connector to start processing the ``DELETE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginDelete()``\n+  checks that the table is transactional and starts a Hive Metastore transaction.\n+\n+  ``beginDelete()`` returns a ``ConnectorTableHandle`` with any added information the connector needs when the handle\n+  is passed back to ``finishDelete()`` and the split generation machinery.  For most connectors, the returned table\n+  handle contains a flag identifying the table handle as a table handle for a ``DELETE`` operation.\n+\n+* ``finishDelete()``::\n+\n+      void finishDelete(\n+          ConnectorSession session,\n+          ConnectorTableHandle tableHandle,\n+          Collection<Slice> fragments)\n+\n+  During ``DELETE`` processing, the Presto engine accumulates the ``Slice`` collections returned by ``UpdatablePageSource.finish()``.\n+  After all splits have been processed, the engine calls ``finishDelete()``, passing the table handle and that\n+  collection of ``Slice`` fragments.  In response, the connector takes appropriate actions to complete the ``Delete`` operation.\n+  Those actions might include committing the transaction, assuming the connector supports a transaction paradigm.\n+\n+``ConnectorMetadata`` ``UPDATE`` API\n+====================================\n+\n+A connector implementing ``UPDATE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getUpdateRowIdColumnHandle``::\n+\n+   ColumnHandle getUpdateRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle,\n+        List<ColumnHandle> updatedColumns)\n+\n+  The ``updatedColumns`` list contains column handles for all columns updated by the ``UPDATE`` operation in table column order.\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be updated, as\n+  well as any other fields of the row that the connector will need to complete the ``UPDATE`` operation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTUyMQ=="}, "originalCommit": null, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjU3NDkwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTo0NzozNVrOH2Ux6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxNDozMFrOH20EOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTYwOQ==", "bodyText": "Might not be relevant, just thinking out loud. What would be the behavior if there is a concurrent Alter table which drops or renames the columns before the beginUpdate is invoked?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526725609", "createdAt": "2020-11-19T09:47:35Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "diffHunk": "@@ -0,0 +1,203 @@\n+====================================\n+Supporting ``DELETE`` and ``UPDATE``\n+====================================\n+\n+The Presto engine provides APIs to support row-level SQL ``DELETE`` and ``UPDATE``.\n+To implement ``DELETE`` or ``UPDATE``, a connector must layer an ``UpdatablePageSource``\n+on top of the connector's usual ``ConnectorPageSource``, and define ``ConnectorMetadata``\n+methods to get a \"rowId\" column handle; to start the operation; and to finish the operation.\n+\n+``DELETE`` and ``UPDATE`` Data Flow\n+===================================\n+\n+``DELETE`` and ``UPDATE`` have a similar flow:\n+\n+* For each split, the connector will create an ``UpdatablePageSource`` instance, layered over the\n+  connector's ``ConnectorPageSource``, to read pages on behalf of the Presto engine, and to\n+  write deletions and/or updates to the underlying data store.\n+* The connector's ``UpdatablePageSource.getNextPage()`` implementation fetches the next page\n+  from the underlying ``ConnectorPageSource``, optionally reformats the page, and returns it\n+  to the Presto engine.\n+* The Presto engine performs filtering and projection on the page read, producing a page of filtered,\n+  projected results.\n+* The Presto engine passes that filtered, projected page of results to the connector's\n+  ``UpdatablePageSource`` ``deleteRows()`` or ``updateRows()`` method.  Those methods persist\n+  the deletions or updates in the underlying data store.\n+* When all the pages for a specific split have been processed, the Presto engine calls\n+  ``UpdatablePageSource.finish()``, which returns a ``Collection<Slice>`` of \"fragments\"\n+  representing connector-specific information about the rows processed by the calls to\n+  ``deleteRows`` or ``updateRows``.\n+* When all pages for all splits have been processed, the Presto engine calls ``ConnectorMetadata.finishDelete()`` or\n+  ``finishUpdate``, passing a collection containing all the \"fragments\" from all the splits.  The connector\n+  does what is required to finalize the operation, for example, committing the transaction.\n+\n+The rowId Column Abstraction\n+============================\n+\n+The Presto engine and connectors use a \"rowId\" column handle abstraction to agree on the identities of rows\n+to be updated or deleted.  The rowId column handle is opaque to the Presto engine.  Depending on the connector,\n+the rowId column handle abstraction could represent several physical columns.  For the JDBC connector, the rowId\n+column handle points might be the primary key for the table.  For deletion in Hive ACID tables, the rowId consists\n+of the three ACID columns that uniquely identify rows.\n+\n+The rowId Column for ``DELETE``\n+-------------------------------\n+\n+The Presto engine identifies the rows to be deleted using a connector-specific\n+rowId column handle, returned by the connector's ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+method, whose full signature is::\n+\n+    ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+The rowId Column for ``UPDATE``\n+-------------------------------\n+\n+The Presto engine identifies rows to be updated using a connector-specific rowId column handle,\n+returned by the connector's ``ConnectorMetadata.getUpdateRowIdColumnHandle()``\n+method.  In addition to the columns that identify the row, for ``UPDATE`` the rowId column will contain\n+any columns that the connector requires in order to perform the ``UPDATE`` operation.  In Hive ACID, for example,\n+the rowId column contains the values of all columns *not* updated by the ``UPDATE`` operation, since Hive ACID\n+implements ``UPDATE`` as a ``DELETE`` paired with an INSERT.\n+\n+UpdatablePageSource API\n+=======================\n+\n+As mentioned above, to support ``DELETE`` or ``UPDATE``, the connector must define a subclass of\n+``UpdatablePageSource``, layered over the connector's usual ``ConnectorPageSource``.  The interesting methods are:\n+\n+* ``Page getNextPage()``.  When the Presto engine calls ``getNextPage()``, the ``UpdatablePageSource`` calls\n+  its underlying ``ConnectorPageSource.getNextPage()`` method to get a page.  Some connectors will reformat\n+  the page before returning it to the Presto engine.\n+\n+* ``void deleteRows(Block rowIds)``.  The Presto engine calls the ``deleteRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page,  passing a block of \"rowIds\", created by the Presto engine based on the column\n+  handle returned by ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+\n+* ``void updateRows(Page page)``.  The Presto engine calls the ``updateRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page, passing a page of projected columns, one for each updated column and one for\n+  the rowId column.  The order of projected columns is defined by the Presto engine, and that order is reflected in the\n+  ``updateExpressionChannelNumbers`` argument to ``ConnectorMetadata.beginUpdate()``.  The job of ``updateRows()`` is to:\n+\n+  * Extract the updated column blocks and the rowId block from the projected page.\n+  * Assemble them in whatever order is required by the connector for storage.\n+  * Store the update result in the underlying file store.\n+\n+  In the case of Hive ACID, ``updateRows()`` stores a file of records that delete the\n+  previous contents of the updated rows, and a separate file that inserts completely\n+  new rows containing the updated and non-updated column values.\n+\n+* ``CompletableFuture<Collection<Slice>> finish()``.  The Presto engine calls ``finish()`` when all the pages\n+  of a split have been processed.  The connector returns a future containing a collection of ``Slice``, representing\n+  connector-specific information about the rows processed.  Usually this will include the row count, and might\n+  include information like the files or partitions created or changed.\n+\n+``ConnectorMetadata`` ``DELETE`` API\n+====================================\n+\n+A connector implementing ``DELETE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getDeleteRowIdColumnHandle()``::\n+\n+   ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be deleted, as\n+  well as any other fields of the row that the connector will need to complete the ``DELETE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  With the Hive connector and a Hive ACID table, for example, the ``DELETE`` rowId consists of the three ORC ACID columns\n+  that identify the row.\n+\n+* ``beginDelete()``::\n+\n+    ConnectorTableHandle beginDelete(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles)\n+\n+  As the last step in creating the ``DELETE`` execution plan, the connector's ``beginDelete()`` method is called.\n+  In addition to the ``session`` and ``tableHandle``, a map of all column hanedles is supplied.\n+\n+  ``beginDelete()`` performs any orchestration needed in the connector to start processing the ``DELETE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginDelete()``\n+  checks that the table is transactional and starts a Hive Metastore transaction.\n+\n+  ``beginDelete()`` returns a ``ConnectorTableHandle`` with any added information the connector needs when the handle\n+  is passed back to ``finishDelete()`` and the split generation machinery.  For most connectors, the returned table\n+  handle contains a flag identifying the table handle as a table handle for a ``DELETE`` operation.\n+\n+* ``finishDelete()``::\n+\n+      void finishDelete(\n+          ConnectorSession session,\n+          ConnectorTableHandle tableHandle,\n+          Collection<Slice> fragments)\n+\n+  During ``DELETE`` processing, the Presto engine accumulates the ``Slice`` collections returned by ``UpdatablePageSource.finish()``.\n+  After all splits have been processed, the engine calls ``finishDelete()``, passing the table handle and that\n+  collection of ``Slice`` fragments.  In response, the connector takes appropriate actions to complete the ``Delete`` operation.\n+  Those actions might include committing the transaction, assuming the connector supports a transaction paradigm.\n+\n+``ConnectorMetadata`` ``UPDATE`` API\n+====================================\n+\n+A connector implementing ``UPDATE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getUpdateRowIdColumnHandle``::\n+\n+   ColumnHandle getUpdateRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle,\n+        List<ColumnHandle> updatedColumns)\n+\n+  The ``updatedColumns`` list contains column handles for all columns updated by the ``UPDATE`` operation in table column order.\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be updated, as\n+  well as any other fields of the row that the connector will need to complete the ``UPDATE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  Moreover, some connectors may need the values of columns that are not updated to complete the ``UPDATE`` operation.\n+  With the Hive connector and a Hive ACID table, for example, the ``UPDATE`` rowId consists of the three ORC ACID columns\n+  that identify the row, plus the values of all the data columns not updated.\n+\n+* ``beginUpdate``::\n+\n+    ConnectorTableHandle beginUpdate(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles,\n+         List<ColumnHandle> updatedColumns,\n+         List<Integer> updateExpressionChannelNumbers)\n+\n+  As the last step in creating the ``UPDATE`` execution plan, the connector's ``beginUpdate()`` method is called,\n+  passing arguments that define the ``UPDATE`` to the connector.  In addition to the ``session``\n+  and ``tableHandle``, the arguments include the list of the updated columns and a list of channel numbers of\n+  updated columns in the projected page created by the Presto engine and passed into ``UpdatablePageSource.updateRows()``.\n+  All column lists are in table column order, as are the ``updateExpressionChannelNumbers``.  The size of\n+  ``updateExpressionChannelNumbers`` is one greater than the number of updated columns - - the last element of the\n+  list is the channel number of the block of rowIds for the page, constructed from the rowId column handle.\n+\n+  ``beginUpdate()`` performs any orchestration needed in the connector to start processing the ``UPDATE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginUpdate()``\n+  starts the Hive Metastore transaction; checks that the updated table is transactional and that neither", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzMDIyMA==", "bodyText": "It's a good question, and an area that is poorly tested.  If you could think of a way to test commit and rollback it would be a big contribution.  Here is the way I think it works:\nIf the ALTER TABLE transaction committed before beginUpdate() was called, the UPDATE operation would fail because the StatementAnalyzer would fail to find a referenced column.  If the ALTER TABLE transaction was started but not committed by the time beginUpdate() was called, I think the call to metastore.declareIntentionToWrite() will cause a rollback of the beginUpdate() transaction when the ALTER TABLE transaction commits.  But I'm guessing, and don't have tests to prove that it works that way :(", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526930220", "createdAt": "2020-11-19T14:30:02Z", "author": {"login": "djsstarburst"}, "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "diffHunk": "@@ -0,0 +1,203 @@\n+====================================\n+Supporting ``DELETE`` and ``UPDATE``\n+====================================\n+\n+The Presto engine provides APIs to support row-level SQL ``DELETE`` and ``UPDATE``.\n+To implement ``DELETE`` or ``UPDATE``, a connector must layer an ``UpdatablePageSource``\n+on top of the connector's usual ``ConnectorPageSource``, and define ``ConnectorMetadata``\n+methods to get a \"rowId\" column handle; to start the operation; and to finish the operation.\n+\n+``DELETE`` and ``UPDATE`` Data Flow\n+===================================\n+\n+``DELETE`` and ``UPDATE`` have a similar flow:\n+\n+* For each split, the connector will create an ``UpdatablePageSource`` instance, layered over the\n+  connector's ``ConnectorPageSource``, to read pages on behalf of the Presto engine, and to\n+  write deletions and/or updates to the underlying data store.\n+* The connector's ``UpdatablePageSource.getNextPage()`` implementation fetches the next page\n+  from the underlying ``ConnectorPageSource``, optionally reformats the page, and returns it\n+  to the Presto engine.\n+* The Presto engine performs filtering and projection on the page read, producing a page of filtered,\n+  projected results.\n+* The Presto engine passes that filtered, projected page of results to the connector's\n+  ``UpdatablePageSource`` ``deleteRows()`` or ``updateRows()`` method.  Those methods persist\n+  the deletions or updates in the underlying data store.\n+* When all the pages for a specific split have been processed, the Presto engine calls\n+  ``UpdatablePageSource.finish()``, which returns a ``Collection<Slice>`` of \"fragments\"\n+  representing connector-specific information about the rows processed by the calls to\n+  ``deleteRows`` or ``updateRows``.\n+* When all pages for all splits have been processed, the Presto engine calls ``ConnectorMetadata.finishDelete()`` or\n+  ``finishUpdate``, passing a collection containing all the \"fragments\" from all the splits.  The connector\n+  does what is required to finalize the operation, for example, committing the transaction.\n+\n+The rowId Column Abstraction\n+============================\n+\n+The Presto engine and connectors use a \"rowId\" column handle abstraction to agree on the identities of rows\n+to be updated or deleted.  The rowId column handle is opaque to the Presto engine.  Depending on the connector,\n+the rowId column handle abstraction could represent several physical columns.  For the JDBC connector, the rowId\n+column handle points might be the primary key for the table.  For deletion in Hive ACID tables, the rowId consists\n+of the three ACID columns that uniquely identify rows.\n+\n+The rowId Column for ``DELETE``\n+-------------------------------\n+\n+The Presto engine identifies the rows to be deleted using a connector-specific\n+rowId column handle, returned by the connector's ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+method, whose full signature is::\n+\n+    ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+The rowId Column for ``UPDATE``\n+-------------------------------\n+\n+The Presto engine identifies rows to be updated using a connector-specific rowId column handle,\n+returned by the connector's ``ConnectorMetadata.getUpdateRowIdColumnHandle()``\n+method.  In addition to the columns that identify the row, for ``UPDATE`` the rowId column will contain\n+any columns that the connector requires in order to perform the ``UPDATE`` operation.  In Hive ACID, for example,\n+the rowId column contains the values of all columns *not* updated by the ``UPDATE`` operation, since Hive ACID\n+implements ``UPDATE`` as a ``DELETE`` paired with an INSERT.\n+\n+UpdatablePageSource API\n+=======================\n+\n+As mentioned above, to support ``DELETE`` or ``UPDATE``, the connector must define a subclass of\n+``UpdatablePageSource``, layered over the connector's usual ``ConnectorPageSource``.  The interesting methods are:\n+\n+* ``Page getNextPage()``.  When the Presto engine calls ``getNextPage()``, the ``UpdatablePageSource`` calls\n+  its underlying ``ConnectorPageSource.getNextPage()`` method to get a page.  Some connectors will reformat\n+  the page before returning it to the Presto engine.\n+\n+* ``void deleteRows(Block rowIds)``.  The Presto engine calls the ``deleteRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page,  passing a block of \"rowIds\", created by the Presto engine based on the column\n+  handle returned by ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+\n+* ``void updateRows(Page page)``.  The Presto engine calls the ``updateRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page, passing a page of projected columns, one for each updated column and one for\n+  the rowId column.  The order of projected columns is defined by the Presto engine, and that order is reflected in the\n+  ``updateExpressionChannelNumbers`` argument to ``ConnectorMetadata.beginUpdate()``.  The job of ``updateRows()`` is to:\n+\n+  * Extract the updated column blocks and the rowId block from the projected page.\n+  * Assemble them in whatever order is required by the connector for storage.\n+  * Store the update result in the underlying file store.\n+\n+  In the case of Hive ACID, ``updateRows()`` stores a file of records that delete the\n+  previous contents of the updated rows, and a separate file that inserts completely\n+  new rows containing the updated and non-updated column values.\n+\n+* ``CompletableFuture<Collection<Slice>> finish()``.  The Presto engine calls ``finish()`` when all the pages\n+  of a split have been processed.  The connector returns a future containing a collection of ``Slice``, representing\n+  connector-specific information about the rows processed.  Usually this will include the row count, and might\n+  include information like the files or partitions created or changed.\n+\n+``ConnectorMetadata`` ``DELETE`` API\n+====================================\n+\n+A connector implementing ``DELETE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getDeleteRowIdColumnHandle()``::\n+\n+   ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be deleted, as\n+  well as any other fields of the row that the connector will need to complete the ``DELETE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  With the Hive connector and a Hive ACID table, for example, the ``DELETE`` rowId consists of the three ORC ACID columns\n+  that identify the row.\n+\n+* ``beginDelete()``::\n+\n+    ConnectorTableHandle beginDelete(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles)\n+\n+  As the last step in creating the ``DELETE`` execution plan, the connector's ``beginDelete()`` method is called.\n+  In addition to the ``session`` and ``tableHandle``, a map of all column hanedles is supplied.\n+\n+  ``beginDelete()`` performs any orchestration needed in the connector to start processing the ``DELETE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginDelete()``\n+  checks that the table is transactional and starts a Hive Metastore transaction.\n+\n+  ``beginDelete()`` returns a ``ConnectorTableHandle`` with any added information the connector needs when the handle\n+  is passed back to ``finishDelete()`` and the split generation machinery.  For most connectors, the returned table\n+  handle contains a flag identifying the table handle as a table handle for a ``DELETE`` operation.\n+\n+* ``finishDelete()``::\n+\n+      void finishDelete(\n+          ConnectorSession session,\n+          ConnectorTableHandle tableHandle,\n+          Collection<Slice> fragments)\n+\n+  During ``DELETE`` processing, the Presto engine accumulates the ``Slice`` collections returned by ``UpdatablePageSource.finish()``.\n+  After all splits have been processed, the engine calls ``finishDelete()``, passing the table handle and that\n+  collection of ``Slice`` fragments.  In response, the connector takes appropriate actions to complete the ``Delete`` operation.\n+  Those actions might include committing the transaction, assuming the connector supports a transaction paradigm.\n+\n+``ConnectorMetadata`` ``UPDATE`` API\n+====================================\n+\n+A connector implementing ``UPDATE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getUpdateRowIdColumnHandle``::\n+\n+   ColumnHandle getUpdateRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle,\n+        List<ColumnHandle> updatedColumns)\n+\n+  The ``updatedColumns`` list contains column handles for all columns updated by the ``UPDATE`` operation in table column order.\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be updated, as\n+  well as any other fields of the row that the connector will need to complete the ``UPDATE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  Moreover, some connectors may need the values of columns that are not updated to complete the ``UPDATE`` operation.\n+  With the Hive connector and a Hive ACID table, for example, the ``UPDATE`` rowId consists of the three ORC ACID columns\n+  that identify the row, plus the values of all the data columns not updated.\n+\n+* ``beginUpdate``::\n+\n+    ConnectorTableHandle beginUpdate(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles,\n+         List<ColumnHandle> updatedColumns,\n+         List<Integer> updateExpressionChannelNumbers)\n+\n+  As the last step in creating the ``UPDATE`` execution plan, the connector's ``beginUpdate()`` method is called,\n+  passing arguments that define the ``UPDATE`` to the connector.  In addition to the ``session``\n+  and ``tableHandle``, the arguments include the list of the updated columns and a list of channel numbers of\n+  updated columns in the projected page created by the Presto engine and passed into ``UpdatablePageSource.updateRows()``.\n+  All column lists are in table column order, as are the ``updateExpressionChannelNumbers``.  The size of\n+  ``updateExpressionChannelNumbers`` is one greater than the number of updated columns - - the last element of the\n+  list is the channel number of the block of rowIds for the page, constructed from the rowId column handle.\n+\n+  ``beginUpdate()`` performs any orchestration needed in the connector to start processing the ``UPDATE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginUpdate()``\n+  starts the Hive Metastore transaction; checks that the updated table is transactional and that neither", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTYwOQ=="}, "originalCommit": null, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0NDg3MQ==", "bodyText": "Assuming the metastore was a proper transactional system that implemented optimistic concurrency, the commit of the UPDATE operation would fail due to the conflict. That's how it will work for Iceberg, which properly supports transaction semantics.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r527044871", "createdAt": "2020-11-19T16:56:39Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "diffHunk": "@@ -0,0 +1,203 @@\n+====================================\n+Supporting ``DELETE`` and ``UPDATE``\n+====================================\n+\n+The Presto engine provides APIs to support row-level SQL ``DELETE`` and ``UPDATE``.\n+To implement ``DELETE`` or ``UPDATE``, a connector must layer an ``UpdatablePageSource``\n+on top of the connector's usual ``ConnectorPageSource``, and define ``ConnectorMetadata``\n+methods to get a \"rowId\" column handle; to start the operation; and to finish the operation.\n+\n+``DELETE`` and ``UPDATE`` Data Flow\n+===================================\n+\n+``DELETE`` and ``UPDATE`` have a similar flow:\n+\n+* For each split, the connector will create an ``UpdatablePageSource`` instance, layered over the\n+  connector's ``ConnectorPageSource``, to read pages on behalf of the Presto engine, and to\n+  write deletions and/or updates to the underlying data store.\n+* The connector's ``UpdatablePageSource.getNextPage()`` implementation fetches the next page\n+  from the underlying ``ConnectorPageSource``, optionally reformats the page, and returns it\n+  to the Presto engine.\n+* The Presto engine performs filtering and projection on the page read, producing a page of filtered,\n+  projected results.\n+* The Presto engine passes that filtered, projected page of results to the connector's\n+  ``UpdatablePageSource`` ``deleteRows()`` or ``updateRows()`` method.  Those methods persist\n+  the deletions or updates in the underlying data store.\n+* When all the pages for a specific split have been processed, the Presto engine calls\n+  ``UpdatablePageSource.finish()``, which returns a ``Collection<Slice>`` of \"fragments\"\n+  representing connector-specific information about the rows processed by the calls to\n+  ``deleteRows`` or ``updateRows``.\n+* When all pages for all splits have been processed, the Presto engine calls ``ConnectorMetadata.finishDelete()`` or\n+  ``finishUpdate``, passing a collection containing all the \"fragments\" from all the splits.  The connector\n+  does what is required to finalize the operation, for example, committing the transaction.\n+\n+The rowId Column Abstraction\n+============================\n+\n+The Presto engine and connectors use a \"rowId\" column handle abstraction to agree on the identities of rows\n+to be updated or deleted.  The rowId column handle is opaque to the Presto engine.  Depending on the connector,\n+the rowId column handle abstraction could represent several physical columns.  For the JDBC connector, the rowId\n+column handle points might be the primary key for the table.  For deletion in Hive ACID tables, the rowId consists\n+of the three ACID columns that uniquely identify rows.\n+\n+The rowId Column for ``DELETE``\n+-------------------------------\n+\n+The Presto engine identifies the rows to be deleted using a connector-specific\n+rowId column handle, returned by the connector's ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+method, whose full signature is::\n+\n+    ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+The rowId Column for ``UPDATE``\n+-------------------------------\n+\n+The Presto engine identifies rows to be updated using a connector-specific rowId column handle,\n+returned by the connector's ``ConnectorMetadata.getUpdateRowIdColumnHandle()``\n+method.  In addition to the columns that identify the row, for ``UPDATE`` the rowId column will contain\n+any columns that the connector requires in order to perform the ``UPDATE`` operation.  In Hive ACID, for example,\n+the rowId column contains the values of all columns *not* updated by the ``UPDATE`` operation, since Hive ACID\n+implements ``UPDATE`` as a ``DELETE`` paired with an INSERT.\n+\n+UpdatablePageSource API\n+=======================\n+\n+As mentioned above, to support ``DELETE`` or ``UPDATE``, the connector must define a subclass of\n+``UpdatablePageSource``, layered over the connector's usual ``ConnectorPageSource``.  The interesting methods are:\n+\n+* ``Page getNextPage()``.  When the Presto engine calls ``getNextPage()``, the ``UpdatablePageSource`` calls\n+  its underlying ``ConnectorPageSource.getNextPage()`` method to get a page.  Some connectors will reformat\n+  the page before returning it to the Presto engine.\n+\n+* ``void deleteRows(Block rowIds)``.  The Presto engine calls the ``deleteRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page,  passing a block of \"rowIds\", created by the Presto engine based on the column\n+  handle returned by ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+\n+* ``void updateRows(Page page)``.  The Presto engine calls the ``updateRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page, passing a page of projected columns, one for each updated column and one for\n+  the rowId column.  The order of projected columns is defined by the Presto engine, and that order is reflected in the\n+  ``updateExpressionChannelNumbers`` argument to ``ConnectorMetadata.beginUpdate()``.  The job of ``updateRows()`` is to:\n+\n+  * Extract the updated column blocks and the rowId block from the projected page.\n+  * Assemble them in whatever order is required by the connector for storage.\n+  * Store the update result in the underlying file store.\n+\n+  In the case of Hive ACID, ``updateRows()`` stores a file of records that delete the\n+  previous contents of the updated rows, and a separate file that inserts completely\n+  new rows containing the updated and non-updated column values.\n+\n+* ``CompletableFuture<Collection<Slice>> finish()``.  The Presto engine calls ``finish()`` when all the pages\n+  of a split have been processed.  The connector returns a future containing a collection of ``Slice``, representing\n+  connector-specific information about the rows processed.  Usually this will include the row count, and might\n+  include information like the files or partitions created or changed.\n+\n+``ConnectorMetadata`` ``DELETE`` API\n+====================================\n+\n+A connector implementing ``DELETE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getDeleteRowIdColumnHandle()``::\n+\n+   ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be deleted, as\n+  well as any other fields of the row that the connector will need to complete the ``DELETE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  With the Hive connector and a Hive ACID table, for example, the ``DELETE`` rowId consists of the three ORC ACID columns\n+  that identify the row.\n+\n+* ``beginDelete()``::\n+\n+    ConnectorTableHandle beginDelete(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles)\n+\n+  As the last step in creating the ``DELETE`` execution plan, the connector's ``beginDelete()`` method is called.\n+  In addition to the ``session`` and ``tableHandle``, a map of all column hanedles is supplied.\n+\n+  ``beginDelete()`` performs any orchestration needed in the connector to start processing the ``DELETE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginDelete()``\n+  checks that the table is transactional and starts a Hive Metastore transaction.\n+\n+  ``beginDelete()`` returns a ``ConnectorTableHandle`` with any added information the connector needs when the handle\n+  is passed back to ``finishDelete()`` and the split generation machinery.  For most connectors, the returned table\n+  handle contains a flag identifying the table handle as a table handle for a ``DELETE`` operation.\n+\n+* ``finishDelete()``::\n+\n+      void finishDelete(\n+          ConnectorSession session,\n+          ConnectorTableHandle tableHandle,\n+          Collection<Slice> fragments)\n+\n+  During ``DELETE`` processing, the Presto engine accumulates the ``Slice`` collections returned by ``UpdatablePageSource.finish()``.\n+  After all splits have been processed, the engine calls ``finishDelete()``, passing the table handle and that\n+  collection of ``Slice`` fragments.  In response, the connector takes appropriate actions to complete the ``Delete`` operation.\n+  Those actions might include committing the transaction, assuming the connector supports a transaction paradigm.\n+\n+``ConnectorMetadata`` ``UPDATE`` API\n+====================================\n+\n+A connector implementing ``UPDATE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getUpdateRowIdColumnHandle``::\n+\n+   ColumnHandle getUpdateRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle,\n+        List<ColumnHandle> updatedColumns)\n+\n+  The ``updatedColumns`` list contains column handles for all columns updated by the ``UPDATE`` operation in table column order.\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be updated, as\n+  well as any other fields of the row that the connector will need to complete the ``UPDATE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  Moreover, some connectors may need the values of columns that are not updated to complete the ``UPDATE`` operation.\n+  With the Hive connector and a Hive ACID table, for example, the ``UPDATE`` rowId consists of the three ORC ACID columns\n+  that identify the row, plus the values of all the data columns not updated.\n+\n+* ``beginUpdate``::\n+\n+    ConnectorTableHandle beginUpdate(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles,\n+         List<ColumnHandle> updatedColumns,\n+         List<Integer> updateExpressionChannelNumbers)\n+\n+  As the last step in creating the ``UPDATE`` execution plan, the connector's ``beginUpdate()`` method is called,\n+  passing arguments that define the ``UPDATE`` to the connector.  In addition to the ``session``\n+  and ``tableHandle``, the arguments include the list of the updated columns and a list of channel numbers of\n+  updated columns in the projected page created by the Presto engine and passed into ``UpdatablePageSource.updateRows()``.\n+  All column lists are in table column order, as are the ``updateExpressionChannelNumbers``.  The size of\n+  ``updateExpressionChannelNumbers`` is one greater than the number of updated columns - - the last element of the\n+  list is the channel number of the block of rowIds for the page, constructed from the rowId column handle.\n+\n+  ``beginUpdate()`` performs any orchestration needed in the connector to start processing the ``UPDATE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginUpdate()``\n+  starts the Hive Metastore transaction; checks that the updated table is transactional and that neither", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTYwOQ=="}, "originalCommit": null, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODIwMA==", "bodyText": "Makes sense that as long as we have OCC backed metastore, one of the conflicting transaction would be rejected. But, I was thinking can there be an Alter table request which makes the conflict not detectable because we rely on the names/order of the columns? e.g the scenarios listed here https://iceberg.apache.org/evolution/#correctness\n    Formats that track columns by name can inadvertently un-delete a column if a name is reused, which violates #1.\n    Formats that track columns by position cannot delete columns without changing the names that are used for each column, which violates #2.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r527238200", "createdAt": "2020-11-19T22:14:30Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-docs/src/main/sphinx/develop/delete-and-update.rst", "diffHunk": "@@ -0,0 +1,203 @@\n+====================================\n+Supporting ``DELETE`` and ``UPDATE``\n+====================================\n+\n+The Presto engine provides APIs to support row-level SQL ``DELETE`` and ``UPDATE``.\n+To implement ``DELETE`` or ``UPDATE``, a connector must layer an ``UpdatablePageSource``\n+on top of the connector's usual ``ConnectorPageSource``, and define ``ConnectorMetadata``\n+methods to get a \"rowId\" column handle; to start the operation; and to finish the operation.\n+\n+``DELETE`` and ``UPDATE`` Data Flow\n+===================================\n+\n+``DELETE`` and ``UPDATE`` have a similar flow:\n+\n+* For each split, the connector will create an ``UpdatablePageSource`` instance, layered over the\n+  connector's ``ConnectorPageSource``, to read pages on behalf of the Presto engine, and to\n+  write deletions and/or updates to the underlying data store.\n+* The connector's ``UpdatablePageSource.getNextPage()`` implementation fetches the next page\n+  from the underlying ``ConnectorPageSource``, optionally reformats the page, and returns it\n+  to the Presto engine.\n+* The Presto engine performs filtering and projection on the page read, producing a page of filtered,\n+  projected results.\n+* The Presto engine passes that filtered, projected page of results to the connector's\n+  ``UpdatablePageSource`` ``deleteRows()`` or ``updateRows()`` method.  Those methods persist\n+  the deletions or updates in the underlying data store.\n+* When all the pages for a specific split have been processed, the Presto engine calls\n+  ``UpdatablePageSource.finish()``, which returns a ``Collection<Slice>`` of \"fragments\"\n+  representing connector-specific information about the rows processed by the calls to\n+  ``deleteRows`` or ``updateRows``.\n+* When all pages for all splits have been processed, the Presto engine calls ``ConnectorMetadata.finishDelete()`` or\n+  ``finishUpdate``, passing a collection containing all the \"fragments\" from all the splits.  The connector\n+  does what is required to finalize the operation, for example, committing the transaction.\n+\n+The rowId Column Abstraction\n+============================\n+\n+The Presto engine and connectors use a \"rowId\" column handle abstraction to agree on the identities of rows\n+to be updated or deleted.  The rowId column handle is opaque to the Presto engine.  Depending on the connector,\n+the rowId column handle abstraction could represent several physical columns.  For the JDBC connector, the rowId\n+column handle points might be the primary key for the table.  For deletion in Hive ACID tables, the rowId consists\n+of the three ACID columns that uniquely identify rows.\n+\n+The rowId Column for ``DELETE``\n+-------------------------------\n+\n+The Presto engine identifies the rows to be deleted using a connector-specific\n+rowId column handle, returned by the connector's ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+method, whose full signature is::\n+\n+    ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+The rowId Column for ``UPDATE``\n+-------------------------------\n+\n+The Presto engine identifies rows to be updated using a connector-specific rowId column handle,\n+returned by the connector's ``ConnectorMetadata.getUpdateRowIdColumnHandle()``\n+method.  In addition to the columns that identify the row, for ``UPDATE`` the rowId column will contain\n+any columns that the connector requires in order to perform the ``UPDATE`` operation.  In Hive ACID, for example,\n+the rowId column contains the values of all columns *not* updated by the ``UPDATE`` operation, since Hive ACID\n+implements ``UPDATE`` as a ``DELETE`` paired with an INSERT.\n+\n+UpdatablePageSource API\n+=======================\n+\n+As mentioned above, to support ``DELETE`` or ``UPDATE``, the connector must define a subclass of\n+``UpdatablePageSource``, layered over the connector's usual ``ConnectorPageSource``.  The interesting methods are:\n+\n+* ``Page getNextPage()``.  When the Presto engine calls ``getNextPage()``, the ``UpdatablePageSource`` calls\n+  its underlying ``ConnectorPageSource.getNextPage()`` method to get a page.  Some connectors will reformat\n+  the page before returning it to the Presto engine.\n+\n+* ``void deleteRows(Block rowIds)``.  The Presto engine calls the ``deleteRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page,  passing a block of \"rowIds\", created by the Presto engine based on the column\n+  handle returned by ``ConnectorMetadata.getDeleteRowIdColumnHandle()``\n+\n+* ``void updateRows(Page page)``.  The Presto engine calls the ``updateRows()`` method of the same ``UpdatablePageSource``\n+  instance that supplied the original page, passing a page of projected columns, one for each updated column and one for\n+  the rowId column.  The order of projected columns is defined by the Presto engine, and that order is reflected in the\n+  ``updateExpressionChannelNumbers`` argument to ``ConnectorMetadata.beginUpdate()``.  The job of ``updateRows()`` is to:\n+\n+  * Extract the updated column blocks and the rowId block from the projected page.\n+  * Assemble them in whatever order is required by the connector for storage.\n+  * Store the update result in the underlying file store.\n+\n+  In the case of Hive ACID, ``updateRows()`` stores a file of records that delete the\n+  previous contents of the updated rows, and a separate file that inserts completely\n+  new rows containing the updated and non-updated column values.\n+\n+* ``CompletableFuture<Collection<Slice>> finish()``.  The Presto engine calls ``finish()`` when all the pages\n+  of a split have been processed.  The connector returns a future containing a collection of ``Slice``, representing\n+  connector-specific information about the rows processed.  Usually this will include the row count, and might\n+  include information like the files or partitions created or changed.\n+\n+``ConnectorMetadata`` ``DELETE`` API\n+====================================\n+\n+A connector implementing ``DELETE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getDeleteRowIdColumnHandle()``::\n+\n+   ColumnHandle getDeleteRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle)\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be deleted, as\n+  well as any other fields of the row that the connector will need to complete the ``DELETE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  With the Hive connector and a Hive ACID table, for example, the ``DELETE`` rowId consists of the three ORC ACID columns\n+  that identify the row.\n+\n+* ``beginDelete()``::\n+\n+    ConnectorTableHandle beginDelete(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles)\n+\n+  As the last step in creating the ``DELETE`` execution plan, the connector's ``beginDelete()`` method is called.\n+  In addition to the ``session`` and ``tableHandle``, a map of all column hanedles is supplied.\n+\n+  ``beginDelete()`` performs any orchestration needed in the connector to start processing the ``DELETE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginDelete()``\n+  checks that the table is transactional and starts a Hive Metastore transaction.\n+\n+  ``beginDelete()`` returns a ``ConnectorTableHandle`` with any added information the connector needs when the handle\n+  is passed back to ``finishDelete()`` and the split generation machinery.  For most connectors, the returned table\n+  handle contains a flag identifying the table handle as a table handle for a ``DELETE`` operation.\n+\n+* ``finishDelete()``::\n+\n+      void finishDelete(\n+          ConnectorSession session,\n+          ConnectorTableHandle tableHandle,\n+          Collection<Slice> fragments)\n+\n+  During ``DELETE`` processing, the Presto engine accumulates the ``Slice`` collections returned by ``UpdatablePageSource.finish()``.\n+  After all splits have been processed, the engine calls ``finishDelete()``, passing the table handle and that\n+  collection of ``Slice`` fragments.  In response, the connector takes appropriate actions to complete the ``Delete`` operation.\n+  Those actions might include committing the transaction, assuming the connector supports a transaction paradigm.\n+\n+``ConnectorMetadata`` ``UPDATE`` API\n+====================================\n+\n+A connector implementing ``UPDATE`` must specify three ``ConnectorMetadata`` methods.\n+\n+* ``getUpdateRowIdColumnHandle``::\n+\n+   ColumnHandle getUpdateRowIdColumnHandle(\n+        ConnectorSession session,\n+        ConnectorTableHandle tableHandle,\n+        List<ColumnHandle> updatedColumns)\n+\n+  The ``updatedColumns`` list contains column handles for all columns updated by the ``UPDATE`` operation in table column order.\n+\n+  The ColumnHandle returned by this method provides the \"rowId\" used by the connector to identify rows to be updated, as\n+  well as any other fields of the row that the connector will need to complete the ``UPDATE`` operation.\n+  For a JDBC connector, that rowId is usually the primary key for the table and no other fields are required.\n+  For other connectors, the information needed to identify a row usually consists of multiple physical columns.\n+  Moreover, some connectors may need the values of columns that are not updated to complete the ``UPDATE`` operation.\n+  With the Hive connector and a Hive ACID table, for example, the ``UPDATE`` rowId consists of the three ORC ACID columns\n+  that identify the row, plus the values of all the data columns not updated.\n+\n+* ``beginUpdate``::\n+\n+    ConnectorTableHandle beginUpdate(\n+         ConnectorSession session,\n+         ConnectorTableHandle tableHandle,\n+         Map<String, ColumnHandle> columnHandles,\n+         List<ColumnHandle> updatedColumns,\n+         List<Integer> updateExpressionChannelNumbers)\n+\n+  As the last step in creating the ``UPDATE`` execution plan, the connector's ``beginUpdate()`` method is called,\n+  passing arguments that define the ``UPDATE`` to the connector.  In addition to the ``session``\n+  and ``tableHandle``, the arguments include the list of the updated columns and a list of channel numbers of\n+  updated columns in the projected page created by the Presto engine and passed into ``UpdatablePageSource.updateRows()``.\n+  All column lists are in table column order, as are the ``updateExpressionChannelNumbers``.  The size of\n+  ``updateExpressionChannelNumbers`` is one greater than the number of updated columns - - the last element of the\n+  list is the channel number of the block of rowIds for the page, constructed from the rowId column handle.\n+\n+  ``beginUpdate()`` performs any orchestration needed in the connector to start processing the ``UPDATE``.\n+  This orchestration varies from connector to connector.  In the Hive ACID connector, for example, ``beginUpdate()``\n+  starts the Hive Metastore transaction; checks that the updated table is transactional and that neither", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTYwOQ=="}, "originalCommit": null, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjU3NTI4OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergOrcFileWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTo0Nzo0MVrOH2UyLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxNDozNFrOH20Eig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTY3OQ==", "bodyText": "As the WriterKind is being used across plugins/connectors, should we move it out of the hive plugin module?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526725679", "createdAt": "2020-11-19T09:47:41Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergOrcFileWriter.java", "diffHunk": "@@ -31,6 +31,7 @@\n import io.prestosql.orc.metadata.statistics.DoubleStatistics;\n import io.prestosql.orc.metadata.statistics.IntegerStatistics;\n import io.prestosql.orc.metadata.statistics.StringStatistics;\n+import io.prestosql.plugin.hive.WriterKind;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk0MTkzNw==", "bodyText": "WriterKind is specific to presto-hive's OrcFileWriter, which is used by both presto-hive and presto-iceberg.  Module presto-iceberg depends on presto-hive.  I don't think it makes sense to move WriterKind into presto-spi, because not all connectors will need the distinction between delete writers and insert writers.  We need to for OrcFileWriter because the files written for DELETE and INSERT have different formats in ORC ACID.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526941937", "createdAt": "2020-11-19T14:45:23Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergOrcFileWriter.java", "diffHunk": "@@ -31,6 +31,7 @@\n import io.prestosql.orc.metadata.statistics.DoubleStatistics;\n import io.prestosql.orc.metadata.statistics.IntegerStatistics;\n import io.prestosql.orc.metadata.statistics.StringStatistics;\n+import io.prestosql.plugin.hive.WriterKind;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTY3OQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODI4Mg==", "bodyText": "Sure, we can have it here. With other connectors if we find a similar need, we can move it later", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r527238282", "createdAt": "2020-11-19T22:14:34Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergOrcFileWriter.java", "diffHunk": "@@ -31,6 +31,7 @@\n import io.prestosql.orc.metadata.statistics.DoubleStatistics;\n import io.prestosql.orc.metadata.statistics.IntegerStatistics;\n import io.prestosql.orc.metadata.statistics.StringStatistics;\n+import io.prestosql.plugin.hive.WriterKind;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTY3OQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjU3NTg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTo0Nzo1MVrOH2UyiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxNzowODowM1rOH3v69g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTc2OA==", "bodyText": "Apart from the addInput method, this class seems to be duplicating most of the stuff from DeleteOperator class. Should we have an abstract parent?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526725768", "createdAt": "2020-11-19T09:47:51Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.UpdatablePageSource;\n+import io.prestosql.sql.planner.plan.PlanNodeId;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.airlift.concurrent.MoreFutures.toListenableFuture;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateOperator", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzNTU2OQ==", "bodyText": "It's a good point.  In general, as you've probably observed, class inheritance is used sparingly in Presto, but this seems a good candidate.\nI'll chat @electrum about it.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526935569", "createdAt": "2020-11-19T14:37:04Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.UpdatablePageSource;\n+import io.prestosql.sql.planner.plan.PlanNodeId;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.airlift.concurrent.MoreFutures.toListenableFuture;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateOperator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTc2OA=="}, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxODg3MA==", "bodyText": "As you observed, nearly all of the code duplicated in DeleteOperator and UpdateOperator can be shared.  I introduced new base class AbstractRowChangingOperator, and changed DeleteOperator and UpdateOperator to inherit from it.\nA very nice cleanup!", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528218870", "createdAt": "2020-11-21T17:08:03Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/operator/UpdateOperator.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.UpdatablePageSource;\n+import io.prestosql.sql.planner.plan.PlanNodeId;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.airlift.concurrent.MoreFutures.toListenableFuture;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarbinaryType.VARBINARY;\n+import static java.util.Objects.requireNonNull;\n+\n+public class UpdateOperator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTc2OA=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjU3NzcxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTo0ODoxNVrOH2UzsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDo0NTozNFrOH2h_lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNjA2NA==", "bodyText": "nit: s/rowIdColumn/rowIdColumnHandle/g to differentiate from just the rowId column", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526726064", "createdAt": "2020-11-19T09:48:15Z", "author": {"login": "abhishekkhanna1"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1248,13 +1259,31 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n                 analysis.setColumn(field, columnHandle);\n             }\n \n-            if (isUpdateQuery) {\n+            if (updateKind.isPresent()) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk0MjEwMQ==", "bodyText": "Good point; changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r526942101", "createdAt": "2020-11-19T14:45:34Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1248,13 +1259,31 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n                 analysis.setColumn(field, columnHandle);\n             }\n \n-            if (isUpdateQuery) {\n+            if (updateKind.isPresent()) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNjA2NA=="}, "originalCommit": null, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDMzOTM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjowNTowNlrOH2l5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToxODo1OVrOH4lvWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNjExOQ==", "bodyText": "UnsupportedOperationException would be more appropriate here. updateKind is an argument to this class -- here we're just signaling that this class doesn't know how to handle it.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r527006119", "createdAt": "2020-11-19T16:05:06Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1248,13 +1259,31 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n                 analysis.setColumn(field, columnHandle);\n             }\n \n-            if (isUpdateQuery) {\n+            if (updateKind.isPresent()) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumnHandle;\n+                switch (updateKind.get()) {\n+                    case DELETE:\n+                        rowIdColumnHandle = metadata.getDeleteRowIdColumnHandle(session, tableHandle.get());\n+                        break;\n+                    case UPDATE:\n+                        List<ColumnMetadata> updatedColumnMetadata = analysis.getUpdatedColumns()\n+                                .orElseThrow(() -> new VerifyException(\"updated columns not set\"));\n+                        Set<String> updatedColumnNames = updatedColumnMetadata.stream().map(ColumnMetadata::getName).collect(toImmutableSet());\n+                        List<ColumnHandle> updatedColumns = columnHandles.entrySet().stream()\n+                                .filter(entry -> updatedColumnNames.contains(entry.getKey()))\n+                                .map(Map.Entry::getValue)\n+                                .collect(toImmutableList());\n+                        rowIdColumnHandle = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get(), updatedColumns);\n+                        break;\n+                    default:\n+                        throw new VerifyException(\"Unknown UpdateKind \" + updateKind.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMDYzMg==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529100632", "createdAt": "2020-11-24T01:18:59Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1248,13 +1259,31 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n                 analysis.setColumn(field, columnHandle);\n             }\n \n-            if (isUpdateQuery) {\n+            if (updateKind.isPresent()) {\n                 // Add the row id field\n-                ColumnHandle column = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get());\n-                Type type = metadata.getColumnMetadata(session, tableHandle.get(), column).getType();\n+                ColumnHandle rowIdColumnHandle;\n+                switch (updateKind.get()) {\n+                    case DELETE:\n+                        rowIdColumnHandle = metadata.getDeleteRowIdColumnHandle(session, tableHandle.get());\n+                        break;\n+                    case UPDATE:\n+                        List<ColumnMetadata> updatedColumnMetadata = analysis.getUpdatedColumns()\n+                                .orElseThrow(() -> new VerifyException(\"updated columns not set\"));\n+                        Set<String> updatedColumnNames = updatedColumnMetadata.stream().map(ColumnMetadata::getName).collect(toImmutableSet());\n+                        List<ColumnHandle> updatedColumns = columnHandles.entrySet().stream()\n+                                .filter(entry -> updatedColumnNames.contains(entry.getKey()))\n+                                .map(Map.Entry::getValue)\n+                                .collect(toImmutableList());\n+                        rowIdColumnHandle = metadata.getUpdateRowIdColumnHandle(session, tableHandle.get(), updatedColumns);\n+                        break;\n+                    default:\n+                        throw new VerifyException(\"Unknown UpdateKind \" + updateKind.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNjExOQ=="}, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDU0OTEzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/StandardErrorCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo0OTo1OVrOH2n-Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxNzowODoxNlrOH3v6_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MDAxOA==", "bodyText": "We can use the existing COLUMN_NOT_FOUND", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r527040018", "createdAt": "2020-11-19T16:49:59Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/StandardErrorCode.java", "diffHunk": "@@ -112,6 +112,7 @@\n     NESTED_RECURSIVE(89, USER_ERROR),\n     INVALID_LIMIT_CLAUSE(90, USER_ERROR),\n     INVALID_ORDER_BY(91, USER_ERROR),\n+    UPDATE_COLUMN_DOESNT_EXIST(92, USER_ERROR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxODg3OQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528218879", "createdAt": "2020-11-21T17:08:16Z", "author": {"login": "djsstarburst"}, "path": "presto-spi/src/main/java/io/prestosql/spi/StandardErrorCode.java", "diffHunk": "@@ -112,6 +112,7 @@\n     NESTED_RECURSIVE(89, USER_ERROR),\n     INVALID_LIMIT_CLAUSE(90, USER_ERROR),\n     INVALID_ORDER_BY(91, USER_ERROR),\n+    UPDATE_COLUMN_DOESNT_EXIST(92, USER_ERROR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MDAxOA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzUxODQyOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoyNjoxMlrOH4eGBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToxOToxNVrOH4lvqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTM2Ng==", "bodyText": "DEFAULT is no longer used, so it should be removed from here.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528975366", "createdAt": "2020-11-23T20:26:12Z", "author": {"login": "martint"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -536,7 +542,7 @@ nonReserved\n     : ADD | ADMIN | ALL | ANALYZE | ANY | ARRAY | ASC | AT | AUTHORIZATION\n     | BERNOULLI\n     | CALL | CASCADE | CATALOGS | COLUMN | COLUMNS | COMMENT | COMMIT | COMMITTED | CURRENT\n-    | DATA | DATE | DAY | DEFINER | DESC | DISTRIBUTED | DOUBLE\n+    | DATA | DATE | DAY | DEFAULT | DEFINER | DESC | DISTRIBUTED | DOUBLE", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMDcxMw==", "bodyText": "I'd previously removed the definition, but not this reference.  Removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529100713", "createdAt": "2020-11-24T01:19:15Z", "author": {"login": "djsstarburst"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -536,7 +542,7 @@ nonReserved\n     : ADD | ADMIN | ALL | ANALYZE | ANY | ARRAY | ASC | AT | AUTHORIZATION\n     | BERNOULLI\n     | CALL | CASCADE | CATALOGS | COLUMN | COLUMNS | COMMENT | COMMIT | COMMITTED | CURRENT\n-    | DATA | DATE | DAY | DEFINER | DESC | DISTRIBUTED | DOUBLE\n+    | DATA | DATE | DAY | DEFAULT | DEFINER | DESC | DISTRIBUTED | DOUBLE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTM2Ng=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzUxOTc4OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergOrcFileWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoyNjozOVrOH4eG2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToxOToyM1rOH4lvzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTU3OA==", "bodyText": "This belongs in the other commit.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528975578", "createdAt": "2020-11-23T20:26:39Z", "author": {"login": "martint"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergOrcFileWriter.java", "diffHunk": "@@ -78,7 +79,7 @@ public IcebergOrcFileWriter(\n             OrcWriteValidation.OrcWriteValidationMode validationMode,\n             OrcWriterStats stats)\n     {\n-        super(orcDataSink, NO_ACID_TRANSACTION, false, OptionalInt.empty(), rollbackAction, columnNames, fileColumnTypes, fileColumnOrcTypes, compression, options, writeLegacyVersion, fileInputColumnIndexes, metadata, validationInputFactory, validationMode, stats);\n+        super(orcDataSink, WriterKind.INSERT, NO_ACID_TRANSACTION, false, OptionalInt.empty(), rollbackAction, columnNames, fileColumnTypes, fileColumnOrcTypes, compression, options, writeLegacyVersion, fileInputColumnIndexes, metadata, validationInputFactory, validationMode, stats);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMDc0OQ==", "bodyText": "Good point; moved.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529100749", "createdAt": "2020-11-24T01:19:23Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergOrcFileWriter.java", "diffHunk": "@@ -78,7 +79,7 @@ public IcebergOrcFileWriter(\n             OrcWriteValidation.OrcWriteValidationMode validationMode,\n             OrcWriterStats stats)\n     {\n-        super(orcDataSink, NO_ACID_TRANSACTION, false, OptionalInt.empty(), rollbackAction, columnNames, fileColumnTypes, fileColumnOrcTypes, compression, options, writeLegacyVersion, fileInputColumnIndexes, metadata, validationInputFactory, validationMode, stats);\n+        super(orcDataSink, WriterKind.INSERT, NO_ACID_TRANSACTION, false, OptionalInt.empty(), rollbackAction, columnNames, fileColumnTypes, fileColumnOrcTypes, compression, options, writeLegacyVersion, fileInputColumnIndexes, metadata, validationInputFactory, validationMode, stats);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTU3OA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzUzMTEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDozMDowOFrOH4eNnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoyNzozOVrOH5K8Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NzMwOQ==", "bodyText": "What's an \"update expression channel number\"? Note that channels are a physical concept and not appropriate during query planning.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528977309", "createdAt": "2020-11-23T20:30:08Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -319,6 +324,16 @@\n      */\n     void finishDelete(Session session, TableHandle tableHandle, Collection<Slice> fragments);\n \n+    /**\n+     * Begin update query\n+     */\n+    TableHandle beginUpdate(Session session, TableHandle tableHandle, List<ColumnHandle> updatedColumns, List<Integer> updateExpressionChannelNumbers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMDc5MQ==", "bodyText": "The updateExpressionChannelNumbers give the channel numbers of the projected update SET expressions in the Page supplied to UpdatablePageSource.updateRows().\nI've done this kind of thing differently for SQL Merge - - I packaged up the merge SET expressions in a RowType, so I can guarantee the order.\nThis will take some thought - - I'll commit changes for your other comments and come back to this.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529100791", "createdAt": "2020-11-24T01:19:30Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -319,6 +324,16 @@\n      */\n     void finishDelete(Session session, TableHandle tableHandle, Collection<Slice> fragments);\n \n+    /**\n+     * Begin update query\n+     */\n+    TableHandle beginUpdate(Session session, TableHandle tableHandle, List<ColumnHandle> updatedColumns, List<Integer> updateExpressionChannelNumbers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NzMwOQ=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcxMDA5MQ==", "bodyText": "As commented below, I got rid of updateExpressionChannelNumbers.  Now it only shows up as an argument to UpdatablePageSource.updateRows().", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529710091", "createdAt": "2020-11-24T16:27:39Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -319,6 +324,16 @@\n      */\n     void finishDelete(Session session, TableHandle tableHandle, Collection<Slice> fragments);\n \n+    /**\n+     * Begin update query\n+     */\n+    TableHandle beginUpdate(Session session, TableHandle tableHandle, List<ColumnHandle> updatedColumns, List<Integer> updateExpressionChannelNumbers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NzMwOQ=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzU2ODg0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0MTozOFrOH4ekGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToxOTozNlrOH4lwHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4MzA2Nw==", "bodyText": "The exception should link to the AST node corresponding to the column name (i.e., assignment.getName()) so that the location of the error is more precise and clients can render a better error.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528983067", "createdAt": "2020-11-23T20:41:38Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMDgzMQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529100831", "createdAt": "2020-11-24T01:19:36Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4MzA2Nw=="}, "originalCommit": null, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzU3NjMwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0Mzo1N1rOH4eonA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToxOTo0MFrOH4lwQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NDIyMA==", "bodyText": "\"Updating a table with a row filter is not supported\"", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528984220", "createdAt": "2020-11-23T20:43:57Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMDg2Nw==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529100867", "createdAt": "2020-11-24T01:19:40Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NDIyMA=="}, "originalCommit": null, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzU3NzI0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0NDoxMlrOH4epIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToxOTo0M1rOH4lwVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NDM1Mw==", "bodyText": "\"Updating a table with column masks is not supported\"", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528984353", "createdAt": "2020-11-23T20:44:12Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMDg4Ng==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529100886", "createdAt": "2020-11-24T01:19:43Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NDM1Mw=="}, "originalCommit": null, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzU4ODM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0NzowOFrOH4evgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1MTo1MFrOH5Sy1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NTk4NQ==", "bodyText": "Technically, this should be allowed if the columns with masks are not in the assignments list, but it would only work for connectors that don't require seeing the original value for other columns to perform the update.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528985985", "createdAt": "2020-11-23T20:47:08Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            for (ColumnMetadata tableColumn : allColumns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTAzOA==", "bodyText": "Should I limit the check to updated columns?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529101038", "createdAt": "2020-11-24T01:20:05Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            for (ColumnMetadata tableColumn : allColumns) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NTk4NQ=="}, "originalCommit": null, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzODgwNA==", "bodyText": "I would leave it for now, but add a TODO. It will require more thinking about how to deal with connectors that need to see the pre-image of rows to perform the update without flowing that data through the masking logic.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529838804", "createdAt": "2020-11-24T19:51:50Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            for (ColumnMetadata tableColumn : allColumns) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NTk4NQ=="}, "originalCommit": null, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzYwMjE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo1MToyNlrOH4e3-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyMDoxMVrOH4lxLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4ODE1Mw==", "bodyText": "This is the same as assignmentTargets above.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528988153", "createdAt": "2020-11-23T20:51:26Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTEwMw==", "bodyText": "Doh, removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529101103", "createdAt": "2020-11-24T01:20:11Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4ODE1Mw=="}, "originalCommit": null, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzY2NTk4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToxMTozMVrOH4fdxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyMDoxNVrOH4lxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NzgzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(column -> column.getType())\n          \n          \n            \n                                .map(ColumnMetadata::getType)", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r528997830", "createdAt": "2020-11-23T21:11:31Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            List<ColumnMetadata> updatedColumns = allColumns.stream()\n+                    .filter(column -> updatedTargetNames.contains(column.getName()))\n+                    .collect(toImmutableList());\n+            analysis.setUpdateType(\"UPDATE\", tableName);\n+            analysis.setUpdatedColumns(updatedColumns);\n+\n+            // Analyzer checks for select permissions but UPDATE has a separate permission, so disable access checks\n+            StatementAnalyzer analyzer = new StatementAnalyzer(\n+                    analysis,\n+                    metadata,\n+                    sqlParser,\n+                    groupProvider,\n+                    new AllowAllAccessControl(),\n+                    session,\n+                    warningCollector,\n+                    CorrelationSupport.ALLOWED);\n+\n+            Scope tableScope = analyzer.analyzeForUpdate(table, scope, UpdateKind.UPDATE);\n+            update.getWhere().ifPresent(where -> analyzeWhere(update, tableScope, where));\n+\n+            ImmutableList.Builder<ExpressionAnalysis> analysesBuilder = ImmutableList.builder();\n+            ImmutableList.Builder<Type> expressionTypesBuilder = ImmutableList.builder();\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                Expression expression = assignment.getValue();\n+                ExpressionAnalysis analysis = analyzeExpression(expression, tableScope);\n+                analysesBuilder.add(analysis);\n+                expressionTypesBuilder.add(analysis.getType(expression));\n+            }\n+            List<ExpressionAnalysis> analyses = analysesBuilder.build();\n+            List<Type> expressionTypes = expressionTypesBuilder.build();\n+\n+            List<Type> tableTypes = update.getAssignments().stream()\n+                    .map(assignment -> requireNonNull(columns.get(assignment.getName().getValue())))\n+                    .map(column -> column.getType())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTEzMA==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529101130", "createdAt": "2020-11-24T01:20:15Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1764,6 +1792,106 @@ else if (node.getType() == FULL) {\n             return output;\n         }\n \n+        @Override\n+        protected Scope visitUpdate(Update update, Optional<Scope> scope)\n+        {\n+            Table table = update.getTable();\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, table, table.getName());\n+            if (metadata.getView(session, tableName).isPresent()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Updating through views is not supported\");\n+            }\n+\n+            TableHandle handle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, table, \"Table '%s' does not exist\", tableName));\n+\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, handle);\n+\n+            List<ColumnMetadata> allColumns = tableMetadata.getColumns();\n+            Map<String, ColumnMetadata> columns = allColumns.stream()\n+                    .collect(toImmutableMap(ColumnMetadata::getName, Function.identity()));\n+\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                String columnName = assignment.getName().getValue();\n+                if (!columns.containsKey(columnName)) {\n+                    throw semanticException(COLUMN_NOT_FOUND, update, \"The UPDATE SET target column %s doesn't exist\", columnName);\n+                }\n+            }\n+\n+            Set<String> assignmentTargets = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            accessControl.checkCanUpdateTableColumns(session.toSecurityContext(), tableName, assignmentTargets);\n+\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw semanticException(NOT_SUPPORTED, update, \"Update table with row filter\");\n+            }\n+\n+            for (ColumnMetadata tableColumn : allColumns) {\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, tableColumn.getName(), tableColumn.getType()).isEmpty()) {\n+                    throw semanticException(NOT_SUPPORTED, update, \"Update table with column mask\");\n+                }\n+            }\n+\n+            Set<String> updatedTargetNames = update.getAssignments().stream()\n+                    .map(assignment -> assignment.getName().getValue())\n+                    .collect(toImmutableSet());\n+            List<ColumnMetadata> updatedColumns = allColumns.stream()\n+                    .filter(column -> updatedTargetNames.contains(column.getName()))\n+                    .collect(toImmutableList());\n+            analysis.setUpdateType(\"UPDATE\", tableName);\n+            analysis.setUpdatedColumns(updatedColumns);\n+\n+            // Analyzer checks for select permissions but UPDATE has a separate permission, so disable access checks\n+            StatementAnalyzer analyzer = new StatementAnalyzer(\n+                    analysis,\n+                    metadata,\n+                    sqlParser,\n+                    groupProvider,\n+                    new AllowAllAccessControl(),\n+                    session,\n+                    warningCollector,\n+                    CorrelationSupport.ALLOWED);\n+\n+            Scope tableScope = analyzer.analyzeForUpdate(table, scope, UpdateKind.UPDATE);\n+            update.getWhere().ifPresent(where -> analyzeWhere(update, tableScope, where));\n+\n+            ImmutableList.Builder<ExpressionAnalysis> analysesBuilder = ImmutableList.builder();\n+            ImmutableList.Builder<Type> expressionTypesBuilder = ImmutableList.builder();\n+            for (UpdateAssignment assignment : update.getAssignments()) {\n+                Expression expression = assignment.getValue();\n+                ExpressionAnalysis analysis = analyzeExpression(expression, tableScope);\n+                analysesBuilder.add(analysis);\n+                expressionTypesBuilder.add(analysis.getType(expression));\n+            }\n+            List<ExpressionAnalysis> analyses = analysesBuilder.build();\n+            List<Type> expressionTypes = expressionTypesBuilder.build();\n+\n+            List<Type> tableTypes = update.getAssignments().stream()\n+                    .map(assignment -> requireNonNull(columns.get(assignment.getName().getValue())))\n+                    .map(column -> column.getType())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NzgzMA=="}, "originalCommit": null, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzgyMzAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTo1NTozMFrOH4g5qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoyNjoyMVrOH5K4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMTM1Mg==", "bodyText": "This should be determined and recorded during analysis. In particular:\n\nIt needs to respect identifier matching rules (with respect to quoting) -- that type of logic should not happen in the planner.\nanalysis.getColumnReferences will contain column references across the whole query, including references in nested subqueries, so it would be wrong to include those.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529021352", "createdAt": "2020-11-23T21:55:30Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTE5OQ==", "bodyText": "This will take some thought.  I'll act on the other comments, and come back to this one.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529101199", "createdAt": "2020-11-24T01:20:25Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMTM1Mg=="}, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwOTExMg==", "bodyText": "Actually, it didn't take much thought - - I can arrange that dependencyColumns is no longer required.  I removed it from here and from UpdateNode.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529709112", "createdAt": "2020-11-24T16:26:21Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMTM1Mg=="}, "originalCommit": null, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODAxMDcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjo1ODowMVrOH4iqew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyMDozMlrOH4lxyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MDIzNQ==", "bodyText": "This is not a good assumption to make. There's no guarantee that the top-level node produced by coerce is a projection node.\nHowever, it doesn't look like this needs to know it's a ProjectNode. It's using the key from the project node's assignments, which you can obtain from the node's getOutputSymbols.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529050235", "createdAt": "2020-11-23T22:58:01Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTI1Ng==", "bodyText": "Good point; changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529101256", "createdAt": "2020-11-24T01:20:32Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MDIzNQ=="}, "originalCommit": null, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODAyMjEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowMjowM1rOH4ixWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyMDo0N1rOH4lyEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MTk5Mw==", "bodyText": "remove requireNonNull (if anything, it should be a verify(), but I think it's overkill) and use Collectors.toImmutableList() below.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529051993", "createdAt": "2020-11-23T23:02:03Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTMzMQ==", "bodyText": "requireNonNull removed, but the list needs to be mutable in order to add the rowId symbol at the end.  But maybe this needs to get re-thought along with the channel numbers.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529101331", "createdAt": "2020-11-24T01:20:47Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MTk5Mw=="}, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEwMDAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzozMjoxNFrOH4jhIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoyNjoyOVrOH5K4lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NDIyNA==", "bodyText": "These should be Symbols. It's the job of the LocalExecutionPlanner to turn then into physical channels numbers.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529064224", "createdAt": "2020-11-23T23:32:14Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,\n+                updateExpressionChannelNumbers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTM1Nw==", "bodyText": "This will take a bit of thought.  I'll commit the other suggested changes, and then tackle this one.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529101357", "createdAt": "2020-11-24T01:20:52Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,\n+                updateExpressionChannelNumbers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NDIyNA=="}, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwOTIwNg==", "bodyText": "I eliminated use of updateExpressionChannelNumbers in StatementAnalyzer and QueryPlanner.  It's now created in LocalExecutionPlanner.visitUpdate(), saved in the UpdateOperatorFactory, and passed by UpdateOperator.addInput() to UpdatablePageSource.updateRows().  I believe this makes sense and is consistent with your review comments.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529709206", "createdAt": "2020-11-24T16:26:29Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,\n+                updateExpressionChannelNumbers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NDIyNA=="}, "originalCommit": null, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODExMjg4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzozNzo0NVrOH4jpBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyMDo1N1rOH4lyPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NjI0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Symbol> projectedSymbols = new ArrayList<>();\n          \n          \n            \n                    projectedSymbols.add(rowId);\n          \n          \n            \n                    projectedSymbols.addAll(planAndMappings.mappings.values());\n          \n          \n            \n                    List<Symbol> projectedSymbols = ImmutableList.<Symbol>builder()\n          \n          \n            \n                            .add(rowId)\n          \n          \n            \n                            .addAll(planAndMappings.mappings.values())\n          \n          \n            \n                            .build();", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529066245", "createdAt": "2020-11-23T23:37:45Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTM3NQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529101375", "createdAt": "2020-11-24T01:20:57Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NjI0NQ=="}, "originalCommit": null, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODExOTM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0MDoyNlrOH4jtDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoyNjozNFrOH5K40w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzI3Ng==", "bodyText": "What's projectedSymbols", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529067276", "createdAt": "2020-11-23T23:40:26Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTM5Mw==", "bodyText": "projectedSymbols are the symbols for the UPDATE SET expressions, plus the rowId symbol.  They get used in PruneUpdateSourceColumns:\n    @Override\n    public Result apply(UpdateNode updateNode, Captures captures, Context context)\n    {\n        return restrictChildOutputs(context.getIdAllocator(), updateNode, ImmutableSet.copyOf(updateNode.getProjectedSymbols()))\n                .map(Result::ofPlanNode)\n                .orElse(Result.empty());\n    }", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529101393", "createdAt": "2020-11-24T01:21:01Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzI3Ng=="}, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwOTI2Nw==", "bodyText": "I renamed projectedSymbols to be expressionSymbols.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529709267", "createdAt": "2020-11-24T16:26:34Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +475,104 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+        ProjectNode projectNode = (ProjectNode) builder.getRoot();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(expression -> requireNonNull(planAndMappings.get(expression), \"planAndMappings.get(expression) is null\"))\n+                .collect(Collectors.toList());\n+\n+        Set<String> dependencyColumnNames = analysis.getColumnReferences().stream()\n+                .map(NodeRef::getNode)\n+                .filter(someNode -> someNode instanceof Identifier)\n+                .map(someNode -> ((Identifier) someNode).getValue())\n+                .collect(toImmutableSet());\n+        List<ColumnHandle> dependencyColumns = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> dependencyColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+        List<Integer> updateExpressionChannelNumbers = createUpdateExpressionChannelNumbers(projectNode.getAssignments(), expressionSymbols);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> projectedSymbols = new ArrayList<>();\n+        projectedSymbols.add(rowId);\n+        projectedSymbols.addAll(planAndMappings.mappings.values());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets, dependencyColumns, updateExpressionChannelNumbers),\n+                rowId,\n+                projectedSymbols,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2NzI3Ng=="}, "originalCommit": null, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjkyNDUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1NDozNFrOH5S4tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1ODoxNFrOH6FFrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MDMxMQ==", "bodyText": "Since this needs to modify the list, the list shouldn't be built using Collectors.toList() above. There's no guarantee that such as list is mutable. From the javadocs:\n\nThere are no guarantees on the type, mutability, serializability, or thread-safety of the List returned;", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529840311", "createdAt": "2020-11-24T19:54:34Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +474,69 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(planAndMappings::get)\n+                .collect(Collectors.toList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjgzMA==", "bodyText": "Ah, I didn't realize that!  Changed to an ImmutableList.Builder.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662830", "createdAt": "2020-11-25T21:58:14Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +474,69 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(planAndMappings::get)\n+                .collect(Collectors.toList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MDMxMQ=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk0MjE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1OTo0NVrOH5TDsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDozNzoyMVrOH6Llrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MzEyMg==", "bodyText": "Do expressionSymbols need to be aligned with the columns listed in targets? If so, the fact that they are so disconnected is a little obscure and error prone.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529843122", "createdAt": "2020-11-24T19:59:45Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +474,69 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(planAndMappings::get)\n+                .collect(Collectors.toList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets),\n+                rowId,\n+                expressionSymbols,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyOTM4Nw==", "bodyText": "Also, I would rename expressionSymbols to updatedColumns, updateInputs or something like that. expressionSymbols is too vague.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529929387", "createdAt": "2020-11-24T22:16:30Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +474,69 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(planAndMappings::get)\n+                .collect(Collectors.toList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets),\n+                rowId,\n+                expressionSymbols,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MzEyMg=="}, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2Mjc4Nw==", "bodyText": "expressionSymbols must have the same order as targets.  I gave some thought to keeping both in a Map.    What I didn't like about that is that UpdateNode only cares about the Symbols, and UpdateTarget only cares about column handles.\nI changed the expressionSymbols to updatedColumnValueSymbols, and made the analogous changes to the expression list builder variable.  I also added a comment explaining the \"column value\" means the values of UPDATE column SET expressions.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662787", "createdAt": "2020-11-25T21:58:08Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +474,69 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(planAndMappings::get)\n+                .collect(Collectors.toList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets),\n+                rowId,\n+                expressionSymbols,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MzEyMg=="}, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2NDM3MQ==", "bodyText": "Ok. Although, I would remove the \"symbols\" part of the name. That's self-explanatory from the type of the variable.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530664371", "createdAt": "2020-11-25T22:01:34Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +474,69 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(planAndMappings::get)\n+                .collect(Collectors.toList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets),\n+                rowId,\n+                expressionSymbols,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MzEyMg=="}, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2OTMyNg==", "bodyText": "updatedColumnValueSymbols and friends have been re-Baptized as updatedColumnValues.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530769326", "createdAt": "2020-11-26T04:37:21Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -470,6 +474,69 @@ public DeleteNode plan(Delete node)\n         return new DeleteNode(idAllocator.getNextId(), builder.getRoot(), new DeleteTarget(handle, metadata.getTableMetadata(session, handle).getTable()), rowId, outputs);\n     }\n \n+    public UpdateNode plan(Update node)\n+    {\n+        Table table = node.getTable();\n+        TableHandle handle = analysis.getTableHandle(table);\n+\n+        Map<String, ColumnHandle> dataColumnHandles = metadata.getColumnHandles(session, handle);\n+        List<String> targetColumnNames = node.getAssignments().stream()\n+                .map(assignment -> assignment.getName().getValue())\n+                .collect(toImmutableList());\n+\n+        // Create an UpdateAssignments list in table column order\n+        ImmutableList.Builder<Expression> orderedExpressionBuilder = ImmutableList.builder();\n+        for (String columnName : dataColumnHandles.keySet()) {\n+            int index = targetColumnNames.indexOf(columnName);\n+            if (index < 0) {\n+                continue;\n+            }\n+            orderedExpressionBuilder.add(node.getAssignments().get(index).getValue());\n+        }\n+        List<Expression> orderedExpressions = orderedExpressionBuilder.build();\n+\n+        // create table scan\n+        RelationPlan relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session, recursiveSubqueries)\n+                .process(table, null);\n+\n+        PlanBuilder builder = newPlanBuilder(relationPlan, analysis, lambdaDeclarationToSymbolMap);\n+\n+        if (node.getWhere().isPresent()) {\n+            builder = filter(builder, node.getWhere().get(), node);\n+        }\n+\n+        builder = builder.appendProjections(orderedExpressions, symbolAllocator, idAllocator);\n+\n+        PlanAndMappings planAndMappings = coerce(builder, orderedExpressions, analysis, idAllocator, symbolAllocator, typeCoercion);\n+        builder = planAndMappings.getSubPlan();\n+\n+        List<Symbol> expressionSymbols = orderedExpressions.stream()\n+                .map(planAndMappings::get)\n+                .collect(Collectors.toList());\n+\n+        Symbol rowId = builder.translate(analysis.getRowIdField(table));\n+\n+        expressionSymbols.add(rowId);\n+\n+        List<ColumnHandle> targets = dataColumnHandles.entrySet().stream()\n+                .filter(entry -> targetColumnNames.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+\n+        List<Symbol> outputs = ImmutableList.of(\n+                symbolAllocator.newSymbol(\"partialrows\", BIGINT),\n+                symbolAllocator.newSymbol(\"fragment\", VARBINARY));\n+\n+        // create update node\n+        return new UpdateNode(\n+                idAllocator.getNextId(),\n+                builder.getRoot(),\n+                new UpdateTarget(handle, metadata.getTableMetadata(session, handle).getTable(), targets),\n+                rowId,\n+                expressionSymbols,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MzEyMg=="}, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzYxMTM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/TranslationMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjozNDo1NVrOH5ZgOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoyMToyOFrOIBvDFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0ODczMQ==", "bodyText": "Unrelated change?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529948731", "createdAt": "2020-11-24T22:34:55Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/TranslationMap.java", "diffHunk": "@@ -116,7 +116,7 @@ public TranslationMap withNewMappings(Map<ScopeAware<Expression>, Symbol> mappin\n \n     public TranslationMap withAdditionalMappings(Map<ScopeAware<Expression>, Symbol> mappings)\n     {\n-        Map<ScopeAware<Expression>, Symbol> newMappings = new HashMap<>();\n+        Map<ScopeAware<Expression>, Symbol> newMappings = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjczNA==", "bodyText": "This change and the following two changes were part of a vain attempt to ensure a specific order of Assignments.  I gave that up a couple of iterations ago, but failed to remove these changes.  The present version does it the right way - - by looking up outputs by Symbol.\nReverted.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662734", "createdAt": "2020-11-25T21:57:59Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/TranslationMap.java", "diffHunk": "@@ -116,7 +116,7 @@ public TranslationMap withNewMappings(Map<ScopeAware<Expression>, Symbol> mappin\n \n     public TranslationMap withAdditionalMappings(Map<ScopeAware<Expression>, Symbol> mappings)\n     {\n-        Map<ScopeAware<Expression>, Symbol> newMappings = new HashMap<>();\n+        Map<ScopeAware<Expression>, Symbol> newMappings = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0ODczMQ=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5MDMyNQ==", "bodyText": "Did you forget to revert this?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r538690325", "createdAt": "2020-12-08T18:21:28Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/TranslationMap.java", "diffHunk": "@@ -116,7 +116,7 @@ public TranslationMap withNewMappings(Map<ScopeAware<Expression>, Symbol> mappin\n \n     public TranslationMap withAdditionalMappings(Map<ScopeAware<Expression>, Symbol> mappings)\n     {\n-        Map<ScopeAware<Expression>, Symbol> newMappings = new HashMap<>();\n+        Map<ScopeAware<Expression>, Symbol> newMappings = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0ODczMQ=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzYxNTM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/InlineProjections.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjozNToyNVrOH5Zinw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1Nzo1MVrOH6FFHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0OTM0Mw==", "bodyText": "Unrelated change", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529949343", "createdAt": "2020-11-24T22:35:25Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/InlineProjections.java", "diffHunk": "@@ -83,7 +85,7 @@ public Result apply(ProjectNode parent, Captures captures, Context context)\n         Assignments assignments = child.getAssignments().filter(targets::contains);\n         Map<Symbol, Expression> parentAssignments = parent.getAssignments()\n                 .entrySet().stream()\n-                .collect(Collectors.toMap(\n+                .collect(toImmutableMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjY4NQ==", "bodyText": "Reverted.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662685", "createdAt": "2020-11-25T21:57:51Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/InlineProjections.java", "diffHunk": "@@ -83,7 +85,7 @@ public Result apply(ProjectNode parent, Captures captures, Context context)\n         Assignments assignments = child.getAssignments().filter(targets::contains);\n         Map<Symbol, Expression> parentAssignments = parent.getAssignments()\n                 .entrySet().stream()\n-                .collect(Collectors.toMap(\n+                .collect(toImmutableMap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0OTM0Mw=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzYxNTg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/InlineProjections.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjozNTozMFrOH5Zi9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1Nzo0N1rOH6FE_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0OTQzMA==", "bodyText": "Unrelated change", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529949430", "createdAt": "2020-11-24T22:35:30Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/InlineProjections.java", "diffHunk": "@@ -94,7 +96,7 @@ public Result apply(ProjectNode parent, Captures captures, Context context)\n                 .filter(entry -> targets.contains(entry.getKey()))\n                 .map(Map.Entry::getValue)\n                 .flatMap(entry -> SymbolsExtractor.extractAll(entry).stream())\n-                .collect(toSet());\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjY1Mg==", "bodyText": "Reverted.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662652", "createdAt": "2020-11-25T21:57:47Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/InlineProjections.java", "diffHunk": "@@ -94,7 +96,7 @@ public Result apply(ProjectNode parent, Captures captures, Context context)\n                 .filter(entry -> targets.contains(entry.getKey()))\n                 .map(Map.Entry::getValue)\n                 .flatMap(entry -> SymbolsExtractor.extractAll(entry).stream())\n-                .collect(toSet());\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0OTQzMA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzY1ODA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0MTo0MFrOH5Z9PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1Nzo0MVrOH6FE0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NjE1Nw==", "bodyText": "Why did this change?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529956157", "createdAt": "2020-11-24T22:41:40Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "diffHunk": "@@ -185,7 +203,16 @@ private WriterTarget createWriterTarget(WriterTarget target)\n             }\n             if (target instanceof DeleteTarget) {\n                 DeleteTarget delete = (DeleteTarget) target;\n-                return new DeleteTarget(metadata.beginDelete(session, delete.getHandle()), delete.getSchemaTableName());\n+                TableHandle deleteHandle = getTableHandleFromSource(root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjYxMA==", "bodyText": "It should not have changed.  Reverted.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662610", "createdAt": "2020-11-25T21:57:41Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "diffHunk": "@@ -185,7 +203,16 @@ private WriterTarget createWriterTarget(WriterTarget target)\n             }\n             if (target instanceof DeleteTarget) {\n                 DeleteTarget delete = (DeleteTarget) target;\n-                return new DeleteTarget(metadata.beginDelete(session, delete.getHandle()), delete.getSchemaTableName());\n+                TableHandle deleteHandle = getTableHandleFromSource(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NjE1Nw=="}, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzY5NTYzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0NzoyNVrOH5aU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1NzoyOFrOH6FEdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MjIyMg==", "bodyText": "UpdateTarget contains the reference to the table handle, so it shouldn't be necessary to walk the tree to find it. This code also has the disadvantage of having to be kept in sync with rewriteModifyTableScan below.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529962222", "createdAt": "2020-11-24T22:47:25Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "diffHunk": "@@ -198,7 +225,39 @@ private WriterTarget createWriterTarget(WriterTarget target)\n             throw new IllegalArgumentException(\"Unhandled target type: \" + target.getClass().getSimpleName());\n         }\n \n-        private PlanNode rewriteDeleteTableScan(PlanNode node, TableHandle handle)\n+        private TableHandle getTableHandleFromSource(PlanNode node)\n+        {\n+            if (node instanceof TableScanNode) {\n+                return ((TableScanNode) node).getTable();\n+            }\n+            if (node instanceof DeleteNode) {\n+                return getTableHandleFromSource(((DeleteNode) node).getSource());\n+            }\n+            if (node instanceof UpdateNode) {\n+                return getTableHandleFromSource(((UpdateNode) node).getSource());\n+            }\n+            if (node instanceof ExchangeNode) {\n+                return getTableHandleFromSource(getOnlyElement(node.getSources()));\n+            }\n+            if (node instanceof FilterNode) {\n+                return getTableHandleFromSource(((FilterNode) node).getSource());\n+            }\n+            if (node instanceof ProjectNode) {\n+                return getTableHandleFromSource(((ProjectNode) node).getSource());\n+            }\n+            if (node instanceof SemiJoinNode) {\n+                return getTableHandleFromSource(((SemiJoinNode) node).getSource());\n+            }\n+            if (node instanceof JoinNode) {\n+                JoinNode joinNode = (JoinNode) node;\n+                if (joinNode.getType() == JoinNode.Type.INNER && isAtMostScalar(joinNode.getRight())) {\n+                    return getTableHandleFromSource(joinNode.getLeft());\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Invalid descendant for DeleteNode or UpdateNode: \" + node.getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjUxOQ==", "bodyText": "Yes, I mentioned yesterday morning to David that the TableHandle was a field of UpdateNode, we don't need this junk.\nI'm really happy to get rid of it!", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662519", "createdAt": "2020-11-25T21:57:28Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "diffHunk": "@@ -198,7 +225,39 @@ private WriterTarget createWriterTarget(WriterTarget target)\n             throw new IllegalArgumentException(\"Unhandled target type: \" + target.getClass().getSimpleName());\n         }\n \n-        private PlanNode rewriteDeleteTableScan(PlanNode node, TableHandle handle)\n+        private TableHandle getTableHandleFromSource(PlanNode node)\n+        {\n+            if (node instanceof TableScanNode) {\n+                return ((TableScanNode) node).getTable();\n+            }\n+            if (node instanceof DeleteNode) {\n+                return getTableHandleFromSource(((DeleteNode) node).getSource());\n+            }\n+            if (node instanceof UpdateNode) {\n+                return getTableHandleFromSource(((UpdateNode) node).getSource());\n+            }\n+            if (node instanceof ExchangeNode) {\n+                return getTableHandleFromSource(getOnlyElement(node.getSources()));\n+            }\n+            if (node instanceof FilterNode) {\n+                return getTableHandleFromSource(((FilterNode) node).getSource());\n+            }\n+            if (node instanceof ProjectNode) {\n+                return getTableHandleFromSource(((ProjectNode) node).getSource());\n+            }\n+            if (node instanceof SemiJoinNode) {\n+                return getTableHandleFromSource(((SemiJoinNode) node).getSource());\n+            }\n+            if (node instanceof JoinNode) {\n+                JoinNode joinNode = (JoinNode) node;\n+                if (joinNode.getType() == JoinNode.Type.INNER && isAtMostScalar(joinNode.getRight())) {\n+                    return getTableHandleFromSource(joinNode.getLeft());\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Invalid descendant for DeleteNode or UpdateNode: \" + node.getClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MjIyMg=="}, "originalCommit": null, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzcwNDM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PropertyDerivations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0ODo1NFrOH5aazw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1NzoxN1rOH6FEMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MzcyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ActualProperties properties = Iterables.getOnlyElement(inputProperties).translate(symbol -> Optional.empty());\n          \n          \n            \n                        return ActualProperties.builderFrom(properties)\n          \n          \n            \n                                .build();\n          \n          \n            \n                        return Iterables.getOnlyElement(inputProperties).translate(symbol -> Optional.empty());", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529963727", "createdAt": "2020-11-24T22:48:54Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PropertyDerivations.java", "diffHunk": "@@ -418,6 +419,14 @@ public ActualProperties visitDelete(DeleteNode node, List<ActualProperties> inpu\n             return Iterables.getOnlyElement(inputProperties).translate(symbol -> Optional.empty());\n         }\n \n+        @Override\n+        public ActualProperties visitUpdate(UpdateNode node, List<ActualProperties> inputProperties)\n+        {\n+            ActualProperties properties = Iterables.getOnlyElement(inputProperties).translate(symbol -> Optional.empty());\n+            return ActualProperties.builderFrom(properties)\n+                    .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjQ0OQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662449", "createdAt": "2020-11-25T21:57:17Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PropertyDerivations.java", "diffHunk": "@@ -418,6 +419,14 @@ public ActualProperties visitDelete(DeleteNode node, List<ActualProperties> inpu\n             return Iterables.getOnlyElement(inputProperties).translate(symbol -> Optional.empty());\n         }\n \n+        @Override\n+        public ActualProperties visitUpdate(UpdateNode node, List<ActualProperties> inputProperties)\n+        {\n+            ActualProperties properties = Iterables.getOnlyElement(inputProperties).translate(symbol -> Optional.empty());\n+            return ActualProperties.builderFrom(properties)\n+                    .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MzcyNw=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzczMTkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PruneUnreferencedOutputs.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo1MzoyMlrOH5as8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjowMzoxMVrOH6FOhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2ODM3MQ==", "bodyText": "This needs to include all the symbols required by the UpdateNode (i.e., expressionSymbols). Also, technically, node.getOutputSymbols() should be pruned based on the symbols indicated in the context argument.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529968371", "createdAt": "2020-11-24T22:53:22Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PruneUnreferencedOutputs.java", "diffHunk": "@@ -715,6 +716,13 @@ public PlanNode visitDelete(DeleteNode node, RewriteContext<Set<Symbol>> context\n             return new DeleteNode(node.getId(), source, node.getTarget(), node.getRowId(), node.getOutputSymbols());\n         }\n \n+        @Override\n+        public PlanNode visitUpdate(UpdateNode node, RewriteContext<Set<Symbol>> context)\n+        {\n+            PlanNode source = context.rewrite(node.getSource(), ImmutableSet.of(node.getRowId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjQxMg==", "bodyText": "I changed the rewrite using the expressionSymbols.  I'm uncertain how to follow the guidance on node.getOutputSymbols().  When I stop in the debugger, I always see zero symbols in the context argument.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662412", "createdAt": "2020-11-25T21:57:10Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PruneUnreferencedOutputs.java", "diffHunk": "@@ -715,6 +716,13 @@ public PlanNode visitDelete(DeleteNode node, RewriteContext<Set<Symbol>> context\n             return new DeleteNode(node.getId(), source, node.getTarget(), node.getRowId(), node.getOutputSymbols());\n         }\n \n+        @Override\n+        public PlanNode visitUpdate(UpdateNode node, RewriteContext<Set<Symbol>> context)\n+        {\n+            PlanNode source = context.rewrite(node.getSource(), ImmutableSet.of(node.getRowId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2ODM3MQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2NTA5Mw==", "bodyText": "Hmm.. that could be a bug elsewhere. That would mean that whichever operation is downstream from the Update node doesn't care about any of its outputs.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530665093", "createdAt": "2020-11-25T22:03:11Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PruneUnreferencedOutputs.java", "diffHunk": "@@ -715,6 +716,13 @@ public PlanNode visitDelete(DeleteNode node, RewriteContext<Set<Symbol>> context\n             return new DeleteNode(node.getId(), source, node.getTarget(), node.getRowId(), node.getOutputSymbols());\n         }\n \n+        @Override\n+        public PlanNode visitUpdate(UpdateNode node, RewriteContext<Set<Symbol>> context)\n+        {\n+            PlanNode source = context.rewrite(node.getSource(), ImmutableSet.of(node.getRowId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2ODM3MQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzc0NjY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo1NTo0NFrOH5a2ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODozODowNlrOIAN4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MDgxMQ==", "bodyText": "We should include the columns being updated and the input corresponding to each of them.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529970811", "createdAt": "2020-11-24T22:55:44Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -1110,6 +1111,14 @@ public Void visitDelete(DeleteNode node, Void context)\n             return processChildren(node, context);\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Void context)\n+        {\n+            addNode(node, \"Update\", format(\"[%s]\", node.getTarget()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjMxNQ==", "bodyText": "As of now, the node itself doesn't know what columns are being updated.  It does carry the symbols for the update expressions, and I've added those to the formatted output.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662315", "createdAt": "2020-11-25T21:57:00Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -1110,6 +1111,14 @@ public Void visitDelete(DeleteNode node, Void context)\n             return processChildren(node, context);\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Void context)\n+        {\n+            addNode(node, \"Update\", format(\"[%s]\", node.getTarget()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MDgxMQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2NTIzNA==", "bodyText": "They are recorded in UpdateTarget, no?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530665234", "createdAt": "2020-11-25T22:03:34Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -1110,6 +1111,14 @@ public Void visitDelete(DeleteNode node, Void context)\n             return processChildren(node, context);\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Void context)\n+        {\n+            addNode(node, \"Update\", format(\"[%s]\", node.getTarget()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MDgxMQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2OTI3MQ==", "bodyText": "They weren't - - in only had a list of opaque ColumnHandles.  I changed that list into an ImmutableMap<String, ColumnHandle>, so order would be preserved, and changed the PlanPrinter to show the column names as well as the updateColumnValue symbols.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530769271", "createdAt": "2020-11-26T04:37:11Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -1110,6 +1111,14 @@ public Void visitDelete(DeleteNode node, Void context)\n             return processChildren(node, context);\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Void context)\n+        {\n+            addNode(node, \"Update\", format(\"[%s]\", node.getTarget()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MDgxMQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MjY3NA==", "bodyText": "Oh, I didn\u2019t mean to add the names, but to render the column handles, just like we do when printing the tablescan", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530772674", "createdAt": "2020-11-26T04:51:28Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -1110,6 +1111,14 @@ public Void visitDelete(DeleteNode node, Void context)\n             return processChildren(node, context);\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Void context)\n+        {\n+            addNode(node, \"Update\", format(\"[%s]\", node.getTarget()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MDgxMQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NzAzMw==", "bodyText": "I'm not sure what you are intending.  Given this UPDATE statement:\nUPDATE ... SET col5 = col4, col1 = col3, col3 = col2, col4 = col5, col2 = col1 WHERE col1 = 21\nThis is what PlanPrinter generates with the latest changes:\nUpdate[hive:default:test_update_all_columns_set_true_none_61egligttsrv: col1 = col3_0, col2 = col1_1, col3 = col2_2, col4 = col5_3, col5 = col4_4]\n...\nIf you'd like it to be different, let me know.  I'm happy to make a change but I don't know what change you would like.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r531077033", "createdAt": "2020-11-26T14:47:02Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -1110,6 +1111,14 @@ public Void visitDelete(DeleteNode node, Void context)\n             return processChildren(node, context);\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Void context)\n+        {\n+            addNode(node, \"Update\", format(\"[%s]\", node.getTarget()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MDgxMQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1Njc2Nw==", "bodyText": "I was thinking something like the inverse of that TableScan shows:\n     TableScan[tpch:orders:sf0.01, grouped = false]\n         Layout: [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79)]\n         Estimates: {rows: 15000 (1.52MB), cpu: 1.52M, memory: 0B, network: 0B}\n         clerk := tpch:clerk\n         orderkey := tpch:orderkey\n         orderstatus := tpch:orderstatus\n         custkey := tpch:custkey\n         totalprice := tpch:totalprice\n         comment := tpch:comment\n         orderdate := tpch:orderdate\n         orderpriority := tpch:orderpriority\n         shippriority := tpch:shippriority\n\ne.g.,\nUpdate[tpch:orders]\n    tpch.orderstatus := col0\n    tpch.comment := col1\n    ...", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r532756767", "createdAt": "2020-11-30T17:07:30Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -1110,6 +1111,14 @@ public Void visitDelete(DeleteNode node, Void context)\n             return processChildren(node, context);\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Void context)\n+        {\n+            addNode(node, \"Update\", format(\"[%s]\", node.getTarget()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MDgxMQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5ODI4OA==", "bodyText": "Thanks for spelling it out, @martint!  I've done it.  Here is the result of EXPLAIN UPDATE foo SET col2 = 'DEUX', col3 = col3 + 20 + col1 + col5 WHERE col1 = 13:\nFragment 1 [SOURCE]\n    Output layout: [partialrows, fragment]\n    Output partitioning: SINGLE []\n    Stage Execution Strategy: UNGROUPED_EXECUTION\n    Update[hive:default:foo]\n    \u2502   Layout: [partialrows:bigint, fragment:varbinary]\n    \u2502   col2 := expr_1\n    \u2502   col3 := expr_0\n   \u2514\u2500 ScanFilterProject[table = hive:default:foo, grouped = false, filterPredicate = (\"col1\" = TINYINT '13')]\n           Layout: [field:row(originalTransaction bigint, rowId bigint, bucket integer, row row(col1 tinyint, col4 boolean, col5 integer)), expr_0:bigint, expr_1:varchar]\n           Estimates: {rows: 2 (238B), cpu: 142, memory: 0B, network: 0B}/{rows: ? (?), cpu: 284, memory: 0B, network: 0B}/{rows: ? (?), cpu: ?, memory: 0B, network: 0B}\n           expr_0 := (((\"col3\" + BIGINT '20') + CAST(\"col1\" AS bigint)) + CAST(\"col5\" AS bigint))\n           expr_1 := CAST('DEUX' AS varchar)\n           field := $row_id:struct<originalTransaction:bigint,rowId:bigint,bucket:int,row:struct<col1:tinyint,col4:boolean,col5:int>>:SYNTHESIZED\n           col5 := col5:int:REGULAR\n           col3 := col3:bigint:REGULAR\n           col1 := col1:tinyint:REGULAR", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537098288", "createdAt": "2020-12-06T18:38:06Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -1110,6 +1111,14 @@ public Void visitDelete(DeleteNode node, Void context)\n             return processChildren(node, context);\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Void context)\n+        {\n+            addNode(node, \"Update\", format(\"[%s]\", node.getTarget()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MDgxMQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzc2Nzk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/ValidateDependenciesChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo1OToyMFrOH5bEsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1NjozM1rOH6FC8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NDQ1MQ==", "bodyText": "Add validation for expressionSymbols. This should be as simple as:\ncheckArgument(source.getOutputSymbols().containsAll(node.getExpressionSymbols()));", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r529974451", "createdAt": "2020-11-24T22:59:20Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/ValidateDependenciesChecker.java", "diffHunk": "@@ -573,6 +574,17 @@ public Void visitDelete(DeleteNode node, Set<Symbol> boundSymbols)\n             return null;\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Set<Symbol> boundSymbols)\n+        {\n+            PlanNode source = node.getSource();\n+            source.accept(this, boundSymbols); // visit child\n+\n+            checkArgument(source.getOutputSymbols().contains(node.getRowId()), \"Invalid node. Row ID symbol (%s) is not in source plan output (%s)\", node.getRowId(), node.getSource().getOutputSymbols());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjEyOA==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r530662128", "createdAt": "2020-11-25T21:56:33Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/ValidateDependenciesChecker.java", "diffHunk": "@@ -573,6 +574,17 @@ public Void visitDelete(DeleteNode node, Set<Symbol> boundSymbols)\n             return null;\n         }\n \n+        @Override\n+        public Void visitUpdate(UpdateNode node, Set<Symbol> boundSymbols)\n+        {\n+            PlanNode source = node.getSource();\n+            source.accept(this, boundSymbols); // visit child\n+\n+            checkArgument(source.getOutputSymbols().contains(node.getRowId()), \"Invalid node. Row ID symbol (%s) is not in source plan output (%s)\", node.getRowId(), node.getSource().getOutputSymbols());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NDQ1MQ=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTgwOTYwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozODowM1rOH_i5-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MDozMVrOIAPybg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDIzMg==", "bodyText": "These intersection calls can be inlined", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536394232", "createdAt": "2020-12-04T21:38:03Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1557,6 +1558,95 @@ private static void writeEmptyFile(ConnectorSession session, Path target, JobCon\n         }\n     }\n \n+    @Override\n+    public ConnectorTableHandle beginUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)\n+    {\n+        HiveIdentity identity = new HiveIdentity(session);\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        if (!isTransactionalTable(table.getParameters())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Hive update is only supported for transactional tables\");\n+        }\n+\n+        // Verify that none of the updated columns are partition columns or bucket columns\n+\n+        Set<String> updatedColumnNames = updatedColumns.stream().map(handle -> ((HiveColumnHandle) handle).getName()).collect(toImmutableSet());\n+        Set<String> partitionColumnNames = table.getPartitionColumns().stream().map(Column::getName).collect(toImmutableSet());\n+        Set<String> intersection = intersection(updatedColumnNames, partitionColumnNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTU4Mg==", "bodyText": "Inlined.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129582", "createdAt": "2020-12-06T21:40:31Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1557,6 +1558,95 @@ private static void writeEmptyFile(ConnectorSession session, Path target, JobCon\n         }\n     }\n \n+    @Override\n+    public ConnectorTableHandle beginUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)\n+    {\n+        HiveIdentity identity = new HiveIdentity(session);\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        if (!isTransactionalTable(table.getParameters())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Hive update is only supported for transactional tables\");\n+        }\n+\n+        // Verify that none of the updated columns are partition columns or bucket columns\n+\n+        Set<String> updatedColumnNames = updatedColumns.stream().map(handle -> ((HiveColumnHandle) handle).getName()).collect(toImmutableSet());\n+        Set<String> partitionColumnNames = table.getPartitionColumns().stream().map(Column::getName).collect(toImmutableSet());\n+        Set<String> intersection = intersection(updatedColumnNames, partitionColumnNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDIzMg=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTgxMDE4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozODoxN1rOH_i6Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MDozOVrOIAPymg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDMyNg==", "bodyText": "This could use Optional.ifPresent()", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536394326", "createdAt": "2020-12-04T21:38:17Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1557,6 +1558,95 @@ private static void writeEmptyFile(ConnectorSession session, Path target, JobCon\n         }\n     }\n \n+    @Override\n+    public ConnectorTableHandle beginUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)\n+    {\n+        HiveIdentity identity = new HiveIdentity(session);\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        if (!isTransactionalTable(table.getParameters())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Hive update is only supported for transactional tables\");\n+        }\n+\n+        // Verify that none of the updated columns are partition columns or bucket columns\n+\n+        Set<String> updatedColumnNames = updatedColumns.stream().map(handle -> ((HiveColumnHandle) handle).getName()).collect(toImmutableSet());\n+        Set<String> partitionColumnNames = table.getPartitionColumns().stream().map(Column::getName).collect(toImmutableSet());\n+        Set<String> intersection = intersection(updatedColumnNames, partitionColumnNames);\n+        if (!intersection.isEmpty()) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table partition columns is not supported\");\n+        }\n+\n+        if (hiveTableHandle.getBucketHandle().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTYyNg==", "bodyText": "Yes, that's nicer.  Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129626", "createdAt": "2020-12-06T21:40:39Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1557,6 +1558,95 @@ private static void writeEmptyFile(ConnectorSession session, Path target, JobCon\n         }\n     }\n \n+    @Override\n+    public ConnectorTableHandle beginUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)\n+    {\n+        HiveIdentity identity = new HiveIdentity(session);\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        if (!isTransactionalTable(table.getParameters())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Hive update is only supported for transactional tables\");\n+        }\n+\n+        // Verify that none of the updated columns are partition columns or bucket columns\n+\n+        Set<String> updatedColumnNames = updatedColumns.stream().map(handle -> ((HiveColumnHandle) handle).getName()).collect(toImmutableSet());\n+        Set<String> partitionColumnNames = table.getPartitionColumns().stream().map(Column::getName).collect(toImmutableSet());\n+        Set<String> intersection = intersection(updatedColumnNames, partitionColumnNames);\n+        if (!intersection.isEmpty()) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table partition columns is not supported\");\n+        }\n+\n+        if (hiveTableHandle.getBucketHandle().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDMyNg=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTgxMjI0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozOTowMFrOH_i7jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MDo0N1rOIAPyow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDYzNw==", "bodyText": "Remove table name since we don't have it for other error messages (and it's not needed, since there is only one table updated for a query)", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536394637", "createdAt": "2020-12-04T21:39:00Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1557,6 +1558,95 @@ private static void writeEmptyFile(ConnectorSession session, Path target, JobCon\n         }\n     }\n \n+    @Override\n+    public ConnectorTableHandle beginUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)\n+    {\n+        HiveIdentity identity = new HiveIdentity(session);\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        if (!isTransactionalTable(table.getParameters())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Hive update is only supported for transactional tables\");\n+        }\n+\n+        // Verify that none of the updated columns are partition columns or bucket columns\n+\n+        Set<String> updatedColumnNames = updatedColumns.stream().map(handle -> ((HiveColumnHandle) handle).getName()).collect(toImmutableSet());\n+        Set<String> partitionColumnNames = table.getPartitionColumns().stream().map(Column::getName).collect(toImmutableSet());\n+        Set<String> intersection = intersection(updatedColumnNames, partitionColumnNames);\n+        if (!intersection.isEmpty()) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table partition columns is not supported\");\n+        }\n+\n+        if (hiveTableHandle.getBucketHandle().isPresent()) {\n+            Set<String> bucketColumnNames = hiveTableHandle.getBucketHandle().get().getColumns().stream().map(HiveColumnHandle::getName).collect(toImmutableSet());\n+            intersection = intersection(updatedColumnNames, bucketColumnNames);\n+            if (!intersection.isEmpty()) {\n+                throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table bucket columns is not supported\");\n+            }\n+        }\n+\n+        checkTableIsWritable(table, writesToNonManagedTablesEnabled);\n+\n+        for (Column column : table.getDataColumns()) {\n+            if (!isWritableType(column.getType())) {\n+                throw new PrestoException(NOT_SUPPORTED, format(\"Updating a Hive table %s with column type %s not supported\", tableName, column.getType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTYzNQ==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129635", "createdAt": "2020-12-06T21:40:47Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1557,6 +1558,95 @@ private static void writeEmptyFile(ConnectorSession session, Path target, JobCon\n         }\n     }\n \n+    @Override\n+    public ConnectorTableHandle beginUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)\n+    {\n+        HiveIdentity identity = new HiveIdentity(session);\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        if (!isTransactionalTable(table.getParameters())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Hive update is only supported for transactional tables\");\n+        }\n+\n+        // Verify that none of the updated columns are partition columns or bucket columns\n+\n+        Set<String> updatedColumnNames = updatedColumns.stream().map(handle -> ((HiveColumnHandle) handle).getName()).collect(toImmutableSet());\n+        Set<String> partitionColumnNames = table.getPartitionColumns().stream().map(Column::getName).collect(toImmutableSet());\n+        Set<String> intersection = intersection(updatedColumnNames, partitionColumnNames);\n+        if (!intersection.isEmpty()) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table partition columns is not supported\");\n+        }\n+\n+        if (hiveTableHandle.getBucketHandle().isPresent()) {\n+            Set<String> bucketColumnNames = hiveTableHandle.getBucketHandle().get().getColumns().stream().map(HiveColumnHandle::getName).collect(toImmutableSet());\n+            intersection = intersection(updatedColumnNames, bucketColumnNames);\n+            if (!intersection.isEmpty()) {\n+                throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table bucket columns is not supported\");\n+            }\n+        }\n+\n+        checkTableIsWritable(table, writesToNonManagedTablesEnabled);\n+\n+        for (Column column : table.getDataColumns()) {\n+            if (!isWritableType(column.getType())) {\n+                throw new PrestoException(NOT_SUPPORTED, format(\"Updating a Hive table %s with column type %s not supported\", tableName, column.getType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDYzNw=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTgyNTEzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo0Mjo1MlrOH_jC0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MDo1M1rOIAPytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NjQ5Ng==", "bodyText": "Let's remove this static import since it's not clear what \"codec\" refers to", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536396496", "createdAt": "2020-12-04T21:42:52Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1557,6 +1558,95 @@ private static void writeEmptyFile(ConnectorSession session, Path target, JobCon\n         }\n     }\n \n+    @Override\n+    public ConnectorTableHandle beginUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)\n+    {\n+        HiveIdentity identity = new HiveIdentity(session);\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        if (!isTransactionalTable(table.getParameters())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Hive update is only supported for transactional tables\");\n+        }\n+\n+        // Verify that none of the updated columns are partition columns or bucket columns\n+\n+        Set<String> updatedColumnNames = updatedColumns.stream().map(handle -> ((HiveColumnHandle) handle).getName()).collect(toImmutableSet());\n+        Set<String> partitionColumnNames = table.getPartitionColumns().stream().map(Column::getName).collect(toImmutableSet());\n+        Set<String> intersection = intersection(updatedColumnNames, partitionColumnNames);\n+        if (!intersection.isEmpty()) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table partition columns is not supported\");\n+        }\n+\n+        if (hiveTableHandle.getBucketHandle().isPresent()) {\n+            Set<String> bucketColumnNames = hiveTableHandle.getBucketHandle().get().getColumns().stream().map(HiveColumnHandle::getName).collect(toImmutableSet());\n+            intersection = intersection(updatedColumnNames, bucketColumnNames);\n+            if (!intersection.isEmpty()) {\n+                throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table bucket columns is not supported\");\n+            }\n+        }\n+\n+        checkTableIsWritable(table, writesToNonManagedTablesEnabled);\n+\n+        for (Column column : table.getDataColumns()) {\n+            if (!isWritableType(column.getType())) {\n+                throw new PrestoException(NOT_SUPPORTED, format(\"Updating a Hive table %s with column type %s not supported\", tableName, column.getType()));\n+            }\n+        }\n+\n+        List<HiveColumnHandle> allDataColumns = getRegularColumnHandles(table, typeManager, getTimestampPrecision(session)).stream()\n+                .filter(columnHandle -> !columnHandle.isHidden())\n+                .collect(toList());\n+        List<HiveColumnHandle> hiveUpdatedColumns = updatedColumns.stream().map(HiveColumnHandle.class::cast).collect(toImmutableList());\n+\n+        if (table.getParameters().containsKey(SKIP_HEADER_COUNT_KEY)) {\n+            throw new PrestoException(NOT_SUPPORTED, format(\"Updating a Hive table with %s property not supported\", SKIP_HEADER_COUNT_KEY));\n+        }\n+        if (table.getParameters().containsKey(SKIP_FOOTER_COUNT_KEY)) {\n+            throw new PrestoException(NOT_SUPPORTED, format(\"Updating a Hive table with %s property not supported\", SKIP_FOOTER_COUNT_KEY));\n+        }\n+        LocationHandle locationHandle = locationService.forExistingTable(metastore, session, table);\n+\n+        AcidTransaction transaction = metastore.beginUpdate(session, table);\n+        HiveTableHandle updateHandle = hiveTableHandle.withUpdateProcessor(\n+                transaction,\n+                new HiveUpdateProcessor(allDataColumns, hiveUpdatedColumns));\n+\n+        WriteInfo writeInfo = locationService.getQueryWriteInfo(locationHandle);\n+        metastore.declareIntentionToWrite(session, writeInfo.getWriteMode(), writeInfo.getWritePath(), tableName);\n+        return updateHandle;\n+    }\n+\n+    @Override\n+    public void finishUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, Collection<Slice> fragments)\n+    {\n+        HiveTableHandle handle = (HiveTableHandle) tableHandle;\n+        checkArgument(handle.isAcidUpdate(), \"handle should be a update handle, but is %s\", handle);\n+\n+        requireNonNull(fragments, \"fragments is null\");\n+\n+        SchemaTableName tableName = handle.getSchemaTableName();\n+        HiveIdentity identity = new HiveIdentity(session);\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<PartitionAndStatementId> partitionAndStatementIds = fragments.stream()\n+                .map(Slice::getBytes)\n+                .map(CODEC::fromJson)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTY1NQ==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129655", "createdAt": "2020-12-06T21:40:53Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1557,6 +1558,95 @@ private static void writeEmptyFile(ConnectorSession session, Path target, JobCon\n         }\n     }\n \n+    @Override\n+    public ConnectorTableHandle beginUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)\n+    {\n+        HiveIdentity identity = new HiveIdentity(session);\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        if (!isTransactionalTable(table.getParameters())) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Hive update is only supported for transactional tables\");\n+        }\n+\n+        // Verify that none of the updated columns are partition columns or bucket columns\n+\n+        Set<String> updatedColumnNames = updatedColumns.stream().map(handle -> ((HiveColumnHandle) handle).getName()).collect(toImmutableSet());\n+        Set<String> partitionColumnNames = table.getPartitionColumns().stream().map(Column::getName).collect(toImmutableSet());\n+        Set<String> intersection = intersection(updatedColumnNames, partitionColumnNames);\n+        if (!intersection.isEmpty()) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table partition columns is not supported\");\n+        }\n+\n+        if (hiveTableHandle.getBucketHandle().isPresent()) {\n+            Set<String> bucketColumnNames = hiveTableHandle.getBucketHandle().get().getColumns().stream().map(HiveColumnHandle::getName).collect(toImmutableSet());\n+            intersection = intersection(updatedColumnNames, bucketColumnNames);\n+            if (!intersection.isEmpty()) {\n+                throw new PrestoException(NOT_SUPPORTED, \"Updating Hive table bucket columns is not supported\");\n+            }\n+        }\n+\n+        checkTableIsWritable(table, writesToNonManagedTablesEnabled);\n+\n+        for (Column column : table.getDataColumns()) {\n+            if (!isWritableType(column.getType())) {\n+                throw new PrestoException(NOT_SUPPORTED, format(\"Updating a Hive table %s with column type %s not supported\", tableName, column.getType()));\n+            }\n+        }\n+\n+        List<HiveColumnHandle> allDataColumns = getRegularColumnHandles(table, typeManager, getTimestampPrecision(session)).stream()\n+                .filter(columnHandle -> !columnHandle.isHidden())\n+                .collect(toList());\n+        List<HiveColumnHandle> hiveUpdatedColumns = updatedColumns.stream().map(HiveColumnHandle.class::cast).collect(toImmutableList());\n+\n+        if (table.getParameters().containsKey(SKIP_HEADER_COUNT_KEY)) {\n+            throw new PrestoException(NOT_SUPPORTED, format(\"Updating a Hive table with %s property not supported\", SKIP_HEADER_COUNT_KEY));\n+        }\n+        if (table.getParameters().containsKey(SKIP_FOOTER_COUNT_KEY)) {\n+            throw new PrestoException(NOT_SUPPORTED, format(\"Updating a Hive table with %s property not supported\", SKIP_FOOTER_COUNT_KEY));\n+        }\n+        LocationHandle locationHandle = locationService.forExistingTable(metastore, session, table);\n+\n+        AcidTransaction transaction = metastore.beginUpdate(session, table);\n+        HiveTableHandle updateHandle = hiveTableHandle.withUpdateProcessor(\n+                transaction,\n+                new HiveUpdateProcessor(allDataColumns, hiveUpdatedColumns));\n+\n+        WriteInfo writeInfo = locationService.getQueryWriteInfo(locationHandle);\n+        metastore.declareIntentionToWrite(session, writeInfo.getWriteMode(), writeInfo.getWritePath(), tableName);\n+        return updateHandle;\n+    }\n+\n+    @Override\n+    public void finishUpdate(ConnectorSession session, ConnectorTableHandle tableHandle, Collection<Slice> fragments)\n+    {\n+        HiveTableHandle handle = (HiveTableHandle) tableHandle;\n+        checkArgument(handle.isAcidUpdate(), \"handle should be a update handle, but is %s\", handle);\n+\n+        requireNonNull(fragments, \"fragments is null\");\n+\n+        SchemaTableName tableName = handle.getSchemaTableName();\n+        HiveIdentity identity = new HiveIdentity(session);\n+        Table table = metastore.getTable(identity, tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<PartitionAndStatementId> partitionAndStatementIds = fragments.stream()\n+                .map(Slice::getBytes)\n+                .map(CODEC::fromJson)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NjQ5Ng=="}, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTgyODI5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo0Mzo1OFrOH_jEtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MTowMVrOIAPywg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5Njk4MA==", "bodyText": "Static import getDeleteRowIdColumnHandle since the name stands by itself", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536396980", "createdAt": "2020-12-04T21:43:58Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -2021,7 +2111,14 @@ private void ensureTableSupportsDelete(Table table)\n     @Override\n     public ColumnHandle getDeleteRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n     {\n-        return updateRowIdColumnHandle();\n+        return HiveColumnHandle.getDeleteRowIdColumnHandle();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTY2Ng==", "bodyText": "Actually, the explicit HiveColumnHandle. seems to be required - - if I add the import and remove the HiveColumnHandle., I see an error.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129666", "createdAt": "2020-12-06T21:41:01Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -2021,7 +2111,14 @@ private void ensureTableSupportsDelete(Table table)\n     @Override\n     public ColumnHandle getDeleteRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n     {\n-        return updateRowIdColumnHandle();\n+        return HiveColumnHandle.getDeleteRowIdColumnHandle();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5Njk4MA=="}, "originalCommit": null, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTgzMjY2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo0NToxOFrOH_jHKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MTowN1rOIAPy4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NzYxMQ==", "bodyText": "hiveColumns = hiveTable.getUpdateProcessor()\n        .orElseThrow(() -> new IllegalArgumentException(\"update processor not present\"))\n        .mergeWithNonUpdatedColumns(hiveColumns);", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536397611", "createdAt": "2020-12-04T21:45:18Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "diffHunk": "@@ -138,6 +138,16 @@ public ConnectorPageSource createPageSource(\n         List<HiveColumnHandle> hiveColumns = columns.stream()\n                 .map(HiveColumnHandle.class::cast)\n                 .collect(toList());\n+\n+        List<HiveColumnHandle> dependencyColumns = hiveColumns.stream()\n+                .filter(HiveColumnHandle::isBaseColumn)\n+                .collect(toImmutableList());\n+\n+        if (hiveTable.isAcidUpdate()) {\n+            checkArgument(hiveTable.getUpdateProcessor().isPresent(), \"hiveTable.getUpdateProcessor() isn't present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTY5OQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129699", "createdAt": "2020-12-06T21:41:07Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "diffHunk": "@@ -138,6 +138,16 @@ public ConnectorPageSource createPageSource(\n         List<HiveColumnHandle> hiveColumns = columns.stream()\n                 .map(HiveColumnHandle.class::cast)\n                 .collect(toList());\n+\n+        List<HiveColumnHandle> dependencyColumns = hiveColumns.stream()\n+                .filter(HiveColumnHandle::isBaseColumn)\n+                .collect(toImmutableList());\n+\n+        if (hiveTable.isAcidUpdate()) {\n+            checkArgument(hiveTable.getUpdateProcessor().isPresent(), \"hiveTable.getUpdateProcessor() isn't present\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NzYxMQ=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkwMDMxOnYy", "diffSide": "LEFT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo1OTo0N1rOH_jxqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MToxM1rOIAPy6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwODQ5MA==", "bodyText": "Why move this line?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536408490", "createdAt": "2020-12-04T21:59:47Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -112,22 +127,27 @@ public HiveUpdatablePageSource(\n         this.configuration = requireNonNull(configuration, \"configuration is null\");\n         this.session = requireNonNull(session, \"session is null\");\n         this.hiveRowTypeNullsBlock = nativeValueToBlock(hiveRowType.getType(typeManager), null);\n-        checkArgument(hiveTableHandle.isInAcidTransaction(), \"Not in a transaction; hiveTableHandle: %s\", hiveTableHandle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTcwNw==", "bodyText": "No big reason; restored.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129707", "createdAt": "2020-12-06T21:41:13Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -112,22 +127,27 @@ public HiveUpdatablePageSource(\n         this.configuration = requireNonNull(configuration, \"configuration is null\");\n         this.session = requireNonNull(session, \"session is null\");\n         this.hiveRowTypeNullsBlock = nativeValueToBlock(hiveRowType.getType(typeManager), null);\n-        checkArgument(hiveTableHandle.isInAcidTransaction(), \"Not in a transaction; hiveTableHandle: %s\", hiveTableHandle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwODQ5MA=="}, "originalCommit": null, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkwOTg5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowMzowMVrOH_j3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MToxOFrOIAPzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwOTg3NA==", "bodyText": "Make this final and Optional", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536409874", "createdAt": "2020-12-04T22:03:01Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -78,15 +86,20 @@\n     private final OrcFileWriterFactory orcFileWriterFactory;\n     private final Configuration configuration;\n     private final ConnectorSession session;\n+    private final List<HiveColumnHandle> dependencyColumns;\n     private final Block hiveRowTypeNullsBlock;\n     private final long writeId;\n+    private final AcidOperation updateKind;\n     private final Properties hiveAcidSchema;\n     private final Path deleteDeltaDirectory;\n     private final String bucketFilename;\n+    private Path deltaDirectory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTczMA==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129730", "createdAt": "2020-12-06T21:41:18Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -78,15 +86,20 @@\n     private final OrcFileWriterFactory orcFileWriterFactory;\n     private final Configuration configuration;\n     private final ConnectorSession session;\n+    private final List<HiveColumnHandle> dependencyColumns;\n     private final Block hiveRowTypeNullsBlock;\n     private final long writeId;\n+    private final AcidOperation updateKind;\n     private final Properties hiveAcidSchema;\n     private final Path deleteDeltaDirectory;\n     private final String bucketFilename;\n+    private Path deltaDirectory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwOTg3NA=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkxMTU5OnYy", "diffSide": "LEFT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowMzozNFrOH_j4EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MToyOFrOIAPzDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDEyOA==", "bodyText": "Why remove?", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536410128", "createdAt": "2020-12-04T22:03:34Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -136,7 +156,6 @@ public void deleteRows(Block rowIds)\n     {\n         int positionCount = rowIds.getPositionCount();\n         List<Block> blocks = rowIds.getChildren();\n-        checkArgument(blocks.size() == 3, \"The rowId block should have 3 children, but has \" + blocks.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTc0Mw==", "bodyText": "deleteRows() gets called for UPDATE as well as DELETE, and in the UPDATE case, the RowBlock has 4 children, where the 4th child has the updated column values that don't matter for creation of the ORC DELETE records that result from UPDATE.\nI created method deleteRowsInternal(Block rowIds); restored the check in deleteRows() before calling the internal method; and added a check for size == 4 in the updateRows() code before calling the internal method.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129743", "createdAt": "2020-12-06T21:41:28Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -136,7 +156,6 @@ public void deleteRows(Block rowIds)\n     {\n         int positionCount = rowIds.getPositionCount();\n         List<Block> blocks = rowIds.getChildren();\n-        checkArgument(blocks.size() == 3, \"The rowId block should have 3 children, but has \" + blocks.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDEyOA=="}, "originalCommit": null, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkyMDAzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowNjoyMFrOH_j8rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MTozNFrOIAPzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTMwOA==", "bodyText": "We can simplify to\ndeleteFileWriter.orElseThrow().appendRows(deletePage);\nSince we know it is created by the above method call", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536411308", "createdAt": "2020-12-04T22:06:20Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTc3Ng==", "bodyText": "Simplified.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129776", "createdAt": "2020-12-06T21:41:34Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTMwOA=="}, "originalCommit": null, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkyNDkwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowNzo0NVrOH_j_Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MTozOFrOIAPzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTk3NQ==", "bodyText": "I think the new Block[] is redundant. It can be just\nBlock[] foo = { ... };", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536411975", "createdAt": "2020-12-04T22:07:45Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");\n+        deleteFileWriter.get().appendRows(deletePage);\n         rowCount += positionCount;\n     }\n \n-    private void lazyInitializeFileWriter()\n+    @Override\n+    public void updateRows(Page page, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        int positionCount = page.getPositionCount();\n+        if (positionCount == 0) {\n+            return;\n+        }\n+\n+        HiveUpdateProcessor updateProcessor = hiveTable.getUpdateProcessor().orElseThrow(() -> new IllegalArgumentException(\"updateProcessor isn't present\"));\n+        RowBlock acidRowBlock = updateProcessor.getAcidRowBlock(page, updateExpressionChannelNumbers);\n+        deleteRows(acidRowBlock);\n+\n+        Block mergedColumnsBlock = updateProcessor.createMergedColumnsBlock(page, updateExpressionChannelNumbers);\n+\n+        List<Block> blocks = acidRowBlock.getChildren();\n+\n+        Block currentTransactionBlock = RunLengthEncodedBlock.create(BIGINT, writeId, positionCount);\n+        Block[] blockArray = new Block[] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTc4Mg==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129782", "createdAt": "2020-12-06T21:41:38Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");\n+        deleteFileWriter.get().appendRows(deletePage);\n         rowCount += positionCount;\n     }\n \n-    private void lazyInitializeFileWriter()\n+    @Override\n+    public void updateRows(Page page, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        int positionCount = page.getPositionCount();\n+        if (positionCount == 0) {\n+            return;\n+        }\n+\n+        HiveUpdateProcessor updateProcessor = hiveTable.getUpdateProcessor().orElseThrow(() -> new IllegalArgumentException(\"updateProcessor isn't present\"));\n+        RowBlock acidRowBlock = updateProcessor.getAcidRowBlock(page, updateExpressionChannelNumbers);\n+        deleteRows(acidRowBlock);\n+\n+        Block mergedColumnsBlock = updateProcessor.createMergedColumnsBlock(page, updateExpressionChannelNumbers);\n+\n+        List<Block> blocks = acidRowBlock.getChildren();\n+\n+        Block currentTransactionBlock = RunLengthEncodedBlock.create(BIGINT, writeId, positionCount);\n+        Block[] blockArray = new Block[] {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTk3NQ=="}, "originalCommit": null, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkyNjY3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowODoyNVrOH_kASg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MTo0MlrOIAPzTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMjIzNA==", "bodyText": "Nit: isn't -> not", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536412234", "createdAt": "2020-12-04T22:08:25Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");\n+        deleteFileWriter.get().appendRows(deletePage);\n         rowCount += positionCount;\n     }\n \n-    private void lazyInitializeFileWriter()\n+    @Override\n+    public void updateRows(Page page, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        int positionCount = page.getPositionCount();\n+        if (positionCount == 0) {\n+            return;\n+        }\n+\n+        HiveUpdateProcessor updateProcessor = hiveTable.getUpdateProcessor().orElseThrow(() -> new IllegalArgumentException(\"updateProcessor isn't present\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTgwNQ==", "bodyText": "I've been using \"isn't present\" in a lot of places.  I've changed the three in this file, and will look for others.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129805", "createdAt": "2020-12-06T21:41:42Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");\n+        deleteFileWriter.get().appendRows(deletePage);\n         rowCount += positionCount;\n     }\n \n-    private void lazyInitializeFileWriter()\n+    @Override\n+    public void updateRows(Page page, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        int positionCount = page.getPositionCount();\n+        if (positionCount == 0) {\n+            return;\n+        }\n+\n+        HiveUpdateProcessor updateProcessor = hiveTable.getUpdateProcessor().orElseThrow(() -> new IllegalArgumentException(\"updateProcessor isn't present\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMjIzNA=="}, "originalCommit": null, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkyODYxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowOTowNlrOH_kBZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MTo0NFrOIAPzaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMjUxNg==", "bodyText": "Add trailing comma for consistency", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536412516", "createdAt": "2020-12-04T22:09:06Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");\n+        deleteFileWriter.get().appendRows(deletePage);\n         rowCount += positionCount;\n     }\n \n-    private void lazyInitializeFileWriter()\n+    @Override\n+    public void updateRows(Page page, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        int positionCount = page.getPositionCount();\n+        if (positionCount == 0) {\n+            return;\n+        }\n+\n+        HiveUpdateProcessor updateProcessor = hiveTable.getUpdateProcessor().orElseThrow(() -> new IllegalArgumentException(\"updateProcessor isn't present\"));\n+        RowBlock acidRowBlock = updateProcessor.getAcidRowBlock(page, updateExpressionChannelNumbers);\n+        deleteRows(acidRowBlock);\n+\n+        Block mergedColumnsBlock = updateProcessor.createMergedColumnsBlock(page, updateExpressionChannelNumbers);\n+\n+        List<Block> blocks = acidRowBlock.getChildren();\n+\n+        Block currentTransactionBlock = RunLengthEncodedBlock.create(BIGINT, writeId, positionCount);\n+        Block[] blockArray = new Block[] {\n+                new RunLengthEncodedBlock(INSERT_OPERATION_BLOCK, positionCount),\n+                currentTransactionBlock,\n+                blocks.get(BUCKET_CHANNEL),\n+                createRowIdBlock(positionCount),\n+                currentTransactionBlock,\n+                mergedColumnsBlock", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTgzMg==", "bodyText": "Added here, and earlier in the file where a Block array is created.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129832", "createdAt": "2020-12-06T21:41:44Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");\n+        deleteFileWriter.get().appendRows(deletePage);\n         rowCount += positionCount;\n     }\n \n-    private void lazyInitializeFileWriter()\n+    @Override\n+    public void updateRows(Page page, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        int positionCount = page.getPositionCount();\n+        if (positionCount == 0) {\n+            return;\n+        }\n+\n+        HiveUpdateProcessor updateProcessor = hiveTable.getUpdateProcessor().orElseThrow(() -> new IllegalArgumentException(\"updateProcessor isn't present\"));\n+        RowBlock acidRowBlock = updateProcessor.getAcidRowBlock(page, updateExpressionChannelNumbers);\n+        deleteRows(acidRowBlock);\n+\n+        Block mergedColumnsBlock = updateProcessor.createMergedColumnsBlock(page, updateExpressionChannelNumbers);\n+\n+        List<Block> blocks = acidRowBlock.getChildren();\n+\n+        Block currentTransactionBlock = RunLengthEncodedBlock.create(BIGINT, writeId, positionCount);\n+        Block[] blockArray = new Block[] {\n+                new RunLengthEncodedBlock(INSERT_OPERATION_BLOCK, positionCount),\n+                currentTransactionBlock,\n+                blocks.get(BUCKET_CHANNEL),\n+                createRowIdBlock(positionCount),\n+                currentTransactionBlock,\n+                mergedColumnsBlock", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMjUxNg=="}, "originalCommit": null, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkzMjc2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxMDoxNFrOH_kDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MTo1MVrOIAPzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMzA2Ng==", "bodyText": "Same, we know this was created, so do\ninsertFileWriter.orElseThrow()..appendRows(insertPage);", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536413066", "createdAt": "2020-12-04T22:10:14Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");\n+        deleteFileWriter.get().appendRows(deletePage);\n         rowCount += positionCount;\n     }\n \n-    private void lazyInitializeFileWriter()\n+    @Override\n+    public void updateRows(Page page, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        int positionCount = page.getPositionCount();\n+        if (positionCount == 0) {\n+            return;\n+        }\n+\n+        HiveUpdateProcessor updateProcessor = hiveTable.getUpdateProcessor().orElseThrow(() -> new IllegalArgumentException(\"updateProcessor isn't present\"));\n+        RowBlock acidRowBlock = updateProcessor.getAcidRowBlock(page, updateExpressionChannelNumbers);\n+        deleteRows(acidRowBlock);\n+\n+        Block mergedColumnsBlock = updateProcessor.createMergedColumnsBlock(page, updateExpressionChannelNumbers);\n+\n+        List<Block> blocks = acidRowBlock.getChildren();\n+\n+        Block currentTransactionBlock = RunLengthEncodedBlock.create(BIGINT, writeId, positionCount);\n+        Block[] blockArray = new Block[] {\n+                new RunLengthEncodedBlock(INSERT_OPERATION_BLOCK, positionCount),\n+                currentTransactionBlock,\n+                blocks.get(BUCKET_CHANNEL),\n+                createRowIdBlock(positionCount),\n+                currentTransactionBlock,\n+                mergedColumnsBlock\n+        };\n+\n+        Page insertPage = new Page(blockArray);\n+        lazyInitializeInsertFileWriter();\n+        checkArgument(insertFileWriter.isPresent(), \"insertFileWriter not present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTg1Mg==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129852", "createdAt": "2020-12-06T21:41:51Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -152,18 +171,59 @@ public void deleteRows(Block rowIds)\n             maxWriteId = Math.max(maxWriteId, block.getLong(index, 0));\n         }\n \n-        lazyInitializeFileWriter();\n-        checkArgument(writer.isPresent(), \"writer not present\");\n-        writer.get().appendRows(deletePage);\n+        lazyInitializeDeleteFileWriter();\n+        checkArgument(deleteFileWriter.isPresent(), \"deleteFileWriter not present\");\n+        deleteFileWriter.get().appendRows(deletePage);\n         rowCount += positionCount;\n     }\n \n-    private void lazyInitializeFileWriter()\n+    @Override\n+    public void updateRows(Page page, List<Integer> updateExpressionChannelNumbers)\n+    {\n+        int positionCount = page.getPositionCount();\n+        if (positionCount == 0) {\n+            return;\n+        }\n+\n+        HiveUpdateProcessor updateProcessor = hiveTable.getUpdateProcessor().orElseThrow(() -> new IllegalArgumentException(\"updateProcessor isn't present\"));\n+        RowBlock acidRowBlock = updateProcessor.getAcidRowBlock(page, updateExpressionChannelNumbers);\n+        deleteRows(acidRowBlock);\n+\n+        Block mergedColumnsBlock = updateProcessor.createMergedColumnsBlock(page, updateExpressionChannelNumbers);\n+\n+        List<Block> blocks = acidRowBlock.getChildren();\n+\n+        Block currentTransactionBlock = RunLengthEncodedBlock.create(BIGINT, writeId, positionCount);\n+        Block[] blockArray = new Block[] {\n+                new RunLengthEncodedBlock(INSERT_OPERATION_BLOCK, positionCount),\n+                currentTransactionBlock,\n+                blocks.get(BUCKET_CHANNEL),\n+                createRowIdBlock(positionCount),\n+                currentTransactionBlock,\n+                mergedColumnsBlock\n+        };\n+\n+        Page insertPage = new Page(blockArray);\n+        lazyInitializeInsertFileWriter();\n+        checkArgument(insertFileWriter.isPresent(), \"insertFileWriter not present\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMzA2Ng=="}, "originalCommit": null, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkzODE0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxMTo0NlrOH_kGWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MTo1NVrOIAPzkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMzc4NA==", "bodyText": "This is a bit long, I'd wrap the arguments to PartitionAndStatementId", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536413784", "createdAt": "2020-12-04T22:11:46Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -172,21 +232,58 @@ private void lazyInitializeFileWriter()\n                     session,\n                     bucketNumber,\n                     hiveTable.getTransaction(),\n-                    true);\n+                    true,\n+                    WriterKind.DELETE);\n+        }\n+    }\n+\n+    private void lazyInitializeInsertFileWriter()\n+    {\n+        if (insertFileWriter.isEmpty()) {\n+            Properties schemaCopy = new Properties();\n+            schemaCopy.putAll(hiveAcidSchema);\n+            insertFileWriter = orcFileWriterFactory.createFileWriter(\n+                    new Path(format(\"%s/%s\", deltaDirectory, bucketFilename)),\n+                    ACID_COLUMN_NAMES,\n+                    fromHiveStorageFormat(ORC),\n+                    schemaCopy,\n+                    toJobConf(configuration),\n+                    session,\n+                    bucketNumber,\n+                    hiveTable.getTransaction(),\n+                    true,\n+                    WriterKind.INSERT);\n         }\n     }\n \n     @Override\n     public CompletableFuture<Collection<Slice>> finish()\n     {\n-        if (writer.isPresent()) {\n-            OrcFileWriter orcFileWriter = (OrcFileWriter) writer.get();\n-            orcFileWriter.setMaxWriteId(maxWriteId);\n-            orcFileWriter.commit();\n-            Slice fragment = Slices.wrappedBuffer(CODEC.toJsonBytes(new PartitionAndStatementId(partitionName, statementId, rowCount, deleteDeltaDirectory.toString())));\n-            return completedFuture(ImmutableList.of(fragment));\n-        }\n-        return completedFuture(ImmutableList.of());\n+        if (deleteFileWriter.isEmpty()) {\n+            return completedFuture(ImmutableList.of());\n+        }\n+        OrcFileWriter deleteWriter = (OrcFileWriter) deleteFileWriter.get();\n+        deleteWriter.setMaxWriteId(maxWriteId);\n+        deleteWriter.commit();\n+\n+        Optional<String> deltaDirectoryString;\n+        switch (updateKind) {\n+            case DELETE:\n+                deltaDirectoryString = Optional.empty();\n+                break;\n+\n+            case UPDATE:\n+                OrcFileWriter insertWriter = (OrcFileWriter) insertFileWriter.get();\n+                insertWriter.setMaxWriteId(maxWriteId);\n+                insertWriter.commit();\n+                deltaDirectoryString = Optional.of(deltaDirectory.toString());\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unknown UpdateKind \" + updateKind);\n+        }\n+        Slice fragment = Slices.wrappedBuffer(CODEC.toJsonBytes(new PartitionAndStatementId(partitionName, statementId, rowCount, deleteDeltaDirectory.toString(), deltaDirectoryString)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTg3NA==", "bodyText": "Wrapped.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129874", "createdAt": "2020-12-06T21:41:55Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdatablePageSource.java", "diffHunk": "@@ -172,21 +232,58 @@ private void lazyInitializeFileWriter()\n                     session,\n                     bucketNumber,\n                     hiveTable.getTransaction(),\n-                    true);\n+                    true,\n+                    WriterKind.DELETE);\n+        }\n+    }\n+\n+    private void lazyInitializeInsertFileWriter()\n+    {\n+        if (insertFileWriter.isEmpty()) {\n+            Properties schemaCopy = new Properties();\n+            schemaCopy.putAll(hiveAcidSchema);\n+            insertFileWriter = orcFileWriterFactory.createFileWriter(\n+                    new Path(format(\"%s/%s\", deltaDirectory, bucketFilename)),\n+                    ACID_COLUMN_NAMES,\n+                    fromHiveStorageFormat(ORC),\n+                    schemaCopy,\n+                    toJobConf(configuration),\n+                    session,\n+                    bucketNumber,\n+                    hiveTable.getTransaction(),\n+                    true,\n+                    WriterKind.INSERT);\n         }\n     }\n \n     @Override\n     public CompletableFuture<Collection<Slice>> finish()\n     {\n-        if (writer.isPresent()) {\n-            OrcFileWriter orcFileWriter = (OrcFileWriter) writer.get();\n-            orcFileWriter.setMaxWriteId(maxWriteId);\n-            orcFileWriter.commit();\n-            Slice fragment = Slices.wrappedBuffer(CODEC.toJsonBytes(new PartitionAndStatementId(partitionName, statementId, rowCount, deleteDeltaDirectory.toString())));\n-            return completedFuture(ImmutableList.of(fragment));\n-        }\n-        return completedFuture(ImmutableList.of());\n+        if (deleteFileWriter.isEmpty()) {\n+            return completedFuture(ImmutableList.of());\n+        }\n+        OrcFileWriter deleteWriter = (OrcFileWriter) deleteFileWriter.get();\n+        deleteWriter.setMaxWriteId(maxWriteId);\n+        deleteWriter.commit();\n+\n+        Optional<String> deltaDirectoryString;\n+        switch (updateKind) {\n+            case DELETE:\n+                deltaDirectoryString = Optional.empty();\n+                break;\n+\n+            case UPDATE:\n+                OrcFileWriter insertWriter = (OrcFileWriter) insertFileWriter.get();\n+                insertWriter.setMaxWriteId(maxWriteId);\n+                insertWriter.commit();\n+                deltaDirectoryString = Optional.of(deltaDirectory.toString());\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unknown UpdateKind \" + updateKind);\n+        }\n+        Slice fragment = Slices.wrappedBuffer(CODEC.toJsonBytes(new PartitionAndStatementId(partitionName, statementId, rowCount, deleteDeltaDirectory.toString(), deltaDirectoryString)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMzc4NA=="}, "originalCommit": null, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk0MzU2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxMzoyN1rOH_kJQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0MjoxN1rOIAPz5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNDUzMQ==", "bodyText": "Extra the ++ to a separate statement", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r536414531", "createdAt": "2020-12-04T22:13:27Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyOTk1Ng==", "bodyText": "Separated here and in all other uses of ++ in the file.", "url": "https://github.com/trinodb/trino/pull/5861#discussion_r537129956", "createdAt": "2020-12-06T21:42:17Z", "author": {"login": "djsstarburst"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveUpdateProcessor.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.hive.orc.OrcDeletedRows;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.RowBlock;\n+import io.prestosql.spi.type.RowType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.ColumnType.SYNTHESIZED;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_INDEX;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.UPDATE_ROW_ID_COLUMN_NAME;\n+import static io.prestosql.plugin.hive.HiveColumnHandle.createBaseColumn;\n+import static io.prestosql.plugin.hive.HiveType.toHiveType;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.BUCKET_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ORIGINAL_TRANSACTION_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_CHANNEL;\n+import static io.prestosql.plugin.hive.HiveUpdatablePageSource.ROW_ID_CHANNEL;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_COLUMN_ROW_STRUCT;\n+import static io.prestosql.plugin.hive.acid.AcidSchema.ACID_READ_FIELDS;\n+import static io.prestosql.spi.block.RowBlock.fromFieldBlocks;\n+import static io.prestosql.spi.type.RowType.Field;\n+import static io.prestosql.spi.type.RowType.field;\n+import static io.prestosql.spi.type.RowType.from;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveUpdateProcessor\n+{\n+    private final List<HiveColumnHandle> allDataColumns;\n+    private final List<HiveColumnHandle> updatedColumns;\n+    private final List<HiveColumnHandle> nonUpdatedColumns;\n+\n+    @JsonCreator\n+    public HiveUpdateProcessor(\n+            @JsonProperty(\"allColumns\") List<HiveColumnHandle> allDataColumns,\n+            @JsonProperty(\"updatedColumns\") List<HiveColumnHandle> updatedColumns)\n+    {\n+        this.allDataColumns = requireNonNull(allDataColumns, \"allColumns is null\");\n+        this.updatedColumns = requireNonNull(updatedColumns, \"updatedColumns is null\");\n+        checkArgument(allDataColumns.containsAll(updatedColumns), \"allColumns does not contain all updatedColumns\");\n+        this.nonUpdatedColumns = allDataColumns.stream()\n+                .filter(column -> !updatedColumns.contains(column))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Map<HiveColumnHandle, Integer> makeNonUpdatedChannelNumbers(List<HiveColumnHandle> dependencyColumns)\n+    {\n+        ImmutableMap.Builder<HiveColumnHandle, Integer> nonUpdatedNumbersBuilder = ImmutableMap.builder();\n+        int nonUpdatedIndex = 0;\n+        for (HiveColumnHandle handle : allDataColumns) {\n+            if (nonUpdatedColumns.contains(handle)) {\n+                nonUpdatedNumbersBuilder.put(handle, nonUpdatedIndex++);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNDUzMQ=="}, "originalCommit": null, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4980, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}