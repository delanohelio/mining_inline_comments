{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzM1MzQ3", "number": 6415, "title": "Handle Kafka Schema Registry unsupported formats", "bodyText": "Fail fast Kafka Schema Registry on unsupported format", "createdAt": "2020-12-21T21:33:11Z", "url": "https://github.com/trinodb/trino/pull/6415", "merged": true, "mergeCommit": {"oid": "4a7c7bdc27d33bfe0e29e5c087506193e7ac4911"}, "closed": true, "closedAt": "2020-12-22T19:45:37Z", "author": {"login": "kokosing"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdokSNugFqTU1Njg0MDc1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdo7F-iAFqTU1NzcyMjQ2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODQwNzU5", "url": "https://github.com/trinodb/trino/pull/6415#pullrequestreview-556840759", "createdAt": "2020-12-22T06:10:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoxMDoyOVrOIJvk2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoxMDoyOVrOIJvk2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NzU3OA==", "bodyText": "Once we move to latest schema registry can we handle them based on SchemaProvider#getSchemaType ? I will raising a PR to bind SchemaProvider and I guess we can inject it here also to validate here", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547087578", "createdAt": "2020-12-22T06:10:29Z", "author": {"login": "Praveen2112"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/schema/confluent/ConfluentSchemaRegistryTableDescriptionSupplier.java", "diffHunk": "@@ -187,7 +190,11 @@ private String resolveSubject(String candidate)\n     private KafkaTopicFieldGroup getFieldGroup(AvroSchemaConverter avroSchemaConverter, String subject)\n     {\n         try {\n-            Schema schema = new Schema.Parser().parse(schemaRegistryClient.getLatestSchemaMetadata(subject).getSchema());\n+            SchemaMetadata schemaMetadata = schemaRegistryClient.getLatestSchemaMetadata(subject);\n+            if (schemaMetadata.getSchemaType() != \"AVRO\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTI2NjQ4", "url": "https://github.com/trinodb/trino/pull/6415#pullrequestreview-557126648", "createdAt": "2020-12-22T14:40:58Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo0MDo1OFrOIJ9cGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo0MDo1OFrOIJ9cGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxNDcxMg==", "bodyText": "We don't have to bind them separately, SchemaRegistryClient#getSchemaProviders would give a Map<String, SchemaParser>", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547314712", "createdAt": "2020-12-22T14:40:58Z", "author": {"login": "Praveen2112"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/schema/confluent/ConfluentModule.java", "diffHunk": "@@ -64,6 +64,7 @@ protected void setup(Binder binder)\n         newSetBinder(binder, SchemaProvider.class).addBinding().to(AvroSchemaProvider.class).in(Scopes.SINGLETON);\n         newSetBinder(binder, SessionPropertiesProvider.class).addBinding().to(ConfluentSessionProperties.class).in(Scopes.SINGLETON);\n         binder.bind(TableDescriptionSupplier.class).toProvider(ConfluentSchemaRegistryTableDescriptionSupplier.Factory.class).in(Scopes.SINGLETON);\n+        newMapBinder(binder, String.class, SchemaParser.class).addBinding(\"AVRO\").to(AvroSchemaParser.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MjIxMjA3", "url": "https://github.com/trinodb/trino/pull/6415#pullrequestreview-557221207", "createdAt": "2020-12-22T16:51:52Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1MTo1MlrOIKB1ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1MTo1MlrOIKB1ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NjgxMA==", "bodyText": "Is there is any plugin that could fail if such libraries are added ?", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547386810", "createdAt": "2020-12-22T16:51:52Z", "author": {"login": "Praveen2112"}, "path": "pom.xml", "diffHunk": "@@ -1113,6 +1113,27 @@\n                 </exclusions>\n             </dependency>\n \n+            <dependency>\n+                <!-- This is under Confluence Community License and it should not be used in compile scope -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "353beda80e91733b42f6500e9b7a57d00d51cfc4", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/353beda80e91733b42f6500e9b7a57d00d51cfc4", "committedDate": "2020-12-22T19:44:15Z", "message": "Cleanup in ConfluentSchemaRegistryTableDescriptionSupplier\n\nOrder fields, constructor parameters and initialization statements\nso they are in the same order.\nAlso cleanup requireNonNull usage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d5464a230408fad2bb080a2b3f93a4d7f01903a", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/5d5464a230408fad2bb080a2b3f93a4d7f01903a", "committedDate": "2020-12-22T19:44:15Z", "message": "Use Optional.isEmpty() instead of negated isPresent()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01ae8c61025f74efd1aea6b7eb9a9885ab3e98c6", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/01ae8c61025f74efd1aea6b7eb9a9885ab3e98c6", "committedDate": "2020-12-22T19:44:15Z", "message": "Extract SchemaParser in Kafka Schema Registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a7c7bdc27d33bfe0e29e5c087506193e7ac4911", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/4a7c7bdc27d33bfe0e29e5c087506193e7ac4911", "committedDate": "2020-12-22T19:44:15Z", "message": "Fail fast Kafka Schema Registry on unsupported format"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "4a7c7bdc27d33bfe0e29e5c087506193e7ac4911", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/4a7c7bdc27d33bfe0e29e5c087506193e7ac4911", "committedDate": "2020-12-22T19:44:15Z", "message": "Fail fast Kafka Schema Registry on unsupported format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NzIyNDYw", "url": "https://github.com/trinodb/trino/pull/6415#pullrequestreview-557722460", "createdAt": "2020-12-23T08:44:26Z", "commit": {"oid": "4a7c7bdc27d33bfe0e29e5c087506193e7ac4911"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0NDoyN1rOIKb9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0NDoyN1rOIKb9gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxNDc4Ng==", "bodyText": "send -> sent", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547814786", "createdAt": "2020-12-23T08:44:27Z", "author": {"login": "skrzypo987"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/schema/confluent/TestKafkaWithConfluentSchemaRegistryMinimalFunctionality.java", "diffHunk": "@@ -137,6 +148,35 @@ public void testUnsupportedInsert()\n         assertQueryFails(format(\"INSERT INTO \\\"%s\\\" VALUES (0, 0, '')\", topicName), \"Insert not supported\");\n     }\n \n+    @Test\n+    public void testUnsupportedFormat()\n+            throws Exception\n+    {\n+        String topicName = \"topic-unsupported-format\";\n+        testingKafkaWithSchemaRegistry.createTopic(topicName);\n+\n+        assertNotExists(topicName);\n+\n+        Future<RecordMetadata> lastSendFuture = Futures.immediateFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7c7bdc27d33bfe0e29e5c087506193e7ac4911"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1907, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}