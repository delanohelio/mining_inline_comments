{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzYwNDUw", "number": 3877, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozOToxMVrOEA149Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyOTo1M1rOEBuOrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE4Mzg5OnYy", "diffSide": "LEFT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDozOToxMVrOGcXq2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMToyODo0NVrOGdax0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTExNA==", "bodyText": "You can always call Modules.combine. In my perception Module is a some kind of \"collection\", so returning a collection of collections does make much sense.", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r432401114", "createdAt": "2020-05-29T10:39:11Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "diffHunk": "@@ -83,14 +85,14 @@ public Connector create(String catalogName, Map<String, String> requiredConfig,\n         return injector.getInstance(JdbcConnector.class);\n     }\n \n-    public interface JdbcModuleProvider\n+    public interface JdbcModulesProvider\n     {\n-        Module getModule(String catalogName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NjM2OQ==", "bodyText": "It appears that in Modules.combine(A, B) module B fails to inject anything bound by module A. Such problems didn't appear when using List.", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r432786369", "createdAt": "2020-05-29T23:55:57Z", "author": {"login": "MiguelWeezardo"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "diffHunk": "@@ -83,14 +85,14 @@ public Connector create(String catalogName, Map<String, String> requiredConfig,\n         return injector.getInstance(JdbcConnector.class);\n     }\n \n-    public interface JdbcModuleProvider\n+    public interface JdbcModulesProvider\n     {\n-        Module getModule(String catalogName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTExNA=="}, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MDUxMA==", "bodyText": "Have you tried:\nimport static io.airlift.configuration.ConfigurationAwareModules.combine;\n\n?", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r433090510", "createdAt": "2020-06-01T07:49:43Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "diffHunk": "@@ -83,14 +85,14 @@ public Connector create(String catalogName, Map<String, String> requiredConfig,\n         return injector.getInstance(JdbcConnector.class);\n     }\n \n-    public interface JdbcModuleProvider\n+    public interface JdbcModulesProvider\n     {\n-        Module getModule(String catalogName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTExNA=="}, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MTY0NA==", "bodyText": "It appears that in Modules.combine(A, B) module B fails to inject anything bound by module A.\n\nIt does not correct, we are using such composition already already in base JDBC connector. Also from what I understand you trying to remove CredentialProviderModule beans from the initialization as there were initialized exactly this way, out of your control.", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r433091644", "createdAt": "2020-06-01T07:52:31Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "diffHunk": "@@ -83,14 +85,14 @@ public Connector create(String catalogName, Map<String, String> requiredConfig,\n         return injector.getInstance(JdbcConnector.class);\n     }\n \n-    public interface JdbcModuleProvider\n+    public interface JdbcModulesProvider\n     {\n-        Module getModule(String catalogName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTExNA=="}, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMDYyNQ==", "bodyText": "I'll try ConfigurationAwareModules.combine next, with regular Modules.combine the bindings from one module weren't injected into the other module.", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r433500625", "createdAt": "2020-06-01T21:28:45Z", "author": {"login": "MiguelWeezardo"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "diffHunk": "@@ -83,14 +85,14 @@ public Connector create(String catalogName, Map<String, String> requiredConfig,\n         return injector.getInstance(JdbcConnector.class);\n     }\n \n-    public interface JdbcModuleProvider\n+    public interface JdbcModulesProvider\n     {\n-        Module getModule(String catalogName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTExNA=="}, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE5MzA3OnYy", "diffSide": "LEFT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0Mjo0MFrOGcXwtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0Mjo0MFrOGcXwtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMjYxMw==", "bodyText": "Maybe simply let's remove it from here and it via JdbcConnectorFactory in all places where it is used instead of this refactor?", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r432402613", "createdAt": "2020-05-29T10:42:40Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "diffHunk": "@@ -67,12 +68,13 @@ public Connector create(String catalogName, Map<String, String> requiredConfig,\n         requireNonNull(requiredConfig, \"requiredConfig is null\");\n \n         Bootstrap app = new Bootstrap(\n-                binder -> binder.bind(TypeManager.class).toInstance(context.getTypeManager()),\n-                binder -> binder.bind(NodeManager.class).toInstance(context.getNodeManager()),\n-                binder -> binder.bind(VersionEmbedder.class).toInstance(context.getVersionEmbedder()),\n-                new JdbcModule(catalogName),\n-                new CredentialProviderModule(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzYxNzU1OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoxMDozMlrOGcb-Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoxMDozMlrOGcb-Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3MTYyMg==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r432471622", "createdAt": "2020-05-29T13:10:32Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcConnectorFactory.java", "diffHunk": "@@ -22,7 +24,7 @@\n     @Test\n     public void test()\n     {\n-        ConnectorFactory connectorFactory = new JdbcConnectorFactory(\"test\", new TestingH2JdbcModule());\n+        ConnectorFactory connectorFactory = new JdbcConnectorFactory(\"test\", Modules.combine(new CredentialProviderModule(), new TestingH2JdbcModule()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzYyMDE4OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoxMToxNVrOGcb_4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoxMToxNVrOGcb_4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3MjAzMg==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r432472032", "createdAt": "2020-05-29T13:11:15Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPlugin.java", "diffHunk": "@@ -13,31 +13,15 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n-import com.google.common.collect.ImmutableList;\n import com.google.inject.Module;\n-import io.prestosql.spi.Plugin;\n-import io.prestosql.spi.connector.ConnectorFactory;\n-\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Strings.isNullOrEmpty;\n-import static java.util.Objects.requireNonNull;\n+import com.google.inject.util.Modules;\n+import io.prestosql.plugin.jdbc.credential.CredentialProviderModule;\n \n public class JdbcPlugin\n-        implements Plugin\n+        extends BaseJdbcPlugin\n {\n-    private final String name;\n-    private final Module module;\n-\n     public JdbcPlugin(String name, Module module)\n     {\n-        checkArgument(!isNullOrEmpty(name), \"name is null or empty\");\n-        this.name = name;\n-        this.module = requireNonNull(module, \"module is null\");\n-    }\n-\n-    @Override\n-    public Iterable<ConnectorFactory> getConnectorFactories()\n-    {\n-        return ImmutableList.of(new JdbcConnectorFactory(name, module));\n+        super(name, Modules.combine(new CredentialProviderModule(), module));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzYyMjU0OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoxMTo1M1rOGccBaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoxMTo1M1rOGccBaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3MjQyNA==", "bodyText": "I don't see this class", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r432472424", "createdAt": "2020-05-29T13:11:53Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPlugin.java", "diffHunk": "@@ -13,31 +13,15 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n-import com.google.common.collect.ImmutableList;\n import com.google.inject.Module;\n-import io.prestosql.spi.Plugin;\n-import io.prestosql.spi.connector.ConnectorFactory;\n-\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Strings.isNullOrEmpty;\n-import static java.util.Objects.requireNonNull;\n+import com.google.inject.util.Modules;\n+import io.prestosql.plugin.jdbc.credential.CredentialProviderModule;\n \n public class JdbcPlugin\n-        implements Plugin\n+        extends BaseJdbcPlugin", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzYzMjU3OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoxNDozNFrOGccHew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMDoyMzowMlrOGc7DHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3Mzk3OQ==", "bodyText": "Another though. Maybe instead of putting this module here and having BaseJdbcPlugin we could add a factory method to JdbcPlugin, like\nJdbcPlugin.createWithCredentials(name, additionalModue);\n\n?\nWhat do you think? I have a feeling that using inheritance is too heavy for this.", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r432473979", "createdAt": "2020-05-29T13:14:34Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPlugin.java", "diffHunk": "@@ -13,31 +13,15 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n-import com.google.common.collect.ImmutableList;\n import com.google.inject.Module;\n-import io.prestosql.spi.Plugin;\n-import io.prestosql.spi.connector.ConnectorFactory;\n-\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Strings.isNullOrEmpty;\n-import static java.util.Objects.requireNonNull;\n+import com.google.inject.util.Modules;\n+import io.prestosql.plugin.jdbc.credential.CredentialProviderModule;\n \n public class JdbcPlugin\n-        implements Plugin\n+        extends BaseJdbcPlugin\n {\n-    private final String name;\n-    private final Module module;\n-\n     public JdbcPlugin(String name, Module module)\n     {\n-        checkArgument(!isNullOrEmpty(name), \"name is null or empty\");\n-        this.name = name;\n-        this.module = requireNonNull(module, \"module is null\");\n-    }\n-\n-    @Override\n-    public Iterable<ConnectorFactory> getConnectorFactories()\n-    {\n-        return ImmutableList.of(new JdbcConnectorFactory(name, module));\n+        super(name, Modules.combine(new CredentialProviderModule(), module));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4MDc2Nw==", "bodyText": "Other plugins are subclasses of JdbcPlugin, how would we initialize them? If a factory method was responsible for adding CredentialProviderModule then we wouldn't be able to use super().", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r432980767", "createdAt": "2020-05-31T20:23:02Z", "author": {"login": "MiguelWeezardo"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPlugin.java", "diffHunk": "@@ -13,31 +13,15 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n-import com.google.common.collect.ImmutableList;\n import com.google.inject.Module;\n-import io.prestosql.spi.Plugin;\n-import io.prestosql.spi.connector.ConnectorFactory;\n-\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Strings.isNullOrEmpty;\n-import static java.util.Objects.requireNonNull;\n+import com.google.inject.util.Modules;\n+import io.prestosql.plugin.jdbc.credential.CredentialProviderModule;\n \n public class JdbcPlugin\n-        implements Plugin\n+        extends BaseJdbcPlugin\n {\n-    private final String name;\n-    private final Module module;\n-\n     public JdbcPlugin(String name, Module module)\n     {\n-        checkArgument(!isNullOrEmpty(name), \"name is null or empty\");\n-        this.name = name;\n-        this.module = requireNonNull(module, \"module is null\");\n-    }\n-\n-    @Override\n-    public Iterable<ConnectorFactory> getConnectorFactories()\n-    {\n-        return ImmutableList.of(new JdbcConnectorFactory(name, module));\n+        super(name, Modules.combine(new CredentialProviderModule(), module));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3Mzk3OQ=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDA0OTM1OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDowNTowMlrOGdYSqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDowNTowMlrOGdYSqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1OTg4MA==", "bodyText": "Use import static io.airlift.configuration.ConfigurationAwareModules.combine instead of list.", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r433459880", "createdAt": "2020-06-01T20:05:02Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "diffHunk": "@@ -35,14 +37,18 @@\n         implements ConnectorFactory\n {\n     private final String name;\n-    private final JdbcModuleProvider moduleProvider;\n+    private final JdbcModulesProvider moduleProvider;\n \n     public JdbcConnectorFactory(String name, Module module)\n     {\n-        this(name, JdbcModuleProvider.of(module));\n+        this(name, catalogName -> {\n+            return ImmutableList.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQxNDUzOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyOTo1M1rOGdvWHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyOTo1M1rOGdvWHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNzU5Nw==", "bodyText": "Rename this method to withCredentialProvider?", "url": "https://github.com/trinodb/trino/pull/3877#discussion_r433837597", "createdAt": "2020-06-02T12:29:53Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcConnectorFactory.java", "diffHunk": "@@ -90,7 +90,7 @@ public Connector create(String catalogName, Map<String, String> requiredConfig,\n         static JdbcModuleProvider of(Module module)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4197, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}