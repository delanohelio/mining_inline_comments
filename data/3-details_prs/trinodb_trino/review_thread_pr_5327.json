{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTc5NzEz", "number": 5327, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMzowMlrOEovQ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMzoyMlrOEovRXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTUyODkyOnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMzowMlrOHaAGmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo0MDowNlrOHaZclw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcxNQ==", "bodyText": "why ProjectNode and not, say, AggregationNode?", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497026715", "createdAt": "2020-09-29T20:33:02Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases\n+            // WHERE on aggregation column\n+            assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\")).isCorrectlyPushedDown();\n+            // WHERE on non-aggregation column\n+            assertThat(query(\"SELECT min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110\")).isCorrectlyPushedDown();\n+            // GROUP BY\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on both grouping and aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\" + \" GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on grouping column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE long_decimal < 124 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on neither grouping nor aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE varchar_column = 'ala' GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with GROUPING\n+            assertThat(query(\"SELECT short_decimal, min(varchar_column) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with WHERE\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown WHERE varchar_column ='ala'\")).isCorrectlyPushedDown();\n+\n+            // not supported yet\n+            assertThat(query(\"SELECT min(DISTINCT short_decimal) FROM test_aggregation_pushdown\")).isNotFullyPushedDown(AggregationNode.class);\n+            assertThat(query(\"SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isNotFullyPushedDown(ProjectNode.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3OTE5Mg==", "bodyText": "This requires explanation. In other (similar) test I put following comment by this line:\n// TODO: Improve assertion framework. Here min(long_decimal) is pushed down. There remains ProjectNode above it which relates to DISTINCT in the query.\n\nMaybe isCorrectlyPushedDown should allow for extra ProjectNode?", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497379192", "createdAt": "2020-09-30T09:42:40Z", "author": {"login": "losipiuk"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases\n+            // WHERE on aggregation column\n+            assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\")).isCorrectlyPushedDown();\n+            // WHERE on non-aggregation column\n+            assertThat(query(\"SELECT min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110\")).isCorrectlyPushedDown();\n+            // GROUP BY\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on both grouping and aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\" + \" GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on grouping column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE long_decimal < 124 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on neither grouping nor aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE varchar_column = 'ala' GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with GROUPING\n+            assertThat(query(\"SELECT short_decimal, min(varchar_column) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with WHERE\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown WHERE varchar_column ='ala'\")).isCorrectlyPushedDown();\n+\n+            // not supported yet\n+            assertThat(query(\"SELECT min(DISTINCT short_decimal) FROM test_aggregation_pushdown\")).isNotFullyPushedDown(AggregationNode.class);\n+            assertThat(query(\"SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isNotFullyPushedDown(ProjectNode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcxNQ=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MjU5OQ==", "bodyText": "Or we can add isCorrectlyPushedDown(Class<? extends PlanNode> allowedRetainedNodes)", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497382599", "createdAt": "2020-09-30T09:48:18Z", "author": {"login": "losipiuk"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases\n+            // WHERE on aggregation column\n+            assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\")).isCorrectlyPushedDown();\n+            // WHERE on non-aggregation column\n+            assertThat(query(\"SELECT min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110\")).isCorrectlyPushedDown();\n+            // GROUP BY\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on both grouping and aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\" + \" GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on grouping column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE long_decimal < 124 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on neither grouping nor aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE varchar_column = 'ala' GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with GROUPING\n+            assertThat(query(\"SELECT short_decimal, min(varchar_column) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with WHERE\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown WHERE varchar_column ='ala'\")).isCorrectlyPushedDown();\n+\n+            // not supported yet\n+            assertThat(query(\"SELECT min(DISTINCT short_decimal) FROM test_aggregation_pushdown\")).isNotFullyPushedDown(AggregationNode.class);\n+            assertThat(query(\"SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isNotFullyPushedDown(ProjectNode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcxNQ=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NzgzNg==", "bodyText": "i got the plan:\npresto:dbo> explain SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal;\n                                                                                                                                         Query Plan\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Fragment 0 [SINGLE]\n     Output layout: [short_decimal, _presto_generated]\n     Output partitioning: SINGLE []\n     Stage Execution Strategy: UNGROUPED_EXECUTION\n     Output[short_decimal, _col1]\n     \u2502   Layout: [short_decimal:decimal(9,3), _presto_generated:decimal(30,10)]\n     \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n     \u2502   _col1 := _presto_generated\n     \u2514\u2500 RemoteSource[1]\n            Layout: [short_decimal:decimal(9,3), _presto_generated:decimal(30,10)]\n\n Fragment 1 [HASH]\n     Output layout: [short_decimal, _presto_generated]\n     Output partitioning: SINGLE []\n     Stage Execution Strategy: UNGROUPED_EXECUTION\n     Project[]\n     \u2502   Layout: [short_decimal:decimal(9,3), _presto_generated:decimal(30,10)]\n     \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n     \u2514\u2500 Aggregate(FINAL)[short_decimal, _presto_generated][$hashvalue]\n        \u2502   Layout: [short_decimal:decimal(9,3), _presto_generated:decimal(30,10), $hashvalue:bigint]\n        \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n        \u2514\u2500 LocalExchange[HASH][$hashvalue] (\"short_decimal\", \"_presto_generated\")\n           \u2502   Layout: [short_decimal:decimal(9,3), _presto_generated:decimal(30,10), $hashvalue:bigint]\n           \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n           \u2514\u2500 RemoteSource[2]\n                  Layout: [short_decimal:decimal(9,3), _presto_generated:decimal(30,10), $hashvalue_0:bigint]\n\n Fragment 2 [SOURCE]\n     Output layout: [short_decimal, _presto_generated, $hashvalue_1]\n     Output partitioning: HASH [short_decimal, _presto_generated][$hashvalue_1]\n     Stage Execution Strategy: UNGROUPED_EXECUTION\n     Aggregate(PARTIAL)[short_decimal, _presto_generated][$hashvalue_1]\n     \u2502   Layout: [short_decimal:decimal(9,3), _presto_generated:decimal(30,10), $hashvalue_1:bigint]\n     \u2514\u2500 ScanProject[table = sqlserver:dbo.test_aggregation_pushdown master.dbo.test_aggregation_pushdown columns=[short_decimal:decimal(9,3):decimal, min(\"long_decimal\"):_presto_generated_1:decimal(30,10):decimal] groupingSets=[[short_decimal:decimal(9,3):decimal]], group\n            Layout: [short_decimal:decimal(9,3), _presto_generated:decimal(30,10), $hashvalue_1:bigint]\n            Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: 0B}/{rows: ? (?), cpu: ?, memory: 0B, network: 0B}\n            $hashvalue_1 := combine_hash(combine_hash(bigint '0', COALESCE(\"$operator$hash_code\"(\"short_decimal\"), 0)), COALESCE(\"$operator$hash_code\"(\"_presto_generated\"), 0))\n            short_decimal := short_decimal:decimal(9,3):decimal\n            _presto_generated := min(\"long_decimal\"):_presto_generated_1:decimal(30,10):decimal\n\ni see Agg is not pushed down.\nwhat plan do you get here?", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497387836", "createdAt": "2020-09-30T09:56:39Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases\n+            // WHERE on aggregation column\n+            assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\")).isCorrectlyPushedDown();\n+            // WHERE on non-aggregation column\n+            assertThat(query(\"SELECT min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110\")).isCorrectlyPushedDown();\n+            // GROUP BY\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on both grouping and aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\" + \" GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on grouping column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE long_decimal < 124 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on neither grouping nor aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE varchar_column = 'ala' GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with GROUPING\n+            assertThat(query(\"SELECT short_decimal, min(varchar_column) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with WHERE\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown WHERE varchar_column ='ala'\")).isCorrectlyPushedDown();\n+\n+            // not supported yet\n+            assertThat(query(\"SELECT min(DISTINCT short_decimal) FROM test_aggregation_pushdown\")).isNotFullyPushedDown(AggregationNode.class);\n+            assertThat(query(\"SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isNotFullyPushedDown(ProjectNode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcxNQ=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4ODY3Ng==", "bodyText": "This is different Agg, right? This is distinct converted to aggregation.\nThe min is being pushed down.\nIDK how to cover it accurately without writing matcher for whole expected plan.", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497388676", "createdAt": "2020-09-30T09:58:06Z", "author": {"login": "losipiuk"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases\n+            // WHERE on aggregation column\n+            assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\")).isCorrectlyPushedDown();\n+            // WHERE on non-aggregation column\n+            assertThat(query(\"SELECT min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110\")).isCorrectlyPushedDown();\n+            // GROUP BY\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on both grouping and aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\" + \" GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on grouping column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE long_decimal < 124 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on neither grouping nor aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE varchar_column = 'ala' GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with GROUPING\n+            assertThat(query(\"SELECT short_decimal, min(varchar_column) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with WHERE\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown WHERE varchar_column ='ala'\")).isCorrectlyPushedDown();\n+\n+            // not supported yet\n+            assertThat(query(\"SELECT min(DISTINCT short_decimal) FROM test_aggregation_pushdown\")).isNotFullyPushedDown(AggregationNode.class);\n+            assertThat(query(\"SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isNotFullyPushedDown(ProjectNode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcxNQ=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNzMwMA==", "bodyText": "The point is -- there are two aggregations, one on top of the other.\nisNotFullyPushedDown(AggregationNode) would be correct, since the upper agg is indeed not pushed\nwe currently cannot express the fact that the lower one is pushed, but maybe we can assume it's mostly covered by simpoler test cases", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497437300", "createdAt": "2020-09-30T11:30:52Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases\n+            // WHERE on aggregation column\n+            assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\")).isCorrectlyPushedDown();\n+            // WHERE on non-aggregation column\n+            assertThat(query(\"SELECT min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110\")).isCorrectlyPushedDown();\n+            // GROUP BY\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on both grouping and aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\" + \" GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on grouping column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE long_decimal < 124 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on neither grouping nor aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE varchar_column = 'ala' GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with GROUPING\n+            assertThat(query(\"SELECT short_decimal, min(varchar_column) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with WHERE\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown WHERE varchar_column ='ala'\")).isCorrectlyPushedDown();\n+\n+            // not supported yet\n+            assertThat(query(\"SELECT min(DISTINCT short_decimal) FROM test_aggregation_pushdown\")).isNotFullyPushedDown(AggregationNode.class);\n+            assertThat(query(\"SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isNotFullyPushedDown(ProjectNode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcxNQ=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzOTk2MA==", "bodyText": "Sure. I can change the extra expected node to AggregationNode. But I will still leave the comment to explain what is happening there.", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497439960", "createdAt": "2020-09-30T11:36:10Z", "author": {"login": "losipiuk"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases\n+            // WHERE on aggregation column\n+            assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\")).isCorrectlyPushedDown();\n+            // WHERE on non-aggregation column\n+            assertThat(query(\"SELECT min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110\")).isCorrectlyPushedDown();\n+            // GROUP BY\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on both grouping and aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\" + \" GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on grouping column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE long_decimal < 124 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on neither grouping nor aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE varchar_column = 'ala' GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with GROUPING\n+            assertThat(query(\"SELECT short_decimal, min(varchar_column) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with WHERE\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown WHERE varchar_column ='ala'\")).isCorrectlyPushedDown();\n+\n+            // not supported yet\n+            assertThat(query(\"SELECT min(DISTINCT short_decimal) FROM test_aggregation_pushdown\")).isNotFullyPushedDown(AggregationNode.class);\n+            assertThat(query(\"SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isNotFullyPushedDown(ProjectNode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcxNQ=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0MTk0Mw==", "bodyText": "I take that back. I cannot put AggregateNode there.\nAs isNotFullyPushedDown then expectes a plan like that:\n- anyTree\n    - node(AggregationNode)\n        - node(TableScanNode)\n\nAnd we also have an extra ProjectNode below Aggregation.", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497441943", "createdAt": "2020-09-30T11:40:06Z", "author": {"login": "losipiuk"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases\n+            // WHERE on aggregation column\n+            assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\")).isCorrectlyPushedDown();\n+            // WHERE on non-aggregation column\n+            assertThat(query(\"SELECT min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110\")).isCorrectlyPushedDown();\n+            // GROUP BY\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on both grouping and aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\" + \" GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on grouping column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE long_decimal < 124 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on neither grouping nor aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE varchar_column = 'ala' GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with GROUPING\n+            assertThat(query(\"SELECT short_decimal, min(varchar_column) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with WHERE\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown WHERE varchar_column ='ala'\")).isCorrectlyPushedDown();\n+\n+            // not supported yet\n+            assertThat(query(\"SELECT min(DISTINCT short_decimal) FROM test_aggregation_pushdown\")).isNotFullyPushedDown(AggregationNode.class);\n+            assertThat(query(\"SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isNotFullyPushedDown(ProjectNode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcxNQ=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTUyOTkwOnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMzoyMlrOHaAHSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo0NjowNFrOHaVvUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjg4OQ==", "bodyText": "is the comment useful?", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497026889", "createdAt": "2020-09-29T20:33:22Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MTIwMQ==", "bodyText": "not relly - copied from somewhere. removing", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497381201", "createdAt": "2020-09-30T09:46:04Z", "author": {"login": "losipiuk"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjg4OQ=="}, "originalCommit": null, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4723, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}