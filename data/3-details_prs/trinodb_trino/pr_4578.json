{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NjE3NTYz", "number": 4578, "title": "A couple fixes related to complex data types in Iceberg connector", "bodyText": "", "createdAt": "2020-07-25T13:49:12Z", "url": "https://github.com/trinodb/trino/pull/4578", "merged": true, "mergeCommit": {"oid": "9ff486317f4b86bc8b75a1a2f1a2cc0f1d1f1742"}, "closed": true, "closedAt": "2020-08-04T19:46:33Z", "author": {"login": "anjalinorwood"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4coFdABqjM1ODY0NjA2Njk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7sCwjgFqTQ2MTEyMTg4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzAyNzYx", "url": "https://github.com/trinodb/trino/pull/4578#pullrequestreview-455302761", "createdAt": "2020-07-25T18:46:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo0NjoyMVrOG3GlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo1MzozMFrOG3GnsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjc1Mg==", "bodyText": "Have you considered making TypeConverter an object that stores the index? That should be simpler than passing it through static methods with recursive invocations. Something like\nTypeConverter converter = new TypeConverter();\nfor (ColumnMetadata column : columns) {\n    Type type = converter.toIcebergType(column.getType());\n    int index = converter.getIndex();\n    ...\n}\nWe'd probably want to split up the class into PrestoTypeConverter and IcebergTypeConverter as a precursor commit, since toPrestoType can stay static.", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r460432752", "createdAt": "2020-07-25T18:46:21Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -539,14 +539,16 @@ private ConnectorTableMetadata getTableMetadata(ConnectorSession session, Schema\n     private static Schema toIcebergSchema(List<ColumnMetadata> columns)\n     {\n         List<NestedField> icebergColumns = new ArrayList<>();\n+        int index = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzE4MQ==", "bodyText": "Can you add these tests to TestIcebergSmoke? Product tests should only be used if absolutely necessary, since they are harder to run (you can't run them in the IDE or easily debug them).", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r460433181", "createdAt": "2020-07-25T18:51:34Z", "author": {"login": "electrum"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestCreateTable.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.airlift.log.Logger;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.CREATE_TABLE;\n+\n+public class TestCreateTable", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzIyMw==", "bodyText": "We shouldn't catch exceptions like this in tests, as we want any such exception to fail the test.", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r460433223", "createdAt": "2020-07-25T18:52:07Z", "author": {"login": "electrum"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestCreateTable.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.airlift.log.Logger;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.CREATE_TABLE;\n+\n+public class TestCreateTable\n+        extends ProductTest\n+{\n+    private static final String ICEBERG_TABLE_NAME1 = \"iceberg.ice_tables.nested_types\";\n+    private static final String ICEBERG_TABLE_NAME2 = \"iceberg.ice_tables.nested_types2\";\n+    private static final String ICEBERG_TABLE_SCHEMA = \"iceberg.ice_tables\";\n+\n+    @BeforeTestWithContext\n+    public void createObjects()\n+    {\n+        // Drop Iceberg tables and schema\n+        try {\n+            query(\"DROP TABLE IF EXISTS \" + ICEBERG_TABLE_NAME1);\n+            query(\"DROP TABLE IF EXISTS \" + ICEBERG_TABLE_NAME2);\n+        }\n+        catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzMyOA==", "bodyText": "Can you add a test to TestIcebergSmoke that creates a table with a row type, inserts a null into one of the row fields, then reads it?", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r460433328", "createdAt": "2020-07-25T18:53:30Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "diffHunk": "@@ -199,7 +199,7 @@ private static PrestoToIcebergReturnDataType fromRow(RowType type, int index)\n             String name = field.getName().orElseThrow(() ->\n                     new PrestoException(NOT_SUPPORTED, \"Row type field does not have a name: \" + type.getDisplayName()));\n             PrestoToIcebergReturnDataType returnType = toIcebergType(field.getType(), index);\n-            fields.add(Types.NestedField.required(index, name, returnType.getType()));\n+            fields.add(Types.NestedField.optional(index, name, returnType.getType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "56626a47cd0a70a0f9aa8b5a5e1fd57368cc8718", "author": {"user": {"login": "anjalinorwood", "name": "Anjali Norwood"}}, "url": "https://github.com/trinodb/trino/commit/56626a47cd0a70a0f9aa8b5a5e1fd57368cc8718", "committedDate": "2020-07-30T20:22:20Z", "message": "Mark the fields of ROW Type optional for Iceberg schema\n\nCurrently the fields of ROW type in Iceberg schema are marked as 'required'.\nIn reality, if the fields are optional, the writer may write a null value for\nthose fields. In such a case, the parquet file can not be read by parquet\nreader or Presto. Since Presto doesn't have a way to specify required/optional\ndesignation for ROW fields, this commit marks the fields as 'optional'."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3791282b81c51230ff9bad95a9c59797e5aa237b", "author": {"user": {"login": "anjalinorwood", "name": "Anjali Norwood"}}, "url": "https://github.com/trinodb/trino/commit/3791282b81c51230ff9bad95a9c59797e5aa237b", "committedDate": "2020-07-30T20:33:49Z", "message": "Mark the fields of ROW Type optional for Iceberg schema\n\nCurrently the fields of ROW type in Iceberg schema are marked as 'required'.\nIn reality, if the fields are optional, the writer may write a null value for\nthose fields. In such a case, the parquet file can not be read by parquet\nreader or Presto. Since Presto doesn't have a way to specify required/optional\ndesignation for ROW fields, this commit marks the fields as 'optional'."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56626a47cd0a70a0f9aa8b5a5e1fd57368cc8718", "author": {"user": {"login": "anjalinorwood", "name": "Anjali Norwood"}}, "url": "https://github.com/trinodb/trino/commit/56626a47cd0a70a0f9aa8b5a5e1fd57368cc8718", "committedDate": "2020-07-30T20:22:20Z", "message": "Mark the fields of ROW Type optional for Iceberg schema\n\nCurrently the fields of ROW type in Iceberg schema are marked as 'required'.\nIn reality, if the fields are optional, the writer may write a null value for\nthose fields. In such a case, the parquet file can not be read by parquet\nreader or Presto. Since Presto doesn't have a way to specify required/optional\ndesignation for ROW fields, this commit marks the fields as 'optional'."}, "afterCommit": {"oid": "3791282b81c51230ff9bad95a9c59797e5aa237b", "author": {"user": {"login": "anjalinorwood", "name": "Anjali Norwood"}}, "url": "https://github.com/trinodb/trino/commit/3791282b81c51230ff9bad95a9c59797e5aa237b", "committedDate": "2020-07-30T20:33:49Z", "message": "Mark the fields of ROW Type optional for Iceberg schema\n\nCurrently the fields of ROW type in Iceberg schema are marked as 'required'.\nIn reality, if the fields are optional, the writer may write a null value for\nthose fields. In such a case, the parquet file can not be read by parquet\nreader or Presto. Since Presto doesn't have a way to specify required/optional\ndesignation for ROW fields, this commit marks the fields as 'optional'."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTIxODgx", "url": "https://github.com/trinodb/trino/pull/4578#pullrequestreview-461121881", "createdAt": "2020-08-04T19:46:27Z", "commit": {"oid": "3791282b81c51230ff9bad95a9c59797e5aa237b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4898, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}