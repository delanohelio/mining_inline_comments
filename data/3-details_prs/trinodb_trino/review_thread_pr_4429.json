{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3OTEyNzcw", "number": 4429, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODoyODozOFrOENtmNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1NDowN1rOEOsi7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODE0MDA0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODoyODozOFrOGweNzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjo0MjowOVrOGwmy5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3OTg4NQ==", "bodyText": "can't we just retry calling getQueryInfo once again in a while?\nWouldn't simple assertEventually work here?", "url": "https://github.com/trinodb/trino/pull/4429#discussion_r453479885", "createdAt": "2020-07-13T08:28:38Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7056,4 +7060,60 @@ public TypeAndEstimate(Type type, EstimatedStatsAndCost estimate)\n             this.estimate = requireNonNull(estimate, \"estimate is null\");\n         }\n     }\n+\n+    private class GreaterThanZeroProcessedDataSizeCheck\n+    {\n+        private final DistributedQueryRunner queryRunner;\n+        private final String query;\n+\n+        private ResultWithQueryId<MaterializedResult> queryResult;\n+        private long processedInputBytes;\n+\n+        public GreaterThanZeroProcessedDataSizeCheck(DistributedQueryRunner queryRunner, @Language(\"SQL\") String query)\n+        {\n+            this.queryRunner = queryRunner;\n+            this.query = query;\n+            runQuery();\n+            getProcessedBytes();\n+        }\n+\n+        private void runQuery()\n+        {\n+            queryResult = queryRunner.executeWithQueryId(getSession(), query);\n+        }\n+\n+        private void getProcessedBytes()\n+        {\n+            processedInputBytes = getQueryInfo(queryRunner, queryResult).getQueryStats().getProcessedInputDataSize().toBytes();\n+        }\n+\n+        private long checkProcessedBytes()\n+                throws Exception\n+        {\n+            try {\n+                assertThat(processedInputBytes).isGreaterThan(0);\n+            }\n+            catch (AssertionError error) {\n+                // If query statistics haven't been updated at the time we issued getQueryInfo(), we will mistakenly see 0 processedInputBytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2NjcyOQ==", "bodyText": "When I've investigated similar problems in the past it seemed that sometimes query stats updates get applied seconds after the query finishes, an sometimes they get lost in transfer. I suspect network problems to be the cause, but I never spent enough time to confirm this.\nThis is why the query itself also needs to be resubmitted - getting stats repeatedly for the same query won't help if  coordinator already finished collecting stats updates for this particular query.\nAs for using assertEventually - It would be easier to understand, but the race condition in each retry would have the same chances of happening. Thanks to RetryDriver separating onRetry, run and exponential backoff, we can increase sleep times between the query and asking for it's stats, so the race condition has less of a chance of happening.", "url": "https://github.com/trinodb/trino/pull/4429#discussion_r453566729", "createdAt": "2020-07-13T10:55:16Z", "author": {"login": "MiguelWeezardo"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7056,4 +7060,60 @@ public TypeAndEstimate(Type type, EstimatedStatsAndCost estimate)\n             this.estimate = requireNonNull(estimate, \"estimate is null\");\n         }\n     }\n+\n+    private class GreaterThanZeroProcessedDataSizeCheck\n+    {\n+        private final DistributedQueryRunner queryRunner;\n+        private final String query;\n+\n+        private ResultWithQueryId<MaterializedResult> queryResult;\n+        private long processedInputBytes;\n+\n+        public GreaterThanZeroProcessedDataSizeCheck(DistributedQueryRunner queryRunner, @Language(\"SQL\") String query)\n+        {\n+            this.queryRunner = queryRunner;\n+            this.query = query;\n+            runQuery();\n+            getProcessedBytes();\n+        }\n+\n+        private void runQuery()\n+        {\n+            queryResult = queryRunner.executeWithQueryId(getSession(), query);\n+        }\n+\n+        private void getProcessedBytes()\n+        {\n+            processedInputBytes = getQueryInfo(queryRunner, queryResult).getQueryStats().getProcessedInputDataSize().toBytes();\n+        }\n+\n+        private long checkProcessedBytes()\n+                throws Exception\n+        {\n+            try {\n+                assertThat(processedInputBytes).isGreaterThan(0);\n+            }\n+            catch (AssertionError error) {\n+                // If query statistics haven't been updated at the time we issued getQueryInfo(), we will mistakenly see 0 processedInputBytes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3OTg4NQ=="}, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxOTc4Mw==", "bodyText": "I have hard time with this one. Retry driver does not rally play well with being uses as exponenetially growing sleep between two statements. The fact that we need to run query in catch clause. As well as in constructor for 0-seconds sleep, makes it hard to follow.\nWhat about sth like:\n       ExponentialSleeper sleeper = new ExponentialSleeper(\n                new Duration(0, SECONDS),\n                new Duration(5, SECONDS),\n                new Duration(1, SECONDS),\n                1.5);\n        assertEventually(new Duration(30, SECONDS), () -> {\n            ResultWithQueryId<MaterializedResult> result = queryRunner.executeWithQueryId(\n                    getSession(),\n                    \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t = TIMESTAMP '2012-10-31 01:00'\");\n            sleeper.sleep();\n            assertThat(getQueryInfo(queryRunner, result).getQueryStats().getProcessedInputDataSize().toBytes()).isGreaterThan(0);\n        });\n    }\n\n    private static class ExponentialSleeper\n    {\n        private Duration nextSleepTime;\n        private final Duration maxSleepTime;\n        private final Duration minSleepIncrement;\n        private final double sleepIncrementFactor;\n\n        private ExponentialSleeper(Duration minSleepTime, Duration maxSleepTime, Duration minSleepIncrement, double sleepIncrementFactor)\n        {\n            this.nextSleepTime = minSleepTime;\n            this.maxSleepTime = maxSleepTime;\n            this.minSleepIncrement = minSleepIncrement;\n            this.sleepIncrementFactor = sleepIncrementFactor;\n        }\n\n        public void sleep()\n        {\n            try {\n                Thread.sleep(nextSleepTime.toMillis());\n                long incrementMillis = (long) (nextSleepTime.toMillis() * sleepIncrementFactor - nextSleepTime.toMillis());\n                if (incrementMillis < minSleepIncrement.toMillis()) {\n                    incrementMillis = minSleepIncrement.toMillis();\n                }\n                nextSleepTime = new Duration(nextSleepTime.toMillis() + incrementMillis, MILLISECONDS);\n                if (nextSleepTime.compareTo(maxSleepTime) > 0) {\n                    nextSleepTime = maxSleepTime;\n                }\n            }\n            catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(e);\n            }\n        }\n    }", "url": "https://github.com/trinodb/trino/pull/4429#discussion_r453619783", "createdAt": "2020-07-13T12:40:59Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7056,4 +7060,60 @@ public TypeAndEstimate(Type type, EstimatedStatsAndCost estimate)\n             this.estimate = requireNonNull(estimate, \"estimate is null\");\n         }\n     }\n+\n+    private class GreaterThanZeroProcessedDataSizeCheck\n+    {\n+        private final DistributedQueryRunner queryRunner;\n+        private final String query;\n+\n+        private ResultWithQueryId<MaterializedResult> queryResult;\n+        private long processedInputBytes;\n+\n+        public GreaterThanZeroProcessedDataSizeCheck(DistributedQueryRunner queryRunner, @Language(\"SQL\") String query)\n+        {\n+            this.queryRunner = queryRunner;\n+            this.query = query;\n+            runQuery();\n+            getProcessedBytes();\n+        }\n+\n+        private void runQuery()\n+        {\n+            queryResult = queryRunner.executeWithQueryId(getSession(), query);\n+        }\n+\n+        private void getProcessedBytes()\n+        {\n+            processedInputBytes = getQueryInfo(queryRunner, queryResult).getQueryStats().getProcessedInputDataSize().toBytes();\n+        }\n+\n+        private long checkProcessedBytes()\n+                throws Exception\n+        {\n+            try {\n+                assertThat(processedInputBytes).isGreaterThan(0);\n+            }\n+            catch (AssertionError error) {\n+                // If query statistics haven't been updated at the time we issued getQueryInfo(), we will mistakenly see 0 processedInputBytes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3OTg4NQ=="}, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMDQ1Mw==", "bodyText": "I guess this new class may come useful in other places too (maybe)", "url": "https://github.com/trinodb/trino/pull/4429#discussion_r453620453", "createdAt": "2020-07-13T12:42:09Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7056,4 +7060,60 @@ public TypeAndEstimate(Type type, EstimatedStatsAndCost estimate)\n             this.estimate = requireNonNull(estimate, \"estimate is null\");\n         }\n     }\n+\n+    private class GreaterThanZeroProcessedDataSizeCheck\n+    {\n+        private final DistributedQueryRunner queryRunner;\n+        private final String query;\n+\n+        private ResultWithQueryId<MaterializedResult> queryResult;\n+        private long processedInputBytes;\n+\n+        public GreaterThanZeroProcessedDataSizeCheck(DistributedQueryRunner queryRunner, @Language(\"SQL\") String query)\n+        {\n+            this.queryRunner = queryRunner;\n+            this.query = query;\n+            runQuery();\n+            getProcessedBytes();\n+        }\n+\n+        private void runQuery()\n+        {\n+            queryResult = queryRunner.executeWithQueryId(getSession(), query);\n+        }\n+\n+        private void getProcessedBytes()\n+        {\n+            processedInputBytes = getQueryInfo(queryRunner, queryResult).getQueryStats().getProcessedInputDataSize().toBytes();\n+        }\n+\n+        private long checkProcessedBytes()\n+                throws Exception\n+        {\n+            try {\n+                assertThat(processedInputBytes).isGreaterThan(0);\n+            }\n+            catch (AssertionError error) {\n+                // If query statistics haven't been updated at the time we issued getQueryInfo(), we will mistakenly see 0 processedInputBytes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3OTg4NQ=="}, "originalCommit": null, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQ1MzIwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1NDowM1rOGx_PrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzowMTowMFrOGycvXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2OTYxMw==", "bodyText": "would assertEventually, or FailSafe do?", "url": "https://github.com/trinodb/trino/pull/4429#discussion_r455069613", "createdAt": "2020-07-15T13:54:03Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7056,4 +7069,39 @@ public TypeAndEstimate(Type type, EstimatedStatsAndCost estimate)\n             this.estimate = requireNonNull(estimate, \"estimate is null\");\n         }\n     }\n+\n+    private static class ExponentialSleeper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a152dd0ba726cb28c199f400ba3ce4ef8e18b492"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1Mjg2Mw==", "bodyText": "See conversation above", "url": "https://github.com/trinodb/trino/pull/4429#discussion_r455552863", "createdAt": "2020-07-16T07:01:00Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7056,4 +7069,39 @@ public TypeAndEstimate(Type type, EstimatedStatsAndCost estimate)\n             this.estimate = requireNonNull(estimate, \"estimate is null\");\n         }\n     }\n+\n+    private static class ExponentialSleeper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2OTYxMw=="}, "originalCommit": {"oid": "a152dd0ba726cb28c199f400ba3ce4ef8e18b492"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQ1MzU3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1NDowN1rOGx_P4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1NDowN1rOGx_P4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2OTY2Ng==", "bodyText": "cc @dain", "url": "https://github.com/trinodb/trino/pull/4429#discussion_r455069666", "createdAt": "2020-07-15T13:54:07Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4129,10 +4133,19 @@ public void testParquetTimestampPredicatePushdown()\n                 \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t > TIMESTAMP '2012-10-31 01:00'\");\n         assertEquals(getQueryInfo(queryRunner, queryResult).getQueryStats().getProcessedInputDataSize().toBytes(), 0);\n \n-        queryResult = queryRunner.executeWithQueryId(\n-                getSession(),\n-                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t = TIMESTAMP '2012-10-31 01:00'\");\n-        assertThat(getQueryInfo(queryRunner, queryResult).getQueryStats().getProcessedInputDataSize().toBytes()).isGreaterThan(0);\n+        // TODO: replace this with a simple query stats check once we find a way to wait until all pending updates to query stats have been applied", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a152dd0ba726cb28c199f400ba3ce4ef8e18b492"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3888, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}