{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NzI4NTMy", "number": 6442, "title": "Decompress Kinesis message if needed", "bodyText": "Producer might push compressed messages to save network bandwidth and consumers should transparently uncompress the message before decoding it", "createdAt": "2020-12-26T19:46:17Z", "url": "https://github.com/trinodb/trino/pull/6442", "merged": true, "mergeCommit": {"oid": "5f68daf465f99af6f141ecf483d3b30dfb01b45e"}, "closed": true, "closedAt": "2021-01-21T10:41:47Z", "author": {"login": "guyco33"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqffqrAFqTU1OTAwMjkzOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdx0re8gBqjQyMjUzMDI0OTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MDAyOTM4", "url": "https://github.com/trinodb/trino/pull/6442#pullrequestreview-559002938", "createdAt": "2020-12-28T05:41:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNTo0MTo0OVrOILx3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNTo0MzozNFrOILx4AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyMjE0NQ==", "bodyText": "Does this support only GZIP or ?", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r549222145", "createdAt": "2020-12-28T05:41:49Z", "author": {"login": "Praveen2112"}, "path": "presto-kinesis/src/main/java/io/prestosql/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -290,6 +293,23 @@ private void getKinesisRecords()\n             messagesRead += kinesisRecords.size();\n         }\n \n+        private byte[] uncompressIfNeeded(byte[] data)\n+        {\n+            if (data == null || data.length < 2) {\n+                return data;\n+            }\n+            int magic = data[0] & 0xff | ((data[1] << 8) & 0xff00);\n+            if (magic == GZIPInputStream.GZIP_MAGIC) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyMjQwMA==", "bodyText": "How about wrapping this logic in a RowDecoder which decompresses the row and passes it to the underlying decoder.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r549222400", "createdAt": "2020-12-28T05:43:34Z", "author": {"login": "Praveen2112"}, "path": "presto-kinesis/src/main/java/io/prestosql/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -290,6 +293,23 @@ private void getKinesisRecords()\n             messagesRead += kinesisRecords.size();\n         }\n \n+        private byte[] uncompressIfNeeded(byte[] data)\n+        {\n+            if (data == null || data.length < 2) {\n+                return data;\n+            }\n+            int magic = data[0] & 0xff | ((data[1] << 8) & 0xff00);\n+            if (magic == GZIPInputStream.GZIP_MAGIC) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyMjE0NQ=="}, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODEzMzIx", "url": "https://github.com/trinodb/trino/pull/6442#pullrequestreview-560813321", "createdAt": "2021-01-04T07:08:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNzowODowOFrOINnUSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNzoxMjoyMFrOINnY-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE0NjU2OA==", "bodyText": "nit : Can we capture these changes as a separate commit ?", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r551146568", "createdAt": "2021-01-04T07:08:08Z", "author": {"login": "Praveen2112"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -220,7 +232,7 @@ public boolean advanceNextPosition()\n         {\n             if (shardIterator == null && getRecordsRequest == null) {\n                 getIterator(); // first shard iterator\n-                log.debug(\"Starting read.  Retrieved first shard iterator from AWS Kinesis.\");\n+                log.debug(\"(%s:%s) Starting read.  Retrieved first shard iterator from AWS Kinesis.\", split.getStreamName(), split.getShardId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE0NjkyOQ==", "bodyText": "How about using try-with-resources ?", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r551146929", "createdAt": "2021-01-04T07:09:16Z", "author": {"login": "Praveen2112"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -305,9 +317,24 @@ private boolean nextRow()\n             totalBytes += messageData.length;\n             totalMessages++;\n \n-            log.debug(\"Fetching %d bytes from current record. %d messages read so far\", messageData.length, totalMessages);\n+            log.debug(\"(%s:%s) Fetching %d bytes from current record. %d messages read so far\", split.getStreamName(), split.getShardId(), messageData.length, totalMessages);\n \n-            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue = messageDecoder.decodeRow(messageData);\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue;\n+            if (isGZipped(messageData)) {\n+                try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE0NzE1MA==", "bodyText": "nit : can we move it below createJsonMessages", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r551147150", "createdAt": "2021-01-04T07:10:07Z", "author": {"login": "Praveen2112"}, "path": "plugin/trino-kinesis/src/test/java/io/trino/plugin/kinesis/TestRecordAccess.java", "diffHunk": "@@ -97,7 +100,21 @@ private void createDummyMessages(String streamName, int count)\n         mockClient.putRecords(putRecordsRequest);\n     }\n \n-    private void createJsonMessages(String streamName, int count, int idStart)\n+    private byte[] compressMessage(byte[] data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE0Nzc2OA==", "bodyText": "static import ?", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r551147768", "createdAt": "2021-01-04T07:12:20Z", "author": {"login": "Praveen2112"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -171,6 +174,15 @@ public RecordCursor cursor()\n         return new KinesisRecordCursor();\n     }\n \n+    public static boolean isGZipped(byte[] data)\n+    {\n+        if (data == null || data.length < 2) {\n+            return false;\n+        }\n+        int magic = data[0] & 0xff | ((data[1] << 8) & 0xff00);\n+        return magic == GZIPInputStream.GZIP_MAGIC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMjk2NjI4", "url": "https://github.com/trinodb/trino/pull/6442#pullrequestreview-563296628", "createdAt": "2021-01-07T08:38:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwODozODoxNlrOIPjb4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwODo0MDo1NVrOIPjgug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4MDEyOA==", "bodyText": "use try-with-resources for byteOS and gzipOS", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r553180128", "createdAt": "2021-01-07T08:38:16Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/test/java/io/trino/plugin/kinesis/TestRecordAccess.java", "diffHunk": "@@ -119,6 +127,20 @@ private void createJsonMessages(String streamName, int count, int idStart)\n         mockClient.putRecords(putRecordsRequest);\n     }\n \n+    private byte[] compressMessage(byte[] data)\n+    {\n+        try {\n+            ByteArrayOutputStream byteOS = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4MDU5NA==", "bodyText": "can we have utility methods below the usage (below test)? Please reorder methods in separate commit.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r553180594", "createdAt": "2021-01-07T08:39:19Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/test/java/io/trino/plugin/kinesis/TestRecordAccess.java", "diffHunk": "@@ -97,7 +100,7 @@ private void createDummyMessages(String streamName, int count)\n         mockClient.putRecords(putRecordsRequest);\n     }\n \n-    private void createJsonMessages(String streamName, int count, int idStart)\n+    private void createJsonMessages(String streamName, int count, int idStart, boolean compress)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4MDkxNg==", "bodyText": "Let's make test parametric. You can use io.trino.testing.DataProviders#trueFalse.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r553180916", "createdAt": "2021-01-07T08:40:02Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/test/java/io/trino/plugin/kinesis/TestRecordAccess.java", "diffHunk": "@@ -160,7 +182,8 @@ public void testStreamHasData()\n     public void testJsonStream()\n     {\n         // Simple case: add a few specific items, query object and internal fields:\n-        createJsonMessages(jsonStreamName, 4, 100);\n+        createJsonMessages(jsonStreamName, 2, 100, false);\n+        createJsonMessages(jsonStreamName, 2, 102, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4MTE3Mw==", "bodyText": "use try-with-resources for streams.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r553181173", "createdAt": "2021-01-07T08:40:28Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -307,7 +320,20 @@ private boolean nextRow()\n \n             log.debug(\"Fetching %d bytes from current record. %d messages read so far\", messageData.length, totalMessages);\n \n-            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue = messageDecoder.decodeRow(messageData);\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue;\n+            if (isGZipped(messageData)) {\n+                try (\n+                        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(messageData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4MTI5MQ==", "bodyText": "PrestoException or better UncheckedIOException", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r553181291", "createdAt": "2021-01-07T08:40:42Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -307,7 +320,20 @@ private boolean nextRow()\n \n             log.debug(\"Fetching %d bytes from current record. %d messages read so far\", messageData.length, totalMessages);\n \n-            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue = messageDecoder.decodeRow(messageData);\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue;\n+            if (isGZipped(messageData)) {\n+                try (\n+                        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(messageData);\n+                        GZIPInputStream gZIPInputStream = new GZIPInputStream(byteArrayInputStream)) {\n+                    decodedValue = messageDecoder.decodeRow(gZIPInputStream.readAllBytes());\n+                }\n+                catch (IOException e) {\n+                    throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4MTM3MA==", "bodyText": "Please extract a method", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r553181370", "createdAt": "2021-01-07T08:40:55Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -307,7 +320,20 @@ private boolean nextRow()\n \n             log.debug(\"Fetching %d bytes from current record. %d messages read so far\", messageData.length, totalMessages);\n \n-            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue = messageDecoder.decodeRow(messageData);\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue;\n+            if (isGZipped(messageData)) {\n+                try (", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4MDA2OTU2", "url": "https://github.com/trinodb/trino/pull/6442#pullrequestreview-568006956", "createdAt": "2021-01-14T08:29:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODoyOTowMlrOITYLGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODozMDoyMFrOITYTCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE4OTkxMw==", "bodyText": "please put each argument in separate line", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r557189913", "createdAt": "2021-01-14T08:29:02Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -434,8 +434,8 @@ private FieldValueProvider getFieldValueProvider(int field, Class<?> expectedTyp\n         @Override\n         public void close()\n         {\n-            log.info(\"Closing cursor - read complete.  Total read: %d batches %d messages, processed: %d messages and %d bytes.\",\n-                    batchesRead, messagesRead, totalMessages, totalBytes);\n+            log.info(\"(%s:%s) Closing cursor - read complete.  Total read: %d batches %d messages, processed: %d messages and %d bytes.\",\n+                    split.getStreamName(), split.getShardId(), batchesRead, messagesRead, totalMessages, totalBytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE5MTI5MA==", "bodyText": "Please enum.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r557191290", "createdAt": "2021-01-14T08:29:53Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisTableHandle.java", "diffHunk": "@@ -47,17 +49,24 @@\n \n     private final String messageDataFormat;\n \n+    /**\n+     * Compression codec to use for decompressing message. Can be null.\n+     */\n+    private final String compressionCodec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE5MTU3Mg==", "bodyText": "This is obvious, I would remove this comment.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r557191572", "createdAt": "2021-01-14T08:30:03Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisTableHandle.java", "diffHunk": "@@ -47,17 +49,24 @@\n \n     private final String messageDataFormat;\n \n+    /**\n+     * Compression codec to use for decompressing message. Can be null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE5MTk0NQ==", "bodyText": "Please return Optional", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r557191945", "createdAt": "2021-01-14T08:30:20Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisTableHandle.java", "diffHunk": "@@ -84,6 +93,13 @@ public String getMessageDataFormat()\n         return messageDataFormat;\n     }\n \n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5OTYzODE4", "url": "https://github.com/trinodb/trino/pull/6442#pullrequestreview-569963818", "createdAt": "2021-01-16T19:54:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQxOTo1NDozNFrOIVIN3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQyMDowMDo1OFrOIVIXJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAyNTYyOQ==", "bodyText": "add a coma at the end GZIP,", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r559025629", "createdAt": "2021-01-16T19:54:34Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisCompressionCodec.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.kinesis;\n+\n+public enum KinesisCompressionCodec\n+{\n+    GZIP", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAyNTkzMw==", "bodyText": "make it private, and move below the usage", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r559025933", "createdAt": "2021-01-16T19:55:33Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -171,6 +179,15 @@ public RecordCursor cursor()\n         return new KinesisRecordCursor();\n     }\n \n+    public static boolean isGZipped(byte[] data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAyNjQwMw==", "bodyText": "getCompressionCodec() == GZIP then I guess we should fail if !isGZipped(messageData) as this is unexpected.\nMaybe we could have KinesisCompressionCodec.AUTOMATIC, wdyt?", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r559026403", "createdAt": "2021-01-16T19:56:37Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -290,6 +307,27 @@ private void getKinesisRecords()\n             messagesRead += kinesisRecords.size();\n         }\n \n+        private Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodeMessage(byte[] messageData)\n+        {\n+            if (!split.getCompressionCodec().isPresent()) {\n+                return messageDecoder.decodeRow(messageData);\n+            }\n+            if (split.getCompressionCodec().get().equals(KinesisCompressionCodec.GZIP)) {\n+                if (isGZipped(messageData)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAyNzg4Mw==", "bodyText": "static", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r559027883", "createdAt": "2021-01-16T20:00:28Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/test/java/io/trino/plugin/kinesis/TestRecordAccess.java", "diffHunk": "@@ -119,6 +127,20 @@ private void createJsonMessages(String streamName, int count, int idStart)\n         mockClient.putRecords(putRecordsRequest);\n     }\n \n+    private byte[] compressMessage(byte[] data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAyODAwNg==", "bodyText": "I would not not wrap line here.\nUse:\ntry (ByteArrayOutputStream byteOS = new ByteArrayOutputStream()) {\n\nSame above.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r559028006", "createdAt": "2021-01-16T20:00:58Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/test/java/io/trino/plugin/kinesis/TestRecordAccess.java", "diffHunk": "@@ -119,6 +127,20 @@ private void createJsonMessages(String streamName, int count, int idStart)\n         mockClient.putRecords(putRecordsRequest);\n     }\n \n+    private byte[] compressMessage(byte[] data)\n+    {\n+        try (", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5OTY0MjEw", "url": "https://github.com/trinodb/trino/pull/6442#pullrequestreview-569964210", "createdAt": "2021-01-16T20:01:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQyMDowMTozNVrOIVIX9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQyMDowMTozNVrOIVIX9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAyODIxNQ==", "bodyText": "add it to the try above.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r559028215", "createdAt": "2021-01-16T20:01:35Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/test/java/io/trino/plugin/kinesis/TestRecordAccess.java", "diffHunk": "@@ -119,6 +127,20 @@ private void createJsonMessages(String streamName, int count, int idStart)\n         mockClient.putRecords(putRecordsRequest);\n     }\n \n+    private byte[] compressMessage(byte[] data)\n+    {\n+        try (\n+                ByteArrayOutputStream byteOS = new ByteArrayOutputStream()) {\n+            GZIPOutputStream gzipOS = new GZIPOutputStream(byteOS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMDQyMjk1", "url": "https://github.com/trinodb/trino/pull/6442#pullrequestreview-571042295", "createdAt": "2021-01-19T09:17:47Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwOToxNzo0N1rOIWFJ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwOToyMzoxNlrOIWFYQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAyNDA0OA==", "bodyText": "Please invert the condition, so there will be less code nested, and corner case will be handled first.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r560024048", "createdAt": "2021-01-19T09:17:47Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -290,6 +300,32 @@ private void getKinesisRecords()\n             messagesRead += kinesisRecords.size();\n         }\n \n+        private Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodeMessage(byte[] messageData)\n+        {\n+            if (!split.getCompressionCodec().isPresent()) {\n+                return messageDecoder.decodeRow(messageData);\n+            }\n+            if (split.getCompressionCodec().get() == GZIP || split.getCompressionCodec().get() == AUTOMATIC) {\n+                if (isGZipped(messageData)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAyNTc2Mg==", "bodyText": "Extract variable for split.getCompressionCodec().get(). Or even introduce a method to enum canUseGzip() which would return true for AUTOMATIC and GZIP", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r560025762", "createdAt": "2021-01-19T09:20:16Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -290,6 +300,32 @@ private void getKinesisRecords()\n             messagesRead += kinesisRecords.size();\n         }\n \n+        private Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodeMessage(byte[] messageData)\n+        {\n+            if (!split.getCompressionCodec().isPresent()) {\n+                return messageDecoder.decodeRow(messageData);\n+            }\n+            if (split.getCompressionCodec().get() == GZIP || split.getCompressionCodec().get() == AUTOMATIC) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAyNzcxMw==", "bodyText": "We could add UNCOMPRESSED (default value) then we could merge this block with the one at top of this method.", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r560027713", "createdAt": "2021-01-19T09:23:16Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -290,6 +300,32 @@ private void getKinesisRecords()\n             messagesRead += kinesisRecords.size();\n         }\n \n+        private Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodeMessage(byte[] messageData)\n+        {\n+            if (!split.getCompressionCodec().isPresent()) {\n+                return messageDecoder.decodeRow(messageData);\n+            }\n+            if (split.getCompressionCodec().get() == GZIP || split.getCompressionCodec().get() == AUTOMATIC) {\n+                if (isGZipped(messageData)) {\n+                    try (\n+                            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(messageData);\n+                            GZIPInputStream gZIPInputStream = new GZIPInputStream(byteArrayInputStream)) {\n+                        return messageDecoder.decodeRow(gZIPInputStream.readAllBytes());\n+                    }\n+                    catch (IOException e) {\n+                        throw new TrinoException(GENERIC_INTERNAL_ERROR, e);\n+                    }\n+                }\n+                if (split.getCompressionCodec().get() == GZIP) {\n+                    throw new TrinoException(GENERIC_INTERNAL_ERROR, format(\"Failed to decompress %s message\", split.getCompressionCodec().get()));\n+                }\n+            }\n+            if (split.getCompressionCodec().get() == AUTOMATIC) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMjQ5MDE2", "url": "https://github.com/trinodb/trino/pull/6442#pullrequestreview-571249016", "createdAt": "2021-01-19T13:38:36Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMzozODozNlrOIWOtbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMzo0MToyNlrOIWO0fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE4MDU5MA==", "bodyText": "please invert the condition", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r560180590", "createdAt": "2021-01-19T13:38:36Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -290,6 +300,28 @@ private void getKinesisRecords()\n             messagesRead += kinesisRecords.size();\n         }\n \n+        private Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodeMessage(byte[] messageData)\n+        {\n+            KinesisCompressionCodec kinesisCompressionCodec = split.getCompressionCodec();\n+            if (isGZipped(messageData)) {\n+                if (canUseGzip(kinesisCompressionCodec)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE4MTE2NQ==", "bodyText": "I am not sure if this going to work. You would need to add round trip json serialization test to verify this. Maybe simply remove this annotation?", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r560181165", "createdAt": "2021-01-19T13:39:30Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisStreamFieldGroup.java", "diffHunk": "@@ -42,6 +47,12 @@ public String getDataFormat()\n         return dataFormat;\n     }\n \n+    @JsonProperty", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE4MjM5OQ==", "bodyText": "please move this method under the usage", "url": "https://github.com/trinodb/trino/pull/6442#discussion_r560182399", "createdAt": "2021-01-19T13:41:26Z", "author": {"login": "kokosing"}, "path": "plugin/trino-kinesis/src/main/java/io/trino/plugin/kinesis/KinesisRecordSet.java", "diffHunk": "@@ -290,6 +300,28 @@ private void getKinesisRecords()\n             messagesRead += kinesisRecords.size();\n         }\n \n+        private Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodeMessage(byte[] messageData)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f914860aa8fe263648fe85aafe789f8cb39d25", "author": {"user": {"login": "guyco33", "name": "Guy Cohen"}}, "url": "https://github.com/trinodb/trino/commit/82f914860aa8fe263648fe85aafe789f8cb39d25", "committedDate": "2021-01-20T00:21:22Z", "message": "Decompress Kinesis message if needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3223a037e1076240e398cb853cc83112d9307782", "author": {"user": {"login": "guyco33", "name": "Guy Cohen"}}, "url": "https://github.com/trinodb/trino/commit/3223a037e1076240e398cb853cc83112d9307782", "committedDate": "2021-01-20T00:21:52Z", "message": "Add stream and shard names to log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "3223a037e1076240e398cb853cc83112d9307782", "author": {"user": {"login": "guyco33", "name": "Guy Cohen"}}, "url": "https://github.com/trinodb/trino/commit/3223a037e1076240e398cb853cc83112d9307782", "committedDate": "2021-01-20T00:21:52Z", "message": "Add stream and shard names to log"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1931, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}