{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTI1OTQ3", "number": 3922, "title": "Make split scheduling cache aware", "bodyText": "", "createdAt": "2020-06-04T15:38:52Z", "url": "https://github.com/trinodb/trino/pull/3922", "merged": true, "mergeCommit": {"oid": "33fa45ed0e015732b1be5333c84972a6d341b231"}, "closed": true, "closedAt": "2020-06-08T19:33:18Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoBCcxAFqTQyNDY0NTg0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpVr9eABqjM0MjE2ODYwOTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjQ1ODQz", "url": "https://github.com/trinodb/trino/pull/3922#pullrequestreview-424645843", "createdAt": "2020-06-04T16:54:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1NDowM1rOGfPFtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1NDowM1rOGfPFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNjI2Mg==", "bodyText": "Add a comment on what this does and why 5 is important.", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435406262", "createdAt": "2020-06-04T16:54:03Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/UniformNodeSelector.java", "diffHunk": "@@ -262,7 +262,7 @@ private void equateDistribution(Multimap<InternalNode, Split> assignment, NodeAs\n             InternalNode maxNode = maxNodes.poll();\n             InternalNode minNode = minNodes.poll();\n \n-            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 1) {\n+            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 5) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjYxODk5", "url": "https://github.com/trinodb/trino/pull/3922#pullrequestreview-424661899", "createdAt": "2020-06-04T17:14:42Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNDo0MlrOGfP2GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxOTozMlrOGfQBBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxODY0OQ==", "bodyText": "noop statement drop.", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435418649", "createdAt": "2020-06-04T17:14:42Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "diffHunk": "@@ -601,10 +607,69 @@ public void testEquateDistribution()\n         Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n         assertEquals(assignment.size(), 20);\n         assertEquals(assignment.keySet().size(), 4);\n-        assertEquals(assignment.get(node1).size(), 5);\n-        assertEquals(assignment.get(node2).size(), 5);\n-        assertEquals(assignment.get(node3).size(), 5);\n-        assertEquals(assignment.get(node4).size(), 5);\n+        assertEquals(assignment.get(node1).size(), 8);\n+        assertEquals(assignment.get(node2).size(), 4);\n+        assertEquals(assignment.get(node3).size(), 4);\n+        assertEquals(assignment.get(node4).size(), 4);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] equateDistributionTestParameters()\n+    {\n+        return new Object[][] {\n+                {5, 10, 0.00},\n+                {5, 20, 0.05},\n+                {10, 50, 0.00},\n+                {10, 100, 0.04},\n+                {10, 200, 0.085},\n+                {50, 550, 0.040},\n+                {50, 600, 0.042},\n+                {50, 700, 0.040},\n+                {100, 550, 0.031},\n+                {100, 600, 0.049},\n+                {100, 1000, 0.034},\n+                {100, 1500, 0.04}};\n+    }\n+\n+    @Test(dataProvider = \"equateDistributionTestParameters\")\n+    public void testEquateDistributionConsistentHashing(int numberOfNodes, int numberOfSplits, double misassignedSplitsRatio)\n+    {\n+        ImmutableList.Builder<InternalNode> nodesBuilder = ImmutableList.builder();\n+        for (int i = 0; i < numberOfNodes; ++i) {\n+            InternalNode node = new InternalNode(\"node\" + i, URI.create(\"http://10.0.0.1:\" + (i + 10)), NodeVersion.UNKNOWN, false);\n+            nodesBuilder.add(node);\n+            nodeManager.addNode(CONNECTOR_ID, node);\n+        }\n+        List<InternalNode> nodes = nodesBuilder.build();\n+\n+        Set<Split> splits = new LinkedHashSet<>();\n+        Random random = new Random(0);\n+        ImmutableSetMultimap.Builder<InternalNode, Split> originalAssignmentBuilder = ImmutableSetMultimap.builder();\n+        // assign splits randomly according to consistent hashing\n+        for (int i = 0; i < numberOfSplits; i++) {\n+            InternalNode node = nodes.get(Hashing.consistentHash(random.nextInt(), nodes.size()));\n+            Split split = new Split(CONNECTOR_ID, new TestSplitLocal(node.getHostAndPort()), Lifespan.taskWide());\n+            splits.add(split);\n+            originalAssignmentBuilder.put(node, split);\n+        }\n+\n+        Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n+\n+        Multimap<Split, InternalNode> originalNodeAssignment = originalAssignmentBuilder.build().inverse();\n+        Multimap<Split, InternalNode> nodeAssignment = ImmutableSetMultimap.copyOf(assignment).inverse();\n+\n+        int miassignedSplits = 0;\n+        for (Split split : splits) {\n+            if (nodeAssignment.get(split).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMDAwMA==", "bodyText": "move this line just above\n Multimap<Split, InternalNode> nodeAssignment = ImmutableSetMultimap.copyOf(assignment).inverse();", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435420000", "createdAt": "2020-06-04T17:17:06Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "diffHunk": "@@ -601,10 +607,69 @@ public void testEquateDistribution()\n         Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n         assertEquals(assignment.size(), 20);\n         assertEquals(assignment.keySet().size(), 4);\n-        assertEquals(assignment.get(node1).size(), 5);\n-        assertEquals(assignment.get(node2).size(), 5);\n-        assertEquals(assignment.get(node3).size(), 5);\n-        assertEquals(assignment.get(node4).size(), 5);\n+        assertEquals(assignment.get(node1).size(), 8);\n+        assertEquals(assignment.get(node2).size(), 4);\n+        assertEquals(assignment.get(node3).size(), 4);\n+        assertEquals(assignment.get(node4).size(), 4);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] equateDistributionTestParameters()\n+    {\n+        return new Object[][] {\n+                {5, 10, 0.00},\n+                {5, 20, 0.05},\n+                {10, 50, 0.00},\n+                {10, 100, 0.04},\n+                {10, 200, 0.085},\n+                {50, 550, 0.040},\n+                {50, 600, 0.042},\n+                {50, 700, 0.040},\n+                {100, 550, 0.031},\n+                {100, 600, 0.049},\n+                {100, 1000, 0.034},\n+                {100, 1500, 0.04}};\n+    }\n+\n+    @Test(dataProvider = \"equateDistributionTestParameters\")\n+    public void testEquateDistributionConsistentHashing(int numberOfNodes, int numberOfSplits, double misassignedSplitsRatio)\n+    {\n+        ImmutableList.Builder<InternalNode> nodesBuilder = ImmutableList.builder();\n+        for (int i = 0; i < numberOfNodes; ++i) {\n+            InternalNode node = new InternalNode(\"node\" + i, URI.create(\"http://10.0.0.1:\" + (i + 10)), NodeVersion.UNKNOWN, false);\n+            nodesBuilder.add(node);\n+            nodeManager.addNode(CONNECTOR_ID, node);\n+        }\n+        List<InternalNode> nodes = nodesBuilder.build();\n+\n+        Set<Split> splits = new LinkedHashSet<>();\n+        Random random = new Random(0);\n+        ImmutableSetMultimap.Builder<InternalNode, Split> originalAssignmentBuilder = ImmutableSetMultimap.builder();\n+        // assign splits randomly according to consistent hashing\n+        for (int i = 0; i < numberOfSplits; i++) {\n+            InternalNode node = nodes.get(Hashing.consistentHash(random.nextInt(), nodes.size()));\n+            Split split = new Split(CONNECTOR_ID, new TestSplitLocal(node.getHostAndPort()), Lifespan.taskWide());\n+            splits.add(split);\n+            originalAssignmentBuilder.put(node, split);\n+        }\n+\n+        Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMDM2Mw==", "bodyText": "typo misassignedSplits", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435420363", "createdAt": "2020-06-04T17:17:43Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "diffHunk": "@@ -601,10 +607,69 @@ public void testEquateDistribution()\n         Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n         assertEquals(assignment.size(), 20);\n         assertEquals(assignment.keySet().size(), 4);\n-        assertEquals(assignment.get(node1).size(), 5);\n-        assertEquals(assignment.get(node2).size(), 5);\n-        assertEquals(assignment.get(node3).size(), 5);\n-        assertEquals(assignment.get(node4).size(), 5);\n+        assertEquals(assignment.get(node1).size(), 8);\n+        assertEquals(assignment.get(node2).size(), 4);\n+        assertEquals(assignment.get(node3).size(), 4);\n+        assertEquals(assignment.get(node4).size(), 4);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] equateDistributionTestParameters()\n+    {\n+        return new Object[][] {\n+                {5, 10, 0.00},\n+                {5, 20, 0.05},\n+                {10, 50, 0.00},\n+                {10, 100, 0.04},\n+                {10, 200, 0.085},\n+                {50, 550, 0.040},\n+                {50, 600, 0.042},\n+                {50, 700, 0.040},\n+                {100, 550, 0.031},\n+                {100, 600, 0.049},\n+                {100, 1000, 0.034},\n+                {100, 1500, 0.04}};\n+    }\n+\n+    @Test(dataProvider = \"equateDistributionTestParameters\")\n+    public void testEquateDistributionConsistentHashing(int numberOfNodes, int numberOfSplits, double misassignedSplitsRatio)\n+    {\n+        ImmutableList.Builder<InternalNode> nodesBuilder = ImmutableList.builder();\n+        for (int i = 0; i < numberOfNodes; ++i) {\n+            InternalNode node = new InternalNode(\"node\" + i, URI.create(\"http://10.0.0.1:\" + (i + 10)), NodeVersion.UNKNOWN, false);\n+            nodesBuilder.add(node);\n+            nodeManager.addNode(CONNECTOR_ID, node);\n+        }\n+        List<InternalNode> nodes = nodesBuilder.build();\n+\n+        Set<Split> splits = new LinkedHashSet<>();\n+        Random random = new Random(0);\n+        ImmutableSetMultimap.Builder<InternalNode, Split> originalAssignmentBuilder = ImmutableSetMultimap.builder();\n+        // assign splits randomly according to consistent hashing\n+        for (int i = 0; i < numberOfSplits; i++) {\n+            InternalNode node = nodes.get(Hashing.consistentHash(random.nextInt(), nodes.size()));\n+            Split split = new Split(CONNECTOR_ID, new TestSplitLocal(node.getHostAndPort()), Lifespan.taskWide());\n+            splits.add(split);\n+            originalAssignmentBuilder.put(node, split);\n+        }\n+\n+        Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n+\n+        Multimap<Split, InternalNode> originalNodeAssignment = originalAssignmentBuilder.build().inverse();\n+        Multimap<Split, InternalNode> nodeAssignment = ImmutableSetMultimap.copyOf(assignment).inverse();\n+\n+        int miassignedSplits = 0;\n+        for (Split split : splits) {\n+            if (nodeAssignment.get(split).isEmpty()) {\n+                int l = 0;\n+            }\n+\n+            if (!getOnlyElement(originalNodeAssignment.get(split)).equals(getOnlyElement(nodeAssignment.get(split)))) {\n+                miassignedSplits++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTI4Mw==", "bodyText": "how did you come up with the numbers?", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435421283", "createdAt": "2020-06-04T17:19:15Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "diffHunk": "@@ -601,10 +607,69 @@ public void testEquateDistribution()\n         Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n         assertEquals(assignment.size(), 20);\n         assertEquals(assignment.keySet().size(), 4);\n-        assertEquals(assignment.get(node1).size(), 5);\n-        assertEquals(assignment.get(node2).size(), 5);\n-        assertEquals(assignment.get(node3).size(), 5);\n-        assertEquals(assignment.get(node4).size(), 5);\n+        assertEquals(assignment.get(node1).size(), 8);\n+        assertEquals(assignment.get(node2).size(), 4);\n+        assertEquals(assignment.get(node3).size(), 4);\n+        assertEquals(assignment.get(node4).size(), 4);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] equateDistributionTestParameters()\n+    {\n+        return new Object[][] {\n+                {5, 10, 0.00},", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTQ0NQ==", "bodyText": "+1 . 5 looks very much like a magic number. Why not 7?", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435421445", "createdAt": "2020-06-04T17:19:32Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/UniformNodeSelector.java", "diffHunk": "@@ -262,7 +262,7 @@ private void equateDistribution(Multimap<InternalNode, Split> assignment, NodeAs\n             InternalNode maxNode = maxNodes.poll();\n             InternalNode minNode = minNodes.poll();\n \n-            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 1) {\n+            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 5) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNjI2Mg=="}, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "0e977dc9266acb1616a7f4a7f3bcbd76a42cda36", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/0e977dc9266acb1616a7f4a7f3bcbd76a42cda36", "committedDate": "2020-06-05T12:31:58Z", "message": "Make split scheduling Hive cache aware"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e977dc9266acb1616a7f4a7f3bcbd76a42cda36", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/0e977dc9266acb1616a7f4a7f3bcbd76a42cda36", "committedDate": "2020-06-05T12:31:58Z", "message": "Make split scheduling Hive cache aware"}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac9375f14aa7411b9583efd4ac87351c12b768f1", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/ac9375f14aa7411b9583efd4ac87351c12b768f1", "committedDate": "2020-06-08T13:14:31Z", "message": "Allow some degreee of non-uniformity in equateDistribution\n\nThe difference of 5 between node with maximum and minimum\nsplits is a tradeoff between ratio of misassigned splits\nand assignment uniformity. Using larger numbers doesn't\nreduce the number of misassigned splits greatly (in absolute values).\n\nBelow are tests results for different acceptable splits differences:\nmax - min <= 1\n\nnodes\t\tsplits\t\tratio\n5\t\t10\t\t0.1\n5\t\t20\t\t0.25\n10\t\t50\t\t0.12\n10\t\t100\t\t0.11\n10\t\t200\t\t0.085\n50\t\t550\t\t0.110\n50\t\t600\t\t0.111\n50\t\t700\t\t0.102\n100\t\t550\t\t0.121\n100\t\t600\t\t0.163\n100\t\t1000\t\t0.107\n100\t\t1500\t\t0.091\n\nmax - min <= 2\n\nnodes\t\tsplits\t\tratio\n5\t\t10\t\t0.0\n5\t\t20\t\t0.15\n10\t\t50\t\t0.04\n10\t\t100\t\t0.07\n10\t\t200\t\t0.085\n50\t\t550\t\t0.07\n50\t\t600\t\t0.075\n50\t\t700\t\t0.068\n100\t\t550\t\t0.116\n100\t\t600\t\t0.093\n100\t\t1000\t\t0.068\n100\t\t1500\t\t0.062\n\nmax - min <= 3\n\nnodes\t\tsplits\t\tratio\n5\t\t10\t\t0.0\n5\t\t20\t\t0.1\n10\t\t50\t\t0.02\n10\t\t100\t\t0.07\n10\t\t200\t\t0.085\n50\t\t550\t\t0.065\n50\t\t600\t\t0.073\n50\t\t700\t\t0.067\n100\t\t550\t\t0.061\n100\t\t600\t\t0.093\n100\t\t1000\t\t0.063\n100\t\t1500\t\t0.059\n\nmax - min <= 4\n\nnodes\t\tsplits\t\tratio\n5\t\t10\t\t0.0\n5\t\t20\t\t0.1\n10\t\t50\t\t0.0\n10\t\t100\t\t0.04\n10\t\t200\t\t0.085\n50\t\t550\t\t0.043\n50\t\t600\t\t0.046\n50\t\t700\t\t0.047\n100\t\t550\t\t0.06\n100\t\t600\t\t0.051\n100\t\t1000\t\t0.042\n100\t\t1500\t\t0.04\n\nmax - min <= 5\n\nnodes\t\tsplits\t\tratio\n5\t\t10\t\t0.0\n5\t\t20\t\t0.05\n10\t\t50\t\t0.0\n10\t\t100\t\t0.04\n10\t\t200\t\t0.085\n50\t\t550\t\t0.036\n50\t\t600\t\t0.041\n50\t\t700\t\t0.04\n100\t\t550\t\t0.03\n100\t\t600\t\t0.048\n100\t\t1000\t\t0.034\n100\t\t1500\t\t0.037\n\nmax - min <= 6\n\nnodes\t\tsplits\t\tratio\n5\t\t10\t\t0.0\n5\t\t20\t\t0.0\n10\t\t50\t\t0.0\n10\t\t100\t\t0.02\n10\t\t200\t\t0.085\n50\t\t550\t\t0.023\n50\t\t600\t\t0.028\n50\t\t700\t\t0.031\n100\t\t550\t\t0.029\n100\t\t600\t\t0.025\n100\t\t1000\t\t0.025\n100\t\t1500\t\t0.027\n\nmax - min <= 7\n\nnodes\t\tsplits\t\tratio\n5\t\t10\t\t0.0\n5\t\t20\t\t0.0\n10\t\t50\t\t0.0\n10\t\t100\t\t0.01\n10\t\t200\t\t0.085\n50\t\t550\t\t0.018\n50\t\t600\t\t0.018\n50\t\t700\t\t0.022\n100\t\t550\t\t0.012\n100\t\t600\t\t0.021\n100\t\t1000\t\t0.015\n100\t\t1500\t\t0.022\n\nmax - min <= 8\nnodes\t\tsplits\t\tratio\n5\t\t10\t\t0.0\n5\t\t20\t\t0.0\n10\t\t50\t\t0.0\n10\t\t100\t\t0.0\n10\t\t200\t\t0.085\n50\t\t550\t\t0.014\n50\t\t600\t\t0.016\n50\t\t700\t\t0.02\n100\t\t550\t\t0.009\n100\t\t600\t\t0.011\n100\t\t1000\t\t0.013\n100\t\t1500\t\t0.018"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83edddc5cc68c5e3ff316949735dd66d40f426b8", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/83edddc5cc68c5e3ff316949735dd66d40f426b8", "committedDate": "2020-06-08T13:14:32Z", "message": "Update Rubix to 0.3.11"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9af5849a7c3e60499bf6da5f7c6c4179f91a24d5", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/9af5849a7c3e60499bf6da5f7c6c4179f91a24d5", "committedDate": "2020-06-08T13:14:32Z", "message": "Remove PrestoClusterManager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "283f9441474dd20bad41d365b5a501fc01c2fabc", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/283f9441474dd20bad41d365b5a501fc01c2fabc", "committedDate": "2020-06-08T19:30:58Z", "message": "Make split scheduling Hive cache aware"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "283f9441474dd20bad41d365b5a501fc01c2fabc", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/283f9441474dd20bad41d365b5a501fc01c2fabc", "committedDate": "2020-06-08T19:30:58Z", "message": "Make split scheduling Hive cache aware"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 560, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}