{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDQ2OTcx", "number": 4349, "title": "Fix old client compatibility with parametric timestamp type", "bodyText": "Fixes #4036\nTools like PowerBI and Tableau use ODBC interface to interact with Presto. With the recent enhancements in Presto to support parametric timestamp type (timestamp with different precision), the old ODBC interfaces are not working. The code changes in this PR will convert data type for the following cases.\ntimestamp(3)                          =>   timestamp\ntimestamp(3) with time zone =>   timestamp with time zone\nSince Presto used to support timestamps with three digit precision (up to milliseconds) in the past, we are doing the above conversion to maintain compatibility with previous interpretation of \"timestamp\" types by clients. Any other timestamp with a different precision (say timestamp(9)) will remain as is.\n@martint @tooptoop4", "createdAt": "2020-07-05T19:01:08Z", "url": "https://github.com/trinodb/trino/pull/4349", "merged": true, "mergeCommit": {"oid": "66a257d648dbdc66519c083fcb020abd83d20821"}, "closed": true, "closedAt": "2020-07-07T19:16:03Z", "author": {"login": "sajjoseph"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyDBHpAFqTQ0MjcwNTYwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcypwAFABqjM1MjE2MjU5MzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzA1NjA5", "url": "https://github.com/trinodb/trino/pull/4349#pullrequestreview-442705609", "createdAt": "2020-07-05T20:52:02Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1MjowMlrOGtEygA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1Mjo0MVrOGtEytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzU2OA==", "bodyText": "We should introduce a configuration option / session property to toggle this behavior. It will be temporary until clients get a chance to update their logic to handle variable-precision types.", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r449917568", "createdAt": "2020-07-05T20:52:02Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaPageSource.java", "diffHunk": "@@ -249,10 +251,21 @@ private void addColumnsRecords(QualifiedTablePrefix prefix)\n         for (Map.Entry<SchemaTableName, List<ColumnMetadata>> entry : listTableColumns(session, metadata, accessControl, prefix).entrySet()) {\n             SchemaTableName tableName = entry.getKey();\n             int ordinalPosition = 1;\n+            String columnDisplayName = \"\";\n             for (ColumnMetadata column : entry.getValue()) {\n                 if (column.isHidden()) {\n                     continue;\n                 }\n+                if (column.getType() instanceof TimestampType && ((TimestampType) column.getType()).getPrecision() == TimestampType.DEFAULT_PRECISION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzYyMw==", "bodyText": "This variable can be declared inside the look, right before if (column.getType instanceof ...)", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r449917623", "createdAt": "2020-07-05T20:52:41Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaPageSource.java", "diffHunk": "@@ -249,10 +251,21 @@ private void addColumnsRecords(QualifiedTablePrefix prefix)\n         for (Map.Entry<SchemaTableName, List<ColumnMetadata>> entry : listTableColumns(session, metadata, accessControl, prefix).entrySet()) {\n             SchemaTableName tableName = entry.getKey();\n             int ordinalPosition = 1;\n+            String columnDisplayName = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTE4NTI4", "url": "https://github.com/trinodb/trino/pull/4349#pullrequestreview-443518528", "createdAt": "2020-07-07T02:22:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMjoyMjozNVrOGts9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMjoyNDo0NVrOGttAEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTc5OA==", "bodyText": "legacy already has a special meaning for timestamps. It's used to indicate timestamp semantics where timestamps are treated like instants.\nI would suggest a different name, such as \"omit_timestamp_precision\"", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r450575798", "createdAt": "2020-07-07T02:22:35Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/SystemSessionProperties.java", "diffHunk": "@@ -128,6 +128,7 @@\n     public static final String REQUIRED_WORKERS_COUNT = \"required_workers_count\";\n     public static final String REQUIRED_WORKERS_MAX_WAIT_TIME = \"required_workers_max_wait_time\";\n     public static final String COST_ESTIMATION_WORKER_COUNT = \"cost_estimation_worker_count\";\n+    public static final String ENABLE_LEGACY_TIMESTAMP_FORMAT_SUPPORT = \"enable_legacy_timestamp_support\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NjQwMA==", "bodyText": "See comment above. Also, let's prefix the config option with deprecated. to make it clear this is on its way out.", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r450576400", "createdAt": "2020-07-07T02:24:45Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -215,6 +216,18 @@ public FeaturesConfig setDistributedIndexJoinsEnabled(boolean distributedIndexJo\n         return this;\n     }\n \n+    public boolean isLegacyTimestampFormatEnabled()\n+    {\n+        return enableLegacyTimestampFormat;\n+    }\n+\n+    @Config(\"legacy-timestamp-format-enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "cede23053c5f952f68bcef77d3242c0a8fa0b31e", "author": {"user": {"login": "sajjoseph", "name": null}}, "url": "https://github.com/trinodb/trino/commit/cede23053c5f952f68bcef77d3242c0a8fa0b31e", "committedDate": "2020-07-07T17:59:58Z", "message": "Add option to render timestamp type without precision\n\nSome clients expect timestamp and timestamp w/ timezone type names\nto be rendered without precision. The recent changes to add support\nfor variable precision timestamp types break this assumption.\n\nThis change introduces a configuration option and session property\nto restore the old behavior while client implementations are fixed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "cede23053c5f952f68bcef77d3242c0a8fa0b31e", "author": {"user": {"login": "sajjoseph", "name": null}}, "url": "https://github.com/trinodb/trino/commit/cede23053c5f952f68bcef77d3242c0a8fa0b31e", "committedDate": "2020-07-07T17:59:58Z", "message": "Add option to render timestamp type without precision\n\nSome clients expect timestamp and timestamp w/ timezone type names\nto be rendered without precision. The recent changes to add support\nfor variable precision timestamp types break this assumption.\n\nThis change introduces a configuration option and session property\nto restore the old behavior while client implementations are fixed."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4958, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}