{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjU4MDcx", "number": 3008, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo1Mjo1M1rODlaSmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0NjozNVrODlwR3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTU0NjUxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo1Mjo1M1rOFySWyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo1Mjo1M1rOFySWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3Mzg2Nw==", "bodyText": "Dear Reviewer,\nI know that the TestHiveSchema is awfully long and looks like 90% redundant, but it is actually not.", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388273867", "createdAt": "2020-03-05T12:52:53Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,247 @@\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTczMjE3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo0ODoxMlrOFyUHrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyMDoyOVrOFy6TEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMjc2NA==", "bodyText": "This is a subjective comment, but to me if (!filterSchema(tableName.getSchemaName())) isn't very intuitive. Perhaps if the we'd call the method something like isSystemSchema() (of course, the return values would be reversed), those tests would read better.", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388302764", "createdAt": "2020-03-05T13:48:12Z", "author": {"login": "aalbu"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2MjgzMw==", "bodyText": "it seems filter is overloaded, and doesn't really mean whether it's positive (filter) or negative (filter out, exclude).\nthe reason i picked this name is -- java.util.stream.Stream#filter, io.prestosql.security.AccessControl#filterSchemas ...\nhmm maybe isExcludedSchema ?", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388362833", "createdAt": "2020-03-05T15:20:47Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMjc2NA=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3OTg1OQ==", "bodyText": "i am keeping filterSchema", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388779859", "createdAt": "2020-03-06T08:54:22Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMjc2NA=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMTY2OQ==", "bodyText": "isHiveMetadataSchema?\nfilterSchema sounds like *AccessControl#filterSchemas.  I don't like this name here.", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388831669", "createdAt": "2020-03-06T10:40:04Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMjc2NA=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyODI3Mg==", "bodyText": "the problem is with semntics of the method\nWhile it's true today, in general: metadata schema != we should hide it\nso isHiveMetadataSchema isn't IMO btter", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388928272", "createdAt": "2020-03-06T14:20:29Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMjc2NA=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTgyNjI5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxMzoyMlrOFyVCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxMzoyMlrOFyVCRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNzc2NQ==", "bodyText": "Hive 3' -> Hive 3's.", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388317765", "createdAt": "2020-03-05T14:13:22Z", "author": {"login": "aalbu"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,247 @@\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema\n+        extends ProductTest\n+{\n+    @BeforeTestWithContext\n+    public void setUp()\n+    {\n+        // make sure hive.default schema is not empty\n+        onPresto().executeQuery(\"DROP TABLE IF EXISTS hive.default.test_sys_schema_disabled_table_in_default\");\n+        onPresto().executeQuery(\"CREATE TABLE hive.default.test_sys_schema_disabled_table_in_default(a bigint)\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void tearDown()\n+    {\n+        onPresto().executeQuery(\"DROP TABLE hive.default.test_sys_schema_disabled_table_in_default\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `sys` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testSysSchemaFilteredOut()\n+    {\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // SHOW TABLES\n+        assertThat(() -> onPresto().executeQuery(\"SHOW TABLES FROM hive.sys\"))\n+                .failsWithMessage(\"line 1:1: Schema 'sys' does not exist\");\n+\n+        // SHOW COLUMNS\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.columns -- it has a special handling path in metadata, which also depends on query predicates\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.columns WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT column_name FROM information_schema.columns WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.table_privileges -- it has a special handling path in metadata, which also depends on query predicates\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.table_privileges\"))\n+                .doesNotHave(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // SELECT\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `sys` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testHiveInformationSchemaFilteredOut()\n+    {\n+        List<String> allInformationSchemaTables = ImmutableList.<String>builder()\n+                // In particular, no column_privileges which exists in Hive 3' information_schema", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTgzOTU3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxNjo0MlrOFyVKSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxNjo0MlrOFyVKSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxOTgxOA==", "bodyText": "You're missing the license header here.", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388319818", "createdAt": "2020-03-05T14:16:42Z", "author": {"login": "aalbu"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,247 @@\n+package io.prestosql.tests.hive;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTEzMjgxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0MDo0MlrOFy0a7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyMTowMVrOFy6UZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMTk4MQ==", "bodyText": "What do you mean by: exposing it may require proper handling in access control.? What is sys schema?", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388831981", "createdAt": "2020-03-06T10:40:42Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)\n+    {\n+        if (\"information_schema\".equals(schemaName)) {\n+            // For things like listing columns in information_schema.columns table, we need to explicitly filter out Hive's own information_schema.\n+            // TODO https://github.com/prestosql/presto/issues/1559 this should be filtered out in engine.\n+            return false;\n+        }\n+        if (\"sys\".equals(schemaName)) {\n+            // Hive 3's `sys` schema contains no objects we can handle, so there is no point in exposing it.\n+            // Also, exposing it may require proper handling in access control.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyODYxMw==", "bodyText": "sys contains table paramters, partition paramters, some stats, etc.", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388928613", "createdAt": "2020-03-06T14:21:01Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)\n+    {\n+        if (\"information_schema\".equals(schemaName)) {\n+            // For things like listing columns in information_schema.columns table, we need to explicitly filter out Hive's own information_schema.\n+            // TODO https://github.com/prestosql/presto/issues/1559 this should be filtered out in engine.\n+            return false;\n+        }\n+        if (\"sys\".equals(schemaName)) {\n+            // Hive 3's `sys` schema contains no objects we can handle, so there is no point in exposing it.\n+            // Also, exposing it may require proper handling in access control.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMTk4MQ=="}, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTEzNDg3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0MToyNVrOFy0cRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyMjowOVrOFy6WvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMjMyNA==", "bodyText": "I would put this method under the last usage.", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388832324", "createdAt": "2020-03-06T10:41:25Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyOTIxMw==", "bodyText": "right", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388929213", "createdAt": "2020-03-06T14:22:09Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMjMyNA=="}, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTE0MDU5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0MzoyOVrOFy0fzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyMjo0NVrOFy6YHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMzIyOQ==", "bodyText": "this is going to be called before each test.  Maybe you could have a variable that would not create this table if it is already created, then tearDown could be removed. WDYT?", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388833229", "createdAt": "2020-03-06T10:43:29Z", "author": {"login": "kokosing"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema\n+        extends ProductTest\n+{\n+    @BeforeTestWithContext\n+    public void setUp()\n+    {\n+        // make sure hive.default schema is not empty\n+        onPresto().executeQuery(\"DROP TABLE IF EXISTS hive.default.test_sys_schema_disabled_table_in_default\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyOTU2NA==", "bodyText": "in general -- i agree\nit's tiny overhead compared to the number of test queries. i choose to ignore this", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388929564", "createdAt": "2020-03-06T14:22:45Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema\n+        extends ProductTest\n+{\n+    @BeforeTestWithContext\n+    public void setUp()\n+    {\n+        // make sure hive.default schema is not empty\n+        onPresto().executeQuery(\"DROP TABLE IF EXISTS hive.default.test_sys_schema_disabled_table_in_default\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMzIyOQ=="}, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTE0NjE2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0NTo0MlrOFy0jaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyMzo0MVrOFy6aPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDE1NQ==", "bodyText": "It is a pity that this is a product test. After #3009 we could write \"unit\" test, but still it is not going to be much faster, but it would be easier to run tests from IDE.", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388834155", "createdAt": "2020-03-06T10:45:42Z", "author": {"login": "kokosing"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMDEwOA==", "bodyText": "it's a necessity that there is a product test. i want to run with HMS whether information_schema/sys exists and where it doesn't\nit would be good to have a unit test too though. out of scope", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388930108", "createdAt": "2020-03-06T14:23:41Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDE1NQ=="}, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTE0ODc2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0NjoyOFrOFy0k7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyNDozNlrOFy6cIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDU0MQ==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388834541", "createdAt": "2020-03-06T10:46:28Z", "author": {"login": "kokosing"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema\n+        extends ProductTest\n+{\n+    @BeforeTestWithContext\n+    public void setUp()\n+    {\n+        // make sure hive.default schema is not empty\n+        onPresto().executeQuery(\"DROP TABLE IF EXISTS hive.default.test_sys_schema_disabled_table_in_default\");\n+        onPresto().executeQuery(\"CREATE TABLE hive.default.test_sys_schema_disabled_table_in_default(a bigint)\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void tearDown()\n+    {\n+        onPresto().executeQuery(\"DROP TABLE hive.default.test_sys_schema_disabled_table_in_default\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `sys` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testSysSchemaFilteredOut()\n+    {\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // SHOW TABLES\n+        assertThat(() -> onPresto().executeQuery(\"SHOW TABLES FROM hive.sys\"))\n+                .failsWithMessage(\"line 1:1: Schema 'sys' does not exist\");\n+\n+        // SHOW COLUMNS\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.columns -- it has a special handling path in metadata, which also depends on query predicates\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.columns WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT column_name FROM information_schema.columns WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.table_privileges -- it has a special handling path in metadata, which also depends on query predicates\n+        if (tablePrivilegesSupported()) {\n+            assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.table_privileges\"))\n+                    .doesNotHave(containsFirstColumnValue(\"information_schema\"))\n+                    .satisfies(containsFirstColumnValue(\"default\"))\n+                    .doesNotHave(containsFirstColumnValue(\"sys\"));\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys'\"))\n+                    .hasNoRows();\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                    .hasNoRows();\n+        }\n+\n+        // SELECT\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `information_schema` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testHiveInformationSchemaFilteredOut()\n+    {\n+        List<String> allInformationSchemaTables = ImmutableList.<String>builder()\n+                // In particular, no column_privileges which exists in Hive 3's information_schema\n+                .add(\"columns\")\n+                .add(\"tables\")\n+                .add(\"views\")\n+                .add(\"schemata\")\n+                .add(\"table_privileges\")\n+                .add(\"roles\")\n+                .add(\"applicable_roles\")\n+                .add(\"enabled_roles\")\n+                .build();\n+        List<QueryAssert.Row> allInformationSchemaTablesAsRows = allInformationSchemaTables.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // This test is run in various setups and we may or may not have access to hive.information_schema.roles table\n+        List<String> allInformationSchemaTablesExceptRoles = allInformationSchemaTables.stream()\n+                .filter(tableName -> !tableName.equals(\"roles\"))\n+                .collect(toImmutableList());\n+        List<QueryAssert.Row> allInformationSchemaTablesExceptRolesAsRows = allInformationSchemaTablesExceptRoles.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // SHOW TABLES\n+        assertThat(onPresto().executeQuery(\"SHOW TABLES FROM hive.information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"tables\"))\n+                .satisfies(containsFirstColumnValue(\"columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_privileges\"))\n+                .doesNotHave(containsFirstColumnValue(\"column_privileges\")); // Hive 3's information_schema has column_privileges view\n+\n+        // SHOW COLUMNS\n+        assertThat(onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(onPresto().executeQuery(\"DESCRIBE hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .satisfies(containsFirstColumnValue(\"column_name\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'information_schema'\"))\n+                .containsOnly(allInformationSchemaTablesAsRows);\n+        Assertions.assertThat(onPresto().executeQuery(\"SELECT table_schema, table_name FROM information_schema.tables\").rows().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMDU5Mg==", "bodyText": "static import\n\nassertThat?\nI use tempto QueryAssert.assertThat and assertj Assertions.assertThat -- it happens; not pretty; we already do this in other tests", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388930592", "createdAt": "2020-03-06T14:24:36Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema\n+        extends ProductTest\n+{\n+    @BeforeTestWithContext\n+    public void setUp()\n+    {\n+        // make sure hive.default schema is not empty\n+        onPresto().executeQuery(\"DROP TABLE IF EXISTS hive.default.test_sys_schema_disabled_table_in_default\");\n+        onPresto().executeQuery(\"CREATE TABLE hive.default.test_sys_schema_disabled_table_in_default(a bigint)\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void tearDown()\n+    {\n+        onPresto().executeQuery(\"DROP TABLE hive.default.test_sys_schema_disabled_table_in_default\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `sys` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testSysSchemaFilteredOut()\n+    {\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // SHOW TABLES\n+        assertThat(() -> onPresto().executeQuery(\"SHOW TABLES FROM hive.sys\"))\n+                .failsWithMessage(\"line 1:1: Schema 'sys' does not exist\");\n+\n+        // SHOW COLUMNS\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.columns -- it has a special handling path in metadata, which also depends on query predicates\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.columns WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT column_name FROM information_schema.columns WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.table_privileges -- it has a special handling path in metadata, which also depends on query predicates\n+        if (tablePrivilegesSupported()) {\n+            assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.table_privileges\"))\n+                    .doesNotHave(containsFirstColumnValue(\"information_schema\"))\n+                    .satisfies(containsFirstColumnValue(\"default\"))\n+                    .doesNotHave(containsFirstColumnValue(\"sys\"));\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys'\"))\n+                    .hasNoRows();\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                    .hasNoRows();\n+        }\n+\n+        // SELECT\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `information_schema` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testHiveInformationSchemaFilteredOut()\n+    {\n+        List<String> allInformationSchemaTables = ImmutableList.<String>builder()\n+                // In particular, no column_privileges which exists in Hive 3's information_schema\n+                .add(\"columns\")\n+                .add(\"tables\")\n+                .add(\"views\")\n+                .add(\"schemata\")\n+                .add(\"table_privileges\")\n+                .add(\"roles\")\n+                .add(\"applicable_roles\")\n+                .add(\"enabled_roles\")\n+                .build();\n+        List<QueryAssert.Row> allInformationSchemaTablesAsRows = allInformationSchemaTables.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // This test is run in various setups and we may or may not have access to hive.information_schema.roles table\n+        List<String> allInformationSchemaTablesExceptRoles = allInformationSchemaTables.stream()\n+                .filter(tableName -> !tableName.equals(\"roles\"))\n+                .collect(toImmutableList());\n+        List<QueryAssert.Row> allInformationSchemaTablesExceptRolesAsRows = allInformationSchemaTablesExceptRoles.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // SHOW TABLES\n+        assertThat(onPresto().executeQuery(\"SHOW TABLES FROM hive.information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"tables\"))\n+                .satisfies(containsFirstColumnValue(\"columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_privileges\"))\n+                .doesNotHave(containsFirstColumnValue(\"column_privileges\")); // Hive 3's information_schema has column_privileges view\n+\n+        // SHOW COLUMNS\n+        assertThat(onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(onPresto().executeQuery(\"DESCRIBE hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .satisfies(containsFirstColumnValue(\"column_name\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'information_schema'\"))\n+                .containsOnly(allInformationSchemaTablesAsRows);\n+        Assertions.assertThat(onPresto().executeQuery(\"SELECT table_schema, table_name FROM information_schema.tables\").rows().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDU0MQ=="}, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTE0OTExOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0NjozNVrOFy0lJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0NjozNVrOFy0lJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDU5Ng==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388834596", "createdAt": "2020-03-06T10:46:35Z", "author": {"login": "kokosing"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema\n+        extends ProductTest\n+{\n+    @BeforeTestWithContext\n+    public void setUp()\n+    {\n+        // make sure hive.default schema is not empty\n+        onPresto().executeQuery(\"DROP TABLE IF EXISTS hive.default.test_sys_schema_disabled_table_in_default\");\n+        onPresto().executeQuery(\"CREATE TABLE hive.default.test_sys_schema_disabled_table_in_default(a bigint)\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void tearDown()\n+    {\n+        onPresto().executeQuery(\"DROP TABLE hive.default.test_sys_schema_disabled_table_in_default\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `sys` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testSysSchemaFilteredOut()\n+    {\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // SHOW TABLES\n+        assertThat(() -> onPresto().executeQuery(\"SHOW TABLES FROM hive.sys\"))\n+                .failsWithMessage(\"line 1:1: Schema 'sys' does not exist\");\n+\n+        // SHOW COLUMNS\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.columns -- it has a special handling path in metadata, which also depends on query predicates\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.columns WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT column_name FROM information_schema.columns WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.table_privileges -- it has a special handling path in metadata, which also depends on query predicates\n+        if (tablePrivilegesSupported()) {\n+            assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.table_privileges\"))\n+                    .doesNotHave(containsFirstColumnValue(\"information_schema\"))\n+                    .satisfies(containsFirstColumnValue(\"default\"))\n+                    .doesNotHave(containsFirstColumnValue(\"sys\"));\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys'\"))\n+                    .hasNoRows();\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                    .hasNoRows();\n+        }\n+\n+        // SELECT\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `information_schema` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testHiveInformationSchemaFilteredOut()\n+    {\n+        List<String> allInformationSchemaTables = ImmutableList.<String>builder()\n+                // In particular, no column_privileges which exists in Hive 3's information_schema\n+                .add(\"columns\")\n+                .add(\"tables\")\n+                .add(\"views\")\n+                .add(\"schemata\")\n+                .add(\"table_privileges\")\n+                .add(\"roles\")\n+                .add(\"applicable_roles\")\n+                .add(\"enabled_roles\")\n+                .build();\n+        List<QueryAssert.Row> allInformationSchemaTablesAsRows = allInformationSchemaTables.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // This test is run in various setups and we may or may not have access to hive.information_schema.roles table\n+        List<String> allInformationSchemaTablesExceptRoles = allInformationSchemaTables.stream()\n+                .filter(tableName -> !tableName.equals(\"roles\"))\n+                .collect(toImmutableList());\n+        List<QueryAssert.Row> allInformationSchemaTablesExceptRolesAsRows = allInformationSchemaTablesExceptRoles.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // SHOW TABLES\n+        assertThat(onPresto().executeQuery(\"SHOW TABLES FROM hive.information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"tables\"))\n+                .satisfies(containsFirstColumnValue(\"columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_privileges\"))\n+                .doesNotHave(containsFirstColumnValue(\"column_privileges\")); // Hive 3's information_schema has column_privileges view\n+\n+        // SHOW COLUMNS\n+        assertThat(onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(onPresto().executeQuery(\"DESCRIBE hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .satisfies(containsFirstColumnValue(\"column_name\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'information_schema'\"))\n+                .containsOnly(allInformationSchemaTablesAsRows);\n+        Assertions.assertThat(onPresto().executeQuery(\"SELECT table_schema, table_name FROM information_schema.tables\").rows().stream()\n+                .filter(row -> row.get(0).equals(\"information_schema\"))\n+                .map(row -> (String) row.get(1)))\n+                .containsOnly(allInformationSchemaTables.toArray(new String[0]));\n+        // information_schema.column_privileges exists in Hive 3\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'information_schema' AND table_name = 'column_privileges'\"))\n+                .hasNoRows();\n+\n+        // information_schema.columns -- it has a special handling path in metadata, which also depends on query predicates\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_name FROM information_schema.columns WHERE table_schema = 'information_schema' AND table_name != 'roles'\"))\n+                .containsOnly(allInformationSchemaTablesExceptRolesAsRows);\n+        Assertions.assertThat(onPresto().executeQuery(\"SELECT table_schema, table_name, column_name FROM information_schema.columns\").rows().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d69ec306471822b742070b86f2fe796d460610"}, "originalPosition": 205}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 853, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}