{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzODkwMjk4", "number": 6016, "title": "Make sure redirected table column types match source column types", "bodyText": "", "createdAt": "2020-11-19T11:50:28Z", "url": "https://github.com/trinodb/trino/pull/6016", "merged": true, "mergeCommit": {"oid": "146cabae49f2b568e13843ef8105996947f3f317"}, "closed": true, "closedAt": "2020-11-19T16:35:51Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeBR5agH2gAyNTIzODkwMjk4OmY1YmY5NzkxODBhZGNjNDE2MGExOWM3NTU4NDhmZjYzNTY0Y2E3MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeFa-QgBqjQwMTY3ODM0MzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f5bf979180adcc4160a19c755848ff63564ca714", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/f5bf979180adcc4160a19c755848ff63564ca714", "committedDate": "2020-11-19T11:44:25Z", "message": "Fix formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0Mzg3ODQy", "url": "https://github.com/trinodb/trino/pull/6016#pullrequestreview-534387842", "createdAt": "2020-11-19T12:29:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyOToxN1rOH2bi4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyOToyOVrOH2bjbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjQ1MQ==", "bodyText": "Would here be a need in the future to support coercions? the type sets supported by connectors are not the same", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526836451", "createdAt": "2020-11-19T12:29:17Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/ApplyTableScanRedirection.java", "diffHunk": "@@ -97,6 +98,16 @@ public Result apply(TableScanNode scanNode, Captures captures, Context context)\n                     if (destinationColumnHandle == null) {\n                         throw new PrestoException(COLUMN_NOT_FOUND, format(\"Did not find handle for column %s in destination table %s\", destinationColumn, destinationTable));\n                     }\n+\n+                    // validate that redirected types match source types\n+                    Type sourceType = context.getSymbolAllocator().getTypes().get(entry.getKey());\n+                    Type redirectedType = metadata.getColumnMetadata(context.getSession(), destinationTableHandle.get(), destinationColumnHandle).getType();\n+                    if (!sourceType.equals(redirectedType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjU4OQ==", "bodyText": "incluide source column handle as well?", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526836589", "createdAt": "2020-11-19T12:29:29Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/ApplyTableScanRedirection.java", "diffHunk": "@@ -97,6 +98,16 @@ public Result apply(TableScanNode scanNode, Captures captures, Context context)\n                     if (destinationColumnHandle == null) {\n                         throw new PrestoException(COLUMN_NOT_FOUND, format(\"Did not find handle for column %s in destination table %s\", destinationColumn, destinationTable));\n                     }\n+\n+                    // validate that redirected types match source types\n+                    Type sourceType = context.getSymbolAllocator().getTypes().get(entry.getKey());\n+                    Type redirectedType = metadata.getColumnMetadata(context.getSession(), destinationTableHandle.get(), destinationColumnHandle).getType();\n+                    if (!sourceType.equals(redirectedType)) {\n+                        throw new PrestoException(\n+                                TYPE_MISMATCH,\n+                                format(\"Redirected type (%s) for column %s does not match source type (%s)\", redirectedType, destinationColumn, sourceType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NTMwNzg1", "url": "https://github.com/trinodb/trino/pull/6016#pullrequestreview-534530785", "createdAt": "2020-11-19T14:57:42Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDo1Nzo0MlrOH2imSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDo1ODoyMlrOH2iojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1MjAxMA==", "bodyText": "Rule tested is not really leveraged much here, because we're not testing the rule application, but rather a failure internally.\nMaybe it would make sense to add .fails(Consumer<Exception> exceptionAssertion) method to Rule tester, next to matches()?\nAltenratively, maybe you do not need rule tester at all, you can just run a query on the query runner after all.", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526952010", "createdAt": "2020-11-19T14:57:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestApplyTableScanRedirection.java", "diffHunk": "@@ -116,6 +119,29 @@ public void doesNotFireIfNoTableScan()\n         }\n     }\n \n+    @Test(expectedExceptions = PrestoException.class, expectedExceptionsMessageRegExp = \"Redirected type \\\\(bigint\\\\) for column destination_col_c does not match source type \\\\(varchar\\\\)\")\n+    public void testMismatchedTypes()\n+    {\n+        try (RuleTester ruleTester = defaultRuleTester()) {\n+            // make the mock connector return a table scan on different table\n+            ApplyTableScanRedirect applyTableScanRedirect = getMockApplyRedirect(\n+                    ImmutableMap.of(sourceColumnHandleA, destinationColumnNameC));\n+            MockConnectorFactory mockFactory = createMockFactory(Optional.of(applyTableScanRedirect));\n+\n+            ruleTester.getQueryRunner().createCatalog(MOCK_CATALOG, mockFactory, ImmutableMap.of());\n+\n+            ruleTester.assertThat(new ApplyTableScanRedirection(ruleTester.getMetadata()))\n+                    .on(p -> {\n+                        Symbol column = p.symbol(sourceColumnNameA, VARCHAR);\n+                        return p.tableScan(TEST_TABLE_HANDLE,\n+                                ImmutableList.of(column),\n+                                ImmutableMap.of(column, sourceColumnHandleA));\n+                    })\n+                    .withSession(MOCK_SESSION)\n+                    .matches(anyTree());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1MjU5MQ==", "bodyText": "Please also mention source and target table. If a query uses multiple tables, knowing which one caused problems may be helpful.", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526952591", "createdAt": "2020-11-19T14:58:22Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/ApplyTableScanRedirection.java", "diffHunk": "@@ -97,6 +98,16 @@ public Result apply(TableScanNode scanNode, Captures captures, Context context)\n                     if (destinationColumnHandle == null) {\n                         throw new PrestoException(COLUMN_NOT_FOUND, format(\"Did not find handle for column %s in destination table %s\", destinationColumn, destinationTable));\n                     }\n+\n+                    // validate that redirected types match source types\n+                    Type sourceType = context.getSymbolAllocator().getTypes().get(entry.getKey());\n+                    Type redirectedType = metadata.getColumnMetadata(context.getSession(), destinationTableHandle.get(), destinationColumnHandle).getType();\n+                    if (!sourceType.equals(redirectedType)) {\n+                        throw new PrestoException(\n+                                TYPE_MISMATCH,\n+                                format(\"Redirected type (%s) for column %s does not match source type (%s)\", redirectedType, destinationColumn, sourceType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjU4OQ=="}, "originalCommit": null, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd9b2849e50788f5e3377b0f0c178b58205f93f", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/acd9b2849e50788f5e3377b0f0c178b58205f93f", "committedDate": "2020-11-19T16:33:46Z", "message": "Make sure redirected table column types match source column types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "acd9b2849e50788f5e3377b0f0c178b58205f93f", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/acd9b2849e50788f5e3377b0f0c178b58205f93f", "committedDate": "2020-11-19T16:33:46Z", "message": "Make sure redirected table column types match source column types"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2653, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}