{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NjYyNTgx", "number": 4998, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjoyNjowOFrOEdTB_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoyNDozMFrOEirkvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTU1OTY2OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjoyNjowOFrOHIYChw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0MDowMlrOHIYj-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU0NDUxOQ==", "bodyText": "I don't think we should run the tests in old versions of the project. The \"source of truth\" for tests should be what's in trunk right now. The problems with running old test code are:\n\nIf there are bug in the old tests, there's no way to \"fix\" them -- we can't go back in time and patch an old presto test jar\nIt relies on treating the structure of the tests as an API (it's not!). If we refactor the test code in master, the old tests may stop running at all.\n\nIf we want more test coverage, or tests targeted to a specific version, we should augment the current test library and enable tests conditionally based on the version being targeted.\n(I'm assuming this is what this does based on similar structure for the other jdbc driver tests, which I think we should change)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r478544519", "createdAt": "2020-08-27T16:26:08Z", "author": {"login": "martint"}, "path": "presto-test-jdbc-compatibility-old-server/pom.xml", "diffHunk": "@@ -0,0 +1,109 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.prestosql</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>341-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>presto-test-jdbc-compatibility-old-server</artifactId>\n+    <description>Presto - Tests whether current Presto JDBC clients are compatible with old Presto servers</description>\n+\n+    <properties>\n+        <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+        <dep.presto-jdbc-under-test>341-SNAPSHOT</dep.presto-jdbc-under-test>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.prestosql</groupId>\n+            <artifactId>presto-jdbc</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.prestosql</groupId>\n+            <artifactId>presto-jdbc</artifactId>\n+            <scope>test</scope>\n+            <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1MzA4MQ==", "bodyText": "I don't think we should run the tests in old versions of the project. The \"source of truth\" for tests should be what's in trunk right now\n\nThis code does not run old tests. The version of tests which is run is the one living on the trunk. What this PR does is running those tests against older versions of Presto servers run in docker.\nI even had to disable a few test assertions, for queries which did not work before parametric timestamp was introduced (see: f3449b3)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r478553081", "createdAt": "2020-08-27T16:40:02Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/pom.xml", "diffHunk": "@@ -0,0 +1,109 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.prestosql</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>341-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>presto-test-jdbc-compatibility-old-server</artifactId>\n+    <description>Presto - Tests whether current Presto JDBC clients are compatible with old Presto servers</description>\n+\n+    <properties>\n+        <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+        <dep.presto-jdbc-under-test>341-SNAPSHOT</dep.presto-jdbc-under-test>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.prestosql</groupId>\n+            <artifactId>presto-jdbc</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.prestosql</groupId>\n+            <artifactId>presto-jdbc</artifactId>\n+            <scope>test</scope>\n+            <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU0NDUxOQ=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTc5NTczOnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestBlah.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozMDo0MFrOHIaWPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozOTo1NVrOHIgdag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4MjMzNA==", "bodyText": "What's the purpose of this? :)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r478582334", "createdAt": "2020-08-27T17:30:40Z", "author": {"login": "wendigo"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestBlah.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import org.testng.annotations.Test;\n+\n+public class TestBlah", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MjQ3NA==", "bodyText": "I debugged something - removing.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r478682474", "createdAt": "2020-08-27T20:39:55Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestBlah.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import org.testng.annotations.Test;\n+\n+public class TestBlah", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4MjMzNA=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTU3MDE2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo0MjozMVrOHN9_Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNTozNjozOVrOHODUyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTE5MA==", "bodyText": "Is it respected when o base class?", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484409190", "createdAt": "2020-09-07T12:42:31Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -0,0 +1,544 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static java.util.concurrent.TimeUnit.HOURS;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test(singleThreaded = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0MTg0Nw==", "bodyText": "It is not respect at all for some reason I do not understand. This code has it both on super class and on leaf class (TestJdbcResultSetCompatibility). Yet still the test were executed in parallel. I needed to add explicit sychronisation using semaphore.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484441847", "createdAt": "2020-09-07T13:47:47Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -0,0 +1,544 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static java.util.concurrent.TimeUnit.HOURS;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test(singleThreaded = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTE5MA=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ5NDkwOQ==", "bodyText": "I managed to force the child class to be singlethreaded by declaring a method besides @Factory\nApparently didn't even have to be a @Test method.\nSee cbeust/testng#2361\nand  findepi/urandom-bits@f62d49a", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484494909", "createdAt": "2020-09-07T15:32:35Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -0,0 +1,544 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static java.util.concurrent.TimeUnit.HOURS;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test(singleThreaded = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTE5MA=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ5NjU4Ng==", "bodyText": "I verified my workaround works for @Factory tests the same.\nYou need just one method that is not @Before or @After. Can be @Test or can be unannotated.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484496586", "createdAt": "2020-09-07T15:36:39Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -0,0 +1,544 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static java.util.concurrent.TimeUnit.HOURS;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test(singleThreaded = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTE5MA=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTU3NDc3OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo0Mzo1OVrOHN-CMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDo0NToyMFrOHOB7iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTkwNA==", "bodyText": "io.airlift.testing.Closeables#closeAll(statement, connection);\nstatement = null;\nconnection = null;", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484409904", "createdAt": "2020-09-07T12:43:59Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -63,8 +63,14 @@ public void setup()\n     public void teardown()\n             throws Exception\n     {\n-        statement.close();\n-        connection.close();\n+        if (statement != null) {\n+            statement.close();\n+            statement = null;\n+        }\n+        if (connection != null) {\n+            connection.close();\n+            connection = null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0MzgyMA==", "bodyText": "Does not work. Autoclosable :(", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484443820", "createdAt": "2020-09-07T13:51:17Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -63,8 +63,14 @@ public void setup()\n     public void teardown()\n             throws Exception\n     {\n-        statement.close();\n-        connection.close();\n+        if (statement != null) {\n+            statement.close();\n+            statement = null;\n+        }\n+        if (connection != null) {\n+            connection.close();\n+            connection = null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTkwNA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3MzczOQ==", "bodyText": "airlift/airlift#868", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484473739", "createdAt": "2020-09-07T14:45:20Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -63,8 +63,14 @@ public void setup()\n     public void teardown()\n             throws Exception\n     {\n-        statement.close();\n-        connection.close();\n+        if (statement != null) {\n+            statement.close();\n+            statement = null;\n+        }\n+        if (connection != null) {\n+            connection.close();\n+            connection = null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTkwNA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTU5NjY4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1MDoyM1rOHN-PXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1MDoyM1rOHN-PXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxMzI3OQ==", "bodyText": "prestoVersion -> prestoServerVersion\n(this could mean driver version as well in the context of TestJdbcResultSetCompatibility)\nversion should be represented as a String", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484413279", "createdAt": "2020-09-07T12:50:23Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -45,8 +47,12 @@\n @Test(singleThreaded = true)\n public abstract class BaseTestJdbcResultSet\n {\n+    private static final Logger log = Logger.get(BaseTestJdbcResultSet.class);\n+    private static final int RECENT_SERVER_VERSION = 10000;\n+\n     private Connection connection;\n     private Statement statement;\n+    private OptionalInt prestoVersion = OptionalInt.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTYwMDc1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1MTozM1rOHN-R1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNTo0MDoyOVrOHODaog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxMzkwOA==", "bodyText": "private Supplier<...> prestoVersion = Suppliers.memoize( ... \n\nnicer to write (except you need explicit handling of SQLException, i know)\nyou no longer have null-disguised-as-optional", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484413908", "createdAt": "2020-09-07T12:51:33Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -57,6 +63,27 @@ public void setup()\n     {\n         connection = createConnection();\n         statement = connection.createStatement();\n+        synchronized (this) {\n+            determinePrestoVersion();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0NTg0Mg==", "bodyText": "The optional is not for sake of setting it up. ONly because the version is not available always. E.g if you run test from intellij you will not get version information.\nI can make it supplier. But it will still need to either return Optional or \"unknown\"\nNever mind - I was thinking of different piece of code when we are determining code version based on package metadata. Here we should be good, yet still the version can be not parsable.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484445842", "createdAt": "2020-09-07T13:55:04Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -57,6 +63,27 @@ public void setup()\n     {\n         connection = createConnection();\n         statement = connection.createStatement();\n+        synchronized (this) {\n+            determinePrestoVersion();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxMzkwOA=="}, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ5ODA4Mg==", "bodyText": "yet still the version can be not parsable.\n\ni think we should fail loud in such case -- #4998 (comment)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484498082", "createdAt": "2020-09-07T15:40:29Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -57,6 +63,27 @@ public void setup()\n     {\n         connection = createConnection();\n         statement = connection.createStatement();\n+        synchronized (this) {\n+            determinePrestoVersion();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxMzkwOA=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTYwMzc1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1MjoyOVrOHN-TsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1MjoyOVrOHN-TsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNDM4NA==", "bodyText": "IMO conditionality should be done outside of determinePrestoVersion", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484414384", "createdAt": "2020-09-07T12:52:29Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -57,6 +63,27 @@ public void setup()\n     {\n         connection = createConnection();\n         statement = connection.createStatement();\n+        synchronized (this) {\n+            determinePrestoVersion();\n+        }\n+    }\n+\n+    private void determinePrestoVersion()\n+            throws SQLException\n+    {\n+        if (!prestoVersion.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTYwODQ4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1Mzo1OFrOHN-WcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1Mzo1OFrOHN-WcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNTA4OA==", "bodyText": "If you change to String you will have to change this.\nIf you do not, I still would use MAX_VALUE or a dedicated special value", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484415088", "createdAt": "2020-09-07T12:53:58Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -45,8 +47,12 @@\n @Test(singleThreaded = true)\n public abstract class BaseTestJdbcResultSet\n {\n+    private static final Logger log = Logger.get(BaseTestJdbcResultSet.class);\n+    private static final int RECENT_SERVER_VERSION = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTYxODgxOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1Njo1NVrOHN-ckg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzo0NToxOFrOHOQydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNjY1OA==", "bodyText": "because it's on the abstract class?\nthis is wrong -- when testng gave us 2 threads for exec, we should use those threads\nif we cannot, we should ask for one thread only\n\nyou can add verification in the base class it's used single threaded (atomic integer counting \"current tests\" would be enough\nannotate singleThreaded=true the subclass(es)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484416658", "createdAt": "2020-09-07T12:56:55Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -54,13 +55,17 @@\n     private Statement statement;\n     private OptionalInt prestoVersion = OptionalInt.empty();\n \n+    // TODO for some reason TestNG does not respect \"singleThreaded = true\"; simulating using mutex\n+    private final Semaphore mutex = new Semaphore(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NjgwNA==", "bodyText": "It is annotaded. Yet testng ingores annotation.\nMaybe because we have @Factory IDK.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484456804", "createdAt": "2020-09-07T14:12:59Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -54,13 +55,17 @@\n     private Statement statement;\n     private OptionalInt prestoVersion = OptionalInt.empty();\n \n+    // TODO for some reason TestNG does not respect \"singleThreaded = true\"; simulating using mutex\n+    private final Semaphore mutex = new Semaphore(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNjY1OA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxOTQ0Mw==", "bodyText": "@findepi pointed me to cbeust/testng#144", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484519443", "createdAt": "2020-09-07T16:44:56Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -54,13 +55,17 @@\n     private Statement statement;\n     private OptionalInt prestoVersion = OptionalInt.empty();\n \n+    // TODO for some reason TestNG does not respect \"singleThreaded = true\"; simulating using mutex\n+    private final Semaphore mutex = new Semaphore(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNjY1OA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNzE3NA==", "bodyText": "dropped", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484717174", "createdAt": "2020-09-08T07:45:18Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -54,13 +55,17 @@\n     private Statement statement;\n     private OptionalInt prestoVersion = OptionalInt.empty();\n \n+    // TODO for some reason TestNG does not respect \"singleThreaded = true\"; simulating using mutex\n+    private final Semaphore mutex = new Semaphore(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNjY1OA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTYyMzYxOnYy", "diffSide": "RIGHT", "path": ".github/workflows/ci.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1ODoxN1rOHN-fUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxNzo1MVrOHOBD6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzM2MA==", "bodyText": "You do not need to exclude presto-test-jdbc-compatibility-old-server here.\n(the reason presto-test-jdbc-compatibility-old-driver is excluded is because it changes JDBC version via pom property overrides)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484417360", "createdAt": "2020-09-07T12:58:17Z", "author": {"login": "findepi"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -74,15 +74,19 @@ jobs:\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0 # checkout tags so version in Manifest is set properly\n       - uses: actions/setup-java@v1\n         with:\n           java-version: 11\n       - name: Maven Install\n         run: |\n           export MAVEN_OPTS=\"${MAVEN_INSTALL_OPTS}\"\n-          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-docs,!presto-server,!presto-server-rpm'\n-      - name: Test JDBC clients\n+          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-test-jdbc-compatibility-old-server,!presto-docs,!presto-server,!presto-server-rpm'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1OTQ5OA==", "bodyText": "Oh I see. I assumed we are just saving cycles as we are compiling it below. Does not make much sense :)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484459498", "createdAt": "2020-09-07T14:17:51Z", "author": {"login": "losipiuk"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -74,15 +74,19 @@ jobs:\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0 # checkout tags so version in Manifest is set properly\n       - uses: actions/setup-java@v1\n         with:\n           java-version: 11\n       - name: Maven Install\n         run: |\n           export MAVEN_OPTS=\"${MAVEN_INSTALL_OPTS}\"\n-          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-docs,!presto-server,!presto-server-rpm'\n-      - name: Test JDBC clients\n+          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-test-jdbc-compatibility-old-server,!presto-docs,!presto-server,!presto-server-rpm'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzM2MA=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTY4MzkxOnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzoxNzo0NlrOHN_EWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNjo1MDozMlrOHOE0Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNjg0MA==", "bodyText": "We now have 2 TestJdbcResultSetCompatibility classes:\nBaseTestJdbcResultSet (io.prestosql.jdbc)\n- TestJdbcResultSetCompatibility (io.prestosql)\n- TestJdbcResultSet (io.prestosql.jdbc)\n   - TestJdbcResultSetCompatibility (io.prestosql)\n\n\nwhy is the inheritance hierarchy uneven? Maybe it could be flat now? (disregard if it cannot)\n2.\u00a0the TestJdbcResultSetCompatibility classes could be renamed to better indicate their specifics, without need to lookup module name (which is long and easy to be stripped out of view)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484426840", "createdAt": "2020-09-07T13:17:46Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyMTAzMQ==", "bodyText": "done\n\n\ncannot be done without substantial changes to old-driver version of TestJdbcResultSetCompatibility. It internally mutates private TestingPrestoServer server field declared in TestJdbcResultSet.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484521031", "createdAt": "2020-09-07T16:50:32Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNjg0MA=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTY4NzExOnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzoxODo1NVrOHN_GeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDoxMjoxNVrOHOHGqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNzM4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Optional<String> testedPrestoVersion;\n          \n          \n            \n                /**\n          \n          \n            \n                 * Test version. Empty means current (unreleased) version\n          \n          \n            \n                 */\n          \n          \n            \n                private final Optional<String> testedPrestoVersion;", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484427384", "createdAt": "2020-09-07T13:18:55Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyMjIyOQ==", "bodyText": "It means we could not obtain presto version. And therefore tests defined here will fail.\nI will update comment to reflect to that.\n(I cannot fail directly in testedPrestoVersions data provider as it kills whole testNG)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484522229", "createdAt": "2020-09-07T16:55:11Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNzM4NA=="}, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1ODUwNQ==", "bodyText": "(I cannot fail directly in testedPrestoVersions data provider as it kills whole testNG)\n\nif this results in surefire's failure, that's fine to me", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484558505", "createdAt": "2020-09-07T20:12:15Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNzM4NA=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTY4ODYzOnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzoxOToyN1rOHN_Hbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0NToyMVrOHOFkTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNzYzMQ==", "bodyText": "Current version is tested by io.prestosql.jdbc.TestJdbcResultSet.\nI understand you need this to run the test from intellij (to test the test),\nso please add an appropriate comment. Otherwise it looks like \"this test\npast versions... or it doesn't\"\nAlso, how do we actually verify the test works?\nWould it work if we allowed currentVersionString == null only when some\nadditional sys property is set? You would set it manually when running from IDE\nand CI or when running from maven would use the JDBC jar and fall into\ncurrentVersionString != null category.\nAlso, maybe we can simplify this by baking in the current version via resources?\nLike here\nhttps://github.com/prestosql/presto/blob/cd061b3410c752253d64f096176bf226a3dea11a/presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/Launcher.java#L170-L172", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484427631", "createdAt": "2020-09-07T13:19:27Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNDM5NQ==", "bodyText": "I need currentVersion to determine the list of older versions to be tested.\nIf current version cannot be determined there will be only single incarnation of test class with testedPrestoVersion set to empty().\nThen initialization of test class will fail via:\nif (testedPrestoVersion.isEmpty()) {\n            throw new AssertionError(\"Could not determine current Presto version\");\n        }\n\nThis is needed so we notice on CI if for some reason we cannot determine a list of versions to be tested. We do not a green run there.\nAs for testing in IntelliJ it is not supported right now. Do we care very much? I can do do similar mechanism we have in product-tests-launcher but I am not sure if that is worth it. Maybe it would be enough to allow overriding currentPrestoVersion via environment variable and explain how to do that in massage of assertion error we throw when version cannot be determined?", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484524395", "createdAt": "2020-09-07T17:03:58Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNzYzMQ=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMzMyNQ==", "bodyText": "As for testing in IntelliJ it is not supported right now. Do we care very much?\n\nYes, otherwise, debugging and fixing breakages becomes much harder.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484533325", "createdAt": "2020-09-07T17:45:21Z", "author": {"login": "martint"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNzYzMQ=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTcxOTUxOnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzoyODo0OFrOHN_Zsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMToxMzoyOFrOHOHrZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjMwNw==", "bodyText": "Let's be explicit\nmatcher = Pattern.compile(\"\\\\d+(-SNAPSHOT)?\").matcher(currentVersionString);\ncheckState(matcher.matches());", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484432307", "createdAt": "2020-09-07T13:28:48Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NzkxMA==", "bodyText": "Actually I need to use\nPattern.compile(\"(\\\\d+)(?:-\\\\d+-[a-z0-9]+)?\")\nas the version used in package metadata is output of git describe", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484567910", "createdAt": "2020-09-07T21:13:28Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjMwNw=="}, "originalCommit": null, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTcyNDg1OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMDowNlrOHN_cvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMDowNlrOHN_cvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzA4Nw==", "bodyText": "Simplify flow\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        int testedVersion = currentVersion - 1;\n          \n          \n            \n                        for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n          \n          \n            \n                            testedPrestoVersions.add(String.valueOf(testedVersion));\n          \n          \n            \n                            testedVersion -= TESTED_VERSIONS_GRANULARITY;\n          \n          \n            \n                        }\n          \n          \n            \n                        int lastReleasedVersion = currentVersion - 1;\n          \n          \n            \n                        for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n          \n          \n            \n                            testedPrestoVersions.add(String.valueOf(lastReleasedVersion - i * TESTED_VERSIONS_GRANULARITY));\n          \n          \n            \n                        }", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484433087", "createdAt": "2020-09-07T13:30:06Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTcyODQ2OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMToxNFrOHN_e1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMToxNFrOHN_e1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(version -> new Object[] {Optional.of(version)})\n          \n          \n            \n                                .toArray(Object[][]::new);\n          \n          \n            \n                                .collect(io.prestosql.testing.TestngUtils#toDataProvider)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484433622", "createdAt": "2020-09-07T13:31:14Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTcyOTQzOnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMTozMVrOHN_fXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOToyMjoyNlrOHQWFoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzc1OA==", "bodyText": "Let it fly!", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484433758", "createdAt": "2020-09-07T13:31:31Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNTY4NQ==", "bodyText": "I can't. AFAIK It kills VM. We do not want that.\nHere is example of mvn test execution with exception thrown from factory method data provider:\n[ERROR] Please refer to /Users/lukaszos/workspace/repos/prestosql/presto/presto-test-jdbc-compatibility-old-server/target/surefire-reports for the individual test results.\n[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.\n[ERROR] There was an error in the forked process\n[ERROR] java.lang.RuntimeException: XXXXXXXX\n[ERROR] org.apache.maven.surefire.booter.SurefireBooterForkException: There was an error in the forked process\n[ERROR] java.lang.RuntimeException: XXXXXXXX\n[ERROR]         at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:658)\n[ERROR]         at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:533)\n[ERROR]         at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:278)\n[ERROR]         at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:244)\n[ERROR]         at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1194)\n[ERROR]         at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:1022)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484525685", "createdAt": "2020-09-07T17:09:29Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzc1OA=="}, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNjM3Mw==", "bodyText": "Did the stacktrace get obliterated?", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r485606373", "createdAt": "2020-09-09T13:22:23Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzc1OA=="}, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzUzNw==", "bodyText": "I am pretty sure it is. Otherwise I would not be that concerned.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r485917537", "createdAt": "2020-09-09T20:57:23Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzc1OA=="}, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMjI1MA==", "bodyText": "I checked. It is obiterated. The exception message is all that remains.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r485922250", "createdAt": "2020-09-09T21:06:52Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzc1OA=="}, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3OTk0MQ==", "bodyText": "Add a comment. Otherwise System.err.println( looks like a debug / leftover.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r486879941", "createdAt": "2020-09-11T09:01:16Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzc1OA=="}, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwMDE1NA==", "bodyText": "There is a comment here already at newest version :) I think you requested it previosly.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r486900154", "createdAt": "2020-09-11T09:21:31Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzc1OA=="}, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwMTE1Mw==", "bodyText": "Damn - just noticed I did not push it....", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r486901153", "createdAt": "2020-09-11T09:22:26Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMzc1OA=="}, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTczMjU1OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMjoyOVrOHN_hSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMjoyOVrOHN_hSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNDI0OA==", "bodyText": "e.printStackTrace(System.err)\n\nor\ncom.google.common.base.Throwables#getStackTraceAsString", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484434248", "createdAt": "2020-09-07T13:32:29Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));\n+            return new Object[][] {\n+                    {Optional.empty()}\n+            };\n+        }\n+    }\n+\n+    private static String getStackTrace(Throwable e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTczNDM0OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMzowNFrOHN_iag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDo1Mzo1M1rOHOHf4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNDUzOA==", "bodyText": "Why?", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484434538", "createdAt": "2020-09-07T13:33:04Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));\n+            return new Object[][] {\n+                    {Optional.empty()}\n+            };\n+        }\n+    }\n+\n+    private static String getStackTrace(Throwable e)\n+    {\n+        StringWriter stringWriter = new StringWriter();\n+        PrintWriter printWriter = new PrintWriter(stringWriter);\n+        e.printStackTrace(printWriter);\n+        return stringWriter.toString();\n+    }\n+\n+    @BeforeClass\n+    public void setupPrestoContainer()\n+    {\n+        if (testedPrestoVersion.isEmpty()) {\n+            throw new AssertionError(\"Could not determine current Presto version\");\n+        }\n+        Logging.initialize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NDk2Mg==", "bodyText": "I do not recall adding it explicitly but we do data in a lot of tests. I can drop. We probably do not need logging in this VM as presto server is run from docker.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484564962", "createdAt": "2020-09-07T20:53:53Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));\n+            return new Object[][] {\n+                    {Optional.empty()}\n+            };\n+        }\n+    }\n+\n+    private static String getStackTrace(Throwable e)\n+    {\n+        StringWriter stringWriter = new StringWriter();\n+        PrintWriter printWriter = new PrintWriter(stringWriter);\n+        e.printStackTrace(printWriter);\n+        return stringWriter.toString();\n+    }\n+\n+    @BeforeClass\n+    public void setupPrestoContainer()\n+    {\n+        if (testedPrestoVersion.isEmpty()) {\n+            throw new AssertionError(\"Could not determine current Presto version\");\n+        }\n+        Logging.initialize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNDUzOA=="}, "originalCommit": null, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTczNzAyOnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMzo1NlrOHN_kAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozMzo1NlrOHN_kAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNDk0Nw==", "bodyText": "Is it used by Testng? how?\n(please add a comment; we do not use @Factory tests elsewhere so it's not a common knowledge currently)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484434947", "createdAt": "2020-09-07T13:33:56Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibility.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.log.Logging;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibility\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibility(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = PrestoDriver.class.getPackage().getImplementationVersion();\n+            if (currentVersionString == null) {\n+                return new Object[][] {\n+                        {Optional.empty()}\n+                };\n+            }\n+\n+            int currentVersion = Integer.parseInt(Splitter.on(\"-\").omitEmptyStrings().trimResults().splitToList(currentVersionString).get(0));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int testedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(testedVersion));\n+                testedVersion -= TESTED_VERSIONS_GRANULARITY;\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(version -> new Object[] {Optional.of(version)})\n+                    .toArray(Object[][]::new);\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTrace(e));\n+            return new Object[][] {\n+                    {Optional.empty()}\n+            };\n+        }\n+    }\n+\n+    private static String getStackTrace(Throwable e)\n+    {\n+        StringWriter stringWriter = new StringWriter();\n+        PrintWriter printWriter = new PrintWriter(stringWriter);\n+        e.printStackTrace(printWriter);\n+        return stringWriter.toString();\n+    }\n+\n+    @BeforeClass\n+    public void setupPrestoContainer()\n+    {\n+        if (testedPrestoVersion.isEmpty()) {\n+            throw new AssertionError(\"Could not determine current Presto version\");\n+        }\n+        Logging.initialize();\n+\n+        prestoContainer = new PrestoContainer<>(\"prestosql/presto:\" + testedPrestoVersion.get());\n+        prestoContainer.start();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void tearDownPrestoContainer()\n+    {\n+        if (prestoContainer != null) {\n+            prestoContainer.stop();\n+            prestoContainer = null;\n+        }\n+    }\n+\n+    @Override\n+    protected Connection createConnection()\n+            throws Exception\n+    {\n+        return DriverManager.getConnection(prestoContainer.getJdbcUrl(), \"test\", null);\n+    }\n+\n+    @Override\n+    public String toString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTc0MDQ2OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/testng.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozNDo1NFrOHN_l-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMTowNDozMFrOHOHmKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNTQ1MA==", "bodyText": "I remember you told me it  is needed but\n\ni dont remember why, this needs to be doc'd\ni still would try to remove it (i can try if you want me to)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484435450", "createdAt": "2020-09-07T13:34:54Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/testng.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n+<!--\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<suite name=\"JdbcCompatibilytOldServer\" verbose=\"1\" >\n+    <test name=\"all\" group-by-instances=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NTk3OA==", "bodyText": "Without group-by-instances=\"true\" tests are grouped by test method. Like that:\ninstance_a.testA()\ninstance_b.testA()\ninstance_c.testA()\ninstance_a.testB()\ninstance_b.testB()\ninstancd_c.testB()\n\nThis is very resource intensive as each initialized instance is separate running docker instance.\nWith this flag only one docker instance is running as exutions are grouped by instance.\nI will see if hack to enforce single threaded execution may solves this one too.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484565978", "createdAt": "2020-09-07T21:00:31Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/testng.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n+<!--\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<suite name=\"JdbcCompatibilytOldServer\" verbose=\"1\" >\n+    <test name=\"all\" group-by-instances=\"true\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNTQ1MA=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NjU2OQ==", "bodyText": "This is very resource intensive as each initialized instance is separate running docker instance.\n\nAlas! ... please document that", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484566569", "createdAt": "2020-09-07T21:04:30Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/testng.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n+<!--\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<suite name=\"JdbcCompatibilytOldServer\" verbose=\"1\" >\n+    <test name=\"all\" group-by-instances=\"true\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNTQ1MA=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTc0NTM3OnYy", "diffSide": "RIGHT", "path": ".github/workflows/ci.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozNjoxOVrOHN_o8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMTowNDo1NFrOHOHmgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNjIxMQ==", "bodyText": "Since this is a \"normally testable module\", it doesn't need to be included here (a special case).\nYou can add this to test job (regular module tests).", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484436211", "createdAt": "2020-09-07T13:36:19Z", "author": {"login": "findepi"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -74,15 +74,19 @@ jobs:\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0 # checkout tags so version in Manifest is set properly\n       - uses: actions/setup-java@v1\n         with:\n           java-version: 11\n       - name: Maven Install\n         run: |\n           export MAVEN_OPTS=\"${MAVEN_INSTALL_OPTS}\"\n-          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-docs,!presto-server,!presto-server-rpm'\n-      - name: Test JDBC clients\n+          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-test-jdbc-compatibility-old-server,!presto-docs,!presto-server,!presto-server-rpm'\n+      - name: Test old JDBC vs current server\n         run: presto-test-jdbc-compatibility-old-driver/bin/run_tests.sh\n+      - name: Test current JDBC vs old server\n+        run: ./mvnw test -B -Dair.check.skip-all -pl presto-test-jdbc-compatibility-old-server", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NjI2MA==", "bodyText": "It feels natural to me to keep those two together. Even if technically it is possible to run it somewhere else. I would keep it.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484566260", "createdAt": "2020-09-07T21:02:16Z", "author": {"login": "losipiuk"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -74,15 +74,19 @@ jobs:\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0 # checkout tags so version in Manifest is set properly\n       - uses: actions/setup-java@v1\n         with:\n           java-version: 11\n       - name: Maven Install\n         run: |\n           export MAVEN_OPTS=\"${MAVEN_INSTALL_OPTS}\"\n-          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-docs,!presto-server,!presto-server-rpm'\n-      - name: Test JDBC clients\n+          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-test-jdbc-compatibility-old-server,!presto-docs,!presto-server,!presto-server-rpm'\n+      - name: Test old JDBC vs current server\n         run: presto-test-jdbc-compatibility-old-driver/bin/run_tests.sh\n+      - name: Test current JDBC vs old server\n+        run: ./mvnw test -B -Dair.check.skip-all -pl presto-test-jdbc-compatibility-old-server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNjIxMQ=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NjY1Ng==", "bodyText": "OK", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484566656", "createdAt": "2020-09-07T21:04:54Z", "author": {"login": "findepi"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -74,15 +74,19 @@ jobs:\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0 # checkout tags so version in Manifest is set properly\n       - uses: actions/setup-java@v1\n         with:\n           java-version: 11\n       - name: Maven Install\n         run: |\n           export MAVEN_OPTS=\"${MAVEN_INSTALL_OPTS}\"\n-          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-docs,!presto-server,!presto-server-rpm'\n-      - name: Test JDBC clients\n+          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!presto-test-jdbc-compatibility-old-driver,!presto-test-jdbc-compatibility-old-server,!presto-docs,!presto-server,!presto-server-rpm'\n+      - name: Test old JDBC vs current server\n         run: presto-test-jdbc-compatibility-old-driver/bin/run_tests.sh\n+      - name: Test current JDBC vs old server\n+        run: ./mvnw test -B -Dair.check.skip-all -pl presto-test-jdbc-compatibility-old-server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNjIxMQ=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTc0NjUwOnYy", "diffSide": "RIGHT", "path": ".github/workflows/ci.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozNjo0MVrOHN_pmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozNjo0MVrOHN_pmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNjM3Nw==", "bodyText": "move this to appropriate place if you move the new module to test job", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484436377", "createdAt": "2020-09-07T13:36:41Z", "author": {"login": "findepi"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -191,7 +195,8 @@ jobs:\n             !presto-oracle,\n             !presto-kudu,\n             !presto-phoenix,!presto-iceberg,!presto-druid,\n-            !presto-docs,!presto-server,!presto-server-rpm'\n+            !presto-docs,!presto-server,!presto-server-rpm,\n+            !presto-test-jdbc-compatibility-old-server'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjE5Mjk2OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo1OTo1NFrOHOVzhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToyMToyNFrOHOYZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc5OTM2NQ==", "bodyText": "Add comment why we do not throw here.\n(i think i'd still prefer to throw to keep the code simpler, unless testng or surefire swallows this)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484799365", "createdAt": "2020-09-08T09:59:54Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import io.prestosql.testing.TestngUtils;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibilityOldServer\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    /**\n+     * Empty means that we could not obtain current Presto version and tests defined here will be marked as failed.\n+     */\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = requireNonNull(PrestoDriver.class.getPackage().getImplementationVersion());\n+            // this should match git-describe output which is used as version stored in metadata\n+            Matcher matcher = Pattern.compile(\"(\\\\d+)(?:-\\\\d+-[a-z0-9]+)?\").matcher(currentVersionString);\n+            checkState(matcher.matches());\n+            int currentVersion = Integer.parseInt(matcher.group(1));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int lastReleasedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(lastReleasedVersion - TESTED_VERSIONS_GRANULARITY * i));\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(Optional::of)\n+                    .collect(TestngUtils.toDataProvider());\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTraceAsString(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MTczNw==", "bodyText": "I will. Yet throwing is IMO not an option.\nSee #4998 (comment)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484841737", "createdAt": "2020-09-08T11:21:24Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import io.prestosql.testing.TestngUtils;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibilityOldServer\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    /**\n+     * Empty means that we could not obtain current Presto version and tests defined here will be marked as failed.\n+     */\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = requireNonNull(PrestoDriver.class.getPackage().getImplementationVersion());\n+            // this should match git-describe output which is used as version stored in metadata\n+            Matcher matcher = Pattern.compile(\"(\\\\d+)(?:-\\\\d+-[a-z0-9]+)?\").matcher(currentVersionString);\n+            checkState(matcher.matches());\n+            int currentVersion = Integer.parseInt(matcher.group(1));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int lastReleasedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(lastReleasedVersion - TESTED_VERSIONS_GRANULARITY * i));\n+            }\n+\n+            return testedPrestoVersions.build().stream()\n+                    .map(Optional::of)\n+                    .collect(TestngUtils.toDataProvider());\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"Could not determine Presto versions to test; \" + e.getMessage() + \"\\n\" + getStackTraceAsString(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc5OTM2NQ=="}, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjIwMzM5OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDowMjo1MlrOHOV5-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTowMDowNFrOHQUuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwMTAxNg==", "bodyText": "obviously, this means\n\nwhen current is 341-SNAPSHOT, we test aginst 340, 337, ...\nwhen we do the 341 release, we will be testing against 341, 338\n\nNow, what if 338 does not pass the test for some reason?\nThe release procedure may result in the master branch turning red.\nhm... maybe TESTED_VERSIONS_GRANULARITY is not so good an idea after all?\nor maybe the above is actually OK?", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484801016", "createdAt": "2020-09-08T10:02:52Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import io.prestosql.testing.TestngUtils;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibilityOldServer\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    /**\n+     * Empty means that we could not obtain current Presto version and tests defined here will be marked as failed.\n+     */\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = requireNonNull(PrestoDriver.class.getPackage().getImplementationVersion());\n+            // this should match git-describe output which is used as version stored in metadata\n+            Matcher matcher = Pattern.compile(\"(\\\\d+)(?:-\\\\d+-[a-z0-9]+)?\").matcher(currentVersionString);\n+            checkState(matcher.matches());\n+            int currentVersion = Integer.parseInt(matcher.group(1));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int lastReleasedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(lastReleasedVersion - TESTED_VERSIONS_GRANULARITY * i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MDQwMw==", "bodyText": "obviously, this means\n\nwhen current is 341-SNAPSHOT, we test aginst 340, 337, ...\nwhen we do the 341 release, we will be testing against 341, 338\n\n\nHmm why so? 340, 337, 334 in both cases. Am I missing sth?", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r484840403", "createdAt": "2020-09-08T11:18:41Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import io.prestosql.testing.TestngUtils;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibilityOldServer\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    /**\n+     * Empty means that we could not obtain current Presto version and tests defined here will be marked as failed.\n+     */\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = requireNonNull(PrestoDriver.class.getPackage().getImplementationVersion());\n+            // this should match git-describe output which is used as version stored in metadata\n+            Matcher matcher = Pattern.compile(\"(\\\\d+)(?:-\\\\d+-[a-z0-9]+)?\").matcher(currentVersionString);\n+            checkState(matcher.matches());\n+            int currentVersion = Integer.parseInt(matcher.group(1));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int lastReleasedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(lastReleasedVersion - TESTED_VERSIONS_GRANULARITY * i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwMTAxNg=="}, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNzE3Mg==", "bodyText": "sorry, wasn;'t clear. Right after the release, we switch to 342-SNAPSHOT, and then we pick different versions", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r485607172", "createdAt": "2020-09-09T13:23:27Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import io.prestosql.testing.TestngUtils;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibilityOldServer\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    /**\n+     * Empty means that we could not obtain current Presto version and tests defined here will be marked as failed.\n+     */\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = requireNonNull(PrestoDriver.class.getPackage().getImplementationVersion());\n+            // this should match git-describe output which is used as version stored in metadata\n+            Matcher matcher = Pattern.compile(\"(\\\\d+)(?:-\\\\d+-[a-z0-9]+)?\").matcher(currentVersionString);\n+            checkState(matcher.matches());\n+            int currentVersion = Integer.parseInt(matcher.group(1));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int lastReleasedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(lastReleasedVersion - TESTED_VERSIONS_GRANULARITY * i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwMTAxNg=="}, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNjY3MA==", "bodyText": "Yeah. It looks like (highly unlikely) we can not notice that given released version is not really compatible with one of the past jdbc drivers.\nMaybe if release is non-snapshot we should use GRANRALITY=1 and test more past versions?\nOr aren't we ever running a PR automation when version is non snapshot?\nI am fine with dropping granularity here altogether, but it will make tests slightly longer as we probably want to cover servers released in a year or so. Which translates to 10-20 versions.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r485916670", "createdAt": "2020-09-09T20:55:33Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import io.prestosql.testing.TestngUtils;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibilityOldServer\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    /**\n+     * Empty means that we could not obtain current Presto version and tests defined here will be marked as failed.\n+     */\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = requireNonNull(PrestoDriver.class.getPackage().getImplementationVersion());\n+            // this should match git-describe output which is used as version stored in metadata\n+            Matcher matcher = Pattern.compile(\"(\\\\d+)(?:-\\\\d+-[a-z0-9]+)?\").matcher(currentVersionString);\n+            checkState(matcher.matches());\n+            int currentVersion = Integer.parseInt(matcher.group(1));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int lastReleasedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(lastReleasedVersion - TESTED_VERSIONS_GRANULARITY * i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwMTAxNg=="}, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMTU3Mg==", "bodyText": "It seems that to trigger issue you mention above we would need to have situation that all below are true:\n\ndriver N is incompatible with server N-2\ndriver N-1 compatible with server N-2\ndriver N is compatible with server N-1\n\nso we need non-transitive compatibility. Possible but, I would not expect it happen in reality.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r485921572", "createdAt": "2020-09-09T21:05:27Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import io.prestosql.testing.TestngUtils;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibilityOldServer\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    /**\n+     * Empty means that we could not obtain current Presto version and tests defined here will be marked as failed.\n+     */\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = requireNonNull(PrestoDriver.class.getPackage().getImplementationVersion());\n+            // this should match git-describe output which is used as version stored in metadata\n+            Matcher matcher = Pattern.compile(\"(\\\\d+)(?:-\\\\d+-[a-z0-9]+)?\").matcher(currentVersionString);\n+            checkState(matcher.matches());\n+            int currentVersion = Integer.parseInt(matcher.group(1));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int lastReleasedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(lastReleasedVersion - TESTED_VERSIONS_GRANULARITY * i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwMTAxNg=="}, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3ODc3Ng==", "bodyText": "so we need non-transitive compatibility. Possible but, I would not expect it happen in reality.\n\nor if/exclusion in the test that makes the test pass (not fail) for a specific version\nOK, we can keep as is.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r486878776", "createdAt": "2020-09-11T09:00:04Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import io.prestosql.testing.TestngUtils;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test(singleThreaded = true)\n+public class TestJdbcResultSetCompatibilityOldServer\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    /**\n+     * Empty means that we could not obtain current Presto version and tests defined here will be marked as failed.\n+     */\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = requireNonNull(PrestoDriver.class.getPackage().getImplementationVersion());\n+            // this should match git-describe output which is used as version stored in metadata\n+            Matcher matcher = Pattern.compile(\"(\\\\d+)(?:-\\\\d+-[a-z0-9]+)?\").matcher(currentVersionString);\n+            checkState(matcher.matches());\n+            int currentVersion = Integer.parseInt(matcher.group(1));\n+            ImmutableList.Builder<String> testedPrestoVersions = ImmutableList.builder();\n+            int lastReleasedVersion = currentVersion - 1;\n+            for (int i = 0; i < NUMBER_OF_TESTED_VERSIONS; i++) {\n+                testedPrestoVersions.add(String.valueOf(lastReleasedVersion - TESTED_VERSIONS_GRANULARITY * i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwMTAxNg=="}, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk2MDU5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowNjoyNVrOHQsTcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowNjoyNVrOHQsTcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NTEzNw==", "bodyText": "Looks like sentence cut off", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487265137", "createdAt": "2020-09-11T20:06:25Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -0,0 +1,548 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static java.util.concurrent.TimeUnit.HOURS;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test(singleThreaded = true)\n+public abstract class BaseTestJdbcResultSet\n+{\n+    private Connection connection;\n+    private Statement statement;\n+\n+    protected abstract Connection createConnection() throws Exception;\n+\n+    @SuppressWarnings(\"JDBCResourceOpenedButNotSafelyClosed\")\n+    @BeforeMethod\n+    public void setup()\n+            throws Exception\n+    {\n+        connection = createConnection();\n+        statement = connection.createStatement();\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void teardown()\n+            throws Exception\n+    {\n+        statement.close();\n+        connection.close();\n+    }\n+\n+    @Test\n+    public void testDuplicateColumnLabels()\n+            throws Exception\n+    {\n+        try (ResultSet rs = statement.executeQuery(\"SELECT 123 x, 456 x\")) {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            assertEquals(metadata.getColumnCount(), 2);\n+            assertEquals(metadata.getColumnName(1), \"x\");\n+            assertEquals(metadata.getColumnName(2), \"x\");\n+\n+            assertTrue(rs.next());\n+            assertEquals(rs.getLong(1), 123L);\n+            assertEquals(rs.getLong(2), 456L);\n+            assertEquals(rs.getLong(\"x\"), 123L);\n+        }\n+    }\n+\n+    @Test\n+    public void testPrimitiveTypes()\n+            throws Exception\n+    {\n+        checkRepresentation(\"123\", Types.INTEGER, 123);\n+        checkRepresentation(\"12300000000\", Types.BIGINT, 12300000000L);\n+        checkRepresentation(\"REAL '123.45'\", Types.REAL, 123.45f);\n+        checkRepresentation(\"1e-1\", Types.DOUBLE, 0.1);\n+        checkRepresentation(\"1.0E0 / 0.0E0\", Types.DOUBLE, Double.POSITIVE_INFINITY);\n+        checkRepresentation(\"0.0E0 / 0.0E0\", Types.DOUBLE, Double.NaN);\n+        checkRepresentation(\"true\", Types.BOOLEAN, true);\n+        checkRepresentation(\"'hello'\", Types.VARCHAR, \"hello\");\n+        checkRepresentation(\"cast('foo' as char(5))\", Types.CHAR, \"foo  \");\n+    }\n+\n+    @Test\n+    public void testDecimal()\n+            throws Exception\n+    {\n+        checkRepresentation(\"0.1\", Types.DECIMAL, new BigDecimal(\"0.1\"));\n+        checkRepresentation(\"DECIMAL '0.1'\", Types.DECIMAL, new BigDecimal(\"0.1\"));\n+    }\n+\n+    @Test\n+    public void testDate()\n+            throws Exception\n+    {\n+        checkRepresentation(\"DATE '2018-02-13'\", Types.DATE, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Date.valueOf(LocalDate.of(2018, 2, 13)));\n+            assertEquals(rs.getObject(column, Date.class), Date.valueOf(LocalDate.of(2018, 2, 13)));\n+            assertEquals(rs.getDate(column), Date.valueOf(LocalDate.of(2018, 2, 13)));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTime(column));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTimestamp(column));\n+        });\n+\n+        // distant past, but apparently not an uncommon value in practice\n+        checkRepresentation(\"DATE '0001-01-01'\", Types.DATE, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Date.valueOf(LocalDate.of(1, 1, 1)));\n+            assertEquals(rs.getDate(column), Date.valueOf(LocalDate.of(1, 1, 1)));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTime(column));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTimestamp(column));\n+        });\n+\n+        // the Julian-Gregorian calendar \"default cut-over\"\n+        checkRepresentation(\"DATE '1582-10-04'\", Types.DATE, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Date.valueOf(LocalDate.of(1582, 10, 4)));\n+            assertEquals(rs.getDate(column), Date.valueOf(LocalDate.of(1582, 10, 4)));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTime(column));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTimestamp(column));\n+        });\n+\n+        // after the Julian-Gregorian calendar \"default cut-over\", but before the Gregorian calendar start\n+        checkRepresentation(\"DATE '1582-10-10'\", Types.DATE, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Date.valueOf(LocalDate.of(1582, 10, 10)));\n+            assertEquals(rs.getDate(column), Date.valueOf(LocalDate.of(1582, 10, 10)));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTime(column));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTimestamp(column));\n+        });\n+\n+        // the Gregorian calendar start\n+        checkRepresentation(\"DATE '1582-10-15'\", Types.DATE, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Date.valueOf(LocalDate.of(1582, 10, 15)));\n+            assertEquals(rs.getDate(column), Date.valueOf(LocalDate.of(1582, 10, 15)));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTime(column));\n+            assertThrows(IllegalArgumentException.class, () -> rs.getTimestamp(column));\n+        });\n+    }\n+\n+    @Test\n+    public void testTime()\n+            throws Exception\n+    {\n+        checkRepresentation(\"TIME '09:39:05.000'\", Types.TIME, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Time.valueOf(LocalTime.of(9, 39, 5)));\n+            assertEquals(rs.getObject(column, Time.class), Time.valueOf(LocalTime.of(9, 39, 5)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertEquals(rs.getTime(column), Time.valueOf(LocalTime.of(9, 39, 5)));\n+            assertThrows(() -> rs.getTimestamp(column));\n+        });\n+\n+        // TODO https://github.com/prestosql/presto/issues/37\n+        // TODO line 1:8: '00:39:05' is not a valid time literal\n+//        checkRepresentation(\"TIME '00:39:05'\", Types.TIME, (rs, column) -> {\n+//            ...\n+//        });\n+\n+        checkRepresentation(\"TIME '09:39:07 +01:00'\", Types.TIME /* TODO TIME_WITH_TIMEZONE */, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Time.valueOf(LocalTime.of(1, 39, 7))); // TODO this should represent TIME '09:39:07 +01:00'\n+            assertThrows(() -> rs.getDate(column));\n+            assertEquals(rs.getTime(column), Time.valueOf(LocalTime.of(1, 39, 7))); // TODO this should fail, or represent TIME '09:39:07'\n+            assertThrows(() -> rs.getTimestamp(column));\n+        });\n+\n+        checkRepresentation(\"TIME '01:39:07 +01:00'\", Types.TIME /* TODO TIME_WITH_TIMEZONE */, (rs, column) -> {\n+            Time someBogusValue = new Time(\n+                    Time.valueOf(\n+                            LocalTime.of(16, 39, 7)).getTime() /* 16:39:07 = 01:39:07 - +01:00 shift + Bahia_Banderas's shift (-8) (modulo 24h which we \"un-modulo\" below) */\n+                            - DAYS.toMillis(1) /* because we use currently 'shifted' representation, not possible to create just using LocalTime */\n+                            + HOURS.toMillis(1) /* because there was offset shift on 1970-01-01 in America/Bahia_Banderas */);\n+            assertEquals(rs.getObject(column), someBogusValue); // TODO this should represent TIME '01:39:07 +01:00'\n+            assertThrows(() -> rs.getDate(column));\n+            assertEquals(rs.getTime(column), someBogusValue); // TODO this should fail, or represent TIME '01:39:07'\n+            assertThrows(() -> rs.getTimestamp(column));\n+        });\n+\n+        checkRepresentation(\"TIME '00:39:07 +01:00'\", Types.TIME /* TODO TIME_WITH_TIMEZONE */, (rs, column) -> {\n+            Time someBogusValue = new Time(\n+                    Time.valueOf(\n+                            LocalTime.of(15, 39, 7)).getTime() /* 15:39:07 = 00:39:07 - +01:00 shift + Bahia_Banderas's shift (-8) (modulo 24h which we \"un-modulo\" below) */\n+                            - DAYS.toMillis(1) /* because we use currently 'shifted' representation, not possible to create just using LocalTime */\n+                            + HOURS.toMillis(1) /* because there was offset shift on 1970-01-01 in America/Bahia_Banderas */);\n+            assertEquals(rs.getObject(column), someBogusValue); // TODO this should represent TIME '00:39:07 +01:00'\n+            assertThrows(() -> rs.getDate(column));\n+            assertEquals(rs.getTime(column), someBogusValue); // TODO this should fail, as there no java.sql.Time representation for TIME '00:39:07' in America/Bahia_Banderas\n+            assertThrows(() -> rs.getTimestamp(column));\n+        });\n+    }\n+\n+    @Test\n+    public void testTimestamp()\n+            throws Exception\n+    {\n+        checkRepresentation(\"TIMESTAMP '2018-02-13 13:14:15.123'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 13, 14, 15, 123_000_000)));\n+            assertEquals(rs.getObject(column, Timestamp.class), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 13, 14, 15, 123_000_000)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 13, 14, 15, 123_000_000)));\n+        });\n+\n+        checkRepresentation(\"TIMESTAMP '2018-02-13 13:14:15.111111111111'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 13, 14, 15, 111_111_111)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 13, 14, 15, 111_111_111)));\n+        });\n+\n+        checkRepresentation(\"TIMESTAMP '2018-02-13 13:14:15.555555555555'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 13, 14, 15, 555_555_556)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 13, 14, 15, 555_555_556)));\n+        });\n+\n+        // distant past, but apparently not an uncommon value in practice\n+        checkRepresentation(\"TIMESTAMP '0001-01-01 00:00:00'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(1, 1, 1, 0, 0, 0)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(1, 1, 1, 0, 0, 0)));\n+        });\n+\n+        // the Julian-Gregorian calendar \"default cut-over\"\n+        checkRepresentation(\"TIMESTAMP '1582-10-04 00:00:00'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(1582, 10, 4, 0, 0, 0)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(1582, 10, 4, 0, 0, 0)));\n+        });\n+\n+        // after the Julian-Gregorian calendar \"default cut-over\", but before the Gregorian calendar start\n+        checkRepresentation(\"TIMESTAMP '1582-10-10 00:00:00'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(1582, 10, 10, 0, 0, 0)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(1582, 10, 10, 0, 0, 0)));\n+        });\n+\n+        // the Gregorian calendar start\n+        checkRepresentation(\"TIMESTAMP '1582-10-15 00:00:00'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(1582, 10, 15, 0, 0, 0)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(1582, 10, 15, 0, 0, 0)));\n+        });\n+\n+        checkRepresentation(\"TIMESTAMP '1583-01-01 00:00:00'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(1583, 1, 1, 0, 0, 0)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(1583, 1, 1, 0, 0, 0)));\n+        });\n+\n+        // TODO https://github.com/prestosql/presto/issues/37\n+        // TODO line 1:8: '1970-01-01 00:14:15.123' is not a valid timestamp literal; the expected values will pro\n+//        checkRepresentation(\"TIMESTAMP '1970-01-01 00:14:15.123'\", Types.TIMESTAMP, (rs, column) -> {\n+//            ...\n+//        });\n+\n+        // TODO https://github.com/prestosql/presto/issues/4363\n+//        checkRepresentation(\"TIMESTAMP '-123456-01-23 01:23:45.123456789'\", Types.TIMESTAMP, (rs, column) -> {\n+//            ...\n+//        });\n+\n+        checkRepresentation(\"TIMESTAMP '123456-01-23 01:23:45.123456789'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(123456, 1, 23, 1, 23, 45, 123_456_789)));\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(123456, 1, 23, 1, 23, 45, 123_456_789)));\n+        });\n+\n+        checkRepresentation(\"TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should represent TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '2018-02-13 13:14:15.227'\n+        });\n+\n+        checkRepresentation(\"TIMESTAMP '1970-01-01 09:14:15.227 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(1970, 1, 1, 1, 14, 15, 227_000_000))); // TODO this should represent TIMESTAMP '1970-01-01 09:14:15.227 Europe/Warsaw'\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(1970, 1, 1, 1, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '1970-01-01 09:14:15.227'\n+        });\n+\n+        checkRepresentation(\"TIMESTAMP '1970-01-01 00:14:15.227 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(1969, 12, 31, 15, 14, 15, 227_000_000))); // TODO this should represent TIMESTAMP '1970-01-01 00:14:15.227 Europe/Warsaw'\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            // TODO this should fail, as there no java.sql.Timestamp representation for TIMESTAMP '1970-01-01 00:14:15.227\u00f3' in America/Bahia_Banderas\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(1969, 12, 31, 15, 14, 15, 227_000_000)));\n+        });\n+\n+        // TODO https://github.com/prestosql/presto/issues/4363\n+//        checkRepresentation(\"TIMESTAMP '-12345-01-23 01:23:45.123456789 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n+//            ...\n+//        });\n+\n+        checkRepresentation(\"TIMESTAMP '12345-01-23 01:23:45.123456789 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(12345, 1, 22, 18, 23, 45, 123_456_789))); // TODO this should contain the zone\n+            assertThrows(() -> rs.getDate(column));\n+            assertThrows(() -> rs.getTime(column));\n+            assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(12345, 1, 22, 18, 23, 45, 123_456_789)));\n+        });\n+    }\n+\n+    @Test\n+    public void testIpAddress()\n+            throws Exception\n+    {\n+        checkRepresentation(\"IPADDRESS '1.2.3.4'\", Types.JAVA_OBJECT, \"1.2.3.4\");\n+    }\n+\n+    @Test\n+    public void testUuid()\n+            throws Exception\n+    {\n+        checkRepresentation(\"UUID '0397e63b-2b78-4b7b-9c87-e085fa225dd8'\", Types.JAVA_OBJECT, \"0397e63b-2b78-4b7b-9c87-e085fa225dd8\");\n+    }\n+\n+    @Test\n+    public void testArray()\n+            throws Exception\n+    {\n+        checkRepresentation(\"ARRAY[1, 2]\", Types.ARRAY, (rs, column) -> assertEquals(rs.getArray(column).getArray(), new int[] {1, 2}));\n+    }\n+\n+    @Test\n+    public void testMap()\n+            throws Exception\n+    {\n+        checkRepresentation(\"map(ARRAY['k1', 'k2'], ARRAY[BIGINT '42', -117])\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"k1\", 42L, \"k2\", -117L));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"k1\", 42L, \"k2\", -117L));\n+        });\n+\n+        // NULL value\n+        checkRepresentation(\"map(ARRAY['k1', 'k2'], ARRAY[42, NULL])\", Types.JAVA_OBJECT, (rs, column) -> {\n+            Map<String, Integer> expected = new HashMap<>();\n+            expected.put(\"k1\", 42);\n+            expected.put(\"k2\", null);\n+            assertEquals(rs.getObject(column), expected);\n+            assertEquals(rs.getObject(column, Map.class), expected);\n+        });\n+    }\n+\n+    @Test\n+    public void testRow()\n+            throws Exception\n+    {\n+        // named row\n+        checkRepresentation(\"CAST(ROW(42, 'Presto') AS ROW(a_bigint bigint, a_varchar varchar(17)))\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"a_bigint\", 42L, \"a_varchar\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"a_bigint\", 42L, \"a_varchar\", \"Presto\"));\n+        });\n+\n+        // partially named row\n+        checkRepresentation(\"CAST(ROW(42, 'Presto') AS ROW(a_bigint bigint, varchar(17)))\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"a_bigint\", 42L, \"field1\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"a_bigint\", 42L, \"field1\", \"Presto\"));\n+        });\n+\n+        // anonymous row\n+        checkRepresentation(\"ROW(42, 'Presto')\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"field0\", 42, \"field1\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"field0\", 42, \"field1\", \"Presto\"));\n+        });\n+\n+        // name collision\n+        checkRepresentation(\"CAST(ROW(42, 'Presto') AS ROW(field1 integer, varchar(17)))\", Types.JAVA_OBJECT, (rs, column) -> {\n+            // TODO (https://github.com/prestosql/presto/issues/4594) both fields should be visible or exception thrown\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"field1\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"field1\", \"Presto\"));\n+        });\n+    }\n+\n+    private void checkRepresentation(String expression, int expectedSqlType, Object expectedRepresentation)\n+            throws Exception\n+    {\n+        checkRepresentation(expression, expectedSqlType, (rs, column) -> {\n+            assertEquals(rs.getObject(column), expectedRepresentation);\n+            assertEquals(rs.getObject(column, expectedRepresentation.getClass()), expectedRepresentation);\n+        });\n+    }\n+\n+    private void checkRepresentation(String expression, int expectedSqlType, ResultAssertion assertion)\n+            throws Exception\n+    {\n+        try (ResultSet rs = statement.executeQuery(\"SELECT \" + expression)) {\n+            ResultSetMetaData metadata = rs.getMetaData();\n+            assertEquals(metadata.getColumnCount(), 1);\n+            assertEquals(metadata.getColumnType(1), expectedSqlType);\n+            assertTrue(rs.next());\n+            assertion.accept(rs, 1);\n+            assertFalse(rs.next());\n+        }\n+    }\n+\n+    @Test\n+    public void testStatsExtraction()\n+            throws Exception\n+    {\n+        try (PrestoResultSet rs = (PrestoResultSet) statement.executeQuery(\"SELECT 123 x, 456 x\")) {\n+            assertNotNull(rs.getStats());\n+            assertTrue(rs.next());\n+            assertNotNull(rs.getStats());\n+            assertFalse(rs.next());\n+            assertNotNull(rs.getStats());\n+        }\n+    }\n+\n+    @Test\n+    public void testMaxRowsUnset()\n+            throws SQLException\n+    {\n+        assertMaxRowsLimit(0);\n+        assertMaxRowsResult(7);\n+    }\n+\n+    @Test\n+    public void testMaxRowsUnlimited()\n+            throws SQLException\n+    {\n+        assertMaxRowsLimit(0);\n+        statement.setMaxRows(0);\n+        assertMaxRowsLimit(0);\n+        assertMaxRowsResult(7);\n+    }\n+\n+    @Test\n+    public void testMaxRowsLimited()\n+            throws SQLException\n+    {\n+        assertMaxRowsLimit(0);\n+        statement.setMaxRows(4);\n+        assertMaxRowsLimit(4);\n+        assertMaxRowsResult(4);\n+    }\n+\n+    @Test\n+    public void testMaxRowsLimitLargerThanResult()\n+            throws SQLException\n+    {\n+        assertMaxRowsLimit(0);\n+        statement.setMaxRows(10);\n+        assertMaxRowsLimit(10);\n+        assertMaxRowsResult(7);\n+    }\n+\n+    @Test\n+    public void testLargeMaxRowsUnlimited()\n+            throws SQLException\n+    {\n+        assertMaxRowsLimit(0);\n+        statement.setLargeMaxRows(0);\n+        assertMaxRowsLimit(0);\n+        assertMaxRowsResult(7);\n+    }\n+\n+    @Test\n+    public void testLargeMaxRowsLimited()\n+            throws SQLException\n+    {\n+        assertMaxRowsLimit(0);\n+        statement.setLargeMaxRows(4);\n+        assertMaxRowsLimit(4);\n+        assertMaxRowsResult(4);\n+    }\n+\n+    @Test\n+    public void testLargeMaxRowsLimitLargerThanResult()\n+            throws SQLException\n+    {\n+        long limit = Integer.MAX_VALUE * 10L;\n+        statement.setLargeMaxRows(limit);\n+        assertEquals(statement.getLargeMaxRows(), limit);\n+        assertMaxRowsResult(7);\n+    }\n+\n+    private void assertMaxRowsLimit(int expectedLimit)\n+            throws SQLException\n+    {\n+        assertEquals(statement.getMaxRows(), expectedLimit);\n+        assertEquals(statement.getLargeMaxRows(), expectedLimit);\n+    }\n+\n+    private void assertMaxRowsResult(long expectedCount)\n+            throws SQLException\n+    {\n+        try (ResultSet rs = statement.executeQuery(\"SELECT * FROM (VALUES (1), (2), (3), (4), (5), (6), (7)) AS x (a)\")) {\n+            assertEquals(countRows(rs), expectedCount);\n+        }\n+    }\n+\n+    @Test(expectedExceptions = SQLException.class, expectedExceptionsMessageRegExp = \"Max rows exceeds limit of 2147483647\")\n+    public void testMaxRowsExceedsLimit()\n+            throws SQLException\n+    {\n+        statement.setLargeMaxRows(Integer.MAX_VALUE * 10L);\n+        statement.getMaxRows();\n+    }\n+\n+    @Test\n+    public void testGetStatement()\n+            throws SQLException\n+    {\n+        try (ResultSet rs = statement.executeQuery(\"SELECT * FROM (VALUES (1), (2), (3))\")) {\n+            assertEquals(rs.getStatement(), statement);\n+        }\n+    }\n+\n+    private static long countRows(ResultSet rs)\n+            throws SQLException\n+    {\n+        long count = 0;\n+        while (rs.next()) {\n+            count++;\n+        }\n+        return count;\n+    }\n+\n+    @FunctionalInterface\n+    private interface ResultAssertion\n+    {\n+        void accept(ResultSet rs, int column)\n+                throws Exception;\n+    }\n+\n+    // Required with", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 545}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk2NjI1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowODo0NFrOHQsXEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowODo0NFrOHQsXEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NjA2Ng==", "bodyText": "introduce a method:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try (StatementWrapper statementWrapper = new StatementWrapper()) {\n          \n          \n            \n                    try (StatementWrapper statementWrapper = newStatement) {\n          \n      \n    \n    \n  \n\nAlso, the StatementWrapper doesn't capture the intent (it's holder for Statement and Connection)\nMaybe ConnectedStatement would at least hint at something more than \"Statement inside\u2122\"", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487266066", "createdAt": "2020-09-11T20:08:44Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -42,365 +40,366 @@\n import static org.testng.Assert.assertThrows;\n import static org.testng.Assert.assertTrue;\n \n-@Test(singleThreaded = true)\n public abstract class BaseTestJdbcResultSet\n {\n-    private Connection connection;\n-    private Statement statement;\n-\n-    protected abstract Connection createConnection() throws Exception;\n-\n-    @SuppressWarnings(\"JDBCResourceOpenedButNotSafelyClosed\")\n-    @BeforeMethod\n-    public void setup()\n-            throws Exception\n-    {\n-        connection = createConnection();\n-        statement = connection.createStatement();\n-    }\n-\n-    @AfterMethod(alwaysRun = true)\n-    public void teardown()\n-            throws Exception\n-    {\n-        statement.close();\n-        connection.close();\n-    }\n+    protected abstract Connection createConnection() throws SQLException;\n \n     @Test\n     public void testDuplicateColumnLabels()\n-            throws Exception\n+            throws SQLException\n     {\n-        try (ResultSet rs = statement.executeQuery(\"SELECT 123 x, 456 x\")) {\n-            ResultSetMetaData metadata = rs.getMetaData();\n-            assertEquals(metadata.getColumnCount(), 2);\n-            assertEquals(metadata.getColumnName(1), \"x\");\n-            assertEquals(metadata.getColumnName(2), \"x\");\n-\n-            assertTrue(rs.next());\n-            assertEquals(rs.getLong(1), 123L);\n-            assertEquals(rs.getLong(2), 456L);\n-            assertEquals(rs.getLong(\"x\"), 123L);\n+        try (StatementWrapper statementWrapper = new StatementWrapper()) {\n+            try (ResultSet rs = statementWrapper.getStatement().executeQuery(\"SELECT 123 x, 456 x\")) {\n+                ResultSetMetaData metadata = rs.getMetaData();\n+                assertEquals(metadata.getColumnCount(), 2);\n+                assertEquals(metadata.getColumnName(1), \"x\");\n+                assertEquals(metadata.getColumnName(2), \"x\");\n+\n+                assertTrue(rs.next());\n+                assertEquals(rs.getLong(1), 123L);\n+                assertEquals(rs.getLong(2), 456L);\n+                assertEquals(rs.getLong(\"x\"), 123L);\n+            }\n         }\n     }\n \n     @Test\n     public void testPrimitiveTypes()\n-            throws Exception\n+            throws SQLException\n     {\n-        checkRepresentation(\"123\", Types.INTEGER, 123);\n-        checkRepresentation(\"12300000000\", Types.BIGINT, 12300000000L);\n-        checkRepresentation(\"REAL '123.45'\", Types.REAL, 123.45f);\n-        checkRepresentation(\"1e-1\", Types.DOUBLE, 0.1);\n-        checkRepresentation(\"1.0E0 / 0.0E0\", Types.DOUBLE, Double.POSITIVE_INFINITY);\n-        checkRepresentation(\"0.0E0 / 0.0E0\", Types.DOUBLE, Double.NaN);\n-        checkRepresentation(\"true\", Types.BOOLEAN, true);\n-        checkRepresentation(\"'hello'\", Types.VARCHAR, \"hello\");\n-        checkRepresentation(\"cast('foo' as char(5))\", Types.CHAR, \"foo  \");\n+        try (StatementWrapper statementWrapper = new StatementWrapper()) {\n+            checkRepresentation(statementWrapper.getStatement(), \"123\", Types.INTEGER, 123);\n+            checkRepresentation(statementWrapper.getStatement(), \"12300000000\", Types.BIGINT, 12300000000L);\n+            checkRepresentation(statementWrapper.getStatement(), \"REAL '123.45'\", Types.REAL, 123.45f);\n+            checkRepresentation(statementWrapper.getStatement(), \"1e-1\", Types.DOUBLE, 0.1);\n+            checkRepresentation(statementWrapper.getStatement(), \"1.0E0 / 0.0E0\", Types.DOUBLE, Double.POSITIVE_INFINITY);\n+            checkRepresentation(statementWrapper.getStatement(), \"0.0E0 / 0.0E0\", Types.DOUBLE, Double.NaN);\n+            checkRepresentation(statementWrapper.getStatement(), \"true\", Types.BOOLEAN, true);\n+            checkRepresentation(statementWrapper.getStatement(), \"'hello'\", Types.VARCHAR, \"hello\");\n+            checkRepresentation(statementWrapper.getStatement(), \"cast('foo' as char(5))\", Types.CHAR, \"foo  \");\n+        }\n     }\n \n     @Test\n     public void testDecimal()\n-            throws Exception\n+            throws SQLException\n     {\n-        checkRepresentation(\"0.1\", Types.DECIMAL, new BigDecimal(\"0.1\"));\n-        checkRepresentation(\"DECIMAL '0.1'\", Types.DECIMAL, new BigDecimal(\"0.1\"));\n+        try (StatementWrapper statementWrapper = new StatementWrapper()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk2ODEyOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowOTozM1rOHQsYUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowOTozM1rOHQsYUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NjM4Ng==", "bodyText": "i prefer to have test throws Exception so that i do not need to update this line ever again\n(of course, applies when method throws at least 1 checked ex)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487266386", "createdAt": "2020-09-11T20:09:33Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -42,365 +40,366 @@\n import static org.testng.Assert.assertThrows;\n import static org.testng.Assert.assertTrue;\n \n-@Test(singleThreaded = true)\n public abstract class BaseTestJdbcResultSet\n {\n-    private Connection connection;\n-    private Statement statement;\n-\n-    protected abstract Connection createConnection() throws Exception;\n-\n-    @SuppressWarnings(\"JDBCResourceOpenedButNotSafelyClosed\")\n-    @BeforeMethod\n-    public void setup()\n-            throws Exception\n-    {\n-        connection = createConnection();\n-        statement = connection.createStatement();\n-    }\n-\n-    @AfterMethod(alwaysRun = true)\n-    public void teardown()\n-            throws Exception\n-    {\n-        statement.close();\n-        connection.close();\n-    }\n+    protected abstract Connection createConnection() throws SQLException;\n \n     @Test\n     public void testDuplicateColumnLabels()\n-            throws Exception\n+            throws SQLException\n     {\n-        try (ResultSet rs = statement.executeQuery(\"SELECT 123 x, 456 x\")) {\n-            ResultSetMetaData metadata = rs.getMetaData();\n-            assertEquals(metadata.getColumnCount(), 2);\n-            assertEquals(metadata.getColumnName(1), \"x\");\n-            assertEquals(metadata.getColumnName(2), \"x\");\n-\n-            assertTrue(rs.next());\n-            assertEquals(rs.getLong(1), 123L);\n-            assertEquals(rs.getLong(2), 456L);\n-            assertEquals(rs.getLong(\"x\"), 123L);\n+        try (StatementWrapper statementWrapper = new StatementWrapper()) {\n+            try (ResultSet rs = statementWrapper.getStatement().executeQuery(\"SELECT 123 x, 456 x\")) {\n+                ResultSetMetaData metadata = rs.getMetaData();\n+                assertEquals(metadata.getColumnCount(), 2);\n+                assertEquals(metadata.getColumnName(1), \"x\");\n+                assertEquals(metadata.getColumnName(2), \"x\");\n+\n+                assertTrue(rs.next());\n+                assertEquals(rs.getLong(1), 123L);\n+                assertEquals(rs.getLong(2), 456L);\n+                assertEquals(rs.getLong(\"x\"), 123L);\n+            }\n         }\n     }\n \n     @Test\n     public void testPrimitiveTypes()\n-            throws Exception\n+            throws SQLException\n     {\n-        checkRepresentation(\"123\", Types.INTEGER, 123);\n-        checkRepresentation(\"12300000000\", Types.BIGINT, 12300000000L);\n-        checkRepresentation(\"REAL '123.45'\", Types.REAL, 123.45f);\n-        checkRepresentation(\"1e-1\", Types.DOUBLE, 0.1);\n-        checkRepresentation(\"1.0E0 / 0.0E0\", Types.DOUBLE, Double.POSITIVE_INFINITY);\n-        checkRepresentation(\"0.0E0 / 0.0E0\", Types.DOUBLE, Double.NaN);\n-        checkRepresentation(\"true\", Types.BOOLEAN, true);\n-        checkRepresentation(\"'hello'\", Types.VARCHAR, \"hello\");\n-        checkRepresentation(\"cast('foo' as char(5))\", Types.CHAR, \"foo  \");\n+        try (StatementWrapper statementWrapper = new StatementWrapper()) {\n+            checkRepresentation(statementWrapper.getStatement(), \"123\", Types.INTEGER, 123);\n+            checkRepresentation(statementWrapper.getStatement(), \"12300000000\", Types.BIGINT, 12300000000L);\n+            checkRepresentation(statementWrapper.getStatement(), \"REAL '123.45'\", Types.REAL, 123.45f);\n+            checkRepresentation(statementWrapper.getStatement(), \"1e-1\", Types.DOUBLE, 0.1);\n+            checkRepresentation(statementWrapper.getStatement(), \"1.0E0 / 0.0E0\", Types.DOUBLE, Double.POSITIVE_INFINITY);\n+            checkRepresentation(statementWrapper.getStatement(), \"0.0E0 / 0.0E0\", Types.DOUBLE, Double.NaN);\n+            checkRepresentation(statementWrapper.getStatement(), \"true\", Types.BOOLEAN, true);\n+            checkRepresentation(statementWrapper.getStatement(), \"'hello'\", Types.VARCHAR, \"hello\");\n+            checkRepresentation(statementWrapper.getStatement(), \"cast('foo' as char(5))\", Types.CHAR, \"foo  \");\n+        }\n     }\n \n     @Test\n     public void testDecimal()\n-            throws Exception\n+            throws SQLException\n     {\n-        checkRepresentation(\"0.1\", Types.DECIMAL, new BigDecimal(\"0.1\"));\n-        checkRepresentation(\"DECIMAL '0.1'\", Types.DECIMAL, new BigDecimal(\"0.1\"));\n+        try (StatementWrapper statementWrapper = new StatementWrapper()) {\n+            checkRepresentation(statementWrapper.getStatement(), \"0.1\", Types.DECIMAL, new BigDecimal(\"0.1\"));\n+            checkRepresentation(statementWrapper.getStatement(), \"DECIMAL '0.1'\", Types.DECIMAL, new BigDecimal(\"0.1\"));\n+        }\n     }\n \n     @Test\n     public void testDate()\n-            throws Exception\n+            throws SQLException", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk3MTA5OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-driver/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldDriver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxMDozN1rOHQsaHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxMDozN1rOHQsaHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2Njg0NQ==", "bodyText": "either remove forceTestNgToRespectSingleThreaded or add the (now deleted) comment on it.\notherwise that method triggers obvious question \"how does it help\" without providing the answer.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487266845", "createdAt": "2020-09-11T20:10:37Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-driver/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldDriver.java", "diffHunk": "@@ -32,6 +32,8 @@\n import static io.prestosql.TestingServerUtils.setTestingServer;\n import static org.assertj.core.api.Assertions.assertThat;\n \n+// We need to keep @Test(singleThreaded = true) even though current version of superclass does not require it.\n+// This class is compiled against older versions of TestJdbcResultSet which require single threaded execution of tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk3MzU2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxMToyOVrOHQsblA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzoyMjo1M1rOHRG8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NzIyMA==", "bodyText": "why?", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487267220", "createdAt": "2020-09-11T20:11:29Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -42,8 +46,33 @@\n \n public abstract class BaseTestJdbcResultSet\n {\n+    private static final Logger log = Logger.get(BaseTestJdbcResultSet.class);\n+\n+    private final Supplier<String> prestoServerVersion = Suppliers.memoize(this::determinePrestoVersion);\n+\n     protected abstract Connection createConnection() throws SQLException;\n \n+    @SuppressWarnings(\"JDBCResourceOpenedButNotSafelyClosed\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwMTYzOA==", "bodyText": "No idea. Stupid IntelliJ (... or me)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487701638", "createdAt": "2020-09-14T07:22:53Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -42,8 +46,33 @@\n \n public abstract class BaseTestJdbcResultSet\n {\n+    private static final Logger log = Logger.get(BaseTestJdbcResultSet.class);\n+\n+    private final Supplier<String> prestoServerVersion = Suppliers.memoize(this::determinePrestoVersion);\n+\n     protected abstract Connection createConnection() throws SQLException;\n \n+    @SuppressWarnings(\"JDBCResourceOpenedButNotSafelyClosed\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NzIyMA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk3NTU4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxMjoxMlrOHQsc3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxMjoxMlrOHQsc3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NzU1MQ==", "bodyText": "is this setup method left over?\nyou use memoized supplier now.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487267551", "createdAt": "2020-09-11T20:12:12Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -42,8 +46,33 @@\n \n public abstract class BaseTestJdbcResultSet\n {\n+    private static final Logger log = Logger.get(BaseTestJdbcResultSet.class);\n+\n+    private final Supplier<String> prestoServerVersion = Suppliers.memoize(this::determinePrestoVersion);\n+\n     protected abstract Connection createConnection() throws SQLException;\n \n+    @SuppressWarnings(\"JDBCResourceOpenedButNotSafelyClosed\")\n+    @BeforeMethod\n+    public void setup()\n+    {\n+        synchronized (this) {\n+            determinePrestoVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk3NjkzOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxMjo0MlrOHQsdwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxMjo0MlrOHQsdwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2Nzc3Nw==", "bodyText": "rs should be try-with-resources", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487267777", "createdAt": "2020-09-11T20:12:42Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -42,8 +46,33 @@\n \n public abstract class BaseTestJdbcResultSet\n {\n+    private static final Logger log = Logger.get(BaseTestJdbcResultSet.class);\n+\n+    private final Supplier<String> prestoServerVersion = Suppliers.memoize(this::determinePrestoVersion);\n+\n     protected abstract Connection createConnection() throws SQLException;\n \n+    @SuppressWarnings(\"JDBCResourceOpenedButNotSafelyClosed\")\n+    @BeforeMethod\n+    public void setup()\n+    {\n+        synchronized (this) {\n+            determinePrestoVersion();\n+        }\n+    }\n+\n+    private String determinePrestoVersion()\n+    {\n+        try (StatementWrapper statementWrapper = new StatementWrapper()) {\n+            ResultSet rs = statementWrapper.getStatement().executeQuery(\"SELECT node_version FROM system.runtime.nodes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk3OTE4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxMzoyN1rOHQsfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxMzoyN1rOHQsfFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2ODExNw==", "bodyText": "node_version -> DISTINCT node_version\nplus assertFalse(rs.next()); at the end (exactly 1 row)", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487268117", "createdAt": "2020-09-11T20:13:27Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -42,8 +46,33 @@\n \n public abstract class BaseTestJdbcResultSet\n {\n+    private static final Logger log = Logger.get(BaseTestJdbcResultSet.class);\n+\n+    private final Supplier<String> prestoServerVersion = Suppliers.memoize(this::determinePrestoVersion);\n+\n     protected abstract Connection createConnection() throws SQLException;\n \n+    @SuppressWarnings(\"JDBCResourceOpenedButNotSafelyClosed\")\n+    @BeforeMethod\n+    public void setup()\n+    {\n+        synchronized (this) {\n+            determinePrestoVersion();\n+        }\n+    }\n+\n+    private String determinePrestoVersion()\n+    {\n+        try (StatementWrapper statementWrapper = new StatementWrapper()) {\n+            ResultSet rs = statementWrapper.getStatement().executeQuery(\"SELECT node_version FROM system.runtime.nodes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk4NTc3OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxNTo1M1rOHQsjKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzozODozMVrOHRHcWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2OTE2MA==", "bodyText": "The comment sounds as if author did not know why it is the case, and I am pretty sure you know that:\nwhen running from IDE, classes are loaded from */target/classes and there is no manifest there (it's jar's thing).\nWe could make it work by using resource filtering, but I do not see a need for this.\nI'd advice improving comment wording here though", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487269160", "createdAt": "2020-09-11T20:15:53Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -591,4 +622,26 @@ public Statement getStatement()\n             return statement;\n         }\n     }\n+\n+    private boolean serverSupportsVariablePrecisionTimestamp()\n+    {\n+        return getNumericPrestoServerVersion() >= 335;\n+    }\n+\n+    private boolean serverSupportsVariablePrecisionTimestampWithTimeZone()\n+    {\n+        return getNumericPrestoServerVersion() >= 337;\n+    }\n+\n+    private int getNumericPrestoServerVersion()\n+    {\n+        try {\n+            return Integer.parseInt(prestoServerVersion.get());\n+        }\n+        catch (NumberFormatException e) {\n+            log.info(\"Could not parse Presto version '%s' obtained from server; assuming server is recent\");\n+            // TODO it would be better to get version encoded in Manifest but it does not seem to be available for tests run via surefire/intellij", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwMzczMQ==", "bodyText": "Now I know :p", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487703731", "createdAt": "2020-09-14T07:26:51Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -591,4 +622,26 @@ public Statement getStatement()\n             return statement;\n         }\n     }\n+\n+    private boolean serverSupportsVariablePrecisionTimestamp()\n+    {\n+        return getNumericPrestoServerVersion() >= 335;\n+    }\n+\n+    private boolean serverSupportsVariablePrecisionTimestampWithTimeZone()\n+    {\n+        return getNumericPrestoServerVersion() >= 337;\n+    }\n+\n+    private int getNumericPrestoServerVersion()\n+    {\n+        try {\n+            return Integer.parseInt(prestoServerVersion.get());\n+        }\n+        catch (NumberFormatException e) {\n+            log.info(\"Could not parse Presto version '%s' obtained from server; assuming server is recent\");\n+            // TODO it would be better to get version encoded in Manifest but it does not seem to be available for tests run via surefire/intellij", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2OTE2MA=="}, "originalCommit": null, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwNTc4OA==", "bodyText": "Actually this comment does not make much sense at all, as we need a server version here. And what we could get from Manifest is client version. I think I kinda though that it is good fallback, not convinced it is any more.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487705788", "createdAt": "2020-09-14T07:30:51Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -591,4 +622,26 @@ public Statement getStatement()\n             return statement;\n         }\n     }\n+\n+    private boolean serverSupportsVariablePrecisionTimestamp()\n+    {\n+        return getNumericPrestoServerVersion() >= 335;\n+    }\n+\n+    private boolean serverSupportsVariablePrecisionTimestampWithTimeZone()\n+    {\n+        return getNumericPrestoServerVersion() >= 337;\n+    }\n+\n+    private int getNumericPrestoServerVersion()\n+    {\n+        try {\n+            return Integer.parseInt(prestoServerVersion.get());\n+        }\n+        catch (NumberFormatException e) {\n+            log.info(\"Could not parse Presto version '%s' obtained from server; assuming server is recent\");\n+            // TODO it would be better to get version encoded in Manifest but it does not seem to be available for tests run via surefire/intellij", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2OTE2MA=="}, "originalCommit": null, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwOTc4NA==", "bodyText": "Let's split the method:\nthe subclasses testing against docker image will do parseInt and propagate failure\nthe subclasses testing against local build can use MAX_INT or can read version from filtered resources\n(to be totally sure this is server's version, you can add filtered resource in presto-main, where TestingPrestoServer is defined", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487709784", "createdAt": "2020-09-14T07:38:31Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -591,4 +622,26 @@ public Statement getStatement()\n             return statement;\n         }\n     }\n+\n+    private boolean serverSupportsVariablePrecisionTimestamp()\n+    {\n+        return getNumericPrestoServerVersion() >= 335;\n+    }\n+\n+    private boolean serverSupportsVariablePrecisionTimestampWithTimeZone()\n+    {\n+        return getNumericPrestoServerVersion() >= 337;\n+    }\n+\n+    private int getNumericPrestoServerVersion()\n+    {\n+        try {\n+            return Integer.parseInt(prestoServerVersion.get());\n+        }\n+        catch (NumberFormatException e) {\n+            log.info(\"Could not parse Presto version '%s' obtained from server; assuming server is recent\");\n+            // TODO it would be better to get version encoded in Manifest but it does not seem to be available for tests run via surefire/intellij", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2OTE2MA=="}, "originalCommit": null, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk4NjA3OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxNTo1N1rOHQsjUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxNTo1N1rOHQsjUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2OTIwMQ==", "bodyText": "recent -> latest\n(it's the latest, aka the current version, not \"some relatively recent\")", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487269201", "createdAt": "2020-09-11T20:15:57Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -591,4 +622,26 @@ public Statement getStatement()\n             return statement;\n         }\n     }\n+\n+    private boolean serverSupportsVariablePrecisionTimestamp()\n+    {\n+        return getNumericPrestoServerVersion() >= 335;\n+    }\n+\n+    private boolean serverSupportsVariablePrecisionTimestampWithTimeZone()\n+    {\n+        return getNumericPrestoServerVersion() >= 337;\n+    }\n+\n+    private int getNumericPrestoServerVersion()\n+    {\n+        try {\n+            return Integer.parseInt(prestoServerVersion.get());\n+        }\n+        catch (NumberFormatException e) {\n+            log.info(\"Could not parse Presto version '%s' obtained from server; assuming server is recent\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk5MjM5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxODoxNVrOHQsnFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzozNzo1OFrOHRHbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MDE2Ng==", "bodyText": "i think it would be nice to validate our assumption that the version string matches\n\\d+(-SNAPSHOT)?\n\nThen use max int for SNPASHOT case and\nuse parseInt for the other case.\nThis way we would catch when the version is sth else than we assume", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487270166", "createdAt": "2020-09-11T20:18:15Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -591,4 +622,26 @@ public Statement getStatement()\n             return statement;\n         }\n     }\n+\n+    private boolean serverSupportsVariablePrecisionTimestamp()\n+    {\n+        return getNumericPrestoServerVersion() >= 335;\n+    }\n+\n+    private boolean serverSupportsVariablePrecisionTimestampWithTimeZone()\n+    {\n+        return getNumericPrestoServerVersion() >= 337;\n+    }\n+\n+    private int getNumericPrestoServerVersion()\n+    {\n+        try {\n+            return Integer.parseInt(prestoServerVersion.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwOTQ2Nw==", "bodyText": "% the fact it can be \"unknown\" if Presto is run from IntelliJ.\nhttps://github.com/prestosql/presto/blob/dd23a7b7db6cc1a2fe720075e10106f0b6230805/presto-server-main/src/main/java/io/prestosql/server/PrestoServer.java#L37-L38", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487709467", "createdAt": "2020-09-14T07:37:58Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -591,4 +622,26 @@ public Statement getStatement()\n             return statement;\n         }\n     }\n+\n+    private boolean serverSupportsVariablePrecisionTimestamp()\n+    {\n+        return getNumericPrestoServerVersion() >= 335;\n+    }\n+\n+    private boolean serverSupportsVariablePrecisionTimestampWithTimeZone()\n+    {\n+        return getNumericPrestoServerVersion() >= 337;\n+    }\n+\n+    private int getNumericPrestoServerVersion()\n+    {\n+        try {\n+            return Integer.parseInt(prestoServerVersion.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MDE2Ng=="}, "originalCommit": null, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk5NjY3OnYy", "diffSide": "RIGHT", "path": ".github/workflows/ci.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxOTo0MVrOHQspeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1NToxNVrOHRMaRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MDc3Nw==", "bodyText": "Do you make use of this actually?", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487270777", "createdAt": "2020-09-11T20:19:41Z", "author": {"login": "findepi"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -74,15 +74,20 @@ jobs:\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0 # checkout tags so version in Manifest is set properly", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MTE3Mw==", "bodyText": "Yeah.\nIn\n    @DataProvider\n    public static Object[][] testedPrestoVersions()", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487791173", "createdAt": "2020-09-14T09:55:15Z", "author": {"login": "losipiuk"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -74,15 +74,20 @@ jobs:\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0 # checkout tags so version in Manifest is set properly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MDc3Nw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODAwMjk3OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoyMTo1NVrOHQstQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoyMTo1NVrOHQstQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MTc0NQ==", "bodyText": "This doesn't work in IDE, does it?\nMaybe add a TODO", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487271745", "createdAt": "2020-09-11T20:21:55Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.jdbc.BaseTestJdbcResultSet;\n+import io.prestosql.jdbc.PrestoDriver;\n+import io.prestosql.testing.TestngUtils;\n+import org.testcontainers.containers.PrestoContainer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestJdbcResultSetCompatibilityOldServer\n+        extends BaseTestJdbcResultSet\n+{\n+    private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n+    private static final int TESTED_VERSIONS_GRANULARITY = 3;\n+\n+    /**\n+     * Empty means that we could not obtain current Presto version and tests defined here will be marked as failed.\n+     */\n+    private final Optional<String> testedPrestoVersion;\n+    private PrestoContainer<?> prestoContainer;\n+\n+    @Factory(dataProvider = \"testedPrestoVersions\")\n+    public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVersion)\n+    {\n+        this.testedPrestoVersion = requireNonNull(testedPrestoVersion, \"testedPrestoVersion is null\");\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testedPrestoVersions()\n+    {\n+        try {\n+            String currentVersionString = requireNonNull(PrestoDriver.class.getPackage().getImplementationVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODAwOTU5OnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoyNDozMFrOHQsxfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoyNDozMFrOHQsxfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MjgyOQ==", "bodyText": "// This is currently needed so that the test is runnable from IDE\n// TODO use filtered resource to provide current version instead.", "url": "https://github.com/trinodb/trino/pull/4998#discussion_r487272829", "createdAt": "2020-09-11T20:24:30Z", "author": {"login": "findepi"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -56,6 +58,12 @@ public TestJdbcResultSetCompatibilityOldServer(Optional<String> testedPrestoVers\n     public static Object[][] testedPrestoVersions()\n     {\n         try {\n+            if (System.getenv(TESTED_VERSIONS_ENV_KEY) != null) {\n+                return Splitter.on(\",\").trimResults().splitToList(System.getenv(TESTED_VERSIONS_ENV_KEY)).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3353, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}