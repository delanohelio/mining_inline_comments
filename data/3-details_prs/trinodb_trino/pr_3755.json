{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzU1NjUw", "number": 3755, "title": "Fix support for creating Hive external tables using CTAS", "bodyText": "Bug fix for issue #1089\nThe original change @findepi and I put in a few months ago removed the error but external tables were not properly respecting the external location property.\nOriginal change: #2669", "createdAt": "2020-05-15T19:05:24Z", "url": "https://github.com/trinodb/trino/pull/3755", "merged": true, "mergeCommit": {"oid": "66c360963e690a13b5a526060d7faac2110279ef"}, "closed": true, "closedAt": "2020-05-21T08:34:37Z", "author": {"login": "alexjo2144"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci0CRRgFqTQxNDQxMTI4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjKlcjgBqjMzNTY5NjQ1MzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NDExMjgx", "url": "https://github.com/trinodb/trino/pull/3755#pullrequestreview-414411281", "createdAt": "2020-05-19T12:51:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo1MTowOFrOGXe4kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo1Njo1OVrOGXfHQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NjQzMg==", "bodyText": "It's always used in case of \"new table\", but the data is expected or not to exists, so isNewData would be appreopriate.\nHowever, this method is just a check, it's not supposed to return anything other than new Path(location).\nSo I propose\n\nin case of CTAS, do not call it\nin case of CT, call it, but change the method signature: -> checkExternalPath(HdfsContext, Path)", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r427276432", "createdAt": "2020-05-19T12:51:08Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -995,11 +996,11 @@ private String validateAndNormalizeAvroSchemaUrl(String url, HdfsContext context\n         }\n     }\n \n-    private Path getExternalPath(HdfsContext context, String location)\n+    private Path getExternalPath(HdfsContext context, String location, boolean isNewTable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NzU5OA==", "bodyText": "Why cannot we call locationService.forNewTable(metastore, session, schemaName, tableName)?", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r427277598", "createdAt": "2020-05-19T12:52:57Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1250,7 +1251,20 @@ public HiveOutputTableHandle beginCreateTable(ConnectorSession session, Connecto\n                 .collect(toList());\n         checkPartitionTypesSupported(partitionColumns);\n \n-        LocationHandle locationHandle = locationService.forNewTable(metastore, session, schemaName, tableName);\n+        LocationHandle locationHandle;\n+        String externalLocation = getExternalLocation(tableMetadata.getProperties());\n+        boolean isExternal;\n+        if (externalLocation != null) {\n+            isExternal = true;\n+            // Do not use temporary directory for external tables\n+            Path targetPath = getExternalPath(new HdfsContext(session, schemaName, tableName), externalLocation, true);\n+            locationHandle = new LocationHandle(targetPath, targetPath, false, DIRECT_TO_TARGET_NEW_DIRECTORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3ODExMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean getIsExternal()\n          \n          \n            \n                public boolean isExternal()", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r427278112", "createdAt": "2020-05-19T12:53:46Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveOutputTableHandle.java", "diffHunk": "@@ -80,4 +83,10 @@ public String getTableOwner()\n     {\n         return additionalTableParameters;\n     }\n+\n+    @JsonProperty\n+    public boolean getIsExternal()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3ODIyNg==", "bodyText": "external", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r427278226", "createdAt": "2020-05-19T12:53:58Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveOutputTableHandle.java", "diffHunk": "@@ -61,6 +63,7 @@ public HiveOutputTableHandle(\n         this.partitionedBy = ImmutableList.copyOf(requireNonNull(partitionedBy, \"partitionedBy is null\"));\n         this.tableOwner = requireNonNull(tableOwner, \"tableOwner is null\");\n         this.additionalTableParameters = ImmutableMap.copyOf(requireNonNull(additionalTableParameters, \"additionalTableParameters is null\"));\n+        this.isExternal = isExternal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3ODc2NA==", "bodyText": "Why?", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r427278764", "createdAt": "2020-05-19T12:54:50Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -276,7 +276,7 @@ else if (table.getTableType().equals(EXTERNAL_TABLE.name())) {\n             try {\n                 Path externalLocation = new Path(table.getStorage().getLocation());\n                 FileSystem externalFileSystem = hdfsEnvironment.getFileSystem(hdfsContext, externalLocation);\n-                if (!externalFileSystem.isDirectory(externalLocation)) {\n+                if (!externalFileSystem.isDirectory(externalLocation.getParent())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4MDE5NA==", "bodyText": "https://github.com/prestosql/presto/blob/1b457a1188b44828d5aba7eb7e58d9aa45e1df28/presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java#L6469", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r427280194", "createdAt": "2020-05-19T12:56:59Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -50,19 +51,23 @@ public void testCreateExternalTableWithData()\n             throws IOException\n     {\n         File tempDir = createTempDir();\n+        File tableLocation = new File(tempDir, \"external-table\");\n \n         @Language(\"SQL\") String createTableSql = format(\"\" +\n                         \"CREATE TABLE test_create_external \" +\n                         \"WITH (external_location = '%s') AS \" +\n                         \"SELECT * FROM tpch.tiny.nation\",\n-                tempDir.toURI().toASCIIString());\n+                tableLocation.toURI().toASCIIString());\n \n         assertUpdate(createTableSql, 25);\n \n         MaterializedResult expected = computeActual(\"SELECT * FROM tpch.tiny.nation\");\n         MaterializedResult actual = computeActual(\"SELECT * FROM test_create_external\");\n         assertEqualsIgnoreOrder(actual.getMaterializedRows(), expected.getMaterializedRows());\n \n+        String path = (String) computeActual(\"SELECT DISTINCT \\\"$path\\\" FROM test_create_external\").getOnlyValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Mzc1Mjg5", "url": "https://github.com/trinodb/trino/pull/3755#pullrequestreview-415375289", "createdAt": "2020-05-20T14:09:05Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDowOTowNVrOGYNpag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxMjo0NVrOGYN1JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MjYwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (shouldUseTemporaryDirectory(session, context, targetPath, Optional.empty())) {\n          \n          \n            \n                    // TODO detect when existing table's location is a on a different file system than the temporary directory\n          \n          \n            \n                    if (shouldUseTemporaryDirectory(session, context, targetPath, Optional.empty())) {", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r428042602", "createdAt": "2020-05-20T14:09:05Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveLocationService.java", "diffHunk": "@@ -77,7 +77,7 @@ public LocationHandle forExistingTable(SemiTransactionalHiveMetastore metastore,\n         HdfsContext context = new HdfsContext(session, table.getDatabaseName(), table.getTableName());\n         Path targetPath = new Path(table.getStorage().getLocation());\n \n-        if (shouldUseTemporaryDirectory(session, context, targetPath)) {\n+        if (shouldUseTemporaryDirectory(session, context, targetPath, Optional.empty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0Mzg2Mg==", "bodyText": "This was supposed to guard the Path ctor (Path path = new Path(location);)\nsee my comment in the new place", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r428043862", "createdAt": "2020-05-20T14:10:42Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -995,19 +996,17 @@ private String validateAndNormalizeAvroSchemaUrl(String url, HdfsContext context\n         }\n     }\n \n-    private Path getExternalPath(HdfsContext context, String location)\n+    private void checkExternalPath(HdfsContext context, Path path)\n     {\n         try {\n-            Path path = new Path(location);\n             if (!isS3FileSystem(context, hdfsEnvironment, path)) {\n                 if (!hdfsEnvironment.getFileSystem(context, path).isDirectory(path)) {\n-                    throw new PrestoException(INVALID_TABLE_PROPERTY, \"External location must be a directory: \" + location);\n+                    throw new PrestoException(INVALID_TABLE_PROPERTY, \"External location must be a directory: \" + path);\n                 }\n             }\n-            return path;\n         }\n-        catch (IllegalArgumentException | IOException e) {\n-            throw new PrestoException(INVALID_TABLE_PROPERTY, \"External location is not a valid file system URI: \" + location, e);\n+        catch (IOException e) {\n+            throw new PrestoException(INVALID_TABLE_PROPERTY, \"External location is not a valid file system URI: \" + path, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NDYzNg==", "bodyText": "Previously it was guarded with\n...\nthrow new PrestoException(INVALID_TABLE_PROPERTY, \"External location is not a valid file system URI: \" + location, e);\n\nmaybe extract a method like\nprivate static Path getExternalLocationAsPath(String location) {\n ...\n\nthat would encapsulate the trycacth", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r428044636", "createdAt": "2020-05-20T14:11:33Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -836,11 +836,12 @@ public void createTable(ConnectorSession session, ConnectorTableMetadata tableMe\n             }\n \n             external = true;\n-            targetPath = getExternalPath(new HdfsContext(session, schemaName, tableName), externalLocation);\n+            targetPath = new Path(externalLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NTEwNQ==", "bodyText": "Use the new getExternalLocationAsPath method", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r428045105", "createdAt": "2020-05-20T14:12:09Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1250,7 +1249,12 @@ public HiveOutputTableHandle beginCreateTable(ConnectorSession session, Connecto\n                 .collect(toList());\n         checkPartitionTypesSupported(partitionColumns);\n \n-        LocationHandle locationHandle = locationService.forNewTable(metastore, session, schemaName, tableName);\n+        LocationHandle locationHandle;\n+        Optional<String> externalLocation = Optional.ofNullable(getExternalLocation(tableMetadata.getProperties()));\n+        Optional<Path> targetPath = externalLocation.map(Path::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NTYwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @JsonProperty(\"isExternal\") boolean external)\n          \n          \n            \n                        @JsonProperty(\"external\") boolean external)", "url": "https://github.com/trinodb/trino/pull/3755#discussion_r428045605", "createdAt": "2020-05-20T14:12:45Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveOutputTableHandle.java", "diffHunk": "@@ -46,7 +47,8 @@ public HiveOutputTableHandle(\n             @JsonProperty(\"partitionedBy\") List<String> partitionedBy,\n             @JsonProperty(\"bucketProperty\") Optional<HiveBucketProperty> bucketProperty,\n             @JsonProperty(\"tableOwner\") String tableOwner,\n-            @JsonProperty(\"additionalTableParameters\") Map<String, String> additionalTableParameters)\n+            @JsonProperty(\"additionalTableParameters\") Map<String, String> additionalTableParameters,\n+            @JsonProperty(\"isExternal\") boolean external)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDIwMjc0", "url": "https://github.com/trinodb/trino/pull/3755#pullrequestreview-415420274", "createdAt": "2020-05-20T14:52:29Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "446ee3acc7c4276703531269868c718b7e6515eb", "author": {"user": {"login": "alexjo2144", "name": "Alexander Jo"}}, "url": "https://github.com/trinodb/trino/commit/446ee3acc7c4276703531269868c718b7e6515eb", "committedDate": "2020-05-20T15:13:10Z", "message": "Fix support for creating Hive external tables using CTAS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "446ee3acc7c4276703531269868c718b7e6515eb", "author": {"user": {"login": "alexjo2144", "name": "Alexander Jo"}}, "url": "https://github.com/trinodb/trino/commit/446ee3acc7c4276703531269868c718b7e6515eb", "committedDate": "2020-05-20T15:13:10Z", "message": "Fix support for creating Hive external tables using CTAS"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1130, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}