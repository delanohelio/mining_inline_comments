{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwODAzMzUw", "number": 3799, "title": "Use Rubix async read mode by default", "bodyText": "", "createdAt": "2020-05-20T14:51:42Z", "url": "https://github.com/trinodb/trino/pull/3799", "merged": true, "mergeCommit": {"oid": "9c8c815b36a2a4c2f7696549323d43b27a54e364"}, "closed": true, "closedAt": "2020-05-22T13:40:57Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjvl2rgBqjMzNjQxNDA5Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjydS6gBqjMzNjQ3MzcyNTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODA2NjAz", "url": "https://github.com/trinodb/trino/pull/3799#pullrequestreview-416806603", "createdAt": "2020-05-22T10:24:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyNDoxNVrOGZSREQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDozNjozMVrOGZSlbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2Njg2NQ==", "bodyText": "nit: move to previous commit (ignore if disagree)", "url": "https://github.com/trinodb/trino/pull/3799#discussion_r429166865", "createdAt": "2020-05-22T10:24:15Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -334,14 +351,22 @@ private Path getStoragePath(String path)\n     }\n \n     private long getRemoteReadsCount()\n-            throws Exception\n     {\n-        return (long) BEAN_SERVER.getAttribute(new ObjectName(\"rubix:name=stats,catalog=catalog\"), \"RemoteReads\");\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2ODY2Ng==", "bodyText": "typo: s/initializer/initialize/", "url": "https://github.com/trinodb/trino/pull/3799#discussion_r429168666", "createdAt": "2020-05-22T10:28:48Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -110,9 +115,17 @@ private FileSystem getNonCachingFileSystem()\n         return environment.getFileSystem(context, cacheStoragePath);\n     }\n \n-    private RubixConfigurationInitializer initializeRubix()\n+    private void initializerCachingFileSystem(RubixConfig rubixConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2OTA1Nw==", "bodyText": "// fetch data immediately in async mode", "url": "https://github.com/trinodb/trino/pull/3799#discussion_r429169057", "createdAt": "2020-05-22T10:29:38Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -122,13 +135,16 @@ private RubixConfigurationInitializer initializeRubix()\n         }\n \n         // initialize rubix in master-only mode\n-        RubixConfig rubixConfig = new RubixConfig();\n         rubixConfig.setCacheLocation(Joiner.on(\",\").join(\n                 cacheDirectories.stream()\n                         .map(java.nio.file.Path::toString)\n                         .collect(toImmutableList())));\n         RubixConfigurationInitializer rubixConfigInitializer = new RubixConfigurationInitializer(rubixConfig);\n-        HdfsConfigurationInitializer configurationInitializer = new HdfsConfigurationInitializer(config, ImmutableSet.of());\n+        HdfsConfigurationInitializer configurationInitializer = new HdfsConfigurationInitializer(\n+                config,\n+                ImmutableSet.of(\n+                        // make Rubix to fetch data immediately in parallel mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MDkxNw==", "bodyText": "I am not a big fan that you are overriding the the cache key set by RubixConfigurationInitializer. I would rather prefer forcing filesystem cache flushing before each test. Is that possible?", "url": "https://github.com/trinodb/trino/pull/3799#discussion_r429170917", "createdAt": "2020-05-22T10:33:49Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -159,6 +175,8 @@ private FileSystem getCachingFileSystem(\n                         (dynamicConfig, ignoredContext, ignoredUri) -> {\n                             // make sure that dummy cluster manager is used\n                             setPrestoClusterManager(dynamicConfig, DummyClusterManager.class.getName());\n+                            // ensure new caching FS (with newly initialized BookKeeper) is created for each test case\n+                            setCacheKey(dynamicConfig, randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MTY0Ng==", "bodyText": "This should be part of lambda passed to closer.register below.", "url": "https://github.com/trinodb/trino/pull/3799#discussion_r429171646", "createdAt": "2020-05-22T10:35:28Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -169,12 +187,30 @@ private FileSystem getCachingFileSystem(\n     public void tearDown()\n             throws IOException\n     {\n+        nonCachingFileSystem.close();\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void closeRubix()\n+            throws IOException\n+    {\n+        if (cachingFileSystem == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MjA3OA==", "bodyText": "nit: migrating to randomData is unrelated. Would be nice to have separate commit with that. (not enforcing)", "url": "https://github.com/trinodb/trino/pull/3799#discussion_r429172078", "createdAt": "2020-05-22T10:36:31Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -198,18 +234,22 @@ public void testCoordinatorNotJoining()\n                 .hasMessage(\"No coordinator node available\");\n     }\n \n-    @Test\n-    public void testCacheRead()\n+    @Test(dataProvider = \"readMode\")\n+    public void testCacheRead(ReadMode readMode)\n             throws Exception\n     {\n-        Path file = getStoragePath(\"some_file\");\n+        initializerCachingFileSystem(new RubixConfig().setReadMode(readMode));\n+        byte[] randomData = new byte[(int) SMALL_FILE_SIZE.toBytes()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 168}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTAzMzc5", "url": "https://github.com/trinodb/trino/pull/3799#pullrequestreview-416903379", "createdAt": "2020-05-22T13:19:54Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxOTo1NFrOGZWyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoyMjo0M1rOGZW4ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MTAyNw==", "bodyText": "It does not work correctly. Note that you can get exception from getCachingFileSystem, after initializeRubix is already called.\nThen the closeRubix will not be called and cleanup will not be made. Not sure if that is big of a deal. But if we want the cleanup to happen we need to guard on individual fields which are closed/cleaned up, not on whole routine.", "url": "https://github.com/trinodb/trino/pull/3799#discussion_r429241027", "createdAt": "2020-05-22T13:19:54Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -106,9 +114,18 @@ private FileSystem getNonCachingFileSystem()\n         return environment.getFileSystem(context, cacheStoragePath);\n     }\n \n-    private RubixConfigurationInitializer initializeRubix()\n+    private void initializeCachingFileSystem(RubixConfig rubixConfig)\n             throws IOException\n     {\n+        cachingFileSystem = getCachingFileSystem(initializeRubix(rubixConfig));\n+        cachingInitialized = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjQ2OQ==", "bodyText": "nit: you can generate format using 5 so it is obvious that returned String matches what is inserted into table.", "url": "https://github.com/trinodb/trino/pull/3799#discussion_r429242469", "createdAt": "2020-05-22T13:22:43Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCaching.java", "diffHunk": "@@ -82,6 +83,25 @@ private void testReadFromTable(String tableNameSuffix)\n         query(\"DROP TABLE \" + nonCachedTableName);\n     }\n \n+    /**\n+     * Creates table with text files that are larger than 1MB\n+     */\n+    private String createTestTable(String tableName)\n+    {\n+        StringBuilder randomDataBuilder = new StringBuilder();\n+        Random random = new Random();\n+        for (int i = 0; i < 500_000; ++i) {\n+            randomDataBuilder.append(random.nextInt(10));\n+        }\n+        String randomData = randomDataBuilder.toString();\n+\n+        query(\"DROP TABLE IF EXISTS \" + tableName);\n+        // use `format` to overcome SQL query length limit\n+        query(\"CREATE TABLE \" + tableName + \" WITH (format='TEXTFILE') AS SELECT format('%1$s%1$s%1$s%1$s%1$s', '\" + randomData + \"') as col\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91211abba1761c25acb0067845d4698ae3124dbd", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/91211abba1761c25acb0067845d4698ae3124dbd", "committedDate": "2020-05-22T13:33:30Z", "message": "Use MBean to obtain caching stats in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c987e5027a924742e0c01e429b2ee5bf5360e0f4", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/c987e5027a924742e0c01e429b2ee5bf5360e0f4", "committedDate": "2020-05-22T13:33:30Z", "message": "Use assertEventually in Rubix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39ac1ef48be728f0eebc531bc2c096a0b579948a", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/39ac1ef48be728f0eebc531bc2c096a0b579948a", "committedDate": "2020-05-22T13:39:14Z", "message": "Add Rubix read mode tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f1ff5491bfe387c7fb2dde44ce7bb824dc8be4c", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/9f1ff5491bfe387c7fb2dde44ce7bb824dc8be4c", "committedDate": "2020-05-22T13:39:14Z", "message": "Use generated table data in Rubix product test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7af6adc9a1b573e82224a63f7209414e1d32708f", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/7af6adc9a1b573e82224a63f7209414e1d32708f", "committedDate": "2020-05-22T13:39:14Z", "message": "Use Rubix async read mode by default"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "7af6adc9a1b573e82224a63f7209414e1d32708f", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/7af6adc9a1b573e82224a63f7209414e1d32708f", "committedDate": "2020-05-22T13:39:14Z", "message": "Use Rubix async read mode by default"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1207, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}