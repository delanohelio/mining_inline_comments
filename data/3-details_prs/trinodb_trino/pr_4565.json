{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MzI5NDk1", "number": 4565, "title": "Eliminate pushed down filters above JDBC TableScan", "bodyText": "Fixes #4111", "createdAt": "2020-07-24T14:48:58Z", "url": "https://github.com/trinodb/trino/pull/4565", "merged": true, "mergeCommit": {"oid": "d28bc51a77e2a2b4aebfed0688a98331935cbc8b"}, "closed": true, "closedAt": "2020-08-18T09:47:54Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4FqkoABqjM1ODQzOTIyNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdADkJdAFqTQ2OTE1MDQyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTc3NDYx", "url": "https://github.com/trinodb/trino/pull/4565#pullrequestreview-455577461", "createdAt": "2020-07-27T08:29:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyOToxNVrOG3YnsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoxMTowM1rOG3cNFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyODI0MQ==", "bodyText": "Should deprecate the other assertQuery method?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460728241", "createdAt": "2020-07-27T08:29:15Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -115,6 +120,16 @@ protected Object computeScalar(@Language(\"SQL\") String sql)\n         return computeActual(sql).getOnlyValue();\n     }\n \n+    protected AssertProvider<QueryAssert> query(@Language(\"SQL\") String sql)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MjQ2NQ==", "bodyText": "don't you need to deprecate the assertQueryReturnsEmptyResult method?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460782465", "createdAt": "2020-07-27T10:02:36Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -243,12 +244,14 @@ protected void assertQueryFails(Session session, @Language(\"SQL\") String sql, @L\n \n     protected void assertQueryReturnsEmptyResult(@Language(\"SQL\") String sql)\n     {\n-        QueryAssertions.assertQueryReturnsEmptyResult(queryRunner, getSession(), sql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NDk1NA==", "bodyText": "isNotPushedDown() or .planHas(FilterNode.class)?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460784954", "createdAt": "2020-07-27T10:07:17Z", "author": {"login": "kokosing"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -237,6 +237,37 @@ public void testColumnComment()\n         assertUpdate(\"DROP TABLE test_column_comment\");\n     }\n \n+    @Test\n+    public void testPredicatePushdown()\n+    {\n+        // varchar equality\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name = 'ROMANIA'\"))\n+                .matches(\"VALUES (BIGINT '3', BIGINT '19', CAST('ROMANIA' AS varchar(255)))\");\n+\n+        // varchar range\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name BETWEEN 'POLAND' AND 'RPA'\"))\n+                .matches(\"VALUES (BIGINT '3', BIGINT '19', CAST('ROMANIA' AS varchar(255)))\");\n+\n+        // varchar different case\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name = 'romania'\"))\n+                .returnsEmptyResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NjUxOA==", "bodyText": "prestoFilter? and pushedDown -> remoteFilter?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460786518", "createdAt": "2020-07-27T10:10:10Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import io.prestosql.spi.predicate.Domain;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public interface PushdownController\n+{\n+    DomainPushdownResult apply(Domain domain);\n+\n+    final class DomainPushdownResult\n+    {\n+        private final Domain pushedDown;\n+        // In some cases, remainingFilter can be the same as pushedDown, e.g. when target database is case insensitive\n+        private final Domain remainingFilter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4Njk2NQ==", "bodyText": "PredicatePushdownController?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460786965", "createdAt": "2020-07-27T10:11:03Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import io.prestosql.spi.predicate.Domain;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public interface PushdownController", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NjkyMjYx", "url": "https://github.com/trinodb/trino/pull/4565#pullrequestreview-455692261", "createdAt": "2020-07-27T11:20:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo0NFrOG3eQlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo0NFrOG3eQlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDYzMA==", "bodyText": "#4593", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820630", "createdAt": "2020-07-27T11:20:44Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -117,7 +117,7 @@ protected void copyTableSchema(Connection connection, String catalogName, String\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        // TODO implement proper type mapping\n+        // TODO (https://github.com/prestosql/presto/issues/4593) implement proper type mapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NjkyMzUz", "url": "https://github.com/trinodb/trino/pull/4565#pullrequestreview-455692353", "createdAt": "2020-07-27T11:20:54Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo1NFrOG3eQ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo1NFrOG3eQ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDY5MQ==", "bodyText": "#4596", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820691", "createdAt": "2020-07-27T11:20:54Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -63,7 +63,7 @@\n         if (domain.getValues().getRanges().getRangeCount() > SQL_SERVER_MAX_LIST_EXPRESSIONS) {\n             pushedDown = domain.simplify();\n         }\n-        // TODO eliminate filter above table scan\n+        // TODO (https://github.com/prestosql/presto/issues/4596) eliminate filter above table scan", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NjkyNDEw", "url": "https://github.com/trinodb/trino/pull/4565#pullrequestreview-455692410", "createdAt": "2020-07-27T11:20:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo1OVrOG3eRAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo1OVrOG3eRAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDczOQ==", "bodyText": "#4596", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820739", "createdAt": "2020-07-27T11:20:59Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -106,19 +107,26 @@ public void testDecimalPredicatePushdown()\n             sqlServer.execute(\"INSERT INTO test_decimal_pushdown VALUES (123.321, 123456789.987654321)\");\n \n             assertThat(query(\"SELECT * FROM test_decimal_pushdown WHERE short_decimal <= 124\"))\n-                    .matches(\"VALUES (CAST(123.321 AS decimal(9,3)), CAST(123456789.987654321 AS decimal(30, 10)))\");\n+                    .matches(\"VALUES (CAST(123.321 AS decimal(9,3)), CAST(123456789.987654321 AS decimal(30, 10)))\")\n+                    .isNotFullyPushedDown(FilterNode.class); // TODO (https://github.com/prestosql/presto/issues/4596) eliminate filter above table scan", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2Mzk2MTg5", "url": "https://github.com/trinodb/trino/pull/4565#pullrequestreview-456396189", "createdAt": "2020-07-28T08:05:31Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODowNTozMVrOG4BVEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODowNTozMVrOG4BVEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5NTIxNw==", "bodyText": "do not initialize this variable here, it is very likely to be overwritten. Let's define it in the same block where remainingFilter is defined.", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r461395217", "createdAt": "2020-07-28T08:05:31Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -117,6 +120,36 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n \n         TupleDomain<ColumnHandle> oldDomain = handle.getConstraint();\n         TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3fd8bc0642000300237bf87cec8c7ace06d992e", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/c3fd8bc0642000300237bf87cec8c7ace06d992e", "committedDate": "2020-08-17T21:20:18Z", "message": "Add diagnostic property to disable pushdown to connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6143c7e036197eeaf66766752601e32e7a9cead1", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/6143c7e036197eeaf66766752601e32e7a9cead1", "committedDate": "2020-08-17T21:20:18Z", "message": "Make assertAggregationPushedDown more generic\n\nPreviously the method was applicable to aggregation pushdown tests and\nonly in JDBC connectors, as it relied on a catalog session property.\n\nNow it's applicable to all connectors, and to other kinds of pushdown as\nwell."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4669275397ed92823e077aa23ceb818356939653", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/4669275397ed92823e077aa23ceb818356939653", "committedDate": "2020-08-17T21:20:18Z", "message": "Change parameter order in QueryAssert.query\n\n`session` should come before `query`. This is consistent with\n`AbstractTestQueryFramework` and also provides for more readable tests\nwhen session is provided as a variable to multiple invocations in\nsequence."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9824709cfede460564098d45edd325b56bfe98d6", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/9824709cfede460564098d45edd325b56bfe98d6", "committedDate": "2020-08-17T21:20:18Z", "message": "Provide QueryAssert in AbstractTestQueryFramework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbb91ba3b22d74773f42d2226957745bae601ef1", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/fbb91ba3b22d74773f42d2226957745bae601ef1", "committedDate": "2020-08-17T21:20:18Z", "message": "Move pushdown assertion to QueryAssert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f07d1f401957f3b03a8df2d5a9e3ff78251c6752", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/f07d1f401957f3b03a8df2d5a9e3ff78251c6752", "committedDate": "2020-08-17T21:20:18Z", "message": "Add QueryAssert#returnsEmptyResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82854cd8f839e826c4c0ca2925c5bff562fa880c", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/82854cd8f839e826c4c0ca2925c5bff562fa880c", "committedDate": "2020-08-17T21:20:18Z", "message": "Convert if into switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef3650e8d933caa7435cb8009f67c795d505e99b", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/ef3650e8d933caa7435cb8009f67c795d505e99b", "committedDate": "2020-08-17T21:20:18Z", "message": "Add JdbcClient method for getting ColumnMapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0a0a8d0f49116f34eee39fc53f200aa01a269f8", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/c0a0a8d0f49116f34eee39fc53f200aa01a269f8", "committedDate": "2020-08-17T21:20:18Z", "message": "Eliminate filter above JDBC table scan"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c0a0a8d0f49116f34eee39fc53f200aa01a269f8", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/c0a0a8d0f49116f34eee39fc53f200aa01a269f8", "committedDate": "2020-08-17T21:20:18Z", "message": "Eliminate filter above JDBC table scan"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTUwNDI2", "url": "https://github.com/trinodb/trino/pull/4565#pullrequestreview-469150426", "createdAt": "2020-08-18T09:26:26Z", "commit": {"oid": "c0a0a8d0f49116f34eee39fc53f200aa01a269f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4885, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}