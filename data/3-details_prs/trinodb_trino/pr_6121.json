{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NTc2MTM0", "number": 6121, "title": "Make JdbcTypeHandle.columnSize optional", "bodyText": "", "createdAt": "2020-11-27T12:06:49Z", "url": "https://github.com/trinodb/trino/pull/6121", "merged": true, "mergeCommit": {"oid": "46fbb4bf4ee22d00e809dff28057c297bb9358a4"}, "closed": true, "closedAt": "2020-12-04T09:31:09Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgmt-IgFqTUzOTk0MzcwMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi0XM8ABqjQwNzE4MDU1Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTQzNzAz", "url": "https://github.com/trinodb/trino/pull/6121#pullrequestreview-539943703", "createdAt": "2020-11-27T12:28:09Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoyODowOVrOH68tIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoyODozNVrOH68t1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NDA1MQ==", "bodyText": "\ud83d\ude2e", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531574051", "createdAt": "2020-11-27T12:28:09Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcClient.java", "diffHunk": "@@ -27,7 +27,7 @@\n class TestingH2JdbcClient\n         extends BaseJdbcClient\n {\n-    private static final JdbcTypeHandle BIGINT_TYPE_HANDLE = new JdbcTypeHandle(Types.BIGINT, Optional.empty(), -1, Optional.empty(), Optional.empty(), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NDIyOQ==", "bodyText": "Is this all about?", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531574229", "createdAt": "2020-11-27T12:28:35Z", "author": {"login": "kokosing"}, "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlClient.java", "diffHunk": "@@ -112,7 +112,7 @@ public MySqlClient(BaseJdbcConfig config, ConnectionFactory connectionFactory, T\n         super(config, \"`\", connectionFactory);\n         this.jsonType = typeManager.getType(new TypeSignature(StandardTypes.JSON));\n \n-        JdbcTypeHandle bigintTypeHandle = new JdbcTypeHandle(Types.BIGINT, Optional.of(\"bigint\"), 0, Optional.empty(), Optional.empty(), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTgxMDA0", "url": "https://github.com/trinodb/trino/pull/6121#pullrequestreview-539981004", "createdAt": "2020-11-27T13:29:52Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyOTo1M1rOH6-dyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzozMjowNVrOH6-iZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMjg5MQ==", "bodyText": "consider marking this constructor as @Deprecated.", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531602891", "createdAt": "2020-11-27T13:29:53Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTypeHandle.java", "diffHunk": "@@ -47,21 +47,21 @@ public JdbcTypeHandle(\n             @JsonProperty(\"arrayDimensions\") Optional<Integer> arrayDimensions,\n             @JsonProperty(\"caseSensitivity\") Optional<CaseSensitivity> caseSensitivity)\n     {\n-        this(jdbcType, jdbcTypeName, columnSize, Optional.of(decimalDigits), arrayDimensions, caseSensitivity);\n+        this(jdbcType, jdbcTypeName, Optional.of(columnSize), Optional.of(decimalDigits), arrayDimensions, caseSensitivity);\n     }\n \n     @JsonCreator\n     public JdbcTypeHandle(\n             @JsonProperty(\"jdbcType\") int jdbcType,\n             @JsonProperty(\"jdbcTypeName\") Optional<String> jdbcTypeName,\n-            @JsonProperty(\"columnSize\") int columnSize,\n+            @JsonProperty(\"columnSize\") Optional<Integer> columnSize,\n             @JsonProperty(\"decimalDigits\") Optional<Integer> decimalDigits,\n             @JsonProperty(\"arrayDimensions\") Optional<Integer> arrayDimensions,\n             @JsonProperty(\"caseSensitivity\") Optional<CaseSensitivity> caseSensitivity)\n     {\n         this.jdbcType = jdbcType;\n         this.jdbcTypeName = requireNonNull(jdbcTypeName, \"jdbcTypeName is null\");\n-        this.columnSize = columnSize;\n+        this.columnSize = requireNonNull(columnSize, \"columnSize is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNDA2OA==", "bodyText": "Consider to revert condition in naming:\nint getRequiredColumnSize() -> int getColumnSize() \nOptional<Integer> getColumnSize() -> Optional<Integer> getOptionalColumnSize()\n\nAs it is more inline with standard java naming.\nAnd according to commit message: The COLUMN_SIZE field is null in **some** cases, so only in that some cases we will have longer getOptionalColumnSize()", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531604068", "createdAt": "2020-11-27T13:32:05Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTypeHandle.java", "diffHunk": "@@ -80,11 +80,17 @@ public int getJdbcType()\n     }\n \n     @JsonProperty\n-    public int getColumnSize()\n+    public Optional<Integer> getColumnSize()\n     {\n         return columnSize;\n     }\n \n+    @JsonIgnore\n+    public int getRequiredColumnSize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTEzMzg3", "url": "https://github.com/trinodb/trino/pull/6121#pullrequestreview-540513387", "createdAt": "2020-11-29T20:24:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMDoyNDoxNVrOH7mpaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMDoyNDoxNVrOH7mpaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2MTIyNA==", "bodyText": "the code here relied on NULL being represented as 0.", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532261224", "createdAt": "2020-11-29T20:24:15Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixClient.java", "diffHunk": "@@ -279,7 +279,7 @@ protected String getTableSchemaName(ResultSet resultSet)\n             case NVARCHAR:\n             case LONGVARCHAR:\n             case LONGNVARCHAR:\n-                if (typeHandle.getRequiredColumnSize() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTI1MDI3", "url": "https://github.com/trinodb/trino/pull/6121#pullrequestreview-540525027", "createdAt": "2020-11-29T21:39:05Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMDMzMTc3", "url": "https://github.com/trinodb/trino/pull/6121#pullrequestreview-541033177", "createdAt": "2020-11-30T15:43:47Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0Mzo0N1rOH8BCSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozNzo0OVrOH8Di-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5MzU3Ng==", "bodyText": "Maybe there should be makeTypeHandle(int, String, int) in this class to make this simpler to read and easier to change.", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532693576", "createdAt": "2020-11-30T15:43:47Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingJdbcTypeHandle.java", "diffHunk": "@@ -20,20 +20,20 @@\n {\n     private TestingJdbcTypeHandle() {}\n \n-    public static final JdbcTypeHandle JDBC_BOOLEAN = new JdbcTypeHandle(Types.BOOLEAN, Optional.of(\"boolean\"), 1, Optional.empty(), Optional.empty(), Optional.empty());\n+    public static final JdbcTypeHandle JDBC_BOOLEAN = new JdbcTypeHandle(Types.BOOLEAN, Optional.of(\"boolean\"), Optional.of(1), Optional.empty(), Optional.empty(), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5NTg4NQ==", "bodyText": "Personally, I'd rename it to something like getColumnSizeOrThrow to be closer to Optional.orElseThrow.\nIt's not quite clear from the name what the semantics of getRequiredColumnSize are.\n(I'd say the same about getRequiredDecimalDigits.)", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532695885", "createdAt": "2020-11-30T15:46:43Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTypeHandle.java", "diffHunk": "@@ -80,11 +80,17 @@ public int getJdbcType()\n     }\n \n     @JsonProperty\n-    public int getColumnSize()\n+    public Optional<Integer> getColumnSize()\n     {\n         return columnSize;\n     }\n \n+    @JsonIgnore\n+    public int getRequiredColumnSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNDA2OA=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMjA1Ng==", "bodyText": "The varchar mapping could use the new Optional-bearing getter:\nreturn type.getColumnSize()\n    .filter(length -> length <= VarcharType.MAX_LENGTH)\n    .map(length -> varcharColumnMapping(createVarcharType(length)))\n    .or(() -> Optional.of(varcharColumnMapping(createUnboundedVarcharType())));", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532722056", "createdAt": "2020-11-30T16:20:58Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -525,30 +524,32 @@ public static LocalTime fromPrestoTime(long value)\n             case Types.NUMERIC:\n             case Types.DECIMAL:\n                 int decimalDigits = type.getRequiredDecimalDigits();\n-                int precision = columnSize + max(-decimalDigits, 0); // Map decimal(p, -s) (negative scale) to decimal(p+s, 0).\n+                int precision = type.getRequiredColumnSize() + max(-decimalDigits, 0); // Map decimal(p, -s) (negative scale) to decimal(p+s, 0).\n                 if (precision > Decimals.MAX_PRECISION) {\n                     return Optional.empty();\n                 }\n                 return Optional.of(decimalColumnMapping(createDecimalType(precision, max(decimalDigits, 0))));\n \n             case Types.CHAR:\n             case Types.NCHAR:\n-                if (columnSize > CharType.MAX_LENGTH) {\n-                    if (columnSize > VarcharType.MAX_LENGTH) {\n+                int charLength = type.getRequiredColumnSize();\n+                if (charLength > CharType.MAX_LENGTH) {\n+                    if (charLength > VarcharType.MAX_LENGTH) {\n                         return Optional.of(varcharColumnMapping(createUnboundedVarcharType()));\n                     }\n-                    return Optional.of(varcharColumnMapping(createVarcharType(columnSize)));\n+                    return Optional.of(varcharColumnMapping(createVarcharType(charLength)));\n                 }\n-                return Optional.of(charColumnMapping(createCharType(columnSize)));\n+                return Optional.of(charColumnMapping(createCharType(charLength)));\n \n             case Types.VARCHAR:\n             case Types.NVARCHAR:\n             case Types.LONGVARCHAR:\n             case Types.LONGNVARCHAR:\n-                if (columnSize > VarcharType.MAX_LENGTH) {\n+                int varcharLength = type.getRequiredColumnSize();\n+                if (varcharLength > VarcharType.MAX_LENGTH) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyNDQyNA==", "bodyText": "Why use both conditions instead of checking charLength <= CharType.MAX_LENGTH and otherwise falling through to the VARCHAR case?\nThe char mapping could be modified to use the Optional version of getColumnSize, but it's not as nice as it is for varchar.\nreturn type.getOptionalColumnSize()\n        .filter(length -> length <= CharType.MAX_LENGTH)\n        .map(length -> charColumnMapping(createCharType(length)))\n        .or(() -> type.getOptionalColumnSize()\n                .filter(length -> length <= VarcharType.MAX_LENGTH)\n                .map(length -> varcharColumnMapping(createVarcharType(length)))\n                .or(() -> Optional.of(varcharColumnMapping(createUnboundedVarcharType()))));", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532724424", "createdAt": "2020-11-30T16:24:11Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -525,30 +524,32 @@ public static LocalTime fromPrestoTime(long value)\n             case Types.NUMERIC:\n             case Types.DECIMAL:\n                 int decimalDigits = type.getRequiredDecimalDigits();\n-                int precision = columnSize + max(-decimalDigits, 0); // Map decimal(p, -s) (negative scale) to decimal(p+s, 0).\n+                int precision = type.getRequiredColumnSize() + max(-decimalDigits, 0); // Map decimal(p, -s) (negative scale) to decimal(p+s, 0).\n                 if (precision > Decimals.MAX_PRECISION) {\n                     return Optional.empty();\n                 }\n                 return Optional.of(decimalColumnMapping(createDecimalType(precision, max(decimalDigits, 0))));\n \n             case Types.CHAR:\n             case Types.NCHAR:\n-                if (columnSize > CharType.MAX_LENGTH) {\n-                    if (columnSize > VarcharType.MAX_LENGTH) {\n+                int charLength = type.getRequiredColumnSize();\n+                if (charLength > CharType.MAX_LENGTH) {\n+                    if (charLength > VarcharType.MAX_LENGTH) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNDcxMg==", "bodyText": "Maybe fullPrecision would be a better name? (Doesn't matter either way.)", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532734712", "createdAt": "2020-11-30T16:37:49Z", "author": {"login": "jirassimok"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -270,9 +268,10 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                         oracleDoubleWriteFunction(),\n                         FULL_PUSHDOWN));\n             case OracleTypes.NUMBER:\n+                int oraclePrecision = typeHandle.getRequiredColumnSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c28b223dbccb9237f41ecc467ebb634188fbf97", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/1c28b223dbccb9237f41ecc467ebb634188fbf97", "committedDate": "2020-12-04T09:30:55Z", "message": "Remove @JsonCreator annotations from non-@JsonCreator constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1284b8e916b7b65d1a98ab101ea19cc697bfb770", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/1284b8e916b7b65d1a98ab101ea19cc697bfb770", "committedDate": "2020-12-04T09:30:55Z", "message": "Validate DATA_TYPE is present\n\n`ResultSet.getInt` returns an int value even if the result row value is\nactually NULL."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9ce57243408ecd1667f083b939319d2c1ab8322", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/c9ce57243408ecd1667f083b939319d2c1ab8322", "committedDate": "2020-12-04T09:30:55Z", "message": "Make JdbcTypeHandle.columnSize optional\n\nThe `COLUMN_SIZE` field is null in some cases, e.g. can be null in\nMySQL."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c9ce57243408ecd1667f083b939319d2c1ab8322", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/c9ce57243408ecd1667f083b939319d2c1ab8322", "committedDate": "2020-12-04T09:30:55Z", "message": "Make JdbcTypeHandle.columnSize optional\n\nThe `COLUMN_SIZE` field is null in some cases, e.g. can be null in\nMySQL."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2392, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}