{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NjA4MDg0", "number": 5668, "title": "Make type checks for EXTRACT more precise ", "bodyText": "Per the SQL specification:\nIf <extract field> is a <primary datetime field>, then it shall identify\na <primary datetime field> of the <interval value expression> or\n<datetime value expression> immediately contained in <extract source>.\n\nDepends on #5696", "createdAt": "2020-10-22T23:19:23Z", "url": "https://github.com/trinodb/trino/pull/5668", "merged": true, "mergeCommit": {"oid": "95773cd4f7194fea98a0f857eadcaa7dee06f509"}, "closed": true, "closedAt": "2020-10-28T00:45:52Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVTH6YgFqTUxNTQ4ODE3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWyq8sABqjM5Mjg4NDYwNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDg4MTc4", "url": "https://github.com/trinodb/trino/pull/5668#pullrequestreview-515488178", "createdAt": "2020-10-23T09:16:38Z", "commit": {"oid": "611907feceaf6bfebc00482c2a12f433b508f61e"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToxNjozOFrOHnFqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToyNTo0MVrOHnGATw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0OTI5NQ==", "bodyText": "add default branch with throw\nhowever, i think it would be better to impl this logic in the Extrac.Field enum.\nthe enum could take Set<Class<Type>> supportedTypes", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510749295", "createdAt": "2020-10-23T09:16:38Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1166,28 +1165,56 @@ protected Type visitParameter(Parameter node, StackableAstVisitorContext<Context\n         protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> context)\n         {\n             Type type = process(node.getExpression(), context);\n-            if (!isDateTimeType(type)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract must be DATE, TIME, TIMESTAMP, or INTERVAL (actual %s)\", type);\n-            }\n             Extract.Field field = node.getField();\n-            if ((field == TIMEZONE_HOUR || field == TIMEZONE_MINUTE) && !(type instanceof TimeWithTimeZoneType || type instanceof TimestampWithTimeZoneType)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract time zone field must have a time zone (actual %s)\", type);\n+\n+            switch (field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611907feceaf6bfebc00482c2a12f433b508f61e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTAzNg==", "bodyText": "Please see #5652", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510751036", "createdAt": "2020-10-23T09:19:38Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.Session;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.TestingSession;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611907feceaf6bfebc00482c2a12f433b508f61e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTM1Mg==", "bodyText": "uh... the default tz is not the default", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510751352", "createdAt": "2020-10-23T09:20:10Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.Session;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.TestingSession;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        Session session = testSessionBuilder()\n+                .setTimeZoneKey(TestingSession.DEFAULT_TIME_ZONE_KEY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611907feceaf6bfebc00482c2a12f433b508f61e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MzY5MQ==", "bodyText": "in #5614 i decided to test negative cases for one precision only. i guess it could be a bit simplistic... no strong opinion\nyou could test the negative case with a loop for brevity:\nfor precision 0 to 12\n assert \"EXTRACT .. FROM CAST(NULL AS time(precision))\" fails \n\n(message guarantees the failure is NULL-unrelated)", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510753691", "createdAt": "2020-10-23T09:23:53Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/time/TestExtract.java", "diffHunk": "@@ -156,4 +157,284 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testYear()\n+    {\n+        assertThatThrownBy(() -> assertions.expression(\"EXTRACT(YEAR FROM TIME '12:34:56')\"))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"line 1:26: Cannot extract YEAR from time(0)\");\n+\n+        assertThatThrownBy(() -> assertions.expression(\"EXTRACT(YEAR FROM TIME '12:34:56.1')\"))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"line 1:26: Cannot extract YEAR from time(1)\");\n+\n+        assertThatThrownBy(() -> assertions.expression(\"EXTRACT(YEAR FROM TIME '12:34:56.12')\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611907feceaf6bfebc00482c2a12f433b508f61e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NDg5NQ==", "bodyText": "ideally all TestExtract classes should have same order of methods, so we can easily find what is and what is not implemented yet.\nio.prestosql.operator.scalar.timestamptz.TestExtract is the most comprehensive today, and it lays out the method in from longest fields to shortest (year first, then to millis)", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510754895", "createdAt": "2020-10-23T09:25:41Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/time/TestExtract.java", "diffHunk": "@@ -156,4 +157,284 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testYear()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611907feceaf6bfebc00482c2a12f433b508f61e"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "611907feceaf6bfebc00482c2a12f433b508f61e", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/611907feceaf6bfebc00482c2a12f433b508f61e", "committedDate": "2020-10-22T23:17:51Z", "message": "Make type checks for EXTRACT more precise\n\nPer the SQL specification:\n\n    If <extract field> is a <primary datetime field>, then it shall identify\n    a <primary datetime field> of the <interval value expression> or\n    <datetime value expression> immediately contained in <extract source>."}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjA1MDU5", "url": "https://github.com/trinodb/trino/pull/5668#pullrequestreview-516605059", "createdAt": "2020-10-26T09:39:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozOTo0MlrOHoHiGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTo1MjowOVrOHoH_yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyODUwNg==", "bodyText": "There is the IDE's warning as per https://github.com/prestosql/presto/blob/master/DEVELOPMENT.md#additional-ide-configuration", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511828506", "createdAt": "2020-10-26T09:39:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeZoneHour.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timetz;\n+\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimeWithTimeZone;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackOffsetMinutes;\n+import static io.prestosql.type.DateTimes.MINUTES_PER_HOUR;\n+\n+@Description(\"Time zone hour of the given time\")\n+@ScalarFunction(\"timezone_hour\")\n+public class TimeZoneHour", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyOTI2OQ==", "bodyText": "Add test cases with negative offsets", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511829269", "createdAt": "2020-10-26T09:40:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeZoneMinute.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timetz;\n+\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimeWithTimeZone;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackOffsetMinutes;\n+import static io.prestosql.type.DateTimes.MINUTES_PER_HOUR;\n+\n+@Description(\"Time zone minute of the given time\")\n+@ScalarFunction(\"timezone_minute\")\n+public class TimeZoneMinute\n+{\n+    private TimeZoneMinute() {}\n+\n+    @LiteralParameters(\"p\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long extract(@SqlType(\"time(p) with time zone\") long packedTime)\n+    {\n+        return unpackOffsetMinutes(packedTime) % MINUTES_PER_HOUR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMTQ2MQ==", "bodyText": "We could want to improve types here.\nE.g. using integer or smallint (where applicable) could in theory improve query perf when the value ends up being compared with a decimal.\nissue?", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511831461", "createdAt": "2020-10-26T09:44:34Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1166,28 +1165,58 @@ protected Type visitParameter(Parameter node, StackableAstVisitorContext<Context\n         protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> context)\n         {\n             Type type = process(node.getExpression(), context);\n-            if (!isDateTimeType(type)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract must be DATE, TIME, TIMESTAMP, or INTERVAL (actual %s)\", type);\n-            }\n             Extract.Field field = node.getField();\n-            if ((field == TIMEZONE_HOUR || field == TIMEZONE_MINUTE) && !(type instanceof TimeWithTimeZoneType || type instanceof TimestampWithTimeZoneType)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract time zone field must have a time zone (actual %s)\", type);\n+\n+            switch (field) {\n+                case YEAR:\n+                case MONTH:\n+                case DAY:\n+                    if (!(type instanceof DateType) &&\n+                            !(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType) &&\n+                            !(type.equals(INTERVAL_YEAR_MONTH))) {\n+                        throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n+                    }\n+                    break;\n+                case QUARTER:\n+                case WEEK:\n+                case DAY_OF_MONTH:\n+                case DAY_OF_WEEK:\n+                case DOW:\n+                case DAY_OF_YEAR:\n+                case DOY:\n+                case YEAR_OF_WEEK:\n+                case YOW:\n+                    if (!(type instanceof DateType) &&\n+                            !(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType)) {\n+                        throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n+                    }\n+                    break;\n+                case HOUR:\n+                case MINUTE:\n+                case SECOND:\n+                    if (!(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType) &&\n+                            !(type instanceof TimeType) &&\n+                            !(type instanceof TimeWithTimeZoneType) &&\n+                            !(type.equals(INTERVAL_DAY_TIME))) {\n+                        throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n+                    }\n+                    break;\n+                case TIMEZONE_MINUTE:\n+                case TIMEZONE_HOUR:\n+                    if (!(type instanceof TimestampWithTimeZoneType) && !(type instanceof TimeWithTimeZoneType)) {\n+                        throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n+                    }\n+                    break;\n+                default:\n+                    throw new UnsupportedOperationException(\"Unknown field: \" + field);\n             }\n \n             return setExpressionType(node, BIGINT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMjI3OQ==", "bodyText": "DAY doesn't seem to make sense  for INTERVAL_YEAR_MONTH (and doesn't work either)", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511832279", "createdAt": "2020-10-26T09:45:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1166,28 +1165,58 @@ protected Type visitParameter(Parameter node, StackableAstVisitorContext<Context\n         protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> context)\n         {\n             Type type = process(node.getExpression(), context);\n-            if (!isDateTimeType(type)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract must be DATE, TIME, TIMESTAMP, or INTERVAL (actual %s)\", type);\n-            }\n             Extract.Field field = node.getField();\n-            if ((field == TIMEZONE_HOUR || field == TIMEZONE_MINUTE) && !(type instanceof TimeWithTimeZoneType || type instanceof TimestampWithTimeZoneType)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract time zone field must have a time zone (actual %s)\", type);\n+\n+            switch (field) {\n+                case YEAR:\n+                case MONTH:\n+                case DAY:\n+                    if (!(type instanceof DateType) &&\n+                            !(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType) &&\n+                            !(type.equals(INTERVAL_YEAR_MONTH))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMzkyNw==", "bodyText": "We should test all the possible extract fields in this class.\nCan be here, or follow up (eg #5652?)\nHaving a common test structure (separate methods, or even an abstract AbstractTestExtract class), could be helpful for ensure 100% coverage. Thus, i'd rather have this method split, even if the new test methods end up being one liners.", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511833927", "createdAt": "2020-10-26T09:48:36Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void test()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNDU5OQ==", "bodyText": "Worth testing with negative dates (before epoch) too.", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511834599", "createdAt": "2020-10-26T09:49:41Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void test()\n+    {\n+        assertThat(assertions.expression(\"EXTRACT(YEAR FROM DATE '2020-05-10')\")).matches(\"BIGINT '2020'\");\n+        assertThat(assertions.expression(\"EXTRACT(MONTH FROM DATE '2020-05-10')\")).matches(\"BIGINT '5'\");\n+        assertThat(assertions.expression(\"EXTRACT(DAY FROM DATE '2020-05-10')\")).matches(\"BIGINT '10'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNTI4NQ==", "bodyText": "This is in Remove redundant session initialization commit, but belongs to an earlier commit.", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511835285", "createdAt": "2020-10-26T09:50:47Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1170,14 +1170,22 @@ protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> co\n             switch (field) {\n                 case YEAR:\n                 case MONTH:\n-                case DAY:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNTQ3Ng==", "bodyText": "This is in Remove redundant session initialization commit, but doesn't seem to belong here.", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511835476", "createdAt": "2020-10-26T09:51:07Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1170,14 +1170,22 @@ protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> co\n             switch (field) {\n                 case YEAR:\n                 case MONTH:\n-                case DAY:\n                     if (!(type instanceof DateType) &&\n                             !(type instanceof TimestampType) &&\n                             !(type instanceof TimestampWithTimeZoneType) &&\n                             !(type.equals(INTERVAL_YEAR_MONTH))) {\n                         throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n                     }\n                     break;\n+                case DAY:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNTU2OQ==", "bodyText": "DAY doesn't seem to make sense for INTERVAL_YEAR_MONTH (and doesn't work either)", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511835569", "createdAt": "2020-10-26T09:51:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1170,14 +1170,22 @@ protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> co\n             switch (field) {\n                 case YEAR:\n                 case MONTH:\n-                case DAY:\n                     if (!(type instanceof DateType) &&\n                             !(type instanceof TimestampType) &&\n                             !(type instanceof TimestampWithTimeZoneType) &&\n                             !(type.equals(INTERVAL_YEAR_MONTH))) {\n                         throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n                     }\n                     break;\n+                case DAY:\n+                    if (!(type instanceof DateType) &&\n+                            !(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType) &&\n+                            !(type.equals(INTERVAL_YEAR_MONTH)) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNjEwNg==", "bodyText": "This is in Remove redundant session initialization commit, but doesn't seem to belong here.", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511836106", "createdAt": "2020-10-26T09:52:09Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestExtract.java", "diffHunk": "@@ -297,7 +291,7 @@ public void testTimezoneHour()\n             int precision = i;\n             assertThatThrownBy(() -> assertions.expression(format(\"EXTRACT(TIMEZONE_HOUR FROM CAST(NULL AS TIMESTAMP(%s)))\", precision)))\n                     .isInstanceOf(PrestoException.class)\n-                    .hasMessage(format(\"line 1:35: Cannot extract TIMEZONE_HOUR from time(%s)\", precision));\n+                    .hasMessage(format(\"line 1:35: Cannot extract TIMEZONE_HOUR from timestamp(%s)\", precision));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDQ2MDI1", "url": "https://github.com/trinodb/trino/pull/5668#pullrequestreview-517446025", "createdAt": "2020-10-27T08:25:09Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyNTowOVrOHowLxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyNjoyNFrOHowOuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NDUzNQ==", "bodyText": "Might be nice to test -00:35 here", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512494535", "createdAt": "2020-10-27T08:25:09Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timetz/TestExtract.java", "diffHunk": "@@ -191,4 +191,126 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testTimeZoneHour()\n+    {\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '8'\");\n+\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '8'\");\n+\n+        // negative offsets\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567890-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678901-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789012-08:35')\")).matches(\"BIGINT '-8'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NDcyNg==", "bodyText": "test -00:35 too", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512494726", "createdAt": "2020-10-27T08:25:30Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timetz/TestExtract.java", "diffHunk": "@@ -191,4 +191,126 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testTimeZoneHour()\n+    {\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '8'\");\n+\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '8'\");\n+\n+        // negative offsets\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567890-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678901-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789012-08:35')\")).matches(\"BIGINT '-8'\");\n+\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567890-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678901-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789012-08:35')\")).matches(\"BIGINT '-8'\");\n+    }\n+\n+    @Test\n+    public void testTimeZoneMinute()\n+    {\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '35'\");\n+\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '35'\");\n+\n+        // negative offsets\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234567-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345678-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456789-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234567890-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345678901-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456789012-08:35')\")).matches(\"BIGINT '-35'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NTI4OA==", "bodyText": "time -> time with time zone ?", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512495288", "createdAt": "2020-10-27T08:26:24Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeZoneHour.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timetz;\n+\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimeWithTimeZone;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackOffsetMinutes;\n+import static io.prestosql.type.DateTimes.MINUTES_PER_HOUR;\n+\n+@Description(\"Time zone hour of the given time\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b1080cb378cbf3b24cc8170f07a0fca65a3436a", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/3b1080cb378cbf3b24cc8170f07a0fca65a3436a", "committedDate": "2020-10-28T00:45:39Z", "message": "Make classes final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "302340c57a21bb77bdf588b33c6483722110a60b", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/302340c57a21bb77bdf588b33c6483722110a60b", "committedDate": "2020-10-28T00:45:39Z", "message": "Remove redundant session initalization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be5cb413f6312d9e2c0f15a4b62f954c90a66039", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/be5cb413f6312d9e2c0f15a4b62f954c90a66039", "committedDate": "2020-10-28T00:45:39Z", "message": "Make type checks for EXTRACT more precise\n\nPer the SQL specification:\n\n    If <extract field> is a <primary datetime field>, then it shall identify\n    a <primary datetime field> of the <interval value expression> or\n    <datetime value expression> immediately contained in <extract source>."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95773cd4f7194fea98a0f857eadcaa7dee06f509", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/95773cd4f7194fea98a0f857eadcaa7dee06f509", "committedDate": "2020-10-28T00:45:39Z", "message": "Add support for EXTRACT TIMEZONE_HOUR/MINUTE for time w/ tz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "95773cd4f7194fea98a0f857eadcaa7dee06f509", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/95773cd4f7194fea98a0f857eadcaa7dee06f509", "committedDate": "2020-10-28T00:45:39Z", "message": "Add support for EXTRACT TIMEZONE_HOUR/MINUTE for time w/ tz"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3101, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}