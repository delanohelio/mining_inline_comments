{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTA0MTkz", "number": 2907, "title": "Document filter for aggregate functions", "bodyText": "Aims to fix #2889\nNot sure about using the iris data set as an example here ... should I use tpch instead?\nOr do you have some other example that we can use easily.", "createdAt": "2020-02-21T22:46:29Z", "url": "https://github.com/trinodb/trino/pull/2907", "merged": true, "mergeCommit": {"oid": "5ff97d29528840595ba32c8741c20aad8a166ab6"}, "closed": true, "closedAt": "2020-03-14T16:57:38Z", "author": {"login": "mosabua"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHc1PlgFqTM2MzM1NzI2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcI1xI1gBqjMwODMzOTEzMzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzU3MjY5", "url": "https://github.com/trinodb/trino/pull/2907#pullrequestreview-363357269", "createdAt": "2020-02-24T12:35:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozNToxOVrOFtfGwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozOTowMFrOFtfMug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzOTg3NA==", "bodyText": "single <expression> looks like 1-arg agg func\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AGGREATE_FUNCTION(<expression>) FILTER(WHERE <condition>)\n          \n          \n            \n                AGGREATE_FUNCTION(<arguments>) FILTER(WHERE <condition>)\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AGGREATE_FUNCTION(<expression>) FILTER(WHERE <condition>)\n          \n          \n            \n                AGGREATE_FUNCTION(...) FILTER(WHERE <condition>)\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r383239874", "createdAt": "2020-02-24T12:35:19Z", "author": {"login": "findepi"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,58 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(<expression>) FILTER(WHERE <condition>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MTQwMg==", "bodyText": "i'd live an empty line between query and data output.\nin fact, we sometimes render this as 2 blocks.\nexample from accumulo.rst:\n.. code-block:: sql\n\n    DESCRIBE myschema.scientists;\n\n.. code-block:: none\n\n      Column   |  Type   | Extra |                      Comment\n    -----------+---------+-------+---------------------------------------------------\n     recordkey | varchar |       | Accumulo row ID\n     name      | varchar |       | Accumulo column name:name. Indexed: false\n     age       | bigint  |       | Accumulo column age:age. Indexed: false\n     birthday  | date    |       | Accumulo column birthday:birthday. Indexed: false", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r383241402", "createdAt": "2020-02-24T12:39:00Z", "author": {"login": "findepi"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,58 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(<expression>) FILTER(WHERE <condition>)\n+\n+For example, you want to add a condition on the count for Iris flowers,\n+modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+    species   |  count\n+    ------------+-------\n+    setosa     |    50\n+    virginica  |    50\n+    versicolor |    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4\n+    GROUP BY species;\n+    species   | _col1\n+    ------------+-------\n+    virginica  |    50\n+    versicolor |    34\n+\n+Using a filter you retain all information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) FILTER (where petallengthcm > 4) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+    species   | count", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0Nzk0NTE3", "url": "https://github.com/trinodb/trino/pull/2907#pullrequestreview-364794517", "createdAt": "2020-02-26T10:43:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDo0MzozOFrOFumoVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDo0MzozOFrOFumoVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxMTczMw==", "bodyText": "i had a comment, but i don't see it, maybe i didnt publish...\nI'd just have one example showing filtered agg, instead of 3 examples (and only 1 showing that)\nWDYT?", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r384411733", "createdAt": "2020-02-26T10:43:38Z", "author": {"login": "findepi"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,67 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER(WHERE <condition>)\n+\n+For example, you want to add a condition on the count for Iris flowers,\n+modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    virginica  |   50\n+    versicolor     34\n+\n+Using a filter you retain all information:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MDkwMTQx", "url": "https://github.com/trinodb/trino/pull/2907#pullrequestreview-365090141", "createdAt": "2020-02-26T17:18:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzoxODo0OVrOFu0tlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzoyMTowOVrOFu0yvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MjQ1Mw==", "bodyText": "Add space after FILTER", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r384642453", "createdAt": "2020-02-26T17:18:49Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,67 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER(WHERE <condition>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0Mzc3Mw==", "bodyText": "The canonical example (and very useful example) is to use FILTER to remove nulls from consideration when using array_agg:\nSELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\nFROM t\n\nThere's no easy way to achieve that, especially when the query involves other aggregations.", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r384643773", "createdAt": "2020-02-26T17:21:09Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,67 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER(WHERE <condition>)\n+\n+For example, you want to add a condition on the count for Iris flowers,\n+modifying the following query.\n+\n+.. code-block:: none", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MTE0ODUy", "url": "https://github.com/trinodb/trino/pull/2907#pullrequestreview-366114852", "createdAt": "2020-02-28T01:41:36Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo0MTozNlrOFvnEAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo1MDozNVrOFvnM2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzM5NA==", "bodyText": "Move this to the top, since it is describing generic syntax and shouldn't be mixed in between the descriptions of specific functions. Also, let's add a related section heading\nOrdering During Aggregation\n---------------------------", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385467394", "createdAt": "2020-02-28T01:41:36Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzQ5Mw==", "bodyText": "Lowercase aggregate_function since we write functions in lowercase (and keywords in uppercase)", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385467493", "createdAt": "2020-02-28T01:42:00Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzY4Ng==", "bodyText": "This needs\n.. code-block:: none", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385467686", "createdAt": "2020-02-28T01:42:47Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2Nzg1Nw==", "bodyText": "Change period to :: and remove the code-block part since this is SQL", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385467857", "createdAt": "2020-02-28T01:43:27Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODM3NA==", "bodyText": "Let's make this a real example\nSELECT array_agg(name) FILTER (WHERE name IS NOT NULL)\nFROM region", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468374", "createdAt": "2020-02-28T01:45:41Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODUzNQ==", "bodyText": "Remove, since this is SQL", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468535", "createdAt": "2020-02-28T01:46:07Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODcwNw==", "bodyText": "The formatting is off here. This row is missing | and the next one is misaligned", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468707", "createdAt": "2020-02-28T01:46:47Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODcyOA==", "bodyText": "Missing |", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468728", "createdAt": "2020-02-28T01:46:55Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    virginica  |   50\n+    versicolor     34", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODc4Mg==", "bodyText": "petal_length_cm", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468782", "createdAt": "2020-02-28T01:47:09Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODgxOA==", "bodyText": "FROM iris", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468818", "createdAt": "2020-02-28T01:47:20Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODg2Mg==", "bodyText": "FROM iris", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468862", "createdAt": "2020-02-28T01:47:27Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTA4MA==", "bodyText": "Remove, as this is SQL", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385469080", "createdAt": "2020-02-28T01:48:24Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTY1Ng==", "bodyText": "Remove the row count or add it to the others", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385469656", "createdAt": "2020-02-28T01:50:35Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    virginica  |   50\n+    versicolor     34\n+\n+Using a filter you retain all information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) FILTER (where petallengthcm > 4) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    virginica  |   50\n+    setosa     |    0\n+    versicolor |   34\n+    (3 rows)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "a69c378c0aed6d98c8c38054417e4fa8afcb5042", "author": {"user": {"login": "mosabua", "name": "Manfred Moser"}}, "url": "https://github.com/trinodb/trino/commit/a69c378c0aed6d98c8c38054417e4fa8afcb5042", "committedDate": "2020-02-28T20:13:09Z", "message": "Document filter for aggregate functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a69c378c0aed6d98c8c38054417e4fa8afcb5042", "author": {"user": {"login": "mosabua", "name": "Manfred Moser"}}, "url": "https://github.com/trinodb/trino/commit/a69c378c0aed6d98c8c38054417e4fa8afcb5042", "committedDate": "2020-02-28T20:13:09Z", "message": "Document filter for aggregate functions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1599, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}