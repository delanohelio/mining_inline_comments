{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDE2ODEx", "number": 4114, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNDoyODowNlrOEHTL9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNDoyOToxNVrOEHTMHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg5ODQ1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNDoyODowNlrOGmm0Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxOToyNDowNlrOGmn-Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTAyNw==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/4114#discussion_r443135027", "createdAt": "2020-06-20T14:28:06Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -36,6 +39,28 @@ public DockerContainer(String dockerImageName)\n         setCopyToFileContainerPathMap(new LinkedHashMap<>());\n     }\n \n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath);\n+    }\n+\n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath, BindMode mode)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath, mode);\n+    }\n+\n+    // Mounting a non-existing file results in docker creating a directory. This is often not the desired effect. Fail fast instead.\n+    private static void verifyHostPath(String hostPath)\n+    {\n+        if (!Files.exists(Paths.get(hostPath))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1Mzk0Nw==", "bodyText": "i have this as it is, i think this is more readable here.", "url": "https://github.com/trinodb/trino/pull/4114#discussion_r443153947", "createdAt": "2020-06-20T19:24:06Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -36,6 +39,28 @@ public DockerContainer(String dockerImageName)\n         setCopyToFileContainerPathMap(new LinkedHashMap<>());\n     }\n \n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath);\n+    }\n+\n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath, BindMode mode)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath, mode);\n+    }\n+\n+    // Mounting a non-existing file results in docker creating a directory. This is often not the desired effect. Fail fast instead.\n+    private static void verifyHostPath(String hostPath)\n+    {\n+        if (!Files.exists(Paths.get(hostPath))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTAyNw=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg5ODg3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNDoyOToxNVrOGmm0cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxOToyNzoxMVrOGmn-zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTA4OA==", "bodyText": "Can you use this in copy methods also? I recently was copying non existing file and it failed very late (during product tests execution).", "url": "https://github.com/trinodb/trino/pull/4114#discussion_r443135088", "createdAt": "2020-06-20T14:29:15Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -36,6 +39,28 @@ public DockerContainer(String dockerImageName)\n         setCopyToFileContainerPathMap(new LinkedHashMap<>());\n     }\n \n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath);\n+    }\n+\n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath, BindMode mode)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath, mode);\n+    }\n+\n+    // Mounting a non-existing file results in docker creating a directory. This is often not the desired effect. Fail fast instead.\n+    private static void verifyHostPath(String hostPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NDEyNA==", "bodyText": "added (where possible)", "url": "https://github.com/trinodb/trino/pull/4114#discussion_r443154124", "createdAt": "2020-06-20T19:27:11Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -36,6 +39,28 @@ public DockerContainer(String dockerImageName)\n         setCopyToFileContainerPathMap(new LinkedHashMap<>());\n     }\n \n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath);\n+    }\n+\n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath, BindMode mode)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath, mode);\n+    }\n+\n+    // Mounting a non-existing file results in docker creating a directory. This is often not the desired effect. Fail fast instead.\n+    private static void verifyHostPath(String hostPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTA4OA=="}, "originalCommit": null, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4140, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}