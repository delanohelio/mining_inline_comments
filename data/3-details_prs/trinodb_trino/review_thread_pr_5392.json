{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODY3NDgw", "number": 5392, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoyMjoxN1rOEpyzhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1ODoxN1rOE21TLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjU5NDYzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoyMjoxOFrOHbrjTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzozMjoxNVrOHbtwsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NzE0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Session microsecondsTimestamp = Session.builder(getSession())\n          \n          \n            \n                            .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"MICROSECONDS\")\n          \n          \n            \n                            .build();\n          \n          \n            \n                    Session microsecondsTimestamp = withTimestampPrecision(getSession(), HiveTimestampPrecision.MICROSECONDS);", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r498787149", "createdAt": "2020-10-02T12:22:18Z", "author": {"login": "aalbu"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -6262,6 +6262,65 @@ public void testAnalyzeUnpartitionedTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testAnalyzeTableTimestampWithPrecision()\n+    {\n+        String catalog = getSession().getCatalog().get();\n+        Session nanosecondsTimestamp = Session.builder(getSession())\n+                // Disable column statistics collection when creating the table\n+                .setCatalogSessionProperty(catalog, \"collect_column_statistics_on_write\", \"false\")\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        Session microsecondsTimestamp = Session.builder(getSession())\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"MICROSECONDS\")\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyMzM0NA==", "bodyText": "thanks. I did not notice this helper.", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r498823344", "createdAt": "2020-10-02T13:32:15Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -6262,6 +6262,65 @@ public void testAnalyzeUnpartitionedTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testAnalyzeTableTimestampWithPrecision()\n+    {\n+        String catalog = getSession().getCatalog().get();\n+        Session nanosecondsTimestamp = Session.builder(getSession())\n+                // Disable column statistics collection when creating the table\n+                .setCatalogSessionProperty(catalog, \"collect_column_statistics_on_write\", \"false\")\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        Session microsecondsTimestamp = Session.builder(getSession())\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"MICROSECONDS\")\n+                .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NzE0OQ=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjYwMTA4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoyNDo0NVrOHbrnmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoyNDo0NVrOHbrnmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODI0OA==", "bodyText": "Can we have the last argument (12) on a different line?", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r498788248", "createdAt": "2020-10-02T12:24:45Z", "author": {"login": "aalbu"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -6262,6 +6262,65 @@ public void testAnalyzeUnpartitionedTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testAnalyzeTableTimestampWithPrecision()\n+    {\n+        String catalog = getSession().getCatalog().get();\n+        Session nanosecondsTimestamp = Session.builder(getSession())\n+                // Disable column statistics collection when creating the table\n+                .setCatalogSessionProperty(catalog, \"collect_column_statistics_on_write\", \"false\")\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        Session microsecondsTimestamp = Session.builder(getSession())\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"MICROSECONDS\")\n+                .build();\n+\n+        Session millisecondsTimestamp = getSession();\n+\n+        String tableName = \"test_analyze_timestamp_with_precision\";\n+\n+        assertUpdate(nanosecondsTimestamp,\n+                \"CREATE TABLE \" + tableName + \"(c_timestamp) AS VALUES \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.113', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111113', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111111', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111113' \", 12);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY0MDY0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozODowMlrOHbr_2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzozMjoxOVrOHbtw1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDQ1OQ==", "bodyText": "Should we have a value that rounds up?", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r498794459", "createdAt": "2020-10-02T12:38:02Z", "author": {"login": "aalbu"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -6262,6 +6262,65 @@ public void testAnalyzeUnpartitionedTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testAnalyzeTableTimestampWithPrecision()\n+    {\n+        String catalog = getSession().getCatalog().get();\n+        Session nanosecondsTimestamp = Session.builder(getSession())\n+                // Disable column statistics collection when creating the table\n+                .setCatalogSessionProperty(catalog, \"collect_column_statistics_on_write\", \"false\")\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        Session microsecondsTimestamp = Session.builder(getSession())\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"MICROSECONDS\")\n+                .build();\n+\n+        Session millisecondsTimestamp = getSession();\n+\n+        String tableName = \"test_analyze_timestamp_with_precision\";\n+\n+        assertUpdate(nanosecondsTimestamp,\n+                \"CREATE TABLE \" + tableName + \"(c_timestamp) AS VALUES \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.113', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111113', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111111', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111113' \", 12);\n+\n+        assertQuery(\"SHOW STATS FOR \" + tableName,\n+                \"SELECT * FROM VALUES \" +\n+                        \"('c_timestamp', null, null, null, null, null, null), \" +\n+                        \"(null, null, null, null, 12.0, null, null)\");\n+\n+        assertUpdate(nanosecondsTimestamp, \"ANALYZE \" + tableName, 12);\n+        assertQuery(\"SHOW STATS FOR \" + tableName,\n+                \"SELECT * FROM VALUES \" +\n+                        \"('c_timestamp', null, 9.0, 0.0, null, null, null), \" +\n+                        \"(null, null, null, null, 12.0, null, null)\");\n+\n+        assertUpdate(microsecondsTimestamp, \"ANALYZE \" + tableName, 12);\n+        assertQuery(\"SHOW STATS FOR \" + tableName,\n+                \"SELECT * FROM VALUES \" +\n+                        \"('c_timestamp', null, 6.0, 0.0, null, null, null), \" +\n+                        \"(null, null, null, null, 12.0, null, null)\");\n+\n+        assertUpdate(millisecondsTimestamp, \"ANALYZE \" + tableName, 12);\n+        assertQuery(\"SHOW STATS FOR \" + tableName,\n+                \"SELECT * FROM VALUES \" +\n+                        \"('c_timestamp', null, 3.0, 0.0, null, null, null), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyMzM4MQ==", "bodyText": "Added", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r498823381", "createdAt": "2020-10-02T13:32:19Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -6262,6 +6262,65 @@ public void testAnalyzeUnpartitionedTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testAnalyzeTableTimestampWithPrecision()\n+    {\n+        String catalog = getSession().getCatalog().get();\n+        Session nanosecondsTimestamp = Session.builder(getSession())\n+                // Disable column statistics collection when creating the table\n+                .setCatalogSessionProperty(catalog, \"collect_column_statistics_on_write\", \"false\")\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        Session microsecondsTimestamp = Session.builder(getSession())\n+                .setCatalogSessionProperty(catalog, \"timestamp_precision\", \"MICROSECONDS\")\n+                .build();\n+\n+        Session millisecondsTimestamp = getSession();\n+\n+        String tableName = \"test_analyze_timestamp_with_precision\";\n+\n+        assertUpdate(nanosecondsTimestamp,\n+                \"CREATE TABLE \" + tableName + \"(c_timestamp) AS VALUES \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.113', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111113', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111111', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111112', \" +\n+                        \"TIMESTAMP '1988-04-08 02:03:04.111111113' \", 12);\n+\n+        assertQuery(\"SHOW STATS FOR \" + tableName,\n+                \"SELECT * FROM VALUES \" +\n+                        \"('c_timestamp', null, null, null, null, null, null), \" +\n+                        \"(null, null, null, null, 12.0, null, null)\");\n+\n+        assertUpdate(nanosecondsTimestamp, \"ANALYZE \" + tableName, 12);\n+        assertQuery(\"SHOW STATS FOR \" + tableName,\n+                \"SELECT * FROM VALUES \" +\n+                        \"('c_timestamp', null, 9.0, 0.0, null, null, null), \" +\n+                        \"(null, null, null, null, 12.0, null, null)\");\n+\n+        assertUpdate(microsecondsTimestamp, \"ANALYZE \" + tableName, 12);\n+        assertQuery(\"SHOW STATS FOR \" + tableName,\n+                \"SELECT * FROM VALUES \" +\n+                        \"('c_timestamp', null, 6.0, 0.0, null, null, null), \" +\n+                        \"(null, null, null, null, 12.0, null, null)\");\n+\n+        assertUpdate(millisecondsTimestamp, \"ANALYZE \" + tableName, 12);\n+        assertQuery(\"SHOW STATS FOR \" + tableName,\n+                \"SELECT * FROM VALUES \" +\n+                        \"('c_timestamp', null, 3.0, 0.0, null, null, null), \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDQ1OQ=="}, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODg1MTE0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/DefaultApproximateCountDistinctAggregation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyMTo0OVrOHvxEkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyMTo0OVrOHvxEkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0OTEwNQ==", "bodyText": "Can you add a test within this commit?", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519849105", "createdAt": "2020-11-09T14:21:49Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/DefaultApproximateCountDistinctAggregation.java", "diffHunk": "@@ -75,7 +76,7 @@ public static void input(\n     public static void input(\n             @OperatorDependency(operator = XX_HASH_64, argumentTypes = \"T\") MethodHandle methodHandle,\n             @AggregationState HyperLogLogState state,\n-            @SqlType(\"T\") Slice value)\n+            @SqlType(\"T\") Object value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODg2MDUzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyMzo1OFrOHvxKdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDowNzoxM1rOHxzfgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MDYxMw==", "bodyText": "Do not use . getObjectValue, it's supposed to be used for sending output to the client.\nPlease use .getLong or .getObject, depending on type.isShort", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519850613", "createdAt": "2020-11-09T14:23:58Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "diffHunk": "@@ -453,9 +454,13 @@ private static OptionalDouble getDoubleValue(ConnectorSession session, Type type\n         return block.isNull(0) ? Optional.empty() : Optional.of(LocalDate.ofEpochDay(((SqlDate) type.getObjectValue(session, block, 0)).getDays()));\n     }\n \n-    private static OptionalLong getTimestampValue(Block block)\n+    private static OptionalLong getTimestampValue(ConnectorSession session, Type type, Block block)\n     {\n-        return block.isNull(0) ? OptionalLong.empty() : OptionalLong.of(floorDiv(block.getLong(0, 0), MICROSECONDS_PER_SECOND));\n+        if (block.isNull(0)) {\n+            return OptionalLong.empty();\n+        }\n+        long epochMicros = ((SqlTimestamp) type.getObjectValue(session, block, 0)).getEpochMicros();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkxMTQ0Mw==", "bodyText": "I followed the pattern from method below.\n    private static Optional<BigDecimal> getDecimalValue(ConnectorSession session, Type type, Block block)\n    {\n        return block.isNull(0) ? Optional.empty() : Optional.of(((SqlDecimal) type.getObjectValue(session, block, 0)).toBigDecimal());\n    }\nWhat is the motivation to not use it. It makes the code simpler and the method has well defined semantics, right?", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519911443", "createdAt": "2020-11-09T15:44:50Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "diffHunk": "@@ -453,9 +454,13 @@ private static OptionalDouble getDoubleValue(ConnectorSession session, Type type\n         return block.isNull(0) ? Optional.empty() : Optional.of(LocalDate.ofEpochDay(((SqlDate) type.getObjectValue(session, block, 0)).getDays()));\n     }\n \n-    private static OptionalLong getTimestampValue(Block block)\n+    private static OptionalLong getTimestampValue(ConnectorSession session, Type type, Block block)\n     {\n-        return block.isNull(0) ? OptionalLong.empty() : OptionalLong.of(floorDiv(block.getLong(0, 0), MICROSECONDS_PER_SECOND));\n+        if (block.isNull(0)) {\n+            return OptionalLong.empty();\n+        }\n+        long epochMicros = ((SqlTimestamp) type.getObjectValue(session, block, 0)).getEpochMicros();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MDYxMw=="}, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkxNzU5NA==", "bodyText": "Ok, so let me phrase this differently.\nI think we generally avoid \"the object representation\" as I think it's supposed to be for the client procol.\nAlthough i am aware javadoc doesn't say exactly this and we have some usages of the getObjectValue method outside of the communication impl.\nSo even, if it is the way I think it is, it is not documented.", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519917594", "createdAt": "2020-11-09T15:52:50Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "diffHunk": "@@ -453,9 +454,13 @@ private static OptionalDouble getDoubleValue(ConnectorSession session, Type type\n         return block.isNull(0) ? Optional.empty() : Optional.of(LocalDate.ofEpochDay(((SqlDate) type.getObjectValue(session, block, 0)).getDays()));\n     }\n \n-    private static OptionalLong getTimestampValue(Block block)\n+    private static OptionalLong getTimestampValue(ConnectorSession session, Type type, Block block)\n     {\n-        return block.isNull(0) ? OptionalLong.empty() : OptionalLong.of(floorDiv(block.getLong(0, 0), MICROSECONDS_PER_SECOND));\n+        if (block.isNull(0)) {\n+            return OptionalLong.empty();\n+        }\n+        long epochMicros = ((SqlTimestamp) type.getObjectValue(session, block, 0)).getEpochMicros();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MDYxMw=="}, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4NTkyMw==", "bodyText": "#5934", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r521985923", "createdAt": "2020-11-12T10:07:13Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "diffHunk": "@@ -453,9 +454,13 @@ private static OptionalDouble getDoubleValue(ConnectorSession session, Type type\n         return block.isNull(0) ? Optional.empty() : Optional.of(LocalDate.ofEpochDay(((SqlDate) type.getObjectValue(session, block, 0)).getDays()));\n     }\n \n-    private static OptionalLong getTimestampValue(Block block)\n+    private static OptionalLong getTimestampValue(ConnectorSession session, Type type, Block block)\n     {\n-        return block.isNull(0) ? OptionalLong.empty() : OptionalLong.of(floorDiv(block.getLong(0, 0), MICROSECONDS_PER_SECOND));\n+        if (block.isNull(0)) {\n+            return OptionalLong.empty();\n+        }\n+        long epochMicros = ((SqlTimestamp) type.getObjectValue(session, block, 0)).getEpochMicros();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MDYxMw=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODg2ODM5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNTozMlrOHvxPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNTozMlrOHvxPLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MTgyMw==", "bodyText": "Here we truncate picos-of-micro, and then truncate micros-of-second.\nThis is correct for \"min\" value, but not for the \"max\"\nAnyway, since the method is unused, please just remove it, not fix.", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519851823", "createdAt": "2020-11-09T14:25:32Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "diffHunk": "@@ -453,9 +454,13 @@ private static OptionalDouble getDoubleValue(ConnectorSession session, Type type\n         return block.isNull(0) ? Optional.empty() : Optional.of(LocalDate.ofEpochDay(((SqlDate) type.getObjectValue(session, block, 0)).getDays()));\n     }\n \n-    private static OptionalLong getTimestampValue(Block block)\n+    private static OptionalLong getTimestampValue(ConnectorSession session, Type type, Block block)\n     {\n-        return block.isNull(0) ? OptionalLong.empty() : OptionalLong.of(floorDiv(block.getLong(0, 0), MICROSECONDS_PER_SECOND));\n+        if (block.isNull(0)) {\n+            return OptionalLong.empty();\n+        }\n+        long epochMicros = ((SqlTimestamp) type.getObjectValue(session, block, 0)).getEpochMicros();\n+        return OptionalLong.of(floorDiv(epochMicros, MICROSECONDS_PER_SECOND));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODg3MzE5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNjozNFrOHvxSIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNjozNFrOHvxSIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MjU3Ng==", "bodyText": "How do you  know millis is the default?\nMaybe call withTimestampPrecision here too?\nor verify", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519852576", "createdAt": "2020-11-09T14:26:34Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -6336,6 +6336,64 @@ public void testAnalyzeUnpartitionedTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testAnalyzeTableTimestampWithPrecision()\n+    {\n+        String catalog = getSession().getCatalog().get();\n+        Session nanosecondsTimestamp = Session.builder(withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS))\n+                // Disable column statistics collection when creating the table\n+                .setCatalogSessionProperty(catalog, \"collect_column_statistics_on_write\", \"false\")\n+                .build();\n+        Session microsecondsTimestamp = withTimestampPrecision(getSession(), HiveTimestampPrecision.MICROSECONDS);\n+        Session millisecondsTimestamp = getSession();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODg3ODEyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNzozNFrOHvxVTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1MzowNVrOHv1QxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MzM4OA==", "bodyText": "It would be cleaner to drop the stats before running ANALYZE the second time, or create a new table", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519853388", "createdAt": "2020-11-09T14:27:34Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -6336,6 +6336,64 @@ public void testAnalyzeUnpartitionedTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testAnalyzeTableTimestampWithPrecision()\n+    {\n+        String catalog = getSession().getCatalog().get();\n+        Session nanosecondsTimestamp = Session.builder(withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS))\n+                // Disable column statistics collection when creating the table\n+                .setCatalogSessionProperty(catalog, \"collect_column_statistics_on_write\", \"false\")\n+                .build();\n+        Session microsecondsTimestamp = withTimestampPrecision(getSession(), HiveTimestampPrecision.MICROSECONDS);\n+        Session millisecondsTimestamp = getSession();\n+\n+        String tableName = \"test_analyze_timestamp_with_precision\";\n+\n+        try {\n+            assertUpdate(nanosecondsTimestamp,\n+                    \"CREATE TABLE \" + tableName + \"(c_timestamp) AS VALUES \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.119', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111999', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111111', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111999' \",\n+                    12);\n+\n+            assertQuery(\"SHOW STATS FOR \" + tableName,\n+                    \"SELECT * FROM VALUES \" +\n+                            \"('c_timestamp', null, null, null, null, null, null), \" +\n+                            \"(null, null, null, null, 12.0, null, null)\");\n+\n+            assertUpdate(nanosecondsTimestamp, \"ANALYZE \" + tableName, 12);\n+            assertQuery(\"SHOW STATS FOR \" + tableName,\n+                    \"SELECT * FROM VALUES \" +\n+                            \"('c_timestamp', null, 9.0, 0.0, null, null, null), \" +\n+                            \"(null, null, null, null, 12.0, null, null)\");\n+\n+            assertUpdate(microsecondsTimestamp, \"ANALYZE \" + tableName, 12);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkxNzc2NQ==", "bodyText": "I added dropping", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519917765", "createdAt": "2020-11-09T15:53:05Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -6336,6 +6336,64 @@ public void testAnalyzeUnpartitionedTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testAnalyzeTableTimestampWithPrecision()\n+    {\n+        String catalog = getSession().getCatalog().get();\n+        Session nanosecondsTimestamp = Session.builder(withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS))\n+                // Disable column statistics collection when creating the table\n+                .setCatalogSessionProperty(catalog, \"collect_column_statistics_on_write\", \"false\")\n+                .build();\n+        Session microsecondsTimestamp = withTimestampPrecision(getSession(), HiveTimestampPrecision.MICROSECONDS);\n+        Session millisecondsTimestamp = getSession();\n+\n+        String tableName = \"test_analyze_timestamp_with_precision\";\n+\n+        try {\n+            assertUpdate(nanosecondsTimestamp,\n+                    \"CREATE TABLE \" + tableName + \"(c_timestamp) AS VALUES \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.119', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111999', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111111', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111115', \" +\n+                            \"TIMESTAMP '1988-04-08 02:03:04.111111999' \",\n+                    12);\n+\n+            assertQuery(\"SHOW STATS FOR \" + tableName,\n+                    \"SELECT * FROM VALUES \" +\n+                            \"('c_timestamp', null, null, null, null, null, null), \" +\n+                            \"(null, null, null, null, 12.0, null, null)\");\n+\n+            assertUpdate(nanosecondsTimestamp, \"ANALYZE \" + tableName, 12);\n+            assertQuery(\"SHOW STATS FOR \" + tableName,\n+                    \"SELECT * FROM VALUES \" +\n+                            \"('c_timestamp', null, 9.0, 0.0, null, null, null), \" +\n+                            \"(null, null, null, null, 12.0, null, null)\");\n+\n+            assertUpdate(microsecondsTimestamp, \"ANALYZE \" + tableName, 12);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MzM4OA=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODg3OTU1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNzo1MVrOHvxWJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNzo1MVrOHvxWJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MzYwNw==", "bodyText": "move first arg to its own line too", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519853607", "createdAt": "2020-11-09T14:27:51Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -6336,6 +6336,64 @@ public void testAnalyzeUnpartitionedTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testAnalyzeTableTimestampWithPrecision()\n+    {\n+        String catalog = getSession().getCatalog().get();\n+        Session nanosecondsTimestamp = Session.builder(withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS))\n+                // Disable column statistics collection when creating the table\n+                .setCatalogSessionProperty(catalog, \"collect_column_statistics_on_write\", \"false\")\n+                .build();\n+        Session microsecondsTimestamp = withTimestampPrecision(getSession(), HiveTimestampPrecision.MICROSECONDS);\n+        Session millisecondsTimestamp = getSession();\n+\n+        String tableName = \"test_analyze_timestamp_with_precision\";\n+\n+        try {\n+            assertUpdate(nanosecondsTimestamp,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODg4MjQwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyODozMlrOHvxYBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyODozMlrOHvxYBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1NDA4Nw==", "bodyText": "squash into prev commit?", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519854087", "createdAt": "2020-11-09T14:28:32Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -5750,6 +5750,40 @@ public void testCollectColumnStatisticsOnCreateTable()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testCollectStatisticsOnCreateTableTimestampWithPrecision()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTMxODIxOnYy", "diffSide": "LEFT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1ODoxN1rOHv1iOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyMTowNFrOHv7pgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyMjIzMw==", "bodyText": "Technically it would be cleaner to remove this in a separate commit", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r519922233", "createdAt": "2020-11-09T15:58:17Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "diffHunk": "@@ -453,11 +454,6 @@ private static OptionalDouble getDoubleValue(ConnectorSession session, Type type\n         return block.isNull(0) ? Optional.empty() : Optional.of(LocalDate.ofEpochDay(((SqlDate) type.getObjectValue(session, block, 0)).getDays()));\n     }\n \n-    private static OptionalLong getTimestampValue(Block block)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMjQwMw==", "bodyText": "You are right. This should be done together with \"drop min/max...\"", "url": "https://github.com/trinodb/trino/pull/5392#discussion_r520022403", "createdAt": "2020-11-09T18:21:04Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/Statistics.java", "diffHunk": "@@ -453,11 +454,6 @@ private static OptionalDouble getDoubleValue(ConnectorSession session, Type type\n         return block.isNull(0) ? Optional.empty() : Optional.of(LocalDate.ofEpochDay(((SqlDate) type.getObjectValue(session, block, 0)).getDays()));\n     }\n \n-    private static OptionalLong getTimestampValue(Block block)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyMjIzMw=="}, "originalCommit": null, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4777, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}