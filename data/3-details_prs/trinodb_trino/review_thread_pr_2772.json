{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODA4Nzc4", "number": 2772, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNToyMzozMlrODeR8Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOTo0Njo1OVrODeSxQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDc3NzgyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/HttpRequestSessionContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNToyMzozMlrOFnVkYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNzo0ODoxOVrOFnWJiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc5MjE2MA==", "bodyText": "I don't think this method does what you think:\n     * @return the HTTP header value. If the HTTP header is not present then\n     *         {@code null} is returned. If the HTTP header is present but has no\n     *         value then the empty string is returned. If the HTTP header is present\n     *         more than once then the values of joined together and separated by a ','\n     *         character.\n\nI think you want headers.getRequestHeaders().getFirst(name)", "url": "https://github.com/trinodb/trino/pull/2772#discussion_r376792160", "createdAt": "2020-02-09T15:23:32Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/HttpRequestSessionContext.java", "diffHunk": "@@ -109,32 +109,32 @@\n     private final boolean clientTransactionSupport;\n     private final String clientInfo;\n \n-    public HttpRequestSessionContext(HeaderSupport forwardedHeaderSupport, HttpServletRequest servletRequest)\n+    public HttpRequestSessionContext(HeaderSupport forwardedHeaderSupport, HttpHeaders headers, String remoteAddress, Optional<Identity> authenticatedIdentity)\n             throws WebApplicationException\n     {\n-        catalog = trimEmptyToNull(servletRequest.getHeader(PRESTO_CATALOG));\n-        schema = trimEmptyToNull(servletRequest.getHeader(PRESTO_SCHEMA));\n-        path = trimEmptyToNull(servletRequest.getHeader(PRESTO_PATH));\n+        catalog = trimEmptyToNull(headers.getHeaderString(PRESTO_CATALOG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMDAzNQ==", "bodyText": "Maybe we should have a helper method that fails if the header is specified multiple times.", "url": "https://github.com/trinodb/trino/pull/2772#discussion_r376800035", "createdAt": "2020-02-09T17:22:17Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/HttpRequestSessionContext.java", "diffHunk": "@@ -109,32 +109,32 @@\n     private final boolean clientTransactionSupport;\n     private final String clientInfo;\n \n-    public HttpRequestSessionContext(HeaderSupport forwardedHeaderSupport, HttpServletRequest servletRequest)\n+    public HttpRequestSessionContext(HeaderSupport forwardedHeaderSupport, HttpHeaders headers, String remoteAddress, Optional<Identity> authenticatedIdentity)\n             throws WebApplicationException\n     {\n-        catalog = trimEmptyToNull(servletRequest.getHeader(PRESTO_CATALOG));\n-        schema = trimEmptyToNull(servletRequest.getHeader(PRESTO_SCHEMA));\n-        path = trimEmptyToNull(servletRequest.getHeader(PRESTO_PATH));\n+        catalog = trimEmptyToNull(headers.getHeaderString(PRESTO_CATALOG));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc5MjE2MA=="}, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTY3Mw==", "bodyText": "That would be a backwards incompatible change since the current code does \"If there are multiple headers with the same name, this method returns the first head in the request.\"", "url": "https://github.com/trinodb/trino/pull/2772#discussion_r376801673", "createdAt": "2020-02-09T17:48:19Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/HttpRequestSessionContext.java", "diffHunk": "@@ -109,32 +109,32 @@\n     private final boolean clientTransactionSupport;\n     private final String clientInfo;\n \n-    public HttpRequestSessionContext(HeaderSupport forwardedHeaderSupport, HttpServletRequest servletRequest)\n+    public HttpRequestSessionContext(HeaderSupport forwardedHeaderSupport, HttpHeaders headers, String remoteAddress, Optional<Identity> authenticatedIdentity)\n             throws WebApplicationException\n     {\n-        catalog = trimEmptyToNull(servletRequest.getHeader(PRESTO_CATALOG));\n-        schema = trimEmptyToNull(servletRequest.getHeader(PRESTO_SCHEMA));\n-        path = trimEmptyToNull(servletRequest.getHeader(PRESTO_PATH));\n+        catalog = trimEmptyToNull(headers.getHeaderString(PRESTO_CATALOG));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc5MjE2MA=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDkxMzk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/dispatcher/QueuedStatementResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOTo0Njo1OVrOFnWqBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOTo0Njo1OVrOFnWqBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwOTk5MQ==", "bodyText": "consider inlining this", "url": "https://github.com/trinodb/trino/pull/2772#discussion_r376809991", "createdAt": "2020-02-09T19:46:59Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/QueuedStatementResource.java", "diffHunk": "@@ -150,13 +154,18 @@ public Response postStatement(\n             String statement,\n             @HeaderParam(X_FORWARDED_PROTO) String xForwardedProto,\n             @Context HttpServletRequest servletRequest,\n+            @Context HttpHeaders httpHeaders,\n             @Context UriInfo uriInfo)\n     {\n         if (isNullOrEmpty(statement)) {\n             throw badRequest(BAD_REQUEST, \"SQL statement is empty\");\n         }\n \n-        SessionContext sessionContext = new HttpRequestSessionContext(forwardedHeaderSupport, servletRequest);\n+        String remoteAddress = servletRequest.getRemoteAddr();\n+        Optional<Identity> identity = Optional.ofNullable((Identity) servletRequest.getAttribute(AUTHENTICATED_IDENTITY));\n+        MultivaluedMap<String, String> headers = httpHeaders.getRequestHeaders();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c7425cbddb138687cd942864d4b73b5a0d3563"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 895, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}