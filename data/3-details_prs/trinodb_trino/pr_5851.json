{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDQwNzM5", "number": 5851, "title": "Use consistent NaN behavior for max functions", "bodyText": "NaN is effectively ignored, unless it is the only value. In other words, it is treated as the maximum value for min, and the minimum value for max.\nFrom an implementation point of view, since it normally compares as the maximal value, we only need to special case it for maximum by reversing its comparator.", "createdAt": "2020-11-06T01:44:01Z", "url": "https://github.com/trinodb/trino/pull/5851", "merged": true, "mergeCommit": {"oid": "278f880e4bbe8e2cd12e40b605c6fcd886c1e8c0"}, "closed": true, "closedAt": "2020-11-06T23:43:28Z", "author": {"login": "electrum"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZtKqbgFqTUyNDgwNjk0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ9ORCABqjM5Njg4NTkzMzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0ODA2OTQ3", "url": "https://github.com/trinodb/trino/pull/5851#pullrequestreview-524806947", "createdAt": "2020-11-06T02:01:30Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowMTozMVrOHudg4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowMTozMVrOHudg4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MDA5Ng==", "bodyText": "maybe add a test with multiple NaNs", "url": "https://github.com/trinodb/trino/pull/5851#discussion_r518480096", "createdAt": "2020-11-06T02:01:31Z", "author": {"login": "dain"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -1169,15 +1169,23 @@ public void testGreatest()\n         assertFunction(\"greatest(1.5E0, 2.3E0)\", DOUBLE, 2.3);\n         assertFunction(\"greatest(-1.5E0, -2.3E0)\", DOUBLE, -1.5);\n         assertFunction(\"greatest(-1.5E0, -2.3E0, -5/3)\", DOUBLE, -1.0);\n-        assertFunction(\"greatest(1.5E0, -1.0E0 / 0.0E0, 1.0E0 / 0.0E0)\", DOUBLE, Double.POSITIVE_INFINITY);\n+        assertFunction(\"greatest(1.5E0, -infinity(), infinity())\", DOUBLE, Double.POSITIVE_INFINITY);\n         assertFunction(\"greatest(5, 4, CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n-\n-        // float\n-        assertFunction(\"greatest(REAL '1.5', 2.3E0)\", DOUBLE, 2.3);\n-        assertFunction(\"greatest(REAL '-1.5', -2.3E0)\", DOUBLE, (double) -1.5f);\n-        assertFunction(\"greatest(-1.5E0, REAL '-2.3', -5/3)\", DOUBLE, -1.0);\n-        assertFunction(\"greatest(REAL '1.5', REAL '-1.0' / 0.0E0, 1.0E0 / REAL '0.0')\", DOUBLE, (double) (1.0f / 0.0f));\n-        assertFunction(\"greatest(5, REAL '4', CAST(NULL as DOUBLE), 3)\", DOUBLE, null);\n+        assertFunction(\"greatest(NaN(), 5, 4, 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, NaN(), 3)\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(5, 4, 3, NaN())\", DOUBLE, 5.0);\n+        assertFunction(\"greatest(NaN())\", DOUBLE, Double.NaN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2afb9b6dd52b46484bf61e243dcd5545cf232f3", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/c2afb9b6dd52b46484bf61e243dcd5545cf232f3", "committedDate": "2020-11-06T20:45:00Z", "message": "Use consistent NaN behavior for max functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c2afb9b6dd52b46484bf61e243dcd5545cf232f3", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/c2afb9b6dd52b46484bf61e243dcd5545cf232f3", "committedDate": "2020-11-06T20:45:00Z", "message": "Use consistent NaN behavior for max functions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2872, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}