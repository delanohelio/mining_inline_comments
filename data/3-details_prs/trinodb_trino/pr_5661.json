{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NTIwODM1", "number": 5661, "title": "Fix validation of expressions in ORDER BY for DISTINCT queries", "bodyText": "Fixes two issues:\n\n\nThe derived schema was using fully qualified aliases from the underlying tables.\nThis resulted in the following query succeeding, when it should fail due to\ntable t not being visible in the outer query: (#5660)\n SELECT t.a FROM (SELECT t.* FROM (VALUES 1) t(a))\n\n\n\nValidation of DISTINCT with ORDER BY was only considering syntactic aliases, but it\nshould also consider implied aliases derived from the names of the underlying columns. (#5647)\n\n\nFixes #5660, #5647", "createdAt": "2020-10-22T19:47:38Z", "url": "https://github.com/trinodb/trino/pull/5661", "merged": true, "mergeCommit": {"oid": "576ad6be769f10282b069733bbe80ef6776ff529"}, "closed": true, "closedAt": "2020-10-27T20:30:32Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVb7yRgBqjM5MTU0NDEyNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWcXIzgFqTUxNzIyOTk1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzIzMjgz", "url": "https://github.com/trinodb/trino/pull/5661#pullrequestreview-516323283", "createdAt": "2020-10-25T04:06:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNDowNjo0OVrOHn2LQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNDoyNTowNFrOHn2P-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NDEyOA==", "bodyText": "is the check removed because it is too obvious? I think it might be still good to keep it as a \"checkState\" from the method's perspective, thoughts?", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r511544128", "createdAt": "2020-10-25T04:06:49Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2214,9 +2213,22 @@ private Scope computeAndAssignOutputScope(QuerySpecification node, Optional<Scop\n \n             for (SelectItem item : node.getSelect().getSelectItems()) {\n                 if (item instanceof AllColumns) {\n-                    List<Field> itemOutputFields = analysis.getSelectAllResultFields((AllColumns) item);\n-                    checkNotNull(itemOutputFields, \"output fields is null for select item %s\", item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NTMyMg==", "bodyText": "would it make sense to make CanonicalizationAware#canonicalize public so that definition of canonicalization remains in one place?", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r511545322", "createdAt": "2020-10-25T04:24:43Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2259,6 +2271,14 @@ else if (expression instanceof DereferenceExpression) {\n             return createAndAssignScope(node, scope, outputFields.build());\n         }\n \n+        private String canonicalize(Identifier identifier)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NTMzOQ==", "bodyText": "why do we need to standardize aliases here if getAliases(Select node)  returns CanonicalizationAware  objects anyway?", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r511545339", "createdAt": "2020-10-25T04:25:04Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2214,9 +2213,22 @@ private Scope computeAndAssignOutputScope(QuerySpecification node, Optional<Scop\n \n             for (SelectItem item : node.getSelect().getSelectItems()) {\n                 if (item instanceof AllColumns) {\n-                    List<Field> itemOutputFields = analysis.getSelectAllResultFields((AllColumns) item);\n-                    checkNotNull(itemOutputFields, \"output fields is null for select item %s\", item);\n-                    outputFields.addAll(itemOutputFields);\n+                    AllColumns allColumns = (AllColumns) item;\n+\n+                    List<Field> fields = analysis.getSelectAllResultFields(allColumns);\n+                    for (int i = 0; i < fields.size(); i++) {\n+                        Field field = fields.get(i);\n+\n+                        Optional<String> name;\n+                        if (!allColumns.getAliases().isEmpty()) {\n+                            name = Optional.of(canonicalize(allColumns.getAliases().get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f2da52a959e9daf5ebd5b6fe219f6b2f5431315", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/8f2da52a959e9daf5ebd5b6fe219f6b2f5431315", "committedDate": "2020-10-26T22:11:46Z", "message": "Fix alias derivation for .* expression\n\nThe derived schema was using fully qualified aliases from the underlying tables.\nThis resulted in the following query succeeding, when it should fail due to\ntable t not being visible in the outer query:\n\n    SELECT t.a FROM (SELECT t.* FROM (VALUES 1) t(a))"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "599ab0ff6d89d2c00786d274915e713735aa8afd", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/599ab0ff6d89d2c00786d274915e713735aa8afd", "committedDate": "2020-10-26T22:13:02Z", "message": "Fix validation of expressions in ORDER BY for DISTINCT queries\n\nThe validation was only considering syntactic aliases, but it\nshould also consider implied aliases derived from the names\nof the underlying columns."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "599ab0ff6d89d2c00786d274915e713735aa8afd", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/599ab0ff6d89d2c00786d274915e713735aa8afd", "committedDate": "2020-10-26T22:13:02Z", "message": "Fix validation of expressions in ORDER BY for DISTINCT queries\n\nThe validation was only considering syntactic aliases, but it\nshould also consider implied aliases derived from the names\nof the underlying columns."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjI5OTUz", "url": "https://github.com/trinodb/trino/pull/5661#pullrequestreview-517229953", "createdAt": "2020-10-26T22:46:11Z", "commit": {"oid": "599ab0ff6d89d2c00786d274915e713735aa8afd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3096, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}