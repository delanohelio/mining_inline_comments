{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTQwMzAx", "number": 5046, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDoxNToyMFrOEg4Hbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDoxODoxN1rOEnxecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTA5Mjk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDoxNToyMFrOHN5keA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDoxNToyMFrOHN5keA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMzNjc2MA==", "bodyText": "Do not use undescores in method names", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r484336760", "createdAt": "2020-09-07T10:15:20Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -265,6 +269,32 @@ public void testFromUnixTimeWithTimeZone()\n         assertFunction(format(\"from_unixtime(7200, '%s')\", zoneId), TIMESTAMP_WITH_TIME_ZONE, toTimestampWithTimeZone(expected));\n     }\n \n+    @Test\n+    public void testFromUnixTimeNanos_long()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTExMTEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDoyMDo1NlrOHN5vog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDoyMDo1NlrOHN5vog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMzOTYxOA==", "bodyText": "It seems that you can use DateTimeTestingUtils.sqlTimestampOf to construct expected value.\nIf not, please extract the method needed to construct expected value.\nPreferably the test here would be just a series of:\nassertFunction(from_unixtime_nanos(....), TIMESTAMP_NANOS, sqlTimestampOf(......)\nassertFunction(from_unixtime_nanos(....), TIMESTAMP_NANOS, sqlTimestampOf(......)", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r484339618", "createdAt": "2020-09-07T10:20:56Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -265,6 +269,32 @@ public void testFromUnixTimeWithTimeZone()\n         assertFunction(format(\"from_unixtime(7200, '%s')\", zoneId), TIMESTAMP_WITH_TIME_ZONE, toTimestampWithTimeZone(expected));\n     }\n \n+    @Test\n+    public void testFromUnixTimeNanos_long()\n+    {\n+        LocalDateTime dateTime = LocalDateTime.of(2001, 1, 22, 3, 4, 5, 123456789);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTExNzMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDoyMjo0NFrOHN5zRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDoyMjo0NFrOHN5zRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0MDU1MQ==", "bodyText": "use unixTimeNanos instead arg", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r484340551", "createdAt": "2020-09-07T10:22:44Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +144,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / NANOSECONDS_IN_SECOND;\n+        long nanosOfSecond = unixTimeNanos % NANOSECONDS_IN_SECOND;\n+        long picosOfSecond = 1000L * nanosOfSecond;\n+        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @LiteralParameters({\"p\", \"s\"})\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(\"decimal(p, s)\") Slice arg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTE1NTM2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDozNDo0M1rOHN6KFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDozNDo0M1rOHN6KFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NjM5MA==", "bodyText": "This is incorrect because it returns BigInteger representing whole \"unscaled\" value. Not just integral part.\nThat is for DECIMAL 123.456 you will get 123456.\nHere we want to look at just integral part (module the fact that we want to add 1 to it if factional part is >= 0.5)", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r484346390", "createdAt": "2020-09-07T10:34:43Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +144,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / NANOSECONDS_IN_SECOND;\n+        long nanosOfSecond = unixTimeNanos % NANOSECONDS_IN_SECOND;\n+        long picosOfSecond = 1000L * nanosOfSecond;\n+        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @LiteralParameters({\"p\", \"s\"})\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(\"decimal(p, s)\") Slice arg)\n+    {\n+        BigInteger unixTimeNanos = Decimals.decodeUnscaledValue(arg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTE1NzYzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDozNToyNFrOHN6LYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDozNToyNFrOHN6LYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NjcyMw==", "bodyText": "use PICOSECONDS_PER_NANOSECOND", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r484346723", "createdAt": "2020-09-07T10:35:24Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +144,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / NANOSECONDS_IN_SECOND;\n+        long nanosOfSecond = unixTimeNanos % NANOSECONDS_IN_SECOND;\n+        long picosOfSecond = 1000L * nanosOfSecond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTE2MTY5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDozNjozOVrOHN6Ntg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDozNjozOVrOHN6Ntg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NzMxOA==", "bodyText": "Use Timestamps.PICOSECONDS_PER_NANOSECOND", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r484347318", "createdAt": "2020-09-07T10:36:39Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +144,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / NANOSECONDS_IN_SECOND;\n+        long nanosOfSecond = unixTimeNanos % NANOSECONDS_IN_SECOND;\n+        long picosOfSecond = 1000L * nanosOfSecond;\n+        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @LiteralParameters({\"p\", \"s\"})\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(\"decimal(p, s)\") Slice arg)\n+    {\n+        BigInteger unixTimeNanos = Decimals.decodeUnscaledValue(arg);\n+        long epochSeconds = unixTimeNanos.divide(BigInteger.valueOf(NANOSECONDS_IN_SECOND)).longValue();\n+        long nanosOfSecond = unixTimeNanos.mod(BigInteger.valueOf(NANOSECONDS_IN_SECOND)).longValue();\n+        long picosOfSecond = 1000L * nanosOfSecond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTE2MjYxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDozNjo1NVrOHN6ORQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDozNjo1NVrOHN6ORQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NzQ2MQ==", "bodyText": "Use Timestamps.NANOSECONDS_PER_SECOND", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r484347461", "createdAt": "2020-09-07T10:36:55Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -77,6 +81,7 @@\n     private static final int MILLISECONDS_IN_MINUTE = 60 * MILLISECONDS_IN_SECOND;\n     private static final int MILLISECONDS_IN_HOUR = 60 * MILLISECONDS_IN_MINUTE;\n     private static final int MILLISECONDS_IN_DAY = 24 * MILLISECONDS_IN_HOUR;\n+    private static final long NANOSECONDS_IN_SECOND = 1_000_000_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTM4MjQ1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDoxNzozMFrOHPs5oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDoxNzozMFrOHPs5oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyNjMzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long picosOfSecond = Timestamps.PICOSECONDS_PER_NANOSECOND * nanosOfSecond;\n          \n          \n            \n                    long picosOfSecond =  nanosOfSecond * Timestamps.PICOSECONDS_PER_NANOSECOND;", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r486226336", "createdAt": "2020-09-10T10:17:30Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;\n+        long picosOfSecond = Timestamps.PICOSECONDS_PER_NANOSECOND * nanosOfSecond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTM5Mzg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDoyMDoyOFrOHPtAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDoyMDoyOFrOHPtAgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyODA5Nw==", "bodyText": "put it below testFromUnixTime", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r486228097", "createdAt": "2020-09-10T10:20:28Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -265,6 +265,16 @@ public void testFromUnixTimeWithTimeZone()\n         assertFunction(format(\"from_unixtime(7200, '%s')\", zoneId), TIMESTAMP_WITH_TIME_ZONE, toTimestampWithTimeZone(expected));\n     }\n \n+    @Test\n+    public void testFromUnixTimeNanos()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTQwMDYxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDoyMjoyMlrOHPtEjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo0NTozM1rOHVZtEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyOTEzMg==", "bodyText": "Shouldn't we round in such case? @findepi @martint ?", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r486229132", "createdAt": "2020-09-10T10:22:22Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -265,6 +265,16 @@ public void testFromUnixTimeWithTimeZone()\n         assertFunction(format(\"from_unixtime(7200, '%s')\", zoneId), TIMESTAMP_WITH_TIME_ZONE, toTimestampWithTimeZone(expected));\n     }\n \n+    @Test\n+    public void testFromUnixTimeNanos()\n+    {\n+        assertFunction(\"from_unixtime_nanos(1234567890123456789)\", TIMESTAMP_NANOS, sqlTimestampOf(9, 1234567890L, 123456789));\n+        assertFunction(\"from_unixtime_nanos(1234567890000000000)\", TIMESTAMP_NANOS, sqlTimestampOf(9, 1234567890L, 0));\n+        assertFunction(\"from_unixtime_nanos(999999999)\", TIMESTAMP_NANOS, sqlTimestampOf(9, 0, 999999999));\n+        assertFunction(\"from_unixtime_nanos(DECIMAL '12345678900123456789')\", TIMESTAMP_NANOS, sqlTimestampOf(9, 12345678900L, 123456789));\n+        assertFunction(\"from_unixtime_nanos(DECIMAL '12345678900123456789.999')\", TIMESTAMP_NANOS, sqlTimestampOf(9, 12345678900L, 123456789));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMzM4OA==", "bodyText": "It should either round or fail, but truncation is inconsistent with datetime semantics in the engine.", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r490623388", "createdAt": "2020-09-17T23:52:19Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -265,6 +265,16 @@ public void testFromUnixTimeWithTimeZone()\n         assertFunction(format(\"from_unixtime(7200, '%s')\", zoneId), TIMESTAMP_WITH_TIME_ZONE, toTimestampWithTimeZone(expected));\n     }\n \n+    @Test\n+    public void testFromUnixTimeNanos()\n+    {\n+        assertFunction(\"from_unixtime_nanos(1234567890123456789)\", TIMESTAMP_NANOS, sqlTimestampOf(9, 1234567890L, 123456789));\n+        assertFunction(\"from_unixtime_nanos(1234567890000000000)\", TIMESTAMP_NANOS, sqlTimestampOf(9, 1234567890L, 0));\n+        assertFunction(\"from_unixtime_nanos(999999999)\", TIMESTAMP_NANOS, sqlTimestampOf(9, 0, 999999999));\n+        assertFunction(\"from_unixtime_nanos(DECIMAL '12345678900123456789')\", TIMESTAMP_NANOS, sqlTimestampOf(9, 12345678900L, 123456789));\n+        assertFunction(\"from_unixtime_nanos(DECIMAL '12345678900123456789.999')\", TIMESTAMP_NANOS, sqlTimestampOf(9, 12345678900L, 123456789));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyOTEzMg=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMzI4Mg==", "bodyText": "ok I'll change it to fail", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r492203282", "createdAt": "2020-09-21T16:45:33Z", "author": {"login": "alec-heif"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -265,6 +265,16 @@ public void testFromUnixTimeWithTimeZone()\n         assertFunction(format(\"from_unixtime(7200, '%s')\", zoneId), TIMESTAMP_WITH_TIME_ZONE, toTimestampWithTimeZone(expected));\n     }\n \n+    @Test\n+    public void testFromUnixTimeNanos()\n+    {\n+        assertFunction(\"from_unixtime_nanos(1234567890123456789)\", TIMESTAMP_NANOS, sqlTimestampOf(9, 1234567890L, 123456789));\n+        assertFunction(\"from_unixtime_nanos(1234567890000000000)\", TIMESTAMP_NANOS, sqlTimestampOf(9, 1234567890L, 0));\n+        assertFunction(\"from_unixtime_nanos(999999999)\", TIMESTAMP_NANOS, sqlTimestampOf(9, 0, 999999999));\n+        assertFunction(\"from_unixtime_nanos(DECIMAL '12345678900123456789')\", TIMESTAMP_NANOS, sqlTimestampOf(9, 12345678900L, 123456789));\n+        assertFunction(\"from_unixtime_nanos(DECIMAL '12345678900123456789.999')\", TIMESTAMP_NANOS, sqlTimestampOf(9, 12345678900L, 123456789));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyOTEzMg=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTQwMjk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDoyMzowMlrOHPtF6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDoyMzowMlrOHPtF6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyOTQ4MA==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r486229480", "createdAt": "2020-09-10T10:23:02Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -231,8 +232,7 @@ public void testFromUnixTimeWithOffset()\n         DateTime expected = new DateTime(dateTime, getDateTimeZone(getTimeZoneKeyForOffset((timeZoneHoursOffset * 60L) + timezoneMinutesOffset)));\n         assertFunction(\"from_unixtime(\" + seconds + \", \" + timeZoneHoursOffset + \", \" + timezoneMinutesOffset + \")\", TIMESTAMP_WITH_TIME_ZONE, toTimestampWithTimeZone(expected));\n \n-        // test invalid minute offsets\n-        assertInvalidFunction(\"from_unixtime(0, 1, 10000)\", INVALID_FUNCTION_ARGUMENT);\n+        // test invalid minute offsets assertInvalidFunction(\"from_unixtime(0, 1, 10000)\", INVALID_FUNCTION_ARGUMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTQwODkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/testing/DateTimeTestingUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDoyNDo0OFrOHPtJiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDoyNDo0OFrOHPtJiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzMDQwOA==", "bodyText": "I do not see a benefit of adding this method vs using SqlTimestamp.newInstance(precision, epochMicros, picosOfMicro) directly in test", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r486230408", "createdAt": "2020-09-10T10:24:48Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/testing/DateTimeTestingUtils.java", "diffHunk": "@@ -43,6 +45,13 @@ public static SqlTimestamp sqlTimestampOf(\n         return sqlTimestampOf(precision, LocalDateTime.of(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisToNanos(millisOfSecond)));\n     }\n \n+    public static SqlTimestamp sqlTimestampOf(int precision, long epochSeconds, int epochNanos)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTQ0NDI2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDozNDozNlrOHPteqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxNzo1MVrOHVtCtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNTgxNw==", "bodyText": "You also need a version takes short version of decimal, which is represented as long.\nOtherwise call like this one from_unixtime_nanos(DECIMAL '123456789) will fail.\nYou can group two implementation in internal static class. See https://github.com/prestosql/presto/blob/2379c52ead0ca9f50d89fd75aa25e885a81118fa/presto-main/src/main/java/io/prestosql/operator/scalar/MathFunctions.java#L140-L166 as an example", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r486235817", "createdAt": "2020-09-10T10:34:36Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;\n+        long picosOfSecond = Timestamps.PICOSECONDS_PER_NANOSECOND * nanosOfSecond;\n+        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @LiteralParameters({\"p\", \"s\"})\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@LiteralParameter(\"s\") long numScale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanosDecimal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNDUwMA==", "bodyText": "is there somewhere where the implementation details of the short version of decimal are written up? specifically i'm wondering how a non-integer SHORT decimal is represented (e.g. DECIMAL '123.456')", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r492214500", "createdAt": "2020-09-21T17:04:52Z", "author": {"login": "alec-heif"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;\n+        long picosOfSecond = Timestamps.PICOSECONDS_PER_NANOSECOND * nanosOfSecond;\n+        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @LiteralParameters({\"p\", \"s\"})\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@LiteralParameter(\"s\") long numScale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanosDecimal)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNTgxNw=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNTAxOA==", "bodyText": "The current branch works for integer SHORT decimals but since we want to now support either rounding or throwing on non-integer DECIMALS I'll now need to worry about this.", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r492215018", "createdAt": "2020-09-21T17:05:45Z", "author": {"login": "alec-heif"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;\n+        long picosOfSecond = Timestamps.PICOSECONDS_PER_NANOSECOND * nanosOfSecond;\n+        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @LiteralParameters({\"p\", \"s\"})\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@LiteralParameter(\"s\") long numScale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanosDecimal)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNTgxNw=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMDExOQ==", "bodyText": "i'm wondering how a non-integer SHORT decimal is represented\n\nI am not sure if it is written up anywhere. We basically keep the digits and the sign in the value. And where the decimal dot should be put is derived from type parameters.", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r492520119", "createdAt": "2020-09-22T07:17:51Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;\n+        long picosOfSecond = Timestamps.PICOSECONDS_PER_NANOSECOND * nanosOfSecond;\n+        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @LiteralParameters({\"p\", \"s\"})\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@LiteralParameter(\"s\") long numScale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanosDecimal)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNTgxNw=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTg0ODkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0NzowMVrOHT5MIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzozMDoyMVrOHVbT6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMTk4NQ==", "bodyText": "This needs to use floorDiv and floorMod to produce correct results when the input is negative. In particular, nanosOfSecond should never be negative", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r490621985", "createdAt": "2020-09-17T23:47:01Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5MDMzMQ==", "bodyText": "ah interesting, do we need to consider negative unix timestamps as valid? I would prefer to throw when they are encountered.", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r492090331", "createdAt": "2020-09-21T14:25:28Z", "author": {"login": "alec-heif"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMTk4NQ=="}, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNjcxNw==", "bodyText": "I don't see why not.\nFrom wikipedia (https://en.wikipedia.org/wiki/Unix_time)\n\nThe Unix time number is zero at the Unix epoch, and increases by exactly 86400 per day since the epoch. Thus 2004-09-16T00:00:00Z, 12677 days after the epoch, is represented by the Unix time number 12677 \u00d7 86400 = 1095292800. This can be extended backwards from the epoch too, using negative numbers;", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r492226717", "createdAt": "2020-09-21T17:25:38Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMTk4NQ=="}, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyOTYxMA==", "bodyText": "\ud83d\udc4d ok will do", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r492229610", "createdAt": "2020-09-21T17:30:21Z", "author": {"login": "alec-heif"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMTk4NQ=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTg0OTU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0NzoyM1rOHT5MfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0NzoyM1rOHT5MfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMjA3Ng==", "bodyText": "Static import this constant", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r490622076", "createdAt": "2020-09-17T23:47:23Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;\n+        long picosOfSecond = Timestamps.PICOSECONDS_PER_NANOSECOND * nanosOfSecond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTg1MTMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0ODoyNVrOHT5NgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo0ODoyNVrOHT5NgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMjMzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static LongTimestamp fromUnixTimeNanos(@LiteralParameter(\"s\") long numScale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanosDecimal)\n          \n          \n            \n                public static LongTimestamp fromUnixTimeNanos(@LiteralParameter(\"s\") long scale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanos)", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r490622336", "createdAt": "2020-09-17T23:48:25Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;\n+        long picosOfSecond = Timestamps.PICOSECONDS_PER_NANOSECOND * nanosOfSecond;\n+        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @LiteralParameters({\"p\", \"s\"})\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@LiteralParameter(\"s\") long numScale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanosDecimal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTg1NTA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1MDoyNlrOHT5PpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1MDoyNlrOHT5PpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMjg4NQ==", "bodyText": "These need floorDiv and floorMod semantics, per comment above.", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r490622885", "createdAt": "2020-09-17T23:50:26Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -139,6 +146,28 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / Timestamps.NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % Timestamps.NANOSECONDS_PER_SECOND;\n+        long picosOfSecond = Timestamps.PICOSECONDS_PER_NANOSECOND * nanosOfSecond;\n+        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @LiteralParameters({\"p\", \"s\"})\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixTimeNanos(@LiteralParameter(\"s\") long numScale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanosDecimal)\n+    {\n+        BigInteger unixTimeNanos = new BigDecimal(Decimals.toString(unixTimeNanosDecimal, (int) numScale)).toBigInteger();\n+        long epochSeconds = unixTimeNanos.divide(BigInteger.valueOf(Timestamps.NANOSECONDS_PER_SECOND)).longValue();\n+        long nanosOfSecond = unixTimeNanos.mod(BigInteger.valueOf(Timestamps.NANOSECONDS_PER_SECOND)).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTg1OTAyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1MjozOFrOHT5R_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzo1MjozOFrOHT5R_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMzQ4Ng==", "bodyText": "Add some tests with negative unix time", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r490623486", "createdAt": "2020-09-17T23:52:38Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -265,6 +265,16 @@ public void testFromUnixTimeWithTimeZone()\n         assertFunction(format(\"from_unixtime(7200, '%s')\", zoneId), TIMESTAMP_WITH_TIME_ZONE, toTimestampWithTimeZone(expected));\n     }\n \n+    @Test\n+    public void testFromUnixTimeNanos()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjM0MTU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoyNToyNFrOHVtRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoyNToyNFrOHVtRUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMzg1Nw==", "bodyText": "Add test for DECIMAL '123456789.999' it would fail now.", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r492523857", "createdAt": "2020-09-22T07:25:24Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -227,6 +227,7 @@ public void testFromUnixTimeNanos()\n         assertFunction(\"from_unixtime_nanos(1234567890123456789)\", TIMESTAMP_NANOS, SqlTimestamp.newInstance(9, 1234567890_123456L, 789000));\n         assertFunction(\"from_unixtime_nanos(1234567890000000000)\", TIMESTAMP_NANOS, SqlTimestamp.newInstance(9, 1234567890_000000L, 0));\n         assertFunction(\"from_unixtime_nanos(999999999)\", TIMESTAMP_NANOS, SqlTimestamp.newInstance(9, 999999, 999000));\n+        assertFunction(\"from_unixtime_nanos(DECIMAL '123456789')\", TIMESTAMP_NANOS, SqlTimestamp.newInstance(9, 123456, 789000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjM1Njc1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoyOTo1NFrOHVtafQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoyOTo1NFrOHVtafQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyNjIwNQ==", "bodyText": "This code would only work for s==0. If there is decimal dot in the number we need to take that into account and basically round the value to nearest integer before proceeding with conversion to timestamp.\nYou can replicate rounding code from https://github.com/prestosql/presto/blob/2379c52ead0ca9f50d89fd75aa25e885a81118fa/presto-main/src/main/java/io/prestosql/operator/scalar/MathFunctions.java#L853-L870", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r492526205", "createdAt": "2020-09-22T07:29:54Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -148,25 +148,37 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n     }\n \n     @ScalarFunction(\"from_unixtime_nanos\")\n-    @SqlType(\"timestamp(9)\")\n-    public static LongTimestamp fromUnixTimeNanos(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n-    {\n-        long epochSeconds = unixTimeNanos / NANOSECONDS_PER_SECOND;\n-        long nanosOfSecond = unixTimeNanos % NANOSECONDS_PER_SECOND;\n-        long picosOfSecond = nanosOfSecond * PICOSECONDS_PER_NANOSECOND;\n-        return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+    public static final class FromUnixtimeNanosDecimal\n+    {\n+        private FromUnixtimeNanosDecimal() {}\n+\n+        @LiteralParameters({\"p\", \"s\"})\n+        @SqlType(\"timestamp(9)\")\n+        public static LongTimestamp fromLong(@LiteralParameter(\"s\") long scale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanos)\n+        {\n+            BigInteger unixTimeNanosInt = new BigDecimal(Decimals.toString(unixTimeNanos, (int) scale)).toBigInteger();\n+            long epochSeconds = unixTimeNanosInt.divide(BigInteger.valueOf(NANOSECONDS_PER_SECOND)).longValue();\n+            long nanosOfSecond = unixTimeNanosInt.mod(BigInteger.valueOf(NANOSECONDS_PER_SECOND)).longValue();\n+            long picosOfSecond = nanosOfSecond * PICOSECONDS_PER_NANOSECOND;\n+            return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+        }\n+\n+        @LiteralParameters({\"p\", \"s\"})\n+        @SqlType(\"timestamp(9)\")\n+        public static LongTimestamp fromShort(@SqlType(\"decimal(p, s)\") long unixTimeNanos)\n+        {\n+            long epochSeconds = unixTimeNanos / NANOSECONDS_PER_SECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTM1Mzc4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/datetime.rst", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOToyNjoyM1rOHYP61Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0NToxMFrOHZ8DeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4ODY5Mw==", "bodyText": "Why :noindex:?", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r495188693", "createdAt": "2020-09-25T19:26:23Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/datetime.rst", "diffHunk": "@@ -150,6 +150,12 @@ Date and Time Functions\n     using ``hours`` and ``minutes`` for the time zone offset. ``unixtime`` is\n     the number of seconds since ``1970-01-01 00:00:00`` in ``double`` data type.\n \n+.. function:: from_unixtime_nanos(unixtime) -> timestamp(9)\n+    :noindex:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MzI1MA==", "bodyText": "I didn't think it made sense to have this as a top-level index item when from_unixtime already had one, as it seemed a bit redundant. Happy to remove this though if you think it's sufficiently different it should be a separate item!", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r496953250", "createdAt": "2020-09-29T18:32:20Z", "author": {"login": "alec-heif"}, "path": "presto-docs/src/main/sphinx/functions/datetime.rst", "diffHunk": "@@ -150,6 +150,12 @@ Date and Time Functions\n     using ``hours`` and ``minutes`` for the time zone offset. ``unixtime`` is\n     the number of seconds since ``1970-01-01 00:00:00`` in ``double`` data type.\n \n+.. function:: from_unixtime_nanos(unixtime) -> timestamp(9)\n+    :noindex:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4ODY5Mw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MDM3Nw==", "bodyText": "It's a function with different name and result, so I would include it.", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r496960377", "createdAt": "2020-09-29T18:45:10Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/datetime.rst", "diffHunk": "@@ -150,6 +150,12 @@ Date and Time Functions\n     using ``hours`` and ``minutes`` for the time zone offset. ``unixtime`` is\n     the number of seconds since ``1970-01-01 00:00:00`` in ``double`` data type.\n \n+.. function:: from_unixtime_nanos(unixtime) -> timestamp(9)\n+    :noindex:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4ODY5Mw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTM4MDIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTozNTozMFrOHYQK0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTozNTozMFrOHYQK0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5Mjc4Ng==", "bodyText": "Use floorDiv and floorMod above to avoid having to do this manually", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r495192786", "createdAt": "2020-09-25T19:35:30Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -145,6 +153,50 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    public static final class FromUnixtimeNanosDecimal\n+    {\n+        private FromUnixtimeNanosDecimal() {}\n+\n+        @LiteralParameters({\"p\", \"s\"})\n+        @SqlType(\"timestamp(9)\")\n+        public static LongTimestamp fromLong(@LiteralParameter(\"s\") long scale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanos)\n+        {\n+            BigInteger unixTimeNanosInt = unscaledDecimalToBigInteger(rescale(unixTimeNanos, -(int) scale));\n+            long epochSeconds = unixTimeNanosInt.divide(BigInteger.valueOf(NANOSECONDS_PER_SECOND)).longValue();\n+            long nanosOfSecond = unixTimeNanosInt.remainder(BigInteger.valueOf(NANOSECONDS_PER_SECOND)).longValue();\n+            long picosOfSecond = nanosOfSecond * PICOSECONDS_PER_NANOSECOND;\n+            if (picosOfSecond < 0) {\n+                epochSeconds -= 1;\n+                picosOfSecond += PICOSECONDS_PER_SECOND;\n+            }\n+            return DateTimes.longTimestamp(epochSeconds, picosOfSecond);\n+        }\n+\n+        @LiteralParameters({\"p\", \"s\"})\n+        @SqlType(\"timestamp(9)\")\n+        public static LongTimestamp fromShort(@LiteralParameter(\"s\") long scale, @SqlType(\"decimal(p, s)\") long unixTimeNanos)\n+        {\n+            long roundedUnixTimeNanos = MathFunctions.Round.roundShort(scale, unixTimeNanos);\n+            return fromUnixtimeNanosLong(roundedUnixTimeNanos);\n+        }\n+    }\n+\n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    @SqlType(\"timestamp(9)\")\n+    public static LongTimestamp fromUnixtimeNanosLong(@SqlType(StandardTypes.BIGINT) long unixTimeNanos)\n+    {\n+        long epochSeconds = unixTimeNanos / NANOSECONDS_PER_SECOND;\n+        long nanosOfSecond = unixTimeNanos % NANOSECONDS_PER_SECOND;\n+        long picosOfSecond = nanosOfSecond * PICOSECONDS_PER_NANOSECOND;\n+\n+        if (picosOfSecond < 0) {\n+            epochSeconds -= 1;\n+            picosOfSecond += PICOSECONDS_PER_SECOND;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTQwNTMwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDoxODoxN1rOHYiaiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDoxODoxN1rOHYiaiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5MTcyMA==", "bodyText": "Add a comment to indicate that this is simulating floorMod/floorDiv due to lack of direct support in BigInteger", "url": "https://github.com/trinodb/trino/pull/5046#discussion_r495491720", "createdAt": "2020-09-26T20:18:17Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -145,6 +153,50 @@ public static long fromUnixTime(@SqlType(StandardTypes.DOUBLE) double unixTime,\n         return packDateTimeWithZone(Math.round(unixTime * 1000), zoneId.toStringUtf8());\n     }\n \n+    @ScalarFunction(\"from_unixtime_nanos\")\n+    public static final class FromUnixtimeNanosDecimal\n+    {\n+        private FromUnixtimeNanosDecimal() {}\n+\n+        @LiteralParameters({\"p\", \"s\"})\n+        @SqlType(\"timestamp(9)\")\n+        public static LongTimestamp fromLong(@LiteralParameter(\"s\") long scale, @SqlType(\"decimal(p, s)\") Slice unixTimeNanos)\n+        {\n+            BigInteger unixTimeNanosInt = unscaledDecimalToBigInteger(rescale(unixTimeNanos, -(int) scale));\n+            long epochSeconds = unixTimeNanosInt.divide(BigInteger.valueOf(NANOSECONDS_PER_SECOND)).longValue();\n+            long nanosOfSecond = unixTimeNanosInt.remainder(BigInteger.valueOf(NANOSECONDS_PER_SECOND)).longValue();\n+            long picosOfSecond = nanosOfSecond * PICOSECONDS_PER_NANOSECOND;\n+            if (picosOfSecond < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3106, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}