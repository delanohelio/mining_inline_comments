{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODk3NjE5", "number": 5233, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0MzoyMFrOEmgtfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOTozOTo0MVrOEqpdXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODE3Mjc5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastoreClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0MzoyMFrOHWlAeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0MzoyMFrOHWlAeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzNzA1MA==", "bodyText": "as this class is thin wrapper over Hive metastore thrift protocole let's keep the naming consistent with thirft. Hence I suggest you rename the method to abortTransaction", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r493437050", "createdAt": "2020-09-23T10:43:20Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastoreClient.java", "diffHunk": "@@ -461,6 +464,13 @@ public void commitTransaction(long transactionId)\n         client.commit_txn(new CommitTxnRequest(transactionId));\n     }\n \n+    @Override\n+    public void rollbackTransaction(long txnId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODIwNDg1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0OToxOVrOHWlVdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODoxOTo1NlrOHYh0iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0MjQyMQ==", "bodyText": "Pass database, table and List<Long> transactionIdsas arguments and only construct AllocateTableWriteIdsRequest internally", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r493442421", "createdAt": "2020-09-23T10:49:19Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreClient.java", "diffHunk": "@@ -179,4 +187,10 @@ String get_config_value(String name, String defaultValue)\n \n     String getDelegationToken(String userName)\n             throws TException;\n+\n+    default List<TxnToWriteId> allocateTableWriteIdsBatchIntr(AllocateTableWriteIdsRequest rqst)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0MzM0OQ==", "bodyText": "Also what does Intr stand for?\nWhy not call the method just allocateTableWriteIds", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r493443349", "createdAt": "2020-09-23T10:50:17Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreClient.java", "diffHunk": "@@ -179,4 +187,10 @@ String get_config_value(String name, String defaultValue)\n \n     String getDelegationToken(String userName)\n             throws TException;\n+\n+    default List<TxnToWriteId> allocateTableWriteIdsBatchIntr(AllocateTableWriteIdsRequest rqst)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0MjQyMQ=="}, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MTk5NQ==", "bodyText": "done.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495481995", "createdAt": "2020-09-26T18:19:56Z", "author": {"login": "harmandeeps"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreClient.java", "diffHunk": "@@ -179,4 +187,10 @@ String get_config_value(String name, String defaultValue)\n \n     String getDelegationToken(String userName)\n             throws TException;\n+\n+    default List<TxnToWriteId> allocateTableWriteIdsBatchIntr(AllocateTableWriteIdsRequest rqst)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0MjQyMQ=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODIyNTMzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo1MzoxOVrOHWljiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo1MzoxOVrOHWljiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0NjAyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ACIDTestHelper()\n          \n          \n            \n                {\n          \n          \n            \n                }\n          \n          \n            \n                private ACIDTestHelper() {}", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r493446024", "createdAt": "2020-09-23T10:53:19Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODIzNDYyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo1NTowNFrOHWlpvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo1NTowNFrOHWlpvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0NzYxNQ==", "bodyText": "Instead referencing steps just inline what happens into the code.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r493447615", "createdAt": "2020-09-23T10:55:04Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODI1MTcxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo1ODoyN1rOHWl1Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo1ODoyN1rOHWl1Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1MDU2Mg==", "bodyText": "Use QueryExecutors.onHive", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r493450562", "createdAt": "2020-09-23T10:58:27Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODI3NDI5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowMjo1NlrOHWmECg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjo1ODoxMFrOHWsYzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1NDM0Ng==", "bodyText": "Does it do what we want?\nYou are allocating write id for table A. And then you create table B for which the writeId for the given transaction was not allocated at all.\nThere is no relation between table B and writeId allocated so it does not seem to simulate situation that transaction for table B was aborted, and files were left behind.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r493454346", "createdAt": "2020-09-23T11:02:56Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ2NTQ0Mg==", "bodyText": "Table A is a transactional table. It insertes some data say X, Y. And then I created a transaction and then aborted it which creates a delta.\nThen, I am creating an external table B (non transactional) on the aborted transaction delta and then inserting some data (say Z) getting stored on this location. This step is to simulate that the aborted transaction has left some data at the location.\nThen, in the main test, I am querying Table A(transactional table), and checking that the aborted transaction delta is not getting read.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r493465442", "createdAt": "2020-09-23T11:15:53Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1NDM0Ng=="}, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU1Nzk2Ng==", "bodyText": "Cool - I get it now.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r493557966", "createdAt": "2020-09-23T12:58:10Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1NDM0Ng=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgwNTY0OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxMTo1MFrOHYBCQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjowNjozOVrOHbrJCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NDgzMg==", "bodyText": "You should not hardcode hostname and port.\nInject values into test code via:\n    @Inject(optional = true)\n    @Named(\"databases.hive.metastore.host\")\n    private String metastoreHost;\n\n    @Inject(optional = true)\n    @Named(\"databases.hive.metastore.port\")\n    private int metastorePort;", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r494944832", "createdAt": "2020-09-25T12:11:50Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));\n+            assertThat(hiveQueryExecutor.executeQuery(String.format(\"SELECT * FROM %s\", tmpTableName))).containsOnly(row(\"a\"));\n+            hiveQueryExecutor.executeQuery(String.format(\"DROP TABLE %s\", tmpTableName));\n+        }\n+        finally {\n+            client.close();\n+        }\n+    }\n+\n+    private static String getNewTableName()\n+    {\n+        return \"table_\" + UUID.randomUUID().toString().replace('-', '_');\n+    }\n+\n+    private static ThriftHiveMetastoreClient createMetastoreClient()\n+            throws TException\n+    {\n+        URI metastore = URI.create(\"thrift://hadoop-master:9083\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MTUwMg==", "bodyText": "I tried, but it is not able to fetch the values defined in yml file. can you point out what am i missing?", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495481502", "createdAt": "2020-09-26T18:13:32Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));\n+            assertThat(hiveQueryExecutor.executeQuery(String.format(\"SELECT * FROM %s\", tmpTableName))).containsOnly(row(\"a\"));\n+            hiveQueryExecutor.executeQuery(String.format(\"DROP TABLE %s\", tmpTableName));\n+        }\n+        finally {\n+            client.close();\n+        }\n+    }\n+\n+    private static String getNewTableName()\n+    {\n+        return \"table_\" + UUID.randomUUID().toString().replace('-', '_');\n+    }\n+\n+    private static ThriftHiveMetastoreClient createMetastoreClient()\n+            throws TException\n+    {\n+        URI metastore = URI.create(\"thrift://hadoop-master:9083\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NDgzMg=="}, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0OTA3Mg==", "bodyText": "0303aa6\nworks fine", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495749072", "createdAt": "2020-09-28T07:47:32Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));\n+            assertThat(hiveQueryExecutor.executeQuery(String.format(\"SELECT * FROM %s\", tmpTableName))).containsOnly(row(\"a\"));\n+            hiveQueryExecutor.executeQuery(String.format(\"DROP TABLE %s\", tmpTableName));\n+        }\n+        finally {\n+            client.close();\n+        }\n+    }\n+\n+    private static String getNewTableName()\n+    {\n+        return \"table_\" + UUID.randomUUID().toString().replace('-', '_');\n+    }\n+\n+    private static ThriftHiveMetastoreClient createMetastoreClient()\n+            throws TException\n+    {\n+        URI metastore = URI.create(\"thrift://hadoop-master:9083\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NDgzMg=="}, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4MDQyNg==", "bodyText": "thanks for the help, incorporated the changes.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r498780426", "createdAt": "2020-10-02T12:06:39Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));\n+            assertThat(hiveQueryExecutor.executeQuery(String.format(\"SELECT * FROM %s\", tmpTableName))).containsOnly(row(\"a\"));\n+            hiveQueryExecutor.executeQuery(String.format(\"DROP TABLE %s\", tmpTableName));\n+        }\n+        finally {\n+            client.close();\n+        }\n+    }\n+\n+    private static String getNewTableName()\n+    {\n+        return \"table_\" + UUID.randomUUID().toString().replace('-', '_');\n+    }\n+\n+    private static ThriftHiveMetastoreClient createMetastoreClient()\n+            throws TException\n+    {\n+        URI metastore = URI.create(\"thrift://hadoop-master:9083\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NDgzMg=="}, "originalCommit": null, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgwNzcwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxMjozMlrOHYBDfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNTozMjo1MFrOHYIkGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NTE1MA==", "bodyText": "This is a bit problematic because the way you construct client will not work for all tests setups (e.g. if metastore requires authentication).\nWhat I think would be best to avoid explicit communication with metastore at all. Though I am not sure if we can reliably simulate failed transaction just using JDBC connection to Hive.\n....\nI thought that maybe we have a thrift-client which works with authentication pre-setup in tempto. But it looks like we do not. So maybe we should just run this test in setup without authentication on hive metastore.\n@findepi thoughts?", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r494945150", "createdAt": "2020-09-25T12:12:32Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));\n+            assertThat(hiveQueryExecutor.executeQuery(String.format(\"SELECT * FROM %s\", tmpTableName))).containsOnly(row(\"a\"));\n+            hiveQueryExecutor.executeQuery(String.format(\"DROP TABLE %s\", tmpTableName));\n+        }\n+        finally {\n+            client.close();\n+        }\n+    }\n+\n+    private static String getNewTableName()\n+    {\n+        return \"table_\" + UUID.randomUUID().toString().replace('-', '_');\n+    }\n+\n+    private static ThriftHiveMetastoreClient createMetastoreClient()\n+            throws TException\n+    {\n+        URI metastore = URI.create(\"thrift://hadoop-master:9083\");\n+        return new ThriftHiveMetastoreClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA2ODE4Ng==", "bodyText": "I thought that maybe we have a thrift-client which works with authentication pre-setup in tempto. But it looks like we do not. So maybe we should just run this test in setup without authentication on hive metastore.\n\n@losipiuk  makes sense", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495068186", "createdAt": "2020-09-25T15:32:50Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));\n+            assertThat(hiveQueryExecutor.executeQuery(String.format(\"SELECT * FROM %s\", tmpTableName))).containsOnly(row(\"a\"));\n+            hiveQueryExecutor.executeQuery(String.format(\"DROP TABLE %s\", tmpTableName));\n+        }\n+        finally {\n+            client.close();\n+        }\n+    }\n+\n+    private static String getNewTableName()\n+    {\n+        return \"table_\" + UUID.randomUUID().toString().replace('-', '_');\n+    }\n+\n+    private static ThriftHiveMetastoreClient createMetastoreClient()\n+            throws TException\n+    {\n+        URI metastore = URI.create(\"thrift://hadoop-master:9083\");\n+        return new ThriftHiveMetastoreClient(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NTE1MA=="}, "originalCommit": null, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgyMDE2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxNjoyNlrOHYBK7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzozNjowM1rOHbUimQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzA1NQ==", "bodyText": "I do not like the assumption here that the layout of files generated by INSERT matches what Hive expects for a delta directory.\nTo validate approach  can we create another delta directory but for non-aborted transaction. And assert that rows from that directory are visible on query?", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r494947055", "createdAt": "2020-09-25T12:16:26Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MTk4NA==", "bodyText": "If I understood correctly, I have made changes to insert delta after this step to validate.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495481984", "createdAt": "2020-09-26T18:19:40Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzA1NQ=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MTgwMw==", "bodyText": "This is not exactly my point. What I would like to have, is to add data for non-rolled-backed transaction using same approach you use for rolled-back transaction.\nWith creating temporary external table pointing to delta directory, and doing insert to temporary table.\nI want to have it to validate that way we use to insert data works as expected.\nWithout the validation there is a chance that we are not seeing rows inserted to delta-directory for rolled-back transaction, not because the transaction is rolled back, but because test is broken :)\nIs it more clear?", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495751803", "createdAt": "2020-09-28T07:53:02Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzA1NQ=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMDEzNw==", "bodyText": "I like the approach, but creating an external table on a valid delta location, and then inserting data in ACID format with keeping the file name in format bucket_000XYZ, is not possible in product tests IMHO. Please let me know if you know a way around this.\nTo validate the 2nd point, I deleted the data present at a valid delta location. I created an external table on a valid delta location, inserted the data form this external table. But, then Presto select query failed with error:\no.prestosql.spi.PrestoException: ORC ACID file should have 6 columns: hdfs://hadoop-master:9000/user/hive/warehouse/dummy_id_data/delta_0000001_0000001_0000/000000_0\n\nat io.prestosql.plugin.hive.orc.OrcPageSourceFactory.verifyAcidSchema(OrcPageSourceFactory.java:423)\n\nSo, this is validating our assumption that rolled back transaction won't be read from Presto, if it is being read, then the query will fail with the error mentioned above.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r498410137", "createdAt": "2020-10-01T17:36:03Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tempto.context.ThreadLocalTestContextHolder;\n+import io.prestosql.tempto.query.QueryExecutor;\n+import org.apache.hadoop.hive.metastore.api.AllocateTableWriteIdsRequest;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper\n+{\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    private ACIDTestHelper()\n+    {\n+    }\n+\n+    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n+    // 1. Open Txn\n+    // 2. Rollback Txn\n+    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n+    // 4. Insert something to it which will create a file for this table\n+    public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n+            throws TException\n+    {\n+        ThriftHiveMetastoreClient client = createMetastoreClient();\n+        try {\n+            // Step 1\n+            long transaction = client.openTransaction(\"test\");\n+\n+            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n+            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n+            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+\n+            // Step 2\n+            client.rollbackTransaction(transaction);\n+\n+            // Step 3\n+            Table table = client.getTableWithCapabilities(database, tableName);\n+            String tableLocation = table.getSd().getLocation();\n+            String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n+            String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n+            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n+\n+            String tmpTableName = getNewTableName();\n+            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+\n+            // Step 4\n+            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzA1NQ=="}, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgyNDgxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxNzo1MlrOHYBNyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1MzowOFrOHYySrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0Nzc4Nw==", "bodyText": "Do we need that many inserts before actually simulating aborted transaction.\nIt is not obvious what cases are we testing here.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r494947787", "createdAt": "2020-09-25T12:17:52Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -355,6 +357,64 @@ public void testCreateAcidTable(boolean isPartitioned, BucketingType bucketingTy\n         }\n     }\n \n+    @Test(dataProvider = \"isTablePartitioned\", groups = HIVE_TRANSACTIONAL)\n+    public void testFilesForAbortedTransactionsIgnored(boolean isPartitioned)\n+            throws TException\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            throw new SkipException(\"Hive transactional tables are supported with Hive version 3 or above\");\n+        }\n+\n+        String tableName = \"test_aborted_transaction_table_partitioned\" + (isPartitioned ? \"_partitioned\" : \"\");\n+        onHive().executeQuery(\"\" +\n+                \"CREATE TABLE \" + tableName + \" (col INT) \" +\n+                (isPartitioned ? \"PARTITIONED BY (part_col INT) \" : \"\") +\n+                \"STORED AS ORC \" + \"TBLPROPERTIES ('transactional'='true')\");\n+\n+        try {\n+            String hivePartition = isPartitioned ? \" PARTITION (part_col=2) \" : \"\";\n+            String predicate = isPartitioned ? \" WHERE part_col = 2 \" : \"\";\n+\n+            onHive().executeQuery(\"INSERT OVERWRITE TABLE \" + tableName + hivePartition + \" select 1\");\n+\n+            String selectFromOnePartitionsSql = \"SELECT col FROM \" + tableName + predicate + \" ORDER BY COL\";\n+            QueryResult onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsOnly(row(1));\n+\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + hivePartition + \" select 2\");\n+            onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(1), row(2));\n+\n+            onHive().executeQuery(\"INSERT OVERWRITE TABLE \" + tableName + hivePartition + \" select 3\");\n+            onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsOnly(row(3));\n+\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + hivePartition + \" select 4\");\n+            onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(3), row(4));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MTg2Ng==", "bodyText": "yeah, have removed some of them.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495481866", "createdAt": "2020-09-26T18:18:03Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -355,6 +357,64 @@ public void testCreateAcidTable(boolean isPartitioned, BucketingType bucketingTy\n         }\n     }\n \n+    @Test(dataProvider = \"isTablePartitioned\", groups = HIVE_TRANSACTIONAL)\n+    public void testFilesForAbortedTransactionsIgnored(boolean isPartitioned)\n+            throws TException\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            throw new SkipException(\"Hive transactional tables are supported with Hive version 3 or above\");\n+        }\n+\n+        String tableName = \"test_aborted_transaction_table_partitioned\" + (isPartitioned ? \"_partitioned\" : \"\");\n+        onHive().executeQuery(\"\" +\n+                \"CREATE TABLE \" + tableName + \" (col INT) \" +\n+                (isPartitioned ? \"PARTITIONED BY (part_col INT) \" : \"\") +\n+                \"STORED AS ORC \" + \"TBLPROPERTIES ('transactional'='true')\");\n+\n+        try {\n+            String hivePartition = isPartitioned ? \" PARTITION (part_col=2) \" : \"\";\n+            String predicate = isPartitioned ? \" WHERE part_col = 2 \" : \"\";\n+\n+            onHive().executeQuery(\"INSERT OVERWRITE TABLE \" + tableName + hivePartition + \" select 1\");\n+\n+            String selectFromOnePartitionsSql = \"SELECT col FROM \" + tableName + predicate + \" ORDER BY COL\";\n+            QueryResult onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsOnly(row(1));\n+\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + hivePartition + \" select 2\");\n+            onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(1), row(2));\n+\n+            onHive().executeQuery(\"INSERT OVERWRITE TABLE \" + tableName + hivePartition + \" select 3\");\n+            onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsOnly(row(3));\n+\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + hivePartition + \" select 4\");\n+            onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(3), row(4));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0Nzc4Nw=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MTg1Mw==", "bodyText": "thanks", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495751853", "createdAt": "2020-09-28T07:53:08Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -355,6 +357,64 @@ public void testCreateAcidTable(boolean isPartitioned, BucketingType bucketingTy\n         }\n     }\n \n+    @Test(dataProvider = \"isTablePartitioned\", groups = HIVE_TRANSACTIONAL)\n+    public void testFilesForAbortedTransactionsIgnored(boolean isPartitioned)\n+            throws TException\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            throw new SkipException(\"Hive transactional tables are supported with Hive version 3 or above\");\n+        }\n+\n+        String tableName = \"test_aborted_transaction_table_partitioned\" + (isPartitioned ? \"_partitioned\" : \"\");\n+        onHive().executeQuery(\"\" +\n+                \"CREATE TABLE \" + tableName + \" (col INT) \" +\n+                (isPartitioned ? \"PARTITIONED BY (part_col INT) \" : \"\") +\n+                \"STORED AS ORC \" + \"TBLPROPERTIES ('transactional'='true')\");\n+\n+        try {\n+            String hivePartition = isPartitioned ? \" PARTITION (part_col=2) \" : \"\";\n+            String predicate = isPartitioned ? \" WHERE part_col = 2 \" : \"\";\n+\n+            onHive().executeQuery(\"INSERT OVERWRITE TABLE \" + tableName + hivePartition + \" select 1\");\n+\n+            String selectFromOnePartitionsSql = \"SELECT col FROM \" + tableName + predicate + \" ORDER BY COL\";\n+            QueryResult onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsOnly(row(1));\n+\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + hivePartition + \" select 2\");\n+            onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(1), row(2));\n+\n+            onHive().executeQuery(\"INSERT OVERWRITE TABLE \" + tableName + hivePartition + \" select 3\");\n+            onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsOnly(row(3));\n+\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + hivePartition + \" select 4\");\n+            onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(3), row(4));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0Nzc4Nw=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzM2MjgyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo0MjozN1rOHYx90A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo0MjozN1rOHYx90A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjUxMg==", "bodyText": "static import onHive", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r495746512", "createdAt": "2020-09-28T07:42:37Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -40,40 +38,32 @@ private ACIDTestHelper()\n     {\n     }\n \n-    // This simulates a aborted transaction which leaves behind a file in a partition of a table as follows:\n-    // 1. Open Txn\n-    // 2. Rollback Txn\n-    // 3. Create a new table with location as the given partition location + delta directory for the rolled back transaction\n-    // 4. Insert something to it which will create a file for this table\n+    // Simulates an aborted transaction which leaves behind a file in a table partition with some data\n     public static void simulateAbortedHiveTransaction(String database, String tableName, String partitionSpec)\n             throws TException\n     {\n         ThriftHiveMetastoreClient client = createMetastoreClient();\n         try {\n-            // Step 1\n             long transaction = client.openTransaction(\"test\");\n \n-            AllocateTableWriteIdsRequest allocateTableWriteIdsRequest = new AllocateTableWriteIdsRequest(database, tableName);\n-            allocateTableWriteIdsRequest.setTxnIds(Collections.singletonList(transaction));\n-            long writeId = client.allocateTableWriteIdsBatchIntr(allocateTableWriteIdsRequest).get(0).getWriteId();\n+            long writeId = client.allocateTableWriteIds(database, tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n \n-            // Step 2\n-            client.rollbackTransaction(transaction);\n+            // Rollback transaction which leaves behind a delta directory\n+            client.abortTransaction(transaction);\n \n-            // Step 3\n+            // Create a new external table with location as the given partition location + delta directory for the rolled back transaction\n             Table table = client.getTableWithCapabilities(database, tableName);\n             String tableLocation = table.getSd().getLocation();\n             String partitionLocation = tableLocation.endsWith(\"/\") ? tableLocation + partitionSpec : tableLocation + \"/\" + partitionSpec;\n             String deltaLocation = partitionLocation + \"/\" + AcidUtils.deltaSubdir(writeId, writeId, 0);\n-            QueryExecutor hiveQueryExecutor = ThreadLocalTestContextHolder.testContext().getDependency(QueryExecutor.class, \"hive\");\n \n             String tmpTableName = getNewTableName();\n-            hiveQueryExecutor.executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) stored as ORC location '%s'\", tmpTableName, deltaLocation));\n+            QueryExecutors.onHive().executeQuery(String.format(\"CREATE EXTERNAL TABLE %s (col string) STORED AS ORC LOCATION '%s'\", tmpTableName, deltaLocation));\n \n-            // Step 4\n-            hiveQueryExecutor.executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));\n-            assertThat(hiveQueryExecutor.executeQuery(String.format(\"SELECT * FROM %s\", tmpTableName))).containsOnly(row(\"a\"));\n-            hiveQueryExecutor.executeQuery(String.format(\"DROP TABLE %s\", tmpTableName));\n+            // Insert data to the external table\n+            QueryExecutors.onHive().executeQuery(String.format(\"INSERT INTO TABLE %s SELECT 'a'\", tmpTableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07d2b02696b1096e530388f58d6951af9e2d34c6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjk5NDk1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDoyMDoxMlrOHbvfpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0OTozNVrOHb7Otg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MTc1MQ==", "bodyText": "ACID -> Acid", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r498851751", "createdAt": "2020-10-02T14:20:12Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tests.utils.QueryExecutors;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0NDAyMg==", "bodyText": "fixed. changed it to Transactional as we have used Transactional everywhere.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r499044022", "createdAt": "2020-10-02T20:49:35Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/ACIDTestHelper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import io.prestosql.tests.utils.QueryExecutors;\n+import org.apache.hadoop.hive.metastore.api.Table;\n+import org.apache.hadoop.hive.ql.io.AcidUtils;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+\n+public final class ACIDTestHelper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MTc1MQ=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDE3MzIyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0Njo0NFrOHb7KQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0Njo0NFrOHb7KQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0Mjg4MQ==", "bodyText": "@losipiuk : removed partition test case, I guess as we are only testing at the delta directory level, so it won't make any difference. thoughts?", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r499042881", "createdAt": "2020-10-02T20:46:44Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -358,6 +364,42 @@ public void testCreateAcidTable(boolean isPartitioned, BucketingType bucketingTy\n         }\n     }\n \n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testFilesForAbortedTransactionsIgnored()\n+            throws TException, IOException\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTUyNzYwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TransactionalTestHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOTozMzo1NFrOHc-AJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoxNToxMlrOHdJHOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzODAyMA==", "bodyText": "As it is used in just a single place now please inline into TestHiveTransactionalTable.java", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r500138020", "createdAt": "2020-10-06T09:33:54Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TransactionalTestHelper.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+\n+public final class TransactionalTestHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5Nzc2MA==", "bodyText": "It is getting used in https://github.com/prestosql/presto/pull/5404/files tests as well, so I thought of keeping the utils separately, to keep the test file shorter. thoughts?", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r500297760", "createdAt": "2020-10-06T13:52:10Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TransactionalTestHelper.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+\n+public final class TransactionalTestHelper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzODAyMA=="}, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMDA1OA==", "bodyText": "Then please rename the file to TestHiveMetastoreClientFactory", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r500320058", "createdAt": "2020-10-06T14:15:12Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TransactionalTestHelper.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.net.HostAndPort;\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.plugin.hive.metastore.thrift.NoHiveMetastoreAuthentication;\n+import io.prestosql.plugin.hive.metastore.thrift.ThriftHiveMetastoreClient;\n+import io.prestosql.plugin.hive.metastore.thrift.Transport;\n+import org.apache.thrift.TException;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+\n+public final class TransactionalTestHelper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzODAyMA=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTU0MDUxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOTozNzoyMVrOHc-ITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOTozNzoyMVrOHc-ITA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE0MDEwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Simulate aborted transaction in Hive which has left behind a write directory and file\n          \n          \n            \n                        long transaction = client.openTransaction(\"test\");\n          \n          \n            \n            \n          \n          \n            \n                        client.allocateTableWriteIds(\"default\", tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n          \n          \n            \n            \n          \n          \n            \n                        // Rollback transaction which leaves behind a delta directory `delta-C` i.e. `delta_0000003_0000003_0000`\n          \n          \n            \n                        client.abortTransaction(transaction);\n          \n          \n            \n                        // Simulate aborted transaction in Hive which has left behind a write directory and file (`delta-C` i.e `delta_0000003_0000003_0000`)\n          \n          \n            \n                        long transaction = client.openTransaction(\"test\");\n          \n          \n            \n                        client.allocateTableWriteIds(\"default\", tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n          \n          \n            \n                        client.abortTransaction(transaction);", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r500140108", "createdAt": "2020-10-06T09:37:21Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -358,6 +376,67 @@ public void testCreateAcidTable(boolean isPartitioned, BucketingType bucketingTy\n         }\n     }\n \n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testFilesForAbortedTransactionsIgnored()\n+            throws TException\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            throw new SkipException(\"Hive transactional tables are supported with Hive version 3 or above\");\n+        }\n+\n+        String tableName = \"test_aborted_transaction_table\";\n+        onHive().executeQuery(\"\" +\n+                \"CREATE TABLE \" + tableName + \" (col INT) \" +\n+                \"STORED AS ORC \" +\n+                \"TBLPROPERTIES ('transactional'='true')\");\n+\n+        ThriftHiveMetastoreClient client = transactionalTestHelper.createMetastoreClient();\n+        try {\n+            String selectFromOnePartitionsSql = \"SELECT col FROM \" + tableName + \" ORDER BY COL\";\n+\n+            // Create `delta-A` file\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" VALUES (1),(2)\");\n+            QueryResult onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(1), row(2));\n+\n+            // Insert data to create a valid delta, which creates `delta-B`\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" SELECT 3\");\n+\n+            // Simulate aborted transaction in Hive which has left behind a write directory and file\n+            long transaction = client.openTransaction(\"test\");\n+\n+            client.allocateTableWriteIds(\"default\", tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n+\n+            // Rollback transaction which leaves behind a delta directory `delta-C` i.e. `delta_0000003_0000003_0000`\n+            client.abortTransaction(transaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTU0OTA5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOTozOTo0MVrOHc-N0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyNjo0NVrOHdJ0DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE0MTUyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            // Verify that data from delta-A and delta-B is visible\n          \n          \n            \n            assertThat(onePartitionQueryResult).containsOnly(row(1), row(1), row(2), row(2));", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r500141522", "createdAt": "2020-10-06T09:39:41Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -358,6 +376,67 @@ public void testCreateAcidTable(boolean isPartitioned, BucketingType bucketingTy\n         }\n     }\n \n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testFilesForAbortedTransactionsIgnored()\n+            throws TException\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            throw new SkipException(\"Hive transactional tables are supported with Hive version 3 or above\");\n+        }\n+\n+        String tableName = \"test_aborted_transaction_table\";\n+        onHive().executeQuery(\"\" +\n+                \"CREATE TABLE \" + tableName + \" (col INT) \" +\n+                \"STORED AS ORC \" +\n+                \"TBLPROPERTIES ('transactional'='true')\");\n+\n+        ThriftHiveMetastoreClient client = transactionalTestHelper.createMetastoreClient();\n+        try {\n+            String selectFromOnePartitionsSql = \"SELECT col FROM \" + tableName + \" ORDER BY COL\";\n+\n+            // Create `delta-A` file\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" VALUES (1),(2)\");\n+            QueryResult onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(1), row(2));\n+\n+            // Insert data to create a valid delta, which creates `delta-B`\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" SELECT 3\");\n+\n+            // Simulate aborted transaction in Hive which has left behind a write directory and file\n+            long transaction = client.openTransaction(\"test\");\n+\n+            client.allocateTableWriteIds(\"default\", tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n+\n+            // Rollback transaction which leaves behind a delta directory `delta-C` i.e. `delta_0000003_0000003_0000`\n+            client.abortTransaction(transaction);\n+\n+            String deltaA = warehouseDirectory + \"/\" + tableName + \"/delta_0000001_0000001_0000/bucket_00000\";\n+            String deltaB = warehouseDirectory + \"/\" + tableName + \"/delta_0000002_0000002_0000/bucket_00000\";\n+            String deltaC = warehouseDirectory + \"/\" + tableName + \"/delta_0000003_0000003_0000/bucket_00000\";\n+\n+            // Delete original `delta-B`, `delta-C`\n+            hdfsClient.delete(deltaB);\n+            hdfsClient.delete(deltaC);\n+\n+            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+            hdfsClient.loadFile(deltaA, byteArrayOutputStream);\n+\n+            // Copy content of `delta-A` to `delta-B`\n+            hdfsClient.saveFile(deltaB, new ByteArrayInputStream(byteArrayOutputStream.toByteArray()));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwOTI3Nw==", "bodyText": "fixed.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r500309277", "createdAt": "2020-10-06T14:04:07Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -358,6 +376,67 @@ public void testCreateAcidTable(boolean isPartitioned, BucketingType bucketingTy\n         }\n     }\n \n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testFilesForAbortedTransactionsIgnored()\n+            throws TException\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            throw new SkipException(\"Hive transactional tables are supported with Hive version 3 or above\");\n+        }\n+\n+        String tableName = \"test_aborted_transaction_table\";\n+        onHive().executeQuery(\"\" +\n+                \"CREATE TABLE \" + tableName + \" (col INT) \" +\n+                \"STORED AS ORC \" +\n+                \"TBLPROPERTIES ('transactional'='true')\");\n+\n+        ThriftHiveMetastoreClient client = transactionalTestHelper.createMetastoreClient();\n+        try {\n+            String selectFromOnePartitionsSql = \"SELECT col FROM \" + tableName + \" ORDER BY COL\";\n+\n+            // Create `delta-A` file\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" VALUES (1),(2)\");\n+            QueryResult onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(1), row(2));\n+\n+            // Insert data to create a valid delta, which creates `delta-B`\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" SELECT 3\");\n+\n+            // Simulate aborted transaction in Hive which has left behind a write directory and file\n+            long transaction = client.openTransaction(\"test\");\n+\n+            client.allocateTableWriteIds(\"default\", tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n+\n+            // Rollback transaction which leaves behind a delta directory `delta-C` i.e. `delta_0000003_0000003_0000`\n+            client.abortTransaction(transaction);\n+\n+            String deltaA = warehouseDirectory + \"/\" + tableName + \"/delta_0000001_0000001_0000/bucket_00000\";\n+            String deltaB = warehouseDirectory + \"/\" + tableName + \"/delta_0000002_0000002_0000/bucket_00000\";\n+            String deltaC = warehouseDirectory + \"/\" + tableName + \"/delta_0000003_0000003_0000/bucket_00000\";\n+\n+            // Delete original `delta-B`, `delta-C`\n+            hdfsClient.delete(deltaB);\n+            hdfsClient.delete(deltaC);\n+\n+            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+            hdfsClient.loadFile(deltaA, byteArrayOutputStream);\n+\n+            // Copy content of `delta-A` to `delta-B`\n+            hdfsClient.saveFile(deltaB, new ByteArrayInputStream(byteArrayOutputStream.toByteArray()));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE0MTUyMg=="}, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMTM2Nw==", "bodyText": "I meant to add extra step with just delta-A and delta-B. The comment by the last assertion was fine. Sorry for not being clear.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r500321367", "createdAt": "2020-10-06T14:16:37Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -358,6 +376,67 @@ public void testCreateAcidTable(boolean isPartitioned, BucketingType bucketingTy\n         }\n     }\n \n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testFilesForAbortedTransactionsIgnored()\n+            throws TException\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            throw new SkipException(\"Hive transactional tables are supported with Hive version 3 or above\");\n+        }\n+\n+        String tableName = \"test_aborted_transaction_table\";\n+        onHive().executeQuery(\"\" +\n+                \"CREATE TABLE \" + tableName + \" (col INT) \" +\n+                \"STORED AS ORC \" +\n+                \"TBLPROPERTIES ('transactional'='true')\");\n+\n+        ThriftHiveMetastoreClient client = transactionalTestHelper.createMetastoreClient();\n+        try {\n+            String selectFromOnePartitionsSql = \"SELECT col FROM \" + tableName + \" ORDER BY COL\";\n+\n+            // Create `delta-A` file\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" VALUES (1),(2)\");\n+            QueryResult onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(1), row(2));\n+\n+            // Insert data to create a valid delta, which creates `delta-B`\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" SELECT 3\");\n+\n+            // Simulate aborted transaction in Hive which has left behind a write directory and file\n+            long transaction = client.openTransaction(\"test\");\n+\n+            client.allocateTableWriteIds(\"default\", tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n+\n+            // Rollback transaction which leaves behind a delta directory `delta-C` i.e. `delta_0000003_0000003_0000`\n+            client.abortTransaction(transaction);\n+\n+            String deltaA = warehouseDirectory + \"/\" + tableName + \"/delta_0000001_0000001_0000/bucket_00000\";\n+            String deltaB = warehouseDirectory + \"/\" + tableName + \"/delta_0000002_0000002_0000/bucket_00000\";\n+            String deltaC = warehouseDirectory + \"/\" + tableName + \"/delta_0000003_0000003_0000/bucket_00000\";\n+\n+            // Delete original `delta-B`, `delta-C`\n+            hdfsClient.delete(deltaB);\n+            hdfsClient.delete(deltaC);\n+\n+            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+            hdfsClient.loadFile(deltaA, byteArrayOutputStream);\n+\n+            // Copy content of `delta-A` to `delta-B`\n+            hdfsClient.saveFile(deltaB, new ByteArrayInputStream(byteArrayOutputStream.toByteArray()));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE0MTUyMg=="}, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMTUzMg==", "bodyText": "got it, fixed.", "url": "https://github.com/trinodb/trino/pull/5233#discussion_r500331532", "createdAt": "2020-10-06T14:26:45Z", "author": {"login": "harmandeeps"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -358,6 +376,67 @@ public void testCreateAcidTable(boolean isPartitioned, BucketingType bucketingTy\n         }\n     }\n \n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testFilesForAbortedTransactionsIgnored()\n+            throws TException\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            throw new SkipException(\"Hive transactional tables are supported with Hive version 3 or above\");\n+        }\n+\n+        String tableName = \"test_aborted_transaction_table\";\n+        onHive().executeQuery(\"\" +\n+                \"CREATE TABLE \" + tableName + \" (col INT) \" +\n+                \"STORED AS ORC \" +\n+                \"TBLPROPERTIES ('transactional'='true')\");\n+\n+        ThriftHiveMetastoreClient client = transactionalTestHelper.createMetastoreClient();\n+        try {\n+            String selectFromOnePartitionsSql = \"SELECT col FROM \" + tableName + \" ORDER BY COL\";\n+\n+            // Create `delta-A` file\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" VALUES (1),(2)\");\n+            QueryResult onePartitionQueryResult = query(selectFromOnePartitionsSql);\n+            assertThat(onePartitionQueryResult).containsExactly(row(1), row(2));\n+\n+            // Insert data to create a valid delta, which creates `delta-B`\n+            onHive().executeQuery(\"INSERT INTO TABLE \" + tableName + \" SELECT 3\");\n+\n+            // Simulate aborted transaction in Hive which has left behind a write directory and file\n+            long transaction = client.openTransaction(\"test\");\n+\n+            client.allocateTableWriteIds(\"default\", tableName, Collections.singletonList(transaction)).get(0).getWriteId();\n+\n+            // Rollback transaction which leaves behind a delta directory `delta-C` i.e. `delta_0000003_0000003_0000`\n+            client.abortTransaction(transaction);\n+\n+            String deltaA = warehouseDirectory + \"/\" + tableName + \"/delta_0000001_0000001_0000/bucket_00000\";\n+            String deltaB = warehouseDirectory + \"/\" + tableName + \"/delta_0000002_0000002_0000/bucket_00000\";\n+            String deltaC = warehouseDirectory + \"/\" + tableName + \"/delta_0000003_0000003_0000/bucket_00000\";\n+\n+            // Delete original `delta-B`, `delta-C`\n+            hdfsClient.delete(deltaB);\n+            hdfsClient.delete(deltaC);\n+\n+            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+            hdfsClient.loadFile(deltaA, byteArrayOutputStream);\n+\n+            // Copy content of `delta-A` to `delta-B`\n+            hdfsClient.saveFile(deltaB, new ByteArrayInputStream(byteArrayOutputStream.toByteArray()));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE0MTUyMg=="}, "originalCommit": null, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3013, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}