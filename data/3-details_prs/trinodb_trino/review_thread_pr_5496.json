{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjc5NTYz", "number": 5496, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDozMTo0N1rOFP8hOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNTo1Mzo1N1rOFVQoDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjY0NTA2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDozMTo0N1rOIVjCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzoxODo1OFrOIX2Bjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTE0Mw==", "bodyText": "Maybe we pass SqlStandardAccessControlMetadataMetastore here, instead of a function?\nalthough, i see the value of this too", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559465143", "createdAt": "2021-01-18T10:31:47Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -263,45 +261,29 @@ protected RoleGrant computeNext()\n         });\n     }\n \n-    public static boolean isRoleApplicable(SemiTransactionalHiveMetastore metastore, HivePrincipal principal, String role)\n+    public static boolean isRoleApplicable(HivePrincipal principal, String role, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg2ODMyNQ==", "bodyText": "Yeah - it would work. Using Function here was kinda an intermediate step. I squash this with Interface out SqlStandardAccessControlMetadataMetastore", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r561868325", "createdAt": "2021-01-21T13:11:20Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -263,45 +261,29 @@ protected RoleGrant computeNext()\n         });\n     }\n \n-    public static boolean isRoleApplicable(SemiTransactionalHiveMetastore metastore, HivePrincipal principal, String role)\n+    public static boolean isRoleApplicable(HivePrincipal principal, String role, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTE0Mw=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3MzI5NQ==", "bodyText": "Naa - I take that back. Let's keep the function. Going with SqlStandardAccessControMetastore implies that I need to also pass ConnectoSecurityContext in isRoleApplicable signature. It does not make it substantially simpler", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r561873295", "createdAt": "2021-01-21T13:18:58Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -263,45 +261,29 @@ protected RoleGrant computeNext()\n         });\n     }\n \n-    public static boolean isRoleApplicable(SemiTransactionalHiveMetastore metastore, HivePrincipal principal, String role)\n+    public static boolean isRoleApplicable(HivePrincipal principal, String role, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTE0Mw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjY0Njk5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDozMjoxNlrOIVjD4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDozMjoxNlrOIVjD4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTQ0MA==", "bodyText": "here too, maybe SqlStandardAccessControlMetadataMetastore instead of a function", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559465440", "createdAt": "2021-01-18T10:32:16Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -263,45 +261,29 @@ protected RoleGrant computeNext()\n         });\n     }\n \n-    public static boolean isRoleApplicable(SemiTransactionalHiveMetastore metastore, HivePrincipal principal, String role)\n+    public static boolean isRoleApplicable(HivePrincipal principal, String role, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)\n     {\n         if (principal.getType() == ROLE && principal.getName().equals(role)) {\n             return true;\n         }\n-        return listApplicableRoles(metastore, principal)\n+        return listApplicableRoleNames(principal, listRoleGrants)\n                 .anyMatch(role::equals);\n     }\n \n-    public static Stream<String> listApplicableRoles(SemiTransactionalHiveMetastore metastore, HivePrincipal principal)\n+    private static Stream<String> listApplicableRoleNames(HivePrincipal principal, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjY0NzUxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDozMjoyMlrOIVjELg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDozMjoyMlrOIVjELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTUxOA==", "bodyText": "here too, maybe SqlStandardAccessControlMetadataMetastore instead of a function", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559465518", "createdAt": "2021-01-18T10:32:22Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -263,45 +261,29 @@ protected RoleGrant computeNext()\n         });\n     }\n \n-    public static boolean isRoleApplicable(SemiTransactionalHiveMetastore metastore, HivePrincipal principal, String role)\n+    public static boolean isRoleApplicable(HivePrincipal principal, String role, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)\n     {\n         if (principal.getType() == ROLE && principal.getName().equals(role)) {\n             return true;\n         }\n-        return listApplicableRoles(metastore, principal)\n+        return listApplicableRoleNames(principal, listRoleGrants)\n                 .anyMatch(role::equals);\n     }\n \n-    public static Stream<String> listApplicableRoles(SemiTransactionalHiveMetastore metastore, HivePrincipal principal)\n+    private static Stream<String> listApplicableRoleNames(HivePrincipal principal, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)\n     {\n-        return listApplicableRoles(principal, metastore::listRoleGrants)\n+        return listApplicableRoles(principal, listRoleGrants)\n                 .map(RoleGrant::getRoleName);\n     }\n \n-    public static Stream<HivePrincipal> listEnabledPrincipals(SemiTransactionalHiveMetastore metastore, ConnectorIdentity identity)\n+    public static Stream<HivePrincipal> listEnabledPrincipals(ConnectorIdentity identity, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjY1MTU2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/AccessControlMetadataFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDozMzoyNVrOIVjGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNjo0NzozOVrOIYsUWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NjEzMw==", "bodyText": "Are you sure this TODO is actionable? or it is going to stay with us for ever?\nAlso, since you're improving the situation\u00a0here, i don't feel like you need to add a TODO at all", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559466133", "createdAt": "2021-01-18T10:33:25Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/AccessControlMetadataFactory.java", "diffHunk": "@@ -13,9 +13,9 @@\n  */\n package io.prestosql.plugin.hive.security;\n \n-import io.prestosql.plugin.hive.metastore.SemiTransactionalHiveMetastore;\n-\n public interface AccessControlMetadataFactory\n {\n-    AccessControlMetadata create(SemiTransactionalHiveMetastore metastore);\n+    // TODO get rid of SqlStandardAccessControlMetastore. Possibly replace with something generic\n+    // not tied to selected access control implementation. E.g. HiveTransactionHandle.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc2Mjg0MA==", "bodyText": "I will drop it for now. Not sure if it is easily actionable. Without massive refactor.", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r562762840", "createdAt": "2021-01-22T16:47:39Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/AccessControlMetadataFactory.java", "diffHunk": "@@ -13,9 +13,9 @@\n  */\n package io.prestosql.plugin.hive.security;\n \n-import io.prestosql.plugin.hive.metastore.SemiTransactionalHiveMetastore;\n-\n public interface AccessControlMetadataFactory\n {\n-    AccessControlMetadata create(SemiTransactionalHiveMetastore metastore);\n+    // TODO get rid of SqlStandardAccessControlMetastore. Possibly replace with something generic\n+    // not tied to selected access control implementation. E.g. HiveTransactionHandle.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NjEzMw=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjY1ODUxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SemiTransactionalHiveSqlStandardAccessControlMetadataMetastore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDozNToyM1rOIVjLCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNjo1MjoxM1rOIYsfvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NzI3NA==", "bodyText": "That might be silly, but did you consider making SemiTransactionalHiveMetastore implement SqlStandardAccessControlMetadataMetastore directly?", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559467274", "createdAt": "2021-01-18T10:35:23Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SemiTransactionalHiveSqlStandardAccessControlMetadataMetastore.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.security;\n+\n+import io.prestosql.plugin.hive.authentication.HiveIdentity;\n+import io.prestosql.plugin.hive.metastore.HivePrincipal;\n+import io.prestosql.plugin.hive.metastore.HivePrivilegeInfo;\n+import io.prestosql.plugin.hive.metastore.SemiTransactionalHiveMetastore;\n+import io.prestosql.spi.security.RoleGrant;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SemiTransactionalHiveSqlStandardAccessControlMetadataMetastore\n+        implements SqlStandardAccessControlMetadataMetastore\n+{\n+    private final SemiTransactionalHiveMetastore hiveMetastore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc2NDU4NQ==", "bodyText": "Hmm - good point :)", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r562764585", "createdAt": "2021-01-22T16:50:19Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SemiTransactionalHiveSqlStandardAccessControlMetadataMetastore.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.security;\n+\n+import io.prestosql.plugin.hive.authentication.HiveIdentity;\n+import io.prestosql.plugin.hive.metastore.HivePrincipal;\n+import io.prestosql.plugin.hive.metastore.HivePrivilegeInfo;\n+import io.prestosql.plugin.hive.metastore.SemiTransactionalHiveMetastore;\n+import io.prestosql.spi.security.RoleGrant;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SemiTransactionalHiveSqlStandardAccessControlMetadataMetastore\n+        implements SqlStandardAccessControlMetadataMetastore\n+{\n+    private final SemiTransactionalHiveMetastore hiveMetastore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NzI3NA=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc2NTc1Nw==", "bodyText": "It may be a bit constraining if we want to change structure of it. But we can postpone adding an extra delegation layer.", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r562765757", "createdAt": "2021-01-22T16:52:13Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SemiTransactionalHiveSqlStandardAccessControlMetadataMetastore.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.security;\n+\n+import io.prestosql.plugin.hive.authentication.HiveIdentity;\n+import io.prestosql.plugin.hive.metastore.HivePrincipal;\n+import io.prestosql.plugin.hive.metastore.HivePrivilegeInfo;\n+import io.prestosql.plugin.hive.metastore.SemiTransactionalHiveMetastore;\n+import io.prestosql.spi.security.RoleGrant;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SemiTransactionalHiveSqlStandardAccessControlMetadataMetastore\n+        implements SqlStandardAccessControlMetadataMetastore\n+{\n+    private final SemiTransactionalHiveMetastore hiveMetastore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NzI3NA=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MjkwODYyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMTozODoxNFrOIbcqRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMTozODoxNFrOIbcqRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTY1MjAzOQ==", "bodyText": "Maybe call this getEnabledPrincipals or streamEnabledPrincipals?\nIt can also be made private.", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r565652039", "createdAt": "2021-01-27T21:38:14Z", "author": {"login": "jirassimok"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -218,6 +218,14 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return result.build();\n     }\n \n+    public Stream<HivePrincipal> listEnabledPrincipals(ConnectorIdentity identity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2Mjk0MzQ2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadataMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMTo0Nzo1NVrOIbc_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMTo0Nzo1NVrOIbc_yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTY1NzU0Nw==", "bodyText": "IntelliJ says that the implementation of every method in this interface is missing @Override.", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r565657547", "createdAt": "2021-01-27T21:47:55Z", "author": {"login": "jirassimok"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadataMetastore.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.security;\n+\n+import io.trino.plugin.hive.authentication.HiveIdentity;\n+import io.trino.plugin.hive.metastore.HivePrincipal;\n+import io.trino.plugin.hive.metastore.HivePrivilegeInfo;\n+import io.trino.spi.security.RoleGrant;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public interface SqlStandardAccessControlMetadataMetastore\n+{\n+    Set<String> listRoles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3ODM2ODE0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNTo1Mzo1N1rOIdn4IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwODoxMzozOFrOIeEUHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkzMjk2MA==", "bodyText": "Why io.trino.plugin.hive.metastore.thrift.ThriftMetastoreUtil#listEnabledPrincipals inlined here?\nuninline?", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r567932960", "createdAt": "2021-02-01T15:53:57Z", "author": {"login": "findepi"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -218,6 +218,14 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return result.build();\n     }\n \n+    private Stream<HivePrincipal> getEnabledPrincipals(ConnectorIdentity identity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM5ODg3OQ==", "bodyText": "hmm - interesting. Done", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r568398879", "createdAt": "2021-02-02T08:13:38Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -218,6 +218,14 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return result.build();\n     }\n \n+    private Stream<HivePrincipal> getEnabledPrincipals(ConnectorIdentity identity)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkzMjk2MA=="}, "originalCommit": null, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4666, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}