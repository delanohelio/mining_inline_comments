{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NjI2NTcw", "number": 3100, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTozMzo0OVrODoQA4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoyOTowNVrODoqaoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTMyMDAwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePartitionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTozMzo0OVrOF2r0Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDozNjo1NVrOF2uFVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4NTI3OQ==", "bodyText": "inline compactDomain", "url": "https://github.com/trinodb/trino/pull/3100#discussion_r392885279", "createdAt": "2020-03-16T09:33:49Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePartitionManager.java", "diffHunk": "@@ -243,14 +242,8 @@ public HiveTableHandle applyPartitionResult(HiveTableHandle handle, HivePartitio\n         effectivePredicate.getDomains().ifPresent(domains -> {\n             for (Map.Entry<ColumnHandle, Domain> entry : domains.entrySet()) {\n                 HiveColumnHandle hiveColumnHandle = (HiveColumnHandle) entry.getKey();\n-\n-                ValueSet values = entry.getValue().getValues();\n-                ValueSet compactValueSet = values.getValuesProcessor().<Optional<ValueSet>>transform(\n-                        ranges -> ranges.getRangeCount() > threshold ? Optional.of(ValueSet.ofRanges(ranges.getSpan())) : Optional.empty(),\n-                        discreteValues -> discreteValues.getValues().size() > threshold ? Optional.of(ValueSet.all(values.getType())) : Optional.empty(),\n-                        allOrNone -> Optional.empty())\n-                        .orElse(values);\n-                builder.put(hiveColumnHandle, Domain.create(compactValueSet, entry.getValue().isNullAllowed()));\n+                Domain compactDomain = entry.getValue().simplify(threshold);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyMjQ1NQ==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/3100#discussion_r392922455", "createdAt": "2020-03-16T10:36:55Z", "author": {"login": "raunaqmorarka"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePartitionManager.java", "diffHunk": "@@ -243,14 +242,8 @@ public HiveTableHandle applyPartitionResult(HiveTableHandle handle, HivePartitio\n         effectivePredicate.getDomains().ifPresent(domains -> {\n             for (Map.Entry<ColumnHandle, Domain> entry : domains.entrySet()) {\n                 HiveColumnHandle hiveColumnHandle = (HiveColumnHandle) entry.getKey();\n-\n-                ValueSet values = entry.getValue().getValues();\n-                ValueSet compactValueSet = values.getValuesProcessor().<Optional<ValueSet>>transform(\n-                        ranges -> ranges.getRangeCount() > threshold ? Optional.of(ValueSet.ofRanges(ranges.getSpan())) : Optional.empty(),\n-                        discreteValues -> discreteValues.getValues().size() > threshold ? Optional.of(ValueSet.all(values.getType())) : Optional.empty(),\n-                        allOrNone -> Optional.empty())\n-                        .orElse(values);\n-                builder.put(hiveColumnHandle, Domain.create(compactValueSet, entry.getValue().isNullAllowed()));\n+                Domain compactDomain = entry.getValue().simplify(threshold);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4NTI3OQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTY0NTc3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePartitionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoyOTowNVrOF3WMMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoxMzo0N1rOF3ZjMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3OTU2OQ==", "bodyText": "commit message is too long.\n\nChanged Domain#simplify to avoid constructing new objects to get size of Ranges or DiscreteValues\n\nHow do you avoid creating new objects?", "url": "https://github.com/trinodb/trino/pull/3100#discussion_r393579569", "createdAt": "2020-03-17T10:29:05Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePartitionManager.java", "diffHunk": "@@ -34,7 +34,6 @@\n import io.prestosql.spi.predicate.Domain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNDYwOQ==", "bodyText": "I was referring to new ArrayList<>(lowIndexedRanges.values()); in SortedRangeSet#getOrderedRanges and similar copying of internal structures in EquatableValueSet#getValues just to get their size. Now that's replaced by getRangeCount and getValuesCount.\nI'll shorten the commit message", "url": "https://github.com/trinodb/trino/pull/3100#discussion_r393634609", "createdAt": "2020-03-17T12:13:47Z", "author": {"login": "raunaqmorarka"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePartitionManager.java", "diffHunk": "@@ -34,7 +34,6 @@\n import io.prestosql.spi.predicate.Domain;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3OTU2OQ=="}, "originalCommit": null, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 593, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}