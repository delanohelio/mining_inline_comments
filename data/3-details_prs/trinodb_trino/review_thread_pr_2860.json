{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjAzMjgw", "number": 2860, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyODozNFrOD3R4sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoyMDo1NVrOD9NANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjkxMzEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyODozNFrOGNcpcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyODozNFrOGNcpcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1NDAzNA==", "bodyText": "Use full sentences (capitalize and period) for multi-line comments, since that makes it obvious it's a single item and not separate comments.", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r416754034", "createdAt": "2020-04-28T16:28:34Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "diffHunk": "@@ -391,11 +393,15 @@ private synchronized QueryResults getNextResult(long token, UriInfo uriInfo, Str\n         // client while holding the lock because the query may transition to the finished state when the\n         // last page is removed.  If another thread observes this state before the response is cached\n         // the pages will be lost.\n-        Iterable<List<Object>> data = null;\n+        QueryResultRows.Builder resultBuilder = QueryResultRows\n+                .builder(session.toConnectorSession())\n+                // intercept serialization exceptions and fail query if it's still possible", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjkxNTI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyOTowNFrOGNcq3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyOTowNFrOGNcq3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1NDM5OQ==", "bodyText": "Wrapping here looks funny. It's not too long, so put on the previous line", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r416754399", "createdAt": "2020-04-28T16:29:04Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "diffHunk": "@@ -391,11 +393,15 @@ private synchronized QueryResults getNextResult(long token, UriInfo uriInfo, Str\n         // client while holding the lock because the query may transition to the finished state when the\n         // last page is removed.  If another thread observes this state before the response is cached\n         // the pages will be lost.\n-        Iterable<List<Object>> data = null;\n+        QueryResultRows.Builder resultBuilder = QueryResultRows\n+                .builder(session.toConnectorSession())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA2MTAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo0Njo0MFrOGWcQmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo0Njo0MFrOGWcQmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NDg1Nw==", "bodyText": "The original \"data\" is more accurate since we're talking about data in the exchange client (if it's not closed then there might more data)", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426184857", "createdAt": "2020-05-16T19:46:40Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "diffHunk": "@@ -405,49 +411,39 @@ private synchronized QueryResults getNextResult(long token, UriInfo uriInfo, Str\n \n                 Page page = serde.deserialize(serializedPage);\n                 bytes += page.getLogicalSizeInBytes();\n-                rows += page.getPositionCount();\n-                pages.add(new RowIterable(session.toConnectorSession(), types, page));\n-            }\n-            if (rows > 0) {\n-                // client implementations do not properly handle empty list of data\n-                data = Iterables.concat(pages.build());\n+                resultBuilder.add(page);\n             }\n         }\n         catch (Throwable cause) {\n             queryManager.failQuery(queryId, cause);\n         }\n \n+        QueryResultRows resultRows = resultBuilder.build();\n+\n         // get the query info before returning\n         // force update if query manager is closed\n         QueryInfo queryInfo = queryManager.getFullQueryInfo(queryId);\n         queryManager.recordHeartbeat(queryId);\n \n-        // TODO: figure out a better way to do this\n         // grab the update count for non-queries\n-        if ((data != null) && (queryInfo.getUpdateType() != null) && (updateCount == null) &&\n-                (columns.size() == 1) && (columns.get(0).getType().equals(StandardTypes.BIGINT))) {\n-            Iterator<List<Object>> iterator = data.iterator();\n-            if (iterator.hasNext()) {\n-                Number number = (Number) iterator.next().get(0);\n-                if (number != null) {\n-                    updateCount = number.longValue();\n-                }\n-            }\n+        if ((queryInfo.getUpdateType() != null) && (updateCount == null) && resultRows.hasUpdateCount()) {\n+            updateCount = resultRows.getUpdateCount();\n         }\n \n         closeExchangeClientIfNecessary(queryInfo);\n \n         // for queries with no output, return a fake result for clients that require it\n         if ((queryInfo.getState() == QueryState.FINISHED) && !queryInfo.getOutputStage().isPresent()) {\n-            columns = ImmutableList.of(createColumn(\"result\", BooleanType.BOOLEAN));\n-            data = ImmutableSet.of(ImmutableList.of(true));\n+            resultRows = QueryResultRows.builder(session.toConnectorSession())\n+                    .withSingleBooleanValue(createColumn(\"result\", BooleanType.BOOLEAN), true)\n+                    .build();\n         }\n \n         // advance next token\n         // only return a next if\n         // (1) the query is not done AND the query state is not FAILED\n         //   OR\n-        // (2)there is more data to send (due to buffering)\n+        // (2)there is more resultRows to send (due to buffering)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA2NDExOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1MTozNFrOGWcSMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTozMzo1N1rOGYDT2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NTI2Nw==", "bodyText": "Do you have a stack trace or reproduction? This doesn't seem possibly based on my reading of the code. If it does, that seems like a bug, as the existing callers don't appear to handle or expect this.", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426185267", "createdAt": "2020-05-16T19:51:34Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "diffHunk": "@@ -516,6 +512,21 @@ private synchronized void closeExchangeClientIfNecessary(QueryInfo queryInfo)\n         }\n     }\n \n+    private void handleSerializationException(Throwable exception)\n+    {\n+        // failQuery can throw exception if query has already finished", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3Mjg1OA==", "bodyText": "It happens on the first query execution (doesn't happen afterwards).", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r427872858", "createdAt": "2020-05-20T09:33:19Z", "author": {"login": "wendigo"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "diffHunk": "@@ -516,6 +512,21 @@ private synchronized void closeExchangeClientIfNecessary(QueryInfo queryInfo)\n         }\n     }\n \n+    private void handleSerializationException(Throwable exception)\n+    {\n+        // failQuery can throw exception if query has already finished", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NTI2Nw=="}, "originalCommit": null, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3MzI0Mw==", "bodyText": "I'll post stacktrace", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r427873243", "createdAt": "2020-05-20T09:33:57Z", "author": {"login": "wendigo"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "diffHunk": "@@ -516,6 +512,21 @@ private synchronized void closeExchangeClientIfNecessary(QueryInfo queryInfo)\n         }\n     }\n \n+    private void handleSerializationException(Throwable exception)\n+    {\n+        // failQuery can throw exception if query has already finished", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NTI2Nw=="}, "originalCommit": null, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA2NDM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1MjoxMVrOGWcSWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1MjoxMVrOGWcSWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NTMwNw==", "bodyText": "This should be RuntimeException since failQuery() doesn't throw any checked exceptions", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426185307", "createdAt": "2020-05-16T19:52:11Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "diffHunk": "@@ -516,6 +512,21 @@ private synchronized void closeExchangeClientIfNecessary(QueryInfo queryInfo)\n         }\n     }\n \n+    private void handleSerializationException(Throwable exception)\n+    {\n+        // failQuery can throw exception if query has already finished\n+        try {\n+            queryManager.failQuery(queryId, exception);\n+        }\n+        catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA2NTg3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1NDozOVrOGWcTGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1NDozOVrOGWcTGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NTQ5OQ==", "bodyText": "Can use exception.isEmpty() now", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426185499", "createdAt": "2020-05-16T19:54:39Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "diffHunk": "@@ -709,17 +720,20 @@ private static StageStats toStageStats(StageInfo stageInfo)\n         return Optional.of(stage.getStageId().getId());\n     }\n \n-    private static QueryError toQueryError(QueryInfo queryInfo)\n+    private static QueryError toQueryError(QueryInfo queryInfo, Optional<Throwable> exception)\n     {\n         QueryState state = queryInfo.getState();\n-        if (state != FAILED) {\n+        if (state != FAILED && !exception.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA2NjA3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1NDo1NVrOGWcTNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1NDo1NVrOGWcTNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NTUyNQ==", "bodyText": "Can use exception.isEmpty() now", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426185525", "createdAt": "2020-05-16T19:54:55Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/Query.java", "diffHunk": "@@ -516,6 +512,21 @@ private synchronized void closeExchangeClientIfNecessary(QueryInfo queryInfo)\n         }\n     }\n \n+    private void handleSerializationException(Throwable exception)\n+    {\n+        // failQuery can throw exception if query has already finished\n+        try {\n+            queryManager.failQuery(queryId, exception);\n+        }\n+        catch (Exception e) {\n+            log.debug(\"Could not fail query\", e);\n+        }\n+\n+        if (!typeSerializationException.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA2NzEzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1NjoxNFrOGWcTtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1NjoxNFrOGWcTtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NTY1NA==", "bodyText": "I'd invert this and return early", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426185654", "createdAt": "2020-05-16T19:56:14Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()\n+    {\n+        if (hasUpdateCount()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA2NzM0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1NjoyM1rOGWcTyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1NjoyM1rOGWcTyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NTY3NQ==", "bodyText": "Remove this since there's no description", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426185675", "createdAt": "2020-05-16T19:56:23Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDA2NzcwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1Njo0OVrOGWcT-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxOTo1Njo0OVrOGWcT-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NTcyMA==", "bodyText": "Maybe rename method to getExpectedRowCount. Also, this method should probably be @VisibleForTesting since it's only used in tests", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426185720", "createdAt": "2020-05-16T19:56:49Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDk5Mzg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMToyODo0NFrOGWjtUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMToyODo0NFrOGWjtUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwNjg5Nw==", "bodyText": "The coupling of these methods is a bit strange. Based on the behavior, the method should be named like couldHaveUpdateCount, since it's checking if an update count is possible. It might be better to inline it into getUpdateCount, since there's no reason to expose this separately.", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426306897", "createdAt": "2020-05-17T21:28:44Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()\n+    {\n+        if (hasUpdateCount()) {\n+            requireNonNull(currentPage, \"currentPage is null\");\n+\n+            Block block = currentPage.getBlock(0);\n+            Number value = (Number) types.get(0).getObjectValue(session, block, 0);\n+\n+            if (value != null) {\n+                return value.longValue();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean hasUpdateCount()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDk5NDkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTozMDoxOFrOGWjt2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTozMDoxOFrOGWjt2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwNzAzMg==", "bodyText": "Let's change this and the usage in Query to OptionalLong or Optional<Long> (the latter is often preferable as it allows map and conversion to/from null).", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426307032", "createdAt": "2020-05-17T21:30:18Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDk5NzAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTozMzo1NlrOGWju9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyMzozM1rOGYFFXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwNzMxNg==", "bodyText": "This implements is redundant since AbstractIterator declares the same", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426307316", "createdAt": "2020-05-17T21:33:56Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMjMwMw==", "bodyText": "It's not (iterator() method is not defined in AbstractIterator)", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r427902303", "createdAt": "2020-05-20T10:23:33Z", "author": {"login": "wendigo"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwNzMxNg=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDk5NzI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTozNDo0MVrOGWjvHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTozNDo0MVrOGWjvHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwNzM1OQ==", "bodyText": "The \"else\" is redundant since the above \"if\" returns unconditionally", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426307359", "createdAt": "2020-05-17T21:34:41Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()\n+    {\n+        if (hasUpdateCount()) {\n+            requireNonNull(currentPage, \"currentPage is null\");\n+\n+            Block block = currentPage.getBlock(0);\n+            Number value = (Number) types.get(0).getObjectValue(session, block, 0);\n+\n+            if (value != null) {\n+                return value.longValue();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean hasUpdateCount()\n+    {\n+        return !isEmpty() && columns.size() == 1 && columns.get(0).getType().equals(StandardTypes.BIGINT);\n+    }\n+\n+    @Override\n+    protected List<Object> computeNext()\n+    {\n+        loop:\n+        while (true) {\n+            inPageIndex++;\n+\n+            if (currentPage == null || (pages.isEmpty() && inPageIndex >= currentPage.getPositionCount())) {\n+                return endOfData();\n+            }\n+            else if (inPageIndex >= currentPage.getPositionCount()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAwNTU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo0Njo1NVrOGWjzXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo0Njo1NVrOGWjzXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwODQ0NA==", "bodyText": "We can avoid these redundant checks if we restructure the code like\nif (currentPage == null) {\n    return endOfData();\n}\nif (inPageIndex >= currentPage.getPositionCount()) {\n    currentPage = pages.pollFirst();\n    if (currentPage == null) {\n        return endOfData();\n    }\n    inPageIndex = 0;\n}", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426308444", "createdAt": "2020-05-17T21:46:55Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()\n+    {\n+        if (hasUpdateCount()) {\n+            requireNonNull(currentPage, \"currentPage is null\");\n+\n+            Block block = currentPage.getBlock(0);\n+            Number value = (Number) types.get(0).getObjectValue(session, block, 0);\n+\n+            if (value != null) {\n+                return value.longValue();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean hasUpdateCount()\n+    {\n+        return !isEmpty() && columns.size() == 1 && columns.get(0).getType().equals(StandardTypes.BIGINT);\n+    }\n+\n+    @Override\n+    protected List<Object> computeNext()\n+    {\n+        loop:\n+        while (true) {\n+            inPageIndex++;\n+\n+            if (currentPage == null || (pages.isEmpty() && inPageIndex >= currentPage.getPositionCount())) {\n+                return endOfData();\n+            }\n+            else if (inPageIndex >= currentPage.getPositionCount()) {\n+                currentPage = pages.pollFirst();\n+                requireNonNull(currentPage, \"currentPage is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAwNjU3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo0ODoyMlrOGWjz4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo0ODoyMlrOGWjz4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwODU3OQ==", "bodyText": "Extract a method getRowValues() so that we don't need a labeled loop. Those are generally confusing and we don't use them in Presto. (the one usage in DelimiterLexer is forked from ANTLR)", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426308579", "createdAt": "2020-05-17T21:48:22Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()\n+    {\n+        if (hasUpdateCount()) {\n+            requireNonNull(currentPage, \"currentPage is null\");\n+\n+            Block block = currentPage.getBlock(0);\n+            Number value = (Number) types.get(0).getObjectValue(session, block, 0);\n+\n+            if (value != null) {\n+                return value.longValue();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean hasUpdateCount()\n+    {\n+        return !isEmpty() && columns.size() == 1 && columns.get(0).getType().equals(StandardTypes.BIGINT);\n+    }\n+\n+    @Override\n+    protected List<Object> computeNext()\n+    {\n+        loop:\n+        while (true) {\n+            inPageIndex++;\n+\n+            if (currentPage == null || (pages.isEmpty() && inPageIndex >= currentPage.getPositionCount())) {\n+                return endOfData();\n+            }\n+            else if (inPageIndex >= currentPage.getPositionCount()) {\n+                currentPage = pages.pollFirst();\n+                requireNonNull(currentPage, \"currentPage is null\");\n+                inPageIndex = 0;\n+            }\n+\n+            rowPosition++;\n+            List<Object> values = new ArrayList<>(columns.size());\n+\n+            for (int channel = 0; channel < currentPage.getChannelCount(); channel++) {\n+                Type type = types.get(channel);\n+                Block block = currentPage.getBlock(channel);\n+\n+                try {\n+                    values.add(channel, type.getObjectValue(session, block, inPageIndex));\n+                }\n+                catch (Throwable throwable) {\n+                    storeLastException(rowPosition, channel, throwable);\n+                    // if row contains unserializable value - skip row entirely\n+                    continue loop;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAwODM0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo1MTowMlrOGWj03w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo1MTowMlrOGWj03w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwODgzMQ==", "bodyText": "We don't use final on parameters or local variables", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426308831", "createdAt": "2020-05-17T21:51:02Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()\n+    {\n+        if (hasUpdateCount()) {\n+            requireNonNull(currentPage, \"currentPage is null\");\n+\n+            Block block = currentPage.getBlock(0);\n+            Number value = (Number) types.get(0).getObjectValue(session, block, 0);\n+\n+            if (value != null) {\n+                return value.longValue();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean hasUpdateCount()\n+    {\n+        return !isEmpty() && columns.size() == 1 && columns.get(0).getType().equals(StandardTypes.BIGINT);\n+    }\n+\n+    @Override\n+    protected List<Object> computeNext()\n+    {\n+        loop:\n+        while (true) {\n+            inPageIndex++;\n+\n+            if (currentPage == null || (pages.isEmpty() && inPageIndex >= currentPage.getPositionCount())) {\n+                return endOfData();\n+            }\n+            else if (inPageIndex >= currentPage.getPositionCount()) {\n+                currentPage = pages.pollFirst();\n+                requireNonNull(currentPage, \"currentPage is null\");\n+                inPageIndex = 0;\n+            }\n+\n+            rowPosition++;\n+            List<Object> values = new ArrayList<>(columns.size());\n+\n+            for (int channel = 0; channel < currentPage.getChannelCount(); channel++) {\n+                Type type = types.get(channel);\n+                Block block = currentPage.getBlock(channel);\n+\n+                try {\n+                    values.add(channel, type.getObjectValue(session, block, inPageIndex));\n+                }\n+                catch (Throwable throwable) {\n+                    storeLastException(rowPosition, channel, throwable);\n+                    // if row contains unserializable value - skip row entirely\n+                    continue loop;\n+                }\n+            }\n+\n+            return unmodifiableList(values);\n+        }\n+    }\n+\n+    private void storeLastException(final int row, final int column, final Throwable cause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAwODQ2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo1MToxN1rOGWj09A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo1MToxN1rOGWj09A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwODg1Mg==", "bodyText": "Format like\nString message = format(\"Could not serialize type '%s' value at position %d:%d\", columns.get(column).getType(), row + 1, column + 1);\nPrestoException exception = new PrestoException(SERIALIZATION_ERROR, message, cause);", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426308852", "createdAt": "2020-05-17T21:51:17Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()\n+    {\n+        if (hasUpdateCount()) {\n+            requireNonNull(currentPage, \"currentPage is null\");\n+\n+            Block block = currentPage.getBlock(0);\n+            Number value = (Number) types.get(0).getObjectValue(session, block, 0);\n+\n+            if (value != null) {\n+                return value.longValue();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean hasUpdateCount()\n+    {\n+        return !isEmpty() && columns.size() == 1 && columns.get(0).getType().equals(StandardTypes.BIGINT);\n+    }\n+\n+    @Override\n+    protected List<Object> computeNext()\n+    {\n+        loop:\n+        while (true) {\n+            inPageIndex++;\n+\n+            if (currentPage == null || (pages.isEmpty() && inPageIndex >= currentPage.getPositionCount())) {\n+                return endOfData();\n+            }\n+            else if (inPageIndex >= currentPage.getPositionCount()) {\n+                currentPage = pages.pollFirst();\n+                requireNonNull(currentPage, \"currentPage is null\");\n+                inPageIndex = 0;\n+            }\n+\n+            rowPosition++;\n+            List<Object> values = new ArrayList<>(columns.size());\n+\n+            for (int channel = 0; channel < currentPage.getChannelCount(); channel++) {\n+                Type type = types.get(channel);\n+                Block block = currentPage.getBlock(channel);\n+\n+                try {\n+                    values.add(channel, type.getObjectValue(session, block, inPageIndex));\n+                }\n+                catch (Throwable throwable) {\n+                    storeLastException(rowPosition, channel, throwable);\n+                    // if row contains unserializable value - skip row entirely\n+                    continue loop;\n+                }\n+            }\n+\n+            return unmodifiableList(values);\n+        }\n+    }\n+\n+    private void storeLastException(final int row, final int column, final Throwable cause)\n+    {\n+        // columns and rows are 0-indexed\n+        PrestoException exception = new PrestoException(SERIALIZATION_ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAxMDc4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo1NTowM1rOGWj2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo1NTowM1rOGWj2Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwOTE2Nw==", "bodyText": "Use Optional instead of a nullable field", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426309167", "createdAt": "2020-05-17T21:55:03Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()\n+    {\n+        if (hasUpdateCount()) {\n+            requireNonNull(currentPage, \"currentPage is null\");\n+\n+            Block block = currentPage.getBlock(0);\n+            Number value = (Number) types.get(0).getObjectValue(session, block, 0);\n+\n+            if (value != null) {\n+                return value.longValue();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean hasUpdateCount()\n+    {\n+        return !isEmpty() && columns.size() == 1 && columns.get(0).getType().equals(StandardTypes.BIGINT);\n+    }\n+\n+    @Override\n+    protected List<Object> computeNext()\n+    {\n+        loop:\n+        while (true) {\n+            inPageIndex++;\n+\n+            if (currentPage == null || (pages.isEmpty() && inPageIndex >= currentPage.getPositionCount())) {\n+                return endOfData();\n+            }\n+            else if (inPageIndex >= currentPage.getPositionCount()) {\n+                currentPage = pages.pollFirst();\n+                requireNonNull(currentPage, \"currentPage is null\");\n+                inPageIndex = 0;\n+            }\n+\n+            rowPosition++;\n+            List<Object> values = new ArrayList<>(columns.size());\n+\n+            for (int channel = 0; channel < currentPage.getChannelCount(); channel++) {\n+                Type type = types.get(channel);\n+                Block block = currentPage.getBlock(channel);\n+\n+                try {\n+                    values.add(channel, type.getObjectValue(session, block, inPageIndex));\n+                }\n+                catch (Throwable throwable) {\n+                    storeLastException(rowPosition, channel, throwable);\n+                    // if row contains unserializable value - skip row entirely\n+                    continue loop;\n+                }\n+            }\n+\n+            return unmodifiableList(values);\n+        }\n+    }\n+\n+    private void storeLastException(final int row, final int column, final Throwable cause)\n+    {\n+        // columns and rows are 0-indexed\n+        PrestoException exception = new PrestoException(SERIALIZATION_ERROR,\n+                format(\"Could not serialize type '%s' value at position %d:%d\", columns.get(column).getType(), row + 1, column + 1),\n+                cause);\n+\n+        lastException = exception;\n+\n+        if (exceptionConsumer != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAxMzQ0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo1OTowN1rOGWj3iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMTo1OTowN1rOGWj3iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwOTUxMw==", "bodyText": "Only use assertTrue for boolean conditions. Use a more specific assert otherwise, as that provides a better error message:\nassertThat(rows).as(\"rows\").isEmpty();", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426309513", "createdAt": "2020-05-17T21:59:07Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAxNDQ2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowMDozN1rOGWj4CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowMDozN1rOGWj4CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwOTY0MA==", "bodyText": "This can be\nassertThat(rows.iterator()).isExhausted();", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426309640", "createdAt": "2020-05-17T22:00:37Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAxNTA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowMToyMVrOGWj4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowMToyMVrOGWj4UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwOTcxMg==", "bodyText": "assertThat(rows).as(\"rows\").isNotEmpty();", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426309712", "createdAt": "2020-05-17T22:01:21Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnSingleValue()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, true)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAxNjI0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowMzowOVrOGWj47Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowMzozMVrOGWj5Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwOTg2OQ==", "bodyText": "This can be\nassertThat(getAllValues(rows)).containsExactly(true);\nNo need to duplicate the size check", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426309869", "createdAt": "2020-05-17T22:03:09Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnSingleValue()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, true)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwOTg5MQ==", "bodyText": "Please update below assertions based on above comments.", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426309891", "createdAt": "2020-05-17T22:03:31Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnSingleValue()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, true)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwOTg2OQ=="}, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAxODM0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowNjozMVrOGWj6Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowNjozMVrOGWj6Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMDE1MA==", "bodyText": "Use shouldNot instead of a contraction when naming methods", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426310150", "createdAt": "2020-05-17T22:06:31Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnSingleValue()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, true)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(true));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BIGINT, new ClientTypeSignature(BIGINT));\n+        long value = 10123;\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(ImmutableList.of(column), ImmutableList.of(BigintType.BIGINT))\n+                .add(createLongPage(value))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertTrue(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(value);\n+\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(value));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldntHaveUpdateCount()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAxOTkzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowODozN1rOGWj61g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowODozN1rOGWj61g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMDM1OA==", "bodyText": "We should validate the ordering as well\nassertThat(getAllValues(rows)).containsExactly(\n        ImmutableList.of(0, 10L),\n        ImmutableList.of(1, 11L),\n        ...);", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426310358", "createdAt": "2020-05-17T22:08:37Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnSingleValue()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, true)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(true));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BIGINT, new ClientTypeSignature(BIGINT));\n+        long value = 10123;\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(ImmutableList.of(column), ImmutableList.of(BigintType.BIGINT))\n+                .add(createLongPage(value))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertTrue(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(value);\n+\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(value));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldntHaveUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, false)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertFalse(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(null);\n+        assertTrue(rows.iterator().hasNext());\n+    }\n+\n+    @Test\n+    public void shouldReadAllValuesFromMultiplePages()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)), new Column(\"_col1\", BIGINT, new ClientTypeSignature(BIGINT)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BigintType.BIGINT);\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(columns, types)\n+                .add(createPage(ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4), ImmutableList.of(10L, 11L, 12L, 13L, 14L)), types))\n+                .add(createPage(ImmutableList.of(ImmutableList.of(100, 101, 102, 103, 104), ImmutableList.of(110L, 111L, 112L, 113L, 114L)), types))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are empty\");\n+        assertThat(rows.getTotalRows()).isEqualTo(10);\n+        assertThat(rows.getColumns()).isEqualTo(columns);\n+        assertFalse(rows.hasUpdateCount());\n+\n+        assertThat(getAllValues(rows))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAyMDYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowOTo1MFrOGWj7LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjowOTo1MFrOGWj7LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMDQ0NQ==", "bodyText": "We don't use final on local variables", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426310445", "createdAt": "2020-05-17T22:09:50Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnSingleValue()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, true)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(true));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BIGINT, new ClientTypeSignature(BIGINT));\n+        long value = 10123;\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(ImmutableList.of(column), ImmutableList.of(BigintType.BIGINT))\n+                .add(createLongPage(value))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertTrue(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(value);\n+\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(value));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldntHaveUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, false)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertFalse(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(null);\n+        assertTrue(rows.iterator().hasNext());\n+    }\n+\n+    @Test\n+    public void shouldReadAllValuesFromMultiplePages()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)), new Column(\"_col1\", BIGINT, new ClientTypeSignature(BIGINT)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BigintType.BIGINT);\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(columns, types)\n+                .add(createPage(ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4), ImmutableList.of(10L, 11L, 12L, 13L, 14L)), types))\n+                .add(createPage(ImmutableList.of(ImmutableList.of(100, 101, 102, 103, 104), ImmutableList.of(110L, 111L, 112L, 113L, 114L)), types))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are empty\");\n+        assertThat(rows.getTotalRows()).isEqualTo(10);\n+        assertThat(rows.getColumns()).isEqualTo(columns);\n+        assertFalse(rows.hasUpdateCount());\n+\n+        assertThat(getAllValues(rows))\n+                .hasSize(10)\n+                .contains(ImmutableList.of(0, 10L))\n+                .contains(ImmutableList.of(1, 11L))\n+                .contains(ImmutableList.of(2, 12L))\n+                .contains(ImmutableList.of(3, 13L))\n+                .contains(ImmutableList.of(4, 14L))\n+                .contains(ImmutableList.of(100, 110L))\n+                .contains(ImmutableList.of(101, 111L))\n+                .contains(ImmutableList.of(102, 112L))\n+                .contains(ImmutableList.of(103, 113L))\n+                .contains(ImmutableList.of(104, 114L));\n+\n+        assertThat(rows.getLastSerializationException()).isEmpty();\n+    }\n+\n+    @Test\n+    public void shouldOmitBadRows()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)), new Column(\"_col1\", BOOLEAN, new ClientTypeSignature(BOOLEAN)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BogusType.BOGUS_TYPE);\n+        final List<Throwable> exceptions = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAyMjg0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxMjo1M1rOGWj8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxMjo1M1rOGWj8RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMDcyNQ==", "bodyText": "This \"last exception\" seems to only be used for testing. Let's remove it, since we can and already do use the consumer for testing.", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426310725", "createdAt": "2020-05-17T22:12:53Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.AbstractIterator;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.spi.StandardErrorCode.SERIALIZATION_ERROR;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class QueryResultRows\n+        extends AbstractIterator<List<Object>>\n+        implements Iterable<List<Object>>\n+{\n+    private final ConnectorSession session;\n+    private final List<Type> types;\n+    private final List<Column> columns;\n+    private final Deque<Page> pages;\n+    private final int totalRows;\n+\n+    private Page currentPage;\n+    private Throwable lastException;\n+    private Consumer<Throwable> exceptionConsumer;\n+\n+    private int rowPosition = -1;\n+    private int inPageIndex = -1;\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages)\n+    {\n+        this(session, types, columns, pages, null);\n+    }\n+\n+    private QueryResultRows(ConnectorSession session, List<Type> types, List<Column> columns, List<Page> pages, Consumer<Throwable> exceptionConsumer)\n+    {\n+        this.session = requireNonNull(session, \"session is null\");\n+        this.types = requireNonNull(types, \"types is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.pages = new ArrayDeque<>(requireNonNull(pages, \"pages is null\"));\n+        this.exceptionConsumer = exceptionConsumer;\n+        this.totalRows = countRows(pages);\n+        this.currentPage = this.pages.pollFirst();\n+\n+        verify(this.types.size() == this.columns.size(), \"columns and types sizes mismatch\");\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return totalRows == 0;\n+    }\n+\n+    public List<Column> getColumns()\n+    {\n+        return columns;\n+    }\n+\n+    public QueryResultRows getSelfOrNull()\n+    {\n+        if (isEmpty()) {\n+            return null;\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Returns expected row count (we don't know yet if every row is serializable)\n+     *\n+     * @return int\n+     */\n+    public int getTotalRows()\n+    {\n+        return totalRows;\n+    }\n+\n+    public Long getUpdateCount()\n+    {\n+        if (hasUpdateCount()) {\n+            requireNonNull(currentPage, \"currentPage is null\");\n+\n+            Block block = currentPage.getBlock(0);\n+            Number value = (Number) types.get(0).getObjectValue(session, block, 0);\n+\n+            if (value != null) {\n+                return value.longValue();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean hasUpdateCount()\n+    {\n+        return !isEmpty() && columns.size() == 1 && columns.get(0).getType().equals(StandardTypes.BIGINT);\n+    }\n+\n+    @Override\n+    protected List<Object> computeNext()\n+    {\n+        loop:\n+        while (true) {\n+            inPageIndex++;\n+\n+            if (currentPage == null || (pages.isEmpty() && inPageIndex >= currentPage.getPositionCount())) {\n+                return endOfData();\n+            }\n+            else if (inPageIndex >= currentPage.getPositionCount()) {\n+                currentPage = pages.pollFirst();\n+                requireNonNull(currentPage, \"currentPage is null\");\n+                inPageIndex = 0;\n+            }\n+\n+            rowPosition++;\n+            List<Object> values = new ArrayList<>(columns.size());\n+\n+            for (int channel = 0; channel < currentPage.getChannelCount(); channel++) {\n+                Type type = types.get(channel);\n+                Block block = currentPage.getBlock(channel);\n+\n+                try {\n+                    values.add(channel, type.getObjectValue(session, block, inPageIndex));\n+                }\n+                catch (Throwable throwable) {\n+                    storeLastException(rowPosition, channel, throwable);\n+                    // if row contains unserializable value - skip row entirely\n+                    continue loop;\n+                }\n+            }\n+\n+            return unmodifiableList(values);\n+        }\n+    }\n+\n+    private void storeLastException(final int row, final int column, final Throwable cause)\n+    {\n+        // columns and rows are 0-indexed\n+        PrestoException exception = new PrestoException(SERIALIZATION_ERROR,\n+                format(\"Could not serialize type '%s' value at position %d:%d\", columns.get(column).getType(), row + 1, column + 1),\n+                cause);\n+\n+        lastException = exception;\n+\n+        if (exceptionConsumer != null) {\n+            exceptionConsumer.accept(exception);\n+        }\n+    }\n+\n+    public Optional<Throwable> getLastSerializationException()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAyNDYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxNTo1OFrOGWj9Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxNTo1OFrOGWj9Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMDk2Ng==", "bodyText": "No need for this utility -- use RowPagesBuilder instead", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426310966", "createdAt": "2020-05-17T22:15:58Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnSingleValue()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, true)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(true));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BIGINT, new ClientTypeSignature(BIGINT));\n+        long value = 10123;\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(ImmutableList.of(column), ImmutableList.of(BigintType.BIGINT))\n+                .add(createLongPage(value))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertTrue(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(value);\n+\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(value));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldntHaveUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, false)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertFalse(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(null);\n+        assertTrue(rows.iterator().hasNext());\n+    }\n+\n+    @Test\n+    public void shouldReadAllValuesFromMultiplePages()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)), new Column(\"_col1\", BIGINT, new ClientTypeSignature(BIGINT)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BigintType.BIGINT);\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(columns, types)\n+                .add(createPage(ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4), ImmutableList.of(10L, 11L, 12L, 13L, 14L)), types))\n+                .add(createPage(ImmutableList.of(ImmutableList.of(100, 101, 102, 103, 104), ImmutableList.of(110L, 111L, 112L, 113L, 114L)), types))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are empty\");\n+        assertThat(rows.getTotalRows()).isEqualTo(10);\n+        assertThat(rows.getColumns()).isEqualTo(columns);\n+        assertFalse(rows.hasUpdateCount());\n+\n+        assertThat(getAllValues(rows))\n+                .hasSize(10)\n+                .contains(ImmutableList.of(0, 10L))\n+                .contains(ImmutableList.of(1, 11L))\n+                .contains(ImmutableList.of(2, 12L))\n+                .contains(ImmutableList.of(3, 13L))\n+                .contains(ImmutableList.of(4, 14L))\n+                .contains(ImmutableList.of(100, 110L))\n+                .contains(ImmutableList.of(101, 111L))\n+                .contains(ImmutableList.of(102, 112L))\n+                .contains(ImmutableList.of(103, 113L))\n+                .contains(ImmutableList.of(104, 114L));\n+\n+        assertThat(rows.getLastSerializationException()).isEmpty();\n+    }\n+\n+    @Test\n+    public void shouldOmitBadRows()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)), new Column(\"_col1\", BOOLEAN, new ClientTypeSignature(BOOLEAN)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BogusType.BOGUS_TYPE);\n+        final List<Throwable> exceptions = new ArrayList<>();\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(columns, types)\n+                .withExceptionConsumer(exceptions::add)\n+                .add(createPage(ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4), ImmutableList.of(true, false, true, false, true)), types))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are empty\");\n+        assertThat(rows.getTotalRows()).isEqualTo(5);\n+        assertThat(rows.getColumns()).isEqualTo(columns);\n+        assertFalse(rows.hasUpdateCount());\n+\n+        assertThat(getAllValues(rows))\n+                .hasSize(2)\n+                .contains(ImmutableList.of(1, false))\n+                .contains(ImmutableList.of(3, false));\n+\n+        assertThat(rows.getLastSerializationException())\n+                .isPresent();\n+\n+        assertThat(rows.getLastSerializationException().get())\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 5:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+\n+        assertThat(exceptions)\n+                .hasSize(3);\n+\n+        assertThat(exceptions.get(0))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 1:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+\n+        assertThat(exceptions.get(1))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 3:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+\n+        assertThat(exceptions.get(2))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 5:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+    }\n+\n+    private static List<List<Object>> getAllValues(QueryResultRows rows)\n+    {\n+        ImmutableList.Builder<List<Object>> builder = ImmutableList.builder();\n+\n+        for (List<Object> values : rows) {\n+            builder.add(values);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private static ConnectorSession getSession()\n+    {\n+        return TestingConnectorSession.builder()\n+                .build();\n+    }\n+\n+    private static Page createLongPage(long value)\n+    {\n+        BlockBuilder blockBuilder = BigintType.BIGINT.createBlockBuilder(null, 1);\n+        BigintType.BIGINT.writeLong(blockBuilder, value);\n+        return new Page(blockBuilder.build());\n+    }\n+\n+    private static Page createPage(List<List<Object>> values, List<Type> types)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAyNTQ1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxNzozMVrOGWj9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxNzozMVrOGWj9rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTA4Ng==", "bodyText": "return rowPagesBuilder(BIGINT).row(value).build();", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426311086", "createdAt": "2020-05-17T22:17:31Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnSingleValue()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, true)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(true));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BIGINT, new ClientTypeSignature(BIGINT));\n+        long value = 10123;\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(ImmutableList.of(column), ImmutableList.of(BigintType.BIGINT))\n+                .add(createLongPage(value))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertTrue(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(value);\n+\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(value));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldntHaveUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, false)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertFalse(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(null);\n+        assertTrue(rows.iterator().hasNext());\n+    }\n+\n+    @Test\n+    public void shouldReadAllValuesFromMultiplePages()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)), new Column(\"_col1\", BIGINT, new ClientTypeSignature(BIGINT)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BigintType.BIGINT);\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(columns, types)\n+                .add(createPage(ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4), ImmutableList.of(10L, 11L, 12L, 13L, 14L)), types))\n+                .add(createPage(ImmutableList.of(ImmutableList.of(100, 101, 102, 103, 104), ImmutableList.of(110L, 111L, 112L, 113L, 114L)), types))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are empty\");\n+        assertThat(rows.getTotalRows()).isEqualTo(10);\n+        assertThat(rows.getColumns()).isEqualTo(columns);\n+        assertFalse(rows.hasUpdateCount());\n+\n+        assertThat(getAllValues(rows))\n+                .hasSize(10)\n+                .contains(ImmutableList.of(0, 10L))\n+                .contains(ImmutableList.of(1, 11L))\n+                .contains(ImmutableList.of(2, 12L))\n+                .contains(ImmutableList.of(3, 13L))\n+                .contains(ImmutableList.of(4, 14L))\n+                .contains(ImmutableList.of(100, 110L))\n+                .contains(ImmutableList.of(101, 111L))\n+                .contains(ImmutableList.of(102, 112L))\n+                .contains(ImmutableList.of(103, 113L))\n+                .contains(ImmutableList.of(104, 114L));\n+\n+        assertThat(rows.getLastSerializationException()).isEmpty();\n+    }\n+\n+    @Test\n+    public void shouldOmitBadRows()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)), new Column(\"_col1\", BOOLEAN, new ClientTypeSignature(BOOLEAN)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BogusType.BOGUS_TYPE);\n+        final List<Throwable> exceptions = new ArrayList<>();\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(columns, types)\n+                .withExceptionConsumer(exceptions::add)\n+                .add(createPage(ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4), ImmutableList.of(true, false, true, false, true)), types))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are empty\");\n+        assertThat(rows.getTotalRows()).isEqualTo(5);\n+        assertThat(rows.getColumns()).isEqualTo(columns);\n+        assertFalse(rows.hasUpdateCount());\n+\n+        assertThat(getAllValues(rows))\n+                .hasSize(2)\n+                .contains(ImmutableList.of(1, false))\n+                .contains(ImmutableList.of(3, false));\n+\n+        assertThat(rows.getLastSerializationException())\n+                .isPresent();\n+\n+        assertThat(rows.getLastSerializationException().get())\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 5:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+\n+        assertThat(exceptions)\n+                .hasSize(3);\n+\n+        assertThat(exceptions.get(0))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 1:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+\n+        assertThat(exceptions.get(1))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 3:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+\n+        assertThat(exceptions.get(2))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 5:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+    }\n+\n+    private static List<List<Object>> getAllValues(QueryResultRows rows)\n+    {\n+        ImmutableList.Builder<List<Object>> builder = ImmutableList.builder();\n+\n+        for (List<Object> values : rows) {\n+            builder.add(values);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private static ConnectorSession getSession()\n+    {\n+        return TestingConnectorSession.builder()\n+                .build();\n+    }\n+\n+    private static Page createLongPage(long value)\n+    {\n+        BlockBuilder blockBuilder = BigintType.BIGINT.createBlockBuilder(null, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAyNjM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxODo0NlrOGWj-LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxODo0NlrOGWj-LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTIxMw==", "bodyText": "You can simplify this by extending AbstractLongType", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426311213", "createdAt": "2020-05-17T22:18:46Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.protocol;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.client.ClientTypeSignature;\n+import io.prestosql.client.Column;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.ByteArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.type.AbstractType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.FixedWidthType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.prestosql.client.ClientStandardTypes.BIGINT;\n+import static io.prestosql.client.ClientStandardTypes.BOOLEAN;\n+import static io.prestosql.client.ClientStandardTypes.INTEGER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestQueryResultRows\n+{\n+    @Test\n+    public void shouldNotReturnValues()\n+    {\n+        QueryResultRows rows = QueryResultRows.empty(getSession());\n+\n+        assertTrue(rows.isEmpty(), \"rows are empty\");\n+        assertThat(getAllValues(rows)).hasSize(0);\n+        assertThat(rows.getColumns()).hasSize(0);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnSingleValue()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, true)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(true));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldReturnUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BIGINT, new ClientTypeSignature(BIGINT));\n+        long value = 10123;\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(ImmutableList.of(column), ImmutableList.of(BigintType.BIGINT))\n+                .add(createLongPage(value))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertTrue(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(value);\n+\n+        assertThat(getAllValues(rows)).hasSize(1).containsOnly(ImmutableList.of(value));\n+        assertThat(rows.getColumns()).containsOnly(column);\n+        assertThat(rows.iterator().hasNext()).isFalse();\n+    }\n+\n+    @Test\n+    public void shouldntHaveUpdateCount()\n+    {\n+        Column column = new Column(\"_col0\", BOOLEAN, new ClientTypeSignature(BOOLEAN));\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withSingleBooleanValue(column, false)\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are not empty\");\n+        assertFalse(rows.hasUpdateCount(), \"has update count\");\n+        assertThat(rows.getUpdateCount()).isEqualTo(null);\n+        assertTrue(rows.iterator().hasNext());\n+    }\n+\n+    @Test\n+    public void shouldReadAllValuesFromMultiplePages()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)), new Column(\"_col1\", BIGINT, new ClientTypeSignature(BIGINT)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BigintType.BIGINT);\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(columns, types)\n+                .add(createPage(ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4), ImmutableList.of(10L, 11L, 12L, 13L, 14L)), types))\n+                .add(createPage(ImmutableList.of(ImmutableList.of(100, 101, 102, 103, 104), ImmutableList.of(110L, 111L, 112L, 113L, 114L)), types))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are empty\");\n+        assertThat(rows.getTotalRows()).isEqualTo(10);\n+        assertThat(rows.getColumns()).isEqualTo(columns);\n+        assertFalse(rows.hasUpdateCount());\n+\n+        assertThat(getAllValues(rows))\n+                .hasSize(10)\n+                .contains(ImmutableList.of(0, 10L))\n+                .contains(ImmutableList.of(1, 11L))\n+                .contains(ImmutableList.of(2, 12L))\n+                .contains(ImmutableList.of(3, 13L))\n+                .contains(ImmutableList.of(4, 14L))\n+                .contains(ImmutableList.of(100, 110L))\n+                .contains(ImmutableList.of(101, 111L))\n+                .contains(ImmutableList.of(102, 112L))\n+                .contains(ImmutableList.of(103, 113L))\n+                .contains(ImmutableList.of(104, 114L));\n+\n+        assertThat(rows.getLastSerializationException()).isEmpty();\n+    }\n+\n+    @Test\n+    public void shouldOmitBadRows()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", INTEGER, new ClientTypeSignature(INTEGER)), new Column(\"_col1\", BOOLEAN, new ClientTypeSignature(BOOLEAN)));\n+        List<Type> types = ImmutableList.of(IntegerType.INTEGER, BogusType.BOGUS_TYPE);\n+        final List<Throwable> exceptions = new ArrayList<>();\n+\n+        QueryResultRows rows = QueryResultRows.builder(getSession())\n+                .withColumns(columns, types)\n+                .withExceptionConsumer(exceptions::add)\n+                .add(createPage(ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4), ImmutableList.of(true, false, true, false, true)), types))\n+                .build();\n+\n+        assertFalse(rows.isEmpty(), \"rows are empty\");\n+        assertThat(rows.getTotalRows()).isEqualTo(5);\n+        assertThat(rows.getColumns()).isEqualTo(columns);\n+        assertFalse(rows.hasUpdateCount());\n+\n+        assertThat(getAllValues(rows))\n+                .hasSize(2)\n+                .contains(ImmutableList.of(1, false))\n+                .contains(ImmutableList.of(3, false));\n+\n+        assertThat(rows.getLastSerializationException())\n+                .isPresent();\n+\n+        assertThat(rows.getLastSerializationException().get())\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 5:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+\n+        assertThat(exceptions)\n+                .hasSize(3);\n+\n+        assertThat(exceptions.get(0))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 1:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+\n+        assertThat(exceptions.get(1))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 3:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+\n+        assertThat(exceptions.get(2))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"Could not serialize type 'boolean' value at position 5:2\")\n+                .hasRootCauseMessage(\"This is bogus exception\");\n+    }\n+\n+    private static List<List<Object>> getAllValues(QueryResultRows rows)\n+    {\n+        ImmutableList.Builder<List<Object>> builder = ImmutableList.builder();\n+\n+        for (List<Object> values : rows) {\n+            builder.add(values);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private static ConnectorSession getSession()\n+    {\n+        return TestingConnectorSession.builder()\n+                .build();\n+    }\n+\n+    private static Page createLongPage(long value)\n+    {\n+        BlockBuilder blockBuilder = BigintType.BIGINT.createBlockBuilder(null, 1);\n+        BigintType.BIGINT.writeLong(blockBuilder, value);\n+        return new Page(blockBuilder.build());\n+    }\n+\n+    private static Page createPage(List<List<Object>> values, List<Type> types)\n+    {\n+        ImmutableList.Builder<Block> blocks = ImmutableList.builder();\n+\n+        for (int i = 0; i < types.size(); i++) {\n+            Type currentType = types.get(i);\n+            BlockBuilder blockBuilder = currentType.createBlockBuilder(null, values.get(i).size());\n+\n+            for (Object value : values.get(i)) {\n+                if (currentType instanceof BigintType) {\n+                    BigintType.BIGINT.writeLong(blockBuilder, (Long) value);\n+                }\n+\n+                if (currentType instanceof BooleanType) {\n+                    BooleanType.BOOLEAN.writeBoolean(blockBuilder, (Boolean) value);\n+                }\n+\n+                if (currentType instanceof IntegerType) {\n+                    IntegerType.INTEGER.writeLong(blockBuilder, (Integer) value);\n+                }\n+\n+                if (currentType instanceof BogusType) {\n+                    BogusType.BOGUS_TYPE.writeBoolean(blockBuilder, (Boolean) value);\n+                }\n+            }\n+\n+            blocks.add(blockBuilder.build());\n+        }\n+\n+        return new Page(blocks.build().toArray(new Block[0]));\n+    }\n+\n+    public static final class BogusType\n+            extends AbstractType", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAyNjU5OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/tests/TestQuerySerializationFailures.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxOTozM1rOGWj-UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoxOTozM1rOGWj-UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTI0OQ==", "bodyText": "Put the initialization at the start of the class", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426311249", "createdAt": "2020-05-17T22:19:33Z", "author": {"login": "electrum"}, "path": "presto-tests/src/test/java/io/prestosql/tests/TestQuerySerializationFailures.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.AbstractVariableWidthType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static io.prestosql.spi.type.StandardTypes.BOOLEAN;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+\n+public class TestQuerySerializationFailures\n+        extends AbstractTestQueryFramework\n+{\n+    @Test\n+    public void shouldFailOnFirstSerializationError()\n+    {\n+        assertQueryFails(\"SELECT * FROM ( VALUES BOGUS(true), BOGUS(false), BOGUS(true) )\", \"Could not serialize type 'Bogus' value at position 1:1\");\n+    }\n+\n+    @Test\n+    public void shouldPass()\n+    {\n+        assertQuerySucceeds(\"SELECT * FROM ( VALUES BOGUS(false) )\");\n+    }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTAyNzcyOnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/tests/TestQuerySerializationFailures.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoyMDo1NVrOGWj-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMjoyMDo1NVrOGWj-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMxMTM4NA==", "bodyText": "Make BogusType a top level test class in presto-main, then we can reuse it here (this module depends on the test-jar from presto-main)", "url": "https://github.com/trinodb/trino/pull/2860#discussion_r426311384", "createdAt": "2020-05-17T22:20:55Z", "author": {"login": "electrum"}, "path": "presto-tests/src/test/java/io/prestosql/tests/TestQuerySerializationFailures.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.AbstractVariableWidthType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static io.prestosql.spi.type.StandardTypes.BOOLEAN;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+\n+public class TestQuerySerializationFailures\n+        extends AbstractTestQueryFramework\n+{\n+    @Test\n+    public void shouldFailOnFirstSerializationError()\n+    {\n+        assertQueryFails(\"SELECT * FROM ( VALUES BOGUS(true), BOGUS(false), BOGUS(true) )\", \"Could not serialize type 'Bogus' value at position 1:1\");\n+    }\n+\n+    @Test\n+    public void shouldPass()\n+    {\n+        assertQuerySucceeds(\"SELECT * FROM ( VALUES BOGUS(false) )\");\n+    }\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner\n+                .builder(testSessionBuilder().build())\n+                .setNodeCount(4)\n+                .build();\n+\n+        queryRunner.installPlugin(new BogusPlugin());\n+\n+        return queryRunner;\n+    }\n+\n+    public static class BogusPlugin\n+            implements Plugin\n+    {\n+        @Override\n+        public Iterable<Type> getTypes()\n+        {\n+            return ImmutableList.of(BogusType.BOGUS_TYPE);\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getFunctions()\n+        {\n+            return ImmutableSet.of(BogusFunctions.class);\n+        }\n+    }\n+\n+    public static final class BogusType", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 785, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}