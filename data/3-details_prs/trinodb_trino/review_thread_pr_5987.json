{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNDg1NDU0", "number": 5987, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxNTozN1rOE6EL3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToyMDoyOFrOE6EV-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzIxNDM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/type/UnknownType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxNTozN1rOH05ywA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxNTozN1rOH05ywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzNDg4MA==", "bodyText": "These methods are used in TypeOperatorDeclaration#extractOperatorDeclaration", "url": "https://github.com/trinodb/trino/pull/5987#discussion_r525234880", "createdAt": "2020-11-17T15:15:37Z", "author": {"login": "brandboat"}, "path": "presto-main/src/main/java/io/prestosql/type/UnknownType.java", "diffHunk": "@@ -134,18 +134,21 @@ public void writeBoolean(BlockBuilder blockBuilder, boolean value)\n         blockBuilder.appendNull();\n     }\n \n+    @SuppressWarnings(\"unused\")\n     @ScalarOperator(EQUAL)\n     private static boolean equalOperator(boolean left, boolean right)\n     {\n         throw new AssertionError(\"value of unknown type should all be NULL\");\n     }\n \n+    @SuppressWarnings(\"unused\")\n     @ScalarOperator(XX_HASH_64)\n     private static long xxHash64Operator(boolean value)\n     {\n         throw new AssertionError(\"value of unknown type should all be NULL\");\n     }\n \n+    @SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzIzNDE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/TestAnnotationEngineForScalars.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxOToyOVrOH05-rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyNDoyN1rOH1zHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzNzkzNA==", "bodyText": "This field would be parsed during tests.", "url": "https://github.com/trinodb/trino/pull/5987#discussion_r525237934", "createdAt": "2020-11-17T15:19:29Z", "author": {"login": "brandboat"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestAnnotationEngineForScalars.java", "diffHunk": "@@ -465,6 +465,7 @@ public void testSimpleInjectionScalarParse()\n     @Description(\"Parametric scalar with type injected though constructor\")\n     public static class ConstructorInjectionScalarFunction\n     {\n+        @SuppressWarnings(\"unused\")\n         private final Type type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2NzI1OQ==", "bodyText": "i removed the field and the TestAnnotationEngineForScalars test class still passes.\nAre we missing an assertion somewhere?", "url": "https://github.com/trinodb/trino/pull/5987#discussion_r526067259", "createdAt": "2020-11-18T13:00:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestAnnotationEngineForScalars.java", "diffHunk": "@@ -465,6 +465,7 @@ public void testSimpleInjectionScalarParse()\n     @Description(\"Parametric scalar with type injected though constructor\")\n     public static class ConstructorInjectionScalarFunction\n     {\n+        @SuppressWarnings(\"unused\")\n         private final Type type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzNzkzNA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3Mzk4OA==", "bodyText": "Thanks for your review. It seems that I misunderstand the code, the ctor argument with annotation would be parsed instead of the field. The unused field is able to be removed.", "url": "https://github.com/trinodb/trino/pull/5987#discussion_r526173988", "createdAt": "2020-11-18T15:24:27Z", "author": {"login": "brandboat"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestAnnotationEngineForScalars.java", "diffHunk": "@@ -465,6 +465,7 @@ public void testSimpleInjectionScalarParse()\n     @Description(\"Parametric scalar with type injected though constructor\")\n     public static class ConstructorInjectionScalarFunction\n     {\n+        @SuppressWarnings(\"unused\")\n         private final Type type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzNzkzNA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzI0MDI0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/TestGroupedTopNBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToyMDoyOFrOH06CFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToyMDoyOFrOH06CFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzODgwNg==", "bodyText": "As the comment mentions that this class is used for memory tracking so I didn't remove it here.", "url": "https://github.com/trinodb/trino/pull/5987#discussion_r525238806", "createdAt": "2020-11-17T15:20:28Z", "author": {"login": "brandboat"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestGroupedTopNBuilder.java", "diffHunk": "@@ -515,6 +515,7 @@ private long getEstimatedSizeInBytes()\n     }\n \n     // this class is for memory tracking comparison\n+    @SuppressWarnings(\"unused\")\n     private static class TestPageReference\n     {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4809, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}