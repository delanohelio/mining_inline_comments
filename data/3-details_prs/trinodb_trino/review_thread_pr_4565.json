{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MzI5NDk1", "number": 4565, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyOToxNVrOESSYuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODowNTozMVrOESsxng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjExMDY3OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyOToxNVrOG3YnsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1MToyOFrOG3db3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyODI0MQ==", "bodyText": "Should deprecate the other assertQuery method?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460728241", "createdAt": "2020-07-27T08:29:15Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -115,6 +120,16 @@ protected Object computeScalar(@Language(\"SQL\") String sql)\n         return computeActual(sql).getOnlyValue();\n     }\n \n+    protected AssertProvider<QueryAssert> query(@Language(\"SQL\") String sql)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzEzNQ==", "bodyText": "Will adorning the code with strikethroughs help much? Also, i do not think QueryAssert is ready yet.\nFor example, it does not coerce expected values. This is good in general, but not eternally convenient.", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460807135", "createdAt": "2020-07-27T10:51:28Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -115,6 +120,16 @@ protected Object computeScalar(@Language(\"SQL\") String sql)\n         return computeActual(sql).getOnlyValue();\n     }\n \n+    protected AssertProvider<QueryAssert> query(@Language(\"SQL\") String sql)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyODI0MQ=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjQ1ODE0OnYy", "diffSide": "LEFT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowMjozNlrOG3b7gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1Mjo0MFrOG3deGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MjQ2NQ==", "bodyText": "don't you need to deprecate the assertQueryReturnsEmptyResult method?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460782465", "createdAt": "2020-07-27T10:02:36Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -243,12 +244,14 @@ protected void assertQueryFails(Session session, @Language(\"SQL\") String sql, @L\n \n     protected void assertQueryReturnsEmptyResult(@Language(\"SQL\") String sql)\n     {\n-        QueryAssertions.assertQueryReturnsEmptyResult(queryRunner, getSession(), sql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzcwNA==", "bodyText": "This doesn't bring much benefit, until someone actually updates all the call sites.\nI didn't want to do that in this PR.", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460807704", "createdAt": "2020-07-27T10:52:40Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -243,12 +244,14 @@ protected void assertQueryFails(Session session, @Language(\"SQL\") String sql, @L\n \n     protected void assertQueryReturnsEmptyResult(@Language(\"SQL\") String sql)\n     {\n-        QueryAssertions.assertQueryReturnsEmptyResult(queryRunner, getSession(), sql);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MjQ2NQ=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjQ3NDE3OnYy", "diffSide": "RIGHT", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowNzoxN1rOG3cFOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMToyM1rOG3eRqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NDk1NA==", "bodyText": "isNotPushedDown() or .planHas(FilterNode.class)?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460784954", "createdAt": "2020-07-27T10:07:17Z", "author": {"login": "kokosing"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -237,6 +237,37 @@ public void testColumnComment()\n         assertUpdate(\"DROP TABLE test_column_comment\");\n     }\n \n+    @Test\n+    public void testPredicatePushdown()\n+    {\n+        // varchar equality\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name = 'ROMANIA'\"))\n+                .matches(\"VALUES (BIGINT '3', BIGINT '19', CAST('ROMANIA' AS varchar(255)))\");\n+\n+        // varchar range\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name BETWEEN 'POLAND' AND 'RPA'\"))\n+                .matches(\"VALUES (BIGINT '3', BIGINT '19', CAST('ROMANIA' AS varchar(255)))\");\n+\n+        // varchar different case\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name = 'romania'\"))\n+                .returnsEmptyResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDkwNA==", "bodyText": "added", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820904", "createdAt": "2020-07-27T11:21:23Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -237,6 +237,37 @@ public void testColumnComment()\n         assertUpdate(\"DROP TABLE test_column_comment\");\n     }\n \n+    @Test\n+    public void testPredicatePushdown()\n+    {\n+        // varchar equality\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name = 'ROMANIA'\"))\n+                .matches(\"VALUES (BIGINT '3', BIGINT '19', CAST('ROMANIA' AS varchar(255)))\");\n+\n+        // varchar range\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name BETWEEN 'POLAND' AND 'RPA'\"))\n+                .matches(\"VALUES (BIGINT '3', BIGINT '19', CAST('ROMANIA' AS varchar(255)))\");\n+\n+        // varchar different case\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name = 'romania'\"))\n+                .returnsEmptyResult();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NDk1NA=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjQ4NDI0OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoxMDoxMFrOG3cLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1MzozNVrOG3dfrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NjUxOA==", "bodyText": "prestoFilter? and pushedDown -> remoteFilter?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460786518", "createdAt": "2020-07-27T10:10:10Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import io.prestosql.spi.predicate.Domain;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public interface PushdownController\n+{\n+    DomainPushdownResult apply(Domain domain);\n+\n+    final class DomainPushdownResult\n+    {\n+        private final Domain pushedDown;\n+        // In some cases, remainingFilter can be the same as pushedDown, e.g. when target database is case insensitive\n+        private final Domain remainingFilter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwODEwOA==", "bodyText": "remainingFilter is a common name across the codebase. I didn't want to invent a  new name here", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460808108", "createdAt": "2020-07-27T10:53:35Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import io.prestosql.spi.predicate.Domain;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public interface PushdownController\n+{\n+    DomainPushdownResult apply(Domain domain);\n+\n+    final class DomainPushdownResult\n+    {\n+        private final Domain pushedDown;\n+        // In some cases, remainingFilter can be the same as pushedDown, e.g. when target database is case insensitive\n+        private final Domain remainingFilter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NjUxOA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjQ4NzExOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoxMTowM1rOG3cNFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMTozMFrOG3eSEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4Njk2NQ==", "bodyText": "PredicatePushdownController?", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460786965", "createdAt": "2020-07-27T10:11:03Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import io.prestosql.spi.predicate.Domain;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public interface PushdownController", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMTAxMA==", "bodyText": "renamed", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460821010", "createdAt": "2020-07-27T11:21:30Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import io.prestosql.spi.predicate.Domain;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public interface PushdownController", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4Njk2NQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjcwODkwOnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo0NFrOG3eQlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo0NFrOG3eQlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDYzMA==", "bodyText": "#4593", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820630", "createdAt": "2020-07-27T11:20:44Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -117,7 +117,7 @@ protected void copyTableSchema(Connection connection, String catalogName, String\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        // TODO implement proper type mapping\n+        // TODO (https://github.com/prestosql/presto/issues/4593) implement proper type mapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjcwOTI4OnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo1NFrOG3eQ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo1NFrOG3eQ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDY5MQ==", "bodyText": "#4596", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820691", "createdAt": "2020-07-27T11:20:54Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -63,7 +63,7 @@\n         if (domain.getValues().getRanges().getRangeCount() > SQL_SERVER_MAX_LIST_EXPRESSIONS) {\n             pushedDown = domain.simplify();\n         }\n-        // TODO eliminate filter above table scan\n+        // TODO (https://github.com/prestosql/presto/issues/4596) eliminate filter above table scan", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjcwOTU4OnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo1OVrOG3eRAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyMDo1OVrOG3eRAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDczOQ==", "bodyText": "#4596", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820739", "createdAt": "2020-07-27T11:20:59Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -106,19 +107,26 @@ public void testDecimalPredicatePushdown()\n             sqlServer.execute(\"INSERT INTO test_decimal_pushdown VALUES (123.321, 123456789.987654321)\");\n \n             assertThat(query(\"SELECT * FROM test_decimal_pushdown WHERE short_decimal <= 124\"))\n-                    .matches(\"VALUES (CAST(123.321 AS decimal(9,3)), CAST(123456789.987654321 AS decimal(30, 10)))\");\n+                    .matches(\"VALUES (CAST(123.321 AS decimal(9,3)), CAST(123456789.987654321 AS decimal(30, 10)))\")\n+                    .isNotFullyPushedDown(FilterNode.class); // TODO (https://github.com/prestosql/presto/issues/4596) eliminate filter above table scan", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDQzNDIyOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODowNTozMVrOG4BVEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo1OToxNFrOG4FkyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5NTIxNw==", "bodyText": "do not initialize this variable here, it is very likely to be overwritten. Let's define it in the same block where remainingFilter is defined.", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r461395217", "createdAt": "2020-07-28T08:05:31Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -117,6 +120,36 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n \n         TupleDomain<ColumnHandle> oldDomain = handle.getConstraint();\n         TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0MDU5MA==", "bodyText": "i use the variable to select whcih code block i do", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r461440590", "createdAt": "2020-07-28T09:18:34Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -117,6 +120,36 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n \n         TupleDomain<ColumnHandle> oldDomain = handle.getConstraint();\n         TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5NTIxNw=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2NDc3Nw==", "bodyText": "Right, I overlooked that. Thanks", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r461464777", "createdAt": "2020-07-28T09:59:14Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -117,6 +120,36 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n \n         TupleDomain<ColumnHandle> oldDomain = handle.getConstraint();\n         TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5NTIxNw=="}, "originalCommit": null, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3768, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}