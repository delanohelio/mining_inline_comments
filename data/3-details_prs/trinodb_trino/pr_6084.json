{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3Mjk4NTA4", "number": 6084, "title": "Make filterColumns to be coherent with other filter methods", "bodyText": "Make filterColumns to be coherent with other filter methods\nWe should not pass column metadata to filterColumns like we do not pass\nTableMetadata to filterTables method.\nRequiring ColumnMetadata makes it cumbersome to call filterColumns\nmethod as it requires to have column metadata in hand which not always\nis trivial.\nMotivation: I want to call filterColumns here: #6017", "createdAt": "2020-11-25T09:18:54Z", "url": "https://github.com/trinodb/trino/pull/6084", "merged": true, "mergeCommit": {"oid": "28bc79b7dbb1428b1b4e6c845646db89778b9c9d"}, "closed": true, "closedAt": "2020-11-26T09:21:24Z", "author": {"login": "kokosing"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf60zBgFqTUzODI5NjEwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgI-e5AFqTUzODk0MjM1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Mjk2MTA2", "url": "https://github.com/trinodb/trino/pull/6084#pullrequestreview-538296106", "createdAt": "2020-11-25T09:20:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyMDo1OVrOH5qCnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyMDo1OVrOH5qCnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxOTY3Ng==", "bodyText": "I think this was motivation why filterColumns was accepting List<ColumnMetadata> parameter and returning List<ColumnMetadata>. It was simply easy to write this particular line and so far this was the only usage of this call.", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530219676", "createdAt": "2020-11-25T09:20:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "diffHunk": "@@ -140,12 +141,21 @@ private MetadataListing() {}\n \n         ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> result = ImmutableMap.builder();\n         for (Entry<SchemaTableName, List<ColumnMetadata>> entry : tableColumns.entrySet()) {\n-            if (allowedTables.contains(entry.getKey())) {\n-                result.put(entry.getKey(), accessControl.filterColumns(\n-                        session.toSecurityContext(),\n-                        new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n-                        entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzA0MDI0", "url": "https://github.com/trinodb/trino/pull/6084#pullrequestreview-538304024", "createdAt": "2020-11-25T09:29:59Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyOTo1OVrOH5qacw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyOTo1OVrOH5qacw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ==", "bodyText": "What about custom implementations that use this information (if there are any).\nIs there any reasonable workaround?", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530225779", "createdAt": "2020-11-25T09:29:59Z", "author": {"login": "skrzypo987"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzMzNTE2", "url": "https://github.com/trinodb/trino/pull/6084#pullrequestreview-538333516", "createdAt": "2020-11-25T10:02:47Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Mzk5NTQ2", "url": "https://github.com/trinodb/trino/pull/6084#pullrequestreview-538399546", "createdAt": "2020-11-25T11:24:21Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNDoyMlrOH5u-jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNTo1MFrOH5vCDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMDU1OA==", "bodyText": "you can use mappedCopy here :)", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530300558", "createdAt": "2020-11-25T11:24:22Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "diffHunk": "@@ -140,12 +141,21 @@ private MetadataListing() {}\n \n         ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> result = ImmutableMap.builder();\n         for (Entry<SchemaTableName, List<ColumnMetadata>> entry : tableColumns.entrySet()) {\n-            if (allowedTables.contains(entry.getKey())) {\n-                result.put(entry.getKey(), accessControl.filterColumns(\n-                        session.toSecurityContext(),\n-                        new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n-                        entry.getValue()));\n+            if (!allowedTables.contains(entry.getKey())) {\n+                continue;\n             }\n+            List<ColumnMetadata> columns = entry.getValue();\n+            Set<String> allowedColumns = accessControl.filterColumns(\n+                    session.toSecurityContext(),\n+                    new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n+                    columns.stream()\n+                            .map(ColumnMetadata::getName)\n+                            .collect(toImmutableSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMDU3Ng==", "bodyText": "you can use filteredCopy that @kokosing added for reuse :)", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530300576", "createdAt": "2020-11-25T11:24:23Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "diffHunk": "@@ -140,12 +141,21 @@ private MetadataListing() {}\n \n         ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> result = ImmutableMap.builder();\n         for (Entry<SchemaTableName, List<ColumnMetadata>> entry : tableColumns.entrySet()) {\n-            if (allowedTables.contains(entry.getKey())) {\n-                result.put(entry.getKey(), accessControl.filterColumns(\n-                        session.toSecurityContext(),\n-                        new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n-                        entry.getValue()));\n+            if (!allowedTables.contains(entry.getKey())) {\n+                continue;\n             }\n+            List<ColumnMetadata> columns = entry.getValue();\n+            Set<String> allowedColumns = accessControl.filterColumns(\n+                    session.toSecurityContext(),\n+                    new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n+                    columns.stream()\n+                            .map(ColumnMetadata::getName)\n+                            .collect(toImmutableSet()));\n+            result.put(\n+                    entry.getKey(),\n+                    columns.stream()\n+                            .filter(column -> allowedColumns.contains(column.getName()))\n+                            .collect(toImmutableList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMTQwMw==", "bodyText": "This can be further simplified with com.google.common.collect.Sets#difference\n(separate commit, if you decide to do so)", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530301403", "createdAt": "2020-11-25T11:25:44Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -238,8 +235,8 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n \n         Set<String> restrictedColumns = rule.getRestrictedColumns();\n         return columns.stream()\n-                .filter(columnMetadata -> !restrictedColumns.contains(columnMetadata.getName()))\n-                .collect(toImmutableList());\n+                .filter(column -> !restrictedColumns.contains(column))\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMTQ1NA==", "bodyText": "This can be further simplified with com.google.common.collect.Sets#difference\n(separate commit, if you decide to do so)", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530301454", "createdAt": "2020-11-25T11:25:50Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -587,8 +585,8 @@ public void checkCanShowColumns(SystemSecurityContext context, CatalogSchemaTabl\n \n         Set<String> restrictedColumns = rule.getRestrictedColumns();\n         return columns.stream()\n-                .filter(columnMetadata -> !restrictedColumns.contains(columnMetadata.getName()))\n-                .collect(toImmutableList());\n+                .filter(column -> !restrictedColumns.contains(column))\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ac400cfd1619df0167336deb3d8ed4253aeff68", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/6ac400cfd1619df0167336deb3d8ed4253aeff68", "committedDate": "2020-11-25T20:03:08Z", "message": "Use static import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03fbdaaac02304b2d8b384def66ffd18ca9417fd", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/03fbdaaac02304b2d8b384def66ffd18ca9417fd", "committedDate": "2020-11-25T20:03:08Z", "message": "Make filterColumns to be coherent with other filter methods\n\nWe should not pass column metadata to filterColumns like we do not pass\nTableMetadata to filterTables method.\n\nRequiring ColumnMetadata makes it cumbersome to call filterColumns\nmethod as it requires to have column metadata in hand which not always\nis trivial."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "03fbdaaac02304b2d8b384def66ffd18ca9417fd", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/03fbdaaac02304b2d8b384def66ffd18ca9417fd", "committedDate": "2020-11-25T20:03:08Z", "message": "Make filterColumns to be coherent with other filter methods\n\nWe should not pass column metadata to filterColumns like we do not pass\nTableMetadata to filterTables method.\n\nRequiring ColumnMetadata makes it cumbersome to call filterColumns\nmethod as it requires to have column metadata in hand which not always\nis trivial."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTQyMzUx", "url": "https://github.com/trinodb/trino/pull/6084#pullrequestreview-538942351", "createdAt": "2020-11-26T01:50:18Z", "commit": {"oid": "03fbdaaac02304b2d8b384def66ffd18ca9417fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2320, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}