{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MjUyODQw", "number": 4639, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozMjo0OVrOEWXKzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MzoyNlrOEWXv2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODgzNzI1OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozMjo0OVrOG9opvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MjozMFrOG9sGmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MjM2NQ==", "bodyText": "We can just call this $row_id. The \"shard\" name is specific to Raptor", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467282365", "createdAt": "2020-08-07T21:32:49Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -453,6 +457,12 @@ public ConnectorInsertTableHandle beginInsert(ConnectorSession session, Connecto\n                 .collect(toImmutableList())));\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new IcebergColumnHandle(0, \"$shard_row_id\", BIGINT, Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODkwNg==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338906", "createdAt": "2020-08-08T00:42:30Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -453,6 +457,12 @@ public ConnectorInsertTableHandle beginInsert(ConnectorSession session, Connecto\n                 .collect(toImmutableList())));\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new IcebergColumnHandle(0, \"$shard_row_id\", BIGINT, Optional.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MjM2NQ=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODg1MDM5OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozNTozN1rOG9oyIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MjozNFrOG9sGow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NDUxMw==", "bodyText": "Let's keep the name the same so that the diff is smaller", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467284513", "createdAt": "2020-08-07T21:35:37Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -598,23 +608,47 @@ public void rollback()\n     @Override\n     public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)\n     {\n-        IcebergTableHandle table = (IcebergTableHandle) handle;\n+        IcebergTableHandle tableHandle = (IcebergTableHandle) handle;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODkxNQ==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338915", "createdAt": "2020-08-08T00:42:34Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -598,23 +608,47 @@ public void rollback()\n     @Override\n     public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)\n     {\n-        IcebergTableHandle table = (IcebergTableHandle) handle;\n+        IcebergTableHandle tableHandle = (IcebergTableHandle) handle;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NDUxMw=="}, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODg3MDkxOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo0MDoxMlrOG9o_cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MjozOFrOG9sGrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NzkyMw==", "bodyText": "Maybe do this as\nBiPredicate<IcebergColumnHandle, Domain> contains = (column, domain) -> partitionSourceIds.contains(column.getId());\nTupleDomain<ColumnHandle> remainingTupleDomain = newDomain.filter(contains.negate());\nTupleDomain<IcebergColumnHandle> enforcedTupleDomain = newDomain.filter(contains);", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467287923", "createdAt": "2020-08-07T21:40:12Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -598,23 +608,47 @@ public void rollback()\n     @Override\n     public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)\n     {\n-        IcebergTableHandle table = (IcebergTableHandle) handle;\n+        IcebergTableHandle tableHandle = (IcebergTableHandle) handle;\n+\n         // TODO: Remove TupleDomain#simplify once Iceberg supports IN expression\n         TupleDomain<IcebergColumnHandle> newDomain = constraint.getSummary()\n                 .transform(IcebergColumnHandle.class::cast)\n-                .simplify()\n-                .intersect(table.getPredicate());\n+                .intersect(tableHandle.getPredicate());\n+\n+        if (newDomain.isNone()) {\n+            return Optional.empty();\n+        }\n \n-        if (newDomain.equals(table.getPredicate())) {\n+        if (newDomain.equals(tableHandle.getPredicate())) {\n             return Optional.empty();\n         }\n \n+        org.apache.iceberg.Table icebergTable = getIcebergTable(metastore, hdfsEnvironment, session, tableHandle.getSchemaTableName());\n+\n+        List<PartitionField> fields = icebergTable.spec().fields().stream()\n+                .filter(field -> field.transform().isIdentity())\n+                .collect(toImmutableList());\n+\n+        // Ensure partition specs in all manifests contain the identity fields from the predicate\n+        if (!icebergTable.specs().values().stream().allMatch(spec -> spec.fields().containsAll(fields))) {\n+            return Optional.empty();\n+        }\n+\n+        Set<Integer> partitionSourceIds = icebergTable.spec().fields().stream()\n+                .filter(field -> field.transform().isIdentity())\n+                .map(PartitionField::sourceId)\n+                .collect(toImmutableSet());\n+        TupleDomain<ColumnHandle> remainingTupleDomain = newDomain.filter((column, domain) -> !partitionSourceIds.contains(column.getId()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODkyNg==", "bodyText": "Nice!  Changed.  The remainingTupleDomain needs suffix .transform(ColumnHandle.class::cast) in this formulation.", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338926", "createdAt": "2020-08-08T00:42:38Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -598,23 +608,47 @@ public void rollback()\n     @Override\n     public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)\n     {\n-        IcebergTableHandle table = (IcebergTableHandle) handle;\n+        IcebergTableHandle tableHandle = (IcebergTableHandle) handle;\n+\n         // TODO: Remove TupleDomain#simplify once Iceberg supports IN expression\n         TupleDomain<IcebergColumnHandle> newDomain = constraint.getSummary()\n                 .transform(IcebergColumnHandle.class::cast)\n-                .simplify()\n-                .intersect(table.getPredicate());\n+                .intersect(tableHandle.getPredicate());\n+\n+        if (newDomain.isNone()) {\n+            return Optional.empty();\n+        }\n \n-        if (newDomain.equals(table.getPredicate())) {\n+        if (newDomain.equals(tableHandle.getPredicate())) {\n             return Optional.empty();\n         }\n \n+        org.apache.iceberg.Table icebergTable = getIcebergTable(metastore, hdfsEnvironment, session, tableHandle.getSchemaTableName());\n+\n+        List<PartitionField> fields = icebergTable.spec().fields().stream()\n+                .filter(field -> field.transform().isIdentity())\n+                .collect(toImmutableList());\n+\n+        // Ensure partition specs in all manifests contain the identity fields from the predicate\n+        if (!icebergTable.specs().values().stream().allMatch(spec -> spec.fields().containsAll(fields))) {\n+            return Optional.empty();\n+        }\n+\n+        Set<Integer> partitionSourceIds = icebergTable.spec().fields().stream()\n+                .filter(field -> field.transform().isIdentity())\n+                .map(PartitionField::sourceId)\n+                .collect(toImmutableSet());\n+        TupleDomain<ColumnHandle> remainingTupleDomain = newDomain.filter((column, domain) -> !partitionSourceIds.contains(column.getId()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NzkyMw=="}, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkwNzg0OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo0ODoxNlrOG9pXoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0Mjo0MlrOG9sGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDExMw==", "bodyText": "We could make these sum(col2) to verify that we got the exact rows.", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467294113", "createdAt": "2020-08-07T21:48:16Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODk0Nw==", "bodyText": "Good idea; done.", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338947", "createdAt": "2020-08-08T00:42:42Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDExMw=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkxMTYxOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo0OTowM1rOG9paGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0Mjo0OFrOG9sG1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDc0Ng==", "bodyText": "Nit: lowercase column names", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467294746", "createdAt": "2020-08-07T21:49:03Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODk2Nw==", "bodyText": "Fixed.  That's what I get from copying the Hive test ;)", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338967", "createdAt": "2020-08-08T00:42:48Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDc0Ng=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkxMjY2OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo0OToxN1rOG9pazQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0Mjo1M1rOG9sG5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDkyNQ==", "bodyText": "This is normally written on the previous line like\nCREATE TABLE foo (", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467294925", "createdAt": "2020-08-07T21:49:17Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODk4MA==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338980", "createdAt": "2020-08-08T00:42:53Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDkyNQ=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkyNTIzOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MTo1N1rOG9pi6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MzozMVrOG9sHOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NzAwMA==", "bodyText": "This cast shouldn't be necessary as the 3 literal should be integer.\nNit: lowercase column names and add space around operators (same for other queries)", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467297000", "createdAt": "2020-08-07T21:51:57Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +\n+                \"  LINE_NUMBER INTEGER,\" +\n+                \"  LINE_STATUS VARCHAR\" +\n+                \") \" +\n+                \"WITH (\" +\n+                format(\" format = '%s', partitioning = ARRAY[ 'LINE_NUMBER', 'LINE_STATUS' ]\", format.name()) +\n+                \") \";\n+\n+        assertUpdate(session, createTable);\n+\n+        assertUpdate(session, \"\" +\n+                        \"INSERT INTO test_metadata_delete \" +\n+                        \"SELECT orderkey, linenumber, linestatus \" +\n+                        \"FROM tpch.tiny.lineitem\",\n+                \"SELECT count(*) FROM lineitem\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 14\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='F' AND LINE_NUMBER=CAST(3 AS INTEGER)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTA2NQ==", "bodyText": "Cast removed and column names and whitespace fixed everywhere.", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467339065", "createdAt": "2020-08-08T00:43:31Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +\n+                \"  LINE_NUMBER INTEGER,\" +\n+                \"  LINE_STATUS VARCHAR\" +\n+                \") \" +\n+                \"WITH (\" +\n+                format(\" format = '%s', partitioning = ARRAY[ 'LINE_NUMBER', 'LINE_STATUS' ]\", format.name()) +\n+                \") \";\n+\n+        assertUpdate(session, createTable);\n+\n+        assertUpdate(session, \"\" +\n+                        \"INSERT INTO test_metadata_delete \" +\n+                        \"SELECT orderkey, linenumber, linestatus \" +\n+                        \"FROM tpch.tiny.lineitem\",\n+                \"SELECT count(*) FROM lineitem\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 14\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='F' AND LINE_NUMBER=CAST(3 AS INTEGER)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NzAwMA=="}, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkzMTY4OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MzoyMlrOG9pnIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0Mzo1MVrOG9sHbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODA4Mg==", "bodyText": "This is expected since H2 doesn't have the test_in_small_set. Please remove comment", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467298082", "createdAt": "2020-08-07T21:53:22Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +\n+                \"  LINE_NUMBER INTEGER,\" +\n+                \"  LINE_STATUS VARCHAR\" +\n+                \") \" +\n+                \"WITH (\" +\n+                format(\" format = '%s', partitioning = ARRAY[ 'LINE_NUMBER', 'LINE_STATUS' ]\", format.name()) +\n+                \") \";\n+\n+        assertUpdate(session, createTable);\n+\n+        assertUpdate(session, \"\" +\n+                        \"INSERT INTO test_metadata_delete \" +\n+                        \"SELECT orderkey, linenumber, linestatus \" +\n+                        \"FROM tpch.tiny.lineitem\",\n+                \"SELECT count(*) FROM lineitem\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 14\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='F' AND LINE_NUMBER=CAST(3 AS INTEGER)\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'F' or linenumber<>3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 13\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='O'\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'O' AND linenumber<>3\");\n+\n+        assertQueryFails(\"DELETE FROM test_metadata_delete WHERE ORDER_KEY=1\", \"This connector only supports delete where one or more partitions are deleted entirely\");\n+\n+        assertUpdate(session, \"DROP TABLE test_metadata_delete\");\n+\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_metadata_delete\"));\n+    }\n+\n+    @Test\n+    public void testInSmallSet()\n+    {\n+        testWithAllFileFormats(this::testInSmallSetForFormat);\n+    }\n+\n+    private void testInSmallSetForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, \"CREATE TABLE test_in_small_set (col1 INTEGER, col2 BIGINT)\");\n+        assertUpdate(session, \"INSERT INTO test_in_small_set VALUES (1, 10)\", 1);\n+        MaterializedResult result = computeActual(\"SELECT col1 FROM test_in_small_set WHERE col1 IN (1)\");\n+        // The query below fails in h2 with the col1 IN (1) or col1 = 1.  It works fine in Iceberg.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTExNg==", "bodyText": "Removed along with this test, since it covers a subset of what's tested by the following test.", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467339116", "createdAt": "2020-08-08T00:43:51Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +\n+                \"  LINE_NUMBER INTEGER,\" +\n+                \"  LINE_STATUS VARCHAR\" +\n+                \") \" +\n+                \"WITH (\" +\n+                format(\" format = '%s', partitioning = ARRAY[ 'LINE_NUMBER', 'LINE_STATUS' ]\", format.name()) +\n+                \") \";\n+\n+        assertUpdate(session, createTable);\n+\n+        assertUpdate(session, \"\" +\n+                        \"INSERT INTO test_metadata_delete \" +\n+                        \"SELECT orderkey, linenumber, linestatus \" +\n+                        \"FROM tpch.tiny.lineitem\",\n+                \"SELECT count(*) FROM lineitem\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 14\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='F' AND LINE_NUMBER=CAST(3 AS INTEGER)\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'F' or linenumber<>3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 13\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='O'\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'O' AND linenumber<>3\");\n+\n+        assertQueryFails(\"DELETE FROM test_metadata_delete WHERE ORDER_KEY=1\", \"This connector only supports delete where one or more partitions are deleted entirely\");\n+\n+        assertUpdate(session, \"DROP TABLE test_metadata_delete\");\n+\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_metadata_delete\"));\n+    }\n+\n+    @Test\n+    public void testInSmallSet()\n+    {\n+        testWithAllFileFormats(this::testInSmallSetForFormat);\n+    }\n+\n+    private void testInSmallSetForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, \"CREATE TABLE test_in_small_set (col1 INTEGER, col2 BIGINT)\");\n+        assertUpdate(session, \"INSERT INTO test_in_small_set VALUES (1, 10)\", 1);\n+        MaterializedResult result = computeActual(\"SELECT col1 FROM test_in_small_set WHERE col1 IN (1)\");\n+        // The query below fails in h2 with the col1 IN (1) or col1 = 1.  It works fine in Iceberg.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODA4Mg=="}, "originalCommit": null, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkzMjEwOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MzoyNlrOG9pnXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0Mzo1OFrOG9sHgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODE0MQ==", "bodyText": "Same", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467298141", "createdAt": "2020-08-07T21:53:26Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +\n+                \"  LINE_NUMBER INTEGER,\" +\n+                \"  LINE_STATUS VARCHAR\" +\n+                \") \" +\n+                \"WITH (\" +\n+                format(\" format = '%s', partitioning = ARRAY[ 'LINE_NUMBER', 'LINE_STATUS' ]\", format.name()) +\n+                \") \";\n+\n+        assertUpdate(session, createTable);\n+\n+        assertUpdate(session, \"\" +\n+                        \"INSERT INTO test_metadata_delete \" +\n+                        \"SELECT orderkey, linenumber, linestatus \" +\n+                        \"FROM tpch.tiny.lineitem\",\n+                \"SELECT count(*) FROM lineitem\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 14\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='F' AND LINE_NUMBER=CAST(3 AS INTEGER)\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'F' or linenumber<>3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 13\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='O'\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'O' AND linenumber<>3\");\n+\n+        assertQueryFails(\"DELETE FROM test_metadata_delete WHERE ORDER_KEY=1\", \"This connector only supports delete where one or more partitions are deleted entirely\");\n+\n+        assertUpdate(session, \"DROP TABLE test_metadata_delete\");\n+\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_metadata_delete\"));\n+    }\n+\n+    @Test\n+    public void testInSmallSet()\n+    {\n+        testWithAllFileFormats(this::testInSmallSetForFormat);\n+    }\n+\n+    private void testInSmallSetForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, \"CREATE TABLE test_in_small_set (col1 INTEGER, col2 BIGINT)\");\n+        assertUpdate(session, \"INSERT INTO test_in_small_set VALUES (1, 10)\", 1);\n+        MaterializedResult result = computeActual(\"SELECT col1 FROM test_in_small_set WHERE col1 IN (1)\");\n+        // The query below fails in h2 with the col1 IN (1) or col1 = 1.  It works fine in Iceberg.\n+        //assertQuery(session, \"SELECT col1 FROM test_in_small_set WHERE col1 IN (1)\");\n+        dropTable(session, \"test_in_small_set\");\n+    }\n+\n+    @Test\n+    public void testInSet()\n+    {\n+        testWithAllFileFormats((session, format) -> testInSetForFormat(session, format, 31));\n+        testWithAllFileFormats((session, format) -> testInSetForFormat(session, format, 35));\n+    }\n+\n+    private void testInSetForFormat(Session session, FileFormat format, int inCount)\n+    {\n+        String values = range(1, inCount + 1)\n+                .mapToObj(n -> format(\"(%s, %s)\", n, n + 10))\n+                .collect(joining(\", \"));\n+        String inList = range(1, inCount + 1)\n+                .mapToObj(Integer::toString)\n+                .collect(joining(\", \"));\n+\n+        assertUpdate(session, \"CREATE TABLE test_in_set (col1 INTEGER, col2 BIGINT)\");\n+        assertUpdate(session, format(\"INSERT INTO test_in_set VALUES %s\", values), inCount);\n+        MaterializedResult result = computeActual(format(\"SELECT col1 FROM test_in_set WHERE col1 IN (%s)\", inList));\n+        // The query below fails in h2 with any value of inCount.  It works in Iceberg.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTEzNg==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467339136", "createdAt": "2020-08-08T00:43:58Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +\n+                \"  LINE_NUMBER INTEGER,\" +\n+                \"  LINE_STATUS VARCHAR\" +\n+                \") \" +\n+                \"WITH (\" +\n+                format(\" format = '%s', partitioning = ARRAY[ 'LINE_NUMBER', 'LINE_STATUS' ]\", format.name()) +\n+                \") \";\n+\n+        assertUpdate(session, createTable);\n+\n+        assertUpdate(session, \"\" +\n+                        \"INSERT INTO test_metadata_delete \" +\n+                        \"SELECT orderkey, linenumber, linestatus \" +\n+                        \"FROM tpch.tiny.lineitem\",\n+                \"SELECT count(*) FROM lineitem\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 14\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='F' AND LINE_NUMBER=CAST(3 AS INTEGER)\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'F' or linenumber<>3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 13\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='O'\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'O' AND linenumber<>3\");\n+\n+        assertQueryFails(\"DELETE FROM test_metadata_delete WHERE ORDER_KEY=1\", \"This connector only supports delete where one or more partitions are deleted entirely\");\n+\n+        assertUpdate(session, \"DROP TABLE test_metadata_delete\");\n+\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_metadata_delete\"));\n+    }\n+\n+    @Test\n+    public void testInSmallSet()\n+    {\n+        testWithAllFileFormats(this::testInSmallSetForFormat);\n+    }\n+\n+    private void testInSmallSetForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, \"CREATE TABLE test_in_small_set (col1 INTEGER, col2 BIGINT)\");\n+        assertUpdate(session, \"INSERT INTO test_in_small_set VALUES (1, 10)\", 1);\n+        MaterializedResult result = computeActual(\"SELECT col1 FROM test_in_small_set WHERE col1 IN (1)\");\n+        // The query below fails in h2 with the col1 IN (1) or col1 = 1.  It works fine in Iceberg.\n+        //assertQuery(session, \"SELECT col1 FROM test_in_small_set WHERE col1 IN (1)\");\n+        dropTable(session, \"test_in_small_set\");\n+    }\n+\n+    @Test\n+    public void testInSet()\n+    {\n+        testWithAllFileFormats((session, format) -> testInSetForFormat(session, format, 31));\n+        testWithAllFileFormats((session, format) -> testInSetForFormat(session, format, 35));\n+    }\n+\n+    private void testInSetForFormat(Session session, FileFormat format, int inCount)\n+    {\n+        String values = range(1, inCount + 1)\n+                .mapToObj(n -> format(\"(%s, %s)\", n, n + 10))\n+                .collect(joining(\", \"));\n+        String inList = range(1, inCount + 1)\n+                .mapToObj(Integer::toString)\n+                .collect(joining(\", \"));\n+\n+        assertUpdate(session, \"CREATE TABLE test_in_set (col1 INTEGER, col2 BIGINT)\");\n+        assertUpdate(session, format(\"INSERT INTO test_in_set VALUES %s\", values), inCount);\n+        MaterializedResult result = computeActual(format(\"SELECT col1 FROM test_in_set WHERE col1 IN (%s)\", inList));\n+        // The query below fails in h2 with any value of inCount.  It works in Iceberg.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODE0MQ=="}, "originalCommit": null, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3550, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}