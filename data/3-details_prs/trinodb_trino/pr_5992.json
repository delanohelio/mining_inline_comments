{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjU2MTkx", "number": 5992, "title": "Stream container statistics", "bodyText": "This PR changes the way statistics are fetched from Docker: instead of closing the stream every time statistics are fetched, the stream remains open (docker sends them every 1s) until the environment is stopped. Arriving values are used to calculate deltas.\nThis PR also improves the formatting of statistics values so they are displayed in a table:", "createdAt": "2020-11-17T19:30:23Z", "url": "https://github.com/trinodb/trino/pull/5992", "merged": true, "mergeCommit": {"oid": "d3ee586bb32ec475c422f0470ea57d170a3a601a"}, "closed": true, "closedAt": "2020-11-19T11:24:20Z", "author": {"login": "wendigo"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdde_LgAFqTUzMjc1MzcxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeA5orgFqTUzNDMyMzI0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzUzNzEy", "url": "https://github.com/trinodb/trino/pull/5992#pullrequestreview-532753712", "createdAt": "2020-11-17T19:47:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzU3ODA1", "url": "https://github.com/trinodb/trino/pull/5992#pullrequestreview-532757805", "createdAt": "2020-11-17T19:52:47Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo1Mjo0N1rOH1HToA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo1Mjo0N1rOH1HToA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1NjI4OA==", "bodyText": ".mapToInt(String::length)\n.max()\n.orElse(0);\n\nwhat about", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525456288", "createdAt": "2020-11-17T19:52:47Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -216,47 +218,65 @@ public void containerStopping(DockerContainer container, InspectContainerRespons\n     static EnvironmentListener statsPrintingListener()\n     {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(2, daemonThreadsNamed(\"container-stats-%d\"));\n-        List<ScheduledFuture<?>> futures = new ArrayList<>();\n+        Map<String, StatisticsFetcher> fetchers = new HashMap<>();\n \n         return new EnvironmentListener()\n         {\n             @Override\n-            public void containerStarting(DockerContainer container, InspectContainerResponse response)\n+            public void containerStarted(DockerContainer container, InspectContainerResponse response)\n             {\n-                // Print stats every 30 seconds\n-                futures.add(executorService.scheduleWithFixedDelay(() ->\n-                {\n-                    StatisticsFetcher.Stats stats = container.getStats();\n-                    if (stats.areCalculated()) {\n-                        log.info(\"%s - %s\", container.getLogicalName(), container.getStats());\n-                    }\n-                }, 5 * 1000L, 30 * 1000L, MILLISECONDS));\n+                // Start listening on statistics stream\n+                fetcher(container).start();\n             }\n \n             @Override\n-            public void containerStopping(DockerContainer container, InspectContainerResponse response)\n+            public void environmentStopping(Environment environment)\n             {\n-                log.info(\"Container %s final statistics - %s\", container, container.getStats());\n-            }\n+                log.info(\"Container final stats: \");\n+                printContainerStats();\n \n-            @Override\n-            public void containerStarted(DockerContainer container, InspectContainerResponse containerInfo)\n-            {\n-                // Force fetching of stats so CPU usage can be calculated from delta\n-                container.getStats();\n+                fetchers.values().forEach(StatisticsFetcher::close);\n+                executorService.shutdownNow();\n             }\n \n             @Override\n-            public void environmentStopping(Environment environment)\n+            public void environmentStarted(Environment environment)\n             {\n-                futures.forEach(future -> future.cancel(true));\n+                // Print stats for all containers every 30s after environment is started\n+                executorService.scheduleWithFixedDelay(() ->\n+                {\n+                    log.info(\"Container stats:\");\n+                    printContainerStats();\n+                }, 5 * 1000L, 30 * 1000L, MILLISECONDS);\n             }\n \n             @Override\n             public void environmentStopped(Environment environment)\n             {\n                 executorService.shutdown();\n             }\n+\n+            private StatisticsFetcher fetcher(DockerContainer container)\n+            {\n+                return fetchers.computeIfAbsent(container.getLogicalName(), key -> new StatisticsFetcher(container.getContainerId(), container.getLogicalName()));\n+            }\n+\n+            private void printContainerStats()\n+            {\n+                int maxLength = fetchers.keySet().stream()\n+                        .map(String::length)\n+                        .max(Integer::compareTo)\n+                        .get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODQ2NTI1", "url": "https://github.com/trinodb/trino/pull/5992#pullrequestreview-532846525", "createdAt": "2020-11-17T21:57:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1NzozM1rOH1NIVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1NzozM1rOH1NIVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MTcwMA==", "bodyText": "nit: closing and then printing seems more natural.", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525551700", "createdAt": "2020-11-17T21:57:33Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -216,47 +218,65 @@ public void containerStopping(DockerContainer container, InspectContainerRespons\n     static EnvironmentListener statsPrintingListener()\n     {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(2, daemonThreadsNamed(\"container-stats-%d\"));\n-        List<ScheduledFuture<?>> futures = new ArrayList<>();\n+        Map<String, StatisticsFetcher> fetchers = new TreeMap<>(); // keep map sorted\n \n         return new EnvironmentListener()\n         {\n             @Override\n-            public void containerStarting(DockerContainer container, InspectContainerResponse response)\n+            public void containerStarted(DockerContainer container, InspectContainerResponse response)\n             {\n-                // Print stats every 30 seconds\n-                futures.add(executorService.scheduleWithFixedDelay(() ->\n-                {\n-                    StatisticsFetcher.Stats stats = container.getStats();\n-                    if (stats.areCalculated()) {\n-                        log.info(\"%s - %s\", container.getLogicalName(), container.getStats());\n-                    }\n-                }, 5 * 1000L, 30 * 1000L, MILLISECONDS));\n+                // Start listening on statistics stream\n+                fetcher(container).start();\n             }\n \n             @Override\n-            public void containerStopping(DockerContainer container, InspectContainerResponse response)\n+            public void environmentStopping(Environment environment)\n             {\n-                log.info(\"Container %s final statistics - %s\", container, container.getStats());\n-            }\n+                log.info(\"Container final stats: \");\n+                printContainerStats();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODQ3Nzcy", "url": "https://github.com/trinodb/trino/pull/5992#pullrequestreview-532847772", "createdAt": "2020-11-17T21:59:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1OTozMlrOH1NMVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1OTozMlrOH1NMVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjcyNQ==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525552725", "createdAt": "2020-11-17T21:59:32Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODQ3ODg3", "url": "https://github.com/trinodb/trino/pull/5992#pullrequestreview-532847887", "createdAt": "2020-11-17T21:59:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1OTo0MlrOH1NMtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1OTo0MlrOH1NMtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjgyMw==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525552823", "createdAt": "2020-11-17T21:59:42Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);\n+    private AtomicBoolean closed = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMjg5OTQw", "url": "https://github.com/trinodb/trino/pull/5992#pullrequestreview-533289940", "createdAt": "2020-11-18T10:12:15Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODUzMDU5", "url": "https://github.com/trinodb/trino/pull/5992#pullrequestreview-532853059", "createdAt": "2020-11-17T22:07:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowNzoyN1rOH1Nceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxNTozNVrOH1Nsbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1Njg1OA==", "bodyText": "actually this one does not seem to be used at all", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525556858", "createdAt": "2020-11-17T22:07:27Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjcyNQ=="}, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1OTcxNQ==", "bodyText": "Do we need to close callbackClosable here. I would expect not given fact that this close is called by dockerjava", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525559715", "createdAt": "2020-11-17T22:13:08Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -87,20 +101,56 @@ private Stats toStats(Statistics statistics, Stats previousStats)\n         }\n \n         MemoryStatsConfig memoryStats = statistics.getMemoryStats();\n-        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).succinct();\n-        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).succinct();\n-        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).succinct();\n+        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).to(GIGABYTE);\n+        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).to(GIGABYTE);\n+        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).to(GIGABYTE);\n         stats.memoryUsagePerc = 100.0 * memoryStats.getUsage() / memoryStats.getLimit();\n \n         stats.pids = statistics.getPidsStats().getCurrent();\n \n         Supplier<Stream<StatisticNetworksConfig>> stream = () -> statistics.getNetworks().values().stream();\n-        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n-        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n+        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n \n         return stats;\n     }\n \n+    private class StatisticsCallback\n+            implements ResultCallback<Statistics>\n+    {\n+        @Override\n+        public void onNext(Statistics statistics)\n+        {\n+            lastStats.getAndUpdate(previousStats -> toStats(statistics, previousStats));\n+        }\n+\n+        @Override\n+        public void onStart(Closeable closeable)\n+        {\n+            callbackCloseable = closeable;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable)\n+        {\n+            // we don't care here - in worst case scenario we will just have stale statistics\n+        }\n+\n+        @Override\n+        public void onComplete()\n+        {\n+            log.info(\"Statistics for container %s stopped streaming\", containerLogicalName);\n+        }\n+\n+        @Override\n+        public void close()\n+                throws IOException\n+        {\n+            callbackCloseable.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MDI0MA==", "bodyText": "it is not obvious that callbackClosable cannot be null.", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525560240", "createdAt": "2020-11-17T22:14:13Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);\n+    private AtomicBoolean closed = new AtomicBoolean(false);\n+    private Closeable callbackCloseable;\n \n-    public StatisticsFetcher(DockerContainer container, FailsafeExecutor executor)\n+    public StatisticsFetcher(String containerId, String containerLogicalName)\n     {\n-        this.container = requireNonNull(container, \"container is null\");\n-        this.executor = requireNonNull(executor, \"executor is null\");\n+        this.containerId = requireNonNull(containerId, \"containerId is null\");\n+        this.containerLogicalName = requireNonNull(containerLogicalName, \"containerLogicalName is null\");\n     }\n \n     public Stats get()\n     {\n-        if (!container.isRunning()) {\n-            log.warn(\"Could not get statistics for stopped container %s\", container.getLogicalName());\n-            return lastStats.get();\n-        }\n+        return lastStats.get();\n+    }\n \n-        try (InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>()) {\n-            DockerClientFactory.lazyClient().statsCmd(container.getContainerId()).exec(callback);\n+    public void start()\n+    {\n+        DockerClientFactory.lazyClient()\n+                .statsCmd(containerId)\n+                .exec(new StatisticsCallback());\n \n-            return lastStats.getAndUpdate(previousStats -> toStats((Statistics) executor.get(callback::awaitResult), previousStats));\n-        }\n-        catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-        catch (RuntimeException e) {\n-            log.error(e, \"Could not fetch container %s statistics\", container.getLogicalName());\n-            return lastStats.get();\n+        log.info(\"Started listening for container %s statistics stream...\", containerLogicalName);\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        if (closed.compareAndSet(false, true)) {\n+            try {\n+                callbackCloseable.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MDk0Mw==", "bodyText": "can we still log something (we are logging in onComplete)", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525560943", "createdAt": "2020-11-17T22:15:35Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -87,20 +101,56 @@ private Stats toStats(Statistics statistics, Stats previousStats)\n         }\n \n         MemoryStatsConfig memoryStats = statistics.getMemoryStats();\n-        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).succinct();\n-        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).succinct();\n-        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).succinct();\n+        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).to(GIGABYTE);\n+        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).to(GIGABYTE);\n+        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).to(GIGABYTE);\n         stats.memoryUsagePerc = 100.0 * memoryStats.getUsage() / memoryStats.getLimit();\n \n         stats.pids = statistics.getPidsStats().getCurrent();\n \n         Supplier<Stream<StatisticNetworksConfig>> stream = () -> statistics.getNetworks().values().stream();\n-        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n-        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n+        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n \n         return stats;\n     }\n \n+    private class StatisticsCallback\n+            implements ResultCallback<Statistics>\n+    {\n+        @Override\n+        public void onNext(Statistics statistics)\n+        {\n+            lastStats.getAndUpdate(previousStats -> toStats(statistics, previousStats));\n+        }\n+\n+        @Override\n+        public void onStart(Closeable closeable)\n+        {\n+            callbackCloseable = closeable;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable)\n+        {\n+            // we don't care here - in worst case scenario we will just have stale statistics", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83482bd28dced1ce9ed4fe3f24daf924dd50bde", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/c83482bd28dced1ce9ed4fe3f24daf924dd50bde", "committedDate": "2020-11-19T09:41:47Z", "message": "Stream container statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c83482bd28dced1ce9ed4fe3f24daf924dd50bde", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/c83482bd28dced1ce9ed4fe3f24daf924dd50bde", "committedDate": "2020-11-19T09:41:47Z", "message": "Stream container statistics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MzIzMjQ5", "url": "https://github.com/trinodb/trino/pull/5992#pullrequestreview-534323249", "createdAt": "2020-11-19T11:17:55Z", "commit": {"oid": "c83482bd28dced1ce9ed4fe3f24daf924dd50bde"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2616, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}