{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MTY3NTMz", "number": 4866, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzoxNToyOVrOEZS3-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzoxNjo0MlrOEZS48g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTU5MDk4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/AtTimeZone.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzoxNToyOVrOHCB1Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzoxNToyOVrOHCB1Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4OTE3MQ==", "bodyText": "p is not a variable here", "url": "https://github.com/trinodb/trino/pull/4866#discussion_r471889171", "createdAt": "2020-08-18T03:15:29Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/AtTimeZone.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.function.LiteralParameter;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlNullable;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.TimeZoneKey;\n+import io.prestosql.spi.type.TimeZoneNotSupportedException;\n+\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static io.prestosql.spi.type.DateTimeEncoding.packDateTimeWithZone;\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static io.prestosql.type.DateTimes.PICOSECONDS_PER_MICROSECOND;\n+import static io.prestosql.type.DateTimes.getMicrosOfMilli;\n+import static io.prestosql.type.DateTimes.scaleEpochMicrosToMillis;\n+import static io.prestosql.type.DateTimes.scaleEpochMillisToMicros;\n+import static io.prestosql.util.DateTimeZoneIndex.getChronology;\n+import static java.lang.String.format;\n+\n+@ScalarFunction(value = \"$at_timezone\", hidden = true)\n+public class AtTimeZone\n+{\n+    private AtTimeZone() {}\n+\n+    @LiteralParameters({\"x\", \"sourcePrecision\", \"targetPrecision\"})\n+    @SqlType(\"timestamp(targetPrecision) with time zone\")\n+    public static long shortToShort(\n+            @SqlType(\"timestamp(sourcePrecision)\") long epochMillis,\n+            @SqlType(\"varchar(x)\") Slice zoneId,\n+            @SqlNullable @SqlType(\"timestamp(targetPrecision) with time zone\") Long dummy) // need a dummy value since the type inferencer can't bind type arguments exclusively from return type\n+    {\n+        // p is guaranteed to be <= 3 because the short representation for TIMESTAMP WITH TIMEZONE has a max precision of 3", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTU5MzQ2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/AtTimeZone.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzoxNjo0MlrOHCB2Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzoxNjo0MlrOHCB2Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4OTUwNg==", "bodyText": "same", "url": "https://github.com/trinodb/trino/pull/4866#discussion_r471889506", "createdAt": "2020-08-18T03:16:42Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/AtTimeZone.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.function.LiteralParameter;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlNullable;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.TimeZoneKey;\n+import io.prestosql.spi.type.TimeZoneNotSupportedException;\n+\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static io.prestosql.spi.type.DateTimeEncoding.packDateTimeWithZone;\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static io.prestosql.type.DateTimes.PICOSECONDS_PER_MICROSECOND;\n+import static io.prestosql.type.DateTimes.getMicrosOfMilli;\n+import static io.prestosql.type.DateTimes.scaleEpochMicrosToMillis;\n+import static io.prestosql.type.DateTimes.scaleEpochMillisToMicros;\n+import static io.prestosql.util.DateTimeZoneIndex.getChronology;\n+import static java.lang.String.format;\n+\n+@ScalarFunction(value = \"$at_timezone\", hidden = true)\n+public class AtTimeZone\n+{\n+    private AtTimeZone() {}\n+\n+    @LiteralParameters({\"x\", \"sourcePrecision\", \"targetPrecision\"})\n+    @SqlType(\"timestamp(targetPrecision) with time zone\")\n+    public static long shortToShort(\n+            @SqlType(\"timestamp(sourcePrecision)\") long epochMillis,\n+            @SqlType(\"varchar(x)\") Slice zoneId,\n+            @SqlNullable @SqlType(\"timestamp(targetPrecision) with time zone\") Long dummy) // need a dummy value since the type inferencer can't bind type arguments exclusively from return type\n+    {\n+        // p is guaranteed to be <= 3 because the short representation for TIMESTAMP WITH TIMEZONE has a max precision of 3\n+        return toShort(epochMillis, zoneId.toStringUtf8());\n+    }\n+\n+    @LiteralParameters({\"x\", \"sourcePrecision\", \"targetPrecision\"})\n+    @SqlType(\"timestamp(targetPrecision) with time zone\")\n+    public static long longToShort(\n+            @SqlType(\"timestamp(sourcePrecision)\") LongTimestamp timestamp,\n+            @SqlType(\"varchar(x)\") Slice zoneId,\n+            @SqlNullable @SqlType(\"timestamp(targetPrecision) with time zone\") Long dummy) // need a dummy value since the type inferencer can't bind type arguments exclusively from return type\n+    {\n+        // p is guaranteed to be > 3 and <= 6, so no need to round", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3493, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}