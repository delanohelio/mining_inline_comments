{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NjY3NTY1", "number": 6260, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo0OTozM1rOFD7ZJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjo0MjoxNlrOFMsWXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjYzMTQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/PartitionedOutputOperator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo0OTozM1rOIDzaEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTowNDozN1rOID8rug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1ODg5OQ==", "bodyText": "future for partitionFunction is already cached", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540858899", "createdAt": "2020-12-11T10:49:33Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/PartitionedOutputOperator.java", "diffHunk": "@@ -261,8 +262,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        ListenableFuture<?> blocked = partitionFunction.isFull();\n-        return blocked.isDone() ? NOT_BLOCKED : blocked;\n+        if (isBlocked.isDone()) {\n+            isBlocked = partitionFunction.isFull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkyMTQ0Mw==", "bodyText": "If you mean the cached future in OutputBufferMemoryManager then you're technically correct, except that retrieving that instance is through OutputBufferMemoryManager#getBufferBlockedFuture() which needs to synchronize on the lock on each access.\nThis is especially painful since each thread working through the same task's driver loop necessarily shares the output buffer instance and will each call 3 different methods in rapid succession that all check whether the operator is currently blocked (isBlocked(), needsInput(), isFinished()). This is on top of:\n\nHTTP threads decrementing memory when acknowledging pages\nother worker threads incrementing memory after enqueuing pages\nMemory tracker future callbacks\nConstant checks against OutputBufferMemoryManager#isOverutilized()\nThe fact that this call into the system memory context is in effect entering a single global lock tree for every memory tracker update. The same root lock that will be contended on as part of any memory update from any and all other queries / tasks / pipelines / drivers / operators (and of course other output buffers). As a result, the thread holding this output buffer lock can and does often block while holding it because of a failure to acquire the full chain of parent memory tracking object locks which prevents other threads from calling any synchronized method for the duration, including OutputBufferMemoryManager#getBufferBlockedFuture().\n\nThis change somewhat reduces the pain of all of that by caching the future in the operator itself when blocked so that subsequent checks don't re-enter the same massive bottleneck, but offers no improvement when not blocked. I'm in the process of putting together a proprosal to address the memory tracking and output buffer issues now.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540921443", "createdAt": "2020-12-11T12:44:47Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/PartitionedOutputOperator.java", "diffHunk": "@@ -261,8 +262,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        ListenableFuture<?> blocked = partitionFunction.isFull();\n-        return blocked.isDone() ? NOT_BLOCKED : blocked;\n+        if (isBlocked.isDone()) {\n+            isBlocked = partitionFunction.isFull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1ODg5OQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk2ODQ0MQ==", "bodyText": "Please add a comment in code before if (isBlocked.isDone()) {", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540968441", "createdAt": "2020-12-11T14:03:04Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/PartitionedOutputOperator.java", "diffHunk": "@@ -261,8 +262,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        ListenableFuture<?> blocked = partitionFunction.isFull();\n-        return blocked.isDone() ? NOT_BLOCKED : blocked;\n+        if (isBlocked.isDone()) {\n+            isBlocked = partitionFunction.isFull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1ODg5OQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxMDg3NA==", "bodyText": "Added", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r541010874", "createdAt": "2020-12-11T15:04:37Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/PartitionedOutputOperator.java", "diffHunk": "@@ -261,8 +262,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        ListenableFuture<?> blocked = partitionFunction.isFull();\n-        return blocked.isDone() ? NOT_BLOCKED : blocked;\n+        if (isBlocked.isDone()) {\n+            isBlocked = partitionFunction.isFull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1ODg5OQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjYzMzAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/TaskOutputOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo0OTo1NlrOIDza_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzowNzoxNVrOID3__Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1OTEzMg==", "bodyText": "future of output buffer is already cached", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540859132", "createdAt": "2020-12-11T10:49:56Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/TaskOutputOperator.java", "diffHunk": "@@ -122,8 +123,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        ListenableFuture<?> blocked = outputBuffer.isFull();\n-        return blocked.isDone() ? NOT_BLOCKED : blocked;\n+        if (isBlocked.isDone()) {\n+            isBlocked = outputBuffer.isFull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkzNDE0MQ==", "bodyText": "Same justification as my reply about PartitionedOutputOperator", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540934141", "createdAt": "2020-12-11T13:07:15Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/TaskOutputOperator.java", "diffHunk": "@@ -122,8 +123,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        ListenableFuture<?> blocked = outputBuffer.isFull();\n-        return blocked.isDone() ? NOT_BLOCKED : blocked;\n+        if (isBlocked.isDone()) {\n+            isBlocked = outputBuffer.isFull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1OTEzMg=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjYzNzAyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSinkOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1MDo1NlrOIDzdPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzoxMToxMFrOID4IIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1OTcwOQ==", "bodyText": "future of sink is already cached", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540859709", "createdAt": "2020-12-11T10:50:56Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSinkOperator.java", "diffHunk": "@@ -128,7 +129,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        return sink.waitForWriting();\n+        if (isBlocked.isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkzNjIyNQ==", "bodyText": "Slightly different context, but essentially is the same justification as my reply for PartitionedOutputOperator, except with LocalExchangeMemoryManager instead of OutputBufferMemoryManager. Admittedly, the problem is not nearly as bad there because it doesn't call into the memory tracking system but synchronizing on each access is still unnecessary.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540936225", "createdAt": "2020-12-11T13:11:10Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSinkOperator.java", "diffHunk": "@@ -128,7 +129,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        return sink.waitForWriting();\n+        if (isBlocked.isDone()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1OTcwOQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjYzOTE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSourceOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1MToyOVrOIDzedA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzoxMjo1NFrOID4MFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2MDAyMA==", "bodyText": "future of source is already cached", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540860020", "createdAt": "2020-12-11T10:51:29Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSourceOperator.java", "diffHunk": "@@ -103,7 +104,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        return source.waitForReading();\n+        if (isBlocked.isDone()) {\n+            isBlocked = source.waitForReading();\n+            if (isBlocked.isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkzNzIzOA==", "bodyText": "Similar justification here as for LocalExchangeSinkOperator.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540937238", "createdAt": "2020-12-11T13:12:54Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSourceOperator.java", "diffHunk": "@@ -103,7 +104,13 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        return source.waitForReading();\n+        if (isBlocked.isDone()) {\n+            isBlocked = source.waitForReading();\n+            if (isBlocked.isDone()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2MDAyMA=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjY0NzczOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/ExchangeOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1MzoyNlrOIDzjSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1MzoyNlrOIDzjSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2MTI1Ng==", "bodyText": "Change commit name Cache ExchangeClient#isBlocked future. Add explanation why io.prestosql.operator.ExchangeClient#isBlocked creates a new future every time (because they can be cancelled in io.prestosql.server.protocol.Query#waitForResults)", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r540861256", "createdAt": "2020-12-11T10:53:26Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/ExchangeOperator.java", "diffHunk": "@@ -92,6 +92,7 @@ public void noMoreOperators()\n     private final PlanNodeId sourceId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDQ4OTY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/ExchangeOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo1MzoyMVrOIHGWHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo1MzoyMVrOIHGWHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxNDkwOA==", "bodyText": "nit: double space after //", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544314908", "createdAt": "2020-12-16T13:53:21Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/ExchangeOperator.java", "diffHunk": "@@ -152,11 +153,14 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        ListenableFuture<?> blocked = exchangeClient.isBlocked();\n-        if (blocked.isDone()) {\n-            return NOT_BLOCKED;\n+        //  Avoid registering a new callback in the ExchangeClient when one is already pending", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDU3NTg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/BroadcastExchanger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoxMTowOFrOIHHJtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoxMTowOFrOIHHJtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMyODExOA==", "bodyText": "I don't think this buys anything. I would continue to use buffers.size()", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544328118", "createdAt": "2020-12-16T14:11:08Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/BroadcastExchanger.java", "diffHunk": "@@ -27,19 +28,23 @@\n {\n     private final List<Consumer<PageReference>> buffers;\n     private final LocalExchangeMemoryManager memoryManager;\n+    private final LongConsumer onPageReleased;\n+    private final int bufferCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDU4MTE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoxMjowOVrOIHHMvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowNjoxOVrOIJ47Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMyODg5Mw==", "bodyText": "Changing from Runnable to LongConsumer doesn't improve anything. Undo. Alternatively make it Consumer<Page> as it's more explicit than generic long.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544328893", "createdAt": "2020-12-16T14:12:09Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -17,24 +17,28 @@\n \n import javax.annotation.concurrent.ThreadSafe;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.LongConsumer;\n \n+import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n-class PageReference\n+final class PageReference\n {\n+    private static final AtomicIntegerFieldUpdater<PageReference> REFERENCE_COUNT_UPDATER = AtomicIntegerFieldUpdater.newUpdater(PageReference.class, \"referenceCount\");\n+\n     private final Page page;\n-    private final Runnable onFree;\n-    private final AtomicInteger referenceCount;\n+    private final LongConsumer onPageReleased;\n+    private volatile int referenceCount;\n \n-    public PageReference(Page page, int referenceCount, Runnable onFree)\n+    public PageReference(Page page, int referenceCount, LongConsumer onPageReleased)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3NTA0OA==", "bodyText": "Runnable requires that each PageReference instance is initialized with a lambda that captures state from the creating context in order to perform cleanup. a single LongConsumer can be created per exchange sink and used for all created instances.\nConsumer<Page> might be ok, but also opens the door to accidental ambiguity like whether Page#getRetainedSizeInBytes() or Page#getSizeInBytes() should be used as the decrement.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544475048", "createdAt": "2020-12-16T17:13:24Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -17,24 +17,28 @@\n \n import javax.annotation.concurrent.ThreadSafe;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.LongConsumer;\n \n+import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n-class PageReference\n+final class PageReference\n {\n+    private static final AtomicIntegerFieldUpdater<PageReference> REFERENCE_COUNT_UPDATER = AtomicIntegerFieldUpdater.newUpdater(PageReference.class, \"referenceCount\");\n+\n     private final Page page;\n-    private final Runnable onFree;\n-    private final AtomicInteger referenceCount;\n+    private final LongConsumer onPageReleased;\n+    private volatile int referenceCount;\n \n-    public PageReference(Page page, int referenceCount, Runnable onFree)\n+    public PageReference(Page page, int referenceCount, LongConsumer onPageReleased)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMyODg5Mw=="}, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MDc0Mg==", "bodyText": "Runnable requires that each PageReference instance is initialized with a lambda that captures state from the creating context in order to perform cleanup. a single LongConsumer can be created per exchange sink and used for all created instances.\n\nYou could make it Consumer<PageReference>\nThen lambda can be:\nreference -> doSomething(reference.getRetainedSizeInBytes()\n\nIt's cleaner and more explicit than generic long.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547240742", "createdAt": "2020-12-22T12:06:19Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -17,24 +17,28 @@\n \n import javax.annotation.concurrent.ThreadSafe;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.LongConsumer;\n \n+import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n-class PageReference\n+final class PageReference\n {\n+    private static final AtomicIntegerFieldUpdater<PageReference> REFERENCE_COUNT_UPDATER = AtomicIntegerFieldUpdater.newUpdater(PageReference.class, \"referenceCount\");\n+\n     private final Page page;\n-    private final Runnable onFree;\n-    private final AtomicInteger referenceCount;\n+    private final LongConsumer onPageReleased;\n+    private volatile int referenceCount;\n \n-    public PageReference(Page page, int referenceCount, Runnable onFree)\n+    public PageReference(Page page, int referenceCount, LongConsumer onPageReleased)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMyODg5Mw=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDU4NzIxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoxMzoyMFrOIHHQLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzoxNzoyMVrOIHQTLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMyOTc3NA==", "bodyText": "unrelated change. Extract to separate commit", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544329774", "createdAt": "2020-12-16T14:13:20Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -17,24 +17,28 @@\n \n import javax.annotation.concurrent.ThreadSafe;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.LongConsumer;\n \n+import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n-class PageReference\n+final class PageReference", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3Nzk5OA==", "bodyText": "It's material to the change to using AtomicIntegerFieldUpdater which will not work as expected with subclasses.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544477998", "createdAt": "2020-12-16T17:17:21Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -17,24 +17,28 @@\n \n import javax.annotation.concurrent.ThreadSafe;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.LongConsumer;\n \n+import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n-class PageReference\n+final class PageReference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMyOTc3NA=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDU4ODkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoxMzo0NFrOIHHROQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowNzoyOVrOIJ49Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMDA0MQ==", "bodyText": "extract to separate commit", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544330041", "createdAt": "2020-12-16T14:13:44Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -44,11 +48,26 @@ public long getRetainedSizeInBytes()\n \n     public Page removePage()\n     {\n-        int referenceCount = this.referenceCount.decrementAndGet();\n+        int referenceCount = REFERENCE_COUNT_UPDATER.decrementAndGet(this);\n         checkArgument(referenceCount >= 0, \"Page reference count is negative\");\n         if (referenceCount == 0) {\n-            onFree.run();\n+            onPageReleased.accept(page.getRetainedSizeInBytes());\n         }\n         return page;\n     }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3OTY1Ng==", "bodyText": "This was a bit of a hack, without adding this toString() implementation the referenceCount field is detected as unused and fails the build.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544479656", "createdAt": "2020-12-16T17:19:24Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -44,11 +48,26 @@ public long getRetainedSizeInBytes()\n \n     public Page removePage()\n     {\n-        int referenceCount = this.referenceCount.decrementAndGet();\n+        int referenceCount = REFERENCE_COUNT_UPDATER.decrementAndGet(this);\n         checkArgument(referenceCount >= 0, \"Page reference count is negative\");\n         if (referenceCount == 0) {\n-            onFree.run();\n+            onPageReleased.accept(page.getRetainedSizeInBytes());\n         }\n         return page;\n     }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMDA0MQ=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MTI5NA==", "bodyText": "You could add toString without referenceCount in previous commit and then add referenceCount to toString in this commit", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547241294", "createdAt": "2020-12-22T12:07:29Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -44,11 +48,26 @@ public long getRetainedSizeInBytes()\n \n     public Page removePage()\n     {\n-        int referenceCount = this.referenceCount.decrementAndGet();\n+        int referenceCount = REFERENCE_COUNT_UPDATER.decrementAndGet(this);\n         checkArgument(referenceCount >= 0, \"Page reference count is negative\");\n         if (referenceCount == 0) {\n-            onFree.run();\n+            onPageReleased.accept(page.getRetainedSizeInBytes());\n         }\n         return page;\n     }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMDA0MQ=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDU5NjkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoxNToyMVrOIHHWEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxMzoxNFrOIJ5GSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMTI4Mg==", "bodyText": "this is binding PageReference code with LocalExchangeMemoryManager unnecessarily.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544331282", "createdAt": "2020-12-16T14:15:21Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -44,11 +48,26 @@ public long getRetainedSizeInBytes()\n \n     public Page removePage()\n     {\n-        int referenceCount = this.referenceCount.decrementAndGet();\n+        int referenceCount = REFERENCE_COUNT_UPDATER.decrementAndGet(this);\n         checkArgument(referenceCount >= 0, \"Page reference count is negative\");\n         if (referenceCount == 0) {\n-            onFree.run();\n+            onPageReleased.accept(page.getRetainedSizeInBytes());\n         }\n         return page;\n     }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"size\", getRetainedSizeInBytes())\n+                .add(\"referenceCount\", referenceCount)\n+                .toString();\n+    }\n+\n+    public static LongConsumer releaseListenerForExchangeMemoryManager(LocalExchangeMemoryManager memoryManager)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4NDk5OA==", "bodyText": "This avoids accidentally creating a megamorphic call site inside of removePage(). Currently, there are only two implementations used- this one and the anonymous one created by PassthroughExchanger. If each exchanger created their own lambda it would be megamorphic.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544484998", "createdAt": "2020-12-16T17:26:45Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -44,11 +48,26 @@ public long getRetainedSizeInBytes()\n \n     public Page removePage()\n     {\n-        int referenceCount = this.referenceCount.decrementAndGet();\n+        int referenceCount = REFERENCE_COUNT_UPDATER.decrementAndGet(this);\n         checkArgument(referenceCount >= 0, \"Page reference count is negative\");\n         if (referenceCount == 0) {\n-            onFree.run();\n+            onPageReleased.accept(page.getRetainedSizeInBytes());\n         }\n         return page;\n     }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"size\", getRetainedSizeInBytes())\n+                .add(\"referenceCount\", referenceCount)\n+                .toString();\n+    }\n+\n+    public static LongConsumer releaseListenerForExchangeMemoryManager(LocalExchangeMemoryManager memoryManager)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMTI4Mg=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMzQ5Mw==", "bodyText": "This is certainly an interesting idea, but does this actually make a difference? Presto is pretty much built around pushing megamorphic call sites to page-sized granularities. If this needs to be specialized like this, we probably have much bigger issues throughout the entire engine.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547103493", "createdAt": "2020-12-22T07:02:06Z", "author": {"login": "erichwang"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -44,11 +48,26 @@ public long getRetainedSizeInBytes()\n \n     public Page removePage()\n     {\n-        int referenceCount = this.referenceCount.decrementAndGet();\n+        int referenceCount = REFERENCE_COUNT_UPDATER.decrementAndGet(this);\n         checkArgument(referenceCount >= 0, \"Page reference count is negative\");\n         if (referenceCount == 0) {\n-            onFree.run();\n+            onPageReleased.accept(page.getRetainedSizeInBytes());\n         }\n         return page;\n     }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"size\", getRetainedSizeInBytes())\n+                .add(\"referenceCount\", referenceCount)\n+                .toString();\n+    }\n+\n+    public static LongConsumer releaseListenerForExchangeMemoryManager(LocalExchangeMemoryManager memoryManager)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMTI4Mg=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MzU5NQ==", "bodyText": "I agree with @erichwang . We should not obscure readability for negligible perf improvements", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547243595", "createdAt": "2020-12-22T12:13:14Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -44,11 +48,26 @@ public long getRetainedSizeInBytes()\n \n     public Page removePage()\n     {\n-        int referenceCount = this.referenceCount.decrementAndGet();\n+        int referenceCount = REFERENCE_COUNT_UPDATER.decrementAndGet(this);\n         checkArgument(referenceCount >= 0, \"Page reference count is negative\");\n         if (referenceCount == 0) {\n-            onFree.run();\n+            onPageReleased.accept(page.getRetainedSizeInBytes());\n         }\n         return page;\n     }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"size\", getRetainedSizeInBytes())\n+                .add(\"referenceCount\", referenceCount)\n+                .toString();\n+    }\n+\n+    public static LongConsumer releaseListenerForExchangeMemoryManager(LocalExchangeMemoryManager memoryManager)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMTI4Mg=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDYwMTU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoxNjoxMVrOIHHY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzoxODo0M1rOIHQXwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMjAwMg==", "bodyText": "I don't think AtomicInteger is a problem. Page granularity is not such a big deal. If there was AtomicInteger per row that would be a problem", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544332002", "createdAt": "2020-12-16T14:16:11Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -17,24 +17,28 @@\n \n import javax.annotation.concurrent.ThreadSafe;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.LongConsumer;\n \n+import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n-class PageReference\n+final class PageReference\n {\n+    private static final AtomicIntegerFieldUpdater<PageReference> REFERENCE_COUNT_UPDATER = AtomicIntegerFieldUpdater.newUpdater(PageReference.class, \"referenceCount\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3OTE2OA==", "bodyText": "It's still an extra allocation (with object headers and alignment overhead) and extra pointer indirection at usage time. The improvement is minor but enough of these are created through local exchanges that embedding the counter is worthwhile.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544479168", "createdAt": "2020-12-16T17:18:43Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/PageReference.java", "diffHunk": "@@ -17,24 +17,28 @@\n \n import javax.annotation.concurrent.ThreadSafe;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.LongConsumer;\n \n+import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkArgument;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n-class PageReference\n+final class PageReference\n {\n+    private static final AtomicIntegerFieldUpdater<PageReference> REFERENCE_COUNT_UPDATER = AtomicIntegerFieldUpdater.newUpdater(PageReference.class, \"referenceCount\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMzMjAwMg=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDY1Nzk2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoyNjo1NFrOIHH5qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoyNjo1NFrOIHH5qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0MDM5Mg==", "bodyText": "nit: extra space after //", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544340392", "createdAt": "2020-12-16T14:26:54Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +49,37 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                //  if we have no callback waiting, return early", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDY2MjI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoyNzo0MlrOIHH8Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOToyODo1NVrOIHVmlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0MTA1OQ==", "bodyText": "use notFullFuture.isDone()", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544341059", "createdAt": "2020-12-16T14:27:42Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +49,37 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                //  if we have no callback waiting, return early\n+                if (notFullFuture == NOT_FULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4NzgyMg==", "bodyText": "NOT_FULL is the sentinel value for \"no listeners\". Any other value is a future that might not be done, but that check can occur outside of the synchronized block and without stalling to do a volatile read against that future's isDone() state. Redudant set(null) calls are benign but this implementation preserves the ability to alias check the NOT_FULL sentinel to detect listener registration.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544487822", "createdAt": "2020-12-16T17:30:50Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +49,37 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                //  if we have no callback waiting, return early\n+                if (notFullFuture == NOT_FULL) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0MTA1OQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2NDg4NQ==", "bodyText": "Replaced with null check instead.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544564885", "createdAt": "2020-12-16T19:28:55Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +49,37 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                //  if we have no callback waiting, return early\n+                if (notFullFuture == NOT_FULL) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0MTA1OQ=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDY3MDIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDoyOToxN1rOIHIBAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzoyNDowNlrOIHQmtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0MjI3Mw==", "bodyText": "recheck if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone())", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544342273", "createdAt": "2020-12-16T14:29:17Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +49,37 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                //  if we have no callback waiting, return early\n+                if (notFullFuture == NOT_FULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4Mjk5Nw==", "bodyText": "It's necessary to not re-check inside of the synchronized block in order to preserve existing semantics. Re-checks can race with concurrent modifications whereas previously all modifications were serialized through the object monitor. The effect was that previously the transition edge from above-full to below full always unblocked any waiters, and not doing so here (even if we've transitioned back up above the full boundary in the mean time) is a departure from that behavior.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544482997", "createdAt": "2020-12-16T17:24:06Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +49,37 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                //  if we have no callback waiting, return early\n+                if (notFullFuture == NOT_FULL) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0MjI3Mw=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDcwODg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDozNzowMFrOIHIYCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTozMDoyOFrOIHVqTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0ODE3MQ==", "bodyText": "simplify:\n// optionally\nif (bufferedBytes.get() <= maxBufferedBytes) {\n  return NOT_BLOCKED;\n}\nif (notFullFuture.isDone()) {\n  notFullFuture = SettableFuture.create();\n}", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544348171", "createdAt": "2020-12-16T14:37:00Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +49,37 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                //  if we have no callback waiting, return early\n+                if (notFullFuture == NOT_FULL) {\n+                    return;\n+                }\n+                future = notFullFuture;\n+                notFullFuture = NOT_FULL;\n             }\n-\n-            // otherwise, we are not full, so complete the future\n-            future = notFullFuture;\n-            notFullFuture = NOT_FULL;\n+            // complete future outside of lock since this can invoke callbacks\n+            future.set(null);\n         }\n-\n-        // complete future outside of lock since this can invoke callbacks\n-        future.set(null);\n     }\n \n-    public synchronized ListenableFuture<?> getNotFullFuture()\n+    public ListenableFuture<?> getNotFullFuture()\n     {\n-        // if we are full and the current not full future is already complete, create a new one\n-        if (bufferedBytes.get() > maxBufferedBytes && notFullFuture.isDone()) {\n-            notFullFuture = SettableFuture.create();\n+        if (bufferedBytes.get() <= maxBufferedBytes) {\n+            return NOT_BLOCKED;\n+        }\n+        SettableFuture<?> future;\n+        synchronized (this) {\n+            // if we are full and the current not full future is already complete, create a new one\n+            if ((notFullFuture == NOT_FULL || notFullFuture.isDone()) && bufferedBytes.get() > maxBufferedBytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NjUzNA==", "bodyText": "Simplified, also realized that the notFullFuture.isDone() check is not correct as it can race with the callback. Updated to now only use the  notFullFuture == NOT_DONE alias check for callback registration.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544496534", "createdAt": "2020-12-16T17:43:36Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +49,37 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                //  if we have no callback waiting, return early\n+                if (notFullFuture == NOT_FULL) {\n+                    return;\n+                }\n+                future = notFullFuture;\n+                notFullFuture = NOT_FULL;\n             }\n-\n-            // otherwise, we are not full, so complete the future\n-            future = notFullFuture;\n-            notFullFuture = NOT_FULL;\n+            // complete future outside of lock since this can invoke callbacks\n+            future.set(null);\n         }\n-\n-        // complete future outside of lock since this can invoke callbacks\n-        future.set(null);\n     }\n \n-    public synchronized ListenableFuture<?> getNotFullFuture()\n+    public ListenableFuture<?> getNotFullFuture()\n     {\n-        // if we are full and the current not full future is already complete, create a new one\n-        if (bufferedBytes.get() > maxBufferedBytes && notFullFuture.isDone()) {\n-            notFullFuture = SettableFuture.create();\n+        if (bufferedBytes.get() <= maxBufferedBytes) {\n+            return NOT_BLOCKED;\n+        }\n+        SettableFuture<?> future;\n+        synchronized (this) {\n+            // if we are full and the current not full future is already complete, create a new one\n+            if ((notFullFuture == NOT_FULL || notFullFuture.isDone()) && bufferedBytes.get() > maxBufferedBytes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0ODE3MQ=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2NTgzNg==", "bodyText": "Updated again to use a null sentinel and this becomes a null check.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544565836", "createdAt": "2020-12-16T19:30:28Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +49,37 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                //  if we have no callback waiting, return early\n+                if (notFullFuture == NOT_FULL) {\n+                    return;\n+                }\n+                future = notFullFuture;\n+                notFullFuture = NOT_FULL;\n             }\n-\n-            // otherwise, we are not full, so complete the future\n-            future = notFullFuture;\n-            notFullFuture = NOT_FULL;\n+            // complete future outside of lock since this can invoke callbacks\n+            future.set(null);\n         }\n-\n-        // complete future outside of lock since this can invoke callbacks\n-        future.set(null);\n     }\n \n-    public synchronized ListenableFuture<?> getNotFullFuture()\n+    public ListenableFuture<?> getNotFullFuture()\n     {\n-        // if we are full and the current not full future is already complete, create a new one\n-        if (bufferedBytes.get() > maxBufferedBytes && notFullFuture.isDone()) {\n-            notFullFuture = SettableFuture.create();\n+        if (bufferedBytes.get() <= maxBufferedBytes) {\n+            return NOT_BLOCKED;\n+        }\n+        SettableFuture<?> future;\n+        synchronized (this) {\n+            // if we are full and the current not full future is already complete, create a new one\n+            if ((notFullFuture == NOT_FULL || notFullFuture.isDone()) && bufferedBytes.get() > maxBufferedBytes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0ODE3MQ=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDc2NjM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0NzoxOFrOIHI5TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODowMzo1MFrOIHSSJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NjY4NA==", "bodyText": "let's remove this. This makes he code unnecessarily complicated.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544356684", "createdAt": "2020-12-16T14:47:18Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -22,10 +22,12 @@\n import java.util.concurrent.atomic.AtomicLong;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n \n @ThreadSafe\n public class LocalExchangeMemoryManager\n {\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);\n     private static final SettableFuture<?> NOT_FULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMDUwMg==", "bodyText": "After migrating all checks against the NOT_FULL sentinel, it became clear that null would be a more clear fit. I've changed it to avoid having NOT_FULL and using null to represent no callback registered instead.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r544510502", "createdAt": "2020-12-16T18:03:50Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -22,10 +22,12 @@\n import java.util.concurrent.atomic.AtomicLong;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n \n @ThreadSafe\n public class LocalExchangeMemoryManager\n {\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);\n     private static final SettableFuture<?> NOT_FULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NjY4NA=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTc1Njc4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/ExchangeOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjozMjowNFrOIJv9sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTo1NDoxMlrOIJ4mxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MzkzNg==", "bodyText": "The question I have here is why the ExchangeClient is in fact returning a different Future for each call to isBlocked()? The whole point of ListenableFutures is that a single instance is capable of delegating completion to multiple listeners already without creating a new instance each time. That might be something we should also fix in ExchangeClient.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547093936", "createdAt": "2020-12-22T06:32:04Z", "author": {"login": "erichwang"}, "path": "presto-main/src/main/java/io/prestosql/operator/ExchangeOperator.java", "diffHunk": "@@ -152,11 +153,14 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        ListenableFuture<?> blocked = exchangeClient.isBlocked();\n-        if (blocked.isDone()) {\n-            return NOT_BLOCKED;\n+        //  Avoid registering a new callback in the ExchangeClient when one is already pending", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNTUyNg==", "bodyText": "isBlocked can be called from io.prestosql.server.protocol.Query#getFutureStateChange, which is called from io.prestosql.server.protocol.Query#waitForResults with future timeout. This means that returned future can be cancelled and we need to protect against that.\nSimilar concept is done in io.prestosql.execution.FutureStateChange which is used by long pooling from REST resources.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547235526", "createdAt": "2020-12-22T11:54:12Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/ExchangeOperator.java", "diffHunk": "@@ -152,11 +153,14 @@ public boolean isFinished()\n     @Override\n     public ListenableFuture<?> isBlocked()\n     {\n-        ListenableFuture<?> blocked = exchangeClient.isBlocked();\n-        if (blocked.isDone()) {\n-            return NOT_BLOCKED;\n+        //  Avoid registering a new callback in the ExchangeClient when one is already pending", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MzkzNg=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTg1NTk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzoxNjozMVrOIJw2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1NjowNlrOIKABKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODQxMA==", "bodyText": "the default constructor value for AtomicBoolean is already false.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547108410", "createdAt": "2020-12-22T07:16:31Z", "author": {"login": "erichwang"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "diffHunk": "@@ -19,41 +19,37 @@\n import io.prestosql.operator.WorkProcessor.ProcessState;\n import io.prestosql.spi.Page;\n \n+import javax.annotation.Nullable;\n import javax.annotation.concurrent.GuardedBy;\n import javax.annotation.concurrent.ThreadSafe;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.Consumer;\n \n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n public class LocalExchangeSource\n {\n-    private static final SettableFuture<?> NOT_EMPTY;\n-\n-    static {\n-        NOT_EMPTY = SettableFuture.create();\n-        NOT_EMPTY.set(null);\n-    }\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);\n \n     private final Consumer<LocalExchangeSource> onFinish;\n \n-    private final BlockingQueue<PageReference> buffer = new LinkedBlockingDeque<>();\n+    private final LinkedBlockingDeque<PageReference> buffer = new LinkedBlockingDeque<>();\n     private final AtomicLong bufferedBytes = new AtomicLong();\n \n-    private final Object lock = new Object();\n-\n-    @GuardedBy(\"lock\")\n-    private SettableFuture<?> notEmptyFuture = NOT_EMPTY;\n+    @Nullable\n+    @GuardedBy(\"this\")\n+    private SettableFuture<?> notEmptyFuture; // null indicates no callback has been registered\n \n-    @GuardedBy(\"lock\")\n-    private boolean finishing;\n+    @GuardedBy(\"this\")\n+    private final AtomicBoolean finishing = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1MjU0NA==", "bodyText": "I would just use volatile boolean finishing", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547252544", "createdAt": "2020-12-22T12:34:14Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "diffHunk": "@@ -19,41 +19,37 @@\n import io.prestosql.operator.WorkProcessor.ProcessState;\n import io.prestosql.spi.Page;\n \n+import javax.annotation.Nullable;\n import javax.annotation.concurrent.GuardedBy;\n import javax.annotation.concurrent.ThreadSafe;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.Consumer;\n \n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n public class LocalExchangeSource\n {\n-    private static final SettableFuture<?> NOT_EMPTY;\n-\n-    static {\n-        NOT_EMPTY = SettableFuture.create();\n-        NOT_EMPTY.set(null);\n-    }\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);\n \n     private final Consumer<LocalExchangeSource> onFinish;\n \n-    private final BlockingQueue<PageReference> buffer = new LinkedBlockingDeque<>();\n+    private final LinkedBlockingDeque<PageReference> buffer = new LinkedBlockingDeque<>();\n     private final AtomicLong bufferedBytes = new AtomicLong();\n \n-    private final Object lock = new Object();\n-\n-    @GuardedBy(\"lock\")\n-    private SettableFuture<?> notEmptyFuture = NOT_EMPTY;\n+    @Nullable\n+    @GuardedBy(\"this\")\n+    private SettableFuture<?> notEmptyFuture; // null indicates no callback has been registered\n \n-    @GuardedBy(\"lock\")\n-    private boolean finishing;\n+    @GuardedBy(\"this\")\n+    private final AtomicBoolean finishing = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODQxMA=="}, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1Njk3MQ==", "bodyText": "Sure, will make this a volatile boolean instead.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547356971", "createdAt": "2020-12-22T15:56:06Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "diffHunk": "@@ -19,41 +19,37 @@\n import io.prestosql.operator.WorkProcessor.ProcessState;\n import io.prestosql.spi.Page;\n \n+import javax.annotation.Nullable;\n import javax.annotation.concurrent.GuardedBy;\n import javax.annotation.concurrent.ThreadSafe;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.Consumer;\n \n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n public class LocalExchangeSource\n {\n-    private static final SettableFuture<?> NOT_EMPTY;\n-\n-    static {\n-        NOT_EMPTY = SettableFuture.create();\n-        NOT_EMPTY.set(null);\n-    }\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);\n \n     private final Consumer<LocalExchangeSource> onFinish;\n \n-    private final BlockingQueue<PageReference> buffer = new LinkedBlockingDeque<>();\n+    private final LinkedBlockingDeque<PageReference> buffer = new LinkedBlockingDeque<>();\n     private final AtomicLong bufferedBytes = new AtomicLong();\n \n-    private final Object lock = new Object();\n-\n-    @GuardedBy(\"lock\")\n-    private SettableFuture<?> notEmptyFuture = NOT_EMPTY;\n+    @Nullable\n+    @GuardedBy(\"this\")\n+    private SettableFuture<?> notEmptyFuture; // null indicates no callback has been registered\n \n-    @GuardedBy(\"lock\")\n-    private boolean finishing;\n+    @GuardedBy(\"this\")\n+    private final AtomicBoolean finishing = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODQxMA=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTg2ODExOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzoyMTozMlrOIJw8-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1MDo0NVrOIJ_1kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExMDEzOA==", "bodyText": "Why do we need to change BlockingQueue to LinkedBlockingDeque?", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547110138", "createdAt": "2020-12-22T07:21:32Z", "author": {"login": "erichwang"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "diffHunk": "@@ -19,41 +19,37 @@\n import io.prestosql.operator.WorkProcessor.ProcessState;\n import io.prestosql.spi.Page;\n \n+import javax.annotation.Nullable;\n import javax.annotation.concurrent.GuardedBy;\n import javax.annotation.concurrent.ThreadSafe;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.Consumer;\n \n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n public class LocalExchangeSource\n {\n-    private static final SettableFuture<?> NOT_EMPTY;\n-\n-    static {\n-        NOT_EMPTY = SettableFuture.create();\n-        NOT_EMPTY.set(null);\n-    }\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);\n \n     private final Consumer<LocalExchangeSource> onFinish;\n \n-    private final BlockingQueue<PageReference> buffer = new LinkedBlockingDeque<>();\n+    private final LinkedBlockingDeque<PageReference> buffer = new LinkedBlockingDeque<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NDAwMw==", "bodyText": "Accidentally left this behind, I changed it because it was easier to navigate into the implementation of LinkedBlockingDeque methods in my IDE if the field was declared with the exact type. Will revert it to the previous declaration.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547354003", "createdAt": "2020-12-22T15:50:45Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "diffHunk": "@@ -19,41 +19,37 @@\n import io.prestosql.operator.WorkProcessor.ProcessState;\n import io.prestosql.spi.Page;\n \n+import javax.annotation.Nullable;\n import javax.annotation.concurrent.GuardedBy;\n import javax.annotation.concurrent.ThreadSafe;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.Consumer;\n \n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n public class LocalExchangeSource\n {\n-    private static final SettableFuture<?> NOT_EMPTY;\n-\n-    static {\n-        NOT_EMPTY = SettableFuture.create();\n-        NOT_EMPTY.set(null);\n-    }\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);\n \n     private final Consumer<LocalExchangeSource> onFinish;\n \n-    private final BlockingQueue<PageReference> buffer = new LinkedBlockingDeque<>();\n+    private final LinkedBlockingDeque<PageReference> buffer = new LinkedBlockingDeque<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExMDEzOA=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTk0MjQ3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzo0OToyOFrOIJxnFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoxNzo1MlrOIKAwFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMDkxOA==", "bodyText": "Any reason making notEmptyFuture nullable is better than what we had before? This seems bulkier without notable benefit?", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547120918", "createdAt": "2020-12-22T07:49:28Z", "author": {"login": "erichwang"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "diffHunk": "@@ -164,18 +178,20 @@ public void finish()\n         checkNotHoldsLock();\n \n         SettableFuture<?> notEmptyFuture;\n-        synchronized (lock) {\n-            if (finishing) {\n+        synchronized (this) {\n+            if (!finishing.compareAndSet(false, true)) {\n                 return;\n             }\n-            finishing = true;\n \n+            //  Unblock any waiters\n             notEmptyFuture = this.notEmptyFuture;\n-            this.notEmptyFuture = NOT_EMPTY;\n+            this.notEmptyFuture = null;\n         }\n \n         // notify readers outside of lock since this may result in a callback\n-        notEmptyFuture.set(null);\n+        if (notEmptyFuture != null) {\n+            notEmptyFuture.set(null);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2ODk4MA==", "bodyText": "Compared to what was happening before, this is indeed better in terms of performance:\n\nOverwriting this.notEmptyFuture unconditionally is an additional (potentially irrelevant) store operation that must be flushed to memory as part of releasing the monitor. Skipping the store if the field is already null (ie: no listener is registered) avoids that.\nUnconditionally calling SettableFuture#set(null) in the previous implementation required a volatile CAS even when no listener was registered which performs poorly compared to a null check (which are exceedingly cheap)\n\nI think the previous use of having the static final SettableFuture<?> NOT_EMPTY constant was arguable less clear about what was going on. Conceptually, this field has two states: listener registered and no listener registered. You could make them appear the same by using the constant, but then other parts of code are always checking isDone() which is expensive (volatile read) and in my opinion creates a hazard for race conditions since set(null) can race with the isDone() checks without paying close attention to subtle details of what happens inside of the syncronized sections.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547368980", "createdAt": "2020-12-22T16:17:52Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeSource.java", "diffHunk": "@@ -164,18 +178,20 @@ public void finish()\n         checkNotHoldsLock();\n \n         SettableFuture<?> notEmptyFuture;\n-        synchronized (lock) {\n-            if (finishing) {\n+        synchronized (this) {\n+            if (!finishing.compareAndSet(false, true)) {\n                 return;\n             }\n-            finishing = true;\n \n+            //  Unblock any waiters\n             notEmptyFuture = this.notEmptyFuture;\n-            this.notEmptyFuture = NOT_EMPTY;\n+            this.notEmptyFuture = null;\n         }\n \n         // notify readers outside of lock since this may result in a callback\n-        notEmptyFuture.set(null);\n+        if (notEmptyFuture != null) {\n+            notEmptyFuture.set(null);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMDkxOA=="}, "originalCommit": null, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc2NjIxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxNjozN1rOIJ5Lhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoxOToyNFrOIKAzQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NDkzNA==", "bodyText": "please initialize it with NOT_BLOCKED", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547244934", "createdAt": "2020-12-22T12:16:37Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -16,28 +16,26 @@\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.SettableFuture;\n \n+import javax.annotation.Nullable;\n import javax.annotation.concurrent.GuardedBy;\n import javax.annotation.concurrent.ThreadSafe;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n \n @ThreadSafe\n public class LocalExchangeMemoryManager\n {\n-    private static final SettableFuture<?> NOT_FULL;\n-\n-    static {\n-        NOT_FULL = SettableFuture.create();\n-        NOT_FULL.set(null);\n-    }\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);\n \n     private final long maxBufferedBytes;\n     private final AtomicLong bufferedBytes = new AtomicLong();\n \n+    @Nullable\n     @GuardedBy(\"this\")\n-    private SettableFuture<?> notFullFuture = NOT_FULL;\n+    private SettableFuture<?> notFullFuture; // null represents \"no callback registered\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2OTc5NA==", "bodyText": "NOT_BLOCKED is not a SettableFuture<?> but rather a ListenableFuture<?> which can't be set (it's already completed). See #6260 (comment) for some additional detail around this implementation strategy.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547369794", "createdAt": "2020-12-22T16:19:24Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -16,28 +16,26 @@\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.SettableFuture;\n \n+import javax.annotation.Nullable;\n import javax.annotation.concurrent.GuardedBy;\n import javax.annotation.concurrent.ThreadSafe;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n \n @ThreadSafe\n public class LocalExchangeMemoryManager\n {\n-    private static final SettableFuture<?> NOT_FULL;\n-\n-    static {\n-        NOT_FULL = SettableFuture.create();\n-        NOT_FULL.set(null);\n-    }\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);\n \n     private final long maxBufferedBytes;\n     private final AtomicLong bufferedBytes = new AtomicLong();\n \n+    @Nullable\n     @GuardedBy(\"this\")\n-    private SettableFuture<?> notFullFuture = NOT_FULL;\n+    private SettableFuture<?> notFullFuture; // null represents \"no callback registered\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NDkzNA=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc4ODM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyNDoxNVrOIJ5Yag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoxOTozN1rOIKCsLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0ODIzNA==", "bodyText": "This optimization reduces readability of concurrent code for little benefit. In practice, we already synchronized on this, so doing extra checks like notFullFuture.isDone() is not a big issue. Also, we should recheck that buffer is still not full before triggering future. That check is cheap, but waking up drivers to do empty processing is not.\n\nThe effect was that previously the transition edge from above-full to below full always unblocked any waiters, and not doing so here (even if we've transitioned back up above the full boundary in the mean time) is a departure from that behavior.\n\nWe cold not transition back to above in the meantime because all methods in LocalExchangeMemoryManager are synchronized. We could transition to above immediately after future was set, but that's slightly different behavior.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547248234", "createdAt": "2020-12-22T12:24:15Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +45,39 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                // if we have no callback waiting, return early", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMDc0OA==", "bodyText": "This optimization reduces readability of concurrent code...\n\nI disagree. The prior implementation seemed \"simpler\" in that there was no null checking, but it was also masking a subtle problem: checking isDone() while holding the lock can race with future.set(null) which occurs outside of the synchronized section. This happens to be ok because the field is overwritten inside the synchronized section, but is much more subtle than a null check IMO.\n\n... so doing extra checks like notFullFuture.isDone() is not a big issue\n\nIt's significantly more expensive than a null check because it requires a volatile read (while holding the lock) of the value at the other end of the current reference, meaning that having acquired the object monitor is insufficient to have brought that memory into the CPU cache and will at best need to read it from a shared CPU cache if not from main memory.\nNow, will the extra cycles incurred in doing that dominate performance? Not likely, but there is an Amdahl's law component to the duration that any thread spends in the synchronized section of updateMemoryUsage(long) or getNotFullFuture().\n\nThat check is cheap, but waking up drivers to do empty processing is not.\n\nI agree, the question is whether changing the semantics are a good idea as part of this refactor. Previously, all modifications were linearized by the object monitor. Now, they linearize on the bufferedBytes atomic to accomplish the same goal and the synchronized block is establishing a consistent view of the callback field. I can't say how many workloads today depend on \"fluttering\" against the full vs not-full state and whether they would all benefit from having some of those unblocking notifications suppressed. In the interest of being conservative, I would prefer to keep the previous semantics (but with less lock contention) than potentially regress performance.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r547400748", "createdAt": "2020-12-22T17:19:37Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/exchange/LocalExchangeMemoryManager.java", "diffHunk": "@@ -47,31 +45,39 @@ public LocalExchangeMemoryManager(long maxBufferedBytes)\n \n     public void updateMemoryUsage(long bytesAdded)\n     {\n-        SettableFuture<?> future;\n-        synchronized (this) {\n-            bufferedBytes.addAndGet(bytesAdded);\n-\n-            // if we are full, then breakout\n-            if (bufferedBytes.get() > maxBufferedBytes || notFullFuture.isDone()) {\n-                return;\n+        long bufferedBytes = this.bufferedBytes.addAndGet(bytesAdded);\n+        // detect the transition from above to below the full boundary\n+        if (bufferedBytes <= maxBufferedBytes && (bufferedBytes - bytesAdded) > maxBufferedBytes) {\n+            SettableFuture<?> future;\n+            synchronized (this) {\n+                // if we have no callback waiting, return early", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0ODIzNA=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4ODM5NTk2OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/ExchangeClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMTo0OTozMlrOIQiO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNjoyMTowMlrOIRc9QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIwODk4OA==", "bodyText": "In this case, why not exit early at the top of the method?", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r554208988", "createdAt": "2021-01-08T21:49:32Z", "author": {"login": "dain"}, "path": "core/trino-main/src/main/java/io/trino/operator/ExchangeClient.java", "diffHunk": "@@ -322,52 +323,73 @@ public synchronized void scheduleRequestIfNecessary()\n         }\n     }\n \n-    public synchronized ListenableFuture<?> isBlocked()\n+    public ListenableFuture<?> isBlocked()\n     {\n+        // Fast path pre-check\n         if (isClosed() || isFailed() || pageBuffer.peek() != null) {\n-            return Futures.immediateFuture(true);\n+            return NOT_BLOCKED;\n+        }\n+        synchronized (this) {\n+            // Recheck after acquiring the lock\n+            if (isClosed() || isFailed() || pageBuffer.peek() != null) {\n+                return NOT_BLOCKED;\n+            }\n+            SettableFuture<?> future = SettableFuture.create();\n+            blockedCallers.add(future);\n+            return future;\n         }\n-        SettableFuture<?> future = SettableFuture.create();\n-        blockedCallers.add(future);\n-        return future;\n     }\n \n-    private synchronized boolean addPages(List<SerializedPage> pages)\n+    private boolean addPages(List<SerializedPage> pages)\n     {\n-        if (isClosed() || isFailed()) {\n-            return false;\n+        // Compute stats before acquiring the lock\n+        long pagesRetainedSizeInBytes = 0;\n+        long responseSize = 0;\n+        for (SerializedPage page : pages) {\n+            pagesRetainedSizeInBytes += page.getRetainedSizeInBytes();\n+            responseSize += page.getSizeInBytes();\n         }\n \n-        pageBuffer.addAll(pages);\n+        List<SettableFuture<?>> notify = ImmutableList.of();\n+        synchronized (this) {\n+            if (isClosed() || isFailed()) {\n+                return false;\n+            }\n \n-        if (!pages.isEmpty()) {\n-            // notify all blocked callers\n-            notifyBlockedCallers();\n-        }\n+            pageBuffer.addAll(pages);\n \n-        long pagesRetainedSizeInBytes = pages.stream()\n-                .mapToLong(SerializedPage::getRetainedSizeInBytes)\n-                .sum();\n+            bufferRetainedSizeInBytes += pagesRetainedSizeInBytes;\n+            maxBufferRetainedSizeInBytes = Math.max(maxBufferRetainedSizeInBytes, bufferRetainedSizeInBytes);\n+            systemMemoryContext.setBytes(bufferRetainedSizeInBytes);\n+            successfulRequests++;\n+            // AVG_n = AVG_(n-1) * (n-1)/n + VALUE_n / n\n+            averageBytesPerRequest = (long) (1.0 * averageBytesPerRequest * (successfulRequests - 1) / successfulRequests + responseSize / successfulRequests);\n \n-        bufferRetainedSizeInBytes += pagesRetainedSizeInBytes;\n-        maxBufferRetainedSizeInBytes = Math.max(maxBufferRetainedSizeInBytes, bufferRetainedSizeInBytes);\n-        systemMemoryContext.setBytes(bufferRetainedSizeInBytes);\n-        successfulRequests++;\n+            if (!pages.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI1MDIwNw==", "bodyText": "I think you\u2019re on to something here. Comments elsewhere suggest that updating the per-request and request count stats must occur even when no pages are added, but there is a real opportunity to skip the memory tracker update of 0 bytes (huge contention bottleneck, although there might be more early returns on 0) and the buffer lock as part of passing an empty list argument to addAll.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r554250207", "createdAt": "2021-01-08T23:46:22Z", "author": {"login": "pettyjamesm"}, "path": "core/trino-main/src/main/java/io/trino/operator/ExchangeClient.java", "diffHunk": "@@ -322,52 +323,73 @@ public synchronized void scheduleRequestIfNecessary()\n         }\n     }\n \n-    public synchronized ListenableFuture<?> isBlocked()\n+    public ListenableFuture<?> isBlocked()\n     {\n+        // Fast path pre-check\n         if (isClosed() || isFailed() || pageBuffer.peek() != null) {\n-            return Futures.immediateFuture(true);\n+            return NOT_BLOCKED;\n+        }\n+        synchronized (this) {\n+            // Recheck after acquiring the lock\n+            if (isClosed() || isFailed() || pageBuffer.peek() != null) {\n+                return NOT_BLOCKED;\n+            }\n+            SettableFuture<?> future = SettableFuture.create();\n+            blockedCallers.add(future);\n+            return future;\n         }\n-        SettableFuture<?> future = SettableFuture.create();\n-        blockedCallers.add(future);\n-        return future;\n     }\n \n-    private synchronized boolean addPages(List<SerializedPage> pages)\n+    private boolean addPages(List<SerializedPage> pages)\n     {\n-        if (isClosed() || isFailed()) {\n-            return false;\n+        // Compute stats before acquiring the lock\n+        long pagesRetainedSizeInBytes = 0;\n+        long responseSize = 0;\n+        for (SerializedPage page : pages) {\n+            pagesRetainedSizeInBytes += page.getRetainedSizeInBytes();\n+            responseSize += page.getSizeInBytes();\n         }\n \n-        pageBuffer.addAll(pages);\n+        List<SettableFuture<?>> notify = ImmutableList.of();\n+        synchronized (this) {\n+            if (isClosed() || isFailed()) {\n+                return false;\n+            }\n \n-        if (!pages.isEmpty()) {\n-            // notify all blocked callers\n-            notifyBlockedCallers();\n-        }\n+            pageBuffer.addAll(pages);\n \n-        long pagesRetainedSizeInBytes = pages.stream()\n-                .mapToLong(SerializedPage::getRetainedSizeInBytes)\n-                .sum();\n+            bufferRetainedSizeInBytes += pagesRetainedSizeInBytes;\n+            maxBufferRetainedSizeInBytes = Math.max(maxBufferRetainedSizeInBytes, bufferRetainedSizeInBytes);\n+            systemMemoryContext.setBytes(bufferRetainedSizeInBytes);\n+            successfulRequests++;\n+            // AVG_n = AVG_(n-1) * (n-1)/n + VALUE_n / n\n+            averageBytesPerRequest = (long) (1.0 * averageBytesPerRequest * (successfulRequests - 1) / successfulRequests + responseSize / successfulRequests);\n \n-        bufferRetainedSizeInBytes += pagesRetainedSizeInBytes;\n-        maxBufferRetainedSizeInBytes = Math.max(maxBufferRetainedSizeInBytes, bufferRetainedSizeInBytes);\n-        systemMemoryContext.setBytes(bufferRetainedSizeInBytes);\n-        successfulRequests++;\n+            if (!pages.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIwODk4OA=="}, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE3MTEzNg==", "bodyText": "Reorganized the method to only call pageBuffer.addAll and update system memory when the pages list is not empty.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r555171136", "createdAt": "2021-01-11T16:21:02Z", "author": {"login": "pettyjamesm"}, "path": "core/trino-main/src/main/java/io/trino/operator/ExchangeClient.java", "diffHunk": "@@ -322,52 +323,73 @@ public synchronized void scheduleRequestIfNecessary()\n         }\n     }\n \n-    public synchronized ListenableFuture<?> isBlocked()\n+    public ListenableFuture<?> isBlocked()\n     {\n+        // Fast path pre-check\n         if (isClosed() || isFailed() || pageBuffer.peek() != null) {\n-            return Futures.immediateFuture(true);\n+            return NOT_BLOCKED;\n+        }\n+        synchronized (this) {\n+            // Recheck after acquiring the lock\n+            if (isClosed() || isFailed() || pageBuffer.peek() != null) {\n+                return NOT_BLOCKED;\n+            }\n+            SettableFuture<?> future = SettableFuture.create();\n+            blockedCallers.add(future);\n+            return future;\n         }\n-        SettableFuture<?> future = SettableFuture.create();\n-        blockedCallers.add(future);\n-        return future;\n     }\n \n-    private synchronized boolean addPages(List<SerializedPage> pages)\n+    private boolean addPages(List<SerializedPage> pages)\n     {\n-        if (isClosed() || isFailed()) {\n-            return false;\n+        // Compute stats before acquiring the lock\n+        long pagesRetainedSizeInBytes = 0;\n+        long responseSize = 0;\n+        for (SerializedPage page : pages) {\n+            pagesRetainedSizeInBytes += page.getRetainedSizeInBytes();\n+            responseSize += page.getSizeInBytes();\n         }\n \n-        pageBuffer.addAll(pages);\n+        List<SettableFuture<?>> notify = ImmutableList.of();\n+        synchronized (this) {\n+            if (isClosed() || isFailed()) {\n+                return false;\n+            }\n \n-        if (!pages.isEmpty()) {\n-            // notify all blocked callers\n-            notifyBlockedCallers();\n-        }\n+            pageBuffer.addAll(pages);\n \n-        long pagesRetainedSizeInBytes = pages.stream()\n-                .mapToLong(SerializedPage::getRetainedSizeInBytes)\n-                .sum();\n+            bufferRetainedSizeInBytes += pagesRetainedSizeInBytes;\n+            maxBufferRetainedSizeInBytes = Math.max(maxBufferRetainedSizeInBytes, bufferRetainedSizeInBytes);\n+            systemMemoryContext.setBytes(bufferRetainedSizeInBytes);\n+            successfulRequests++;\n+            // AVG_n = AVG_(n-1) * (n-1)/n + VALUE_n / n\n+            averageBytesPerRequest = (long) (1.0 * averageBytesPerRequest * (successfulRequests - 1) / successfulRequests + responseSize / successfulRequests);\n \n-        bufferRetainedSizeInBytes += pagesRetainedSizeInBytes;\n-        maxBufferRetainedSizeInBytes = Math.max(maxBufferRetainedSizeInBytes, bufferRetainedSizeInBytes);\n-        systemMemoryContext.setBytes(bufferRetainedSizeInBytes);\n-        successfulRequests++;\n+            if (!pages.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIwODk4OA=="}, "originalCommit": null, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4ODUzODUyOnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/exchange/LocalExchangeSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjo0MjoxNlrOIQjpRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMzo0MTozM1rOIQkrWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIzMjEzMg==", "bodyText": "Don't we already have a constant for this?", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r554232132", "createdAt": "2021-01-08T22:42:16Z", "author": {"login": "dain"}, "path": "core/trino-main/src/main/java/io/trino/operator/exchange/LocalExchangeSource.java", "diffHunk": "@@ -30,30 +31,24 @@\n import java.util.function.Consumer;\n \n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n public class LocalExchangeSource\n {\n-    private static final SettableFuture<?> NOT_EMPTY;\n-\n-    static {\n-        NOT_EMPTY = SettableFuture.create();\n-        NOT_EMPTY.set(null);\n-    }\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI0OTA0OQ==", "bodyText": "Under the hood it\u2019s already a static singleton (which is not publicly exported) so between adding a new static final reference to this class or statically importing that same constant  reference from, say, the Operator interface it seems more straightforward duplicate the constant reference here.", "url": "https://github.com/trinodb/trino/pull/6260#discussion_r554249049", "createdAt": "2021-01-08T23:41:33Z", "author": {"login": "pettyjamesm"}, "path": "core/trino-main/src/main/java/io/trino/operator/exchange/LocalExchangeSource.java", "diffHunk": "@@ -30,30 +31,24 @@\n import java.util.function.Consumer;\n \n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n import static java.util.Objects.requireNonNull;\n \n @ThreadSafe\n public class LocalExchangeSource\n {\n-    private static final SettableFuture<?> NOT_EMPTY;\n-\n-    static {\n-        NOT_EMPTY = SettableFuture.create();\n-        NOT_EMPTY.set(null);\n-    }\n+    private static final ListenableFuture<?> NOT_BLOCKED = immediateFuture(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIzMjEzMg=="}, "originalCommit": null, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4524, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}