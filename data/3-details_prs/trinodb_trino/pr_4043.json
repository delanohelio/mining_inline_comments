{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTEwMzU4", "number": 4043, "title": "Don't block while compacting table on Hive", "bodyText": "Due to https://issues.apache.org/jira/browse/HIVE-22554 blocking compaction will block for ~30 seconds even when the compaction finishes earlier. This change pools for compactions using Hive's SHOW COMPACTIONS to test whether compaction has finished.", "createdAt": "2020-06-16T10:06:53Z", "url": "https://github.com/trinodb/trino/pull/4043", "merged": true, "mergeCommit": {"oid": "ccf6968ef9ce5fe1aa782017e1b2583a7f8f0014"}, "closed": true, "closedAt": "2020-06-17T17:02:54Z", "author": {"login": "wendigo"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrylsXgFqTQzMTM1OTQ1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsHwVogBqjM0NTMwNDE2NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzU5NDUx", "url": "https://github.com/trinodb/trino/pull/4043#pullrequestreview-431359451", "createdAt": "2020-06-16T10:15:04Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxNTowNFrOGkUvSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxNzoyN1rOGkU0qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MTcwNQ==", "bodyText": "Are all columns returned by SHOW COMPACTIONS strings?", "url": "https://github.com/trinodb/trino/pull/4043#discussion_r440741705", "createdAt": "2020-06-16T10:15:04Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -166,4 +182,66 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n                 bucketingType.getHiveTableProperties().stream())\n                 .collect(joining(\",\", \"TBLPROPERTIES (\", \")\"));\n     }\n+\n+    private static void compactTableAndWait(CompactionMode compactMode, String tableName, Duration timeout)\n+    {\n+        onHive().executeQuery(format(\"ALTER TABLE %s COMPACT '%s'\", tableName, compactMode.name()));\n+\n+        Set<String> tableCompactionsIds = getTableCompactions(compactMode, tableName)\n+                .map(row -> row.get(\"compactionid\"))\n+                .collect(toUnmodifiableSet());\n+\n+        assertEventually(timeout, () -> {\n+            Set<String> completedCompactionsIds = getTableCompactions(compactMode, tableName)\n+                    .filter(row -> row.get(\"state\").equals(\"succeeded\"))\n+                    .map(row -> row.get(\"compactionid\"))\n+                    .collect(toUnmodifiableSet());\n+\n+            assertTrue(completedCompactionsIds.containsAll(tableCompactionsIds));\n+        });\n+    }\n+\n+    private static Stream<Map<String, String>> getTableCompactions(CompactionMode compactionMode, String tableName)\n+    {\n+        return Stream.of(onHive().executeQuery(\"SHOW COMPACTIONS\")).flatMap(TestHiveTransactionalTable::mapRows)\n+                .filter(row -> isTableCompaction(compactionMode, tableName, row));\n+    }\n+\n+    private static Stream<Map<String, String>> mapRows(QueryResult result)\n+    {\n+        if (result.getRowsCount() == 0) {\n+            return Stream.of();\n+        }\n+\n+        List<?> columnNames = result.row(0).stream()\n+                .filter(Objects::nonNull)\n+                .collect(toUnmodifiableList());\n+\n+        ImmutableList.Builder<Map<String, String>> rows = ImmutableList.builder();\n+        for (int rowIndex = 1; rowIndex < result.getRowsCount(); rowIndex++) {\n+            ImmutableMap.Builder<String, String> singleRow = ImmutableMap.builder();\n+            List<?> row = result.row(rowIndex);\n+\n+            for (int column = 0; column < columnNames.size(); column++) {\n+                String columnName = ((String) columnNames.get(column)).toLowerCase(ENGLISH);\n+                singleRow.put(columnName, (String) row.get(column));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MjQ4NA==", "bodyText": "name isCompactionForTable", "url": "https://github.com/trinodb/trino/pull/4043#discussion_r440742484", "createdAt": "2020-06-16T10:16:25Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -166,4 +182,66 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n                 bucketingType.getHiveTableProperties().stream())\n                 .collect(joining(\",\", \"TBLPROPERTIES (\", \")\"));\n     }\n+\n+    private static void compactTableAndWait(CompactionMode compactMode, String tableName, Duration timeout)\n+    {\n+        onHive().executeQuery(format(\"ALTER TABLE %s COMPACT '%s'\", tableName, compactMode.name()));\n+\n+        Set<String> tableCompactionsIds = getTableCompactions(compactMode, tableName)\n+                .map(row -> row.get(\"compactionid\"))\n+                .collect(toUnmodifiableSet());\n+\n+        assertEventually(timeout, () -> {\n+            Set<String> completedCompactionsIds = getTableCompactions(compactMode, tableName)\n+                    .filter(row -> row.get(\"state\").equals(\"succeeded\"))\n+                    .map(row -> row.get(\"compactionid\"))\n+                    .collect(toUnmodifiableSet());\n+\n+            assertTrue(completedCompactionsIds.containsAll(tableCompactionsIds));\n+        });\n+    }\n+\n+    private static Stream<Map<String, String>> getTableCompactions(CompactionMode compactionMode, String tableName)\n+    {\n+        return Stream.of(onHive().executeQuery(\"SHOW COMPACTIONS\")).flatMap(TestHiveTransactionalTable::mapRows)\n+                .filter(row -> isTableCompaction(compactionMode, tableName, row));\n+    }\n+\n+    private static Stream<Map<String, String>> mapRows(QueryResult result)\n+    {\n+        if (result.getRowsCount() == 0) {\n+            return Stream.of();\n+        }\n+\n+        List<?> columnNames = result.row(0).stream()\n+                .filter(Objects::nonNull)\n+                .collect(toUnmodifiableList());\n+\n+        ImmutableList.Builder<Map<String, String>> rows = ImmutableList.builder();\n+        for (int rowIndex = 1; rowIndex < result.getRowsCount(); rowIndex++) {\n+            ImmutableMap.Builder<String, String> singleRow = ImmutableMap.builder();\n+            List<?> row = result.row(rowIndex);\n+\n+            for (int column = 0; column < columnNames.size(); column++) {\n+                String columnName = ((String) columnNames.get(column)).toLowerCase(ENGLISH);\n+                singleRow.put(columnName, (String) row.get(column));\n+            }\n+\n+            rows.add(singleRow.build());\n+        }\n+\n+        return rows.build().stream();\n+    }\n+\n+    private static boolean isTableCompaction(CompactionMode compactMode, String tableName, Map<String, String> row)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MzA4MA==", "bodyText": "why 1?", "url": "https://github.com/trinodb/trino/pull/4043#discussion_r440743080", "createdAt": "2020-06-16T10:17:27Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -166,4 +182,66 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n                 bucketingType.getHiveTableProperties().stream())\n                 .collect(joining(\",\", \"TBLPROPERTIES (\", \")\"));\n     }\n+\n+    private static void compactTableAndWait(CompactionMode compactMode, String tableName, Duration timeout)\n+    {\n+        onHive().executeQuery(format(\"ALTER TABLE %s COMPACT '%s'\", tableName, compactMode.name()));\n+\n+        Set<String> tableCompactionsIds = getTableCompactions(compactMode, tableName)\n+                .map(row -> row.get(\"compactionid\"))\n+                .collect(toUnmodifiableSet());\n+\n+        assertEventually(timeout, () -> {\n+            Set<String> completedCompactionsIds = getTableCompactions(compactMode, tableName)\n+                    .filter(row -> row.get(\"state\").equals(\"succeeded\"))\n+                    .map(row -> row.get(\"compactionid\"))\n+                    .collect(toUnmodifiableSet());\n+\n+            assertTrue(completedCompactionsIds.containsAll(tableCompactionsIds));\n+        });\n+    }\n+\n+    private static Stream<Map<String, String>> getTableCompactions(CompactionMode compactionMode, String tableName)\n+    {\n+        return Stream.of(onHive().executeQuery(\"SHOW COMPACTIONS\")).flatMap(TestHiveTransactionalTable::mapRows)\n+                .filter(row -> isTableCompaction(compactionMode, tableName, row));\n+    }\n+\n+    private static Stream<Map<String, String>> mapRows(QueryResult result)\n+    {\n+        if (result.getRowsCount() == 0) {\n+            return Stream.of();\n+        }\n+\n+        List<?> columnNames = result.row(0).stream()\n+                .filter(Objects::nonNull)\n+                .collect(toUnmodifiableList());\n+\n+        ImmutableList.Builder<Map<String, String>> rows = ImmutableList.builder();\n+        for (int rowIndex = 1; rowIndex < result.getRowsCount(); rowIndex++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzY2Nzcz", "url": "https://github.com/trinodb/trino/pull/4043#pullrequestreview-431366773", "createdAt": "2020-06-16T10:25:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyNTo0MFrOGkVFyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyNTo0MFrOGkVFyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NzQ2Nw==", "bodyText": "Is it possible that tableCompactionIds obtained above will contain a compaction which is in final, but nosucceeded state (e.g. failed)? Then we will never satisfy the assertion.\nNot sure if that is something to worry about. Possibly you may additionally list compactionIds before ALTER TABLE is called. And then ignore those later in assertion. Would that work?", "url": "https://github.com/trinodb/trino/pull/4043#discussion_r440747467", "createdAt": "2020-06-16T10:25:40Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -166,4 +182,66 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n                 bucketingType.getHiveTableProperties().stream())\n                 .collect(joining(\",\", \"TBLPROPERTIES (\", \")\"));\n     }\n+\n+    private static void compactTableAndWait(CompactionMode compactMode, String tableName, Duration timeout)\n+    {\n+        onHive().executeQuery(format(\"ALTER TABLE %s COMPACT '%s'\", tableName, compactMode.name()));\n+\n+        Set<String> tableCompactionsIds = getTableCompactions(compactMode, tableName)\n+                .map(row -> row.get(\"compactionid\"))\n+                .collect(toUnmodifiableSet());\n+\n+        assertEventually(timeout, () -> {\n+            Set<String> completedCompactionsIds = getTableCompactions(compactMode, tableName)\n+                    .filter(row -> row.get(\"state\").equals(\"succeeded\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "53061a87af3a9b6e4265cb8032622b3d008c2bbe", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/53061a87af3a9b6e4265cb8032622b3d008c2bbe", "committedDate": "2020-06-16T18:21:58Z", "message": "Don't block while compacting table on Hive"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "53061a87af3a9b6e4265cb8032622b3d008c2bbe", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/53061a87af3a9b6e4265cb8032622b3d008c2bbe", "committedDate": "2020-06-16T18:21:58Z", "message": "Don't block while compacting table on Hive"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjg3NTY2", "url": "https://github.com/trinodb/trino/pull/4043#pullrequestreview-432287566", "createdAt": "2020-06-17T10:57:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDo1NzoxOVrOGlAnrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDo1NzoxOVrOGlAnrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2MDY1NQ==", "bodyText": "nit: I would rather wrap the assertion with getHiveVersionMajor() >= 0. Otherwise one can not notice the return in the middle of the test and add assertion at the end. Then it will not be executed for Hive <= 4.0.", "url": "https://github.com/trinodb/trino/pull/4043#discussion_r441460655", "createdAt": "2020-06-17T10:57:19Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -111,15 +126,21 @@ public void testReadInsertOnly(boolean isPartitioned, BucketingType bucketingTyp\n             assertThat(query(selectFromOnePartitionsSql)).containsExactly(row(1), row(2));\n \n             // test minor compacted data read\n-            onHive().executeQuery(\"ALTER TABLE \" + tableName + \" \" + hivePartitionString + \" COMPACT 'MINOR' AND WAIT\");\n+            compactTableAndWait(MINOR, tableName, hivePartitionString, Duration.valueOf(\"5m\"));\n             assertThat(query(selectFromOnePartitionsSql)).containsExactly(row(1), row(2));\n \n             onHive().executeQuery(\"INSERT OVERWRITE TABLE \" + tableName + hivePartitionString + \" SELECT 3\");\n             assertThat(query(selectFromOnePartitionsSql)).containsOnly(row(3));\n \n+            if (getHiveVersionMajor() < 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eaecb9ac9f63256a6fb7075048bd9eaa7b7dad5", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/3eaecb9ac9f63256a6fb7075048bd9eaa7b7dad5", "committedDate": "2020-06-17T11:00:41Z", "message": "Test MAJOR compaction on ACID insert-only tables on Hive >=4 only - HIVE-21280"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "3eaecb9ac9f63256a6fb7075048bd9eaa7b7dad5", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/3eaecb9ac9f63256a6fb7075048bd9eaa7b7dad5", "committedDate": "2020-06-17T11:00:41Z", "message": "Test MAJOR compaction on ACID insert-only tables on Hive >=4 only - HIVE-21280"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 382, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}