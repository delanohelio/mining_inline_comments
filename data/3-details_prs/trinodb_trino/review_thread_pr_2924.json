{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4OTYyNTM5", "number": 2924, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxMTo1OVrODiVucA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMzo1NFrODlWXmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM0MTI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxMTo1OVrOFth6sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODowMjozMFrOFuhUNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NTkzOA==", "bodyText": "@AfterClass(alwaysRun = true)", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383285938", "createdAt": "2020-02-24T14:11:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNDY2Mw==", "bodyText": "bump", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384324663", "createdAt": "2020-02-26T08:02:30Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NTkzOA=="}, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM0NDA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxMjo0M1rOFth8Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxMjo0M1rOFth8Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NjM3MQ==", "bodyText": "long", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383286371", "createdAt": "2020-02-24T14:12:43Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);\n+    }\n+\n+    private Call getProcedureInvocation(int id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM1MTUzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxNDo0N1rOFtiA0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxNDo0N1rOFtiA0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NzUwNQ==", "bodyText": "s/foo/procedure\nI would inline getTestProcedure()", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383287505", "createdAt": "2020-02-24T14:14:47Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);\n+    }\n+\n+    private Call getProcedureInvocation(int id)\n+    {\n+        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+    }\n+\n+    private MetadataManager createMetadataManager(TransactionManager transactionManager)\n+    {\n+        MetadataManager metadata = createTestMetadataManager(transactionManager, new FeaturesConfig());\n+        Procedure foo = getTestProcedure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM1MjIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxNTowMFrOFtiBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxNTowMFrOFtiBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NzYxOA==", "bodyText": "no need for this empty line", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383287618", "createdAt": "2020-02-24T14:15:00Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);\n+    }\n+\n+    private Call getProcedureInvocation(int id)\n+    {\n+        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+    }\n+\n+    private MetadataManager createMetadataManager(TransactionManager transactionManager)\n+    {\n+        MetadataManager metadata = createTestMetadataManager(transactionManager, new FeaturesConfig());\n+        Procedure foo = getTestProcedure();\n+        metadata.getProcedureRegistry().addProcedures(new CatalogName(\"test\"), ImmutableList.of(foo));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM1NTkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxNTo1MVrOFtiDRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxNTo1MVrOFtiDRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4ODEzNQ==", "bodyText": "s/foo/testing_procedure", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383288135", "createdAt": "2020-02-24T14:15:51Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);\n+    }\n+\n+    private Call getProcedureInvocation(int id)\n+    {\n+        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+    }\n+\n+    private MetadataManager createMetadataManager(TransactionManager transactionManager)\n+    {\n+        MetadataManager metadata = createTestMetadataManager(transactionManager, new FeaturesConfig());\n+        Procedure foo = getTestProcedure();\n+        metadata.getProcedureRegistry().addProcedures(new CatalogName(\"test\"), ImmutableList.of(foo));\n+\n+        return metadata;\n+    }\n+\n+    private TransactionManager createTransactionManager()\n+    {\n+        CatalogManager catalogManager = new CatalogManager();\n+        catalogManager.registerCatalog(createBogusTestingCatalog(\"test\"));\n+        return createTestTransactionManager(catalogManager);\n+    }\n+\n+    private Procedure getTestProcedure()\n+    {\n+        return new Procedure(\n+                \"test\",\n+                \"foo\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM3MDU0OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxOTo1MFrOFtiMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxOTo1MFrOFtiMCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MDM3Nw==", "bodyText": "no need for empty line here", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383290377", "createdAt": "2020-02-24T14:19:50Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CatalogSchemaProcedureName\n+{\n+    private final String catalogName;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM3MDg2OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxOTo1NFrOFtiMMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxOTo1NFrOFtiMMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MDQxOA==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383290418", "createdAt": "2020-02-24T14:19:54Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CatalogSchemaProcedureName", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM3MTM1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/SchemaProcedureName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyMDowM1rOFtiMcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyMDowM1rOFtiMcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MDQ4Mw==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383290483", "createdAt": "2020-02-24T14:20:03Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/SchemaProcedureName.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SchemaProcedureName", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTk5NTI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODowMjo1MlrOFuhUxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODowMjo1MlrOFuhUxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNDgwNQ==", "bodyText": "shutdownNow", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384324805", "createdAt": "2020-02-26T08:02:52Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTk5NzM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODowMzozOVrOFuhWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODowMzozOVrOFuhWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNTEzMg==", "bodyText": "should be static. but even better, should be created in @BeforeClass", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384325132", "createdAt": "2020-02-26T08:03:39Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTk5OTA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODowNDoxNlrOFuhXCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOTowNTo1NVrOFujQlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNTM4NQ==", "bodyText": "mark the test class as @Test(singleThreaded = true). Today you have 1 test method, but the approach taken won't allow concurrent test executions in the future", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384325385", "createdAt": "2020-02-26T08:04:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzNTU3OA==", "bodyText": "Why won't it work for concurrent executions? (apart from the fact that the set should be synchronized)", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384335578", "createdAt": "2020-02-26T08:28:49Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNTM4NQ=="}, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1NjUwMw==", "bodyText": "depends how you use the collections. If you make the threads single-threaded, they will be lot ismpler to reason about", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384356503", "createdAt": "2020-02-26T09:05:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNTM4NQ=="}, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAwNDIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODowNjoyMFrOFuhaNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOTowNjozNVrOFujR6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNjE5OA==", "bodyText": "Maybe test with more meaningful (aka \"more random\") number. 1 is more likely to come from a different place than eg 2382344352.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384326198", "createdAt": "2020-02-26T08:06:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzNzUxNQ==", "bodyText": "I am not entirely sure about that. Just how many times when prompted for file name you typed \"fadsf\" and it turned out that the file already exists. Ideally we could make a static global atomic counter for those numbers but that seems to be an overkill.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384337515", "createdAt": "2020-02-26T08:33:04Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNjE5OA=="}, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1Njg0MA==", "bodyText": "Ideally we could make a static global atomic counter for those numbers but that seems to be an overkill.\n\ni agree\n\nI am not entirely sure about that. Just how many times when prompted for file name you typed \"fadsf\" and it turned out that the file already exists.\n\nYes, but still better than \"a.out\"", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384356840", "createdAt": "2020-02-26T09:06:35Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNjE5OA=="}, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAxMzk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMDoyNlrOFuhgaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyMjoyNVrOFul6Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNzc4Nw==", "bodyText": "if you make the tests singlethreaded, you can clear invocations in @BeforeMethod and here assert it's empty", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384327787", "createdAt": "2020-02-26T08:10:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MTk3NA==", "bodyText": "I think the whole point is that tests should be multi-threaded if possible.I", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384341974", "createdAt": "2020-02-26T08:42:36Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNzc4Nw=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1NzMyNw==", "bodyText": "Yes, unless it makes it harder to work with them. So my rule of thumb is: if there is shared mutable state => single threaded. Multithreaded otherwise.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384357327", "createdAt": "2020-02-26T09:07:34Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNzc4Nw=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2MTI1Mw==", "bodyText": "It was actually made single threaded at first but did not pass the review because of that. Since I do not want to start a flame war of any kind I will just add the atomic test counter a close this discussion.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384361253", "createdAt": "2020-02-26T09:14:58Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNzc4Nw=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3OTE0Mw==", "bodyText": "@skrzypo987 it won't make tests better (solid, readable) than single threaded. I didn't find the prev review comment about this. With whom should i discuss my point of view?", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384379143", "createdAt": "2020-02-26T09:46:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNzc4Nw=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5OTk2Mg==", "bodyText": "I really do not want to start a philosophical discussion now. It is a proper unit test that runs fast so multiple threads will not benefit us even if new tests are added. Let it be your way.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384399962", "createdAt": "2020-02-26T10:22:25Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNzc4Nw=="}, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAxNTU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMTowMlrOFuhhaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMTowMlrOFuhhaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODA0MA==", "bodyText": "Belongs to previous commit", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328040", "createdAt": "2020-02-26T08:11:02Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -97,19 +123,10 @@ private TransactionManager createTransactionManager()\n         return createTestTransactionManager(catalogManager);\n     }\n \n-    private Procedure getTestProcedure()\n-    {\n-        return new Procedure(\n-                \"test\",\n-                \"foo\",\n-                ImmutableList.of(new Procedure.Argument(\"id\", BigintType.BIGINT)),\n-                methodHandle(TestCallTask.class, \"testingMethod\", Long.class));\n-    }\n-\n     private QueryStateMachine stateMachine(TransactionManager transactionManager, MetadataManager metadata, AccessControl accessControl)\n     {\n         return QueryStateMachine.begin(\n-                \"CALL foo()\",\n+                \"CALL testing_procedure()\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAxNjI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMToyMFrOFuhh3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMToyMFrOFuhh3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODE1OQ==", "bodyText": "Belongs to previous commit", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328159", "createdAt": "2020-02-26T08:11:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);\n+    }\n+\n+    private Call getProcedureInvocation(long id)\n     {\n-        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+        return new Call(QualifiedName.of(\"testing_procedure\"), ImmutableList.of(new CallArgument(new LongLiteral(Long.toString(id)))));\n     }\n \n     private MetadataManager createMetadataManager(TransactionManager transactionManager)\n     {\n         MetadataManager metadata = createTestMetadataManager(transactionManager, new FeaturesConfig());\n-        Procedure foo = getTestProcedure();\n-        metadata.getProcedureRegistry().addProcedures(new CatalogName(\"test\"), ImmutableList.of(foo));\n-\n+        Procedure procedure = new Procedure(\n+                \"test\",\n+                \"testing_procedure\",\n+                ImmutableList.of(new Procedure.Argument(\"id\", BigintType.BIGINT)),\n+                methodHandle(TestCallTask.class, \"testingMethod\", Long.class));\n+        metadata.getProcedureRegistry().addProcedures(new CatalogName(\"test\"), ImmutableList.of(procedure));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAxNjUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMToyNlrOFuhiCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMToyNlrOFuhiCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODIwMw==", "bodyText": "Belongs to previous commit", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328203", "createdAt": "2020-02-26T08:11:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);\n+    }\n+\n+    private Call getProcedureInvocation(long id)\n     {\n-        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+        return new Call(QualifiedName.of(\"testing_procedure\"), ImmutableList.of(new CallArgument(new LongLiteral(Long.toString(id)))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAxNzkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMTo1NVrOFuhi3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMTo1NVrOFuhi3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODQxMw==", "bodyText": "You can use generic DenyAll since you're going to verify the exception message anyway", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328413", "createdAt": "2020-02-26T08:11:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -135,4 +152,14 @@ public static void testingMethod(Long id)\n     {\n         invocations.add(id);\n     }\n+\n+    private static class DenyProcedureAccessControl", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAxODQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMjoxM1rOFuhjOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMjoxM1rOFuhjOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODUwNQ==", "bodyText": "verify message (with equality rather than pattern matching)", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328505", "createdAt": "2020-02-26T08:12:13Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAyMjgzOnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMzozOFrOFuhlwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMzozOFrOFuhlwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTE1NA==", "bodyText": "// TODO implement and let's do this as a followup", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384329154", "createdAt": "2020-02-26T08:13:38Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -317,6 +318,11 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAyMzg1OnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxNDowNlrOFuhmag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxNDowNlrOFuhmag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTMyMg==", "bodyText": "// TODO implement", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384329322", "createdAt": "2020-02-26T08:14:06Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -520,4 +521,9 @@ public void checkCanRevokeTablePrivilege(SystemSecurityContext context, Privileg\n     public void checkCanShowRoles(SystemSecurityContext context, String catalogName)\n     {\n     }\n+\n+    @Override\n+    public void checkCanExecuteProcedure(SystemSecurityContext systemSecurityContext, CatalogSchemaProcedureName procedure)\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAyNTM3OnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/ReadOnlyAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxNDo1MFrOFuhnfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxNDo1MFrOFuhnfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTU5OQ==", "bodyText": "it should deny", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384329599", "createdAt": "2020-02-26T08:14:50Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/ReadOnlyAccessControl.java", "diffHunk": "@@ -194,4 +195,10 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n         // allow\n     }\n+\n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        // allow", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDAyNjc4OnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/ReadOnlySystemAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxNToyNFrOFuhoaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxNToyNFrOFuhoaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTgzNQ==", "bodyText": "it should deny; procedures are purely side-effect invocations, so arguably none is read-only operation", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384329835", "createdAt": "2020-02-26T08:15:24Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/ReadOnlySystemAccessControl.java", "diffHunk": "@@ -143,4 +144,9 @@ public void checkCanShowSchemas(SystemSecurityContext context, String catalogNam\n     public void checkCanShowRoles(SystemSecurityContext context, String catalogName)\n     {\n     }\n+\n+    @Override\n+    public void checkCanExecuteProcedure(SystemSecurityContext systemSecurityContext, CatalogSchemaProcedureName procedure)\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ5MTQ4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyNzowN1rOFumEeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyNzowN1rOFumEeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwMjU1NA==", "bodyText": "`private", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384402554", "createdAt": "2020-02-26T10:27:07Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Test(singleThreaded = true)\n+public class TestCallTask\n+{\n+    private static ExecutorService executor;\n+\n+    public static boolean invoked;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ5MzkzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyNzo0OVrOFumGDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyNzo0OVrOFumGDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwMjk1Ng==", "bodyText": "Adding missing test for CallTask\n\nIn the commit message i'd remove \"missing\".\nGenerally whenever you add a test it was previously missing.\nAlso, change Adding -> Add (per our guidelines https://chris.beams.io/posts/git-commit/)", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384402956", "createdAt": "2020-02-26T10:27:49Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDUxNDQ5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDozMzozOFrOFumS3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDozMzozOFrOFumS3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwNjIzOQ==", "bodyText": "make this // TODO implement as well", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384406239", "createdAt": "2020-02-26T10:33:38Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -269,6 +270,11 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzMyMjA2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoyMzoyN1rOFvBMlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTowNDoxNFrOFvmduQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0Njk5OQ==", "bodyText": "The todo isn't needed. The LegacyAccessControl is designed to be backwards compatible with the original Presto Hive security system, and therefore we should I don't think we should be implementing this here.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384846999", "createdAt": "2020-02-27T00:23:27Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -269,6 +270,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NDYwNQ==", "bodyText": "From backwards compaitbility perspective... procedures didn't really exist until recently. We opened some problem by adding them and we should somehow fix it.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r385364605", "createdAt": "2020-02-27T20:52:37Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -269,6 +270,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0Njk5OQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NzU5Mw==", "bodyText": "I disagree.  The legacy security system should be removed.  I believe the first step it to change the default from legacy to something else... likely sql standard.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r385457593", "createdAt": "2020-02-28T01:04:14Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -269,6 +270,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0Njk5OQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzMzODE3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozMDo1M1rOFvBVyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDozMTo0N1rOFwB_tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTM1NA==", "bodyText": "I don't think this is right.  This would limit important table maintenance to only admins, and instead it should really be based on the procedure and the permissions the user has.  For example, I would expect anyone with DELETE permissions on a table to be able to execute unregister_partition.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384849354", "createdAt": "2020-02-27T00:30:53Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -390,6 +392,14 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        if (!isAdmin(context)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1Nzg3Ng==", "bodyText": "I think we need to allow the procedure itself to perform access control checks based on the object the action is performed on, since procedures are effectively connector-defined operations. We can do this by allowing the procedure to accept ConnectorAccessControl and ConnectorSecurityContext (just like ConnectorSession). The access control implementation would be a facade over the global access control (and thus would delegate to any system or connector access control applicable to the procedure's catalog).", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384857876", "createdAt": "2020-02-27T00:59:31Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -390,6 +392,14 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        if (!isAdmin(context)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTM1NA=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMzYxMg==", "bodyText": "I agree. Also we would need to check usage of external_location when. Hive connector is configured in a way it disallows to use that property.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384933612", "createdAt": "2020-02-27T06:25:15Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -390,6 +392,14 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        if (!isAdmin(context)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTM1NA=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwODY2MQ==", "bodyText": "For example, I would expect anyone with DELETE permissions on a table to be able to execute unregister_partition.\n\nThat could work. What checks should the register_partition procedure do?", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r385908661", "createdAt": "2020-02-28T20:31:47Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -390,6 +392,14 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        if (!isAdmin(context)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTM1NA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzM0MTQzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozMjozN1rOFvBXxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyNzozMlrOFwafAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTg2Mg==", "bodyText": "Use format to be consistent with the others", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384849862", "createdAt": "2020-02-27T00:32:37Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -396,6 +396,11 @@ public static void denySetRole(String role)\n         throw new AccessDeniedException(format(\"Cannot set role %s\", role));\n     }\n \n+    public static void denyExecuteProcedure(String procedureName)\n+    {\n+        throw new AccessDeniedException(\"Cannot invoke procedure \" + procedureName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMjkwMg==", "bodyText": "Maybe others should be fixed instead? Because: https://github.com/prestosql/presto#code-style\n\nConsider using String formatting ... Sometimes, if you only need to append something, consider using the + operator.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r386132902", "createdAt": "2020-03-01T19:17:33Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -396,6 +396,11 @@ public static void denySetRole(String role)\n         throw new AccessDeniedException(format(\"Cannot set role %s\", role));\n     }\n \n+    public static void denyExecuteProcedure(String procedureName)\n+    {\n+        throw new AccessDeniedException(\"Cannot invoke procedure \" + procedureName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTg2Mg=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjU3Nw==", "bodyText": "@dain wants all of these to use format", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r386136577", "createdAt": "2020-03-01T20:08:53Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -396,6 +396,11 @@ public static void denySetRole(String role)\n         throw new AccessDeniedException(format(\"Cannot set role %s\", role));\n     }\n \n+    public static void denyExecuteProcedure(String procedureName)\n+    {\n+        throw new AccessDeniedException(\"Cannot invoke procedure \" + procedureName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTg2Mg=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNDk5MA==", "bodyText": "Maybe we should have a wiki page about Code Style? README section is too small to cover everything.\nIf you agree, I can start one.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r386304990", "createdAt": "2020-03-02T10:18:08Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -396,6 +396,11 @@ public static void denySetRole(String role)\n         throw new AccessDeniedException(format(\"Cannot set role %s\", role));\n     }\n \n+    public static void denyExecuteProcedure(String procedureName)\n+    {\n+        throw new AccessDeniedException(\"Cannot invoke procedure \" + procedureName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTg2Mg=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwOTg4OA==", "bodyText": "I completely agree. Discussions about code style belong there, not in code-review.\nAlthough that specific example is quite clear for me. You can use both format or + in simple cases. This may be a simple case but format has been there already so it is the right choice here.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r386309888", "createdAt": "2020-03-02T10:27:32Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -396,6 +396,11 @@ public static void denySetRole(String role)\n         throw new AccessDeniedException(format(\"Cannot set role %s\", role));\n     }\n \n+    public static void denyExecuteProcedure(String procedureName)\n+    {\n+        throw new AccessDeniedException(\"Cannot invoke procedure \" + procedureName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTg2Mg=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzM0MjgzOnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozMzoxOFrOFvBYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDo1MToyN1rOFvgwWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDA3Mg==", "bodyText": "Remove this. I'm not sure it makes sense to implement this generically.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384850072", "createdAt": "2020-02-27T00:33:18Z", "author": {"login": "electrum"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -318,6 +319,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NDA1OA==", "bodyText": "i asked for this & asked for a follow-up too", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r385364058", "createdAt": "2020-02-27T20:51:27Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -318,6 +319,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDA3Mg=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzM0NTIzOnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozNDo0MVrOFvBaNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDo1MzozMFrOFvg0Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDQ4NQ==", "bodyText": "Instead please create an issue if you think this should be implemented, or just implement it.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384850485", "createdAt": "2020-02-27T00:34:41Z", "author": {"login": "dain"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -318,6 +319,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NTAyMw==", "bodyText": "i asked for this & asked for a follow-up too", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r385365023", "createdAt": "2020-02-27T20:53:30Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -318,6 +319,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDQ4NQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzM2MDI2OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo0Mjo1NFrOFvBjYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo1NTo1MFrOFvBy3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MjgzNQ==", "bodyText": "We should probably call this CatalogSchemaObjectName so that it's more generic. That way we can reuse it for functions. Same with SchemaObjectName.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384852835", "createdAt": "2020-02-27T00:42:54Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class CatalogSchemaProcedureName", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1Njc5Nw==", "bodyText": "Actually, I'm not sure if there are any other schema-scoped objects that would matter, so perhaps naming this CatalogSchemaRoutineName would suffice.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384856797", "createdAt": "2020-02-27T00:55:50Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class CatalogSchemaProcedureName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MjgzNQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDkwMzkyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/SchemaRoutineName.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMzo1NFrOFyMQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODozNDowN1rOFzDE5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MzgzNw==", "bodyText": "I don't think lowercasing is appropriate here.\nThis follows  SchemaTableName, but that is about to change\nSee https://github.com/prestosql/presto/pull/2350/files#diff-d86eb3d71bf172e6ebc672efd6346d4c\nLet's get this right from the start.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r388173837", "createdAt": "2020-03-05T09:33:54Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/SchemaRoutineName.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SchemaRoutineName\n+{\n+    private final String schemaName;\n+    private final String routineName;\n+\n+    public SchemaRoutineName(String schemaName, String routineName)\n+    {\n+        this.schemaName = requireNonNull(schemaName, \"schemaName is null\").toLowerCase(ENGLISH);\n+        this.routineName = requireNonNull(routineName, \"routineName is null\").toLowerCase(ENGLISH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2OTM1OQ==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r388269359", "createdAt": "2020-03-05T12:43:31Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/SchemaRoutineName.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SchemaRoutineName\n+{\n+    private final String schemaName;\n+    private final String routineName;\n+\n+    public SchemaRoutineName(String schemaName, String routineName)\n+    {\n+        this.schemaName = requireNonNull(schemaName, \"schemaName is null\").toLowerCase(ENGLISH);\n+        this.routineName = requireNonNull(routineName, \"routineName is null\").toLowerCase(ENGLISH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MzgzNw=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3MjEwMA==", "bodyText": "This change is wrong. We do resolution using lowercase name, but pass mixed case into the access check. So the user can bypass the check by using a mixed case name.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r389072100", "createdAt": "2020-03-06T18:34:07Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/SchemaRoutineName.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SchemaRoutineName\n+{\n+    private final String schemaName;\n+    private final String routineName;\n+\n+    public SchemaRoutineName(String schemaName, String routineName)\n+    {\n+        this.schemaName = requireNonNull(schemaName, \"schemaName is null\").toLowerCase(ENGLISH);\n+        this.routineName = requireNonNull(routineName, \"routineName is null\").toLowerCase(ENGLISH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MzgzNw=="}, "originalCommit": null, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 812, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}