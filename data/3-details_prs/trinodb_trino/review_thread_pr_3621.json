{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjQyNDE3", "number": 3621, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyMzowNVrOD5TRJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyMzowNVrOD5TRJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDExMTA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/OutputBufferMemoryManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODoyMzowNVrOGQfKfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODozMTo0MVrOGWb5iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MDk4OA==", "bodyText": "it's no longer atomic. Use accumulateAndGet instead, placing the check inside the method.\nlong currentBufferedBytes = bufferedBytes.accumulateAndGet(bytesAdded, OutputBufferMemoryManager::addNonNegative);", "url": "https://github.com/trinodb/trino/pull/3621#discussion_r419940988", "createdAt": "2020-05-05T08:23:05Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/OutputBufferMemoryManager.java", "diffHunk": "@@ -81,7 +81,11 @@ public synchronized void updateMemoryUsage(long bytesAdded)\n             return;\n         }\n \n-        long currentBufferedBytes = bufferedBytes.addAndGet(bytesAdded);\n+        long localBufferedBytes = bufferedBytes.get();\n+        long currentBufferedBytes = localBufferedBytes + bytesAdded;\n+        checkArgument(currentBufferedBytes >= 0, \"bufferedBytes (%s) plus delta (%s) would be negative\", localBufferedBytes, bytesAdded);\n+        bufferedBytes.set(currentBufferedBytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1NDE5MA==", "bodyText": "It doesn\u2019t need to be atomic. This is the only write and it is guarded by a lock. We use atomic for visibility, to allow reads without a lock.", "url": "https://github.com/trinodb/trino/pull/3621#discussion_r419954190", "createdAt": "2020-05-05T08:46:52Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/OutputBufferMemoryManager.java", "diffHunk": "@@ -81,7 +81,11 @@ public synchronized void updateMemoryUsage(long bytesAdded)\n             return;\n         }\n \n-        long currentBufferedBytes = bufferedBytes.addAndGet(bytesAdded);\n+        long localBufferedBytes = bufferedBytes.get();\n+        long currentBufferedBytes = localBufferedBytes + bytesAdded;\n+        checkArgument(currentBufferedBytes >= 0, \"bufferedBytes (%s) plus delta (%s) would be negative\", localBufferedBytes, bytesAdded);\n+        bufferedBytes.set(currentBufferedBytes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MDk4OA=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2MTQzNg==", "bodyText": "Thanks for checking.\nI think it could still be more readable my way, but up to you", "url": "https://github.com/trinodb/trino/pull/3621#discussion_r419961436", "createdAt": "2020-05-05T08:59:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/OutputBufferMemoryManager.java", "diffHunk": "@@ -81,7 +81,11 @@ public synchronized void updateMemoryUsage(long bytesAdded)\n             return;\n         }\n \n-        long currentBufferedBytes = bufferedBytes.addAndGet(bytesAdded);\n+        long localBufferedBytes = bufferedBytes.get();\n+        long currentBufferedBytes = localBufferedBytes + bytesAdded;\n+        checkArgument(currentBufferedBytes >= 0, \"bufferedBytes (%s) plus delta (%s) would be negative\", localBufferedBytes, bytesAdded);\n+        bufferedBytes.set(currentBufferedBytes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MDk4OA=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODk1Mw==", "bodyText": "Agreed. I switched to updateAndGet() with a lambda so that the error message was localized to the operation. Much nicer than what I had before. Thanks", "url": "https://github.com/trinodb/trino/pull/3621#discussion_r426178953", "createdAt": "2020-05-16T18:31:41Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/OutputBufferMemoryManager.java", "diffHunk": "@@ -81,7 +81,11 @@ public synchronized void updateMemoryUsage(long bytesAdded)\n             return;\n         }\n \n-        long currentBufferedBytes = bufferedBytes.addAndGet(bytesAdded);\n+        long localBufferedBytes = bufferedBytes.get();\n+        long currentBufferedBytes = localBufferedBytes + bytesAdded;\n+        checkArgument(currentBufferedBytes >= 0, \"bufferedBytes (%s) plus delta (%s) would be negative\", localBufferedBytes, bytesAdded);\n+        bufferedBytes.set(currentBufferedBytes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MDk4OA=="}, "originalCommit": null, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 26, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}