{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTQ4NzIx", "number": 4440, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyNToyNlrOEOpEAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0OToyNFrOEaIDdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzg4MjkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyNToyNlrOGx5yXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoyNDozNFrOGx7pIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDE5MQ==", "bodyText": "For the consistent naming convention, the variable name can be dynamicFiltersStats.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setDynamicFilterStats(DynamicFiltersStats dynamicFilterStats)\n          \n          \n            \n                public void setDynamicFilterStats(DynamicFiltersStats dynamicFiltersStats)", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r454980191", "createdAt": "2020-07-15T11:25:26Z", "author": {"login": "Lewuathe"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -655,6 +660,12 @@ public void setRoutines(List<RoutineInfo> routines)\n         this.routines.set(ImmutableList.copyOf(routines));\n     }\n \n+    public void setDynamicFilterStats(DynamicFiltersStats dynamicFilterStats)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxMDU5NQ==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r455010595", "createdAt": "2020-07-15T12:24:34Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -655,6 +660,12 @@ public void setRoutines(List<RoutineInfo> routines)\n         this.routines.set(ImmutableList.copyOf(routines));\n     }\n \n+    public void setDynamicFilterStats(DynamicFiltersStats dynamicFilterStats)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDE5MQ=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzg4MzY5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyNTo0MlrOGx5y4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoyNDo0MFrOGx7pZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDMyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    requireNonNull(dynamicFilterStats, \"dynamicFilterStats is null\");\n          \n          \n            \n                    requireNonNull(dynamicFiltersStats, \"dynamicFiltersStats is null\");", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r454980321", "createdAt": "2020-07-15T11:25:42Z", "author": {"login": "Lewuathe"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -655,6 +660,12 @@ public void setRoutines(List<RoutineInfo> routines)\n         this.routines.set(ImmutableList.copyOf(routines));\n     }\n \n+    public void setDynamicFilterStats(DynamicFiltersStats dynamicFilterStats)\n+    {\n+        requireNonNull(dynamicFilterStats, \"dynamicFilterStats is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxMDY2MQ==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r455010661", "createdAt": "2020-07-15T12:24:40Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -655,6 +660,12 @@ public void setRoutines(List<RoutineInfo> routines)\n         this.routines.set(ImmutableList.copyOf(routines));\n     }\n \n+    public void setDynamicFilterStats(DynamicFiltersStats dynamicFilterStats)\n+    {\n+        requireNonNull(dynamicFilterStats, \"dynamicFilterStats is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDMyMQ=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzkzMjgxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0MTowNlrOGx6Qew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjoyNTo0NFrOGx7r-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4Nzg5OQ==", "bodyText": "This synchronized scope may be a little broader than needed. If many queries using dynamic filtering run concurrently, this part to get the dynamic filtering stats can cause the long waiting.\nLooks like we may need to guard only dynamicFilterSummaries?", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r454987899", "createdAt": "2020-07-15T11:41:06Z", "author": {"login": "Lewuathe"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -156,6 +160,46 @@ void registerQuery(\n         }\n     }\n \n+    public synchronized DynamicFiltersStats getDynamicFilteringStats(QueryId queryId, ConnectorSession session)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxMTMyMQ==", "bodyText": "agreed, made changes to restrict guard to smaller scope", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r455011321", "createdAt": "2020-07-15T12:25:44Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -156,6 +160,46 @@ void registerQuery(\n         }\n     }\n \n+    public synchronized DynamicFiltersStats getDynamicFilteringStats(QueryId queryId, ConnectorSession session)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4Nzg5OQ=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTg0OTg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo0NDowOVrOG40rIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo0NDowOVrOG40rIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIzNjQ0OA==", "bodyText": "move it below routines", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462236448", "createdAt": "2020-07-29T11:44:09Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -157,6 +158,8 @@\n \n     private final WarningCollector warningCollector;\n \n+    private final AtomicReference<DynamicFiltersStats> dynamicFiltersStats = new AtomicReference<>(DynamicFiltersStats.EMPTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTg5NTE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1NzoyOFrOG41FuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1NzoyOFrOG41FuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzI1Ng==", "bodyText": "make it accept session as it's not obvious for which Connector session is required (we know it's irrelevant)", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462243256", "createdAt": "2020-07-29T11:57:28Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -156,6 +160,54 @@ void registerQuery(\n         }\n     }\n \n+    public DynamicFiltersStats getDynamicFilteringStats(QueryId queryId, ConnectorSession session)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTg5ODYyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1ODoyNVrOG41Hwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1ODoyNVrOG41Hwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0Mzc3OA==", "bodyText": "synchronization is not needed as we are not updating these data structures, change code to:\ndynamicFilterFutures = dynamicFilterSummaries.getOrDefault(queryId, ImmutableMap.of());\nnumRepartitionedFilters = queryRepartitionedDynamicFilters.getOrDefault(queryId, ImmutableSet.of()).size();\nnumReplicatedFilters = queryReplicatedDynamicFilters.get(queryId, ImmutableSet.of()).size();", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462243778", "createdAt": "2020-07-29T11:58:25Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -156,6 +160,54 @@ void registerQuery(\n         }\n     }\n \n+    public DynamicFiltersStats getDynamicFilteringStats(QueryId queryId, ConnectorSession session)\n+    {\n+        Map<DynamicFilterId, SettableFuture<Domain>> dynamicFilterFutures;\n+        int numRepartitionedFilters;\n+        int numReplicatedFilters;\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTk4ODgyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyNDowOFrOG419zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyNDowOFrOG419zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1NzYxNQ==", "bodyText": "please add also numTotalDynamicFilters", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462257615", "createdAt": "2020-07-29T12:24:08Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -360,4 +412,130 @@ private int getNumberOfTasks()\n             return taskDynamicFilters;\n         }\n     }\n+\n+    public static class DynamicFiltersStats\n+    {\n+        public static final DynamicFiltersStats EMPTY = new DynamicFiltersStats(ImmutableList.of(), 0, 0, 0);\n+\n+        private final List<DynamicFilterDomainStats> dynamicFilterDomainStats;\n+        private final int numRepartitionedDynamicFilters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTk5MzIxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyNToxNlrOG42ATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyNToxNlrOG42ATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1ODI1NA==", "bodyText": "this counter is not needed. It can be computed from builder.build().size()", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462258254", "createdAt": "2020-07-29T12:25:16Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -156,6 +160,54 @@ void registerQuery(\n         }\n     }\n \n+    public DynamicFiltersStats getDynamicFilteringStats(QueryId queryId, ConnectorSession session)\n+    {\n+        Map<DynamicFilterId, SettableFuture<Domain>> dynamicFilterFutures;\n+        int numRepartitionedFilters;\n+        int numReplicatedFilters;\n+        synchronized (this) {\n+            dynamicFilterFutures = dynamicFilterSummaries.get(queryId);\n+            if (dynamicFilterFutures == null) {\n+                // query is not registered yet\n+                return DynamicFiltersStats.EMPTY;\n+            }\n+\n+            numRepartitionedFilters = queryRepartitionedDynamicFilters.get(queryId).size();\n+            numReplicatedFilters = queryReplicatedDynamicFilters.get(queryId).size();\n+        }\n+\n+        int numDynamicFiltersCompleted = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjAwMjQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyNzo1NVrOG42F2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyNzo1NVrOG42F2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1OTY3NA==", "bodyText": "toString() for DiscreteValues and AllOrNone doesn't make sense.", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462259674", "createdAt": "2020-07-29T12:27:55Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -156,6 +160,54 @@ void registerQuery(\n         }\n     }\n \n+    public DynamicFiltersStats getDynamicFilteringStats(QueryId queryId, ConnectorSession session)\n+    {\n+        Map<DynamicFilterId, SettableFuture<Domain>> dynamicFilterFutures;\n+        int numRepartitionedFilters;\n+        int numReplicatedFilters;\n+        synchronized (this) {\n+            dynamicFilterFutures = dynamicFilterSummaries.get(queryId);\n+            if (dynamicFilterFutures == null) {\n+                // query is not registered yet\n+                return DynamicFiltersStats.EMPTY;\n+            }\n+\n+            numRepartitionedFilters = queryRepartitionedDynamicFilters.get(queryId).size();\n+            numReplicatedFilters = queryReplicatedDynamicFilters.get(queryId).size();\n+        }\n+\n+        int numDynamicFiltersCompleted = 0;\n+        ImmutableList.Builder<DynamicFilterDomainStats> builder = ImmutableList.builder();\n+        for (Map.Entry<DynamicFilterId, SettableFuture<Domain>> entry : dynamicFilterFutures.entrySet()) {\n+            DynamicFilterId dynamicFilterId = entry.getKey();\n+            SettableFuture<Domain> domainFuture = entry.getValue();\n+            if (domainFuture.isDone()) {\n+                numDynamicFiltersCompleted++;\n+                DynamicFilterDomainStats filterDomainStats = getDone(domainFuture).getValues()\n+                        .getValuesProcessor().transform(\n+                                ranges -> {\n+                                    String span;\n+                                    if (ranges.isNone()) {\n+                                        span = \"NONE\";\n+                                    }\n+                                    else {\n+                                        span = ranges.getSpan().toString(session);\n+                                    }\n+                                    return new DynamicFilterDomainStats(dynamicFilterId, span, ranges.getRangeCount());\n+                                },\n+                                discreteValues -> new DynamicFilterDomainStats(dynamicFilterId, discreteValues.toString(), discreteValues.getValuesCount()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjA2OTMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo0NjoyM1rOG42uRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo0NjoyM1rOG42uRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MDAyMQ==", "bodyText": "change it into streaming approach:\ndynamicFilterFutures.stream().\n  .filter(entry -> entry.getValue().isDone())\n  .map(entry -> {\n    DynamicFilterId dynamicFilterId = entry.getKey();\n    Domain domain = getDone(entry.getValue());\n    // simplify for readability\n    String simplifiedDomain = domain.simplify(1).toString(session.toConnectorSession());\n    int rangeCount = domain.getValuesProcessor().transform(\n      ranges -> ranges.getRangeCount(),\n      discreteValues -> 0,\n      allOrNone -> 0);\n    int discreteValuesCount = domain.getValuesProcessor().transform(\n      ranges -> 0,\n      discreteValues -> discreteValues.getValuesCount(),\n      allOrNone -> 0);\n    return new DynamicFilterDomainStats(dynamicFilterId, simplifiedDomain, rangeCount, discreteValuesCount);\n  }\n  .collect(toImmutableMap());", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462270021", "createdAt": "2020-07-29T12:46:23Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -156,6 +160,54 @@ void registerQuery(\n         }\n     }\n \n+    public DynamicFiltersStats getDynamicFilteringStats(QueryId queryId, ConnectorSession session)\n+    {\n+        Map<DynamicFilterId, SettableFuture<Domain>> dynamicFilterFutures;\n+        int numRepartitionedFilters;\n+        int numReplicatedFilters;\n+        synchronized (this) {\n+            dynamicFilterFutures = dynamicFilterSummaries.get(queryId);\n+            if (dynamicFilterFutures == null) {\n+                // query is not registered yet\n+                return DynamicFiltersStats.EMPTY;\n+            }\n+\n+            numRepartitionedFilters = queryRepartitionedDynamicFilters.get(queryId).size();\n+            numReplicatedFilters = queryReplicatedDynamicFilters.get(queryId).size();\n+        }\n+\n+        int numDynamicFiltersCompleted = 0;\n+        ImmutableList.Builder<DynamicFilterDomainStats> builder = ImmutableList.builder();\n+        for (Map.Entry<DynamicFilterId, SettableFuture<Domain>> entry : dynamicFilterFutures.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjA3OTIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo0ODo1NlrOG420OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo0ODo1NlrOG420OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MTU0NA==", "bodyText": "instead of span and numValues, let's have:\nString simplifiedDomain;\nint rangeCount;\nint discreteValuesCount;", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462271544", "createdAt": "2020-07-29T12:48:56Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -360,4 +412,130 @@ private int getNumberOfTasks()\n             return taskDynamicFilters;\n         }\n     }\n+\n+    public static class DynamicFiltersStats\n+    {\n+        public static final DynamicFiltersStats EMPTY = new DynamicFiltersStats(ImmutableList.of(), 0, 0, 0);\n+\n+        private final List<DynamicFilterDomainStats> dynamicFilterDomainStats;\n+        private final int numRepartitionedDynamicFilters;\n+        private final int numReplicatedDynamicFilters;\n+        private final int numDynamicFiltersCompleted;\n+\n+        @JsonCreator\n+        public DynamicFiltersStats(\n+                @JsonProperty(\"dynamicFilterDomainStats\") List<DynamicFilterDomainStats> dynamicFilterDomainStats,\n+                @JsonProperty(\"numRepartitionedDynamicFilters\") int numRepartitionedDynamicFilters,\n+                @JsonProperty(\"numReplicatedDynamicFilters\") int numReplicatedDynamicFilters,\n+                @JsonProperty(\"numDynamicFiltersCompleted\") int numDynamicFiltersCompleted)\n+        {\n+            this.dynamicFilterDomainStats = dynamicFilterDomainStats;\n+            this.numRepartitionedDynamicFilters = numRepartitionedDynamicFilters;\n+            this.numReplicatedDynamicFilters = numReplicatedDynamicFilters;\n+            this.numDynamicFiltersCompleted = numDynamicFiltersCompleted;\n+        }\n+\n+        @JsonProperty\n+        public List<DynamicFilterDomainStats> getDynamicFilterDomainStats()\n+        {\n+            return dynamicFilterDomainStats;\n+        }\n+\n+        @JsonProperty\n+        public int getNumRepartitionedDynamicFilters()\n+        {\n+            return numRepartitionedDynamicFilters;\n+        }\n+\n+        @JsonProperty\n+        public int getNumReplicatedDynamicFilters()\n+        {\n+            return numReplicatedDynamicFilters;\n+        }\n+\n+        @JsonProperty\n+        public int getNumDynamicFiltersCompleted()\n+        {\n+            return numDynamicFiltersCompleted;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o)\n+        {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (o == null || getClass() != o.getClass()) {\n+                return false;\n+            }\n+            DynamicFiltersStats that = (DynamicFiltersStats) o;\n+            return numRepartitionedDynamicFilters == that.numRepartitionedDynamicFilters &&\n+                    numReplicatedDynamicFilters == that.numReplicatedDynamicFilters &&\n+                    numDynamicFiltersCompleted == that.numDynamicFiltersCompleted &&\n+                    Objects.equals(dynamicFilterDomainStats, that.dynamicFilterDomainStats);\n+        }\n+\n+        @Override\n+        public int hashCode()\n+        {\n+            return Objects.hash(dynamicFilterDomainStats, numRepartitionedDynamicFilters, numReplicatedDynamicFilters, numDynamicFiltersCompleted);\n+        }\n+    }\n+\n+    public static class DynamicFilterDomainStats\n+    {\n+        private final DynamicFilterId dynamicFilterId;\n+        private final String span;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjA4NTE0OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/SortedRangeSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo1MDoxNlrOG423xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo1MDoxNlrOG423xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MjQ1NQ==", "bodyText": "undo", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462272455", "createdAt": "2020-07-29T12:50:16Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/SortedRangeSet.java", "diffHunk": "@@ -227,6 +227,12 @@ public Range getSpan()\n             {\n                 return SortedRangeSet.this.getSpan();\n             }\n+\n+            @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjA4NjA4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/Ranges.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo1MDozMFrOG424Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo1MDozMFrOG424Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MjU5OA==", "bodyText": "undo, not needed", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r462272598", "createdAt": "2020-07-29T12:50:30Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/predicate/Ranges.java", "diffHunk": "@@ -28,4 +28,6 @@\n      * @return Single range encompassing all of allowed the ranges\n      */\n     Range getSpan();\n+\n+    boolean isNone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTU3MzUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzoyOToxOFrOHCUoHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzoyOToxOFrOHCUoHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE5NzE0OA==", "bodyText": "use final AtomicReference<DynamicFiltersStats> dynamicFiltersStatsSupplier instead.", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472197148", "createdAt": "2020-08-18T13:29:18Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -154,6 +156,7 @@\n     private final AtomicReference<Optional<Output>> output = new AtomicReference<>(Optional.empty());\n     private final AtomicReference<List<TableInfo>> referencedTables = new AtomicReference<>(ImmutableList.of());\n     private final AtomicReference<List<RoutineInfo>> routines = new AtomicReference<>(ImmutableList.of());\n+    private Supplier<DynamicFiltersStats> dynamicFiltersStatsProvider = () -> DynamicFiltersStats.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTU4NTMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzozMTo1MVrOHCUvUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0MTowNlrOHDWa5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE5ODk5Mw==", "bodyText": "remote this method and inline dynamicFiltersStatsProvider.get()", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472198993", "createdAt": "2020-08-18T13:31:51Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -666,6 +671,17 @@ public void setRoutines(List<RoutineInfo> routines)\n         this.routines.set(ImmutableList.copyOf(routines));\n     }\n \n+    private synchronized DynamicFiltersStats getDynamicFiltersStats()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExNDM1Nw==", "bodyText": "I avoided AtomicReference<Supplier<DynamicFiltersStats>> because I think there is a potential for race condition with that. Example\nIn getQueryStats, we get reference to the non-final df stats supplier, but the get on supplier isn't executed yet.\nQuery finishes, unregisterDynamicFilteringQuery is called, final df stats supplier is set and dynamicFilterService.removeQuery runs.\nNow we continue with execution of getQueryStats, we still have reference to old supplier and calling get on it will give empty stats now as the dynamic filter service has cleaned up its maps.", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r473114357", "createdAt": "2020-08-19T15:24:13Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -666,6 +671,17 @@ public void setRoutines(List<RoutineInfo> routines)\n         this.routines.set(ImmutableList.copyOf(routines));\n     }\n \n+    private synchronized DynamicFiltersStats getDynamicFiltersStats()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE5ODk5Mw=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTEwOQ==", "bodyText": "that makes sense, thanks", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r473275109", "createdAt": "2020-08-19T19:41:06Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -666,6 +671,17 @@ public void setRoutines(List<RoutineInfo> routines)\n         this.routines.set(ImmutableList.copyOf(routines));\n     }\n \n+    private synchronized DynamicFiltersStats getDynamicFiltersStats()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE5ODk5Mw=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTU4NzM2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzozMjoyM1rOHCUwrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzozMjoyM1rOHCUwrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE5OTM0Mw==", "bodyText": "you can use:\nthis.dynamicFiltersStatsProvider = requireNonNull(dynamicFiltersStats, \"dynamicFiltersStats is null\");", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472199343", "createdAt": "2020-08-18T13:32:23Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -666,6 +671,17 @@ public void setRoutines(List<RoutineInfo> routines)\n         this.routines.set(ImmutableList.copyOf(routines));\n     }\n \n+    private synchronized DynamicFiltersStats getDynamicFiltersStats()\n+    {\n+        return dynamicFiltersStatsProvider.get();\n+    }\n+\n+    public synchronized void setDynamicFiltersStatsProvider(Supplier<DynamicFiltersStats> dynamicFiltersStats)\n+    {\n+        requireNonNull(dynamicFiltersStats, \"dynamicFiltersStats is null\");\n+        this.dynamicFiltersStatsProvider = dynamicFiltersStats;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTU4ODE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzozMjozOFrOHCUxQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzozMjozOFrOHCUxQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE5OTQ4OQ==", "bodyText": "rename dynamicFiltersStats to dynamicFiltersStatsSupplier", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472199489", "createdAt": "2020-08-18T13:32:38Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -666,6 +671,17 @@ public void setRoutines(List<RoutineInfo> routines)\n         this.routines.set(ImmutableList.copyOf(routines));\n     }\n \n+    private synchronized DynamicFiltersStats getDynamicFiltersStats()\n+    {\n+        return dynamicFiltersStatsProvider.get();\n+    }\n+\n+    public synchronized void setDynamicFiltersStatsProvider(Supplier<DynamicFiltersStats> dynamicFiltersStats)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTY5NjA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/SqlQueryExecution.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzo1Njo0N1rOHCV05w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzo1Njo0N1rOHCV05w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIxNjgwNw==", "bodyText": "move dynamicFilterService.getDynamicFilteringStats outside of synchronized section, e.g you could pass finalDynamicFiltersStats as unregisterDynamicFilteringQuery argument", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472216807", "createdAt": "2020-08-18T13:56:47Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlQueryExecution.java", "diffHunk": "@@ -211,14 +212,21 @@ private synchronized void registerDynamicFilteringQuery()\n         }\n \n         dynamicFilterService.registerQuery(this);\n+        stateMachine.setDynamicFiltersStatsProvider(\n+                () -> dynamicFilterService.getDynamicFilteringStats(\n+                        stateMachine.getQueryId(),\n+                        stateMachine.getSession()));\n     }\n \n     private synchronized void unregisterDynamicFilteringQuery()\n     {\n         if (!isDone()) {\n             return;\n         }\n-\n+        DynamicFiltersStats finalDynamicFiltersStats = dynamicFilterService.getDynamicFilteringStats(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTczOTM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowNjoxNVrOHCWP4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowNjoxNVrOHCWP4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyMzcxNA==", "bodyText": "please also assert re-partitioned and replicated DF count after first getDynamicFilteringStats call", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472223714", "createdAt": "2020-08-18T14:06:15Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -93,6 +111,15 @@ public void testDynamicFilterSummaryCompletion()\n         assertEquals(summary.get(), multipleValues(INTEGER, ImmutableList.of(1L, 2L, 3L)));\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 3);\n \n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getNumDynamicFiltersCompleted(), 1);\n+        assertEquals(stats.getNumRepartitionedDynamicFilters(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTc0ODk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowODoyNVrOHCWVuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowODoyNVrOHCWVuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyNTIwOA==", "bodyText": "please also assert getNumRepartitionedDynamicFilters and getNumReplicatedDynamicFilters after first getDynamicFilteringStats call", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472225208", "createdAt": "2020-08-18T14:08:25Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -247,6 +285,18 @@ public void testDynamicFilter()\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 6);\n         assertTrue(blockedFuture.isDone());\n \n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getNumDynamicFiltersCompleted(), 3);\n+        assertEquals(stats.getNumRepartitionedDynamicFilters(), 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTc2MTUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxMToxNVrOHCWdow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxMToxNVrOHCWdow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyNzIzNQ==", "bodyText": "please also add assertion before DF is completed", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472227235", "createdAt": "2020-08-18T14:11:15Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -296,12 +346,33 @@ public void testReplicatedDynamicFilter()\n                 singleValue(INTEGER, 1L))));\n         assertTrue(dynamicFilter.isComplete());\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n+        DynamicFiltersStats stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTc2NzA2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxMjozMFrOHCWhMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxMjozMFrOHCWhMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyODE0Nw==", "bodyText": "use SortedRangeSet.of(...) instead", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472228147", "createdAt": "2020-08-18T14:12:30Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -296,12 +346,33 @@ public void testReplicatedDynamicFilter()\n                 singleValue(INTEGER, 1L))));\n         assertTrue(dynamicFilter.isComplete());\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n+        DynamicFiltersStats stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getNumTotalDynamicFilters(), 1);\n+        assertEquals(stats.getNumDynamicFiltersCompleted(), 1);\n+        assertEquals(stats.getNumReplicatedDynamicFilters(), 1);\n+        assertEquals(stats.getNumRepartitionedDynamicFilters(), 0);\n+        assertEquals(\n+                stats.getDynamicFilterDomainStats(),\n+                ImmutableList.of(new DynamicFilterDomainStats(filterId1, Domain.create(\n+                        SortedRangeSet.copyOf(INTEGER, ImmutableList.of(equal(INTEGER, 1L))),\n+                        false)\n+                        .toString(session.toConnectorSession()), 1, 0)));\n \n         // all dynamic filters have been collected, no need for more requests\n         dynamicFilterService.collectDynamicFilters();\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n     }\n \n+    private static String getExpectedDomainString(Type type, Object low, Object high)\n+    {\n+        return Domain.create(\n+                SortedRangeSet.copyOf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTc3MDM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxMzowNVrOHCWjMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxMzowNVrOHCWjMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyODY1Nw==", "bodyText": "undo", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472228657", "createdAt": "2020-08-18T14:13:05Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -317,8 +388,7 @@ public void testReplicatedDynamicFilter()\n \n         void addTasks(List<TaskId> taskIds)\n         {\n-            taskIds.stream()\n-                    .forEach(taskId -> stageDynamicFilters\n+            taskIds.forEach(taskId -> stageDynamicFilters", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTc3NjE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxNDoxOFrOHCWmxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxNDoxOFrOHCWmxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyOTU3NA==", "bodyText": "type is always INTEGER, no need to pass it as arg. You can actually change signature to:\nString getExpectedDomainString(int low, int high)", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472229574", "createdAt": "2020-08-18T14:14:18Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -296,12 +346,33 @@ public void testReplicatedDynamicFilter()\n                 singleValue(INTEGER, 1L))));\n         assertTrue(dynamicFilter.isComplete());\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n+        DynamicFiltersStats stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getNumTotalDynamicFilters(), 1);\n+        assertEquals(stats.getNumDynamicFiltersCompleted(), 1);\n+        assertEquals(stats.getNumReplicatedDynamicFilters(), 1);\n+        assertEquals(stats.getNumRepartitionedDynamicFilters(), 0);\n+        assertEquals(\n+                stats.getDynamicFilterDomainStats(),\n+                ImmutableList.of(new DynamicFilterDomainStats(filterId1, Domain.create(\n+                        SortedRangeSet.copyOf(INTEGER, ImmutableList.of(equal(INTEGER, 1L))),\n+                        false)\n+                        .toString(session.toConnectorSession()), 1, 0)));\n \n         // all dynamic filters have been collected, no need for more requests\n         dynamicFilterService.collectDynamicFilters();\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n     }\n \n+    private static String getExpectedDomainString(Type type, Object low, Object high)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTc4MjQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxNTozMVrOHCWqgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxNTozMVrOHCWqgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzMDUyOQ==", "bodyText": "put filterId1, Domain.create args in newlines,\nuse SortedRangeSet.of instead", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r472230529", "createdAt": "2020-08-18T14:15:31Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -296,12 +346,33 @@ public void testReplicatedDynamicFilter()\n                 singleValue(INTEGER, 1L))));\n         assertTrue(dynamicFilter.isComplete());\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n+        DynamicFiltersStats stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getNumTotalDynamicFilters(), 1);\n+        assertEquals(stats.getNumDynamicFiltersCompleted(), 1);\n+        assertEquals(stats.getNumReplicatedDynamicFilters(), 1);\n+        assertEquals(stats.getNumRepartitionedDynamicFilters(), 0);\n+        assertEquals(\n+                stats.getDynamicFilterDomainStats(),\n+                ImmutableList.of(new DynamicFilterDomainStats(filterId1, Domain.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODMwMzkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0OToyNFrOHDWrXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo1NToyNFrOHDW4AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTMyNQ==", "bodyText": "add\n@GuardedBy(\"dynamicFiltersStatsSupplierLock\")\nprivate Supplier<DynamicFiltersStats> dynamicFiltersStatsSupplier = () -> DynamicFiltersStats.EMPTY;\nprivate final Object dynamicFiltersStatsSupplierLock = new Object();\n\nand make methods:\nprivate DynamicFiltersStats getDynamicFiltersStats() {\n  synchronized(dynamicFiltersStatsSupplierLock) {\n    return dynamicFiltersStatsSupplier.get();\n  }\n}\n\npublic void setDynamicFiltersStatsSupplier(Supplier<DynamicFiltersStats> dynamicFiltersStatsSupplier)\n{\n  synchronized(dynamicFiltersStatsSupplierLock) {\n    this.dynamicFiltersStatsSupplier = requireNonNull(dynamicFiltersStatsSupplier, \"dynamicFiltersStatsSupplier is null\");\n  }\n}", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r473279325", "createdAt": "2020-08-19T19:49:24Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -154,6 +156,7 @@\n     private final AtomicReference<Optional<Output>> output = new AtomicReference<>(Optional.empty());\n     private final AtomicReference<List<TableInfo>> referencedTables = new AtomicReference<>(ImmutableList.of());\n     private final AtomicReference<List<RoutineInfo>> routines = new AtomicReference<>(ImmutableList.of());\n+    private Supplier<DynamicFiltersStats> dynamicFiltersStatsSupplier = () -> DynamicFiltersStats.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MjU2MA==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/4440#discussion_r473282560", "createdAt": "2020-08-19T19:55:24Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -154,6 +156,7 @@\n     private final AtomicReference<Optional<Output>> output = new AtomicReference<>(Optional.empty());\n     private final AtomicReference<List<TableInfo>> referencedTables = new AtomicReference<>(ImmutableList.of());\n     private final AtomicReference<List<RoutineInfo>> routines = new AtomicReference<>(ImmutableList.of());\n+    private Supplier<DynamicFiltersStats> dynamicFiltersStatsSupplier = () -> DynamicFiltersStats.EMPTY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTMyNQ=="}, "originalCommit": null, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3896, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}