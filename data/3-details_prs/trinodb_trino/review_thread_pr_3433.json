{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDUyMzIw", "number": 3433, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1NDowM1rOD4e26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToxMTo1NVrOD4fGaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTUyNDI0OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1NDowM1rOGPVd-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1NDowM1rOGPVd-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMzU2MA==", "bodyText": "Consider making this non-static with delegation to isSecure, as that keeps the method invocations simpler.", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418733560", "createdAt": "2020-05-01T20:54:03Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -328,14 +336,9 @@ static String getRedirectLocation(HttpServletRequest request, String path, Strin\n         return builder.toString();\n     }\n \n-    private static boolean isHttps(HttpServletRequest request)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU0MDYxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/WebUiAuthenticationModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowMTozNlrOGPVoqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowMDoyNVrOGSOKMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNjI5Ng==", "bodyText": "Why take the first one? What if none of them match a web UI authenticator type?", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418736296", "createdAt": "2020-05-01T21:01:36Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/WebUiAuthenticationModule.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import io.airlift.configuration.AbstractConfigurationAwareModule;\n+import io.prestosql.server.security.SecurityConfig;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.configuration.ConfigBinder.configBinder;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class WebUiAuthenticationModule\n+        extends AbstractConfigurationAwareModule\n+{\n+    @Override\n+    protected void setup(Binder binder)\n+    {\n+        configBinder(binder).bindConfig(WebUiAuthenticationConfig.class);\n+\n+        installWebUiAuthenticator(\"form\", new FormUiAuthenticatorModule());\n+    }\n+\n+    private void installWebUiAuthenticator(String type, Module module)\n+    {\n+        install(webUiAuthenticator(type, module));\n+    }\n+\n+    public static Module webUiAuthenticator(String type, Module module)\n+    {\n+        return new ConditionalWebUiAuthenticationModule(type, module);\n+    }\n+\n+    private static class ConditionalWebUiAuthenticationModule\n+            extends AbstractConfigurationAwareModule\n+    {\n+        private final String type;\n+        private final Module module;\n+\n+        public ConditionalWebUiAuthenticationModule(String type, Module module)\n+        {\n+            this.type = requireNonNull(type, \"type is null\");\n+            this.module = requireNonNull(module, \"module is null\");\n+        }\n+\n+        @Override\n+        protected void setup(Binder binder)\n+        {\n+            if (type.equals(getAuthenticationType())) {\n+                install(module);\n+            }\n+        }\n+\n+        private String getAuthenticationType()\n+        {\n+            String authentication = buildConfigObject(WebUiAuthenticationConfig.class).getAuthentication();\n+            if (authentication != null) {\n+                return authentication;\n+            }\n+\n+            List<String> authenticationTypes = buildConfigObject(SecurityConfig.class).getAuthenticationTypes().stream()\n+                    .map(type -> type.toLowerCase(ENGLISH))\n+                    .collect(toImmutableList());\n+            if (authenticationTypes.contains(\"password\")) {\n+                return \"form\";\n+            }\n+            return authenticationTypes.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTUzNw==", "bodyText": "The web ui only supports a single authenticator, so we choose the first on in the list, or if there are no authenticators, we use form since it handles that case.", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r421759537", "createdAt": "2020-05-07T20:00:25Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/WebUiAuthenticationModule.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import io.airlift.configuration.AbstractConfigurationAwareModule;\n+import io.prestosql.server.security.SecurityConfig;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.configuration.ConfigBinder.configBinder;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class WebUiAuthenticationModule\n+        extends AbstractConfigurationAwareModule\n+{\n+    @Override\n+    protected void setup(Binder binder)\n+    {\n+        configBinder(binder).bindConfig(WebUiAuthenticationConfig.class);\n+\n+        installWebUiAuthenticator(\"form\", new FormUiAuthenticatorModule());\n+    }\n+\n+    private void installWebUiAuthenticator(String type, Module module)\n+    {\n+        install(webUiAuthenticator(type, module));\n+    }\n+\n+    public static Module webUiAuthenticator(String type, Module module)\n+    {\n+        return new ConditionalWebUiAuthenticationModule(type, module);\n+    }\n+\n+    private static class ConditionalWebUiAuthenticationModule\n+            extends AbstractConfigurationAwareModule\n+    {\n+        private final String type;\n+        private final Module module;\n+\n+        public ConditionalWebUiAuthenticationModule(String type, Module module)\n+        {\n+            this.type = requireNonNull(type, \"type is null\");\n+            this.module = requireNonNull(module, \"module is null\");\n+        }\n+\n+        @Override\n+        protected void setup(Binder binder)\n+        {\n+            if (type.equals(getAuthenticationType())) {\n+                install(module);\n+            }\n+        }\n+\n+        private String getAuthenticationType()\n+        {\n+            String authentication = buildConfigObject(WebUiAuthenticationConfig.class).getAuthentication();\n+            if (authentication != null) {\n+                return authentication;\n+            }\n+\n+            List<String> authenticationTypes = buildConfigObject(SecurityConfig.class).getAuthenticationTypes().stream()\n+                    .map(type -> type.toLowerCase(ENGLISH))\n+                    .collect(toImmutableList());\n+            if (authenticationTypes.contains(\"password\")) {\n+                return \"form\";\n+            }\n+            return authenticationTypes.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNjI5Ng=="}, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU0NDQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FixedUserWebUIConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowMzoyNVrOGPVrHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowMzoyNVrOGPVrHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNjkyNw==", "bodyText": "Nit: normally \"username\" is one word", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418736927", "createdAt": "2020-05-01T21:03:25Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FixedUserWebUIConfig.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import io.airlift.configuration.Config;\n+\n+import javax.validation.constraints.NotNull;\n+\n+public class FixedUserWebUIConfig\n+{\n+    private String userName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU0NjQ1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FixedUserWebUIConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNDoxMVrOGPVsTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNDoxMVrOGPVsTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNzIzMA==", "bodyText": "Fix case of Ui -> FixedUserWebUiConfig", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418737230", "createdAt": "2020-05-01T21:04:11Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FixedUserWebUIConfig.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import io.airlift.configuration.Config;\n+\n+import javax.validation.constraints.NotNull;\n+\n+public class FixedUserWebUIConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU0NzcwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FixedUserWebUiAuthenticationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNDo0MVrOGPVtEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNDo0MVrOGPVtEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNzQyNw==", "bodyText": "Check for null", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418737427", "createdAt": "2020-05-01T21:04:41Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FixedUserWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+\n+import static io.prestosql.server.ServletSecurityUtils.withAuthenticatedIdentity;\n+import static io.prestosql.server.ui.FormWebUiAuthenticationManager.redirectAllFormLoginToUi;\n+import static java.util.Objects.requireNonNull;\n+\n+public class FixedUserWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private final Identity webUiIdentity;\n+\n+    @Inject\n+    public FixedUserWebUiAuthenticationManager(FixedUserWebUIConfig config)\n+    {\n+        this(basicIdentity(requireNonNull(config, \"config is null\").getUserName()));\n+    }\n+\n+    public FixedUserWebUiAuthenticationManager(Identity webUiIdentity)\n+    {\n+        this.webUiIdentity = webUiIdentity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU0ODczOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/ui/TestFixedUserWebUIConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNToxMVrOGPVtvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNToxMVrOGPVtvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNzU5Ng==", "bodyText": "TestFixedUserWebUIConfig -> TestFixedUserWebUiConfig", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418737596", "createdAt": "2020-05-01T21:05:11Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/ui/TestFixedUserWebUIConfig.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.Map;\n+\n+import static io.airlift.configuration.testing.ConfigAssertions.assertFullMapping;\n+import static io.airlift.configuration.testing.ConfigAssertions.assertRecordedDefaults;\n+import static io.airlift.configuration.testing.ConfigAssertions.recordDefaults;\n+\n+public class TestFixedUserWebUIConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU1NDM2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNzo0NlrOGPVxRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowNzo0NlrOGPVxRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczODUwMw==", "bodyText": "If you pass authenticator to this method, then you can call authenticator.get() above, inside the if (authenticator.isPresent()) guard.", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418738503", "createdAt": "2020-05-01T21:07:46Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -179,7 +192,48 @@ private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest r\n         return path;\n     }\n \n-    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    private void handleProtocolLoginRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        Authenticator authenticator = this.authenticator.orElseThrow(() -> new IllegalStateException(\"Authenticator is not present\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU1NjMzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowODo0MFrOGPVyaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowODo0MFrOGPVyaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczODc5NQ==", "bodyText": "String message = firstNonNull(e.getMessage(), \"Unauthorized\");", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418738795", "createdAt": "2020-05-01T21:08:40Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -179,7 +192,48 @@ private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest r\n         return path;\n     }\n \n-    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    private void handleProtocolLoginRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        Authenticator authenticator = this.authenticator.orElseThrow(() -> new IllegalStateException(\"Authenticator is not present\"));\n+\n+        Identity authenticatedIdentity;\n+        try {\n+            authenticatedIdentity = authenticator.authenticate(request);\n+        }\n+        catch (AuthenticationException e) {\n+            // authentication failed\n+            ServletSecurityUtils.skipRequestBody(request);\n+\n+            e.getAuthenticateHeader().ifPresent(value -> response.addHeader(WWW_AUTHENTICATE, value));\n+\n+            String message = e.getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU1ODM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowOTozMlrOGPVzsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTowOTozMlrOGPVzsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczOTEyMQ==", "bodyText": "typo \"ot\" -> \"to\"", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418739121", "createdAt": "2020-05-01T21:09:32Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -179,7 +192,48 @@ private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest r\n         return path;\n     }\n \n-    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    private void handleProtocolLoginRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        Authenticator authenticator = this.authenticator.orElseThrow(() -> new IllegalStateException(\"Authenticator is not present\"));\n+\n+        Identity authenticatedIdentity;\n+        try {\n+            authenticatedIdentity = authenticator.authenticate(request);\n+        }\n+        catch (AuthenticationException e) {\n+            // authentication failed\n+            ServletSecurityUtils.skipRequestBody(request);\n+\n+            e.getAuthenticateHeader().ifPresent(value -> response.addHeader(WWW_AUTHENTICATE, value));\n+\n+            String message = e.getMessage();\n+            if (message == null) {\n+                message = \"Unauthorized\";\n+            }\n+\n+            ServletSecurityUtils.sendErrorMessage(response, SC_UNAUTHORIZED, message);\n+            return;\n+        }\n+\n+        if (redirectFormLoginToUi(request, response)) {\n+            return;\n+        }\n+\n+        ServletSecurityUtils.withAuthenticatedIdentity(nextFilter, request, response, authenticatedIdentity);\n+    }\n+\n+    public static boolean redirectFormLoginToUi(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        // these paths should never be used with a protocol login, but the user might have this cached or linked, so redirect back ot the main UI page.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTU2MzkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToxMTo1NVrOGPV27Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowNjo0NFrOGSOXEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczOTk0OQ==", "bodyText": "Why is the first one !isSecure()?", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r418739949", "createdAt": "2020-05-01T21:11:55Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -338,7 +392,7 @@ static String getRedirectLocation(HttpServletRequest request, String path, Strin\n \n     private boolean isAuthenticationEnabled(HttpServletRequest request)\n     {\n-        return !isSecure(request, httpsForwardingEnabled) || passwordAuthenticatorManager.isLoaded();\n+        return !isSecure(request, httpsForwardingEnabled) || passwordAuthenticatorManager.isLoaded() || authenticator.isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjgzNA==", "bodyText": "unsecured requests support username-only authentication (no password).  I added some comments", "url": "https://github.com/trinodb/trino/pull/3433#discussion_r421762834", "createdAt": "2020-05-07T20:06:44Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -338,7 +392,7 @@ static String getRedirectLocation(HttpServletRequest request, String path, Strin\n \n     private boolean isAuthenticationEnabled(HttpServletRequest request)\n     {\n-        return !isSecure(request, httpsForwardingEnabled) || passwordAuthenticatorManager.isLoaded();\n+        return !isSecure(request, httpsForwardingEnabled) || passwordAuthenticatorManager.isLoaded() || authenticator.isPresent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczOTk0OQ=="}, "originalCommit": null, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 136, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}