{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjM2NDg4", "number": 5237, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo0Njo0NlrOElnimA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzowNzozNlrOEmEyew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODgwNjAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/BroadcastOutputBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo0Njo0NlrOHVL7og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMDoxMlrOHV1C9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk3NzYzNA==", "bodyText": "should we check for isFull or the logic we use at coordinator (> 50% util.)?", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r491977634", "createdAt": "2020-09-21T11:46:46Z", "author": {"login": "rohangarg"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/BroadcastOutputBuffer.java", "diffHunk": "@@ -231,6 +237,11 @@ public void enqueue(List<SerializedPage> pages)\n \n         // drop the initial reference\n         serializedPageReferences.forEach(SerializedPageReference::dereferencePage);\n+\n+        // if the buffer is full for first time, update the task status\n+        if (!hasBlockedBefore.get() && !isFull().isDone() && hasBlockedBefore.compareAndSet(false, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MTI1NA==", "bodyText": "Let's use isFull, 50% condition is opportunistic when there is no notification", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r492651254", "createdAt": "2020-09-22T11:10:12Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/BroadcastOutputBuffer.java", "diffHunk": "@@ -231,6 +237,11 @@ public void enqueue(List<SerializedPage> pages)\n \n         // drop the initial reference\n         serializedPageReferences.forEach(SerializedPageReference::dereferencePage);\n+\n+        // if the buffer is full for first time, update the task status\n+        if (!hasBlockedBefore.get() && !isFull().isDone() && hasBlockedBefore.compareAndSet(false, true)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk3NzYzNA=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE3NTUzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/BroadcastOutputBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMzowM1rOHV1IGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjowMzoyN1rOHV2sJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MjU2OA==", "bodyText": "please add some more rationale why we do this (for future readers)", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r492652568", "createdAt": "2020-09-22T11:13:03Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/BroadcastOutputBuffer.java", "diffHunk": "@@ -231,6 +237,11 @@ public void enqueue(List<SerializedPage> pages)\n \n         // drop the initial reference\n         serializedPageReferences.forEach(SerializedPageReference::dereferencePage);\n+\n+        // if the buffer is full for first time, update the task status", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3ODE4Mw==", "bodyText": "Added a better comment and also added a check in the condition for canAddBuffers (updated test too). request to please check it once as well", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r492678183", "createdAt": "2020-09-22T12:03:27Z", "author": {"login": "rohangarg"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/BroadcastOutputBuffer.java", "diffHunk": "@@ -231,6 +237,11 @@ public void enqueue(List<SerializedPage> pages)\n \n         // drop the initial reference\n         serializedPageReferences.forEach(SerializedPageReference::dereferencePage);\n+\n+        // if the buffer is full for first time, update the task status", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MjU2OA=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzU5ODAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/TestBroadcastOutputBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzowNzozNlrOHV5HkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDozODowNlrOHV9aJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNzk2OA==", "bodyText": "Please add another test case where you make sure notification count is still 0 when no more buffers state is reached, but buffer is full", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r492717968", "createdAt": "2020-09-22T13:07:36Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/TestBroadcastOutputBuffer.java", "diffHunk": "@@ -316,6 +317,40 @@ public void testSharedBufferFull()\n         enqueuePage(buffer, createPage(3));\n     }\n \n+    @Test\n+    public void testNotifyStatusOnBufferFull()\n+    {\n+        AtomicInteger notifyCount = new AtomicInteger();\n+        BroadcastOutputBuffer buffer = createBroadcastBuffer(\n+                createInitialEmptyOutputBuffers(BROADCAST).withBuffer(FIRST, BROADCAST_PARTITION_ID),\n+                sizeOfPages(1),\n+                notifyCount::incrementAndGet);\n+\n+        // Add a page to the buffer\n+        addPage(buffer, createPage(1));\n+        assertTrue(buffer.isFull().isDone());\n+        assertEquals(notifyCount.get(), 0);\n+\n+        // Add another page to block\n+        ListenableFuture<?> future = enqueuePage(buffer, createPage(2));\n+        assertFalse(future.isDone());\n+        assertEquals(notifyCount.get(), 1);\n+\n+        // Set no more buffers", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc4ODI2Mw==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r492788263", "createdAt": "2020-09-22T14:38:06Z", "author": {"login": "rohangarg"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/TestBroadcastOutputBuffer.java", "diffHunk": "@@ -316,6 +317,40 @@ public void testSharedBufferFull()\n         enqueuePage(buffer, createPage(3));\n     }\n \n+    @Test\n+    public void testNotifyStatusOnBufferFull()\n+    {\n+        AtomicInteger notifyCount = new AtomicInteger();\n+        BroadcastOutputBuffer buffer = createBroadcastBuffer(\n+                createInitialEmptyOutputBuffers(BROADCAST).withBuffer(FIRST, BROADCAST_PARTITION_ID),\n+                sizeOfPages(1),\n+                notifyCount::incrementAndGet);\n+\n+        // Add a page to the buffer\n+        addPage(buffer, createPage(1));\n+        assertTrue(buffer.isFull().isDone());\n+        assertEquals(notifyCount.get(), 0);\n+\n+        // Add another page to block\n+        ListenableFuture<?> future = enqueuePage(buffer, createPage(2));\n+        assertFalse(future.isDone());\n+        assertEquals(notifyCount.get(), 1);\n+\n+        // Set no more buffers", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNzk2OA=="}, "originalCommit": null, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3016, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}