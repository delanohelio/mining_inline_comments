{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MzM5OTk4", "number": 5815, "title": "Ensure QueryManager is called for queries which fail during dispatching ", "bodyText": "", "createdAt": "2020-11-04T12:03:24Z", "url": "https://github.com/trinodb/trino/pull/5815", "merged": true, "mergeCommit": {"oid": "423e8473a2179520330f39bb32ee4966e00994e8"}, "closed": true, "closedAt": "2020-11-09T13:25:37Z", "author": {"login": "losipiuk"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZMpq1gFqTUyMzMwMDgwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdazwRYgH2gAyNTE1MzM5OTk4OjkxNThjYzljZjVjZmNkNWEwODE0NGRhMjVlMTU3MzhjZTQyYjA4OWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzAwODAx", "url": "https://github.com/trinodb/trino/pull/5815#pullrequestreview-523300801", "createdAt": "2020-11-04T12:07:51Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjowNzo1MVrOHtVWbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjowOToyNFrOHtVZgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Nzc3NQ==", "bodyText": "Use enum instead", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517297775", "createdAt": "2020-11-04T12:07:51Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchQuery.java", "diffHunk": "@@ -22,7 +22,7 @@\n {\n     void recordHeartbeat();\n \n-    ListenableFuture<?> getDispatchedFuture();\n+    ListenableFuture<Boolean> getDispatchedFuture();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5ODU2Mg==", "bodyText": "Can you please add test to io.prestosql.connector.system.TestKillQuery. You can use MockConnector to block it on metadata calls so query will remain in waiting for resources state.", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517298562", "createdAt": "2020-11-04T12:09:24Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchManager.java", "diffHunk": "@@ -16,6 +16,7 @@\n import com.google.common.util.concurrent.AbstractFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzExMjk4", "url": "https://github.com/trinodb/trino/pull/5815#pullrequestreview-523311298", "createdAt": "2020-11-04T12:23:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjoyMzozM1rOHtV1HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjoyNDoxN1rOHtV2xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNTYyOA==", "bodyText": "Add a javadoc explaining what the future's  payload means", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517305628", "createdAt": "2020-11-04T12:23:33Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchQuery.java", "diffHunk": "@@ -22,7 +22,7 @@\n {\n     void recordHeartbeat();\n \n-    ListenableFuture<?> getDispatchedFuture();\n+    ListenableFuture<Boolean> getDispatchedFuture();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Nzc3NQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNjA1Mg==", "bodyText": "it's weird to declared \"success\" in the finally block, regardless of the above.\nI think it would be better to .set(true) after querySubmitter.accept( returns cleanly and .set(false) in the finally.", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517306052", "createdAt": "2020-11-04T12:24:17Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/LocalDispatchQuery.java", "diffHunk": "@@ -138,7 +138,7 @@ private void startExecution(QueryExecution queryExecution)\n                     throw t;\n                 }\n                 finally {\n-                    submitted.set(null);\n+                    submitted.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzEyNjYw", "url": "https://github.com/trinodb/trino/pull/5815#pullrequestreview-523312660", "createdAt": "2020-11-04T12:25:30Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjoyNTozMFrOHtV51w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjoyNzoxNlrOHtV9iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNjgzOQ==", "bodyText": "Remove.\nInstead, please add a test that would fail if this code is reinserted here.", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517306839", "createdAt": "2020-11-04T12:25:30Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/LocalDispatchQueryFactory.java", "diffHunk": "@@ -124,7 +123,7 @@ public DispatchQuery createDispatchQuery(\n             }\n             catch (Throwable e) {\n                 stateMachine.transitionToFailed(e);\n-                queryMonitor.queryImmediateFailureEvent(stateMachine.getBasicQueryInfo(Optional.empty()), toFailure(e));\n+                // queryMonitor.queryImmediateFailureEvent will be called by state change listenere registered in DispatchManager.queryCreated", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNzQ3Nw==", "bodyText": "can it be ! done just yet?\nis here a race condition which may result in double notification?", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517307477", "createdAt": "2020-11-04T12:26:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchManager.java", "diffHunk": "@@ -243,6 +249,16 @@ private boolean queryCreated(DispatchQuery dispatchQuery)\n             stats.trackQueryStats(dispatchQuery);\n         }\n \n+        // capture failures which happen before query is succesfully dispatched.\n+        dispatchQuery.addStateChangeListener(newState -> {\n+            if (newState == FAILED) {\n+                if (!dispatchQuery.getDispatchedFuture().isDone() || !getUnchecked(dispatchQuery.getDispatchedFuture())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNzc4Nw==", "bodyText": "getUnchecked -> MoreFutures#getDone", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517307787", "createdAt": "2020-11-04T12:27:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchManager.java", "diffHunk": "@@ -243,6 +249,16 @@ private boolean queryCreated(DispatchQuery dispatchQuery)\n             stats.trackQueryStats(dispatchQuery);\n         }\n \n+        // capture failures which happen before query is succesfully dispatched.\n+        dispatchQuery.addStateChangeListener(newState -> {\n+            if (newState == FAILED) {\n+                if (!dispatchQuery.getDispatchedFuture().isDone() || !getUnchecked(dispatchQuery.getDispatchedFuture())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MDc2NDY0", "url": "https://github.com/trinodb/trino/pull/5815#pullrequestreview-524076464", "createdAt": "2020-11-05T09:33:35Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTozMzozNVrOHt6uyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDowMTo0OFrOHt72Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxMDIxNw==", "bodyText": "{ next line?", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517910217", "createdAt": "2020-11-05T09:33:35Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchQuery.java", "diffHunk": "@@ -20,9 +20,13 @@\n public interface DispatchQuery\n         extends TrackedQuery, ManagedQueryExecution\n {\n+    enum DispatchStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyNzExNw==", "bodyText": "successfully", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517927117", "createdAt": "2020-11-05T09:59:40Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchManager.java", "diffHunk": "@@ -243,6 +249,16 @@ private boolean queryCreated(DispatchQuery dispatchQuery)\n             stats.trackQueryStats(dispatchQuery);\n         }\n \n+        // capture failures which happen before query is succesfully dispatched.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyNzM1MQ==", "bodyText": "true -> ..", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517927351", "createdAt": "2020-11-05T10:00:02Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchManager.java", "diffHunk": "@@ -243,6 +249,16 @@ private boolean queryCreated(DispatchQuery dispatchQuery)\n             stats.trackQueryStats(dispatchQuery);\n         }\n \n+        // capture failures which happen before query is succesfully dispatched.\n+        dispatchQuery.addStateChangeListener(newState -> {\n+            if (newState == FAILED) {\n+                if (!dispatchQuery.getDispatchedFuture().isDone() || getDone(dispatchQuery.getDispatchedFuture()) == DispatchQuery.DispatchStatus.FAILED) {\n+                    queryMonitor.queryImmediateFailureEvent(dispatchQuery.getBasicQueryInfo(), dispatchQuery.getFullQueryInfo().getFailureInfo());\n+                }\n+                // if dispatchQuery.getDispatchedFuture() == true then query termination will be handled by listener registered in SqlQueryManager.createQuery", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyODUzMA==", "bodyText": "i'm concerned about !dispatchQuery.getDispatchedFuture().isDone() part. This may result in double delivery of the event.\nWe could perhaps have the queryMonitor.queryImmediateFailureEvent run as a completion callback on the dispatchQuery.getDispatchedFuture() future?", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517928530", "createdAt": "2020-11-05T10:01:48Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchManager.java", "diffHunk": "@@ -243,6 +249,16 @@ private boolean queryCreated(DispatchQuery dispatchQuery)\n             stats.trackQueryStats(dispatchQuery);\n         }\n \n+        // capture failures which happen before query is succesfully dispatched.\n+        dispatchQuery.addStateChangeListener(newState -> {\n+            if (newState == FAILED) {\n+                if (!dispatchQuery.getDispatchedFuture().isDone() || getDone(dispatchQuery.getDispatchedFuture()) == DispatchQuery.DispatchStatus.FAILED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MTE0MTgz", "url": "https://github.com/trinodb/trino/pull/5815#pullrequestreview-524114183", "createdAt": "2020-11-05T10:18:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoxODo0MVrOHt8fjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoyMjoxMlrOHt8omg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzOTA4NQ==", "bodyText": "don't use static import for DispatchStatus. QueryState seems to be more commonly used.", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517939085", "createdAt": "2020-11-05T10:18:41Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/FailedDispatchQuery.java", "diffHunk": "@@ -104,9 +104,9 @@ public Session getSession()\n     }\n \n     @Override\n-    public ListenableFuture<?> getDispatchedFuture()\n+    public ListenableFuture<DispatchStatus> getDispatchedFuture()\n     {\n-        return immediateFuture(null);\n+        return immediateFuture(FAILED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0MTQwMg==", "bodyText": "nice", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r517941402", "createdAt": "2020-11-05T10:22:12Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -160,8 +160,35 @@ public void testPlanningFailure()\n         assertFailedQuery(\"SELECT * FROM mock.default.tests_table\", \"Throw from apply projection\");\n     }\n \n+    @Test\n+    public void testAbortedWhileWaitingForResources()\n+            throws Exception\n+    {\n+        Session mySession = Session.builder(session)\n+                .setSystemProperty(\"required_workers_count\", \"17\")\n+                .setSystemProperty(\"required_workers_max_wait_time\", \"10ms\")\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MjA3MDkx", "url": "https://github.com/trinodb/trino/pull/5815#pullrequestreview-525207091", "createdAt": "2020-11-06T14:32:44Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDozMjo0NFrOHuwU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDo0NjoyMVrOHuw3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc4ODMyNA==", "bodyText": "or dispatchExecutor?", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518788324", "createdAt": "2020-11-06T14:32:44Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchManager.java", "diffHunk": "@@ -72,7 +72,7 @@\n \n     private final int maxQueryLength;\n \n-    private final Executor queryExecutor;\n+    private final Executor executor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc4OTAyOQ==", "bodyText": "please update (DistributedQueryRunner) getQueryRunner() places to use the new method", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518789029", "createdAt": "2020-11-06T14:33:51Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -411,6 +411,13 @@ protected final QueryRunner getQueryRunner()\n         return queryRunner;\n     }\n \n+    protected final DistributedQueryRunner getDistributedQueryRunner()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5MTU4MA==", "bodyText": "part of the setup (construction) is done in initialize and part is done now in ctor.\nlet's merge the two.\nlet's rename initialize to reset and let's call reset(0) in the ctor, so that newly created object is usable", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518791580", "createdAt": "2020-11-06T14:37:45Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/EventsBuilder.java", "diffHunk": "@@ -16,20 +16,36 @@\n import com.google.common.collect.ImmutableList;\n import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.QueryMetadata;\n import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n \n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Predicates.alwaysTrue;\n+import static java.util.Objects.requireNonNull;\n \n class EventsBuilder\n {\n+    private final Predicate<QueryMetadata> queryFilter;\n     private ImmutableList.Builder<QueryCreatedEvent> queryCreatedEvents;\n     private ImmutableList.Builder<QueryCompletedEvent> queryCompletedEvents;\n     private ImmutableList.Builder<SplitCompletedEvent> splitCompletedEvents;\n \n     private CountDownLatch eventsLatch;\n \n+    public EventsBuilder()\n+    {\n+        this(alwaysTrue());\n+    }\n+\n+    public EventsBuilder(Predicate<QueryMetadata> queryFilter)\n+    {\n+        this.queryFilter = requireNonNull(queryFilter, \"filter is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5MTg5OA==", "bodyText": "should not be prt of \"Add query filtering logic to EventsBuilder\" commit", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518791898", "createdAt": "2020-11-06T14:38:17Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -58,6 +58,7 @@\n         extends AbstractTestQueryFramework\n {\n     private static final int SPLITS_PER_NODE = 3;\n+    private static final String IGNORE_EVENT_MARKER = \"-- ignore_generated_event\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5MzY2OA==", "bodyText": "[UUID.] randomUUID().toString().replace(\"-\", \"\")", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518793668", "createdAt": "2020-11-06T14:41:02Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -156,8 +166,81 @@ public void testPlanningFailure()\n         assertFailedQuery(\"SELECT * FROM mock.default.tests_table\", \"Throw from apply projection\");\n     }\n \n+    @Test\n+    public void testAbortedWhileWaitingForResources()\n+            throws Exception\n+    {\n+        Session mySession = Session.builder(getSession())\n+                .setSystemProperty(\"required_workers_count\", \"17\")\n+                .setSystemProperty(\"required_workers_max_wait_time\", \"10ms\")\n+                .build();\n+        assertFailedQuery(mySession, \"SELECT * FROM tpch.sf1.nation\", \"Insufficient active worker nodes. Waited 10.00ms for at least 17 workers, but only 1 workers are active\");\n+    }\n+\n+    @Test\n+    public void testKilledWhileWaitingForResources()\n+            throws Exception\n+    {\n+        String testQueryMarker = \"test_query_id_\" + ThreadLocalRandom.current().nextInt(100_000_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5NTQ3Mw==", "bodyText": "Assertion is in async code, so it becomes less obvious the test effectively asserts what's supposed to do (it does, today).\nI think it would be more readable to move query cancellation to async code,\nand have query submittion and assertion in the main test thread.", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518795473", "createdAt": "2020-11-06T14:43:51Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -156,8 +166,81 @@ public void testPlanningFailure()\n         assertFailedQuery(\"SELECT * FROM mock.default.tests_table\", \"Throw from apply projection\");\n     }\n \n+    @Test\n+    public void testAbortedWhileWaitingForResources()\n+            throws Exception\n+    {\n+        Session mySession = Session.builder(getSession())\n+                .setSystemProperty(\"required_workers_count\", \"17\")\n+                .setSystemProperty(\"required_workers_max_wait_time\", \"10ms\")\n+                .build();\n+        assertFailedQuery(mySession, \"SELECT * FROM tpch.sf1.nation\", \"Insufficient active worker nodes. Waited 10.00ms for at least 17 workers, but only 1 workers are active\");\n+    }\n+\n+    @Test\n+    public void testKilledWhileWaitingForResources()\n+            throws Exception\n+    {\n+        String testQueryMarker = \"test_query_id_\" + ThreadLocalRandom.current().nextInt(100_000_000);\n+        ExecutorService executorService = Executors.newSingleThreadExecutor();\n+        try {\n+            Future<Object> testQueryFuture = executorService.submit(\n+                    () -> {\n+                        Session mySession = Session.builder(getSession())\n+                                .setSystemProperty(\"required_workers_count\", \"17\")\n+                                .setSystemProperty(\"required_workers_max_wait_time\", \"5m\")\n+                                .build();\n+                        String sql = format(\"SELECT nationkey as %s  FROM tpch.sf1.nation\", testQueryMarker);\n+                        assertFailedQuery(mySession, sql, \"Query killed. Message: because\");\n+                        return null;\n+                    });\n+\n+            Optional<String> queryIdValue = findQueryId(testQueryMarker);\n+            assertThat(queryIdValue).as(\"query id\").isPresent();\n+\n+            getQueryRunner().execute(format(\"CALL system.runtime.kill_query('%s', 'because') %s\", queryIdValue.get(), IGNORE_EVENT_MARKER));\n+            testQueryFuture.get(5, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5NTUyNg==", "bodyText": "add a timeout", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518795526", "createdAt": "2020-11-06T14:43:56Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -156,8 +166,81 @@ public void testPlanningFailure()\n         assertFailedQuery(\"SELECT * FROM mock.default.tests_table\", \"Throw from apply projection\");\n     }\n \n+    @Test\n+    public void testAbortedWhileWaitingForResources()\n+            throws Exception\n+    {\n+        Session mySession = Session.builder(getSession())\n+                .setSystemProperty(\"required_workers_count\", \"17\")\n+                .setSystemProperty(\"required_workers_max_wait_time\", \"10ms\")\n+                .build();\n+        assertFailedQuery(mySession, \"SELECT * FROM tpch.sf1.nation\", \"Insufficient active worker nodes. Waited 10.00ms for at least 17 workers, but only 1 workers are active\");\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5NTcyMw==", "bodyText": "don't sleep at first, should the query be already there", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518795723", "createdAt": "2020-11-06T14:44:16Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -156,8 +166,81 @@ public void testPlanningFailure()\n         assertFailedQuery(\"SELECT * FROM mock.default.tests_table\", \"Throw from apply projection\");\n     }\n \n+    @Test\n+    public void testAbortedWhileWaitingForResources()\n+            throws Exception\n+    {\n+        Session mySession = Session.builder(getSession())\n+                .setSystemProperty(\"required_workers_count\", \"17\")\n+                .setSystemProperty(\"required_workers_max_wait_time\", \"10ms\")\n+                .build();\n+        assertFailedQuery(mySession, \"SELECT * FROM tpch.sf1.nation\", \"Insufficient active worker nodes. Waited 10.00ms for at least 17 workers, but only 1 workers are active\");\n+    }\n+\n+    @Test\n+    public void testKilledWhileWaitingForResources()\n+            throws Exception\n+    {\n+        String testQueryMarker = \"test_query_id_\" + ThreadLocalRandom.current().nextInt(100_000_000);\n+        ExecutorService executorService = Executors.newSingleThreadExecutor();\n+        try {\n+            Future<Object> testQueryFuture = executorService.submit(\n+                    () -> {\n+                        Session mySession = Session.builder(getSession())\n+                                .setSystemProperty(\"required_workers_count\", \"17\")\n+                                .setSystemProperty(\"required_workers_max_wait_time\", \"5m\")\n+                                .build();\n+                        String sql = format(\"SELECT nationkey as %s  FROM tpch.sf1.nation\", testQueryMarker);\n+                        assertFailedQuery(mySession, sql, \"Query killed. Message: because\");\n+                        return null;\n+                    });\n+\n+            Optional<String> queryIdValue = findQueryId(testQueryMarker);\n+            assertThat(queryIdValue).as(\"query id\").isPresent();\n+\n+            getQueryRunner().execute(format(\"CALL system.runtime.kill_query('%s', 'because') %s\", queryIdValue.get(), IGNORE_EVENT_MARKER));\n+            testQueryFuture.get(5, TimeUnit.SECONDS);\n+        }\n+        finally {\n+            shutdownAndAwaitTermination(executorService, Duration.ZERO);\n+        }\n+    }\n+\n+    private Optional<String> findQueryId(String queryPattern)\n+            throws InterruptedException\n+    {\n+        Optional<String> queryIdValue = Optional.empty();\n+        while (queryIdValue.isEmpty()) {\n+            Thread.sleep(50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5NjQwMQ==", "bodyText": "we should use PREPARE and EXECUTE instead of sql injection....\nignore now", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518796401", "createdAt": "2020-11-06T14:45:15Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -156,8 +166,81 @@ public void testPlanningFailure()\n         assertFailedQuery(\"SELECT * FROM mock.default.tests_table\", \"Throw from apply projection\");\n     }\n \n+    @Test\n+    public void testAbortedWhileWaitingForResources()\n+            throws Exception\n+    {\n+        Session mySession = Session.builder(getSession())\n+                .setSystemProperty(\"required_workers_count\", \"17\")\n+                .setSystemProperty(\"required_workers_max_wait_time\", \"10ms\")\n+                .build();\n+        assertFailedQuery(mySession, \"SELECT * FROM tpch.sf1.nation\", \"Insufficient active worker nodes. Waited 10.00ms for at least 17 workers, but only 1 workers are active\");\n+    }\n+\n+    @Test\n+    public void testKilledWhileWaitingForResources()\n+            throws Exception\n+    {\n+        String testQueryMarker = \"test_query_id_\" + ThreadLocalRandom.current().nextInt(100_000_000);\n+        ExecutorService executorService = Executors.newSingleThreadExecutor();\n+        try {\n+            Future<Object> testQueryFuture = executorService.submit(\n+                    () -> {\n+                        Session mySession = Session.builder(getSession())\n+                                .setSystemProperty(\"required_workers_count\", \"17\")\n+                                .setSystemProperty(\"required_workers_max_wait_time\", \"5m\")\n+                                .build();\n+                        String sql = format(\"SELECT nationkey as %s  FROM tpch.sf1.nation\", testQueryMarker);\n+                        assertFailedQuery(mySession, sql, \"Query killed. Message: because\");\n+                        return null;\n+                    });\n+\n+            Optional<String> queryIdValue = findQueryId(testQueryMarker);\n+            assertThat(queryIdValue).as(\"query id\").isPresent();\n+\n+            getQueryRunner().execute(format(\"CALL system.runtime.kill_query('%s', 'because') %s\", queryIdValue.get(), IGNORE_EVENT_MARKER));\n+            testQueryFuture.get(5, TimeUnit.SECONDS);\n+        }\n+        finally {\n+            shutdownAndAwaitTermination(executorService, Duration.ZERO);\n+        }\n+    }\n+\n+    private Optional<String> findQueryId(String queryPattern)\n+            throws InterruptedException\n+    {\n+        Optional<String> queryIdValue = Optional.empty();\n+        while (queryIdValue.isEmpty()) {\n+            Thread.sleep(50);\n+            queryIdValue = computeActual(\n+                    format(\"SELECT query_id FROM system.runtime.queries WHERE query LIKE '%%%s%%' AND query NOT LIKE '%%system.runtime.queries%%' %s\",\n+                            queryPattern,\n+                            IGNORE_EVENT_MARKER))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5NjY3MQ==", "bodyText": "i think abstaining from format would yield to more readable code, since % interfere", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518796671", "createdAt": "2020-11-06T14:45:41Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -156,8 +166,81 @@ public void testPlanningFailure()\n         assertFailedQuery(\"SELECT * FROM mock.default.tests_table\", \"Throw from apply projection\");\n     }\n \n+    @Test\n+    public void testAbortedWhileWaitingForResources()\n+            throws Exception\n+    {\n+        Session mySession = Session.builder(getSession())\n+                .setSystemProperty(\"required_workers_count\", \"17\")\n+                .setSystemProperty(\"required_workers_max_wait_time\", \"10ms\")\n+                .build();\n+        assertFailedQuery(mySession, \"SELECT * FROM tpch.sf1.nation\", \"Insufficient active worker nodes. Waited 10.00ms for at least 17 workers, but only 1 workers are active\");\n+    }\n+\n+    @Test\n+    public void testKilledWhileWaitingForResources()\n+            throws Exception\n+    {\n+        String testQueryMarker = \"test_query_id_\" + ThreadLocalRandom.current().nextInt(100_000_000);\n+        ExecutorService executorService = Executors.newSingleThreadExecutor();\n+        try {\n+            Future<Object> testQueryFuture = executorService.submit(\n+                    () -> {\n+                        Session mySession = Session.builder(getSession())\n+                                .setSystemProperty(\"required_workers_count\", \"17\")\n+                                .setSystemProperty(\"required_workers_max_wait_time\", \"5m\")\n+                                .build();\n+                        String sql = format(\"SELECT nationkey as %s  FROM tpch.sf1.nation\", testQueryMarker);\n+                        assertFailedQuery(mySession, sql, \"Query killed. Message: because\");\n+                        return null;\n+                    });\n+\n+            Optional<String> queryIdValue = findQueryId(testQueryMarker);\n+            assertThat(queryIdValue).as(\"query id\").isPresent();\n+\n+            getQueryRunner().execute(format(\"CALL system.runtime.kill_query('%s', 'because') %s\", queryIdValue.get(), IGNORE_EVENT_MARKER));\n+            testQueryFuture.get(5, TimeUnit.SECONDS);\n+        }\n+        finally {\n+            shutdownAndAwaitTermination(executorService, Duration.ZERO);\n+        }\n+    }\n+\n+    private Optional<String> findQueryId(String queryPattern)\n+            throws InterruptedException\n+    {\n+        Optional<String> queryIdValue = Optional.empty();\n+        while (queryIdValue.isEmpty()) {\n+            Thread.sleep(50);\n+            queryIdValue = computeActual(\n+                    format(\"SELECT query_id FROM system.runtime.queries WHERE query LIKE '%%%s%%' AND query NOT LIKE '%%system.runtime.queries%%' %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5NzEwMw==", "bodyText": "move this above utility methoids (findQueryId)", "url": "https://github.com/trinodb/trino/pull/5815#discussion_r518797103", "createdAt": "2020-11-06T14:46:21Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -156,8 +166,81 @@ public void testPlanningFailure()\n         assertFailedQuery(\"SELECT * FROM mock.default.tests_table\", \"Throw from apply projection\");\n     }\n \n+    @Test\n+    public void testAbortedWhileWaitingForResources()\n+            throws Exception\n+    {\n+        Session mySession = Session.builder(getSession())\n+                .setSystemProperty(\"required_workers_count\", \"17\")\n+                .setSystemProperty(\"required_workers_max_wait_time\", \"10ms\")\n+                .build();\n+        assertFailedQuery(mySession, \"SELECT * FROM tpch.sf1.nation\", \"Insufficient active worker nodes. Waited 10.00ms for at least 17 workers, but only 1 workers are active\");\n+    }\n+\n+    @Test\n+    public void testKilledWhileWaitingForResources()\n+            throws Exception\n+    {\n+        String testQueryMarker = \"test_query_id_\" + ThreadLocalRandom.current().nextInt(100_000_000);\n+        ExecutorService executorService = Executors.newSingleThreadExecutor();\n+        try {\n+            Future<Object> testQueryFuture = executorService.submit(\n+                    () -> {\n+                        Session mySession = Session.builder(getSession())\n+                                .setSystemProperty(\"required_workers_count\", \"17\")\n+                                .setSystemProperty(\"required_workers_max_wait_time\", \"5m\")\n+                                .build();\n+                        String sql = format(\"SELECT nationkey as %s  FROM tpch.sf1.nation\", testQueryMarker);\n+                        assertFailedQuery(mySession, sql, \"Query killed. Message: because\");\n+                        return null;\n+                    });\n+\n+            Optional<String> queryIdValue = findQueryId(testQueryMarker);\n+            assertThat(queryIdValue).as(\"query id\").isPresent();\n+\n+            getQueryRunner().execute(format(\"CALL system.runtime.kill_query('%s', 'because') %s\", queryIdValue.get(), IGNORE_EVENT_MARKER));\n+            testQueryFuture.get(5, TimeUnit.SECONDS);\n+        }\n+        finally {\n+            shutdownAndAwaitTermination(executorService, Duration.ZERO);\n+        }\n+    }\n+\n+    private Optional<String> findQueryId(String queryPattern)\n+            throws InterruptedException\n+    {\n+        Optional<String> queryIdValue = Optional.empty();\n+        while (queryIdValue.isEmpty()) {\n+            Thread.sleep(50);\n+            queryIdValue = computeActual(\n+                    format(\"SELECT query_id FROM system.runtime.queries WHERE query LIKE '%%%s%%' AND query NOT LIKE '%%system.runtime.queries%%' %s\",\n+                            queryPattern,\n+                            IGNORE_EVENT_MARKER))\n+                    .getOnlyColumn()\n+                    .map(String.class::cast)\n+                    .collect(toOptional());\n+        }\n+        return queryIdValue;\n+    }\n+\n+    @Test\n+    public void testWithInvalidExecutionPolicy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba2bb426c7e7f35c7d9344ecc4415c6d7faf5920", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/ba2bb426c7e7f35c7d9344ecc4415c6d7faf5920", "committedDate": "2020-11-09T07:16:58Z", "message": "Return if dispatch was successful via getDispatchedFuture"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76f694e8ec97b3858d43590355bb8c4006932c7b", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/76f694e8ec97b3858d43590355bb8c4006932c7b", "committedDate": "2020-11-09T07:16:58Z", "message": "Rename field"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "33200208f97c4d2307cda11895c2c2a5a7de7784", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/33200208f97c4d2307cda11895c2c2a5a7de7784", "committedDate": "2020-11-09T09:48:30Z", "message": "Add getDistributedQueryRunner method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3805e5f8a8f5df1aaa15b7f0d563a2ca87bbed", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/ee3805e5f8a8f5df1aaa15b7f0d563a2ca87bbed", "committedDate": "2020-11-09T09:48:30Z", "message": "Make TestEventListener extend AbstractTestQueryFramework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab8610b9edb631f9e118c766b9a43ec5d790634", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/8ab8610b9edb631f9e118c766b9a43ec5d790634", "committedDate": "2020-11-09T09:48:30Z", "message": "Add query filtering logic to EventsBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4c8f4a8727f6799e4db996ea08673e105c3ba66", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/c4c8f4a8727f6799e4db996ea08673e105c3ba66", "committedDate": "2020-11-09T09:48:30Z", "message": "Rename method and ensure proper post-construction initialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03cf05b717ec5e21f72b4f6cf9edea403d7e309e", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/03cf05b717ec5e21f72b4f6cf9edea403d7e309e", "committedDate": "2020-11-09T09:48:30Z", "message": "Use randomUUID as test table suffix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "498d9eae317bbd8b060601c11428417b5b4da752", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/498d9eae317bbd8b060601c11428417b5b4da752", "committedDate": "2020-11-09T09:48:30Z", "message": "Ensure QueryManager is called for queries which fail during dispatching\n\nWithout the change call to QueryManager.queryImmediateFailureEvent could\nbe lost for some queries which were already past initial part of\ndispatching phase but not yet started execution.\nExamples are:\n - queries killed from WebUI while waiting for resources\n - queries abandoned while waiting for resources"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "498d9eae317bbd8b060601c11428417b5b4da752", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/498d9eae317bbd8b060601c11428417b5b4da752", "committedDate": "2020-11-09T09:48:30Z", "message": "Ensure QueryManager is called for queries which fail during dispatching\n\nWithout the change call to QueryManager.queryImmediateFailureEvent could\nbe lost for some queries which were already past initial part of\ndispatching phase but not yet started execution.\nExamples are:\n - queries killed from WebUI while waiting for resources\n - queries abandoned while waiting for resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9158cc9cf5cfcd5a08144da25e15738ce42b089f", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/9158cc9cf5cfcd5a08144da25e15738ce42b089f", "committedDate": "2020-11-09T12:17:09Z", "message": "empty commit"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2817, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}