{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzc5NDM4", "number": 5717, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxMzo1OFrOEyt1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozNzoxOVrOE03O7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjE1Mjk4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxMzo1OFrOHpgdAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxMzo1OFrOHpgdAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NTM3OQ==", "bodyText": "invalidateTable, please add a test to TestCachingHiveMetastore", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513285379", "createdAt": "2020-10-28T09:13:58Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -493,6 +493,18 @@ public void setDatabaseOwner(HiveIdentity identity, String databaseName, HivePri\n         }\n     }\n \n+    @Override\n+    public void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal)\n+    {\n+        identity = updateIdentity(identity);\n+        try {\n+            delegate.setTableOwner(identity, databaseName, tableName, principal);\n+        }\n+        finally {\n+            invalidateDatabase(databaseName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjE3Njg0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxOTo0OFrOHpgriQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozMjozNVrOHrLLFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4OTA5Nw==", "bodyText": "Is this a Hive behavior? What about being an owner of a schema that contains that table, would that allow to change the owner of table?", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513289097", "createdAt": "2020-10-28T09:19:48Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -263,6 +264,14 @@ public void checkCanRenameColumn(ConnectorSecurityContext context, SchemaTableNa\n         }\n     }\n \n+    @Override\n+    public void checkCanSetTableAuthorization(ConnectorSecurityContext context, SchemaTableName tableName, PrestoPrincipal principal)\n+    {\n+        if (!isTableOwner(context, tableName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjQ1OA==", "bodyText": "The ALTER TABLE SET AUTHORIZATION syntax is not a part of SQL and not a part of Hive. The only way to change table's owner is via metastore", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513342458", "createdAt": "2020-10-28T10:41:41Z", "author": {"login": "skrzypo987"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -263,6 +264,14 @@ public void checkCanRenameColumn(ConnectorSecurityContext context, SchemaTableNa\n         }\n     }\n \n+    @Override\n+    public void checkCanSetTableAuthorization(ConnectorSecurityContext context, SchemaTableName tableName, PrestoPrincipal principal)\n+    {\n+        if (!isTableOwner(context, tableName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4OTA5Nw=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1OTYyNQ==", "bodyText": "@dain @electrum What do you think about this?", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513359625", "createdAt": "2020-10-28T11:11:09Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -263,6 +264,14 @@ public void checkCanRenameColumn(ConnectorSecurityContext context, SchemaTableNa\n         }\n     }\n \n+    @Override\n+    public void checkCanSetTableAuthorization(ConnectorSecurityContext context, SchemaTableName tableName, PrestoPrincipal principal)\n+    {\n+        if (!isTableOwner(context, tableName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4OTA5Nw=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMzg3Nw==", "bodyText": "I thought about it, and I think it is ok.", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515033877", "createdAt": "2020-10-30T11:32:35Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -263,6 +264,14 @@ public void checkCanRenameColumn(ConnectorSecurityContext context, SchemaTableNa\n         }\n     }\n \n+    @Override\n+    public void checkCanSetTableAuthorization(ConnectorSecurityContext context, SchemaTableName tableName, PrestoPrincipal principal)\n+    {\n+        if (!isTableOwner(context, tableName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4OTA5Nw=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjE4MzUxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyMToxOVrOHpgvbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0NTo0MVrOHpkFqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MDA5Mg==", "bodyText": "Why do you need principal?", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513290092", "createdAt": "2020-10-28T09:21:19Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -771,6 +771,42 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testTableAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").withPrincipal(getSession().getIdentity().getPrincipal()).build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0NDkzNw==", "bodyText": "Wrong copy paste I guess", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513344937", "createdAt": "2020-10-28T10:45:41Z", "author": {"login": "skrzypo987"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -771,6 +771,42 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testTableAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").withPrincipal(getSession().getIdentity().getPrincipal()).build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MDA5Mg=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjE4NDY3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyMTozOFrOHpgwHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyMTozOFrOHpgwHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MDI3MA==", "bodyText": "separate test?", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513290270", "createdAt": "2020-10-28T09:21:38Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -771,6 +771,42 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testTableAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        Session bob = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"bob\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");\n+        assertUpdate(admin, \"CREATE ROLE admin\");\n+\n+        assertUpdate(admin, \"CREATE TABLE test_table_authorization.foo (col int)\");\n+        assertUpdate(admin, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\");\n+        assertQueryFails(bob,\n+                \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\",\n+                \"Access Denied: Cannot set authorization for table test_table_authorization.foo to USER alice\");\n+        assertUpdate(alice, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION bob\");\n+\n+        // TODO Will succeed after https://github.com/prestosql/presto/issues/5706\n+        assertQueryFails(bob, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION ROLE admin\", \"Setting table owner type as a role is not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjE4OTgxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyMjo1OFrOHpgzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyMjo1OFrOHpgzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MTEwMg==", "bodyText": "assertAccessDenied? Then you don't need two users.\nPlease put bob to separate line", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513291102", "createdAt": "2020-10-28T09:22:58Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -771,6 +771,42 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testTableAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        Session bob = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"bob\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");\n+        assertUpdate(admin, \"CREATE ROLE admin\");\n+\n+        assertUpdate(admin, \"CREATE TABLE test_table_authorization.foo (col int)\");\n+        assertUpdate(admin, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\");\n+        assertQueryFails(bob,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjIwMjUwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyNTo1NVrOHpg6-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo1Nzo1NlrOHpkhjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MzA0OQ==", "bodyText": "Now it would be nice to have SHOW CREATE TABLE to return information who is the owner. Then we could use it for tests.\nActually, having CREATE TABLE (...) WITH AUTHORIZATION 'bob' would be a good feature. No need to do two calls CREATE and ALTER. Same for SCHEMA. Let's capture this as github issue, for further discussion.", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513293049", "createdAt": "2020-10-28T09:25:55Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -771,6 +771,42 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testTableAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        Session bob = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"bob\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");\n+        assertUpdate(admin, \"CREATE ROLE admin\");\n+\n+        assertUpdate(admin, \"CREATE TABLE test_table_authorization.foo (col int)\");\n+        assertUpdate(admin, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\");\n+        assertQueryFails(bob,\n+                \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\",\n+                \"Access Denied: Cannot set authorization for table test_table_authorization.foo to USER alice\");\n+        assertUpdate(alice, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION bob\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1MjA3Nw==", "bodyText": "This is the next thing to do. Captured as #5722", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513352077", "createdAt": "2020-10-28T10:57:56Z", "author": {"login": "skrzypo987"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -771,6 +771,42 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testTableAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        Session bob = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"bob\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");\n+        assertUpdate(admin, \"CREATE ROLE admin\");\n+\n+        assertUpdate(admin, \"CREATE TABLE test_table_authorization.foo (col int)\");\n+        assertUpdate(admin, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\");\n+        assertQueryFails(bob,\n+                \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\",\n+                \"Access Denied: Cannot set authorization for table test_table_authorization.foo to USER alice\");\n+        assertUpdate(alice, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION bob\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MzA0OQ=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjIwNzY4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyNzoxMlrOHpg-Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo1ODo0NVrOHpkjRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5Mzg3OA==", "bodyText": "Why alice is allowed, but bob not?", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513293878", "createdAt": "2020-10-28T09:27:12Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -771,6 +771,42 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testTableAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        Session bob = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"bob\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");\n+        assertUpdate(admin, \"CREATE ROLE admin\");\n+\n+        assertUpdate(admin, \"CREATE TABLE test_table_authorization.foo (col int)\");\n+        assertUpdate(admin, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\");\n+        assertQueryFails(bob,\n+                \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\",\n+                \"Access Denied: Cannot set authorization for table test_table_authorization.foo to USER alice\");\n+        assertUpdate(alice, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION bob\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1MjUxOQ==", "bodyText": "alice has been granted ownership earlier. But I will rewrite that test anyway", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513352519", "createdAt": "2020-10-28T10:58:45Z", "author": {"login": "skrzypo987"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -771,6 +771,42 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testTableAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        Session bob = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"bob\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");\n+        assertUpdate(admin, \"CREATE ROLE admin\");\n+\n+        assertUpdate(admin, \"CREATE TABLE test_table_authorization.foo (col int)\");\n+        assertUpdate(admin, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\");\n+        assertQueryFails(bob,\n+                \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\",\n+                \"Access Denied: Cannot set authorization for table test_table_authorization.foo to USER alice\");\n+        assertUpdate(alice, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION bob\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5Mzg3OA=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjIxMjg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/SetTableAuthorizationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyODozM1rOHphBgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyODozM1rOHphBgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5NDcyMg==", "bodyText": "check it before table existance", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513294722", "createdAt": "2020-10-28T09:28:33Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/SetTableAuthorizationTask.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.QualifiedObjectName;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.PrincipalType;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.SetTableAuthorization;\n+import io.prestosql.transaction.TransactionManager;\n+\n+import java.util.List;\n+\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static io.prestosql.metadata.MetadataUtil.createPrincipal;\n+import static io.prestosql.metadata.MetadataUtil.createQualifiedObjectName;\n+import static io.prestosql.spi.StandardErrorCode.NOT_FOUND;\n+import static io.prestosql.spi.StandardErrorCode.ROLE_NOT_FOUND;\n+import static io.prestosql.spi.StandardErrorCode.TABLE_NOT_FOUND;\n+import static io.prestosql.sql.analyzer.SemanticExceptions.semanticException;\n+\n+public class SetTableAuthorizationTask\n+        implements DataDefinitionTask<SetTableAuthorization>\n+{\n+    @Override\n+    public String getName()\n+    {\n+        return \"SET TABLE AUTHORIZATION\";\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> execute(SetTableAuthorization statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n+    {\n+        Session session = stateMachine.getSession();\n+        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getSource());\n+        metadata.getTableHandle(session, tableName)\n+                .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, statement, \"Table '%s' does not exist\", tableName));\n+\n+        CatalogName catalogName = metadata.getCatalogHandle(session, tableName.getCatalogName())\n+                .orElseThrow(() -> new PrestoException(NOT_FOUND, \"Catalog does not exist: \" + tableName.getCatalogName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjIxNzY1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyOTo0MFrOHphEhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyOTo0MFrOHphEhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5NTQ5NQ==", "bodyText": "Set the authorization (owner) of specified table's user/role", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513295495", "createdAt": "2020-10-28T09:29:40Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -199,6 +200,11 @@\n      */\n     void addColumn(Session session, TableHandle tableHandle, ColumnMetadata column);\n \n+    /**\n+     * Set the specified table's user/role.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjIyODY0OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTozMjoxMlrOHphLBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTozMjoxMlrOHphLBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5NzE1OQ==", "bodyText": "@martint Can you please double check the syntax?", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513297159", "createdAt": "2020-10-28T09:32:12Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -64,6 +64,7 @@ statement\n         DROP COLUMN (IF EXISTS)? column=qualifiedName                  #dropColumn\n     | ALTER TABLE (IF EXISTS)? tableName=qualifiedName\n         ADD COLUMN (IF NOT EXISTS)? column=columnDefinition            #addColumn\n+    | ALTER TABLE tableName=qualifiedName SET AUTHORIZATION principal  #setTableAuthorization", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjIzNzQ4OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTozNDoxOFrOHphQbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTozNDoxOFrOHphQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5ODU0Mw==", "bodyText": "Please add test to io.prestosql.sql.parser.TestSqlParser", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r513298543", "createdAt": "2020-10-28T09:34:18Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -64,6 +64,7 @@ statement\n         DROP COLUMN (IF EXISTS)? column=qualifiedName                  #dropColumn\n     | ALTER TABLE (IF EXISTS)? tableName=qualifiedName\n         ADD COLUMN (IF NOT EXISTS)? column=columnDefinition            #addColumn\n+    | ALTER TABLE tableName=qualifiedName SET AUTHORIZATION principal  #setTableAuthorization", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk5MzQxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/alter-table.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNTowM1rOHrK7bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNTowM1rOHrK7bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyOTg2OQ==", "bodyText": "Allow everyone with role public to drop and alter table ``people``::\nNot everyone might have role public. I guess it is a case in Hive, but it might not be somewhere else.", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515029869", "createdAt": "2020-10-30T11:25:03Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/alter-table.rst", "diffHunk": "@@ -60,6 +61,14 @@ Rename column ``id`` to ``user_id`` in the ``users`` table if table ``users`` an\n \n     ALTER TABLE IF EXISTS users RENAME column IF EXISTS id to user_id;\n \n+Change owner of table ``people`` to user ``alice``::\n+\n+    ALTER TABLE people SET AUTHORIZATION alice\n+\n+Allow everyone to drop and alter table ``people``::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk5ODY1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/HiveMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjoyOFrOHrK-dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjoyOFrOHrK-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDY0NA==", "bodyText": "please move it under all table methods", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515030644", "createdAt": "2020-10-30T11:26:28Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/HiveMetastore.java", "diffHunk": "@@ -66,6 +66,8 @@\n \n     void setDatabaseOwner(HiveIdentity identity, String databaseName, HivePrincipal principal);\n \n+    void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk5OTQ4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/RecordingHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjo0MlrOHrK-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjo0MlrOHrK-4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDc1NA==", "bodyText": "please move it under all table methods", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515030754", "createdAt": "2020-10-30T11:26:42Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/RecordingHiveMetastore.java", "diffHunk": "@@ -308,6 +308,13 @@ public void setDatabaseOwner(HiveIdentity identity, String databaseName, HivePri\n         delegate.setDatabaseOwner(identity, databaseName, principal);\n     }\n \n+    @Override\n+    public void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwMDMwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjo1MVrOHrK_SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjo1MVrOHrK_SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDg1Ng==", "bodyText": "please move it under all table methods", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515030856", "createdAt": "2020-10-30T11:26:51Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -360,6 +360,11 @@ public synchronized void setDatabaseOwner(HiveIdentity identity, String source,\n         setExclusive((delegate, hdfsEnvironment) -> delegate.setDatabaseOwner(identity, source, principal));\n     }\n \n+    public synchronized void setTableOwner(HiveIdentity identity, String schema, String table, HivePrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwMDY3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjo1N1rOHrK_fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjo1N1rOHrK_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDkxMQ==", "bodyText": "please move it under all table methods", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515030911", "createdAt": "2020-10-30T11:26:57Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -277,6 +277,12 @@ public void setDatabaseOwner(HiveIdentity identity, String databaseName, HivePri\n         throw new PrestoException(NOT_SUPPORTED, \"setDatabaseOwner\");\n     }\n \n+    @Override\n+    public void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwNDAxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNzo1NFrOHrLBaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNzo1NFrOHrLBaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTQwMw==", "bodyText": "please move it under all table methods", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515031403", "createdAt": "2020-10-30T11:27:54Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -493,6 +493,18 @@ public void setDatabaseOwner(HiveIdentity identity, String databaseName, HivePri\n         }\n     }\n \n+    @Override\n+    public void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwNDk0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyODoxMlrOHrLB-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyODoxMlrOHrLB-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTU0Nw==", "bodyText": "please move it under all table methods", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515031547", "createdAt": "2020-10-30T11:28:12Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -238,6 +238,23 @@ public synchronized void setDatabaseOwner(HiveIdentity identity, String database\n         writeSchemaFile(\"database\", databaseMetadataDirectory, databaseCodec, new DatabaseMetadata(newDatabase), true);\n     }\n \n+    @Override\n+    public synchronized void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwNjQwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/glue/GlueHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyODozNVrOHrLCyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMjo1NjozOFrOHsDPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTc1NA==", "bodyText": "How can we have a test for that?", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515031754", "createdAt": "2020-10-30T11:28:35Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/glue/GlueHiveMetastore.java", "diffHunk": "@@ -536,6 +536,33 @@ public void setDatabaseOwner(HiveIdentity identity, String databaseName, HivePri\n         throw new PrestoException(NOT_SUPPORTED, \"setting the database owner is not supported by Glue\");\n     }\n \n+    @Override\n+    public void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4NzY2OQ==", "bodyText": "I made one in AbstractHiveTest. We'll see if it passes the CI", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515087669", "createdAt": "2020-10-30T13:15:35Z", "author": {"login": "skrzypo987"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/glue/GlueHiveMetastore.java", "diffHunk": "@@ -536,6 +536,33 @@ public void setDatabaseOwner(HiveIdentity identity, String databaseName, HivePri\n         throw new PrestoException(NOT_SUPPORTED, \"setting the database owner is not supported by Glue\");\n     }\n \n+    @Override\n+    public void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTc1NA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1MjQ3OQ==", "bodyText": "Nope, does not work.", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515952479", "createdAt": "2020-11-02T12:56:38Z", "author": {"login": "skrzypo987"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/glue/GlueHiveMetastore.java", "diffHunk": "@@ -536,6 +536,33 @@ public void setDatabaseOwner(HiveIdentity identity, String databaseName, HivePri\n         throw new PrestoException(NOT_SUPPORTED, \"setting the database owner is not supported by Glue\");\n     }\n \n+    @Override\n+    public void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTc1NA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwNzQ0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/BridgingHiveMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyODo1M1rOHrLDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyODo1M1rOHrLDXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTkwMg==", "bodyText": "same, move below table methods, please do the same for other methods as well.", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515031902", "createdAt": "2020-10-30T11:28:53Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/BridgingHiveMetastore.java", "diffHunk": "@@ -198,6 +199,24 @@ public void setDatabaseOwner(HiveIdentity identity, String databaseName, HivePri\n         delegate.alterDatabase(identity, databaseName, toMetastoreApiDatabase(newDatabase));\n     }\n \n+    @Override\n+    public void setTableOwner(HiveIdentity identity, String databaseName, String tableName, HivePrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAyMDM2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozMjoxN1rOHrLKiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozMjoxN1rOHrLKiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMzczOQ==", "bodyText": "Please add a product tests for that (as we don't have unit tests for sql-standard yet).", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515033739", "createdAt": "2020-10-30T11:32:17Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -263,6 +264,14 @@ public void checkCanRenameColumn(ConnectorSecurityContext context, SchemaTableNa\n         }\n     }\n \n+    @Override\n+    public void checkCanSetTableAuthorization(ConnectorSecurityContext context, SchemaTableName tableName, PrestoPrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAyODA2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozNDoyM1rOHrLOuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozNDoyM1rOHrLOuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNDgwOQ==", "bodyText": "Can you please enable it, move TODO to the test body, that way we will test that it fails the way it should", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515034809", "createdAt": "2020-10-30T11:34:23Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -771,6 +771,63 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testTableAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");\n+        assertUpdate(admin, \"CREATE TABLE test_table_authorization.foo (col int)\");\n+\n+        assertAccessDenied(\n+                alice,\n+                \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\",\n+                \"Cannot set authorization for table test_table_authorization.foo to USER alice\");\n+        assertUpdate(admin, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION alice\");\n+        assertUpdate(alice, \"ALTER TABLE test_table_authorization.foo SET AUTHORIZATION admin\");\n+\n+        assertUpdate(admin, \"DROP TABLE test_table_authorization.foo\");\n+        assertUpdate(admin, \"DROP SCHEMA test_table_authorization\");\n+    }\n+\n+    // TODO https://github.com/prestosql/presto/issues/5706\n+    @Test(enabled = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAzODMyOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozNzowOFrOHrLUcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOToxNTo0MlrOHtPODw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNjI3Mg==", "bodyText": "s/qux/testing_user\ns/foo.bar.baz/tesing_catalog.testing_schema.testing_table", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515036272", "createdAt": "2020-10-30T11:37:08Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1626,6 +1630,20 @@ public void testDropColumn()\n         assertStatement(\"ALTER TABLE IF EXISTS foo.t DROP COLUMN IF EXISTS c\", new DropColumn(QualifiedName.of(\"foo\", \"t\"), identifier(\"c\"), true, true));\n     }\n \n+    @Test\n+    public void testAlterTableSetAuthorization()\n+    {\n+        assertStatement(\n+                \"ALTER TABLE foo.bar.baz SET AUTHORIZATION qux\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4NzYyNg==", "bodyText": "The whole class is filled with foos and bars. Using something else here will be inconsistent.", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r515087626", "createdAt": "2020-10-30T13:15:30Z", "author": {"login": "skrzypo987"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1626,6 +1630,20 @@ public void testDropColumn()\n         assertStatement(\"ALTER TABLE IF EXISTS foo.t DROP COLUMN IF EXISTS c\", new DropColumn(QualifiedName.of(\"foo\", \"t\"), identifier(\"c\"), true, true));\n     }\n \n+    @Test\n+    public void testAlterTableSetAuthorization()\n+    {\n+        assertStatement(\n+                \"ALTER TABLE foo.bar.baz SET AUTHORIZATION qux\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNjI3Mg=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1NTY0OQ==", "bodyText": "maybe it's better to not add to this foo.bar.baz habbit then?", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r516755649", "createdAt": "2020-11-03T15:31:52Z", "author": {"login": "s2lomon"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1626,6 +1630,20 @@ public void testDropColumn()\n         assertStatement(\"ALTER TABLE IF EXISTS foo.t DROP COLUMN IF EXISTS c\", new DropColumn(QualifiedName.of(\"foo\", \"t\"), identifier(\"c\"), true, true));\n     }\n \n+    @Test\n+    public void testAlterTableSetAuthorization()\n+    {\n+        assertStatement(\n+                \"ALTER TABLE foo.bar.baz SET AUTHORIZATION qux\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNjI3Mg=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5NzMyNw==", "bodyText": "I highly disagree. Holding a bad (in your opinion) convention is better than breaking it.", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r517197327", "createdAt": "2020-11-04T09:15:42Z", "author": {"login": "skrzypo987"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1626,6 +1630,20 @@ public void testDropColumn()\n         assertStatement(\"ALTER TABLE IF EXISTS foo.t DROP COLUMN IF EXISTS c\", new DropColumn(QualifiedName.of(\"foo\", \"t\"), identifier(\"c\"), true, true));\n     }\n \n+    @Test\n+    public void testAlterTableSetAuthorization()\n+    {\n+        assertStatement(\n+                \"ALTER TABLE foo.bar.baz SET AUTHORIZATION qux\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNjI3Mg=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODY1NTY4OnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozNTo0NFrOHs0cXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOToyMTo1NFrOHtPdsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1ODYyMw==", "bodyText": "I wonder whether it wouldn't be better to have 3 tests here... with proper names of the test cases that they are checking.", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r516758623", "createdAt": "2020-11-03T15:35:44Z", "author": {"login": "s2lomon"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -487,6 +488,19 @@ public void testTableRulesForCheckCanRenameColumn()\n         assertAccessDenied(() -> accessControl.checkCanRenameColumn(BOB, new CatalogSchemaTableName(\"some-catalog\", \"bobschema\", \"bobtable\")), RENAME_COLUMNS_ACCESS_DENIED_MESSAGE);\n     }\n \n+    @Test\n+    public void testTableRulesForCheckCanSetTableAuthorization()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIwMTMyOA==", "bodyText": "The test is made according to how the class is written.\ntestTableRules means we are testing multiple rules. Is it TDD or any other testing acronym compliant - probably not. Just like the whole Presto", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r517201328", "createdAt": "2020-11-04T09:21:54Z", "author": {"login": "skrzypo987"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -487,6 +488,19 @@ public void testTableRulesForCheckCanRenameColumn()\n         assertAccessDenied(() -> accessControl.checkCanRenameColumn(BOB, new CatalogSchemaTableName(\"some-catalog\", \"bobschema\", \"bobtable\")), RENAME_COLUMNS_ACCESS_DENIED_MESSAGE);\n     }\n \n+    @Test\n+    public void testTableRulesForCheckCanSetTableAuthorization()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1ODYyMw=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODY2MzQ4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSqlStandardAccessControlChecks.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTozNzoxOVrOHs0hDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOToyNTozNlrOHtPnUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1OTgyMg==", "bodyText": "I'm not sure I understand the case of this test. Maybe a better name would make it clearer? What kind of scenario is it?", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r516759822", "createdAt": "2020-11-03T15:37:19Z", "author": {"login": "s2lomon"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSqlStandardAccessControlChecks.java", "diffHunk": "@@ -212,6 +212,15 @@ public void testAccessControlSelectWithCaseSensitiveUserName()\n         assertThat(caseSensitiveUserNameExecutor.executeQuery(format(\"SELECT * FROM %s\", viewName))).hasNoRows();\n     }\n \n+    @Test(groups = {AUTHORIZATION, PROFILE_SPECIFIC_TESTS})\n+    public void testAccessControlSetTableAuthorization()\n+    {\n+        assertThat(() -> bobExecutor.executeQuery(format(\"ALTER TABLE %s SET AUTHORIZATION bob\", tableName)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIwMzc5Mw==", "bodyText": "It's a simple smoke test of whether only an owner can set table authorization.\nIt checks the checkCanSetTableAuthorization method in SqlStandardAccessControl.\nAgain this is compliant with the rest of this class as of naming.", "url": "https://github.com/trinodb/trino/pull/5717#discussion_r517203793", "createdAt": "2020-11-04T09:25:36Z", "author": {"login": "skrzypo987"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSqlStandardAccessControlChecks.java", "diffHunk": "@@ -212,6 +212,15 @@ public void testAccessControlSelectWithCaseSensitiveUserName()\n         assertThat(caseSensitiveUserNameExecutor.executeQuery(format(\"SELECT * FROM %s\", viewName))).hasNoRows();\n     }\n \n+    @Test(groups = {AUTHORIZATION, PROFILE_SPECIFIC_TESTS})\n+    public void testAccessControlSetTableAuthorization()\n+    {\n+        assertThat(() -> bobExecutor.executeQuery(format(\"ALTER TABLE %s SET AUTHORIZATION bob\", tableName)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1OTgyMg=="}, "originalCommit": null, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4558, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}