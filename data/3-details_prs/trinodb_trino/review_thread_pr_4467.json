{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzM0Nzc4", "number": 4467, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NDo1NFrOEPR2sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0NzoyMVrOEPbsSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDU2NjI2OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NDo1NFrOGy6I7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTo1NjowNVrOGy-Mug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNDU0MQ==", "bodyText": "why not just\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (isFloatingPointNaN(type, min) || isFloatingPointNaN(type, max)) {\n          \n          \n            \n                        if (Float.isNaN(floatStatistics.getMin()) || Float.isNaN(floatStatistics.getMax())) {\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456034541", "createdAt": "2020-07-16T19:44:54Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -192,9 +193,12 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n \n-            ParquetIntegerStatistics parquetStatistics = new ParquetIntegerStatistics(\n-                    (long) floatToRawIntBits(floatStatistics.getMin()),\n-                    (long) floatToRawIntBits(floatStatistics.getMax()));\n+            long min = floatToIntBits(floatStatistics.getMin());\n+            long max = floatToIntBits(floatStatistics.getMax());\n+            if (isFloatingPointNaN(type, min) || isFloatingPointNaN(type, max)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwMTA1MA==", "bodyText": "Silly.  The first version was trying to do it more generically and when I refactored, I copied/pasted.", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456101050", "createdAt": "2020-07-16T21:56:05Z", "author": {"login": "aalbu"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -192,9 +193,12 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n \n-            ParquetIntegerStatistics parquetStatistics = new ParquetIntegerStatistics(\n-                    (long) floatToRawIntBits(floatStatistics.getMin()),\n-                    (long) floatToRawIntBits(floatStatistics.getMax()));\n+            long min = floatToIntBits(floatStatistics.getMin());\n+            long max = floatToIntBits(floatStatistics.getMax());\n+            if (isFloatingPointNaN(type, min) || isFloatingPointNaN(type, max)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNDU0MQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDU2NzUxOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NTowN1rOGy6Jng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NTowN1rOGy6Jng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNDcxOA==", "bodyText": "as above", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456034718", "createdAt": "2020-07-16T19:45:07Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -205,6 +209,10 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 failWithCorruptionException(failOnCorruptedParquetStatistics, column, id, doubleStatistics);\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n+            if (isFloatingPointNaN(type, doubleStatistics.genericGetMin()) || isFloatingPointNaN(type, doubleStatistics.genericGetMax())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDU2OTc4OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NTozM1rOGy6K5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NTozM1rOGy6K5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNTA0NA==", "bodyText": "Double.isNaN", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456035044", "createdAt": "2020-07-16T19:45:33Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -316,6 +324,9 @@ public static Domain getDomain(Type type, DictionaryDescriptor dictionaryDescrip\n         if (type.equals(DOUBLE) && columnDescriptor.getPrimitiveType().getPrimitiveTypeName() == PrimitiveTypeName.DOUBLE) {\n             List<Domain> domains = new ArrayList<>();\n             for (int i = 0; i < dictionarySize; i++) {\n+                if (isFloatingPointNaN(type, dictionary.decodeToDouble(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDU3MDE0OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NTozOVrOGy6LJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NTozOVrOGy6LJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNTExMQ==", "bodyText": "probably same", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456035111", "createdAt": "2020-07-16T19:45:39Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -325,6 +336,9 @@ public static Domain getDomain(Type type, DictionaryDescriptor dictionaryDescrip\n         if (type.equals(DOUBLE) && columnDescriptor.getPrimitiveType().getPrimitiveTypeName() == PrimitiveTypeName.FLOAT) {\n             List<Domain> domains = new ArrayList<>();\n             for (int i = 0; i < dictionarySize; i++) {\n+                if (isFloatingPointNaN(type, dictionary.decodeToFloat(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjE0NjEyOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzozNzoyM1rOGzIoYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzozNzo1NlrOGzTWGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MTk2OA==", "bodyText": "why the switch? Should not matter as for non-NaNs behaviour is the same. Yet I am curious.", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456271968", "createdAt": "2020-07-17T07:37:23Z", "author": {"login": "losipiuk"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -191,11 +191,13 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 failWithCorruptionException(failOnCorruptedParquetStatistics, column, id, floatStatistics);\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n+            if (floatStatistics.genericGetMin().isNaN() || floatStatistics.genericGetMax().isNaN()) {\n+                return Domain.create(ValueSet.all(type), hasNullValue);\n+            }\n \n             ParquetIntegerStatistics parquetStatistics = new ParquetIntegerStatistics(\n-                    (long) floatToRawIntBits(floatStatistics.getMin()),\n-                    (long) floatToRawIntBits(floatStatistics.getMax()));\n-\n+                    (long) floatToIntBits(floatStatistics.getMin()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyODExMA==", "bodyText": "Simply because we know that the value isn't NaN.  It isn't a necessary change, so I can roll it back.", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456428110", "createdAt": "2020-07-17T13:03:41Z", "author": {"login": "aalbu"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -191,11 +191,13 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 failWithCorruptionException(failOnCorruptedParquetStatistics, column, id, floatStatistics);\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n+            if (floatStatistics.genericGetMin().isNaN() || floatStatistics.genericGetMax().isNaN()) {\n+                return Domain.create(ValueSet.all(type), hasNullValue);\n+            }\n \n             ParquetIntegerStatistics parquetStatistics = new ParquetIntegerStatistics(\n-                    (long) floatToRawIntBits(floatStatistics.getMin()),\n-                    (long) floatToRawIntBits(floatStatistics.getMax()));\n-\n+                    (long) floatToIntBits(floatStatistics.getMin()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MTk2OA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyOTg4Mw==", "bodyText": "Actually if we know that value is not NaN calling to floatToRawIntBits seems more natural. As this is floatToIntBits which has NaN handling.\nHere is code of floatToIntBits():\n    public static int floatToIntBits(float value) {\n        if (!isNaN(value)) {\n            return floatToRawIntBits(value);\n        }\n        return 0x7fc00000;\n    }", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456429883", "createdAt": "2020-07-17T13:07:00Z", "author": {"login": "losipiuk"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -191,11 +191,13 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 failWithCorruptionException(failOnCorruptedParquetStatistics, column, id, floatStatistics);\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n+            if (floatStatistics.genericGetMin().isNaN() || floatStatistics.genericGetMax().isNaN()) {\n+                return Domain.create(ValueSet.all(type), hasNullValue);\n+            }\n \n             ParquetIntegerStatistics parquetStatistics = new ParquetIntegerStatistics(\n-                    (long) floatToRawIntBits(floatStatistics.getMin()),\n-                    (long) floatToRawIntBits(floatStatistics.getMax()));\n-\n+                    (long) floatToIntBits(floatStatistics.getMin()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MTk2OA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0NzUxNQ==", "bodyText": "Thanks, I got my wires crossed there.", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456447515", "createdAt": "2020-07-17T13:37:56Z", "author": {"login": "aalbu"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -191,11 +191,13 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 failWithCorruptionException(failOnCorruptedParquetStatistics, column, id, floatStatistics);\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n+            if (floatStatistics.genericGetMin().isNaN() || floatStatistics.genericGetMax().isNaN()) {\n+                return Domain.create(ValueSet.all(type), hasNullValue);\n+            }\n \n             ParquetIntegerStatistics parquetStatistics = new ParquetIntegerStatistics(\n-                    (long) floatToRawIntBits(floatStatistics.getMin()),\n-                    (long) floatToRawIntBits(floatStatistics.getMax()));\n-\n+                    (long) floatToIntBits(floatStatistics.getMin()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MTk2OA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjE3NzczOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0NzoxNlrOGzI7Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0NzoxNlrOGzI7Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3Njc5MQ==", "bodyText": "extract dictionary.decodeToDouble(i) as variable\n(shouldn't matter in practice but still)", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456276791", "createdAt": "2020-07-17T07:47:16Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -316,6 +322,9 @@ public static Domain getDomain(Type type, DictionaryDescriptor dictionaryDescrip\n         if (type.equals(DOUBLE) && columnDescriptor.getPrimitiveType().getPrimitiveTypeName() == PrimitiveTypeName.DOUBLE) {\n             List<Domain> domains = new ArrayList<>();\n             for (int i = 0; i < dictionarySize; i++) {\n+                if (Double.isNaN(dictionary.decodeToDouble(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjE3ODAxOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0NzoyMVrOGzI7ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0NzoyMVrOGzI7ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3Njg0Mg==", "bodyText": "variable", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456276842", "createdAt": "2020-07-17T07:47:21Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -325,6 +334,9 @@ public static Domain getDomain(Type type, DictionaryDescriptor dictionaryDescrip\n         if (type.equals(DOUBLE) && columnDescriptor.getPrimitiveType().getPrimitiveTypeName() == PrimitiveTypeName.FLOAT) {\n             List<Domain> domains = new ArrayList<>();\n             for (int i = 0; i < dictionarySize; i++) {\n+                if (Float.isNaN(dictionary.decodeToFloat(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3655, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}