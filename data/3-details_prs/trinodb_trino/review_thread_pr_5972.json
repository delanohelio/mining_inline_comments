{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNzI2Njg1", "number": 5972, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyNjo1M1rOE5ig8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0NjoyMlrOE7d2vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzY5Nzc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyNjo1M1rOH0D3NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyNjoxMVrOH0ruMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MTI4NA==", "bodyText": "Not introduced in this PR, but this should use the regular PagesSerdeFactory instead of TestingPagesSerdeFactory since the testing version produces a PagesSerde that includes extra synchronization that might be material in the benchmark results.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r524351284", "createdAt": "2020-11-16T15:26:53Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -187,30 +292,20 @@ public void setup(Iterator<Page> pagesIterator)\n             dataSource = sliceOutput.slice();\n         }\n \n-        public void setup(Type type, Iterator<?> values)\n+        public <T> void setup(Type type, Iterator<T> values, BiConsumer<BlockBuilder, T> writer)\n                 throws Exception\n         {\n             pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY4MjgxNg==", "bodyText": "Curious, do you happen to know why the testing one is more synchronized?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r524682816", "createdAt": "2020-11-16T22:30:27Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -187,30 +292,20 @@ public void setup(Iterator<Page> pagesIterator)\n             dataSource = sliceOutput.slice();\n         }\n \n-        public void setup(Type type, Iterator<?> values)\n+        public <T> void setup(Type type, Iterator<T> values, BiConsumer<BlockBuilder, T> writer)\n                 throws Exception\n         {\n             pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MTI4NA=="}, "originalCommit": null, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY5OTc5MA==", "bodyText": "I assume that it\u2019s because PagesSerDe is not thread safe and adding synchronized to the methods was deemed easier to use in multi threaded  tests.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r524699790", "createdAt": "2020-11-16T22:46:41Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -187,30 +292,20 @@ public void setup(Iterator<Page> pagesIterator)\n             dataSource = sliceOutput.slice();\n         }\n \n-        public void setup(Type type, Iterator<?> values)\n+        public <T> void setup(Type type, Iterator<T> values, BiConsumer<BlockBuilder, T> writer)\n                 throws Exception\n         {\n             pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MTI4NA=="}, "originalCommit": null, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNDMzNw==", "bodyText": "@pettyjamesm we don't use synchronized factory here. Synchronized factory is only used when io.prestosql.execution.buffer.TestingPagesSerdeFactory#testingPagesSerde is used. It's not used here", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r525004337", "createdAt": "2020-11-17T09:26:11Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -187,30 +292,20 @@ public void setup(Iterator<Page> pagesIterator)\n             dataSource = sliceOutput.slice();\n         }\n \n-        public void setup(Type type, Iterator<?> values)\n+        public <T> void setup(Type type, Iterator<T> values, BiConsumer<BlockBuilder, T> writer)\n                 throws Exception\n         {\n             pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MTI4NA=="}, "originalCommit": null, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTUwNTkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoyNzo1M1rOH0pc8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTo1MjowNVrOH2U-hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NzE1NQ==", "bodyText": "Commit message is ambiguous. Can you please be more specific?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r524967155", "createdAt": "2020-11-17T08:27:53Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -27,7 +27,6 @@\n import io.prestosql.spi.type.Decimals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyODgzOQ==", "bodyText": "Is it better now?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r526728839", "createdAt": "2020-11-19T09:52:05Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -27,7 +27,6 @@\n import io.prestosql.spi.type.Decimals;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NzE1NQ=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTUxNzEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODozMDozOFrOH0pjmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDowMTo1NlrOH2VY2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2ODg1OQ==", "bodyText": "Is it possible to use composition instead? So you would have single TypeBenchmarkData class to which you would inject customizations.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r524968859", "createdAt": "2020-11-17T08:30:38Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -245,44 +237,38 @@ public Slice getDataSource()\n         }\n     }\n \n-    @State(Thread)\n-    public static class LongDecimalNoNullBenchmarkData\n+    public abstract static class TypeBenchmarkData<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczNTU3Ng==", "bodyText": "JMH has its requirements. I think this is as close to composition as it can get.\nI am going to think about it when merging those cases with BenchmarkColumnReaders in the following PR", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r526735576", "createdAt": "2020-11-19T10:01:56Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -245,44 +237,38 @@ public Slice getDataSource()\n         }\n     }\n \n-    @State(Thread)\n-    public static class LongDecimalNoNullBenchmarkData\n+    public abstract static class TypeBenchmarkData<T>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2ODg1OQ=="}, "originalCommit": null, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTc1MTI1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyNzoyNlrOH0rxww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozNTo0OVrOH3ICiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNTI1MQ==", "bodyText": "These benchmarks were intentionally similar to BenchmarkColumnReaders. Could we keep them uniform? This most likely requires extraction of datagen to some external utility. However, we could then also benchmark Parquet in similar way and do head-to-head comparisons with different serde.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r525005251", "createdAt": "2020-11-17T09:27:26Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -50,6 +49,8 @@\n import java.util.List;\n import java.util.Random;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczMDEyNw==", "bodyText": "How about I handle that in a following PR? This looks pretty straightforward but I don't want to keep hanging for too long.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r526730127", "createdAt": "2020-11-19T09:54:07Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -50,6 +49,8 @@\n import java.util.List;\n import java.util.Random;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNTI1MQ=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NTQ0OA==", "bodyText": "Sure, we can do this as following PR", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527565448", "createdAt": "2020-11-20T09:35:49Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -50,6 +49,8 @@\n import java.util.List;\n import java.util.Random;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNTI1MQ=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTc1OTk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyOToyOVrOH0r3RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDozMTozM1rOH3KFYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjY2MA==", "bodyText": "Could we extract data generation, so that new way of data gen is also used in io.prestosql.orc.BenchmarkColumnReaders (and potentially Parquet too)?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r525006660", "createdAt": "2020-11-17T09:29:29Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -384,10 +385,13 @@ public void setup()\n     public static class LongDecimalWithNullBenchmarkData\n             extends LongDecimalBenchmarkData\n     {\n+        @Param({\".01\", \".10\", \".50\", \".90\", \".99\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczNzAwMg==", "bodyText": "Those params cannot unfortunately be extracted. So every case needs to have this field.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r526737002", "createdAt": "2020-11-19T10:04:16Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -384,10 +385,13 @@ public void setup()\n     public static class LongDecimalWithNullBenchmarkData\n             extends LongDecimalBenchmarkData\n     {\n+        @Param({\".01\", \".10\", \".50\", \".90\", \".99\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjY2MA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3MzAxNw==", "bodyText": "Those params cannot unfortunately be extracted. So every case needs to have this field.\n\nThese params could be part of io.prestosql.execution.buffer.BenchmarkBlockSerde.BenchmarkData (then they need to be defined once)\nio.prestosql.execution.buffer.BenchmarkBlockSerde.BenchmarkData could accept some data generator.\nThis would the composition that @kokosing mentioned.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527573017", "createdAt": "2020-11-20T09:48:31Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -384,10 +385,13 @@ public void setup()\n     public static class LongDecimalWithNullBenchmarkData\n             extends LongDecimalBenchmarkData\n     {\n+        @Param({\".01\", \".10\", \".50\", \".90\", \".99\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjY2MA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5ODk0NQ==", "bodyText": "I am going to see if JMH will work with that.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527598945", "createdAt": "2020-11-20T10:31:33Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -384,10 +385,13 @@ public void setup()\n     public static class LongDecimalWithNullBenchmarkData\n             extends LongDecimalBenchmarkData\n     {\n+        @Param({\".01\", \".10\", \".50\", \".90\", \".99\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjY2MA=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTc2NjcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozMDo1NlrOH0r7iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozMDo1NlrOH0r7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNzc1Mg==", "bodyText": "you can remove constructor in TestingPagesSerdeFactory too", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r525007752", "createdAt": "2020-11-17T09:30:56Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -284,7 +284,7 @@ public Object deserializeLineitem(LineitemBenchmarkData data)\n         public void setup(Iterator<Page> pagesIterator)\n                 throws Exception\n         {\n-            pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();\n+            pagesSerde = new PagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzg4MTQzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozOTo1NVrOH3IL3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoxMjowN1rOH3JYvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NzgzNg==", "bodyText": "why not just pass null change as TypeBenchmarkData param?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527567836", "createdAt": "2020-11-20T09:39:55Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -245,44 +237,38 @@ public Slice getDataSource()\n         }\n     }\n \n-    @State(Thread)\n-    public static class LongDecimalNoNullBenchmarkData\n+    public abstract static class TypeBenchmarkData<T>\n             extends BenchmarkData\n     {\n-        @Setup\n-        public void setup()\n-                throws Exception\n+        private final Type type;\n+        private final Function<Random, T> valueGenerator;\n+        private final BiConsumer<BlockBuilder, T> blockWriter;\n+\n+        public TypeBenchmarkData(Type type, Function<Random, T> valueGenerator, BiConsumer<BlockBuilder, T> blockWriter)\n         {\n-            setup(LONG_DECIMAL_TYPE, createValues());\n+            this.type = requireNonNull(type, \"type is null\");\n+            this.valueGenerator = requireNonNull(valueGenerator, \"valueGenerator is null\");\n+            this.blockWriter = requireNonNull(blockWriter, \"blockWriter is null\");\n         }\n \n-        private Iterator<?> createValues()\n+        protected double getNullChance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4NzUxOQ==", "bodyText": "Param annotation only work with fields (I think) and fields are not available in constructor.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527587519", "createdAt": "2020-11-20T10:12:07Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -245,44 +237,38 @@ public Slice getDataSource()\n         }\n     }\n \n-    @State(Thread)\n-    public static class LongDecimalNoNullBenchmarkData\n+    public abstract static class TypeBenchmarkData<T>\n             extends BenchmarkData\n     {\n-        @Setup\n-        public void setup()\n-                throws Exception\n+        private final Type type;\n+        private final Function<Random, T> valueGenerator;\n+        private final BiConsumer<BlockBuilder, T> blockWriter;\n+\n+        public TypeBenchmarkData(Type type, Function<Random, T> valueGenerator, BiConsumer<BlockBuilder, T> blockWriter)\n         {\n-            setup(LONG_DECIMAL_TYPE, createValues());\n+            this.type = requireNonNull(type, \"type is null\");\n+            this.valueGenerator = requireNonNull(valueGenerator, \"valueGenerator is null\");\n+            this.blockWriter = requireNonNull(blockWriter, \"blockWriter is null\");\n         }\n \n-        private Iterator<?> createValues()\n+        protected double getNullChance()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NzgzNg=="}, "originalCommit": null, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzg5MTEzOnYy", "diffSide": "LEFT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0MjoxOVrOH3IReA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDowOTowN1rOH3JR5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2OTI3Mg==", "bodyText": "Why remove these? Now every TypeBenchmarkData needs to know how to serialize values.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527569272", "createdAt": "2020-11-20T09:42:19Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -187,30 +189,20 @@ public void setup(Iterator<Page> pagesIterator)\n             dataSource = sliceOutput.slice();\n         }\n \n-        public void setup(Type type, Iterator<?> values)\n+        public <T> void setup(Type type, Iterator<T> values, BiConsumer<BlockBuilder, T> writer)\n                 throws Exception\n         {\n             pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();\n             PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(type));\n             BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(0);\n             ImmutableList.Builder<Page> pagesBuilder = ImmutableList.builder();\n             while (values.hasNext()) {\n-                Object value = values.next();\n+                T value = values.next();\n                 if (value == null) {\n                     blockBuilder.appendNull();\n                 }\n-                else if (BIGINT.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4NTc2NQ==", "bodyText": "Seemed more object-oriented. But I don't see any significant value here so I'll revert", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527585765", "createdAt": "2020-11-20T10:09:07Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -187,30 +189,20 @@ public void setup(Iterator<Page> pagesIterator)\n             dataSource = sliceOutput.slice();\n         }\n \n-        public void setup(Type type, Iterator<?> values)\n+        public <T> void setup(Type type, Iterator<T> values, BiConsumer<BlockBuilder, T> writer)\n                 throws Exception\n         {\n             pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();\n             PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(type));\n             BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(0);\n             ImmutableList.Builder<Page> pagesBuilder = ImmutableList.builder();\n             while (values.hasNext()) {\n-                Object value = values.next();\n+                T value = values.next();\n                 if (value == null) {\n                     blockBuilder.appendNull();\n                 }\n-                else if (BIGINT.equals(type)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2OTI3Mg=="}, "originalCommit": null, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzkwNTkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0NjoyMlrOH3Iaiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0NjoyMlrOH3Iaiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3MTU5NQ==", "bodyText": "also add benchmarks for Int128ArrayBlock?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527571595", "createdAt": "2020-11-20T09:46:22Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -103,6 +109,30 @@ public Object deserializeLongDecimalWithNull(LongDecimalWithNullBenchmarkData da\n         return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n     }\n \n+    @Benchmark\n+    public Object serializeInt96NoNull(LongTimestampBenchmarkData data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4797, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}