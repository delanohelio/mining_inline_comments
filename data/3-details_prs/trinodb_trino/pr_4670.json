{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODkwMzM4", "number": 4670, "title": "Support missingColumnsOnInsert in the Phoenix Connector.", "bodyText": "See #4562\nThis is needed to provide for expected Phoenix INSERT semantics, specifically when inserting using an existing row key. Without this previous values of columns would be incorrectly overwritten.\nPhoenix indicates NULL columns by not storing them. When an existing row is updated whatever the old value of a non-specified column was, should be retained.\nThis adds the functionality, still need to think about tests.", "createdAt": "2020-08-03T01:04:26Z", "url": "https://github.com/trinodb/trino/pull/4670", "merged": true, "mergeCommit": {"oid": "186fba65aef08b574638181ce90f41dff4ab79d8"}, "closed": true, "closedAt": "2020-08-09T14:58:04Z", "author": {"login": "lhofhansl"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8DftGgFqTQ2MjA4MTg5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9CLNbgH2gAyNDYxODkwMzM4OjMyZDk1NTM1ZDQ5ZjI4ZDU3MzQ0NmRiNDI2NDY1MzRiOGYyM2I3MzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDgxODk3", "url": "https://github.com/trinodb/trino/pull/4670#pullrequestreview-462081897", "createdAt": "2020-08-05T23:05:53Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDUzNDEx", "url": "https://github.com/trinodb/trino/pull/4670#pullrequestreview-463053411", "createdAt": "2020-08-07T06:01:14Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowMToxNVrOG9NhUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowMTo0NVrOG9Nhwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNzg0Mw==", "bodyText": "Can we move all the SQL Keywords to Upper case", "url": "https://github.com/trinodb/trino/pull/4670#discussion_r466837843", "createdAt": "2020-08-07T06:01:15Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixIntegrationSmokeTest.java", "diffHunk": "@@ -178,6 +178,16 @@ public void testCaseInsensitiveNameMatching()\n         assertQuery(\"SELECT Val1 FROM testcaseinsensitive where Val1 < 1.2\", \"SELECT 1.1\");\n     }\n \n+    @Test\n+    public void testMissingColumnsOnInsert()\n+            throws Exception\n+    {\n+        executeInPhoenix(\"create table tpch.test_col_insert(pk varchar not null primary key, col1 varchar, col2 varchar)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNzk1NA==", "bodyText": "Can we add a non-null check here", "url": "https://github.com/trinodb/trino/pull/4670#discussion_r466837954", "createdAt": "2020-08-07T06:01:45Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixOutputTableHandle.java", "diffHunk": "@@ -34,15 +34,15 @@ public PhoenixOutputTableHandle(\n             @JsonProperty(\"columnNames\") List<String> columnNames,\n             @JsonProperty(\"columnTypes\") List<Type> columnTypes,\n             @JsonProperty(\"jdbcColumnTypes\") Optional<List<JdbcTypeHandle>> jdbcColumnTypes,\n-            @JsonProperty(\"hadUUIDRowkey\") boolean hasUUIDRowkey)\n+            @JsonProperty(\"rowkeyColumn\") Optional<String> rowkeyColumn)\n     {\n         super(\"\", schemaName.orElse(null), tableName, columnNames, columnTypes, jdbcColumnTypes, \"\");\n-        this.hasUuidRowKey = hasUUIDRowkey;\n+        this.rowkeyColumn = rowkeyColumn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzg5OTE5", "url": "https://github.com/trinodb/trino/pull/4670#pullrequestreview-463789919", "createdAt": "2020-08-08T08:54:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODo1NDowMlrOG9wDvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwOTowMzoxMlrOG9wUYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQwMzcxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .map(column -> SchemaUtil.getEscapedArgument(column))\n          \n          \n            \n                            .map(SchemaUtil::getEscapedArgument)", "url": "https://github.com/trinodb/trino/pull/4670#discussion_r467403710", "createdAt": "2020-08-08T08:54:02Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixClient.java", "diffHunk": "@@ -205,15 +207,20 @@ public String buildInsertSql(JdbcOutputTableHandle handle)\n     {\n         PhoenixOutputTableHandle outputHandle = (PhoenixOutputTableHandle) handle;\n         String params = join(\",\", nCopies(handle.getColumnNames().size(), \"?\"));\n-        if (outputHandle.hasUUIDRowkey()) {\n+        String columns = handle.getColumnNames().stream()\n+                .map(column -> SchemaUtil.getEscapedArgument(column))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQwNzk3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter(column -> ROWKEY.equalsIgnoreCase(column.getColumnName()))\n          \n          \n            \n                            .map(JdbcColumnHandle::getColumnName)\n          \n          \n            \n                            .map(JdbcColumnHandle::getColumnName)\n          \n          \n            \n                            .filter(ROWKEY::equalsIgnoreCase)\n          \n      \n    \n    \n  \n\nWhat if we could switch two lines, would it be better ?", "url": "https://github.com/trinodb/trino/pull/4670#discussion_r467407970", "createdAt": "2020-08-08T09:03:12Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java", "diffHunk": "@@ -246,25 +246,29 @@ public ConnectorOutputTableHandle beginCreateTable(ConnectorSession session, Con\n     @Override\n     public boolean supportsMissingColumnsOnInsert()\n     {\n-        return false;\n+        return true;\n     }\n \n     @Override\n     public ConnectorInsertTableHandle beginInsert(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> columns)\n     {\n         JdbcTableHandle handle = (JdbcTableHandle) tableHandle;\n-        List<JdbcColumnHandle> allColumns = phoenixClient.getColumns(session, handle);\n-        List<JdbcColumnHandle> nonRowkeyColumns = allColumns.stream()\n-                .filter(column -> !ROWKEY.equalsIgnoreCase(column.getColumnName()))\n+        Optional<String> rowkeyColumn = phoenixClient.getColumns(session, handle).stream()\n+                .filter(column -> ROWKEY.equalsIgnoreCase(column.getColumnName()))\n+                .map(JdbcColumnHandle::getColumnName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d95535d49f28d573446db42646534b8f23b732", "author": {"user": {"login": "lhofhansl", "name": null}}, "url": "https://github.com/trinodb/trino/commit/32d95535d49f28d573446db42646534b8f23b732", "committedDate": "2020-08-09T00:07:31Z", "message": "Support missingColumnsOnInsert in the Phoenix Connector.\n\nThis is needed to provide the expected Phoenix INSERT semantics,\nspecifically when inserting using an existing row key.\nWithout this previous values of columns not specified in the INSERT list\nwould be incorrectly overwritten with NULL."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4601, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}