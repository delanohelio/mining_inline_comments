{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NTcwNDkw", "number": 5633, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo0NjoxOVrOEwUbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo0NjoxOVrOEwUbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTAxODY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo0NjoxOVrOHlzTPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTowODo0OVrOHmmleA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5OTg2OA==", "bodyText": "Why case insensitive? What does that mean for a VARBINARY?", "url": "https://github.com/trinodb/trino/pull/5633#discussion_r509399868", "createdAt": "2020-10-21T15:46:19Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -79,12 +83,22 @@\n     @Test\n     public void testEncode()\n     {\n-        assertEncode(utf8Slice(\"hello\"), VARBINARY, literalVarbinary(\"hello\".getBytes(UTF_8)));\n+        assertEncodeCaseInsensitively(utf8Slice(\"hello\"), VARBINARY, literalVarbinary(\"hello\".getBytes(UTF_8)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwMjA3NA==", "bodyText": "the function name here is a different case than expected\nhttps://github.com/prestosql/presto/blob/45c96e71f6fb88d1ee4fc2a930e74d88328f2151/presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java#L111\ni guess @dain will know better", "url": "https://github.com/trinodb/trino/pull/5633#discussion_r509402074", "createdAt": "2020-10-21T15:49:14Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -79,12 +83,22 @@\n     @Test\n     public void testEncode()\n     {\n-        assertEncode(utf8Slice(\"hello\"), VARBINARY, literalVarbinary(\"hello\".getBytes(UTF_8)));\n+        assertEncodeCaseInsensitively(utf8Slice(\"hello\"), VARBINARY, literalVarbinary(\"hello\".getBytes(UTF_8)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5OTg2OA=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0MDEyMA==", "bodyText": "@martint while i think it's valuable thing to fix, i don't want the PR to get blocked on it. That's why i kept current method as deprecated.", "url": "https://github.com/trinodb/trino/pull/5633#discussion_r510240120", "createdAt": "2020-10-22T15:08:49Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -79,12 +83,22 @@\n     @Test\n     public void testEncode()\n     {\n-        assertEncode(utf8Slice(\"hello\"), VARBINARY, literalVarbinary(\"hello\".getBytes(UTF_8)));\n+        assertEncodeCaseInsensitively(utf8Slice(\"hello\"), VARBINARY, literalVarbinary(\"hello\".getBytes(UTF_8)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5OTg2OA=="}, "originalCommit": null, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4491, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}