{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NTMyODQ2", "number": 5874, "title": "Support multiple LDAP user bind patterns", "bodyText": "", "createdAt": "2020-11-09T07:06:14Z", "url": "https://github.com/trinodb/trino/pull/5874", "merged": true, "mergeCommit": {"oid": "05409df1da9cf5ed2dc8930ecd78852657f225f4"}, "closed": true, "closedAt": "2020-11-22T01:08:43Z", "author": {"login": "dain"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb9q__ABqjM5OTE0OTc4MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABde0A6_ABqjQwMjQyNzYxOTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDU5MDE4", "url": "https://github.com/trinodb/trino/pull/5874#pullrequestreview-526059018", "createdAt": "2020-11-09T09:20:45Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToyMDo0NVrOHvleVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjoyOTo1NFrOH0ynlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1OTA5Mw==", "bodyText": "There is no point in logging when you throw", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r519659093", "createdAt": "2020-11-09T09:20:45Z", "author": {"login": "kokosing"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -143,7 +147,13 @@ private Principal authenticateWithUserBind(Credential credential)\n             String userDistinguishedName = createUserDistinguishedName(user);\n             if (groupAuthorizationSearchPattern.isPresent()) {\n                 // user password is also validated as user DN and password is used for querying LDAP\n-                checkGroupMembership(user, userDistinguishedName, credential.getPassword());\n+                String searchBase = userBaseDistinguishedName.orElseThrow();\n+                String groupSearch = replaceUser(groupAuthorizationSearchPattern.get(), user);\n+                if (!isGroupMember(searchBase, groupSearch, userDistinguishedName, credential.getPassword())) {\n+                    String message = format(\"User [%s] not a member of an authorized group\", user);\n+                    log.debug(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNDE1Nw==", "bodyText": "same", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525114157", "createdAt": "2020-11-17T12:24:15Z", "author": {"login": "kokosing"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -230,42 +224,53 @@ static boolean containsSpecialCharacters(String user)\n         return SPECIAL_CHARACTERS.matchesAnyOf(user);\n     }\n \n-    private String validateGroupMembership(String user, DirContext context)\n+    private String lookupUserDistinguishedName(String user)\n             throws NamingException\n     {\n-        NamingEnumeration<SearchResult> search = searchGroupMembership(user, context);\n-        try {\n-            if (!search.hasMore()) {\n-                String message = format(\"User [%s] not a member of an authorized group\", user);\n-                log.debug(message);\n-                throw new AccessDeniedException(message);\n-            }\n+        String searchBase = userBaseDistinguishedName.orElseThrow();\n+        String searchFilter = replaceUser(groupAuthorizationSearchPattern.orElseThrow(), user);\n+        Set<String> userDistinguishedNames = lookupUserDistinguishedName(searchBase, searchFilter, bindDistinguishedName.orElseThrow(), bindPassword.orElseThrow());\n+        if (userDistinguishedNames.isEmpty()) {\n+            String message = format(\"User [%s] not a member of an authorized group\", user);\n+            log.debug(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNDE4OA==", "bodyText": "same", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525114188", "createdAt": "2020-11-17T12:24:19Z", "author": {"login": "kokosing"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -230,42 +224,53 @@ static boolean containsSpecialCharacters(String user)\n         return SPECIAL_CHARACTERS.matchesAnyOf(user);\n     }\n \n-    private String validateGroupMembership(String user, DirContext context)\n+    private String lookupUserDistinguishedName(String user)\n             throws NamingException\n     {\n-        NamingEnumeration<SearchResult> search = searchGroupMembership(user, context);\n-        try {\n-            if (!search.hasMore()) {\n-                String message = format(\"User [%s] not a member of an authorized group\", user);\n-                log.debug(message);\n-                throw new AccessDeniedException(message);\n-            }\n+        String searchBase = userBaseDistinguishedName.orElseThrow();\n+        String searchFilter = replaceUser(groupAuthorizationSearchPattern.orElseThrow(), user);\n+        Set<String> userDistinguishedNames = lookupUserDistinguishedName(searchBase, searchFilter, bindDistinguishedName.orElseThrow(), bindPassword.orElseThrow());\n+        if (userDistinguishedNames.isEmpty()) {\n+            String message = format(\"User [%s] not a member of an authorized group\", user);\n+            log.debug(message);\n+            throw new AccessDeniedException(message);\n+        }\n+        if (userDistinguishedNames.size() > 1) {\n+            String message = format(\"Multiple group membership results for user [%s]: %s\", user, userDistinguishedNames);\n+            log.debug(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNTU2Nw==", "bodyText": "try with resources?\nIf DirContext is not closeable then:\ntry (CloseableWrapper<DirContext> context = wrap(createUserDirContext(contextUserDistinguishedName, contextPassword)) {\n\n?", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525115567", "createdAt": "2020-11-17T12:26:39Z", "author": {"login": "kokosing"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/JdkLdapAuthenticatorClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSet.Builder;\n+import io.airlift.log.Logger;\n+import io.airlift.security.pem.PemReader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+\n+import javax.inject.Inject;\n+import javax.naming.AuthenticationException;\n+import javax.naming.NamingEnumeration;\n+import javax.naming.NamingException;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.SearchControls;\n+import javax.naming.directory.SearchResult;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.plugin.password.jndi.JndiUtils.createDirContext;\n+import static java.util.Objects.requireNonNull;\n+import static javax.naming.Context.INITIAL_CONTEXT_FACTORY;\n+import static javax.naming.Context.PROVIDER_URL;\n+import static javax.naming.Context.REFERRAL;\n+import static javax.naming.Context.SECURITY_AUTHENTICATION;\n+import static javax.naming.Context.SECURITY_CREDENTIALS;\n+import static javax.naming.Context.SECURITY_PRINCIPAL;\n+\n+public class JdkLdapAuthenticatorClient\n+        implements LdapAuthenticatorClient\n+{\n+    private static final Logger log = Logger.get(JdkLdapAuthenticatorClient.class);\n+\n+    private final Map<String, String> basicEnvironment;\n+    private final Optional<SSLContext> sslContext;\n+\n+    @Inject\n+    public JdkLdapAuthenticatorClient(LdapConfig ldapConfig)\n+    {\n+        String ldapUrl = requireNonNull(ldapConfig.getLdapUrl(), \"ldapUrl is null\");\n+        if (ldapUrl.startsWith(\"ldap://\")) {\n+            log.warn(\"Passwords will be sent in the clear to the LDAP server. Please consider using SSL to connect.\");\n+        }\n+\n+        this.basicEnvironment = ImmutableMap.<String, String>builder()\n+                .put(INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\")\n+                .put(PROVIDER_URL, ldapUrl)\n+                .put(REFERRAL, ldapConfig.isIgnoreReferrals() ? \"ignore\" : \"follow\")\n+                .build();\n+\n+        this.sslContext = Optional.ofNullable(ldapConfig.getTrustCertificate())\n+                .map(JdkLdapAuthenticatorClient::createSslContext);\n+    }\n+\n+    @Override\n+    public void validatePassword(String userDistinguishedName, String password)\n+            throws NamingException\n+    {\n+        createUserDirContext(userDistinguishedName, password).close();\n+    }\n+\n+    @Override\n+    public boolean isGroupMember(String searchBase, String groupSearch, String contextUserDistinguishedName, String contextPassword)\n+            throws NamingException\n+    {\n+        DirContext context = createUserDirContext(contextUserDistinguishedName, contextPassword);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNzMzMw==", "bodyText": "We also need real product tests with real ldap service. See io.prestosql.tests.jdbc.TestLdapPrestoJdbc", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525117333", "createdAt": "2020-11-17T12:29:54Z", "author": {"login": "kokosing"}, "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/ldap/TestLdapAuthenticator.java", "diffHunk": "@@ -50,4 +144,67 @@ public void testContainsSpecialCharacters()\n                 .as(\"Angle brackets\")\n                 .isEqualTo(true);\n     }\n+\n+    private static class TestLdapAuthenticatorClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 112}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODU1NzU1", "url": "https://github.com/trinodb/trino/pull/5874#pullrequestreview-535855755", "createdAt": "2020-11-21T00:24:10Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoyNDoxMVrOH3kzOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoyOTo1OVrOH3k3qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNjY2NA==", "bodyText": "Let's fix all these to do the formatting in the logger call", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528036664", "createdAt": "2020-11-21T00:24:11Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -143,7 +147,13 @@ private Principal authenticateWithUserBind(Credential credential)\n             String userDistinguishedName = createUserDistinguishedName(user);\n             if (groupAuthorizationSearchPattern.isPresent()) {\n                 // user password is also validated as user DN and password is used for querying LDAP\n-                checkGroupMembership(user, userDistinguishedName, credential.getPassword());\n+                String searchBase = userBaseDistinguishedName.orElseThrow();\n+                String groupSearch = replaceUser(groupAuthorizationSearchPattern.get(), user);\n+                if (!isGroupMember(searchBase, groupSearch, userDistinguishedName, credential.getPassword())) {\n+                    String message = format(\"User [%s] not a member of an authorized group\", user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNjc5MA==", "bodyText": "Don't import Builder since it's ambiguous by itself", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528036790", "createdAt": "2020-11-21T00:24:42Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -19,6 +19,9 @@\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSet.Builder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNjk3Nw==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528036977", "createdAt": "2020-11-21T00:25:33Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -230,42 +224,53 @@ static boolean containsSpecialCharacters(String user)\n         return SPECIAL_CHARACTERS.matchesAnyOf(user);\n     }\n \n-    private String validateGroupMembership(String user, DirContext context)\n+    private String lookupUserDistinguishedName(String user)\n             throws NamingException\n     {\n-        NamingEnumeration<SearchResult> search = searchGroupMembership(user, context);\n-        try {\n-            if (!search.hasMore()) {\n-                String message = format(\"User [%s] not a member of an authorized group\", user);\n-                log.debug(message);\n-                throw new AccessDeniedException(message);\n-            }\n+        String searchBase = userBaseDistinguishedName.orElseThrow();\n+        String searchFilter = replaceUser(groupAuthorizationSearchPattern.orElseThrow(), user);\n+        Set<String> userDistinguishedNames = lookupUserDistinguishedName(searchBase, searchFilter, bindDistinguishedName.orElseThrow(), bindPassword.orElseThrow());\n+        if (userDistinguishedNames.isEmpty()) {\n+            String message = format(\"User [%s] not a member of an authorized group\", user);\n+            log.debug(message);\n+            throw new AccessDeniedException(message);\n+        }\n+        if (userDistinguishedNames.size() > 1) {\n+            String message = format(\"Multiple group membership results for user [%s]: %s\", user, userDistinguishedNames);\n+            log.debug(message);\n+            throw new AccessDeniedException(message);\n+        }\n+        return Iterables.getOnlyElement(userDistinguishedNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzI1OA==", "bodyText": "This might not be the best checked exception to use for generic LDAP clients, but we can update that later if needed", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528037258", "createdAt": "2020-11-21T00:26:59Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticatorClient.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.naming.NamingException;\n+\n+import java.util.Set;\n+\n+public interface LdapAuthenticatorClient\n+{\n+    void validatePassword(String userDistinguishedName, String password)\n+            throws NamingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzQzMg==", "bodyText": "Make method name plural lookupUserDistinguishedNames", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528037432", "createdAt": "2020-11-21T00:27:50Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticatorClient.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.naming.NamingException;\n+\n+import java.util.Set;\n+\n+public interface LdapAuthenticatorClient\n+{\n+    void validatePassword(String userDistinguishedName, String password)\n+            throws NamingException;\n+\n+    boolean isGroupMember(String searchBase, String groupSearch, String contextUserDistinguishedName, String contextPassword)\n+            throws NamingException;\n+\n+    Set<String> lookupUserDistinguishedName(String searchBase, String searchFilter, String contextUserDistinguishedName, String contextPassword)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzgwMA==", "bodyText": "Use log formatting", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528037800", "createdAt": "2020-11-21T00:29:59Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -112,28 +113,32 @@ private Principal authenticateWithUserBind(Credential credential)\n         if (containsSpecialCharacters(user)) {\n             throw new AccessDeniedException(\"Username contains a special LDAP character\");\n         }\n-        try {\n-            String userDistinguishedName = createUserDistinguishedName(user);\n-            if (groupAuthorizationSearchPattern.isPresent()) {\n-                // user password is also validated as user DN and password is used for querying LDAP\n-                String searchBase = userBaseDistinguishedName.orElseThrow();\n-                String groupSearch = replaceUser(groupAuthorizationSearchPattern.get(), user);\n-                if (!client.isGroupMember(searchBase, groupSearch, userDistinguishedName, credential.getPassword())) {\n-                    String message = format(\"User [%s] not a member of an authorized group\", user);\n-                    log.debug(message);\n-                    throw new AccessDeniedException(message);\n+        Exception lastException = new RuntimeException();\n+        for (String userBindSearchPattern : userBindSearchPatterns) {\n+            try {\n+                String userDistinguishedName = replaceUser(userBindSearchPattern, user);\n+                if (groupAuthorizationSearchPattern.isPresent()) {\n+                    // user password is also validated as user DN and password is used for querying LDAP\n+                    String searchBase = userBaseDistinguishedName.orElseThrow();\n+                    String groupSearch = replaceUser(groupAuthorizationSearchPattern.get(), user);\n+                    if (!client.isGroupMember(searchBase, groupSearch, userDistinguishedName, credential.getPassword())) {\n+                        String message = format(\"User [%s] not a member of an authorized group\", user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d80be3108a72877bb6627cf4afd11d033715c7c1", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/d80be3108a72877bb6627cf4afd11d033715c7c1", "committedDate": "2020-11-21T21:17:47Z", "message": "Restructure LdapAuthenticator code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b207cc4d03f62247250d2ac29bae956604aa5443", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/b207cc4d03f62247250d2ac29bae956604aa5443", "committedDate": "2020-11-21T21:20:20Z", "message": "Add LdapAuthenticatorClient abstraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcfdb244cc293685d6f52ab8b135f267b733b8a1", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/bcfdb244cc293685d6f52ab8b135f267b733b8a1", "committedDate": "2020-11-21T21:53:18Z", "message": "Add unit test for LdapAuthenticator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12df47084ad362d8f5d7c41b56ea356b58c471b7", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/12df47084ad362d8f5d7c41b56ea356b58c471b7", "committedDate": "2020-11-21T21:53:19Z", "message": "Support multiple LDAP user bind patterns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "519e0e1dc1c6306484c8a51e4ba54bb4c36219ca", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/519e0e1dc1c6306484c8a51e4ba54bb4c36219ca", "committedDate": "2020-11-21T21:53:19Z", "message": "Add abstractions to simplify JdkLdapAuthenticatorClient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "519e0e1dc1c6306484c8a51e4ba54bb4c36219ca", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/519e0e1dc1c6306484c8a51e4ba54bb4c36219ca", "committedDate": "2020-11-21T21:53:19Z", "message": "Add abstractions to simplify JdkLdapAuthenticatorClient"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2926, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}