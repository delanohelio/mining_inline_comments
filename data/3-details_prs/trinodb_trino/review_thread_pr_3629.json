{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjIzOTkz", "number": 3629, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNDo1MlrOD6Iw_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMzoyNFrOD6I8vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg3NjEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/AccessControlManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNDo1MlrOGRzE3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNDo1MlrOGRzE3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNTgwNw==", "bodyText": "I would change commit message to:\nAllow SystemAccessControl to provide to event listeners\n\n\nenhancing event driven communicaiton about\nexecuting queries in the system to SystemLevelAccessControl\n\nI would drop this.", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r421315807", "createdAt": "2020-05-07T08:04:52Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/AccessControlManager.java", "diffHunk": "@@ -20,6 +20,7 @@\n import io.airlift.log.Logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg3NzE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/AccessControlManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNTowN1rOGRzFcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNTowN1rOGRzFcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNTk1NQ==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r421315955", "createdAt": "2020-05-07T08:05:07Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/AccessControlManager.java", "diffHunk": "@@ -82,6 +84,7 @@\n     private static final String NAME_PROPERTY = \"access-control.name\";\n \n     private final TransactionManager transactionManager;\n+    private EventListenerManager eventListenerManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg4MjQ5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/AccessControlManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNjo0MFrOGRzIwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNjo0MFrOGRzIwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjgwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .flatMap(eventListeners -> StreamSupport.stream(eventListeners.spliterator(), false))\n          \n          \n            \n                            .flatMap(eventListeners -> ImmutableSet.of(eventListeners).stream())", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r421316801", "createdAt": "2020-05-07T08:06:40Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/AccessControlManager.java", "diffHunk": "@@ -141,6 +145,11 @@ public void loadSystemAccessControl()\n                 .map(this::createSystemAccessControl)\n                 .collect(toImmutableList());\n \n+        systemAccessControls.stream()\n+                .map(SystemAccessControl::getEventListeners)\n+                .flatMap(eventListeners -> StreamSupport.stream(eventListeners.spliterator(), false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg4NjMwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/testing/TestingEventListenerManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNzo0OVrOGRzLMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo1NTozMFrOGXfDag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzQyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static TestingEventListenerManager emptyConfigManager()\n          \n          \n            \n                public static TestingEventListenerManager testingEventListenerManager()\n          \n      \n    \n    \n  \n\n?\nemptyConfigManager sounds like a manager of empty config o_O", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r421317427", "createdAt": "2020-05-07T08:07:49Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/testing/TestingEventListenerManager.java", "diffHunk": "@@ -30,6 +31,11 @@\n public class TestingEventListenerManager\n         extends EventListenerManager\n {\n+    public static TestingEventListenerManager emptyConfigManager()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIwNDgwOA==", "bodyText": "But that's exactly the case, it's an EventLitenerManager with empty config of event listeners, so with no event listeners configured. Maybe noListenersConfiguredConfigManager()? As testingEventListenerManager is too broad as it's not giving any hint of its state (which is important for the tests).", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r427204808", "createdAt": "2020-05-19T10:43:37Z", "author": {"login": "s2lomon"}, "path": "presto-main/src/main/java/io/prestosql/testing/TestingEventListenerManager.java", "diffHunk": "@@ -30,6 +31,11 @@\n public class TestingEventListenerManager\n         extends EventListenerManager\n {\n+    public static TestingEventListenerManager emptyConfigManager()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzQyNw=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIwOTg5Mg==", "bodyText": "emptyEventListenerManager?", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r427209892", "createdAt": "2020-05-19T10:52:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/testing/TestingEventListenerManager.java", "diffHunk": "@@ -30,6 +31,11 @@\n public class TestingEventListenerManager\n         extends EventListenerManager\n {\n+    public static TestingEventListenerManager emptyConfigManager()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzQyNw=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3OTIxMA==", "bodyText": "hm you are right, it's better :)", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r427279210", "createdAt": "2020-05-19T12:55:30Z", "author": {"login": "s2lomon"}, "path": "presto-main/src/main/java/io/prestosql/testing/TestingEventListenerManager.java", "diffHunk": "@@ -30,6 +31,11 @@\n public class TestingEventListenerManager\n         extends EventListenerManager\n {\n+    public static TestingEventListenerManager emptyConfigManager()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzQyNw=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg5OTUyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMToyOFrOGRzTWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMToyOFrOGRzTWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTUxMw==", "bodyText": "extract \"event-listening-sac\" as variable in this method", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r421319513", "createdAt": "2020-05-07T08:11:28Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -307,6 +320,21 @@ public void testAllowExecuteProcedure()\n                 });\n     }\n \n+    @Test\n+    public void testRegisterEventListeners()\n+            throws IOException\n+    {\n+        EventListener expectedListener = new EventListener() {};\n+        TestingEventListenerManager eventListenerManager = emptyConfigManager();\n+        AccessControlManager accessControlManager = createAccessControlManage(eventListenerManager, ImmutableList.of(\"access-control.name=event-listening-sac\"));\n+        accessControlManager.addSystemAccessControlFactory(eventListeningSystemAccessControlFactory(\"event-listening-sac\", expectedListener));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjkwMTE1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMTo1NlrOGRzUZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMTo1NlrOGRzUZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTc4MA==", "bodyText": "Can you also add a test where you register two event listeners.", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r421319780", "createdAt": "2020-05-07T08:11:56Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -307,6 +320,21 @@ public void testAllowExecuteProcedure()\n                 });\n     }\n \n+    @Test\n+    public void testRegisterEventListeners()\n+            throws IOException\n+    {\n+        EventListener expectedListener = new EventListener() {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjkwNjIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMzoyNFrOGRzXrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyMzoxN1rOGXgMpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDYyMQ==", "bodyText": "Why you had to implement this?", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r421320621", "createdAt": "2020-05-07T08:13:24Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -378,6 +406,57 @@ public void testAllowExecuteFunction()\n                 });\n     }\n \n+    private AccessControlManager createAccessControlManage(TestingEventListenerManager eventListenerManager, List<String> systemAccessControlProperties)\n+            throws IOException\n+    {\n+        Path systemAccessControlConfig = createTempFile(\"access-manager-config-file\", \".properties\");\n+        Files.write(systemAccessControlConfig, systemAccessControlProperties, TRUNCATE_EXISTING, CREATE, WRITE);\n+\n+        return createAccessControlManager(eventListenerManager, new AccessControlConfig()\n+                .setAccessControlFiles(systemAccessControlConfig.toFile()\n+                        .getAbsolutePath()));\n+    }\n+\n+    private AccessControlManager createAccessControlManager(TransactionManager testTransactionManager)\n+    {\n+        return new AccessControlManager(testTransactionManager, emptyConfigManager(), new AccessControlConfig());\n+    }\n+\n+    private AccessControlManager createAccessControlManager(EventListenerManager eventListenerManager, AccessControlConfig config)\n+    {\n+        return new AccessControlManager(createTestTransactionManager(), eventListenerManager, config);\n+    }\n+\n+    private SystemAccessControlFactory eventListeningSystemAccessControlFactory(String name, EventListener eventListener)\n+    {\n+        return new SystemAccessControlFactory()\n+        {\n+            @Override\n+            public String getName()\n+            {\n+                return name;\n+            }\n+\n+            @Override\n+            public SystemAccessControl create(Map<String, String> config)\n+            {\n+                return new SystemAccessControl()\n+                {\n+                    @Override\n+                    public void checkCanSetSystemSessionProperty(SystemSecurityContext context, String propertyName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIyODMyMQ==", "bodyText": "Because it does not have its default implementation, maybe it should?", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r427228321", "createdAt": "2020-05-19T11:27:44Z", "author": {"login": "s2lomon"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -378,6 +406,57 @@ public void testAllowExecuteFunction()\n                 });\n     }\n \n+    private AccessControlManager createAccessControlManage(TestingEventListenerManager eventListenerManager, List<String> systemAccessControlProperties)\n+            throws IOException\n+    {\n+        Path systemAccessControlConfig = createTempFile(\"access-manager-config-file\", \".properties\");\n+        Files.write(systemAccessControlConfig, systemAccessControlProperties, TRUNCATE_EXISTING, CREATE, WRITE);\n+\n+        return createAccessControlManager(eventListenerManager, new AccessControlConfig()\n+                .setAccessControlFiles(systemAccessControlConfig.toFile()\n+                        .getAbsolutePath()));\n+    }\n+\n+    private AccessControlManager createAccessControlManager(TransactionManager testTransactionManager)\n+    {\n+        return new AccessControlManager(testTransactionManager, emptyConfigManager(), new AccessControlConfig());\n+    }\n+\n+    private AccessControlManager createAccessControlManager(EventListenerManager eventListenerManager, AccessControlConfig config)\n+    {\n+        return new AccessControlManager(createTestTransactionManager(), eventListenerManager, config);\n+    }\n+\n+    private SystemAccessControlFactory eventListeningSystemAccessControlFactory(String name, EventListener eventListener)\n+    {\n+        return new SystemAccessControlFactory()\n+        {\n+            @Override\n+            public String getName()\n+            {\n+                return name;\n+            }\n+\n+            @Override\n+            public SystemAccessControl create(Map<String, String> config)\n+            {\n+                return new SystemAccessControl()\n+                {\n+                    @Override\n+                    public void checkCanSetSystemSessionProperty(SystemSecurityContext context, String propertyName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDYyMQ=="}, "originalCommit": null, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIyODg4OQ==", "bodyText": "I think it should like everything else.", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r427228889", "createdAt": "2020-05-19T11:28:55Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -378,6 +406,57 @@ public void testAllowExecuteFunction()\n                 });\n     }\n \n+    private AccessControlManager createAccessControlManage(TestingEventListenerManager eventListenerManager, List<String> systemAccessControlProperties)\n+            throws IOException\n+    {\n+        Path systemAccessControlConfig = createTempFile(\"access-manager-config-file\", \".properties\");\n+        Files.write(systemAccessControlConfig, systemAccessControlProperties, TRUNCATE_EXISTING, CREATE, WRITE);\n+\n+        return createAccessControlManager(eventListenerManager, new AccessControlConfig()\n+                .setAccessControlFiles(systemAccessControlConfig.toFile()\n+                        .getAbsolutePath()));\n+    }\n+\n+    private AccessControlManager createAccessControlManager(TransactionManager testTransactionManager)\n+    {\n+        return new AccessControlManager(testTransactionManager, emptyConfigManager(), new AccessControlConfig());\n+    }\n+\n+    private AccessControlManager createAccessControlManager(EventListenerManager eventListenerManager, AccessControlConfig config)\n+    {\n+        return new AccessControlManager(createTestTransactionManager(), eventListenerManager, config);\n+    }\n+\n+    private SystemAccessControlFactory eventListeningSystemAccessControlFactory(String name, EventListener eventListener)\n+    {\n+        return new SystemAccessControlFactory()\n+        {\n+            @Override\n+            public String getName()\n+            {\n+                return name;\n+            }\n+\n+            @Override\n+            public SystemAccessControl create(Map<String, String> config)\n+            {\n+                return new SystemAccessControl()\n+                {\n+                    @Override\n+                    public void checkCanSetSystemSessionProperty(SystemSecurityContext context, String propertyName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDYyMQ=="}, "originalCommit": null, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3OTcyOA==", "bodyText": "hm, so maybe in different commit in same pr? or a separate pr?", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r427279728", "createdAt": "2020-05-19T12:56:15Z", "author": {"login": "s2lomon"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -378,6 +406,57 @@ public void testAllowExecuteFunction()\n                 });\n     }\n \n+    private AccessControlManager createAccessControlManage(TestingEventListenerManager eventListenerManager, List<String> systemAccessControlProperties)\n+            throws IOException\n+    {\n+        Path systemAccessControlConfig = createTempFile(\"access-manager-config-file\", \".properties\");\n+        Files.write(systemAccessControlConfig, systemAccessControlProperties, TRUNCATE_EXISTING, CREATE, WRITE);\n+\n+        return createAccessControlManager(eventListenerManager, new AccessControlConfig()\n+                .setAccessControlFiles(systemAccessControlConfig.toFile()\n+                        .getAbsolutePath()));\n+    }\n+\n+    private AccessControlManager createAccessControlManager(TransactionManager testTransactionManager)\n+    {\n+        return new AccessControlManager(testTransactionManager, emptyConfigManager(), new AccessControlConfig());\n+    }\n+\n+    private AccessControlManager createAccessControlManager(EventListenerManager eventListenerManager, AccessControlConfig config)\n+    {\n+        return new AccessControlManager(createTestTransactionManager(), eventListenerManager, config);\n+    }\n+\n+    private SystemAccessControlFactory eventListeningSystemAccessControlFactory(String name, EventListener eventListener)\n+    {\n+        return new SystemAccessControlFactory()\n+        {\n+            @Override\n+            public String getName()\n+            {\n+                return name;\n+            }\n+\n+            @Override\n+            public SystemAccessControl create(Map<String, String> config)\n+            {\n+                return new SystemAccessControl()\n+                {\n+                    @Override\n+                    public void checkCanSetSystemSessionProperty(SystemSecurityContext context, String propertyName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDYyMQ=="}, "originalCommit": null, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5Nzk1OQ==", "bodyText": "different commit in same pr\n\n\ud83d\udc4d\nActually, both ways are good to me. Up to you.", "url": "https://github.com/trinodb/trino/pull/3629#discussion_r427297959", "createdAt": "2020-05-19T13:23:17Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -378,6 +406,57 @@ public void testAllowExecuteFunction()\n                 });\n     }\n \n+    private AccessControlManager createAccessControlManage(TestingEventListenerManager eventListenerManager, List<String> systemAccessControlProperties)\n+            throws IOException\n+    {\n+        Path systemAccessControlConfig = createTempFile(\"access-manager-config-file\", \".properties\");\n+        Files.write(systemAccessControlConfig, systemAccessControlProperties, TRUNCATE_EXISTING, CREATE, WRITE);\n+\n+        return createAccessControlManager(eventListenerManager, new AccessControlConfig()\n+                .setAccessControlFiles(systemAccessControlConfig.toFile()\n+                        .getAbsolutePath()));\n+    }\n+\n+    private AccessControlManager createAccessControlManager(TransactionManager testTransactionManager)\n+    {\n+        return new AccessControlManager(testTransactionManager, emptyConfigManager(), new AccessControlConfig());\n+    }\n+\n+    private AccessControlManager createAccessControlManager(EventListenerManager eventListenerManager, AccessControlConfig config)\n+    {\n+        return new AccessControlManager(createTestTransactionManager(), eventListenerManager, config);\n+    }\n+\n+    private SystemAccessControlFactory eventListeningSystemAccessControlFactory(String name, EventListener eventListener)\n+    {\n+        return new SystemAccessControlFactory()\n+        {\n+            @Override\n+            public String getName()\n+            {\n+                return name;\n+            }\n+\n+            @Override\n+            public SystemAccessControl create(Map<String, String> config)\n+            {\n+                return new SystemAccessControl()\n+                {\n+                    @Override\n+                    public void checkCanSetSystemSessionProperty(SystemSecurityContext context, String propertyName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDYyMQ=="}, "originalCommit": null, "originalPosition": 232}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 40, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}