{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Mjg5NDU1", "number": 6115, "title": "Gather plan node auxiliary statistics separately", "bodyText": "Gather plan node auxiliary statistics from all operators\ncreated for a given plan node. Previously, auxiliary\nstats were only collected for input and output operator\nfor a given plan node. However, because creation of DynamicFilterSourceOperator\n(input operator for join plan node) is conditional for some task\nHashCollisionPlanNodeStats might be lost.", "createdAt": "2020-11-26T22:52:31Z", "url": "https://github.com/trinodb/trino/pull/6115", "merged": true, "mergeCommit": {"oid": "e95dac7347df3ab31a69298c5d3904cab45f5e02"}, "closed": true, "closedAt": "2020-11-27T20:54:55Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgbePogBqjQwNDQwNTYyNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgt7v2ABqjQwNDcyODk2OTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzcyMzc4", "url": "https://github.com/trinodb/trino/pull/6115#pullrequestreview-539772378", "createdAt": "2020-11-27T08:04:48Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef4ecb54551c44e0fb7382b669e9af71ca810d0", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/3ef4ecb54551c44e0fb7382b669e9af71ca810d0", "committedDate": "2020-11-27T11:08:42Z", "message": "Make OperatorHashCollisionsStats self-contained"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "559db648c90e38e95d30e6e4ef1ae7b22b929268", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/559db648c90e38e95d30e6e4ef1ae7b22b929268", "committedDate": "2020-11-27T11:53:26Z", "message": "Move assertExplainAnalyze to AbstractTestQueryFramework"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTMzNjE4", "url": "https://github.com/trinodb/trino/pull/6115#pullrequestreview-539933618", "createdAt": "2020-11-27T12:11:05Z", "commit": {"oid": "559db648c90e38e95d30e6e4ef1ae7b22b929268"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxMTowNVrOH68N-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxNjo0MlrOH68YgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ==", "bodyText": "I think this method should be @Deprecated because it's not much better than\ncomputeActual(\"EXPLAIN ANALYZE \" + query); // ensure does not fail\n\nyet, it pretends it is does something useful", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531566075", "createdAt": "2020-11-27T12:11:05Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -321,6 +323,16 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n         assertEquals(actual, expected);\n     }\n \n+    protected void assertExplainAnalyze(@Language(\"SQL\") String query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559db648c90e38e95d30e6e4ef1ae7b22b929268"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2Njc2NA==", "bodyText": "Can you please verify some selected parts of the output?\nLike the thing you mentioned in \"Advanced join stats are back\" comment\n#6115 (comment)", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531566764", "createdAt": "2020-11-27T12:12:35Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -4158,6 +4159,14 @@ public void testExplainSetSessionWithUsing()\n                         \"Parameters: [7]\");\n     }\n \n+    @Test\n+    public void testExplainAnalyze()\n+    {\n+        assertExplainAnalyze(\n+                noJoinReordering(BROADCAST),\n+                \"EXPLAIN ANALYZE SELECT * FROM (SELECT nationkey, regionkey FROM nation GROUP BY nationkey, regionkey) a, nation b WHERE a.regionkey = b.regionkey\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NzQ2Ng==", "bodyText": "as assertExplainAnalyze(String) brings very little benefit, let's not add an overload to it.\ninstead, in the actual test, just call computeActual and run assertThat on the returned String\n(and computeActual already accepts a session)", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531567466", "createdAt": "2020-11-27T12:14:05Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -325,7 +325,12 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n \n     protected void assertExplainAnalyze(@Language(\"SQL\") String query)\n     {\n-        String value = (String) computeActual(query).getOnlyValue();\n+        assertExplainAnalyze(getSession(), query);\n+    }\n+\n+    protected void assertExplainAnalyze(Session session, @Language(\"SQL\") String query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2ODMwMA==", "bodyText": "Where can this be a case? Shouldn't we attempt to do a merge?", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531568300", "createdAt": "2020-11-27T12:15:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/TextRenderer.java", "diffHunk": "@@ -163,28 +153,34 @@ private void printDistributions(StringBuilder output, PlanNodeStats stats)\n             output.append(translatedOperatorType);\n             output.append(format(Locale.US, \"Input avg.: %s rows, Input std.dev.: %s%%\\n\",\n                     formatDouble(inputAverage), formatDouble(100.0d * inputStdDevs.get(operator) / inputAverage)));\n+        }\n+    }\n \n-            double hashCollisionsAverage = hashCollisionsAverages.getOrDefault(operator, 0.0d);\n-            double expectedHashCollisionsAverage = expectedHashCollisionsAverages.getOrDefault(operator, 0.0d);\n-            if (hashCollisionsAverage != 0.0d) {\n-                double hashCollisionsStdDevRatio = hashCollisionsStdDevs.get(operator) / hashCollisionsAverage;\n-\n-                if (!translatedOperatorType.isEmpty()) {\n-                    output.append(indentString(2));\n-                }\n-\n-                if (expectedHashCollisionsAverage != 0.0d) {\n-                    double hashCollisionsRatio = hashCollisionsAverage / expectedHashCollisionsAverage;\n-                    output.append(format(Locale.US, \"Collisions avg.: %s (%s%% est.), Collisions std.dev.: %s%%\",\n-                            formatDouble(hashCollisionsAverage), formatDouble(hashCollisionsRatio * 100.0d), formatDouble(hashCollisionsStdDevRatio * 100.0d)));\n-                }\n-                else {\n-                    output.append(format(Locale.US, \"Collisions avg.: %s, Collisions std.dev.: %s%%\",\n-                            formatDouble(hashCollisionsAverage), formatDouble(hashCollisionsStdDevRatio * 100.0d)));\n-                }\n-\n-                output.append(\"\\n\");\n-            }\n+    private void printCollisions(StringBuilder output, PlanNodeStats stats)\n+    {\n+        if (!(stats instanceof HashCollisionPlanNodeStats)) {\n+            return;\n+        }\n+\n+        HashCollisionPlanNodeStats collisionStats = (HashCollisionPlanNodeStats) stats;\n+        if (collisionStats.getOperatorHashCollisionsAverages().keySet().size() != 1) {\n+            // no support for multiple operators that produced collision stats for same plan node", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2ODc2OQ==", "bodyText": "Maybe add a test with EXPLAIN ANALYZE over JOIN, and over AGG,\nverifying \"Collisions\" is in the output ?", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531568769", "createdAt": "2020-11-27T12:16:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/TextRenderer.java", "diffHunk": "@@ -132,6 +131,7 @@ private String printStats(PlanRepresentation plan, NodeRepresentation node)\n         output.append(format(\", Output: %s (%s)\\n\", formatPositions(nodeStats.getPlanNodeOutputPositions()), nodeStats.getPlanNodeOutputDataSize().toString()));\n \n         printDistributions(output, nodeStats);\n+        printCollisions(output, nodeStats);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1760f1c28340221a9b5619c74891a2372d15ef4", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/a1760f1c28340221a9b5619c74891a2372d15ef4", "committedDate": "2020-11-27T13:39:41Z", "message": "Gather plan node auxiliary statistics separately\n\nGather auxiliary statistics from all operators\ncreated for a given plan node. Previously, auxiliary\nstats were only collected for input and output operators\nfor a given plan node. However, because creation of DynamicFilterSourceOperator\n(input operator for join plan node) is conditional for some task\nHashCollisionPlanNodeStats might be lost."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "9536d74748e538f91e101fa04865ec0052548f6b", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/9536d74748e538f91e101fa04865ec0052548f6b", "committedDate": "2020-11-27T20:53:35Z", "message": "Fix collisions reporting for joins\n\nCollision stats were not correctly reported previously\nfor join operators. Now they are reported like:\n\n Fragment 1 [HASH]\n    CPU: 154.12ms, Scheduled: 339.28ms, Input: 100 rows (9.33kB); per task: avg.: 33.33 std.dev.: 0.47, Output: 125 rows (13.67kB)\n    Output layout: [nationkey, regionkey, nationkey_0, name_1, comment_3]\n    Output partitioning: SINGLE []\n    Stage Execution Strategy: UNGROUPED_EXECUTION\n    InnerJoin[(\"regionkey\" = \"regionkey_2\")][$hashvalue_7, $hashvalue_8]\n    \u2502   Layout: [nationkey:bigint, regionkey:bigint, nationkey_0:bigint, name_1:varchar(25), comment_3:varchar(152)]\n    \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n    \u2502   CPU: 90.00ms (40.36%), Scheduled: 194.00ms (35.79%), Output: 125 rows (13.67kB)\n    \u2502   Left (probe) Input avg.: 2.08 rows, Input std.dev.: 86.44%\n    \u2502   Right (build) Input avg.: 6.25 rows, Input std.dev.: 87.18%\n    \u2502   Collisions avg.: 5.64 (100.00% est.), Collisions std.dev.: 0.00%\n    \u2502   Distribution: REPLICATED\n    \u2502   dynamicFilterAssignments = {regionkey_2 -> #df_385}\n\nAggregation collision stats are reported like:\n\n    \u2502  \u2514\u2500 Aggregate(FINAL)[nationkey, regionkey][$hashvalue]\n    \u2502     \u2502   Layout: [nationkey:bigint, regionkey:bigint, $hashvalue:bigint]\n    \u2502     \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n    \u2502     \u2502   CPU: 26.00ms (11.66%), Scheduled: 57.00ms (10.52%), Output: 25 rows (675B)\n    \u2502     \u2502   Input avg.: 2.08 rows, Input std.dev.: 86.44%\n    \u2502     \u2502   Collisions avg.: 0.00 (100.00% est.), Collisions std.dev.: 0.00%"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9536d74748e538f91e101fa04865ec0052548f6b", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/9536d74748e538f91e101fa04865ec0052548f6b", "committedDate": "2020-11-27T20:53:35Z", "message": "Fix collisions reporting for joins\n\nCollision stats were not correctly reported previously\nfor join operators. Now they are reported like:\n\n Fragment 1 [HASH]\n    CPU: 154.12ms, Scheduled: 339.28ms, Input: 100 rows (9.33kB); per task: avg.: 33.33 std.dev.: 0.47, Output: 125 rows (13.67kB)\n    Output layout: [nationkey, regionkey, nationkey_0, name_1, comment_3]\n    Output partitioning: SINGLE []\n    Stage Execution Strategy: UNGROUPED_EXECUTION\n    InnerJoin[(\"regionkey\" = \"regionkey_2\")][$hashvalue_7, $hashvalue_8]\n    \u2502   Layout: [nationkey:bigint, regionkey:bigint, nationkey_0:bigint, name_1:varchar(25), comment_3:varchar(152)]\n    \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n    \u2502   CPU: 90.00ms (40.36%), Scheduled: 194.00ms (35.79%), Output: 125 rows (13.67kB)\n    \u2502   Left (probe) Input avg.: 2.08 rows, Input std.dev.: 86.44%\n    \u2502   Right (build) Input avg.: 6.25 rows, Input std.dev.: 87.18%\n    \u2502   Collisions avg.: 5.64 (100.00% est.), Collisions std.dev.: 0.00%\n    \u2502   Distribution: REPLICATED\n    \u2502   dynamicFilterAssignments = {regionkey_2 -> #df_385}\n\nAggregation collision stats are reported like:\n\n    \u2502  \u2514\u2500 Aggregate(FINAL)[nationkey, regionkey][$hashvalue]\n    \u2502     \u2502   Layout: [nationkey:bigint, regionkey:bigint, $hashvalue:bigint]\n    \u2502     \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n    \u2502     \u2502   CPU: 26.00ms (11.66%), Scheduled: 57.00ms (10.52%), Output: 25 rows (675B)\n    \u2502     \u2502   Input avg.: 2.08 rows, Input std.dev.: 86.44%\n    \u2502     \u2502   Collisions avg.: 0.00 (100.00% est.), Collisions std.dev.: 0.00%"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2379, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}