{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDE2Njc3", "number": 2788, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo1NDoyN1rODexpzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDozNTowNVrODe87UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTk3MzkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo1NDoyN1rOFoGPqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzozMjo0MlrOFoJBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4OTY3Mw==", "bodyText": "use index = (index + 1) % buffers.size()", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377589673", "createdAt": "2020-02-11T11:54:27Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -228,11 +233,32 @@ public void enqueue(List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        clientBufferPollLoop();\n+    }\n+\n+    /**\n+     * Iterates client buffers, resuming where the previous cycle stopped if the master buffer was emptied before all clients were polled\n+     * and no new client buffers have been inserted.\n+     */\n+    private void clientBufferPollLoop()\n+    {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of indexOffset and buffer list copy\n+        int index = nextClientBufferIndex.get() % buffers.size();\n+        for (int i = 0; i < buffers.size(); i++) {\n+            buffers.get(index).loadPagesIfNecessary(masterBuffer);\n+            index++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzNTA4OA==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377635088", "createdAt": "2020-02-11T13:32:42Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -228,11 +233,32 @@ public void enqueue(List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        clientBufferPollLoop();\n+    }\n+\n+    /**\n+     * Iterates client buffers, resuming where the previous cycle stopped if the master buffer was emptied before all clients were polled\n+     * and no new client buffers have been inserted.\n+     */\n+    private void clientBufferPollLoop()\n+    {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of indexOffset and buffer list copy\n+        int index = nextClientBufferIndex.get() % buffers.size();\n+        for (int i = 0; i < buffers.size(); i++) {\n+            buffers.get(index).loadPagesIfNecessary(masterBuffer);\n+            index++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4OTY3Mw=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzgxMjY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDozMjoxMFrOFoYD7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1MToxNlrOFoaeqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MTU4MA==", "bodyText": "I'd prefer to keep this inline instead of a separate method.", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377881580", "createdAt": "2020-02-11T20:32:10Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -228,11 +233,29 @@ public void enqueue(List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        clientBufferPollLoop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMTE5Mw==", "bodyText": "Sure, placed back inline.", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377921193", "createdAt": "2020-02-11T21:51:16Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -228,11 +233,29 @@ public void enqueue(List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        clientBufferPollLoop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MTU4MA=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzgxNjAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDozMzoxN1rOFoYGBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1MTowNFrOFoaeXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MjExNg==", "bodyText": "indexOffset seems incorrect here (maybe was renamed after the comment was written). Maybe just say \"next index\" rather than referring to the field.", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377882116", "createdAt": "2020-02-11T20:33:17Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -228,11 +233,29 @@ public void enqueue(List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        clientBufferPollLoop();\n+    }\n+\n+    /**\n+     * Iterates client buffers, resuming where the previous cycle stopped if the master buffer was emptied before all clients were polled\n+     * and no new client buffers have been inserted.\n+     */\n+    private void clientBufferPollLoop()\n+    {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of indexOffset and buffer list copy", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMTExNw==", "bodyText": "You are correct, updated.", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377921117", "createdAt": "2020-02-11T21:51:04Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -228,11 +233,29 @@ public void enqueue(List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        clientBufferPollLoop();\n+    }\n+\n+    /**\n+     * Iterates client buffers, resuming where the previous cycle stopped if the master buffer was emptied before all clients were polled\n+     * and no new client buffers have been inserted.\n+     */\n+    private void clientBufferPollLoop()\n+    {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of indexOffset and buffer list copy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MjExNg=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzgyMDk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/TestArbitraryOutputBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDozNTowNVrOFoYJIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1MToyNlrOFoae9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MjkxNQ==", "bodyText": "This can be\nassertThat(firstReads.values()).allMatch(Future::isDone);", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377882915", "createdAt": "2020-02-11T20:35:05Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/TestArbitraryOutputBuffer.java", "diffHunk": "@@ -423,6 +426,56 @@ public void testGetBeforeCreate()\n         assertBufferResultEquals(TYPES, getFuture(future, NO_WAIT), bufferResult(0, createPage(33)));\n     }\n \n+    @Test\n+    public void testResumeFromPreviousPosition()\n+    {\n+        OutputBuffers outputBuffers = createInitialEmptyOutputBuffers(ARBITRARY);\n+        OutputBufferId[] ids = new OutputBufferId[5];\n+        for (int i = 0; i < ids.length; i++) {\n+            ids[i] = new OutputBufferId(i);\n+            outputBuffers = outputBuffers.withBuffer(ids[i], i);\n+        }\n+\n+        ArbitraryOutputBuffer buffer = createArbitraryBuffer(outputBuffers, sizeOfPages(5));\n+        assertFalse(buffer.isFinished());\n+\n+        Map<OutputBufferId, ListenableFuture<BufferResult>> firstReads = new HashMap<>();\n+        for (OutputBufferId id : ids) {\n+            firstReads.put(id, buffer.get(id, 0L, sizeOfPages(1)));\n+        }\n+        // All must be blocked initially\n+        firstReads.values().forEach(future -> assertFalse(future.isDone()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMTI2OQ==", "bodyText": "Neat, done.", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377921269", "createdAt": "2020-02-11T21:51:26Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/TestArbitraryOutputBuffer.java", "diffHunk": "@@ -423,6 +426,56 @@ public void testGetBeforeCreate()\n         assertBufferResultEquals(TYPES, getFuture(future, NO_WAIT), bufferResult(0, createPage(33)));\n     }\n \n+    @Test\n+    public void testResumeFromPreviousPosition()\n+    {\n+        OutputBuffers outputBuffers = createInitialEmptyOutputBuffers(ARBITRARY);\n+        OutputBufferId[] ids = new OutputBufferId[5];\n+        for (int i = 0; i < ids.length; i++) {\n+            ids[i] = new OutputBufferId(i);\n+            outputBuffers = outputBuffers.withBuffer(ids[i], i);\n+        }\n+\n+        ArbitraryOutputBuffer buffer = createArbitraryBuffer(outputBuffers, sizeOfPages(5));\n+        assertFalse(buffer.isFinished());\n+\n+        Map<OutputBufferId, ListenableFuture<BufferResult>> firstReads = new HashMap<>();\n+        for (OutputBufferId id : ids) {\n+            firstReads.put(id, buffer.get(id, 0L, sizeOfPages(1)));\n+        }\n+        // All must be blocked initially\n+        firstReads.values().forEach(future -> assertFalse(future.isDone()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MjkxNQ=="}, "originalCommit": null, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 905, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}