{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjMwMjIw", "number": 3749, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0NzoxMFrOD85tfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowNDowNlrOD9WIQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTg2Njg3OnYy", "diffSide": "LEFT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0NzoxMFrOGWH-bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTozNjo0NlrOGWJ7AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MjUyNQ==", "bodyText": "this needs to stay for now as cacheReady is still not guaranteed to be true when getFileSystem is called for the first time", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425852525", "createdAt": "2020-05-15T14:47:10Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -81,7 +80,6 @@ public void updateConfiguration(Configuration config, HdfsContext context, URI u\n     {\n         if (!cacheReady) {\n             setCacheDataEnabled(config, false);\n-            setCacheKey(config, \"rubix_disabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MTk5Nw==", "bodyText": "I do not understand what you mean here.", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425871997", "createdAt": "2020-05-15T15:16:46Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -81,7 +80,6 @@ public void updateConfiguration(Configuration config, HdfsContext context, URI u\n     {\n         if (!cacheReady) {\n             setCacheDataEnabled(config, false);\n-            setCacheKey(config, \"rubix_disabled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MjUyNQ=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4NDQxNw==", "bodyText": "I mean this code needs to stay, I've created and squashed fixup that brings these lines back.", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425884417", "createdAt": "2020-05-15T15:36:46Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -81,7 +80,6 @@ public void updateConfiguration(Configuration config, HdfsContext context, URI u\n     {\n         if (!cacheReady) {\n             setCacheDataEnabled(config, false);\n-            setCacheKey(config, \"rubix_disabled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MjUyNQ=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTk2MjQ2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxMTowM1rOGWI7qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMjowMTozN1rOGWZ-kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2ODIwMw==", "bodyText": "Why it's not readable? We use something similar in: io/prestosql/tests/product/launcher/testcontainers/SelectedPortWaitStrategy.java:70. This approach also provides nice exception message\n\nThe fact that you needed to put comment means it is not readable. We are throwing \"timout\" exception ever loop but retry.\nI would suggest to use Failesafe's timeout mechanism like described in https://jodah.net/failsafe/execution-cancellation/ . And then catch TimeoutExceededException and wrap it to PrestoException", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425868203", "createdAt": "2020-05-15T15:11:03Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -64,17 +76,13 @@ public void initializeRubix(NodeManager nodeManager)\n     {\n         ExecutorService initializerService = Executors.newSingleThreadExecutor();\n         ListenableFuture<?> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n-        {\n-            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&\n-                    nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator))) {\n-                try {\n-                    Thread.sleep(100);\n-                }\n-                catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-            }\n-        });\n+                Failsafe.with(RETRY_POLICY).run(() -> {\n+                    if (!nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) ||\n+                            !nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator)) {\n+                        // Failsafe will propagate this exception only when timeout reached.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MjczMQ==", "bodyText": "The fact that you needed to put comment means it is not readable. We are throwing \"timout\" exception ever loop but retry.\n\nIf I use cancellation mechanism I would have to implement:\nwhile (!condition)\n  Thread.sleep()\n\nagain. I like how Failsafe manages that for me. Let's discuss", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425892731", "createdAt": "2020-05-15T15:50:55Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -64,17 +76,13 @@ public void initializeRubix(NodeManager nodeManager)\n     {\n         ExecutorService initializerService = Executors.newSingleThreadExecutor();\n         ListenableFuture<?> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n-        {\n-            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&\n-                    nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator))) {\n-                try {\n-                    Thread.sleep(100);\n-                }\n-                catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-            }\n-        });\n+                Failsafe.with(RETRY_POLICY).run(() -> {\n+                    if (!nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) ||\n+                            !nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator)) {\n+                        // Failsafe will propagate this exception only when timeout reached.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2ODIwMw=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5Njk4Mg==", "bodyText": "@findepi what do you think?", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425896982", "createdAt": "2020-05-15T15:57:53Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -64,17 +76,13 @@ public void initializeRubix(NodeManager nodeManager)\n     {\n         ExecutorService initializerService = Executors.newSingleThreadExecutor();\n         ListenableFuture<?> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n-        {\n-            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&\n-                    nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator))) {\n-                try {\n-                    Thread.sleep(100);\n-                }\n-                catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-            }\n-        });\n+                Failsafe.with(RETRY_POLICY).run(() -> {\n+                    if (!nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) ||\n+                            !nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator)) {\n+                        // Failsafe will propagate this exception only when timeout reached.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2ODIwMw=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0NzQ3Mg==", "bodyText": "@sopel39 i wish i could help. I would need to understand the mechanics better though. (#3749 (comment))", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426147472", "createdAt": "2020-05-16T12:01:37Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -64,17 +76,13 @@ public void initializeRubix(NodeManager nodeManager)\n     {\n         ExecutorService initializerService = Executors.newSingleThreadExecutor();\n         ListenableFuture<?> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n-        {\n-            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&\n-                    nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator))) {\n-                try {\n-                    Thread.sleep(100);\n-                }\n-                catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-            }\n-        });\n+                Failsafe.with(RETRY_POLICY).run(() -> {\n+                    if (!nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) ||\n+                            !nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator)) {\n+                        // Failsafe will propagate this exception only when timeout reached.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2ODIwMw=="}, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTk3OTUyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxNToyM1rOGWJGrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTozNTo0M1rOGWJ4kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MTAyMQ==", "bodyText": "Why make a field out of it instead using a constant?", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425871021", "createdAt": "2020-05-15T15:15:23Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -57,6 +53,7 @@\n \n     private static final Logger log = Logger.get(RubixInitializer.class);\n \n+    private final RetryPolicy retryPolicy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4Mzc5Mg==", "bodyText": "This is so that different policy can be used in test", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425883792", "createdAt": "2020-05-15T15:35:43Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -57,6 +53,7 @@\n \n     private static final Logger log = Logger.get(RubixInitializer.class);\n \n+    private final RetryPolicy retryPolicy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MTAyMQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTk4NDU3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxNjozM1rOGWJJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTo0MDoyNVrOGWKDdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MTgzMg==", "bodyText": "shouldn't we just throw here?", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425871832", "createdAt": "2020-05-15T15:16:33Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -81,7 +80,6 @@ public void updateConfiguration(Configuration config, HdfsContext context, URI u\n     {\n         if (!cacheReady) {\n             setCacheDataEnabled(config, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4NjU4MQ==", "bodyText": "I prefer to be on safe-side (until RubixConfigurationInitializer is fully immutable) and just allow to create uncached FS until Rubix initializes. Rubix now initializes as part of @PostConstruct, but I guess there could be some other init method that needs FS before that happens.", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425886581", "createdAt": "2020-05-15T15:40:25Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -81,7 +80,6 @@ public void updateConfiguration(Configuration config, HdfsContext context, URI u\n     {\n         if (!cacheReady) {\n             setCacheDataEnabled(config, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MTgzMg=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTk5OTAzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxOTo1NVrOGWJSsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTo0MTo1OVrOGWKHKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3NDA5Nw==", "bodyText": "Did you test if breaks presto startup in case of failure with @PostConstruct. My understanding is it should but please verify.", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425874097", "createdAt": "2020-05-15T15:19:55Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -54,39 +55,44 @@\n     private static final Logger log = Logger.get(RubixInitializer.class);\n \n     private final RetryPolicy retryPolicy;\n+    private final NodeManager nodeManager;\n     private final CatalogName catalogName;\n     private final RubixConfigurationInitializer rubixConfigurationInitializer;\n     private final HdfsConfigurationInitializer hdfsConfigurationInitializer;\n \n     @Inject\n     public RubixInitializer(\n+            NodeManager nodeManager,\n             CatalogName catalogName,\n             RubixConfigurationInitializer rubixConfigurationInitializer,\n             HdfsConfigurationInitializer hdfsConfigurationInitializer)\n     {\n-        this(RETRY_POLICY, catalogName, rubixConfigurationInitializer, hdfsConfigurationInitializer);\n+        this(RETRY_POLICY, nodeManager, catalogName, rubixConfigurationInitializer, hdfsConfigurationInitializer);\n     }\n \n     @VisibleForTesting\n     RubixInitializer(\n             RetryPolicy retryPolicy,\n+            NodeManager nodeManager,\n             CatalogName catalogName,\n             RubixConfigurationInitializer rubixConfigurationInitializer,\n             HdfsConfigurationInitializer hdfsConfigurationInitializer)\n     {\n         this.retryPolicy = retryPolicy;\n+        this.nodeManager = nodeManager;\n         this.catalogName = catalogName;\n         this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n         this.hdfsConfigurationInitializer = hdfsConfigurationInitializer;\n     }\n \n-    public void initializeRubix(NodeManager nodeManager)\n+    @PostConstruct", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4NzUzMQ==", "bodyText": "It does fail, checked", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r425887531", "createdAt": "2020-05-15T15:41:59Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -54,39 +55,44 @@\n     private static final Logger log = Logger.get(RubixInitializer.class);\n \n     private final RetryPolicy retryPolicy;\n+    private final NodeManager nodeManager;\n     private final CatalogName catalogName;\n     private final RubixConfigurationInitializer rubixConfigurationInitializer;\n     private final HdfsConfigurationInitializer hdfsConfigurationInitializer;\n \n     @Inject\n     public RubixInitializer(\n+            NodeManager nodeManager,\n             CatalogName catalogName,\n             RubixConfigurationInitializer rubixConfigurationInitializer,\n             HdfsConfigurationInitializer hdfsConfigurationInitializer)\n     {\n-        this(RETRY_POLICY, catalogName, rubixConfigurationInitializer, hdfsConfigurationInitializer);\n+        this(RETRY_POLICY, nodeManager, catalogName, rubixConfigurationInitializer, hdfsConfigurationInitializer);\n     }\n \n     @VisibleForTesting\n     RubixInitializer(\n             RetryPolicy retryPolicy,\n+            NodeManager nodeManager,\n             CatalogName catalogName,\n             RubixConfigurationInitializer rubixConfigurationInitializer,\n             HdfsConfigurationInitializer hdfsConfigurationInitializer)\n     {\n         this.retryPolicy = retryPolicy;\n+        this.nodeManager = nodeManager;\n         this.catalogName = catalogName;\n         this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n         this.hdfsConfigurationInitializer = hdfsConfigurationInitializer;\n     }\n \n-    public void initializeRubix(NodeManager nodeManager)\n+    @PostConstruct", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3NDA5Nw=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzc3MDk1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMTo1NToxM1rOGWZ84w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMTo1NToxM1rOGWZ84w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0NzA0Mw==", "bodyText": "its mutable, so it better be a static factory method, not a constant", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426147043", "createdAt": "2020-05-16T11:55:13Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -43,74 +45,87 @@\n  */\n public class RubixInitializer\n {\n+    private static final RetryPolicy<?> RETRY_POLICY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzc3MTI1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMTo1NTo0M1rOGWZ9Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMTo1NTo0M1rOGWZ9Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0NzA4Mw==", "bodyText": "this is mutable, so you should make a defensive copy in the ctor", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426147083", "createdAt": "2020-05-16T11:55:43Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -43,74 +45,87 @@\n  */\n public class RubixInitializer\n {\n+    private static final RetryPolicy<?> RETRY_POLICY =\n+            new RetryPolicy<>()\n+                    // unlimited attempts\n+                    .withMaxAttempts(-1)\n+                    .withDelay(Duration.ofMillis(100))\n+                    .withMaxDuration(Duration.ofMinutes(10));\n+\n     private static final Logger log = Logger.get(RubixInitializer.class);\n \n+    private final RetryPolicy retryPolicy;\n+    private final NodeManager nodeManager;\n     private final CatalogName catalogName;\n     private final RubixConfigurationInitializer rubixConfigurationInitializer;\n     private final HdfsConfigurationInitializer hdfsConfigurationInitializer;\n \n     @Inject\n     public RubixInitializer(\n+            NodeManager nodeManager,\n+            CatalogName catalogName,\n+            RubixConfigurationInitializer rubixConfigurationInitializer,\n+            HdfsConfigurationInitializer hdfsConfigurationInitializer)\n+    {\n+        this(RETRY_POLICY, nodeManager, catalogName, rubixConfigurationInitializer, hdfsConfigurationInitializer);\n+    }\n+\n+    @VisibleForTesting\n+    RubixInitializer(\n+            RetryPolicy retryPolicy,\n+            NodeManager nodeManager,\n             CatalogName catalogName,\n             RubixConfigurationInitializer rubixConfigurationInitializer,\n             HdfsConfigurationInitializer hdfsConfigurationInitializer)\n     {\n+        this.retryPolicy = retryPolicy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzc3MjU5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMTo1ODozOVrOGWZ9tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo0NjoyNVrOGWxrOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0NzI1Mg==", "bodyText": "How does the hive connector work until rubix is started?\nThe code here fails after 10 minutes. Does it mean the node is unusable at this point?\nIf so, it should ... shut down?\nOr, maybe the caching is unusable, but the node is?", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426147252", "createdAt": "2020-05-16T11:58:39Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -43,74 +45,87 @@\n  */\n public class RubixInitializer\n {\n+    private static final RetryPolicy<?> RETRY_POLICY =\n+            new RetryPolicy<>()\n+                    // unlimited attempts\n+                    .withMaxAttempts(-1)\n+                    .withDelay(Duration.ofMillis(100))\n+                    .withMaxDuration(Duration.ofMinutes(10));\n+\n     private static final Logger log = Logger.get(RubixInitializer.class);\n \n+    private final RetryPolicy retryPolicy;\n+    private final NodeManager nodeManager;\n     private final CatalogName catalogName;\n     private final RubixConfigurationInitializer rubixConfigurationInitializer;\n     private final HdfsConfigurationInitializer hdfsConfigurationInitializer;\n \n     @Inject\n     public RubixInitializer(\n+            NodeManager nodeManager,\n+            CatalogName catalogName,\n+            RubixConfigurationInitializer rubixConfigurationInitializer,\n+            HdfsConfigurationInitializer hdfsConfigurationInitializer)\n+    {\n+        this(RETRY_POLICY, nodeManager, catalogName, rubixConfigurationInitializer, hdfsConfigurationInitializer);\n+    }\n+\n+    @VisibleForTesting\n+    RubixInitializer(\n+            RetryPolicy retryPolicy,\n+            NodeManager nodeManager,\n             CatalogName catalogName,\n             RubixConfigurationInitializer rubixConfigurationInitializer,\n             HdfsConfigurationInitializer hdfsConfigurationInitializer)\n     {\n+        this.retryPolicy = retryPolicy;\n+        this.nodeManager = nodeManager;\n         this.catalogName = catalogName;\n         this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n         this.hdfsConfigurationInitializer = hdfsConfigurationInitializer;\n     }\n \n-    public void initializeRubix(NodeManager nodeManager)\n+    @PostConstruct\n+    public void initializeRubix()\n+    {\n+        waitForCoordinator();\n+        startRubix();\n+    }\n+\n+    private void waitForCoordinator()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNTczOA==", "bodyText": "When waiting for coordinator times-out then Presto node will fail to start. It will never announce itself as a worker", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426535738", "createdAt": "2020-05-18T10:46:25Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -43,74 +45,87 @@\n  */\n public class RubixInitializer\n {\n+    private static final RetryPolicy<?> RETRY_POLICY =\n+            new RetryPolicy<>()\n+                    // unlimited attempts\n+                    .withMaxAttempts(-1)\n+                    .withDelay(Duration.ofMillis(100))\n+                    .withMaxDuration(Duration.ofMinutes(10));\n+\n     private static final Logger log = Logger.get(RubixInitializer.class);\n \n+    private final RetryPolicy retryPolicy;\n+    private final NodeManager nodeManager;\n     private final CatalogName catalogName;\n     private final RubixConfigurationInitializer rubixConfigurationInitializer;\n     private final HdfsConfigurationInitializer hdfsConfigurationInitializer;\n \n     @Inject\n     public RubixInitializer(\n+            NodeManager nodeManager,\n+            CatalogName catalogName,\n+            RubixConfigurationInitializer rubixConfigurationInitializer,\n+            HdfsConfigurationInitializer hdfsConfigurationInitializer)\n+    {\n+        this(RETRY_POLICY, nodeManager, catalogName, rubixConfigurationInitializer, hdfsConfigurationInitializer);\n+    }\n+\n+    @VisibleForTesting\n+    RubixInitializer(\n+            RetryPolicy retryPolicy,\n+            NodeManager nodeManager,\n             CatalogName catalogName,\n             RubixConfigurationInitializer rubixConfigurationInitializer,\n             HdfsConfigurationInitializer hdfsConfigurationInitializer)\n     {\n+        this.retryPolicy = retryPolicy;\n+        this.nodeManager = nodeManager;\n         this.catalogName = catalogName;\n         this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n         this.hdfsConfigurationInitializer = hdfsConfigurationInitializer;\n     }\n \n-    public void initializeRubix(NodeManager nodeManager)\n+    @PostConstruct\n+    public void initializeRubix()\n+    {\n+        waitForCoordinator();\n+        startRubix();\n+    }\n+\n+    private void waitForCoordinator()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0NzI1Mg=="}, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDM3NDY0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNjo0MDozMFrOGWeqHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNjo0MDozMFrOGWeqHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNDE1OQ==", "bodyText": "We should drop Lazily from the comments now as initialisation is now synchronous", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426224159", "createdAt": "2020-05-17T06:40:30Z", "author": {"login": "shubhamtagra"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -26,14 +24,18 @@\n import io.prestosql.plugin.hive.HdfsConfigurationInitializer;\n import io.prestosql.spi.Node;\n import io.prestosql.spi.NodeManager;\n+import io.prestosql.spi.PrestoException;\n+import net.jodah.failsafe.Failsafe;\n+import net.jodah.failsafe.RetryPolicy;\n import org.apache.hadoop.conf.Configuration;\n \n+import javax.annotation.PostConstruct;\n import javax.inject.Inject;\n \n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n+import java.time.Duration;\n \n import static io.prestosql.plugin.hive.util.ConfigurationUtils.getInitialConfiguration;\n+import static io.prestosql.spi.StandardErrorCode.EXCEEDED_TIME_LIMIT;\n \n /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDg3NjI5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxODozOToyOVrOGWiwzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo0NDo0MVrOGWxnoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5MTQwNA==", "bodyText": "The rest of the Hive connector uses RetryDriver, and I think we should stick with that, unless we cannot.  cc @electrum", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426291404", "createdAt": "2020-05-17T18:39:29Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -43,6 +48,13 @@\n  */\n public class RubixInitializer\n {\n+    private static final RetryPolicy<?> RETRY_POLICY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNDgxNg==", "bodyText": "switcher to RetryDriver", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426534816", "createdAt": "2020-05-18T10:44:41Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -43,6 +48,13 @@\n  */\n public class RubixInitializer\n {\n+    private static final RetryPolicy<?> RETRY_POLICY =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5MTQwNA=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjUxOTc5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowMjo1M1rOGWyM0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowMjo1M1rOGWyM0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NDMzNw==", "bodyText": "commit message is wrong. Use method reference instead of lambda", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426544337", "createdAt": "2020-05-18T11:02:53Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -79,7 +79,7 @@ public void initializeRubix(NodeManager nodeManager)\n         addSuccessCallback(\n                 nodeJoinFuture,\n                 () -> {\n-                    Node master = nodeManager.getAllNodes().stream().filter(node -> node.isCoordinator()).findFirst().get();\n+                    Node master = nodeManager.getAllNodes().stream().filter(Node::isCoordinator).findFirst().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjUyMTA3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowMzoyMlrOGWyNtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowMzoyMlrOGWyNtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NDU2NQ==", "bodyText": "// wait for up to 10 minutes", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426544565", "createdAt": "2020-05-18T11:03:22Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -43,6 +52,16 @@\n  */\n public class RubixInitializer\n {\n+    private static final RetryDriver DEFAULT_COORDINATOR_RETRY_DRIVER = retry()\n+            // unlimited attempts\n+            .maxAttempts(MAX_VALUE)\n+            .exponentialBackoff(\n+                    new Duration(1, SECONDS),\n+                    new Duration(1, SECONDS),\n+                    // wait for 10 minutes for coordinator", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjUyMjkwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowNDowNlrOGWyO7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowNDowNlrOGWyO7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NDg3OQ==", "bodyText": "rename to WAIT_FOR_COORDINATOR_RETRY_DRIVER.\nedit; skip this. You allow for overriding it in followup commit", "url": "https://github.com/trinodb/trino/pull/3749#discussion_r426544879", "createdAt": "2020-05-18T11:04:06Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -43,6 +52,16 @@\n  */\n public class RubixInitializer\n {\n+    private static final RetryDriver DEFAULT_COORDINATOR_RETRY_DRIVER = retry()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4828, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}