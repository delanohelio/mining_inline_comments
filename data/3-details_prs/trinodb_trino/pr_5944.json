{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMDY4OTY4", "number": 5944, "title": "Improvements to TestEventListener", "bodyText": "Should fix (or at least highly decrease probability of)  #5928", "createdAt": "2020-11-12T18:18:06Z", "url": "https://github.com/trinodb/trino/pull/5944", "merged": true, "mergeCommit": {"oid": "bf4148536fa9bfebd4b86111a46b413b78ec8013"}, "closed": true, "closedAt": "2020-11-16T17:36:43Z", "author": {"login": "losipiuk"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb2SRGgH2gAyNTIwMDY4OTY4OmI3MGMyMGEyZTc2ZjAxOGNhNDIwMjNjZGNjZTAwZTkyNzI3MzUzZTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddFatIABqjQwMDAzNjczMzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b70c20a2e76f018ca42023cdcce00e92727353e3", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/b70c20a2e76f018ca42023cdcce00e92727353e3", "committedDate": "2020-11-12T17:48:01Z", "message": "Switch actual/expected in assertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd5b12100ca4d6500ec11285de5be5d24f734ffc", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/dd5b12100ca4d6500ec11285de5be5d24f734ffc", "committedDate": "2020-11-12T17:48:01Z", "message": "Rename EventsBuilder to EventsCollector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d47113d2d949f32f70d2932b0b2bc393137f1bce", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/d47113d2d949f32f70d2932b0b2bc393137f1bce", "committedDate": "2020-11-12T17:48:01Z", "message": "Rename parameter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTExNDgz", "url": "https://github.com/trinodb/trino/pull/5944#pullrequestreview-529511483", "createdAt": "2020-11-12T21:28:57Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMToyODo1OFrOHyPDSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTozNDo1OVrOHyPPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzNzQ0OA==", "bodyText": "perhaps it's even better when the exception is asserted in the calling code, as if using org.assertj.core.api.Assertions.catchThrowable + Assertions.assertThat", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r522437448", "createdAt": "2020-11-12T21:28:58Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/EventsAwaitingQueries.java", "diffHunk": "@@ -43,7 +43,13 @@ MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int num\n         return runQueryAndWaitForEvents(sql, numEventsExpected, session, Optional.empty());\n     }\n \n-    MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Session session, Optional<String> expectedExceptionRegEx)\n+    MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Session session, String expectedExceptionRegEx)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzODI4Nw==", "bodyText": "Add simplifying override\n\n\noverride -> overload ?\nwhy one is  private and anotehr package private?", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r522438287", "createdAt": "2020-11-12T21:30:33Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/EventsAwaitingQueries.java", "diffHunk": "@@ -43,7 +43,13 @@ MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int num\n         return runQueryAndWaitForEvents(sql, numEventsExpected, session, Optional.empty());\n     }\n \n-    MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Session session, Optional<String> expectedExceptionRegEx)\n+    MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Session session, String expectedExceptionRegEx)\n+            throws Exception\n+    {\n+        return runQueryAndWaitForEvents(sql, numEventsExpected, session, Optional.of(expectedExceptionRegEx));\n+    }\n+\n+    private MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Session session, Optional<String> expectedExceptionRegEx)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzODg4NQ==", "bodyText": "sadly even more overloads. Maybe the simplifying one was not a good idea after all?", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r522438885", "createdAt": "2020-11-12T21:31:43Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/EventsAwaitingQueries.java", "diffHunk": "@@ -40,19 +42,31 @@\n     MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Session session)\n             throws Exception\n     {\n-        return runQueryAndWaitForEvents(sql, numEventsExpected, session, Optional.empty());\n+        return runQueryAndWaitForEvents(sql, numEventsExpected, event -> true, session, Optional.empty());\n     }\n \n     MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Session session, String expectedExceptionRegEx)\n             throws Exception\n     {\n-        return runQueryAndWaitForEvents(sql, numEventsExpected, session, Optional.of(expectedExceptionRegEx));\n+        return runQueryAndWaitForEvents(sql, numEventsExpected, event -> true, session, Optional.of(expectedExceptionRegEx));\n     }\n \n-    private MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Session session, Optional<String> expectedExceptionRegEx)\n+    MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Predicate<QueryMetadata> queryFilter, Session session)\n             throws Exception\n     {\n-        eventsCollector.reset(numEventsExpected);\n+        return runQueryAndWaitForEvents(sql, numEventsExpected, queryFilter, session, Optional.empty());\n+    }\n+\n+    MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected, Predicate<QueryMetadata> queryFilter, Session session, String expectedExceptionRegEx)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzOTE2Nw==", "bodyText": "rnn", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r522439167", "createdAt": "2020-11-12T21:32:17Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/EventsCollector.java", "diffHunk": "@@ -38,20 +37,20 @@\n \n     public EventsCollector()\n     {\n-        this(alwaysTrue());\n+        reset(0);\n     }\n \n-    public EventsCollector(Predicate<QueryMetadata> queryFilter)\n+    public synchronized void reset(int numEvents)\n     {\n-        this.queryFilter = requireNonNull(queryFilter, \"filter is null\");\n-        reset(0);\n+        reset(0, queryMetadata -> true);\n     }\n \n-    public synchronized void reset(int numEvents)\n+    public synchronized void reset(int numEvents, Predicate<QueryMetadata> queryFilter)\n     {\n         queryCreatedEvents = ImmutableList.builder();\n         queryCompletedEvents = ImmutableList.builder();\n         splitCompletedEvents = ImmutableList.builder();\n+        this.queryFilter = queryFilter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MDA2MQ==", "bodyText": "You can do this fluently still\n.setSplitCompletedFilter(event -> !ignoreSplits)\n.build();", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r522440061", "createdAt": "2020-11-12T21:34:12Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -254,12 +260,15 @@ private void assertFailedQuery(Session session, @Language(\"SQL\") String sql, Str\n         assertEquals(expectedFailure, failureInfo.getFailureMessage().orElse(null));\n     }\n \n-    private EventFilters buildEventFilters()\n+    private EventFilters buildEventFilters(boolean ignoreSplits)\n     {\n-        return EventFilters.builder()\n+        EventFilters.Builder builder = EventFilters.builder()\n                 .setQueryCreatedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER))\n-                .setQueryCompletedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER))\n-                .build();\n+                .setQueryCompletedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER));\n+        if (ignoreSplits) {\n+            builder.setSplitCompletedFilter(event -> false);\n+        }\n+        return builder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MDQ2OA==", "bodyText": "GHA clock is not reliable. #5608\ncan we have marker per test instead?", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r522440468", "createdAt": "2020-11-12T21:34:59Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -262,12 +263,16 @@ private void assertFailedQuery(Session session, @Language(\"SQL\") String sql, boo\n \n     private EventFilters buildEventFilters(boolean ignoreSplits)\n     {\n+        Instant now = Instant.now();\n         EventFilters.Builder builder = EventFilters.builder()\n-                .setQueryCreatedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER))\n-                .setQueryCompletedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER));\n+                .setQueryCreatedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER) && !event.getCreateTime().isBefore(now))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDIyNDAy", "url": "https://github.com/trinodb/trino/pull/5944#pullrequestreview-530422402", "createdAt": "2020-11-13T21:19:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxOTozMVrOHy_50A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyNzo1OVrOHzAIfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNzg0MA==", "bodyText": "this is applied, but in the next commit, should be here, in Filter out split events from testAbortedWhileWaitingForResources", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r523237840", "createdAt": "2020-11-13T21:19:31Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -254,12 +260,15 @@ private void assertFailedQuery(Session session, @Language(\"SQL\") String sql, Str\n         assertEquals(expectedFailure, failureInfo.getFailureMessage().orElse(null));\n     }\n \n-    private EventFilters buildEventFilters()\n+    private EventFilters buildEventFilters(boolean ignoreSplits)\n     {\n-        return EventFilters.builder()\n+        EventFilters.Builder builder = EventFilters.builder()\n                 .setQueryCreatedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER))\n-                .setQueryCompletedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER))\n-                .build();\n+                .setQueryCompletedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER));\n+        if (ignoreSplits) {\n+            builder.setSplitCompletedFilter(event -> false);\n+        }\n+        return builder.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MDA2MQ=="}, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzODgyMw==", "bodyText": "recoreded -> recorded", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r523238823", "createdAt": "2020-11-13T21:21:41Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -189,17 +191,20 @@ public void testKilledWhileWaitingForResources()\n                     .build();\n             String sql = format(\"SELECT nationkey as %s  FROM tpch.sf1.nation\", testQueryMarker);\n \n+            // preconfigure event collector filtering so helper queries are not recoreded", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzOTA5Mw==", "bodyText": "unused", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r523239093", "createdAt": "2020-11-13T21:22:18Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -260,14 +281,19 @@ private void assertFailedQuery(Session session, @Language(\"SQL\") String sql, boo\n         assertEquals(expectedFailure, failureInfo.getFailureMessage().orElse(null));\n     }\n \n-    private EventFilters buildEventFilters(boolean ignoreSplits)\n+    private EventFilters buildEventFilters(String queryMarker, boolean ignoreSplits)\n     {\n+        Instant now = Instant.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzOTQ1OQ==", "bodyText": "why not event.getMetadata().getQuery().contains(queryMarker) ?", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r523239459", "createdAt": "2020-11-13T21:23:08Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -260,14 +281,19 @@ private void assertFailedQuery(Session session, @Language(\"SQL\") String sql, boo\n         assertEquals(expectedFailure, failureInfo.getFailureMessage().orElse(null));\n     }\n \n-    private EventFilters buildEventFilters(boolean ignoreSplits)\n+    private EventFilters buildEventFilters(String queryMarker, boolean ignoreSplits)\n     {\n+        Instant now = Instant.now();\n         EventFilters.Builder builder = EventFilters.builder()\n-                .setQueryCreatedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER))\n-                .setQueryCompletedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER));\n-        if (ignoreSplits) {\n-            builder.setSplitCompletedFilter(event -> false);\n-        }\n+                .setQueryCreatedFilter(event -> {\n+                    boolean queryOk = event.getMetadata().getQuery().contains(queryMarker);\n+                    if (!queryOk) {\n+                        ignoredQueries.add(event.getMetadata().getQueryId());\n+                    }\n+                    return queryOk;\n+                })\n+                .setQueryCompletedFilter(event -> !ignoredQueries.contains(event.getMetadata().getQueryId()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzOTg3OQ==", "bodyText": "typo", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r523239879", "createdAt": "2020-11-13T21:24:00Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -248,10 +253,26 @@ private void assertFailedQuery(Session session, @Language(\"SQL\") String sql, boo\n         queries.runQueryAndWaitForEvents(\n                 sql,\n                 2,\n-                buildEventFilters(ignoreSplits),\n+                buildEventFilters(sql, ignoreSplits), // we use whole sql as query marker\n                 session,\n                 Optional.of(expectedFailure));\n \n+        assertComptedEventFailure(sql, expectedFailure);\n+    }\n+\n+    private void assertFailedQueryNoReset(Session session, @Language(\"SQL\") String sql, String expectedFailure)\n+            throws Exception\n+    {\n+        queries.runQueryAndWaitForEventsNoReset(\n+                sql,\n+                session,\n+                Optional.of(expectedFailure));\n+\n+        assertComptedEventFailure(sql, expectedFailure);\n+    }\n+\n+    private void assertComptedEventFailure(@Language(\"SQL\") String sql, String expectedFailure)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MDcxNQ==", "bodyText": "split evens complicate things because you need ignoredQueries... but in fact, it seems no-one here is testing them. Am i missing something? we could just always ignore them and adjusted number of awaited events in assertFailedQuery. We would reiterate when we add actual tests for these events", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r523240715", "createdAt": "2020-11-13T21:25:51Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -260,14 +281,19 @@ private void assertFailedQuery(Session session, @Language(\"SQL\") String sql, boo\n         assertEquals(expectedFailure, failureInfo.getFailureMessage().orElse(null));\n     }\n \n-    private EventFilters buildEventFilters(boolean ignoreSplits)\n+    private EventFilters buildEventFilters(String queryMarker, boolean ignoreSplits)\n     {\n+        Instant now = Instant.now();\n         EventFilters.Builder builder = EventFilters.builder()\n-                .setQueryCreatedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER))\n-                .setQueryCompletedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER));\n-        if (ignoreSplits) {\n-            builder.setSplitCompletedFilter(event -> false);\n-        }\n+                .setQueryCreatedFilter(event -> {\n+                    boolean queryOk = event.getMetadata().getQuery().contains(queryMarker);\n+                    if (!queryOk) {\n+                        ignoredQueries.add(event.getMetadata().getQueryId());\n+                    }\n+                    return queryOk;\n+                })\n+                .setQueryCompletedFilter(event -> !ignoredQueries.contains(event.getMetadata().getQueryId()))\n+                .setSplitCompletedFilter(event -> !ignoreSplits && !ignoredQueries.contains(event.getQueryId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MTI0Nw==", "bodyText": "Instead of global state which is harder to reason about, declare AtomicReference<String> queryId as a private variable within buildEventFilters method. QueryCreatedFilter would set it and SplitCompletedFilter would use it.", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r523241247", "createdAt": "2020-11-13T21:27:05Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -260,14 +281,19 @@ private void assertFailedQuery(Session session, @Language(\"SQL\") String sql, boo\n         assertEquals(expectedFailure, failureInfo.getFailureMessage().orElse(null));\n     }\n \n-    private EventFilters buildEventFilters(boolean ignoreSplits)\n+    private EventFilters buildEventFilters(String queryMarker, boolean ignoreSplits)\n     {\n+        Instant now = Instant.now();\n         EventFilters.Builder builder = EventFilters.builder()\n-                .setQueryCreatedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER))\n-                .setQueryCompletedFilter(event -> !event.getMetadata().getQuery().contains(IGNORE_EVENT_MARKER));\n-        if (ignoreSplits) {\n-            builder.setSplitCompletedFilter(event -> false);\n-        }\n+                .setQueryCreatedFilter(event -> {\n+                    boolean queryOk = event.getMetadata().getQuery().contains(queryMarker);\n+                    if (!queryOk) {\n+                        ignoredQueries.add(event.getMetadata().getQueryId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MTU5OQ==", "bodyText": "i do not understand this comment. what would happen if we remove this code line?", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r523241599", "createdAt": "2020-11-13T21:27:59Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -189,17 +191,20 @@ public void testKilledWhileWaitingForResources()\n                     .build();\n             String sql = format(\"SELECT nationkey as %s  FROM tpch.sf1.nation\", testQueryMarker);\n \n+            // preconfigure event collector filtering so helper queries are not recoreded\n+            generatedEvents.reset(2, buildEventFilters(sql, true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d01635fa4fd9bd50451604ffacf3ae8710a6e91", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/4d01635fa4fd9bd50451604ffacf3ae8710a6e91", "committedDate": "2020-11-16T12:25:27Z", "message": "Add per-event filtering to EventsCollector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMzI4ODY0", "url": "https://github.com/trinodb/trino/pull/5944#pullrequestreview-531328864", "createdAt": "2020-11-16T13:41:58Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo0MTo1OFrOHz_NMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo0MzowM1rOHz_P9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NDk5Mg==", "bodyText": "move test helper below tests", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r524274992", "createdAt": "2020-11-16T13:41:58Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerWithSplits.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.execution.TestEventListenerPlugin.TestingEventListenerPlugin;\n+import io.prestosql.plugin.resourcegroups.ResourceGroupManagerPlugin;\n+import io.prestosql.plugin.tpch.TpchPlugin;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.QueryStatistics;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+import io.prestosql.spi.resourcegroups.QueryType;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.MaterializedResult;\n+import io.prestosql.testing.QueryRunner;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.execution.TestQueues.createResourceGroupId;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test(singleThreaded = true)\n+public class TestEventListenerWithSplits\n+        extends AbstractTestQueryFramework\n+{\n+    private static final int SPLITS_PER_NODE = 3;\n+    private final EventsCollector generatedEvents = new EventsCollector();\n+    private EventsAwaitingQueries queries;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        Session session = testSessionBuilder()\n+                .setSystemProperty(\"task_concurrency\", \"1\")\n+                .setCatalog(\"tpch\")\n+                .setSchema(\"tiny\")\n+                .setClientInfo(\"{\\\"clientVersion\\\":\\\"testVersion\\\"}\")\n+                .build();\n+\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).setNodeCount(1).build();\n+        queryRunner.installPlugin(new TpchPlugin());\n+        queryRunner.installPlugin(new TestingEventListenerPlugin(generatedEvents));\n+        queryRunner.installPlugin(new ResourceGroupManagerPlugin());\n+        queryRunner.createCatalog(\"tpch\", \"tpch\", ImmutableMap.of(\"tpch.splits-per-node\", Integer.toString(SPLITS_PER_NODE)));\n+        queryRunner.installPlugin(new Plugin()\n+        {\n+            @Override\n+            public Iterable<ConnectorFactory> getConnectorFactories()\n+            {\n+                MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                        .withListTables((session, s) -> ImmutableList.of(new SchemaTableName(\"default\", \"test_table\")))\n+                        .withApplyProjection((session, handle, projections, assignments) -> {\n+                            throw new RuntimeException(\"Throw from apply projection\");\n+                        })\n+                        .build();\n+                return ImmutableList.of(connectorFactory);\n+            }\n+        });\n+        queryRunner.createCatalog(\"mock\", \"mock\", ImmutableMap.of());\n+        queryRunner.getCoordinator().getResourceGroupManager().get()\n+                .setConfigurationManager(\"file\", ImmutableMap.of(\"resource-groups.config-file\", getResourceFilePath(\"resource_groups_config_simple.json\")));\n+\n+        queries = new EventsAwaitingQueries(generatedEvents, queryRunner);\n+\n+        return queryRunner;\n+    }\n+\n+    private String getResourceFilePath(String fileName)\n+    {\n+        return this.getClass().getClassLoader().getResource(fileName).getPath();\n+    }\n+\n+    private MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NTI4MQ==", "bodyText": "\"test SplitsFor Constant query\" ?", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r524275281", "createdAt": "2020-11-16T13:42:23Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerWithSplits.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.execution.TestEventListenerPlugin.TestingEventListenerPlugin;\n+import io.prestosql.plugin.resourcegroups.ResourceGroupManagerPlugin;\n+import io.prestosql.plugin.tpch.TpchPlugin;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.QueryStatistics;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+import io.prestosql.spi.resourcegroups.QueryType;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.MaterializedResult;\n+import io.prestosql.testing.QueryRunner;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.execution.TestQueues.createResourceGroupId;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test(singleThreaded = true)\n+public class TestEventListenerWithSplits\n+        extends AbstractTestQueryFramework\n+{\n+    private static final int SPLITS_PER_NODE = 3;\n+    private final EventsCollector generatedEvents = new EventsCollector();\n+    private EventsAwaitingQueries queries;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        Session session = testSessionBuilder()\n+                .setSystemProperty(\"task_concurrency\", \"1\")\n+                .setCatalog(\"tpch\")\n+                .setSchema(\"tiny\")\n+                .setClientInfo(\"{\\\"clientVersion\\\":\\\"testVersion\\\"}\")\n+                .build();\n+\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).setNodeCount(1).build();\n+        queryRunner.installPlugin(new TpchPlugin());\n+        queryRunner.installPlugin(new TestingEventListenerPlugin(generatedEvents));\n+        queryRunner.installPlugin(new ResourceGroupManagerPlugin());\n+        queryRunner.createCatalog(\"tpch\", \"tpch\", ImmutableMap.of(\"tpch.splits-per-node\", Integer.toString(SPLITS_PER_NODE)));\n+        queryRunner.installPlugin(new Plugin()\n+        {\n+            @Override\n+            public Iterable<ConnectorFactory> getConnectorFactories()\n+            {\n+                MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                        .withListTables((session, s) -> ImmutableList.of(new SchemaTableName(\"default\", \"test_table\")))\n+                        .withApplyProjection((session, handle, projections, assignments) -> {\n+                            throw new RuntimeException(\"Throw from apply projection\");\n+                        })\n+                        .build();\n+                return ImmutableList.of(connectorFactory);\n+            }\n+        });\n+        queryRunner.createCatalog(\"mock\", \"mock\", ImmutableMap.of());\n+        queryRunner.getCoordinator().getResourceGroupManager().get()\n+                .setConfigurationManager(\"file\", ImmutableMap.of(\"resource-groups.config-file\", getResourceFilePath(\"resource_groups_config_simple.json\")));\n+\n+        queries = new EventsAwaitingQueries(generatedEvents, queryRunner);\n+\n+        return queryRunner;\n+    }\n+\n+    private String getResourceFilePath(String fileName)\n+    {\n+        return this.getClass().getClassLoader().getResource(fileName).getPath();\n+    }\n+\n+    private MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int numEventsExpected)\n+            throws Exception\n+    {\n+        return queries.runQueryAndWaitForEvents(sql, numEventsExpected, getSession());\n+    }\n+\n+    @Test\n+    public void testSplitsForNormalQuery()\n+            throws Exception\n+    {\n+        // We expect the following events\n+        // QueryCreated: 1, QueryCompleted: 1, Splits: SPLITS_PER_NODE (leaf splits) + LocalExchange[SINGLE] split + Aggregation/Output split\n+        int expectedEvents = 1 + 1 + SPLITS_PER_NODE + 1 + 1;\n+        runQueryAndWaitForEvents(\"SELECT sum(linenumber) FROM lineitem\", expectedEvents);\n+\n+        QueryCreatedEvent queryCreatedEvent = getOnlyElement(generatedEvents.getQueryCreatedEvents());\n+        assertEquals(queryCreatedEvent.getContext().getServerVersion(), \"testversion\");\n+        assertEquals(queryCreatedEvent.getContext().getServerAddress(), \"127.0.0.1\");\n+        assertEquals(queryCreatedEvent.getContext().getEnvironment(), \"testing\");\n+        assertEquals(queryCreatedEvent.getContext().getClientInfo().get(), \"{\\\"clientVersion\\\":\\\"testVersion\\\"}\");\n+        assertEquals(queryCreatedEvent.getMetadata().getQuery(), \"SELECT sum(linenumber) FROM lineitem\");\n+        assertFalse(queryCreatedEvent.getMetadata().getPreparedQuery().isPresent());\n+\n+        QueryCompletedEvent queryCompletedEvent = getOnlyElement(generatedEvents.getQueryCompletedEvents());\n+        assertTrue(queryCompletedEvent.getContext().getResourceGroupId().isPresent());\n+        assertEquals(queryCompletedEvent.getContext().getResourceGroupId().get(), createResourceGroupId(\"global\", \"user-user\"));\n+        assertEquals(queryCompletedEvent.getIoMetadata().getOutput(), Optional.empty());\n+        assertEquals(queryCompletedEvent.getIoMetadata().getInputs().size(), 1);\n+        assertEquals(queryCompletedEvent.getContext().getClientInfo().get(), \"{\\\"clientVersion\\\":\\\"testVersion\\\"}\");\n+        assertEquals(getOnlyElement(queryCompletedEvent.getIoMetadata().getInputs()).getCatalogName(), \"tpch\");\n+        assertEquals(queryCreatedEvent.getMetadata().getQueryId(), queryCompletedEvent.getMetadata().getQueryId());\n+        assertFalse(queryCompletedEvent.getMetadata().getPreparedQuery().isPresent());\n+        assertEquals(queryCompletedEvent.getStatistics().getCompletedSplits(), SPLITS_PER_NODE + 2);\n+\n+        List<SplitCompletedEvent> splitCompletedEvents = generatedEvents.getSplitCompletedEvents();\n+        assertEquals(splitCompletedEvents.size(), SPLITS_PER_NODE + 2); // leaf splits + aggregation split\n+\n+        // All splits must have the same query ID\n+        Set<String> actual = splitCompletedEvents.stream()\n+                .map(SplitCompletedEvent::getQueryId)\n+                .collect(toSet());\n+        assertEquals(actual, ImmutableSet.of(queryCompletedEvent.getMetadata().getQueryId()));\n+\n+        // Sum of row count processed by all leaf stages is equal to the number of rows in the table\n+        long actualCompletedPositions = splitCompletedEvents.stream()\n+                .filter(e -> !e.getStageId().endsWith(\".0\"))    // filter out the root stage\n+                .mapToLong(e -> e.getStatistics().getCompletedPositions())\n+                .sum();\n+\n+        MaterializedResult result = runQueryAndWaitForEvents(\"SELECT count(*) FROM lineitem\", expectedEvents);\n+        long expectedCompletedPositions = (long) result.getMaterializedRows().get(0).getField(0);\n+        assertEquals(actualCompletedPositions, expectedCompletedPositions);\n+\n+        QueryStatistics statistics = queryCompletedEvent.getStatistics();\n+        // Aggregation can have memory pool usage\n+        assertTrue(statistics.getPeakUserMemoryBytes() >= 0);\n+        assertTrue(statistics.getPeakTaskUserMemory() >= 0);\n+        assertTrue(statistics.getPeakTaskTotalMemory() >= 0);\n+        assertTrue(statistics.getCumulativeMemory() >= 0);\n+\n+        // Not a write query\n+        assertEquals(statistics.getWrittenBytes(), 0);\n+        assertEquals(statistics.getWrittenRows(), 0);\n+        assertEquals(statistics.getStageGcStatistics().size(), 2);\n+\n+        // Deterministic statistics\n+        assertEquals(statistics.getPhysicalInputBytes(), 0);\n+        assertEquals(statistics.getPhysicalInputRows(), expectedCompletedPositions);\n+        assertEquals(statistics.getInternalNetworkBytes(), 369);\n+        assertEquals(statistics.getInternalNetworkRows(), 3);\n+        assertEquals(statistics.getTotalBytes(), 0);\n+        assertEquals(statistics.getOutputBytes(), 9);\n+        assertEquals(statistics.getOutputRows(), 1);\n+        assertTrue(statistics.isComplete());\n+\n+        // Check only the presence because they are non-deterministic.\n+        assertTrue(statistics.getResourceWaitingTime().isPresent());\n+        assertTrue(statistics.getAnalysisTime().isPresent());\n+        assertTrue(statistics.getPlanningTime().isPresent());\n+        assertTrue(statistics.getExecutionTime().isPresent());\n+        assertTrue(statistics.getPlanNodeStatsAndCosts().isPresent());\n+        assertTrue(statistics.getCpuTime().getSeconds() >= 0);\n+        assertTrue(statistics.getWallTime().getSeconds() >= 0);\n+        assertTrue(statistics.getCpuTimeDistribution().size() > 0);\n+        assertTrue(statistics.getOperatorSummaries().size() > 0);\n+    }\n+\n+    @Test\n+    public void testConstantQuery()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NTcwMw==", "bodyText": "why Ignore SplitCompleted events in TestEventListenerBasic changes the method to non-static?", "url": "https://github.com/trinodb/trino/pull/5944#discussion_r524275703", "createdAt": "2020-11-16T13:43:03Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerBasic.java", "diffHunk": "@@ -107,11 +104,12 @@ protected QueryRunner createQueryRunner()\n         return queryRunner;\n     }\n \n-    private static EventFilters buildEventFilters()\n+    private EventFilters buildEventFilters()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2010231223eedd07ccb7524248680d010df4f8", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/bd2010231223eedd07ccb7524248680d010df4f8", "committedDate": "2020-11-16T13:59:24Z", "message": "Split TestEventListener test class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f944d5b8d97c4e1023c9fd2af0f779265c8f667", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/4f944d5b8d97c4e1023c9fd2af0f779265c8f667", "committedDate": "2020-11-16T13:59:25Z", "message": "Ignore SplitCompleted events in TestEventListenerBasic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "4f944d5b8d97c4e1023c9fd2af0f779265c8f667", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/4f944d5b8d97c4e1023c9fd2af0f779265c8f667", "committedDate": "2020-11-16T13:59:25Z", "message": "Ignore SplitCompleted events in TestEventListenerBasic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2538, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}