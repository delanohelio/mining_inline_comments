{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzU2MDE3", "number": 6349, "title": "Avoid repeatedly setting memory limits in QueryContext", "bodyText": "Extracted relevant changes from prestodb/presto#15522\nSynchronizing on the QueryContext as part of every task update adds contention to the already heavily contended QueryContext instance lock (since each memory tracking update must synchronize as well). This change checks whether the memory limit initialization is necessary before synchronizing to avoid adding the extra contention after they\nhave been set at least once successfully.", "createdAt": "2020-12-15T15:59:24Z", "url": "https://github.com/trinodb/trino/pull/6349", "merged": true, "mergeCommit": {"oid": "9a7f569655f9bd4924570f69e7ce0b4d1d22440e"}, "closed": true, "closedAt": "2020-12-22T21:32:41Z", "author": {"login": "pettyjamesm"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmdrg6AFqTU1MjY5MDk5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoxcPYAFqTU1NzM3Nzg1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjkwOTky", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-552690992", "createdAt": "2020-12-15T17:21:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyMTowOFrOIGW0Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyMTowOFrOIGW0Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzNjE5NA==", "bodyText": "It's unclear to me if it's intentional (or desirable) that a task update would previously cause these values to change once a query was promoted to the reserved pool. If so, it's easy enough to modify this PR to handle that as well- just need to know the intended behavior in that situation.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543536194", "createdAt": "2020-12-15T17:21:08Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +112,25 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n         // The coordinator will kill the query if the cluster runs out of memory.\n         maxUserMemory = memoryPool.getMaxBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNzgyNjIx", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-552782621", "createdAt": "2020-12-15T19:09:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTowOTowMVrOIGbjYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1MDo0MVrOIGdNLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMzc5Mg==", "bodyText": "nit: I'd rename this to memoryLimitsInitialized and default it to false. I think it'll help with readability of the setter.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543613792", "createdAt": "2020-12-15T19:09:01Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean needsMemoryLimitsInitialized = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDg3Ng==", "bodyText": "If we decide to stick with changing the limits based on the pool type, can you please add another commit to fix local general pool --> local memory pool in comment?", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543640876", "createdAt": "2020-12-15T19:50:41Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        isResourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyOTQ1Nzk1", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-552945795", "createdAt": "2020-12-15T21:54:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTMzNTg2", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-553533586", "createdAt": "2020-12-16T10:08:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowODozMFrOIG9jJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDoyODozN1rOIG-YfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MDc4OQ==", "bodyText": "rename to isMemoryLimitInitialized", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544170789", "createdAt": "2020-12-16T10:08:30Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTEyNA==", "bodyText": "rename to memoryLimitInitialized", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544171124", "createdAt": "2020-12-16T10:08:58Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean memoryLimitsInitialized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTI4MA==", "bodyText": "this should be volatile", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544171280", "createdAt": "2020-12-16T10:09:14Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean memoryLimitsInitialized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTUwNQ==", "bodyText": "no synchronization is needed", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544171505", "createdAt": "2020-12-16T10:09:32Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return !memoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4NDQ0NA==", "bodyText": "call it resourceOverCommit", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544184444", "createdAt": "2020-12-16T10:28:37Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzY4ODA5", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-553768809", "createdAt": "2020-12-16T14:57:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1NzoxOVrOIHJctw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1NzoxOVrOIHJctw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NTc1MQ==", "bodyText": "this is redundant. We already call queryContext.setMemoryLimitsInitialized(); in updateTask", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544365751", "createdAt": "2020-12-16T14:57:19Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean isMemoryLimitsInitialized()\n+    {\n+        return memoryLimitsInitialized;\n+    }\n+\n+    public void setMemoryLimitsInitialized()\n+    {\n+        memoryLimitsInitialized = true;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        resourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n         // The coordinator will kill the query if the cluster runs out of memory.\n         maxUserMemory = memoryPool.getMaxBytes();\n         maxTotalMemory = memoryPool.getMaxBytes();\n+        //  Mark future memory limit updates as unnecessary\n+        setMemoryLimitsInitialized();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzcyNTkw", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-553772590", "createdAt": "2020-12-16T15:00:51Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTYzNjIw", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-555163620", "createdAt": "2020-12-18T04:22:36Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDoyMjozNlrOIISmXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODoxMDoxMlrOIIXCPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NDI1NA==", "bodyText": "may be just rename the commit to Fix comments in QueryContext or have two separate commits?", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545564254", "createdAt": "2020-12-18T04:22:36Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -126,7 +126,7 @@ public synchronized void initializeMemoryLimits(boolean resourceOverCommit, long\n         checkArgument(maxTotalMemory > 0, \"maxTotalMemory must be > 0, found: %s\", maxTotalMemory);\n         this.resourceOverCommit = resourceOverCommit;\n         if (resourceOverCommit) {\n-            // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n+            // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local memory pool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNTc3NA==", "bodyText": "nit: I'd keep this as >=0, since we don't disallow 0 on the session property.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545625774", "createdAt": "2020-12-18T07:45:24Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,28 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean isMemoryLimitsInitialized()\n+    {\n+        return memoryLimitsInitialized;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n-    public synchronized void setResourceOvercommit()\n+    public synchronized void initializeMemoryLimits(boolean resourceOverCommit, long maxUserMemory, long maxTotalMemory)\n     {\n-        // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n-        // The coordinator will kill the query if the cluster runs out of memory.\n-        maxUserMemory = memoryPool.getMaxBytes();\n-        maxTotalMemory = memoryPool.getMaxBytes();\n+        checkArgument(maxUserMemory > 0, \"maxUserMemory must be > 0, found: %s\", maxUserMemory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyOTQ1MA==", "bodyText": "nit: may be remove the comment or mention query_max_total_memory_per_node too?", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545629450", "createdAt": "2020-12-18T07:54:31Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -372,24 +373,18 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        if (resourceOvercommit(session)) {\n-            // TODO: This should have been done when the QueryContext was created. However, the session isn't available at that point.\n-            queryContexts.getUnchecked(taskId.getQueryId()).setResourceOvercommit();\n-        }\n-        else {\n+        SqlTask sqlTask = tasks.getUnchecked(taskId);\n+        QueryContext queryContext = sqlTask.getQueryContext();\n+        if (!queryContext.isMemoryLimitsInitialized()) {\n             long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n             long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n             // Session property query_max_memory_per_node is used to only decrease memory limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ==", "bodyText": "looks like a bug, good catch!", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545636925", "createdAt": "2020-12-18T08:10:12Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -145,16 +146,15 @@ public SqlTaskManager(\n         SqlTaskExecutionFactory sqlTaskExecutionFactory = new SqlTaskExecutionFactory(taskNotificationExecutor, taskExecutor, planner, splitMonitor, config);\n \n         this.localMemoryManager = requireNonNull(localMemoryManager, \"localMemoryManager is null\");\n-        DataSize maxQueryUserMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n+        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         DataSize maxQueryTotalMemoryPerNode = nodeMemoryConfig.getMaxQueryTotalMemoryPerNode();\n         DataSize maxQuerySpillPerNode = nodeSpillConfig.getQueryMaxSpillPerNode();\n \n-        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         queryMaxMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n-        queryMaxTotalMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n+        queryMaxTotalMemoryPerNode = maxQueryTotalMemoryPerNode.toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTkyMTQ3", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-556192147", "createdAt": "2020-12-21T08:03:50Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODowMzo1MFrOIJPbhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODoxOToxNVrOIJPziQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2MDkwMA==", "bodyText": "nit: redundant only", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546560900", "createdAt": "2020-12-21T08:03:50Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -373,24 +373,18 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        if (resourceOvercommit(session)) {\n-            // TODO: This should have been done when the QueryContext was created. However, the session isn't available at that point.\n-            queryContexts.getUnchecked(taskId.getQueryId()).setResourceOvercommit();\n-        }\n-        else {\n+        SqlTask sqlTask = tasks.getUnchecked(taskId);\n+        QueryContext queryContext = sqlTask.getQueryContext();\n+        if (!queryContext.isMemoryLimitsInitialized()) {\n             long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n             long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n-            // Session property query_max_memory_per_node is used to only decrease memory limit\n-            if (sessionQueryMaxMemoryPerNode <= queryMaxMemoryPerNode) {\n-                queryContexts.getUnchecked(taskId.getQueryId()).setMaxUserMemory(sessionQueryMaxMemoryPerNode);\n-            }\n-\n-            if (sessionQueryTotalMaxMemoryPerNode <= queryMaxTotalMemoryPerNode) {\n-                queryContexts.getUnchecked(taskId.getQueryId()).setMaxTotalMemory(sessionQueryTotalMaxMemoryPerNode);\n-            }\n+            // Session properties are only allowed to only decrease memory limits, not increase them", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2NzA0OQ==", "bodyText": "@sopel39 not sure if there's an easy way to write test for this bugfix, since it'll require asserting failure for a manufactured query that reliably uses low user memory but high total memory - per node. any ideas? (the change looks straightforward though.)", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546567049", "createdAt": "2020-12-21T08:19:15Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -145,16 +146,15 @@ public SqlTaskManager(\n         SqlTaskExecutionFactory sqlTaskExecutionFactory = new SqlTaskExecutionFactory(taskNotificationExecutor, taskExecutor, planner, splitMonitor, config);\n \n         this.localMemoryManager = requireNonNull(localMemoryManager, \"localMemoryManager is null\");\n-        DataSize maxQueryUserMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n+        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         DataSize maxQueryTotalMemoryPerNode = nodeMemoryConfig.getMaxQueryTotalMemoryPerNode();\n         DataSize maxQuerySpillPerNode = nodeSpillConfig.getQueryMaxSpillPerNode();\n \n-        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         queryMaxMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n-        queryMaxTotalMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n+        queryMaxTotalMemoryPerNode = maxQueryTotalMemoryPerNode.toBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDIzMjA5", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-557023209", "createdAt": "2020-12-22T11:50:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b0cac1f0beb7188070d8e09f97c0af29de33b9", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/65b0cac1f0beb7188070d8e09f97c0af29de33b9", "committedDate": "2020-12-22T15:32:49Z", "message": "Fix queryMaxTotalMemoryPerNode being set to queryMaxMemoryPerNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac0d6a7c2ff16fffe609ccdefe886bda3f481d77", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/ac0d6a7c2ff16fffe609ccdefe886bda3f481d77", "committedDate": "2020-12-22T15:32:49Z", "message": "Avoid repeatedly setting memory limits in QueryContext\n\nSynchronizing on the QueryContext as part of every task update adds\ncontention to the already heavily contended QueryContext instance\n(since each memory tracking update must synchronize as well). This\nchange checks whether the memory limit initialization is necessary\nbefore synchronizing to avoid adding the extra contention after they\nhave been set at least once successfully."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cdfae7d39bfe3ee6f7e7db6a5044e06c78a6d25", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/8cdfae7d39bfe3ee6f7e7db6a5044e06c78a6d25", "committedDate": "2020-12-22T15:32:49Z", "message": "Fix comments about QueryMemoryContext and memory limits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11e4da138d7c974514b7cd79b3a36dfd434635f9", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/11e4da138d7c974514b7cd79b3a36dfd434635f9", "committedDate": "2020-12-22T15:32:49Z", "message": "Add test for QueryContext memory limits"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "11e4da138d7c974514b7cd79b3a36dfd434635f9", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/11e4da138d7c974514b7cd79b3a36dfd434635f9", "committedDate": "2020-12-22T15:32:49Z", "message": "Add test for QueryContext memory limits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTgxNzYx", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-557181761", "createdAt": "2020-12-22T15:55:00Z", "commit": {"oid": "11e4da138d7c974514b7cd79b3a36dfd434635f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzc3ODU1", "url": "https://github.com/trinodb/trino/pull/6349#pullrequestreview-557377855", "createdAt": "2020-12-22T21:30:24Z", "commit": {"oid": "11e4da138d7c974514b7cd79b3a36dfd434635f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1842, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}