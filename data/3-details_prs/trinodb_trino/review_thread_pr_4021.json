{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTkzOTc4", "number": 4021, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1Mzo1M1rOEFQthg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1NDozNlrOEFQtpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTUyMTM0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1Mzo1M1rOGjYJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1Mzo1M1rOGjYJIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODg5Nw==", "bodyText": "avoid the  (synchronized) call when newDynamicFilters is empty", "url": "https://github.com/trinodb/trino/pull/4021#discussion_r439748897", "createdAt": "2020-06-13T15:53:53Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -132,15 +133,12 @@ public synchronized void collectDynamicFilters()\n                         .entrySet().stream()\n                         // check if all tasks of a dynamic filter source have reported dynamic filter summary\n                         .filter(stageDomains -> stageDomains.getValue().size() == tasks.size())\n-                        .forEach(stageDomains -> dynamicFilterSummaries.put(\n+                        .forEach(stageDomains -> newDynamicFilters.put(\n                                 SourceDescriptor.of(queryId, stageDomains.getKey()),\n                                 Domain.union(stageDomains.getValue())));\n             }\n \n-            // stop collecting dynamic filters for query when all dynamic filters have been collected\n-            if (dynamicFilterSummaries.keySet().containsAll(queryDynamicFilters.get(queryId))) {\n-                queries.remove(queryId);\n-            }\n+            addDynamicFilters(queryId, newDynamicFilters.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTUyMTY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1NDozNlrOGjYJTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1NDozNlrOGjYJTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODk0Mg==", "bodyText": "it would be good to also reduce synchronization in registerQuery, so that stream collection happens before the lock is taken.", "url": "https://github.com/trinodb/trino/pull/4021#discussion_r439748942", "createdAt": "2020-06-13T15:54:36Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -113,10 +113,11 @@ public synchronized void removeQuery(QueryId queryId)\n     }\n \n     @VisibleForTesting\n-    public synchronized void collectDynamicFilters()\n+    public void collectDynamicFilters()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4064, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}