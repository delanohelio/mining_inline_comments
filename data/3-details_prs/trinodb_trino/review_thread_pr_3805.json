{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTc2MDQx", "number": 3805, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToxMTozMlrOD-h4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMjo1N1rOD-wJHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODkzNDM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/type/TestRowOperators.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToxMTozMlrOGYr2fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTowOTozMFrOGZC9MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNzQ3MA==", "bodyText": "Wasn't the original wording more readable?", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428537470", "createdAt": "2020-05-21T09:11:32Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestRowOperators.java", "diffHunk": "@@ -481,7 +481,7 @@ public void testRowComparison()\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) = row(1, 2)\", BOOLEAN, false);\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) != row(1, 2)\", BOOLEAN, true);\n         assertInvalidFunction(\"row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0])) > row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0]))\",\n-                TYPE_MISMATCH, \"line 1:64: '>' cannot be applied to row(boolean, array(integer), map(integer, double)), row(boolean, array(integer), map(integer, double))\");\n+                TYPE_MISMATCH, \"line 1:64: Operator does not exist: row(boolean, array(integer), map(integer, double)) > row(boolean, array(integer), map(integer, double))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyNTk5Mw==", "bodyText": "I like having the operator in the middle of the types, as it's used in SQL syntax. But we can combine that with the original language. This was inspired by PostgreSQL:\nERROR:  operator does not exist: integer = text", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428725993", "createdAt": "2020-05-21T15:25:12Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/type/TestRowOperators.java", "diffHunk": "@@ -481,7 +481,7 @@ public void testRowComparison()\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) = row(1, 2)\", BOOLEAN, false);\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) != row(1, 2)\", BOOLEAN, true);\n         assertInvalidFunction(\"row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0])) > row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0]))\",\n-                TYPE_MISMATCH, \"line 1:64: '>' cannot be applied to row(boolean, array(integer), map(integer, double)), row(boolean, array(integer), map(integer, double))\");\n+                TYPE_MISMATCH, \"line 1:64: Operator does not exist: row(boolean, array(integer), map(integer, double)) > row(boolean, array(integer), map(integer, double))\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNzQ3MA=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjAxNw==", "bodyText": "integer = text looks nice. For complex types (like the one here), it's hard to fish out the actual operator... maybe it's hard no matter what we do though.", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428916017", "createdAt": "2020-05-21T21:09:30Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestRowOperators.java", "diffHunk": "@@ -481,7 +481,7 @@ public void testRowComparison()\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) = row(1, 2)\", BOOLEAN, false);\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) != row(1, 2)\", BOOLEAN, true);\n         assertInvalidFunction(\"row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0])) > row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0]))\",\n-                TYPE_MISMATCH, \"line 1:64: '>' cannot be applied to row(boolean, array(integer), map(integer, double)), row(boolean, array(integer), map(integer, double))\");\n+                TYPE_MISMATCH, \"line 1:64: Operator does not exist: row(boolean, array(integer), map(integer, double)) > row(boolean, array(integer), map(integer, double))\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNzQ3MA=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTI2MzUyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMDoyN1rOGZC_CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMDoyN1rOGZC_CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return format(\"Operator '%s'%s cannot be applied to %s\",\n          \n          \n            \n                    return format(\n          \n          \n            \n                        \"Operator '%s'%s cannot be applied to %s\",", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428916489", "createdAt": "2020-05-21T21:10:27Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));\n             case CAST:\n-                operatorString = format(\"%s%s\", operatorType.getOperator(), returnType.map(value -> \" to \" + value).orElse(\"\"));\n-                break;\n-            default:\n-                operatorString = format(\"'%s'%s\", operatorType.getOperator(), returnType.map(value -> \":\" + value).orElse(\"\"));\n+                return format(\"Cannot cast %s to %s\", argumentTypes.get(0), returnType.orElseThrow());\n+            case SUBSCRIPT:\n+                return format(\"Cannot use %s for subscript of %s\", argumentTypes.get(1), argumentTypes.get(0));\n         }\n-        return format(\"%s cannot be applied to %s\", operatorString, Joiner.on(\", \").join(argumentTypes));\n+        return format(\"Operator '%s'%s cannot be applied to %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTI2NjYyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMToyNlrOGZDA4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNTo1MjoyMVrOGcw23A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjk2MA==", "bodyText": "Do we have a test case which would hit the returnType.isPresent() case?", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428916960", "createdAt": "2020-05-21T21:11:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));\n             case CAST:\n-                operatorString = format(\"%s%s\", operatorType.getOperator(), returnType.map(value -> \" to \" + value).orElse(\"\"));\n-                break;\n-            default:\n-                operatorString = format(\"'%s'%s\", operatorType.getOperator(), returnType.map(value -> \":\" + value).orElse(\"\"));\n+                return format(\"Cannot cast %s to %s\", argumentTypes.get(0), returnType.orElseThrow());\n+            case SUBSCRIPT:\n+                return format(\"Cannot use %s for subscript of %s\", argumentTypes.get(1), argumentTypes.get(0));\n         }\n-        return format(\"%s cannot be applied to %s\", operatorString, Joiner.on(\", \").join(argumentTypes));\n+        return format(\"Operator '%s'%s cannot be applied to %s\",\n+                operatorType.getOperator(),\n+                returnType.map(value -> \":\" + value).orElse(\"\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxMzc4OA==", "bodyText": "I'm not aware of a way for a query to hit any of the other operators here.", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r432813788", "createdAt": "2020-05-30T05:52:21Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));\n             case CAST:\n-                operatorString = format(\"%s%s\", operatorType.getOperator(), returnType.map(value -> \" to \" + value).orElse(\"\"));\n-                break;\n-            default:\n-                operatorString = format(\"'%s'%s\", operatorType.getOperator(), returnType.map(value -> \":\" + value).orElse(\"\"));\n+                return format(\"Cannot cast %s to %s\", argumentTypes.get(0), returnType.orElseThrow());\n+            case SUBSCRIPT:\n+                return format(\"Cannot use %s for subscript of %s\", argumentTypes.get(1), argumentTypes.get(0));\n         }\n-        return format(\"%s cannot be applied to %s\", operatorString, Joiner.on(\", \").join(argumentTypes));\n+        return format(\"Operator '%s'%s cannot be applied to %s\",\n+                operatorType.getOperator(),\n+                returnType.map(value -> \":\" + value).orElse(\"\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjk2MA=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTI3MDcxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMjo1N1rOGZDDcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMjo1N1rOGZDDcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNzYxNg==", "bodyText": "lowercase IS DISTINCT FROM ?\n(you didn't upper cast in the CAST case; and the sentence is still a sentence when you treat \"is distinct from\" as just words)", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428917616", "createdAt": "2020-05-21T21:12:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4899, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}