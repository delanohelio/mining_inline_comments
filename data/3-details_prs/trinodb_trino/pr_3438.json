{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjM3ODk3", "number": 3438, "title": "Verify data integrity in exchanges", "bodyText": "In our testing, a cloud's network proved to be not reliable. We observed\ndata corruption when transmitting data over TCP.\nVerify data integrity to prevent incorrect query results.\nOptionally support retries when data corruption is detected.", "createdAt": "2020-04-15T09:13:49Z", "url": "https://github.com/trinodb/trino/pull/3438", "merged": true, "mergeCommit": {"oid": "4d80836fb88c7ae1ecfb7469412c505bed58b658"}, "closed": true, "closedAt": "2020-04-30T23:34:28Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX0nOhgFqTM5MzYwMzIwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaYXpmABqjMyNjM5MDYyMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNjAzMjA0", "url": "https://github.com/trinodb/trino/pull/3438#pullrequestreview-393603204", "createdAt": "2020-04-15T09:24:14Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDoxNVrOGFxQtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyNDoxNVrOGFxQtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMzE1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Config(\"exchange.data-integrity-verification\")\n          \n          \n            \n                @Config(\"exchange.data-integrity-protection\")\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408703156", "createdAt": "2020-04-15T09:24:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -814,6 +823,18 @@ public FeaturesConfig setExchangeCompressionEnabled(boolean exchangeCompressionE\n         return this;\n     }\n \n+    public DataIntegrityVerification getExchangeDataIntegrityVerification()\n+    {\n+        return exchangeDataIntegrityVerification;\n+    }\n+\n+    @Config(\"exchange.data-integrity-verification\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNjEwNTU1", "url": "https://github.com/trinodb/trino/pull/3438#pullrequestreview-393610555", "createdAt": "2020-04-15T09:34:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTozNDoxMFrOGFxnkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTozNDoxMFrOGFxnkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwOTAxMQ==", "bodyText": "cc @electrum", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408709011", "createdAt": "2020-04-15T09:34:10Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -605,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNzE1NTU5", "url": "https://github.com/trinodb/trino/pull/3438#pullrequestreview-393715559", "createdAt": "2020-04-15T12:14:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNDo1NlrOGF25XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNDo1NlrOGF25XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5NTQ4NQ==", "bodyText": "???\nShould there be magic instead -42\nNVM: noticed a fixup", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408795485", "createdAt": "2020-04-15T12:14:56Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -593,7 +594,13 @@ public PagesResponse handle(Request request, Response response)\n                 boolean complete = getComplete(response);\n \n                 try (SliceInput input = new InputStreamSliceInput(response.getInputStream())) {\n+                    int magic = input.readInt();\n+                    if (magic != SERIALIZED_PAGES_MAGIC) {\n+                        throw new IllegalStateException(format(\"Invalid stream header, expected 0x%08x, but was 0x%08x\", SERIALIZED_PAGES_MAGIC, -42));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNzIzOTE4", "url": "https://github.com/trinodb/trino/pull/3438#pullrequestreview-393723918", "createdAt": "2020-04-15T12:26:51Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoyNjo1MVrOGF3TTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoyNjo1MVrOGF3TTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMjEyNA==", "bodyText": "Do we care about backward compatibility of the protocol?\nWith such implementation one will have to upgrade whole cluster at one go. Upgrading node-by node will not be possible.\nProbably it is hard to workaround that now. But even if we make the backward incompatible change now, we can extend the protocol in such way, that if we want to add something here in the future, we can do that in a way which allows rolling upgrade. One option to achieve that would be to put an extensible structure (protobuf/json/thrift) in place of raw sequence of longs.\nNot sure if that is worth of an effort though.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r408802124", "createdAt": "2020-04-15T12:26:51Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "diffHunk": "@@ -82,6 +97,10 @@ public void writeTo(List<SerializedPage> serializedPages,\n         try {\n             SliceOutput sliceOutput = new OutputStreamSliceOutput(output);\n             sliceOutput.writeInt(SERIALIZED_PAGES_MAGIC);\n+            sliceOutput.writeLong(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDk1ODc4", "url": "https://github.com/trinodb/trino/pull/3438#pullrequestreview-395495878", "createdAt": "2020-04-17T14:19:33Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxOTozNFrOGHP8-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozMjoyN1rOGHQecA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NDU4Ng==", "bodyText": "nit: Can you use a nicer number ;) https://en.wikipedia.org/wiki/Hexspeak", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410254586", "createdAt": "2020-04-17T14:19:34Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/server/PagesResponseWriter.java", "diffHunk": "@@ -41,6 +41,8 @@\n public class PagesResponseWriter\n         implements MessageBodyWriter<List<SerializedPage>>\n {\n+    public static final int SERIALIZED_PAGES_MAGIC = 0xfea4f001;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NzM3NA==", "bodyText": "Nit: Maybe extract method writeSerializedPagesHeader(int numPages) and put it in PagesSerdeUtil?\nOr maybe MAGIC and pages count should be written by writeSerializedPages?", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410257374", "createdAt": "2020-04-17T14:23:46Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestingExchangeHttpClientHandler.java", "diffHunk": "@@ -73,13 +74,18 @@ public Response handle(Request request)\n             headers.put(PRESTO_PAGE_NEXT_TOKEN, String.valueOf(pageToken + 1));\n             headers.put(PRESTO_BUFFER_COMPLETE, String.valueOf(false));\n             DynamicSliceOutput output = new DynamicSliceOutput(256);\n+            output.writeInt(SERIALIZED_PAGES_MAGIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1Nzc5Nw==", "bodyText": "Oh - this one is nice. You can do it right if you try ;)", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410257797", "createdAt": "2020-04-17T14:24:23Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/PagesSerdeUtil.java", "diffHunk": "@@ -32,6 +35,13 @@\n {\n     private PagesSerdeUtil() {}\n \n+    /**\n+     * Special checksum value used to verify configuration consistency across nodes (all nodes need to have data integrity configured the same way).\n+     *\n+     * @implNote It's not just 0, so that hypothetical zero-ed out data is not treated as valid payload with no checksum.\n+     */\n+    public static final long NO_CHECKSUM = 0x0123456789abcdefL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MTQ5Nw==", "bodyText": "Given code above is right this will result in an retry. It should probably be an GENERIC_INTERNAL_ERROR here.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410261497", "createdAt": "2020-04-17T14:29:59Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -612,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication\n+            switch (dataIntegrityVerification) {\n+                case NONE:\n+                    if (readChecksum != NO_CHECKSUM) {\n+                        throw new IllegalStateException(format(\"Expected checksum to be NO_CHECKSUM (0x%08x) but is 0x%08x, when reading from %s\", NO_CHECKSUM, readChecksum, uri));\n+                    }\n+                    return;\n+\n+                case ABORT:\n+                case RETRY:\n+                    long calculatedChecksum = calculateChecksum(pages);\n+                    if (readChecksum != calculatedChecksum) {\n+                        String message = format(\"Data corruption, read checksum: 0x%08x, calculated checksum: 0x%08x, when reading from %s\", readChecksum, calculatedChecksum, uri);\n+                        if (dataIntegrityVerification == DataIntegrityVerification.RETRY) {\n+                            throw new IllegalStateException(message);\n+                        }\n+                        throw new PrestoException(GENERIC_INTERNAL_ERROR, message);\n+                    }\n+                    return;\n+\n+                default:\n+                    throw new IllegalStateException(\"Unknown DataIntegrityVerification type: \" + dataIntegrityVerification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MjczNQ==", "bodyText": "I like verification more. Or data-integrity-checking.\nIf you decide on different name, change the variables/methods/.. too of course.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410262735", "createdAt": "2020-04-17T14:31:50Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -814,6 +823,18 @@ public FeaturesConfig setExchangeCompressionEnabled(boolean exchangeCompressionE\n         return this;\n     }\n \n+    public DataIntegrityVerification getExchangeDataIntegrityVerification()\n+    {\n+        return exchangeDataIntegrityVerification;\n+    }\n+\n+    @Config(\"exchange.data-integrity-verification\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMzE1Ng=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MzE1Mg==", "bodyText": "previous commit?", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410263152", "createdAt": "2020-04-17T14:32:27Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/operator/MockExchangeRequestProcessor.java", "diffHunk": "@@ -98,7 +99,8 @@ public Response handle(Request request)\n         HttpStatus status;\n         if (!result.getSerializedPages().isEmpty()) {\n             DynamicSliceOutput sliceOutput = new DynamicSliceOutput(64);\n-            sliceOutput.writeInt(PagesResponseWriter.SERIALIZED_PAGES_MAGIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NTA5NTcy", "url": "https://github.com/trinodb/trino/pull/3438#pullrequestreview-395509572", "createdAt": "2020-04-17T14:35:04Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozNTowNFrOGHQlVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozOTo0NlrOGHQw9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NDkxNg==", "bodyText": "How does this surface to the user? It'd be ideal if it could be mapped to a proper error code.", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410264916", "createdAt": "2020-04-17T14:35:04Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -593,7 +619,15 @@ public PagesResponse handle(Request request, Response response)\n                 boolean complete = getComplete(response);\n \n                 try (SliceInput input = new InputStreamSliceInput(response.getInputStream())) {\n+                    int magic = input.readInt();\n+                    if (magic != SERIALIZED_PAGES_MAGIC) {\n+                        throw new IllegalStateException(format(\"Invalid stream header, expected 0x%08x, but was 0x%08x\", SERIALIZED_PAGES_MAGIC, magic));\n+                    }\n+                    long checksum = input.readLong();\n+                    int pagesCount = input.readInt();\n                     List<SerializedPage> pages = ImmutableList.copyOf(readSerializedPages(input));\n+                    verifyChecksum(request.getUri(), checksum, pages);\n+                    checkState(pages.size() == pagesCount, \"Wrong number of pages, expected %s, but read %s\", pagesCount, pages.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTgzNQ==", "bodyText": "How does this surface to the user? It'd be ideal if it could be mapped to a proper error code indicating there's a misconfiguration in the cluster (and skip the retry).", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410265835", "createdAt": "2020-04-17T14:36:36Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -605,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication\n+            switch (dataIntegrityVerification) {\n+                case NONE:\n+                    if (readChecksum != NO_CHECKSUM) {\n+                        throw new IllegalStateException(format(\"Expected checksum to be NO_CHECKSUM (0x%08x) but is 0x%08x, when reading from %s\", NO_CHECKSUM, readChecksum, uri));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2Nzg5Mw==", "bodyText": "This is brittle. We need a better mechanism to indicate we want to retry than the type of exception. This logic to check for retry policy should really be in the code that performs the actual retries, otherwise there's a high chance it will get out of sync in the future.\nWe should throw a non-retryable exception in the case of configuration or a \"checksum failed\" exception otherwise. The code that does retries in HttpPageBufferClient should check the retry policy and act accordingly in case of \"checksum failed\".", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r410267893", "createdAt": "2020-04-17T14:39:46Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/HttpPageBufferClient.java", "diffHunk": "@@ -605,6 +639,33 @@ public PagesResponse handle(Request request, Response response)\n             }\n         }\n \n+        private void verifyChecksum(URI uri, long readChecksum, List<SerializedPage> pages)\n+        {\n+            // TODO identify our address, so that query failure reports both ends of communication\n+            switch (dataIntegrityVerification) {\n+                case NONE:\n+                    if (readChecksum != NO_CHECKSUM) {\n+                        throw new IllegalStateException(format(\"Expected checksum to be NO_CHECKSUM (0x%08x) but is 0x%08x, when reading from %s\", NO_CHECKSUM, readChecksum, uri));\n+                    }\n+                    return;\n+\n+                case ABORT:\n+                case RETRY:\n+                    long calculatedChecksum = calculateChecksum(pages);\n+                    if (readChecksum != calculatedChecksum) {\n+                        String message = format(\"Data corruption, read checksum: 0x%08x, calculated checksum: 0x%08x, when reading from %s\", readChecksum, calculatedChecksum, uri);\n+                        if (dataIntegrityVerification == DataIntegrityVerification.RETRY) {\n+                            throw new IllegalStateException(message);\n+                        }\n+                        throw new PrestoException(GENERIC_INTERNAL_ERROR, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 132}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "722056c1bd67622b04265dfe6046b3bb6f9e73b9", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/722056c1bd67622b04265dfe6046b3bb6f9e73b9", "committedDate": "2020-04-22T13:53:31Z", "message": "Verify number of deserialized pages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Mjc4NTgy", "url": "https://github.com/trinodb/trino/pull/3438#pullrequestreview-398278582", "createdAt": "2020-04-22T14:56:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1NjoxMFrOGJ68_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1NjoxMFrOGJ68_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NjI1Mw==", "bodyText": "nit: aren't we typically ordering methods that usage is first and declaration follows?", "url": "https://github.com/trinodb/trino/pull/3438#discussion_r413056253", "createdAt": "2020-04-22T14:56:10Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/PagesSerdeUtil.java", "diffHunk": "@@ -60,6 +70,16 @@ public static void writeSerializedPage(SliceOutput output, SerializedPage page)\n         output.writeBytes(page.getSlice());\n     }\n \n+    private static void updateChecksum(XxHash64 hash, SerializedPage page)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MzAyOTM4", "url": "https://github.com/trinodb/trino/pull/3438#pullrequestreview-398302938", "createdAt": "2020-04-22T15:20:46Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a974319a06433a67ac597e5ccac2a6b1f27199f", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/7a974319a06433a67ac597e5ccac2a6b1f27199f", "committedDate": "2020-04-23T08:10:28Z", "message": "Verify data integrity in exchanges\n\nIn our testing, a cloud's network proved to be not reliable. We observed\ndata corruption when transmitting data over TCP between Presto nodes\n(internal communication unsecured, no compression).\n\nVerify data integrity to prevent incorrect query results.\n\nOptionally retry when data corruption is detected."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "7a974319a06433a67ac597e5ccac2a6b1f27199f", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/7a974319a06433a67ac597e5ccac2a6b1f27199f", "committedDate": "2020-04-23T08:10:28Z", "message": "Verify data integrity in exchanges\n\nIn our testing, a cloud's network proved to be not reliable. We observed\ndata corruption when transmitting data over TCP between Presto nodes\n(internal communication unsecured, no compression).\n\nVerify data integrity to prevent incorrect query results.\n\nOptionally retry when data corruption is detected."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1524, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}