{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMjIyNzU4", "number": 2978, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo1ODo1M1rODmpiGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxNjoyMFrOESQ4gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODUyOTUzOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo1ODo1M1rOF0L1QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMTo1NjowOFrOF5F0rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NDEyOQ==", "bodyText": "Can we add this change in a separate commit ?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r390264129", "createdAt": "2020-03-10T11:58:53Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -191,9 +191,14 @@ public boolean isDefinitelyWritable(int column)\n     @Override\n     public String getColumnClassName(int column)\n             throws SQLException\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwODU1Ng==", "bodyText": "Sure, done!", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r395408556", "createdAt": "2020-03-20T01:56:08Z", "author": {"login": "puchengy"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -191,9 +191,14 @@ public boolean isDefinitelyWritable(int column)\n     @Override\n     public String getColumnClassName(int column)\n             throws SQLException\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NDEyOQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODU0NTc2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ParameterInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjowNDoyMlrOF0L_JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToyODozMFrOF5Ffvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NjY2MQ==", "bodyText": "Where do we use this position details ?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r390266661", "createdAt": "2020-03-10T12:04:22Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ParameterInfo.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import io.prestosql.client.ClientTypeSignature;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ParameterInfo\n+{\n+    private final int position;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMzE5OQ==", "bodyText": "This is the information returned by \"DESCRIBE INPUT\" https://prestosql.io/docs/current/sql/describe-input.html should we keep this information?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r395403199", "createdAt": "2020-03-20T01:28:30Z", "author": {"login": "puchengy"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ParameterInfo.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import io.prestosql.client.ClientTypeSignature;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ParameterInfo\n+{\n+    private final int position;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NjY2MQ=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODU0ODE4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjowNToxNFrOF0MAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMTozMTowMlrOF5Fh4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzAzNQ==", "bodyText": "can we rename it as getParameter", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r390267035", "createdAt": "2020-03-10T12:05:14Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static io.prestosql.jdbc.ColumnInfo.getType;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ParameterInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ParameterInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"isNullable\");\n+    }\n+\n+    @Override\n+    public boolean isSigned(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"isSigned\");\n+    }\n+\n+    @Override\n+    public int getPrecision(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"getPrecision\");\n+    }\n+\n+    @Override\n+    public int getScale(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"getScale\");\n+    }\n+\n+    @Override\n+    public int getParameterType(int param) throws SQLException\n+    {\n+        return getType(parameter(param).getTypeSignature());\n+    }\n+\n+    @Override\n+    public String getParameterTypeName(int param) throws SQLException\n+    {\n+        return parameter(param).getTypeSignature().getRawType();\n+    }\n+\n+    @Override\n+    public String getParameterClassName(int param) throws SQLException\n+    {\n+        int type = getType(parameter(param).getTypeSignature());\n+        if (type == Types.NULL) {\n+            return \"unknown\";\n+        }\n+        return PrestoResultSetMetaData.getTypeClassName(type);\n+    }\n+\n+    @Override\n+    public int getParameterMode(int param) throws SQLException\n+    {\n+        return ParameterMetaData.parameterModeUnknown;\n+    }\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException\n+    {\n+        if (isWrapperFor(iface)) {\n+            return (T) this;\n+        }\n+        throw new SQLException(\"No wrapper for \" + iface);\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException\n+    {\n+        return iface.isInstance(this);\n+    }\n+\n+    private ParameterInfo parameter(int column)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMzc0Nw==", "bodyText": "Sure, will do", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r395403747", "createdAt": "2020-03-20T01:31:02Z", "author": {"login": "puchengy"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static io.prestosql.jdbc.ColumnInfo.getType;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ParameterInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ParameterInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"isNullable\");\n+    }\n+\n+    @Override\n+    public boolean isSigned(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"isSigned\");\n+    }\n+\n+    @Override\n+    public int getPrecision(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"getPrecision\");\n+    }\n+\n+    @Override\n+    public int getScale(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"getScale\");\n+    }\n+\n+    @Override\n+    public int getParameterType(int param) throws SQLException\n+    {\n+        return getType(parameter(param).getTypeSignature());\n+    }\n+\n+    @Override\n+    public String getParameterTypeName(int param) throws SQLException\n+    {\n+        return parameter(param).getTypeSignature().getRawType();\n+    }\n+\n+    @Override\n+    public String getParameterClassName(int param) throws SQLException\n+    {\n+        int type = getType(parameter(param).getTypeSignature());\n+        if (type == Types.NULL) {\n+            return \"unknown\";\n+        }\n+        return PrestoResultSetMetaData.getTypeClassName(type);\n+    }\n+\n+    @Override\n+    public int getParameterMode(int param) throws SQLException\n+    {\n+        return ParameterMetaData.parameterModeUnknown;\n+    }\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException\n+    {\n+        if (isWrapperFor(iface)) {\n+            return (T) this;\n+        }\n+        throw new SQLException(\"No wrapper for \" + iface);\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException\n+    {\n+        return iface.isInstance(this);\n+    }\n+\n+    private ParameterInfo parameter(int column)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzAzNQ=="}, "originalCommit": null, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDU5OTEwOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzowMzo0MVrOF-_lBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoyMjo0OVrOF_K44g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5NzcwMA==", "bodyText": "I think the position is not required for us. Instead what if we directly maintain ColumnInfo ? It gives us precision, scale, signed details for a particular column. Can we create something like this\n            ColumnInfo.Builder builder = new ColumnInfo.Builder()\n                    .setCatalogName(\"\") \n                    .setSchemaName(\"\") \n                    .setTableName(\"\") \n                    .setColumnLabel(resultSet.getString(\"Position\"))\n                    .setColumnName(resultSet.getString(\"Position\")) \n                    .setColumnTypeSignature(column.getTypeSignature())\n                    .setNullable(Nullable.UNKNOWN)\n            setTypeInfo(builder, column.getTypeSignature());\n            list.add(builder.build());\n\nWe just need to map the APIs for ColumnInfo when iterating over PrestoParameterMetaData.\n@electrum Your feedback on this approach ?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r401597700", "createdAt": "2020-04-01T13:03:41Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -877,6 +879,21 @@ private static String typedNull(String prestoType)\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n \n+    private static List<ParameterInfo> getDescribeInputParameterInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ParameterInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String position = resultSet.getString(\"Position\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MzAxMA==", "bodyText": "That sounds like a good approach. It will allow us to add those additional things later if needed.", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r401783010", "createdAt": "2020-04-01T17:22:49Z", "author": {"login": "electrum"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -877,6 +879,21 @@ private static String typedNull(String prestoType)\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n \n+    private static List<ParameterInfo> getDescribeInputParameterInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ParameterInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String position = resultSet.getString(\"Position\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5NzcwMA=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDYwMjMxOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzowNDoyOFrOF-_nCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzowNDoyOFrOF-_nCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5ODIxNw==", "bodyText": "Can we move SQL keywords to upper case ?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r401598217", "createdAt": "2020-04-01T13:04:28Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,63 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(\n+                    \"SELECT ? FROM test_get_parameterMetaData where c_boolean = ? AND c_decimal = ? \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTc1MTE0OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoyNToyMFrOF_K-6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoyNToyMFrOF_K-6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4NDU1Mw==", "bodyText": "We need to implement all of these methods, otherwise programs that use the driver will fail. For nullable, it's fine to always return columnNullableUnknown. Using ColumnInfo as @Praveen2112 suggested should make this easier, as we'll have some of this information.", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r401784553", "createdAt": "2020-04-01T17:25:20Z", "author": {"login": "electrum"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static io.prestosql.jdbc.ColumnInfo.getType;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ParameterInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ParameterInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"isNullable\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDM1NTY1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMzo1MjozOVrOGA8ikw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMzo1MjozOVrOGA8ikw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0NTA3NQ==", "bodyText": "Can we rename this method as getParamerters", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r403645075", "createdAt": "2020-04-05T03:52:39Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -877,6 +879,26 @@ private static String typedNull(String prestoType)\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n \n+    private static List<ColumnInfo> getDescribeInputParameterInfoList(ResultSet resultSet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ1Mzk4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ColumnInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzo0MToyNFrOGjXnLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzoxNTo0MVrOGnorAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MDIwNQ==", "bodyText": "But would there be any cases where the getArguments would be empty for CHAR or VARCHAR or DECIMAL ?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439740205", "createdAt": "2020-06-13T13:41:24Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ColumnInfo.java", "diffHunk": "@@ -135,14 +135,18 @@ public static void setTypeInfo(Builder builder, ClientTypeSignature type)\n             case \"char\":\n                 builder.setSigned(false);\n                 builder.setScale(0);\n-                builder.setPrecision(type.getArguments().get(0).getLongLiteral().intValue());\n-                builder.setColumnDisplaySize(type.getArguments().get(0).getLongLiteral().intValue());\n+                if (!type.getArguments().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5OTMzNA==", "bodyText": "Post this PR (#4023) for these types we would get parameters.", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439799334", "createdAt": "2020-06-14T07:10:27Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ColumnInfo.java", "diffHunk": "@@ -135,14 +135,18 @@ public static void setTypeInfo(Builder builder, ClientTypeSignature type)\n             case \"char\":\n                 builder.setSigned(false);\n                 builder.setScale(0);\n-                builder.setPrecision(type.getArguments().get(0).getLongLiteral().intValue());\n-                builder.setColumnDisplaySize(type.getArguments().get(0).getLongLiteral().intValue());\n+                if (!type.getArguments().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MDIwNQ=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNDAxNw==", "bodyText": "This PR is merged with the master so we don't have to check if the arguments in empty or not", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r444214017", "createdAt": "2020-06-23T13:15:41Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ColumnInfo.java", "diffHunk": "@@ -135,14 +135,18 @@ public static void setTypeInfo(Builder builder, ClientTypeSignature type)\n             case \"char\":\n                 builder.setSigned(false);\n                 builder.setScale(0);\n-                builder.setPrecision(type.getArguments().get(0).getLongLiteral().intValue());\n-                builder.setColumnDisplaySize(type.getArguments().get(0).getLongLiteral().intValue());\n+                if (!type.getArguments().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MDIwNQ=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ2MDQ5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzo1NTo0OVrOGjXqhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzo1NTo0OVrOGjXqhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTA2Mw==", "bodyText": "can we make it package protected ?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439741063", "createdAt": "2020-06-13T13:55:49Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -191,9 +191,14 @@ public boolean isDefinitelyWritable(int column)\n     @Override\n     public String getColumnClassName(int column)\n             throws SQLException\n+    {\n+        return getType(column(column).getColumnType());\n+    }\n+\n+    protected static String getType(int type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTkyMDk1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzoxMTo0MVrOGjbOeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzoxMTo0MVrOGjbOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5OTQxOA==", "bodyText": "Can we add VARCHAR type with specific length ?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439799418", "createdAt": "2020-06-14T07:11:41Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,67 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_row row(x integer, y array(integer)), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTkyMTE1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwNzoxMjoxMFrOGjbOlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMTo1OTo1NlrOGp4kAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5OTQ0NQ==", "bodyText": "It would be better if we add test for scale and precision", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439799445", "createdAt": "2020-06-14T07:12:10Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,67 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(\n+                    \"SELECT ? FROM test_get_parameterMetaData WHERE c_boolean = ? AND c_decimal = ? \" +\n+                            \"AND c_decimal_2 = ? AND c_varchar = ? AND c_row = ? AND c_array = ? AND c_map = ?\")) {\n+                ParameterMetaData parameterMetaData = statement.getParameterMetaData();\n+                assertEquals(parameterMetaData.getParameterCount(), 8);\n+\n+                assertEquals(parameterMetaData.getParameterClassName(1), \"unknown\");\n+                assertEquals(parameterMetaData.getParameterType(1), Types.NULL);\n+                assertEquals(parameterMetaData.getParameterTypeName(1), \"unknown\");\n+\n+                assertEquals(parameterMetaData.getParameterClassName(2), Boolean.class.getName());\n+                assertEquals(parameterMetaData.getParameterType(2), Types.BOOLEAN);\n+                assertEquals(parameterMetaData.getParameterTypeName(2), \"boolean\");\n+\n+                assertEquals(parameterMetaData.getParameterClassName(3), BigDecimal.class.getName());\n+                assertEquals(parameterMetaData.getParameterType(3), Types.DECIMAL);\n+                assertEquals(parameterMetaData.getParameterTypeName(3), \"decimal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MTUyMg==", "bodyText": "I tested the cases for decimal(10,3) and varchar(5) as the rest values are determined by default, thus I don't think they need to be tested.", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446571522", "createdAt": "2020-06-27T21:59:56Z", "author": {"login": "puchengy"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,67 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(\n+                    \"SELECT ? FROM test_get_parameterMetaData WHERE c_boolean = ? AND c_decimal = ? \" +\n+                            \"AND c_decimal_2 = ? AND c_varchar = ? AND c_row = ? AND c_array = ? AND c_map = ?\")) {\n+                ParameterMetaData parameterMetaData = statement.getParameterMetaData();\n+                assertEquals(parameterMetaData.getParameterCount(), 8);\n+\n+                assertEquals(parameterMetaData.getParameterClassName(1), \"unknown\");\n+                assertEquals(parameterMetaData.getParameterType(1), Types.NULL);\n+                assertEquals(parameterMetaData.getParameterTypeName(1), \"unknown\");\n+\n+                assertEquals(parameterMetaData.getParameterClassName(2), Boolean.class.getName());\n+                assertEquals(parameterMetaData.getParameterType(2), Types.BOOLEAN);\n+                assertEquals(parameterMetaData.getParameterTypeName(2), \"boolean\");\n+\n+                assertEquals(parameterMetaData.getParameterClassName(3), BigDecimal.class.getName());\n+                assertEquals(parameterMetaData.getParameterType(3), Types.DECIMAL);\n+                assertEquals(parameterMetaData.getParameterTypeName(3), \"decimal\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5OTQ0NQ=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzEzNjUxOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzo1NDowMlrOGp7Pzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzo1NDowMlrOGp7Pzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTUwMw==", "bodyText": "can we move throws SQLException to next line", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446615503", "createdAt": "2020-06-28T07:54:02Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzEzODg2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzo1NzowOVrOGp7Q9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzo1NzowOVrOGp7Q9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTc5Nw==", "bodyText": "Can we rename it as builder", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446615797", "createdAt": "2020-06-28T07:57:09Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -877,6 +879,26 @@ private static String typedNull(String prestoType)\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n \n+    private static List<ColumnInfo> getParamerters(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzEzOTA1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzo1NzoyMVrOGp7RDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzo1NzoyMVrOGp7RDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTgyMg==", "bodyText": "as columnInfoBuilder", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446615822", "createdAt": "2020-06-28T07:57:21Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -877,6 +879,26 @@ private static String typedNull(String prestoType)\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n \n+    private static List<ColumnInfo> getParamerters(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            ClientTypeSignature clientTypeSignature = getClientTypeSignatureFromTypeString(resultSet.getString(\"Type\"));\n+            ColumnInfo.Builder builder = new ColumnInfo.Builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzEzOTY2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzo1ODowN1rOGp7RWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzo1ODowN1rOGp7RWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTg5Nw==", "bodyText": "Can we import it as static method ?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446615897", "createdAt": "2020-06-28T07:58:07Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param) throws SQLException\n+    {\n+        switch (getParameter(param).getNullable()) {\n+            case NO_NULLS:\n+                return ParameterMetaData.parameterNoNulls;\n+            case NULLABLE:\n+                return ParameterMetaData.parameterNullable;\n+            case UNKNOWN:\n+                return ParameterMetaData.parameterNullableUnknown;\n+            default:\n+                throw new SQLException(format(\"Invaliad Nullable Value %s\", getParameter(param).getNullable()));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isSigned(int param) throws SQLException\n+    {\n+        return getParameter(param).isSigned();\n+    }\n+\n+    @Override\n+    public int getPrecision(int param) throws SQLException\n+    {\n+        return getParameter(param).getPrecision();\n+    }\n+\n+    @Override\n+    public int getScale(int param) throws SQLException\n+    {\n+        return getParameter(param).getScale();\n+    }\n+\n+    @Override\n+    public int getParameterType(int param) throws SQLException\n+    {\n+        return getParameter(param).getColumnType();\n+    }\n+\n+    @Override\n+    public String getParameterTypeName(int param) throws SQLException\n+    {\n+        return getParameter(param).getColumnTypeSignature().getRawType();\n+    }\n+\n+    @Override\n+    public String getParameterClassName(int param) throws SQLException\n+    {\n+        int type = getParameter(param).getColumnType();\n+        if (type == Types.NULL) {\n+            return \"unknown\";\n+        }\n+        return PrestoResultSetMetaData.getType(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzI1MjMwOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMDowNzozNVrOGp8IvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMDowNzozNVrOGp8IvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzMDA3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return ParameterMetaData.parameterNoNulls;\n          \n          \n            \n                            return parameterNoNulls;\n          \n      \n    \n    \n  \n\nsimilarly for others too", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446630076", "createdAt": "2020-06-28T10:07:35Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param) throws SQLException\n+    {\n+        switch (getParameter(param).getNullable()) {\n+            case NO_NULLS:\n+                return ParameterMetaData.parameterNoNulls;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTQ5MzU0OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjoxODozMlrOGtKFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjoxODozMlrOGtKFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwNDI4OQ==", "bodyText": "Can we move this to getType ?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r450004289", "createdAt": "2020-07-06T06:18:32Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static io.prestosql.jdbc.PrestoResultSetMetaData.getType;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount()\n+            throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param)\n+            throws SQLException\n+    {\n+        switch (getParameter(param).getNullable()) {\n+            case NO_NULLS:\n+                return parameterNoNulls;\n+            case NULLABLE:\n+                return parameterNullable;\n+            case UNKNOWN:\n+                return parameterNullableUnknown;\n+            default:\n+                throw new SQLException(format(\"Invaliad Nullable Value %s\", getParameter(param).getNullable()));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isSigned(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).isSigned();\n+    }\n+\n+    @Override\n+    public int getPrecision(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getPrecision();\n+    }\n+\n+    @Override\n+    public int getScale(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getScale();\n+    }\n+\n+    @Override\n+    public int getParameterType(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getColumnType();\n+    }\n+\n+    @Override\n+    public String getParameterTypeName(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getColumnTypeSignature().getRawType();\n+    }\n+\n+    @Override\n+    public String getParameterClassName(int param)\n+            throws SQLException\n+    {\n+        int type = getParameter(param).getColumnType();\n+        if (type == Types.NULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjU3MjE2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTo1ODo0N1rOGtUTTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTo1ODo0N1rOGtUTTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3MTcyNw==", "bodyText": "can you please also bigint, int, tinyint, smallint, float and double?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r450171727", "createdAt": "2020-07-06T11:58:47Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,76 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_varchar_2 varchar(5), \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjU3NTM3OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTo1OTo1OVrOGtUVWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTo1OTo1OVrOGtUVWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3MjI1MA==", "bodyText": "can you test isNullable, isSigned and getParameterMode?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r450172250", "createdAt": "2020-07-06T11:59:59Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,76 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_varchar_2 varchar(5), \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(\n+                    \"SELECT ? FROM test_get_parameterMetaData WHERE c_boolean = ? AND c_decimal = ? \" +\n+                            \"AND c_decimal_2 = ? AND c_varchar = ? AND c_varchar_2 = ? AND c_row = ? \" +\n+                            \"AND c_array = ? AND c_map = ?\")) {\n+                ParameterMetaData parameterMetaData = statement.getParameterMetaData();\n+                assertEquals(parameterMetaData.getParameterCount(), 9);\n+\n+                assertEquals(parameterMetaData.getParameterClassName(1), \"unknown\");\n+                assertEquals(parameterMetaData.getParameterType(1), Types.NULL);\n+                assertEquals(parameterMetaData.getParameterTypeName(1), \"unknown\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTgwMjM0OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo1MzoxNFrOG3VvYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQwNzoyODozNFrOKFBlCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTA1OA==", "bodyText": "Nit. This is a logical change that should go in separate commit to commits with refactoring like this (extract, renames etc). Refactoring commits should only contain IDE automatic changes.", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r460681058", "createdAt": "2020-07-27T06:53:14Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -229,6 +234,8 @@ public String getColumnClassName(int column)\n                 return Clob.class.getName();\n             case Types.ARRAY:\n                 return Array.class.getName();\n+            case Types.NULL:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQ0NTUxNw==", "bodyText": "@kosinsky thank you for the comment, to make sure I understand what you said, you are suggesting to make handling  NULL cases into a separate commit, correct?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r663445517", "createdAt": "2021-07-04T04:47:19Z", "author": {"login": "puchengy"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -229,6 +234,8 @@ public String getColumnClassName(int column)\n                 return Clob.class.getName();\n             case Types.ARRAY:\n                 return Array.class.getName();\n+            case Types.NULL:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTA1OA=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjM1NzM4Ng==", "bodyText": "yes. Also please add a test coverage for this.", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r676357386", "createdAt": "2021-07-26T07:28:34Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -229,6 +234,8 @@ public String getColumnClassName(int column)\n                 return Clob.class.getName();\n             case Types.ARRAY:\n                 return Array.class.getName();\n+            case Types.NULL:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTA1OA=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTgwNzM0OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo1NTowMFrOG3VyVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNFQwNDo0Nzo0M1rOJ4tgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTgxNQ==", "bodyText": "cherry picked from commit 83718b3b700568c97ba2dd3da6daee4eca5eb24f\n\nWhy do you need to cherry pick? Is this separate repository it pull request? Can you please share the latest no to original commit?", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r460681815", "createdAt": "2020-07-27T06:55:00Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQ0NTU3MA==", "bodyText": "This is a mistake, I will be addressing that. Thanks!", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r663445570", "createdAt": "2021-07-04T04:47:43Z", "author": {"login": "puchengy"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTgxNQ=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTgxMDgwOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo1NjoxOVrOG3V0hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo1NjoxOVrOG3V0hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MjM3Mw==", "bodyText": "Add information about allowed range", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r460682373", "createdAt": "2020-07-27T06:56:19Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import static io.prestosql.jdbc.PrestoResultSetMetaData.getType;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount()\n+            throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param)\n+            throws SQLException\n+    {\n+        switch (getParameter(param).getNullable()) {\n+            case NO_NULLS:\n+                return parameterNoNulls;\n+            case NULLABLE:\n+                return parameterNullable;\n+            case UNKNOWN:\n+                return parameterNullableUnknown;\n+            default:\n+                throw new SQLException(format(\"Invaliad Nullable Value %s\", getParameter(param).getNullable()));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isSigned(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).isSigned();\n+    }\n+\n+    @Override\n+    public int getPrecision(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getPrecision();\n+    }\n+\n+    @Override\n+    public int getScale(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getScale();\n+    }\n+\n+    @Override\n+    public int getParameterType(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getColumnType();\n+    }\n+\n+    @Override\n+    public String getParameterTypeName(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getColumnTypeSignature().getRawType();\n+    }\n+\n+    @Override\n+    public String getParameterClassName(int param)\n+            throws SQLException\n+    {\n+        return getType(getParameter(param).getColumnType());\n+    }\n+\n+    @Override\n+    public int getParameterMode(int param)\n+            throws SQLException\n+    {\n+        return ParameterMetaData.parameterModeUnknown;\n+    }\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface)\n+            throws SQLException\n+    {\n+        if (isWrapperFor(iface)) {\n+            return (T) this;\n+        }\n+        throw new SQLException(\"No wrapper for \" + iface);\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface)\n+            throws SQLException\n+    {\n+        return iface.isInstance(this);\n+    }\n+\n+    private ColumnInfo getParameter(int column)\n+            throws SQLException\n+    {\n+        if ((column <= 0) || (column > parameterInfo.size())) {\n+            throw new SQLException(\"Invalid column index: \" + column);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTg2NDMyOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxNjoyMFrOG3WUrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxNjoyMFrOG3WUrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5MDYwNA==", "bodyText": "make it static", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r460690604", "createdAt": "2020-07-27T07:16:20Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -191,9 +191,14 @@ public boolean isDefinitelyWritable(int column)\n     @Override\n     public String getColumnClassName(int column)\n             throws SQLException\n+    {\n+        return getType(column(column).getColumnType());\n+    }\n+\n+    String getType(int type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 844, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}