{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTYwNzI0", "number": 3552, "title": "Fix planning failure when LATERAL is used on left of join or without join", "bodyText": "", "createdAt": "2020-04-26T21:25:06Z", "url": "https://github.com/trinodb/trino/pull/3552", "merged": true, "mergeCommit": {"oid": "5e2d22a3b68a4f8dfe08e50909d160c9bb2e2f77"}, "closed": true, "closedAt": "2020-04-27T19:07:27Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbhoR3AFqTQwMDU1MTQ4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbyXJBABqjMyNzY3MzQ2MzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTUxNDgw", "url": "https://github.com/trinodb/trino/pull/3552#pullrequestreview-400551480", "createdAt": "2020-04-26T21:32:50Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTozMjo1MVrOGMKW_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTozMjo1MVrOGMKW_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNTgyMQ==", "bodyText": "would be also good to add catch-all visitNode to avoid being ashamed by NPE next time\nlike 034a787#diff-e7b6201f06648c5aa2d66f8e488cde68R145-R150 ;)", "url": "https://github.com/trinodb/trino/pull/3552#discussion_r415405821", "createdAt": "2020-04-26T21:32:51Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -277,6 +277,12 @@ protected RelationPlan visitSampledRelation(SampledRelation node, Void context)\n         return new RelationPlan(planNode, analysis.getScope(node), subPlan.getFieldMappings());\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTUyMDQ4", "url": "https://github.com/trinodb/trino/pull/3552#pullrequestreview-400552048", "createdAt": "2020-04-26T21:39:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTozOTozM1rOGMKbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTozOTozM1rOGMKbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNzAxNg==", "bodyText": "You could use this example failing query to show that not every LATERAL on right of join means \"correlated\":\nSELECT * FROM (VALUES 1) t(a), (SELECT * FROM LATERAL (SELECT a))\nAnd a test with LATERAL in the context of aliased relation\nSELECT * FROM LATERAL (VALUES 1) t(a)", "url": "https://github.com/trinodb/trino/pull/3552#discussion_r415407016", "createdAt": "2020-04-26T21:39:33Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestLateral.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.query;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+public class TestLateral\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testUncorrelatedLateral()\n+    {\n+        assertions.assertQuery(\n+                \"SELECT * FROM LATERAL (VALUES 1, 2, 3)\",\n+                \"VALUES 1, 2, 3\");\n+\n+        assertions.assertQuery(\n+                \"SELECT * FROM LATERAL (VALUES 1), (VALUES 'a')\",\n+                \"VALUES (1, 'a')\");\n+\n+        assertions.assertQuery(\n+                \"SELECT * FROM LATERAL (VALUES 1) CROSS JOIN (VALUES 'a')\",\n+                \"VALUES (1, 'a')\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTUyMDg0", "url": "https://github.com/trinodb/trino/pull/3552#pullrequestreview-400552084", "createdAt": "2020-04-26T21:40:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bf3996d626d12b35ab1d8c727f2eebe3e49894f", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/9bf3996d626d12b35ab1d8c727f2eebe3e49894f", "committedDate": "2020-04-27T17:02:25Z", "message": "Support LATERAL in left side of join or without join"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9bf3996d626d12b35ab1d8c727f2eebe3e49894f", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/9bf3996d626d12b35ab1d8c727f2eebe3e49894f", "committedDate": "2020-04-27T17:02:25Z", "message": "Support LATERAL in left side of join or without join"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1665, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}