{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzQ2OTYx", "number": 4011, "title": "Add LuhnCheck function", "bodyText": "Add builtin in credit card validation function - LuhnCheckFunction", "createdAt": "2020-06-12T15:28:01Z", "url": "https://github.com/trinodb/trino/pull/4011", "merged": true, "mergeCommit": {"oid": "913d42fbf2cc7615dd4f935c9a3bef81d727b5df"}, "closed": true, "closedAt": "2020-07-27T23:12:33Z", "author": {"login": "urbanfletch"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqmKqAAFqTQyOTkxMTAxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5IJswABqjM1OTE1OTQ5Mzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5OTExMDE1", "url": "https://github.com/trinodb/trino/pull/4011#pullrequestreview-429911015", "createdAt": "2020-06-12T17:17:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxNzowOFrOGjLxGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxODo0OFrOGjL0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjEzNw==", "bodyText": "add test cases with:\n\nNULL\n''\ndifferent length\nnon-digits\nnon-ascii, like \u0105\nnon-BMP, like \ud83d\ude80 (utf-16 surrogate pairs)", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r439546137", "createdAt": "2020-06-12T17:17:08Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestLuhnCheckFunction.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+\n+public class TestLuhnCheckFunction\n+    extends AbstractTestFunctions\n+{\n+    @Test\n+    public void testLuhnCheck()\n+    {\n+        assertFunction(\"luhn_check('4242424242424242')\", BOOLEAN, true);\n+        assertFunction(\"luhn_check('1234567891234567')\", BOOLEAN, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjIxMg==", "bodyText": "indent", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r439546212", "createdAt": "2020-06-12T17:17:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/FunctionRegistry.java", "diffHunk": "@@ -524,6 +525,7 @@ public FunctionRegistry(Metadata metadata, FeaturesConfig featuresConfig)\n                 .scalars(JoniRegexpCasts.class)\n                 .scalars(CharacterStringCasts.class)\n                 .scalars(CharOperators.class)\n+       \t        .scalars(LuhnCheckFunction.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjkzNw==", "bodyText": "String#substring is expensive.\nBut you do not need String at all.\nSee below for exaple how to proces Slice varchar character-by-character:\nhttps://github.com/prestosql/presto/blob/6d9d47e0909b3fe9367584ba8450827dbbb8e1d7/presto-main/src/main/java/io/prestosql/type/LikeFunctions.java#L134", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r439546937", "createdAt": "2020-06-12T17:18:48Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/LuhnCheckFunction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import io.airlift.slice.Slice;\n+\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static java.lang.Integer.parseInt;\n+\n+public final class LuhnCheckFunction\n+{\n+    private LuhnCheckFunction() {}\n+\n+    @Description(\"Returns true if the string is a valid credit card number and false if it is not\")\n+    @ScalarFunction(\"luhn_check\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean LuhnCheck(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        int nDigits = slice.length();\n+        int sum = 0;\n+        boolean secondNumber = false;\n+        String cardNo = slice.toStringUtf8();\n+\n+        for (int i = nDigits - 1; i >= 0; i--) {\n+            int n = parseInt(cardNo.substring(i, i + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODI1MDMz", "url": "https://github.com/trinodb/trino/pull/4011#pullrequestreview-430825033", "createdAt": "2020-06-15T16:54:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NDoyN1rOGj6qkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NDoyN1rOGj6qkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDUxMw==", "bodyText": "Nit:\nn *= 2;", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r440314513", "createdAt": "2020-06-15T16:54:27Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/LuhnCheckFunction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import io.airlift.slice.Slice;\n+\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static java.lang.Integer.parseInt;\n+\n+public final class LuhnCheckFunction\n+{\n+    private LuhnCheckFunction() {}\n+\n+    @Description(\"Returns true if the string is a valid credit card number and false if it is not\")\n+    @ScalarFunction(\"luhn_check\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean LuhnCheck(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        int nDigits = slice.length();\n+        int sum = 0;\n+        boolean secondNumber = false;\n+        String cardNo = slice.toStringUtf8();\n+\n+        for (int i = nDigits - 1; i >= 0; i--) {\n+            int n = parseInt(cardNo.substring(i, i + 1));\n+\n+            // starting from the right double the value of every other number\n+            if (secondNumber) {\n+                n = n * 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Njc1NjEw", "url": "https://github.com/trinodb/trino/pull/4011#pullrequestreview-437675610", "createdAt": "2020-06-25T16:45:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo0NToyN1rOGpDI_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo1Njo1MlrOGpDlJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NjI1NA==", "bodyText": "I think n *= 2 would be better from a readability perspective, since we're not explicitly doing bit manipulation here. The JIT will optimize this to a shift.", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r445696254", "createdAt": "2020-06-25T16:45:27Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/LuhnCheckFunction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import io.airlift.slice.InvalidUtf8Exception;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.airlift.slice.SliceUtf8.getCodePointAt;\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+\n+public final class LuhnCheckFunction\n+{\n+    private LuhnCheckFunction() {}\n+\n+    @Description(\"Returns true if the string is a valid credit card number and false if it is not\")\n+    @ScalarFunction(\"luhn_check\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean LuhnCheck(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (!slice.toStringUtf8().isEmpty()) {\n+            try {\n+                int nDigits = slice.length();\n+                int sum = 0;\n+                boolean secondNumber = false;\n+\n+                for (int i = nDigits - 1; i >= 0; i--) {\n+                    int n = getCodePointAt(slice, i) - 48;\n+\n+                    // starting from the right double the value of every other number\n+                    if (secondNumber) {\n+                        n <<= 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NzI3Ng==", "bodyText": "We can invert this and return early (removes a level of indentation). Also, no need to convert to a string just to check if it is empty.\nif (slice.length() == 0) {\n    return false;\n}\ntry {\n    ...", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r445697276", "createdAt": "2020-06-25T16:47:00Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/LuhnCheckFunction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import io.airlift.slice.InvalidUtf8Exception;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.airlift.slice.SliceUtf8.getCodePointAt;\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+\n+public final class LuhnCheckFunction\n+{\n+    private LuhnCheckFunction() {}\n+\n+    @Description(\"Returns true if the string is a valid credit card number and false if it is not\")\n+    @ScalarFunction(\"luhn_check\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean LuhnCheck(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (!slice.toStringUtf8().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMDMyNA==", "bodyText": "According to https://en.wikipedia.org/wiki/Luhn_algorithm the algorithm is used for more than just credit cards. I think we should also fail (rather than return false) on any non-digit input.\nHow about this for the description\n\nChecks that a string of digits is valid according to the Luhn algorithm", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r445700324", "createdAt": "2020-06-25T16:51:47Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/LuhnCheckFunction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import io.airlift.slice.InvalidUtf8Exception;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.airlift.slice.SliceUtf8.getCodePointAt;\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+\n+public final class LuhnCheckFunction\n+{\n+    private LuhnCheckFunction() {}\n+\n+    @Description(\"Returns true if the string is a valid credit card number and false if it is not\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwMzQ2MQ==", "bodyText": "If we only allow digits, we can write this as\nbyte b = slice.getByte(i);\ncheckCondition(b >= '0' && b <= '9', INVALID_FUNCTION_ARGUMENT, \"Input contains non-digit character\");\nint n = b - '0';", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r445703461", "createdAt": "2020-06-25T16:56:52Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/LuhnCheckFunction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import io.airlift.slice.InvalidUtf8Exception;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.airlift.slice.SliceUtf8.getCodePointAt;\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+\n+public final class LuhnCheckFunction\n+{\n+    private LuhnCheckFunction() {}\n+\n+    @Description(\"Returns true if the string is a valid credit card number and false if it is not\")\n+    @ScalarFunction(\"luhn_check\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean LuhnCheck(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (!slice.toStringUtf8().isEmpty()) {\n+            try {\n+                int nDigits = slice.length();\n+                int sum = 0;\n+                boolean secondNumber = false;\n+\n+                for (int i = nDigits - 1; i >= 0; i--) {\n+                    int n = getCodePointAt(slice, i) - 48;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTgxMDAw", "url": "https://github.com/trinodb/trino/pull/4011#pullrequestreview-445981000", "createdAt": "2020-07-09T21:27:05Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMToyNzowNVrOGviZ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMToyODozNlrOGvicjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5OTk2Mw==", "bodyText": "This shouldn't be needed since we aren't decoding UTF-8", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r452499963", "createdAt": "2020-07-09T21:27:05Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/LuhnCheckFunction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import io.airlift.slice.InvalidUtf8Exception;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static io.prestosql.util.Failures.checkCondition;\n+\n+public final class LuhnCheckFunction\n+{\n+    private LuhnCheckFunction() {}\n+\n+    @Description(\"Checks that a string of digits is valid according to the Luhn algorithm\")\n+    @ScalarFunction(\"luhn_check\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean LuhnCheck(@SqlType(StandardTypes.VARCHAR) Slice slice)\n+    {\n+        if (slice.length() == 0) {\n+            return false;\n+        }\n+        try {\n+            int nDigits = slice.length();\n+            int sum = 0;\n+            boolean secondNumber = false;\n+\n+            for (int i = nDigits - 1; i >= 0; i--) {\n+                byte b = slice.getByte(i);\n+                checkCondition(b >= '0' && b <= '9', INVALID_FUNCTION_ARGUMENT, \"Input contains non-digit character\");\n+                int n = b - '0';\n+\n+                // starting from the right double the value of every other number\n+                if (secondNumber) {\n+                    n *= 2;\n+                }\n+\n+                // if the value is greater than 9 add the individual digits together\n+                if (n > 9) {\n+                    n = (n % 10) + 1;\n+                }\n+\n+                // add to sum\n+                sum += n;\n+\n+                // update second number check\n+                secondNumber = !secondNumber;\n+            }\n+            //check returns true if mod 10 is zero\n+            return (sum % 10 == 0);\n+        }\n+\n+        catch (InvalidUtf8Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDM1MA==", "bodyText": "Should this be an error?", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r452500350", "createdAt": "2020-07-09T21:27:59Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestLuhnCheckFunction.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+\n+public class TestLuhnCheckFunction\n+        extends AbstractTestFunctions\n+{\n+    @Test\n+    public void testLuhnCheck()\n+    {\n+        assertFunction(\"luhn_check('4242424242424242')\", BOOLEAN, true);\n+        assertFunction(\"luhn_check('1234567891234567')\", BOOLEAN, false);\n+        assertFunction(\"luhn_check('')\", BOOLEAN, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDYyMg==", "bodyText": "Capitalize Luhn since it's a name", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r452500622", "createdAt": "2020-07-09T21:28:36Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -76,6 +76,10 @@ String Functions\n \n     Removes leading whitespace from ``string``.\n \n+.. function:: luhn_check(string) -> boolean\n+\n+    Tests whether a ``string`` of digits is valid according to the luhn algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MzgzMzMw", "url": "https://github.com/trinodb/trino/pull/4011#pullrequestreview-449383330", "createdAt": "2020-07-15T22:19:55Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjA0MDU3", "url": "https://github.com/trinodb/trino/pull/4011#pullrequestreview-450204057", "createdAt": "2020-07-16T20:47:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0NzowNlrOGy8MVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0NzowNlrOGy8MVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2ODE4Mw==", "bodyText": "How about adding a link\nTests whether a ``string`` of digits is valid according to the\n`Luhn algorithm <https://en.wikipedia.org/wiki/Luhn_algorithm>`_.", "url": "https://github.com/trinodb/trino/pull/4011#discussion_r456068183", "createdAt": "2020-07-16T20:47:06Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -81,6 +81,10 @@ String Functions\n \n     Removes leading whitespace from ``string``.\n \n+.. function:: luhn_check(string) -> boolean\n+\n+    Tests whether a ``string`` of digits is valid according to the Luhn algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b82a3848062690e3900b9311a01b1167c2c019e", "author": {"user": {"login": "urbanfletch", "name": "Brian Luisi"}}, "url": "https://github.com/trinodb/trino/commit/7b82a3848062690e3900b9311a01b1167c2c019e", "committedDate": "2020-07-27T20:48:26Z", "message": "Add luhn_check function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "7b82a3848062690e3900b9311a01b1167c2c019e", "author": {"user": {"login": "urbanfletch", "name": "Brian Luisi"}}, "url": "https://github.com/trinodb/trino/commit/7b82a3848062690e3900b9311a01b1167c2c019e", "committedDate": "2020-07-27T20:48:26Z", "message": "Add luhn_check function"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 339, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}