{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MzA0NTY3", "number": 5378, "title": "Fix AccummulatorCompiler to work with type-specific stack representation", "bodyText": "Fix aggregation compiler to work fine if input function is defined for\nType which uses non standard stack representation. E.g. TIMESTAMP(p>6)\nuses LongTimestamp on stack.", "createdAt": "2020-10-01T14:27:01Z", "url": "https://github.com/trinodb/trino/pull/5378", "merged": true, "mergeCommit": {"oid": "3edd743268aad4ba69f7937eeaf6a8b7bce22e97"}, "closed": true, "closedAt": "2020-10-09T09:20:29Z", "author": {"login": "losipiuk"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOncVIgFqTUwMTIxOTc0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQjOjmABqjM4NTYwNTA1OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjE5NzQ3", "url": "https://github.com/trinodb/trino/pull/5378#pullrequestreview-501219747", "createdAt": "2020-10-02T15:09:25Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzc1Mjgy", "url": "https://github.com/trinodb/trino/pull/5378#pullrequestreview-503375282", "createdAt": "2020-10-06T21:33:05Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0ODYyMDE3", "url": "https://github.com/trinodb/trino/pull/5378#pullrequestreview-504862017", "createdAt": "2020-10-08T14:45:28Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0NToyOFrOHeiNHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0NjowOVrOHeiPOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3OTc0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public interface TestAggregationState\n          \n          \n            \n                        extends AccumulatorState\n          \n          \n            \n                {\n          \n          \n            \n                }\n          \n          \n            \n                public interface TestAggregationState\n          \n          \n            \n                        extends AccumulatorState {}", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501779740", "createdAt": "2020-10-08T14:45:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3OTk2Nw==", "bodyText": "Any existing aggs that can benefit from your change?", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501779967", "createdAt": "2020-10-08T14:45:47Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }\n+\n+    @ReportUnannotatedMethods.Suppress\n+    public static void longTimestampAggregationInput(TestAggregationState state, LongTimestamp value) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MDI4MA==", "bodyText": "Just move those static methods into inner class (just as if you were declaring aggregation)", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501780280", "createdAt": "2020-10-08T14:46:09Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }\n+\n+    @ReportUnannotatedMethods.Suppress", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c0e6f8dc8ef59c2410c7a53a109c7d77ff38957", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/1c0e6f8dc8ef59c2410c7a53a109c7d77ff38957", "committedDate": "2020-10-08T15:22:23Z", "message": "Fix exception message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adbcc2921309fa36f287f7e4500175a5fd10ce07", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/adbcc2921309fa36f287f7e4500175a5fd10ce07", "committedDate": "2020-10-08T15:22:23Z", "message": "Fix AccummulatorCompiler to work with type-specific stack representation\n\nFix aggregation compiler to work fine if input function is defined for\nType which uses non standard stack representation. E.g. TIMESTAMP(p>6)\nuses LongTimestamp on stack."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "adbcc2921309fa36f287f7e4500175a5fd10ce07", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/adbcc2921309fa36f287f7e4500175a5fd10ce07", "committedDate": "2020-10-08T15:22:23Z", "message": "Fix AccummulatorCompiler to work with type-specific stack representation\n\nFix aggregation compiler to work fine if input function is defined for\nType which uses non standard stack representation. E.g. TIMESTAMP(p>6)\nuses LongTimestamp on stack."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3554, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}