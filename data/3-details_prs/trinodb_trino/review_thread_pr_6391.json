{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyOTg4MzQ1", "number": 6391, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToxOToyOVrOFHuDQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo1MDoxMFrOFHuotQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjM4ODUxOnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToxOToyOVrOIJRcyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo1Mjo1OVrOIJSa3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Mzk5NA==", "bodyText": "It is not specific to this PR directly, but a second thought on the mechanism. Why express expected type as spi.type.Type instead a type name. Wouldn't having type names everywhere be more consistent?", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546593994", "createdAt": "2020-12-21T09:19:29Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -190,11 +190,51 @@ public void testBasicTypes()\n                 .addRoundTrip(\"integer\", \"123456789\", INTEGER)\n                 .addRoundTrip(\"smallint\", \"32456\", SMALLINT, \"SMALLINT '32456'\")\n                 .addRoundTrip(\"tinyint\", \"5\", SMALLINT, \"SMALLINT '5'\")\n-                .addRoundTrip(\"double\", \"123.45\", DOUBLE, \"DOUBLE '123.45'\")\n-                .addRoundTrip(\"real\", \"123.45\", REAL, \"REAL '123.45'\")\n                 .execute(getQueryRunner(), prestoCreateAsSelect(\"test_basic_types\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwOTg4Ng==", "bodyText": "Type is more explicit (from Presto perspective). Also, it helps avoid having String,String,String,String signature, and helps adding overloads.", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546609886", "createdAt": "2020-12-21T09:52:59Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -190,11 +190,51 @@ public void testBasicTypes()\n                 .addRoundTrip(\"integer\", \"123456789\", INTEGER)\n                 .addRoundTrip(\"smallint\", \"32456\", SMALLINT, \"SMALLINT '32456'\")\n                 .addRoundTrip(\"tinyint\", \"5\", SMALLINT, \"SMALLINT '5'\")\n-                .addRoundTrip(\"double\", \"123.45\", DOUBLE, \"DOUBLE '123.45'\")\n-                .addRoundTrip(\"real\", \"123.45\", REAL, \"REAL '123.45'\")\n                 .execute(getQueryRunner(), prestoCreateAsSelect(\"test_basic_types\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Mzk5NA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjQ4NDM3OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo1MDoxMFrOIJSVlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo1NDoxM1rOIJSdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwODUzMw==", "bodyText": "nit: Any specific reason to use the PostgreSQL specific CAST syntax?", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546608533", "createdAt": "2020-12-21T09:50:10Z", "author": {"login": "hashhar"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -190,11 +190,51 @@ public void testBasicTypes()\n                 .addRoundTrip(\"integer\", \"123456789\", INTEGER)\n                 .addRoundTrip(\"smallint\", \"32456\", SMALLINT, \"SMALLINT '32456'\")\n                 .addRoundTrip(\"tinyint\", \"5\", SMALLINT, \"SMALLINT '5'\")\n-                .addRoundTrip(\"double\", \"123.45\", DOUBLE, \"DOUBLE '123.45'\")\n-                .addRoundTrip(\"real\", \"123.45\", REAL, \"REAL '123.45'\")\n                 .execute(getQueryRunner(), prestoCreateAsSelect(\"test_basic_types\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")\n+                .addRoundTrip(\"real\", \"3.14\", REAL, \"REAL '3.14'\")\n+                .addRoundTrip(\"real\", \"3.1415927\", REAL, \"REAL '3.1415927'\")\n+                .addRoundTrip(\"real\", \"'NaN'::real\", REAL, \"CAST(nan() AS real)\")\n+                .addRoundTrip(\"real\", \"'-Infinity'::real\", REAL, \"CAST(-infinity() AS real)\")\n+                .addRoundTrip(\"real\", \"'+Infinity'::real\", REAL, \"CAST(+infinity() AS real)\")\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_real\"));\n+\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")\n+                .addRoundTrip(\"real\", \"3.14\", REAL, \"REAL '3.14'\")\n+                .addRoundTrip(\"real\", \"3.1415927\", REAL, \"REAL '3.1415927'\")\n+                .addRoundTrip(\"real\", \"nan()\", REAL, \"CAST(nan() AS real)\")\n+                .addRoundTrip(\"real\", \"-infinity()\", REAL, \"CAST(-infinity() AS real)\")\n+                .addRoundTrip(\"real\", \"+infinity()\", REAL, \"CAST(+infinity() AS real)\")\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_real\"));\n+    }\n+\n+    @Test\n+    public void testDouble()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"double precision\", \"NULL\", DOUBLE, \"CAST(NULL AS double)\")\n+                .addRoundTrip(\"double precision\", \"1.0E100\", DOUBLE, \"1.0E100\")\n+                .addRoundTrip(\"double precision\", \"'NaN'::double precision\", DOUBLE, \"nan()\")\n+                .addRoundTrip(\"double precision\", \"'+Infinity'::double precision\", DOUBLE, \"+infinity()\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxMDU1Mw==", "bodyText": "Pre-existing. Anyway, the postgresql-specific syntax is heavily advertised in postgresql docs, so why not? The expression as a whole remains postgresql-specific anyway.", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546610553", "createdAt": "2020-12-21T09:54:13Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -190,11 +190,51 @@ public void testBasicTypes()\n                 .addRoundTrip(\"integer\", \"123456789\", INTEGER)\n                 .addRoundTrip(\"smallint\", \"32456\", SMALLINT, \"SMALLINT '32456'\")\n                 .addRoundTrip(\"tinyint\", \"5\", SMALLINT, \"SMALLINT '5'\")\n-                .addRoundTrip(\"double\", \"123.45\", DOUBLE, \"DOUBLE '123.45'\")\n-                .addRoundTrip(\"real\", \"123.45\", REAL, \"REAL '123.45'\")\n                 .execute(getQueryRunner(), prestoCreateAsSelect(\"test_basic_types\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")\n+                .addRoundTrip(\"real\", \"3.14\", REAL, \"REAL '3.14'\")\n+                .addRoundTrip(\"real\", \"3.1415927\", REAL, \"REAL '3.1415927'\")\n+                .addRoundTrip(\"real\", \"'NaN'::real\", REAL, \"CAST(nan() AS real)\")\n+                .addRoundTrip(\"real\", \"'-Infinity'::real\", REAL, \"CAST(-infinity() AS real)\")\n+                .addRoundTrip(\"real\", \"'+Infinity'::real\", REAL, \"CAST(+infinity() AS real)\")\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_real\"));\n+\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")\n+                .addRoundTrip(\"real\", \"3.14\", REAL, \"REAL '3.14'\")\n+                .addRoundTrip(\"real\", \"3.1415927\", REAL, \"REAL '3.1415927'\")\n+                .addRoundTrip(\"real\", \"nan()\", REAL, \"CAST(nan() AS real)\")\n+                .addRoundTrip(\"real\", \"-infinity()\", REAL, \"CAST(-infinity() AS real)\")\n+                .addRoundTrip(\"real\", \"+infinity()\", REAL, \"CAST(+infinity() AS real)\")\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_real\"));\n+    }\n+\n+    @Test\n+    public void testDouble()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"double precision\", \"NULL\", DOUBLE, \"CAST(NULL AS double)\")\n+                .addRoundTrip(\"double precision\", \"1.0E100\", DOUBLE, \"1.0E100\")\n+                .addRoundTrip(\"double precision\", \"'NaN'::double precision\", DOUBLE, \"nan()\")\n+                .addRoundTrip(\"double precision\", \"'+Infinity'::double precision\", DOUBLE, \"+infinity()\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwODUzMw=="}, "originalCommit": null, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4387, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}