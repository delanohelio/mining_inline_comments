{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzk3MDM4", "number": 4249, "title": "SPI and optimizer rule for connectors that can support complete topN \u2026", "bodyText": "\u2026pushdown", "createdAt": "2020-06-26T21:35:49Z", "url": "https://github.com/trinodb/trino/pull/4249", "merged": true, "mergeCommit": {"oid": "360206821890ce801890b2954f90eb51f28c8afb"}, "closed": true, "closedAt": "2020-08-05T03:41:03Z", "author": {"login": "Parth-Brahmbhatt"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvKSfNABqjM0ODgyMjE3OTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd87HTYAFqTU5NjI1MzYwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzgzMzQz", "url": "https://github.com/trinodb/trino/pull/4249#pullrequestreview-440783343", "createdAt": "2020-07-01T11:28:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMToyODowOVrOGrh-1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0NToxM1rOGriecQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5ODcxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        TopNFunction topNFunctions,\n          \n          \n            \n                        TopNFunction topNFunction,", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r448298711", "createdAt": "2020-07-01T11:28:09Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -362,6 +363,12 @@\n             Map<String, ColumnHandle> assignments,\n             List<List<ColumnHandle>> groupingSets);\n \n+    Optional<TableHandle> applyTopN(\n+            Session session,\n+            TableHandle handle,\n+            TopNFunction topNFunctions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMDEwMw==", "bodyText": "I am not sure this is a \"function\".\nI will defer to Martin for the name though", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r448300103", "createdAt": "2020-07-01T11:30:55Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/TopNFunction.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TopNFunction", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMDM4Ng==", "bodyText": "List.copyOf\nvalidate the list is not empty", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r448300386", "createdAt": "2020-07-01T11:31:34Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/TopNFunction.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TopNFunction\n+{\n+    private final long count;\n+    private final List<SortItem> orderBy;\n+\n+    public TopNFunction(long count, List<SortItem> orderBy)\n+    {\n+        this.count = count;\n+        this.orderBy = requireNonNull(orderBy, \"sortItems is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMTIxMg==", "bodyText": "we do not expect a need to remap column handles, do we?", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r448301212", "createdAt": "2020-07-01T11:33:16Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -925,6 +925,28 @@ default ConnectorTableProperties getTableProperties(ConnectorSession session, Co\n         return Optional.empty();\n     }\n \n+    /**\n+     * Attempt to push down the topN into the table scan.\n+     * <p>\n+     * Connectors can indicate whether they don't support topN pushdown or that the action had no effect\n+     * by returning {@link Optional#empty()}. Connectors should expect this method may be called multiple times.\n+     * </p>\n+     * <b>Note</b>: it's critical for connectors to return {@link Optional#empty()} if calling this method has no effect for that\n+     * invocation, even if the connector generally supports topN pushdown. Doing otherwise can cause the optimizer\n+     * to loop indefinitely.\n+     * <p>\n+     * If the connector can handle TopN Pushdown it should return a new table handle which will replace the existing\n+     * table handle in the TableScan.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMTM2OQ==", "bodyText": "topN -> TopN ?", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r448301369", "createdAt": "2020-07-01T11:33:37Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -925,6 +925,28 @@ default ConnectorTableProperties getTableProperties(ConnectorSession session, Co\n         return Optional.empty();\n     }\n \n+    /**\n+     * Attempt to push down the topN into the table scan.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMjE3Ng==", "bodyText": "keep every argument on a separate line\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ApplyTopN applyTopN, BiFunction<ConnectorSession, SchemaTableName, Optional<ConnectorNewTableLayout>> getInsertLayout,\n          \n          \n            \n                            ApplyTopN applyTopN, \n          \n          \n            \n                            BiFunction<ConnectorSession, SchemaTableName, Optional<ConnectorNewTableLayout>> getInsertLayout,", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r448302176", "createdAt": "2020-07-01T11:35:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorFactory.java", "diffHunk": "@@ -162,7 +173,7 @@ private MockConnector(\n                 BiFunction<ConnectorSession, SchemaTableName, ConnectorTableHandle> getTableHandle,\n                 Function<SchemaTableName, List<ColumnMetadata>> getColumns,\n                 ApplyProjection applyProjection,\n-                BiFunction<ConnectorSession, SchemaTableName, Optional<ConnectorNewTableLayout>> getInsertLayout,\n+                ApplyTopN applyTopN, BiFunction<ConnectorSession, SchemaTableName, Optional<ConnectorNewTableLayout>> getInsertLayout,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMjI5Mw==", "bodyText": "requireNonNull", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r448302293", "createdAt": "2020-07-01T11:35:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorFactory.java", "diffHunk": "@@ -98,6 +101,7 @@ private MockConnectorFactory(\n         this.getTableHandle = requireNonNull(getTableHandle, \"getTableHandle is null\");\n         this.getColumns = getColumns;\n         this.applyProjection = applyProjection;\n+        this.applyTopN = applyTopN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNjI4OQ==", "bodyText": "orderBy -> symbol", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r448306289", "createdAt": "2020-07-01T11:44:12Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushTopNIntoTableScan.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.SortItem;\n+import io.prestosql.spi.connector.SortOrder;\n+import io.prestosql.spi.connector.TopNFunction;\n+import io.prestosql.sql.planner.OrderingScheme;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.plan.TableScanNode;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.sql.planner.plan.Patterns.source;\n+import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class PushTopNIntoTableScan\n+        implements Rule<TopNNode>\n+{\n+    private static final Capture<TableScanNode> TABLE_SCAN = newCapture();\n+\n+    private static final Pattern<TopNNode> PATTERN = topN().with(source().matching(\n+            tableScan().capturedAs(TABLE_SCAN)));\n+\n+    private final Metadata metadata;\n+\n+    public PushTopNIntoTableScan(Metadata metadata)\n+    {\n+        this.metadata = metadata;\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(TopNNode node, Captures captures, Context context)\n+    {\n+        TableScanNode tableScan = captures.get(TABLE_SCAN);\n+\n+        TopNFunction topNFunction = toTopNFunction(node);\n+        Map<String, ColumnHandle> assignments = tableScan.getAssignments()\n+                .entrySet().stream()\n+                .collect(toImmutableMap(entry -> entry.getKey().getName(), Map.Entry::getValue));\n+\n+        Optional<TableHandle> result = metadata.applyTopN(\n+                context.getSession(),\n+                tableScan.getTable(),\n+                topNFunction,\n+                assignments);\n+\n+        if (result.isEmpty()) {\n+            return Result.empty();\n+        }\n+\n+        return Result.ofPlanNode(\n+                        TableScanNode.newInstance(\n+                                context.getIdAllocator().getNextId(),\n+                                result.get(),\n+                                tableScan.getOutputSymbols(),\n+                                tableScan.getAssignments()));\n+    }\n+\n+    private TopNFunction toTopNFunction(TopNNode topNNode)\n+    {\n+        long count = topNNode.getCount();\n+        OrderingScheme orderingScheme = topNNode.getOrderingScheme();\n+        List<SortItem> sortBy = orderingScheme.getOrderBy().stream()\n+                .map(orderBy -> new SortItem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNjgwMQ==", "bodyText": "please extract private static List<SortItem> toSortItems(OrderingScheme orderingScheme) here", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r448306801", "createdAt": "2020-07-01T11:45:13Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushTopNIntoTableScan.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.TableHandle;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.SortItem;\n+import io.prestosql.spi.connector.SortOrder;\n+import io.prestosql.spi.connector.TopNFunction;\n+import io.prestosql.sql.planner.OrderingScheme;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.plan.TableScanNode;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.sql.planner.plan.Patterns.source;\n+import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class PushTopNIntoTableScan\n+        implements Rule<TopNNode>\n+{\n+    private static final Capture<TableScanNode> TABLE_SCAN = newCapture();\n+\n+    private static final Pattern<TopNNode> PATTERN = topN().with(source().matching(\n+            tableScan().capturedAs(TABLE_SCAN)));\n+\n+    private final Metadata metadata;\n+\n+    public PushTopNIntoTableScan(Metadata metadata)\n+    {\n+        this.metadata = metadata;\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(TopNNode node, Captures captures, Context context)\n+    {\n+        TableScanNode tableScan = captures.get(TABLE_SCAN);\n+\n+        TopNFunction topNFunction = toTopNFunction(node);\n+        Map<String, ColumnHandle> assignments = tableScan.getAssignments()\n+                .entrySet().stream()\n+                .collect(toImmutableMap(entry -> entry.getKey().getName(), Map.Entry::getValue));\n+\n+        Optional<TableHandle> result = metadata.applyTopN(\n+                context.getSession(),\n+                tableScan.getTable(),\n+                topNFunction,\n+                assignments);\n+\n+        if (result.isEmpty()) {\n+            return Result.empty();\n+        }\n+\n+        return Result.ofPlanNode(\n+                        TableScanNode.newInstance(\n+                                context.getIdAllocator().getNextId(),\n+                                result.get(),\n+                                tableScan.getOutputSymbols(),\n+                                tableScan.getAssignments()));\n+    }\n+\n+    private TopNFunction toTopNFunction(TopNNode topNNode)\n+    {\n+        long count = topNNode.getCount();\n+        OrderingScheme orderingScheme = topNNode.getOrderingScheme();\n+        List<SortItem> sortBy = orderingScheme.getOrderBy().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTMwNDE0", "url": "https://github.com/trinodb/trino/pull/4249#pullrequestreview-450930414", "createdAt": "2020-07-17T20:12:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoxMjoyMVrOGzf4oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoxMjoyMVrOGzf4oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1Mjk2MQ==", "bodyText": "Having a dedicated class for this seems overkill. Every place that uses this has immediate access to the count and SortItems from a TopNNode. The SPI method can just take both fields separately.", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r456652961", "createdAt": "2020-07-17T20:12:21Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/TopN.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TopN", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTE2NDk1", "url": "https://github.com/trinodb/trino/pull/4249#pullrequestreview-457116495", "createdAt": "2020-07-29T00:27:45Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDoyNzo0NVrOG4kV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDoyNzo0NVrOG4kV8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2ODg4Mg==", "bodyText": "I think we'll want to return a structure similar to applyLimit, where it indicates whether the limit is guaranteed by the connector. In the case of a distributed connector implementation, it may not be able to perform a global top N, but it could still benefit from pushing down the operation, for instance, to each individual storage shard.", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r461968882", "createdAt": "2020-07-29T00:27:45Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -933,6 +933,29 @@ default ConnectorTableProperties getTableProperties(ConnectorSession session, Co\n         return Optional.empty();\n     }\n \n+    /**\n+     * Attempt to push down the TopN into the table scan.\n+     * <p>\n+     * Connectors can indicate whether they don't support topN pushdown or that the action had no effect\n+     * by returning {@link Optional#empty()}. Connectors should expect this method may be called multiple times.\n+     * </p>\n+     * <b>Note</b>: it's critical for connectors to return {@link Optional#empty()} if calling this method has no effect for that\n+     * invocation, even if the connector generally supports topN pushdown. Doing otherwise can cause the optimizer\n+     * to loop indefinitely.\n+     * <p>\n+     * If the connector can handle TopN Pushdown it should return a new table handle which will replace the existing\n+     * table handle in the TableScan.\n+     */\n+    default Optional<ConnectorTableHandle> applyTopN(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDAwMjI5", "url": "https://github.com/trinodb/trino/pull/4249#pullrequestreview-460400229", "createdAt": "2020-08-03T23:24:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzoyNDo1MlrOG7L0pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzoyNDo1MlrOG7L0pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMjg2OQ==", "bodyText": "I believe this should be Step.FINAL. The partial Top N is being handled by the connector at this point.", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r464712869", "createdAt": "2020-08-03T23:24:52Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushTopNIntoTableScan.java", "diffHunk": "@@ -56,33 +55,30 @@ public PushTopNIntoTableScan(Metadata metadata)\n     }\n \n     @Override\n-    public Result apply(TopNNode node, Captures captures, Context context)\n+    public Result apply(TopNNode topNNode, Captures captures, Context context)\n     {\n         TableScanNode tableScan = captures.get(TABLE_SCAN);\n \n-        long topNCount = node.getCount();\n-        List<SortItem> sortItems = node.getOrderingScheme().toSortItems();\n+        long topNCount = topNNode.getCount();\n+        List<SortItem> sortItems = topNNode.getOrderingScheme().toSortItems();\n \n         Map<String, ColumnHandle> assignments = tableScan.getAssignments()\n                 .entrySet().stream()\n                 .collect(toImmutableMap(entry -> entry.getKey().getName(), Map.Entry::getValue));\n \n-        Optional<TableHandle> result = metadata.applyTopN(\n-                context.getSession(),\n-                tableScan.getTable(),\n-                topNCount,\n-                sortItems,\n-                assignments);\n+        return metadata.applyTopN(context.getSession(), tableScan.getTable(), topNCount, sortItems, assignments)\n+                .map(result -> {\n+                    PlanNode node = TableScanNode.newInstance(\n+                            context.getIdAllocator().getNextId(),\n+                            result.getHandle(),\n+                            tableScan.getOutputSymbols(),\n+                            tableScan.getAssignments());\n \n-        if (result.isEmpty()) {\n-            return Result.empty();\n-        }\n-\n-        return Result.ofPlanNode(\n-                        TableScanNode.newInstance(\n-                                context.getIdAllocator().getNextId(),\n-                                result.get(),\n-                                tableScan.getOutputSymbols(),\n-                                tableScan.getAssignments()));\n+                    if (!result.isTopNGuaranteed()) {\n+                        node = new TopNNode(topNNode.getId(), node, topNNode.getCount(), topNNode.getOrderingScheme(), TopNNode.Step.PARTIAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c94323428ea17bd492b0e809456dc2b164ba009", "author": {"user": {"login": "Parth-Brahmbhatt", "name": "Parth Brahmbhatt"}}, "url": "https://github.com/trinodb/trino/commit/9c94323428ea17bd492b0e809456dc2b164ba009", "committedDate": "2020-08-05T03:40:07Z", "message": "Add support for TopN pushdown"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9c94323428ea17bd492b0e809456dc2b164ba009", "author": {"user": {"login": "Parth-Brahmbhatt", "name": "Parth Brahmbhatt"}}, "url": "https://github.com/trinodb/trino/commit/9c94323428ea17bd492b0e809456dc2b164ba009", "committedDate": "2020-08-05T03:40:07Z", "message": "Add support for TopN pushdown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2MjUzNjAx", "url": "https://github.com/trinodb/trino/pull/4249#pullrequestreview-596253601", "createdAt": "2021-02-23T11:52:56Z", "commit": {"oid": "9c94323428ea17bd492b0e809456dc2b164ba009"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxMTo1Mjo1NlrOIqD2Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxMjowMzo1NVrOIqEP3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDk3NDA5NQ==", "bodyText": "I think this should trigger no SINGLE step only.\nWe should not push partial and final separately (and IMO -- we should not push them at all)", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r580974095", "createdAt": "2021-02-23T11:52:56Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushTopNIntoTableScan.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.SortItem;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+import io.prestosql.sql.planner.plan.TableScanNode;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.sql.planner.plan.Patterns.source;\n+import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class PushTopNIntoTableScan\n+        implements Rule<TopNNode>\n+{\n+    private static final Capture<TableScanNode> TABLE_SCAN = newCapture();\n+\n+    private static final Pattern<TopNNode> PATTERN = topN().with(source().matching(\n+            tableScan().capturedAs(TABLE_SCAN)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94323428ea17bd492b0e809456dc2b164ba009"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDk3ODY5OQ==", "bodyText": "This should be added to pushIntoTableScanOptimizer, when other PushXxxIntoTableScan rules are registered.\nThis is important for two reasons:\n\nthis will unlock other pushdowns once TopN is pushed into TableScan fully\nthis will let the rule operate on TopNNode while it is SINGLE step (and consume it fully), making reasoning about engine-connector interactions simpler\n\n@wendigo is going to address this in #6847", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r580978699", "createdAt": "2021-02-23T12:00:24Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -623,7 +624,8 @@ public PlanOptimizers(\n                         new CreatePartialTopN(),\n                         new PushTopNThroughProject(),\n                         new PushTopNThroughOuterJoin(),\n-                        new PushTopNThroughUnion())));\n+                        new PushTopNThroughUnion(),\n+                        new PushTopNIntoTableScan(metadata))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94323428ea17bd492b0e809456dc2b164ba009"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDk4MDcwMg==", "bodyText": "Relates  to #4249 (comment)\nInserting FINAL step is not correct when the rule triggered on TopNNode with Step PARTIAL.\nI suggest\n\nmake the rule trigger for SINGLE step only (my preferred)\n\ni am aware sibling PushLimitIntoTableScan triggers for partial limits, but i am not convinced it is beneficial\n\n\nkeep same step as it used to be used (basically, use topNNode.replaceChildren)\n\n(this is not being addressed in @wendigo #6847)", "url": "https://github.com/trinodb/trino/pull/4249#discussion_r580980702", "createdAt": "2021-02-23T12:03:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushTopNIntoTableScan.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.SortItem;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+import io.prestosql.sql.planner.plan.TableScanNode;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.sql.planner.plan.Patterns.source;\n+import static io.prestosql.sql.planner.plan.Patterns.tableScan;\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class PushTopNIntoTableScan\n+        implements Rule<TopNNode>\n+{\n+    private static final Capture<TableScanNode> TABLE_SCAN = newCapture();\n+\n+    private static final Pattern<TopNNode> PATTERN = topN().with(source().matching(\n+            tableScan().capturedAs(TABLE_SCAN)));\n+\n+    private final Metadata metadata;\n+\n+    public PushTopNIntoTableScan(Metadata metadata)\n+    {\n+        this.metadata = metadata;\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(TopNNode topNNode, Captures captures, Context context)\n+    {\n+        TableScanNode tableScan = captures.get(TABLE_SCAN);\n+\n+        long topNCount = topNNode.getCount();\n+        List<SortItem> sortItems = topNNode.getOrderingScheme().toSortItems();\n+\n+        Map<String, ColumnHandle> assignments = tableScan.getAssignments()\n+                .entrySet().stream()\n+                .collect(toImmutableMap(entry -> entry.getKey().getName(), Map.Entry::getValue));\n+\n+        return metadata.applyTopN(context.getSession(), tableScan.getTable(), topNCount, sortItems, assignments)\n+                .map(result -> {\n+                    PlanNode node = TableScanNode.newInstance(\n+                            context.getIdAllocator().getNextId(),\n+                            result.getHandle(),\n+                            tableScan.getOutputSymbols(),\n+                            tableScan.getAssignments());\n+\n+                    if (!result.isTopNGuaranteed()) {\n+                        node = new TopNNode(topNNode.getId(), node, topNNode.getCount(), topNNode.getOrderingScheme(), TopNNode.Step.FINAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94323428ea17bd492b0e809456dc2b164ba009"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 235, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}