{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjEzNzE2", "number": 5696, "title": "Fix handling of negative offsets for time w/ tz", "bodyText": "", "createdAt": "2020-10-26T18:07:08Z", "url": "https://github.com/trinodb/trino/pull/5696", "merged": true, "mergeCommit": {"oid": "a8e322234275636cf809b05d0c84d8fcc3e4c44a"}, "closed": true, "closedAt": "2020-10-27T21:47:37Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWYYf7gBqjM5MjIxMzUwNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWuLZXgBqjM5Mjc3NzkyMTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "00bcbe2b67c8116cf52fe0f84ed5ca3e8f4fcbc7", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/00bcbe2b67c8116cf52fe0f84ed5ca3e8f4fcbc7", "committedDate": "2020-10-26T21:59:41Z", "message": "Organize methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a508f83b22e9e2cff1c825fef9a04a76743bb06", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/0a508f83b22e9e2cff1c825fef9a04a76743bb06", "committedDate": "2020-10-26T21:59:41Z", "message": "Add tests for negative offsets for timestamp w/ tz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDE4NzI5", "url": "https://github.com/trinodb/trino/pull/5696#pullrequestreview-517418729", "createdAt": "2020-10-27T07:45:13Z", "commit": {"oid": "0a508f83b22e9e2cff1c825fef9a04a76743bb06"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzo0NToxNFrOHou3NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyMDoyMVrOHowAtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3Mjg4NQ==", "bodyText": "we should test timezone_hour too, as the function is not hidden", "url": "https://github.com/trinodb/trino/pull/5696#discussion_r512472885", "createdAt": "2020-10-27T07:45:14Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamptz/TestExtract.java", "diffHunk": "@@ -269,6 +269,21 @@ public void testTimeZoneHour()\n         assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.1234567891 +08:35')\")).matches(\"BIGINT '8'\");\n         assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.12345678912 +08:35')\")).matches(\"BIGINT '8'\");\n         assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.123456789123 +08:35')\")).matches(\"BIGINT '8'\");\n+\n+        // negative offsets\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.1 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.12 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.123 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.1234 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.12345 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.123456 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.1234567 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.12345678 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.123456789 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.1234567891 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.12345678912 -08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.123456789123 -08:35')\")).matches(\"BIGINT '-8'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a508f83b22e9e2cff1c825fef9a04a76743bb06"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MzMyOQ==", "bodyText": "offsets -> offset", "url": "https://github.com/trinodb/trino/pull/5696#discussion_r512473329", "createdAt": "2020-10-27T07:46:11Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamptz/TestExtract.java", "diffHunk": "@@ -269,6 +269,21 @@ public void testTimeZoneHour()\n         assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.1234567891 +08:35')\")).matches(\"BIGINT '8'\");\n         assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.12345678912 +08:35')\")).matches(\"BIGINT '8'\");\n         assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIMESTAMP '2020-05-10 12:34:56.123456789123 +08:35')\")).matches(\"BIGINT '8'\");\n+\n+        // negative offsets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a508f83b22e9e2cff1c825fef9a04a76743bb06"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MzM2NA==", "bodyText": "offsets -> offset", "url": "https://github.com/trinodb/trino/pull/5696#discussion_r512473364", "createdAt": "2020-10-27T07:46:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamptz/TestExtract.java", "diffHunk": "@@ -287,6 +302,36 @@ public void testTimeZoneMinute()\n         assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIMESTAMP '2020-05-10 12:34:56.1234567891 +08:35')\")).matches(\"BIGINT '35'\");\n         assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIMESTAMP '2020-05-10 12:34:56.12345678912 +08:35')\")).matches(\"BIGINT '35'\");\n         assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIMESTAMP '2020-05-10 12:34:56.123456789123 +08:35')\")).matches(\"BIGINT '35'\");\n+\n+        // negative offsets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a508f83b22e9e2cff1c825fef9a04a76743bb06"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MTA1OA==", "bodyText": "it's preexisting, but we just learned it's so important\nplease add a test with minutes offsets here (positive, negative, -00:XX)", "url": "https://github.com/trinodb/trino/pull/5696#discussion_r512491058", "createdAt": "2020-10-27T08:19:11Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestCustomJsonDateTimeFormatter.java", "diffHunk": "@@ -84,12 +84,12 @@ public void testCustomDateTimeFunctions()\n         testTime(sqlTimeOf(3, 0, 0, 0, 0), \"HH:mm:ss.SSS\", 3, \"00:00:00.000\");\n         testTime(sqlTimeOf(3, 23, 59, 59, 999000000), \"HH:mm:ss.SSS\", 3, \"23:59:59.999\");\n \n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 0, 0), \"HH:mm:ss.SSS Z\", \"10:23:35.123 +0000\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 0, 0, 0, 0, 0, 0), \"HH:mm:ss.SSS Z\", \"00:00:00.000 +0000\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 2, 0), \"HH:mm:ss.SSS Z\", \"10:23:35.123 +0200\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 10, 0), \"HH:mm:ss.SSS Z\", \"10:23:35.123 +1000\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, -10, 0), \"HH:mm:ss.SSS Z\", \"10:23:35.123 -1000\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 23, 59, 59, 999000000, 0, 0), \"HH:mm:ss.SSS Z\", \"23:59:59.999 +0000\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 0), \"HH:mm:ss.SSS Z\", \"10:23:35.123 +0000\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 0, 0, 0, 0, 0), \"HH:mm:ss.SSS Z\", \"00:00:00.000 +0000\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 2 * 60), \"HH:mm:ss.SSS Z\", \"10:23:35.123 +0200\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 10 * 60), \"HH:mm:ss.SSS Z\", \"10:23:35.123 +1000\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, -10 * 60), \"HH:mm:ss.SSS Z\", \"10:23:35.123 -1000\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 23, 59, 59, 999000000, 0), \"HH:mm:ss.SSS Z\", \"23:59:59.999 +0000\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MTA4Nw==", "bodyText": "it's preexisting, but we just learned it's so important\nplease add a test with minutes offsets here (positive, negative, -00:XX)", "url": "https://github.com/trinodb/trino/pull/5696#discussion_r512491087", "createdAt": "2020-10-27T08:19:15Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/encoder/json/TestISO8601JsonDateTimeFormatter.java", "diffHunk": "@@ -84,12 +84,12 @@ public void testISO8601DateTimeFunctions()\n         testTime(sqlTimeOf(3, 0, 0, 0, 0), 3, \"00:00\");\n         testTime(sqlTimeOf(3, 23, 59, 59, 999000000), 3, \"23:59:59.999\");\n \n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 0, 0), \"10:23:35.123Z\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 0, 0, 0, 0, 0, 0), \"00:00:00Z\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 2, 0), \"10:23:35.123+02:00\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 10, 0), \"10:23:35.123+10:00\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, -10, 0), \"10:23:35.123-10:00\");\n-        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 23, 59, 59, 999000000, 0, 0), \"23:59:59.999Z\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 0), \"10:23:35.123Z\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 0, 0, 0, 0, 0), \"00:00:00Z\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 2 * 60), \"10:23:35.123+02:00\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, 10 * 60), \"10:23:35.123+10:00\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 10, 23, 35, 123000000, -10 * 60), \"10:23:35.123-10:00\");\n+        testTimeWithTZ(sqlTimeWithTimeZoneOf(3, 23, 59, 59, 999000000, 0), \"23:59:59.999Z\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MTI2OQ==", "bodyText": "add -00:35 cases here too", "url": "https://github.com/trinodb/trino/pull/5696#discussion_r512491269", "createdAt": "2020-10-27T08:19:34Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamptz/TestTimestampWithTimeZone.java", "diffHunk": "@@ -1279,6 +1279,21 @@ public void testCastToTimeWithTimeZone()\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 03:23:45.1234567891 America/Los_Angeles' AS TIME(10) WITH TIME ZONE)\")).matches(\"TIME '03:23:45.1234567891+08:35'\");\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 03:23:45.12345678912 America/Los_Angeles' AS TIME(11) WITH TIME ZONE)\")).matches(\"TIME '03:23:45.12345678912+08:35'\");\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 03:23:45.123456789123 America/Los_Angeles' AS TIME(12) WITH TIME ZONE)\")).matches(\"TIME '03:23:45.123456789123+08:35'\");\n+\n+        // negative offsets\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45 -08:35' AS TIME(0) WITH TIME ZONE)\")).matches(\"TIME '01:23:45-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.1 -08:35' AS TIME(1) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.1-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.12 -08:35' AS TIME(2) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.12-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.123 -08:35' AS TIME(3) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.123-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.1234 -08:35' AS TIME(4) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.1234-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.12345 -08:35' AS TIME(5) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.12345-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.123456 -08:35' AS TIME(6) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.123456-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.1234567 -08:35' AS TIME(7) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.1234567-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.12345678 -08:35' AS TIME(8) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.12345678-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.123456789 -08:35' AS TIME(9) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.123456789-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.1234567891 -08:35' AS TIME(10) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.1234567891-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.12345678912 -08:35' AS TIME(11) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.12345678912-08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.123456789123 -08:35' AS TIME(12) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.123456789123-08:35'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MTUyMQ==", "bodyText": "negative offset minutes case?", "url": "https://github.com/trinodb/trino/pull/5696#discussion_r512491521", "createdAt": "2020-10-27T08:20:02Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timetz/TestTimeWithTimeZone.java", "diffHunk": "@@ -1110,6 +1217,21 @@ public void testCastToTimestampWithTimeZone()\n \n         assertThat(assertions.expression(\"CAST(TIME '12:34:56.555555555555+08:35' AS TIMESTAMP(11) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.55555555556 +08:35'\");\n \n+        // negative offsets\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56-08:35' AS TIMESTAMP(0) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.1-08:35' AS TIMESTAMP(1) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.1 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.12-08:35' AS TIMESTAMP(2) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.12 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.123-08:35' AS TIMESTAMP(3) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.123 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.1234-08:35' AS TIMESTAMP(4) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.1234 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.12345-08:35' AS TIMESTAMP(5) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.12345 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.123456-08:35' AS TIMESTAMP(6) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.123456 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.1234567-08:35' AS TIMESTAMP(7) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.1234567 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.12345678-08:35' AS TIMESTAMP(8) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.12345678 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.123456789-08:35' AS TIMESTAMP(9) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.123456789 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.1234567891-08:35' AS TIMESTAMP(10) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.1234567891 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.12345678912-08:35' AS TIMESTAMP(11) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.12345678912 -08:35'\");\n+        assertThat(assertions.expression(\"CAST(TIME '12:34:56.123456789123-08:35' AS TIMESTAMP(12) WITH TIME ZONE)\", session)).matches(\"TIMESTAMP '2020-05-01 12:34:56.123456789123 -08:35'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MTcwMQ==", "bodyText": "cast to varchar too:\npresto> SELECT CAST(TIME '01:23:45-08:35' AS varchar);\n      _col0\n-----------------\n 01:23:45-08:-35\n(1 row)", "url": "https://github.com/trinodb/trino/pull/5696#discussion_r512491701", "createdAt": "2020-10-27T08:20:21Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimeWithTimeZone.java", "diffHunk": "@@ -91,7 +92,7 @@ public String toString()\n             builder.append(\".\");\n             builder.append(format(\"%0\" + precision + \"d\", scaledFraction));\n         }\n-        builder.append(format(\"%+03d:%02d\", offsetMinutes / 60, offsetMinutes % 60));\n+        builder.append(format(\"%+03d:%02d\", offsetMinutes / 60, abs(offsetMinutes % 60)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9c91a5f08f64a9b7ffb05d151adf07dc2ddb3e8", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/d9c91a5f08f64a9b7ffb05d151adf07dc2ddb3e8", "committedDate": "2020-10-27T19:31:27Z", "message": "Fix handling of negative offsets for time w/ tz\n\nThere were two issues:\n* The parsing logic had a deficiency that prevented it from handling offsets of the\n  shape -00:XX. The sign was being lost\n* The conversion from offset hour and offset minute to offset minutes was incorrect.\n  It was not calculating a proper negative offset because it was adding positive minutes\n  (towards 0) in the case of a negative offset."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "d9c91a5f08f64a9b7ffb05d151adf07dc2ddb3e8", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/d9c91a5f08f64a9b7ffb05d151adf07dc2ddb3e8", "committedDate": "2020-10-27T19:31:27Z", "message": "Fix handling of negative offsets for time w/ tz\n\nThere were two issues:\n* The parsing logic had a deficiency that prevented it from handling offsets of the\n  shape -00:XX. The sign was being lost\n* The conversion from offset hour and offset minute to offset minutes was incorrect.\n  It was not calculating a proper negative offset because it was adding positive minutes\n  (towards 0) in the case of a negative offset."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3150, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}