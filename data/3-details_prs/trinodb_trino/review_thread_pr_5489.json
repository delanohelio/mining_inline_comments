{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDU3NDQy", "number": 5489, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOToyNzowMFrOEr-RYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0MToyMVrOE3MCDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTQ0NDgwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Kerberos.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOToyNzowMFrOHfCM4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDoyMzozM1rOHfEAjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMzk2OA==", "bodyText": "Kerberos -> KerberizedHadoop\n?", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r502303968", "createdAt": "2020-10-09T09:27:00Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Kerberos.java", "diffHunk": "@@ -36,22 +36,26 @@\n \n     private final String hadoopBaseImage;\n     private final String hadoopImagesVersion;\n+    private final Hadoop hadoop;\n \n     @Inject\n     public Kerberos(\n             DockerFiles dockerFiles,\n             PortBinder portBinder,\n+            Hadoop hadoop,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwNzYxNg==", "bodyText": "The problem IMO is that Kerberos is not some kind of addition to Hadoop. It is a standalone being.\nWe have 3 entities here:\n\nHadoop\nKerberos\nHadoop-Kerberos relationship\n\nKerberos can be used with other systems. If we add ranger to that we have: Hadoop, Kerberos, ranger and two relationships - ranger-kerberos and hadoop-kerberos.\nExpressing this in simple object composition is not trivial.", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r502307616", "createdAt": "2020-10-09T09:33:27Z", "author": {"login": "skrzypo987"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Kerberos.java", "diffHunk": "@@ -36,22 +36,26 @@\n \n     private final String hadoopBaseImage;\n     private final String hadoopImagesVersion;\n+    private final Hadoop hadoop;\n \n     @Inject\n     public Kerberos(\n             DockerFiles dockerFiles,\n             PortBinder portBinder,\n+            Hadoop hadoop,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMzk2OA=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyODI0OQ==", "bodyText": "In general yes, but in particular no.\nStandalone Hadoop would use standalone thing like https://github.com/prestosql/docker-images/tree/master/prestodev/kerberos which is not the case here. Here we are modifying Hadoop to make it kerberized, so name KerberizedHadoop is great here as there is no standalone Kerberos here yet. This even more stresses the fact that injecting Hadoop and Kerberos previously was bad.\nI see your point with entities here, and I agree with you. Best option if we would have containers A and B and the C that affects A and B to be expressed a collection  of AwithC (that depends on A and C), BwithC (that depends on B and C). Do we agree here?", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r502328249", "createdAt": "2020-10-09T10:12:51Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Kerberos.java", "diffHunk": "@@ -36,22 +36,26 @@\n \n     private final String hadoopBaseImage;\n     private final String hadoopImagesVersion;\n+    private final Hadoop hadoop;\n \n     @Inject\n     public Kerberos(\n             DockerFiles dockerFiles,\n             PortBinder portBinder,\n+            Hadoop hadoop,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMzk2OA=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyOTAxNg==", "bodyText": "C was representing kerberos here. But please notice that current Kerberos does not represent standalone component, it is just a modification.", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r502329016", "createdAt": "2020-10-09T10:14:32Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Kerberos.java", "diffHunk": "@@ -36,22 +36,26 @@\n \n     private final String hadoopBaseImage;\n     private final String hadoopImagesVersion;\n+    private final Hadoop hadoop;\n \n     @Inject\n     public Kerberos(\n             DockerFiles dockerFiles,\n             PortBinder portBinder,\n+            Hadoop hadoop,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMzk2OA=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMzU4MA==", "bodyText": "Let's start from the beginning. This is depicting the dependency between these 2 as they are right now. We could model them in a more granular manner, but right not we should start from making dependencies like this visible and naming the abstractions properly (like KerberizedHadoop), so that they start to represent what they actually do.", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r502333580", "createdAt": "2020-10-09T10:23:33Z", "author": {"login": "s2lomon"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Kerberos.java", "diffHunk": "@@ -36,22 +36,26 @@\n \n     private final String hadoopBaseImage;\n     private final String hadoopImagesVersion;\n+    private final Hadoop hadoop;\n \n     @Inject\n     public Kerberos(\n             DockerFiles dockerFiles,\n             PortBinder portBinder,\n+            Hadoop hadoop,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMzk2OA=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDgyNDM3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowNjoxMVrOHunvWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzozNjo0MFrOHuuSIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NzY0MQ==", "bodyText": "I don't like this. Nothing prevents the extenders to be parametrized. We pass instances everywhere. And here we are filtering based on class.", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r518647641", "createdAt": "2020-11-06T10:06:11Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentProvider.java", "diffHunk": "@@ -45,14 +46,19 @@ protected EnvironmentProvider(List<EnvironmentExtender> bases)\n                 .add(environmentConfig)\n                 .build();\n \n-        String extendersNames = extenders.stream()\n-                .map(Object::getClass)\n-                .map(Class::getSimpleName)\n-                .collect(joining(\", \"));\n-\n-        log.info(\"Building environment %s with extenders: %s\", builder.getEnvironmentName(), extendersNames);\n-\n-        extenders.forEach(extender -> extender.extendEnvironment(builder));\n+        Set<Class<? extends EnvironmentExtender>> seen = new HashSet<>();\n+        extenders.forEach(extender -> extend(extender, builder, seen));\n         return builder;\n     }\n+\n+    private void extend(EnvironmentExtender extender, Environment.Builder builder, Set<Class<? extends EnvironmentExtender>> seen)\n+    {\n+        extender.getDependencies()\n+                .forEach(dependencyExtender -> extend(dependencyExtender, builder, seen));\n+        Class<? extends EnvironmentExtender> extenderClass = extender.getClass();\n+        if (seen.add(extenderClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc1NDg1MQ==", "bodyText": "\ud83d\udc4d\nI will use identity set instead and use regular objects.", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r518754851", "createdAt": "2020-11-06T13:36:40Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentProvider.java", "diffHunk": "@@ -45,14 +46,19 @@ protected EnvironmentProvider(List<EnvironmentExtender> bases)\n                 .add(environmentConfig)\n                 .build();\n \n-        String extendersNames = extenders.stream()\n-                .map(Object::getClass)\n-                .map(Class::getSimpleName)\n-                .collect(joining(\", \"));\n-\n-        log.info(\"Building environment %s with extenders: %s\", builder.getEnvironmentName(), extendersNames);\n-\n-        extenders.forEach(extender -> extender.extendEnvironment(builder));\n+        Set<Class<? extends EnvironmentExtender>> seen = new HashSet<>();\n+        extenders.forEach(extender -> extend(extender, builder, seen));\n         return builder;\n     }\n+\n+    private void extend(EnvironmentExtender extender, Environment.Builder builder, Set<Class<? extends EnvironmentExtender>> seen)\n+    {\n+        extender.getDependencies()\n+                .forEach(dependencyExtender -> extend(dependencyExtender, builder, seen));\n+        Class<? extends EnvironmentExtender> extenderClass = extender.getClass();\n+        if (seen.add(extenderClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NzY0MQ=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDgzNTQ3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/HadoopKerberos.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowOTozMFrOHun2Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwOTozNToyMVrOHvG5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTQzOA==", "bodyText": "I am not convinced we need this class method at all.\nWhy not just call hadoop.extend() in extendEnvironment.\n(possibly it was discussed alrady)...", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r518649438", "createdAt": "2020-11-06T10:09:30Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/HadoopKerberos.java", "diffHunk": "@@ -69,4 +76,10 @@ public void extendEnvironment(Environment.Builder builder)\n             container.withCopyFileToContainer(forHostPath(configDir.getPath(\"tempto-configuration.yaml\")), CONTAINER_TEMPTO_PROFILE_CONFIG);\n         });\n     }\n+\n+    @Override\n+    public List<EnvironmentExtender> getDependencies()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc1NTc3NA==", "bodyText": "I don't understand.\n\nI am not convinced we need this class at all.\n\nDo you mean we don't need HadoopKerberos?\nCan you please elaborate?", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r518755774", "createdAt": "2020-11-06T13:38:23Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/HadoopKerberos.java", "diffHunk": "@@ -69,4 +76,10 @@ public void extendEnvironment(Environment.Builder builder)\n             container.withCopyFileToContainer(forHostPath(configDir.getPath(\"tempto-configuration.yaml\")), CONTAINER_TEMPTO_PROFILE_CONFIG);\n         });\n     }\n+\n+    @Override\n+    public List<EnvironmentExtender> getDependencies()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTQzOA=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc1NjU2MQ==", "bodyText": "I meant \"method\" not \"class\". sorry.", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r518756561", "createdAt": "2020-11-06T13:39:45Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/HadoopKerberos.java", "diffHunk": "@@ -69,4 +76,10 @@ public void extendEnvironment(Environment.Builder builder)\n             container.withCopyFileToContainer(forHostPath(configDir.getPath(\"tempto-configuration.yaml\")), CONTAINER_TEMPTO_PROFILE_CONFIG);\n         });\n     }\n+\n+    @Override\n+    public List<EnvironmentExtender> getDependencies()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTQzOA=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDMzOA==", "bodyText": "Why not just call hadoop.extend() in extendEnvironment.\n\nThat was the first approach. Notice that there might be other extendEnvironment that could also depend on hadoop, in such case haddop would be called multiple times.", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r518954338", "createdAt": "2020-11-06T19:18:33Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/HadoopKerberos.java", "diffHunk": "@@ -69,4 +76,10 @@ public void extendEnvironment(Environment.Builder builder)\n             container.withCopyFileToContainer(forHostPath(configDir.getPath(\"tempto-configuration.yaml\")), CONTAINER_TEMPTO_PROFILE_CONFIG);\n         });\n     }\n+\n+    @Override\n+    public List<EnvironmentExtender> getDependencies()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTQzOA=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1ODA2Nw==", "bodyText": "Why not just call hadoop.extend() in extendEnvironment.\n\nThat was the first approach. Notice that there might be other extendEnvironment that could also depend on hadoop, in such case haddop would be called multiple times.\n\nYeah - I was afraid that is the case.", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r519158067", "createdAt": "2020-11-07T09:35:21Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/HadoopKerberos.java", "diffHunk": "@@ -69,4 +76,10 @@ public void extendEnvironment(Environment.Builder builder)\n             container.withCopyFileToContainer(forHostPath(configDir.getPath(\"tempto-configuration.yaml\")), CONTAINER_TEMPTO_PROFILE_CONFIG);\n         });\n     }\n+\n+    @Override\n+    public List<EnvironmentExtender> getDependencies()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0OTQzOA=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzgzMDI5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDowNzoxNlrOHvnVlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo1OTowNlrOHwUyhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY4OTYyMg==", "bodyText": "According to\nhttps://github.com/prestosql/presto/blob/0816357bb0a6fd6681f8942b94fbc79d9f2c21a8/presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentModule.java#L52-L60\nEnvironmentExtenders are not bound as singletons. So this probably would not work. Can we somehow ensure (via test for example) proper validation for that?", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r519689622", "createdAt": "2020-11-09T10:07:16Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentProvider.java", "diffHunk": "@@ -45,14 +47,18 @@ protected EnvironmentProvider(List<EnvironmentExtender> bases)\n                 .add(environmentConfig)\n                 .build();\n \n-        String extendersNames = extenders.stream()\n-                .map(Object::getClass)\n-                .map(Class::getSimpleName)\n-                .collect(joining(\", \"));\n-\n-        log.info(\"Building environment %s with extenders: %s\", builder.getEnvironmentName(), extendersNames);\n-\n-        extenders.forEach(extender -> extender.extendEnvironment(builder));\n+        Set<EnvironmentExtender> seen = newSetFromMap(new IdentityHashMap<>());\n+        extenders.forEach(extender -> extend(extender, builder, seen));\n         return builder;\n     }\n+\n+    private void extend(EnvironmentExtender extender, Environment.Builder builder, Set<EnvironmentExtender> seen)\n+    {\n+        extender.getDependencies()\n+                .forEach(dependencyExtender -> extend(dependencyExtender, builder, seen));\n+        if (seen.add(extender)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNzE0MQ==", "bodyText": "+1", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r520127141", "createdAt": "2020-11-09T21:20:15Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentProvider.java", "diffHunk": "@@ -45,14 +47,18 @@ protected EnvironmentProvider(List<EnvironmentExtender> bases)\n                 .add(environmentConfig)\n                 .build();\n \n-        String extendersNames = extenders.stream()\n-                .map(Object::getClass)\n-                .map(Class::getSimpleName)\n-                .collect(joining(\", \"));\n-\n-        log.info(\"Building environment %s with extenders: %s\", builder.getEnvironmentName(), extendersNames);\n-\n-        extenders.forEach(extender -> extender.extendEnvironment(builder));\n+        Set<EnvironmentExtender> seen = newSetFromMap(new IdentityHashMap<>());\n+        extenders.forEach(extender -> extend(extender, builder, seen));\n         return builder;\n     }\n+\n+    private void extend(EnvironmentExtender extender, Environment.Builder builder, Set<EnvironmentExtender> seen)\n+    {\n+        extender.getDependencies()\n+                .forEach(dependencyExtender -> extend(dependencyExtender, builder, seen));\n+        if (seen.add(extender)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY4OTYyMg=="}, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNDMxMA==", "bodyText": "So no validataion ? :/", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r520434310", "createdAt": "2020-11-10T09:59:06Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentProvider.java", "diffHunk": "@@ -45,14 +47,18 @@ protected EnvironmentProvider(List<EnvironmentExtender> bases)\n                 .add(environmentConfig)\n                 .build();\n \n-        String extendersNames = extenders.stream()\n-                .map(Object::getClass)\n-                .map(Class::getSimpleName)\n-                .collect(joining(\", \"));\n-\n-        log.info(\"Building environment %s with extenders: %s\", builder.getEnvironmentName(), extendersNames);\n-\n-        extenders.forEach(extender -> extender.extendEnvironment(builder));\n+        Set<EnvironmentExtender> seen = newSetFromMap(new IdentityHashMap<>());\n+        extenders.forEach(extender -> extend(extender, builder, seen));\n         return builder;\n     }\n+\n+    private void extend(EnvironmentExtender extender, Environment.Builder builder, Set<EnvironmentExtender> seen)\n+    {\n+        extender.getDependencies()\n+                .forEach(dependencyExtender -> extend(dependencyExtender, builder, seen));\n+        if (seen.add(extender)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY4OTYyMg=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzAyNTQ1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTozNjoxOVrOHwYjRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTozNjoxOVrOHwYjRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ5NTk0Mw==", "bodyText": "The sense of previous code was to log message lazy (when the environment is built, not when compose is called)", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r520495943", "createdAt": "2020-11-10T11:36:19Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentProvider.java", "diffHunk": "@@ -46,20 +45,14 @@ protected EnvironmentProvider(List<EnvironmentExtender> bases)\n                 .add(environmentConfig)\n                 .build();\n \n-        compose(extenders).extendEnvironment(builder);\n-        return builder;\n-    }\n-\n-    static EnvironmentExtender compose(Iterable<EnvironmentExtender> extenders)\n-    {\n-        String extendersNames = StreamSupport.stream(extenders.spliterator(), false)\n+        String extendersNames = extenders.stream()\n                 .map(Object::getClass)\n                 .map(Class::getSimpleName)\n                 .collect(joining(\", \"));\n \n-        return builder -> {\n-            log.info(\"Building environment %s with extenders: %s\", builder.getEnvironmentName(), extendersNames);\n-            extenders.forEach(extender -> extender.extendEnvironment(builder));\n-        };\n+        log.info(\"Building environment %s with extenders: %s\", builder.getEnvironmentName(), extendersNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzA0MjcwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/EnvironmentExtender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0MToyMVrOHwYuFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo1OTowMVrOHwZS0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ5ODcwOQ==", "bodyText": "Can we document in which order extenders are applied to Environment.Builder ?\ndependencies, this or this, dependencies ?", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r520498709", "createdAt": "2020-11-10T11:41:21Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/EnvironmentExtender.java", "diffHunk": "@@ -13,9 +13,17 @@\n  */\n package io.prestosql.tests.product.launcher.env.common;\n \n+import com.google.common.collect.ImmutableList;\n import io.prestosql.tests.product.launcher.env.Environment;\n \n+import java.util.List;\n+\n public interface EnvironmentExtender\n {\n     void extendEnvironment(Environment.Builder builder);\n+\n+    default List<EnvironmentExtender> getDependencies()\n+    {\n+        return ImmutableList.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwODExNQ==", "bodyText": "as javadoc?", "url": "https://github.com/trinodb/trino/pull/5489#discussion_r520508115", "createdAt": "2020-11-10T11:59:01Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/EnvironmentExtender.java", "diffHunk": "@@ -13,9 +13,17 @@\n  */\n package io.prestosql.tests.product.launcher.env.common;\n \n+import com.google.common.collect.ImmutableList;\n import io.prestosql.tests.product.launcher.env.Environment;\n \n+import java.util.List;\n+\n public interface EnvironmentExtender\n {\n     void extendEnvironment(Environment.Builder builder);\n+\n+    default List<EnvironmentExtender> getDependencies()\n+    {\n+        return ImmutableList.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ5ODcwOQ=="}, "originalCommit": null, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4653, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}