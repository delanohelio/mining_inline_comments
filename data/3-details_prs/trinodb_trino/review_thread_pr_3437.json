{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjA3ODc2", "number": 3437, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1NjoyMVrODx-msg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDozMDowMlrOD3bsjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzMyNTMwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1NjoyMVrOGFwOxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoyODozMFrOGJvM6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjI3OQ==", "bodyText": "Why use a Future here?", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408686279", "createdAt": "2020-04-15T08:56:21Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));\n+                result.get(5, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjQ2OQ==", "bodyText": "To have an option to timeout. If hive is configured with no compactor threads, then this query will never return.", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408702469", "createdAt": "2020-04-15T09:23:08Z", "author": {"login": "shubhamtagra"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));\n+                result.get(5, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjI3OQ=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NDk0MQ==", "bodyText": "we usually use @Test(timeout= for  this", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408764941", "createdAt": "2020-04-15T11:15:59Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));\n+                result.get(5, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjI3OQ=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2MzcyMw==", "bodyText": "used timeout", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r412863723", "createdAt": "2020-04-22T10:28:30Z", "author": {"login": "shubhamtagra"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));\n+                result.get(5, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjI3OQ=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzMyODE1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1NzowM1rOGFwQlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoyOToyN1rOGJvPQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ==", "bodyText": "upper case SQL keywords (and 'minor' too)", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408686741", "createdAt": "2020-04-15T08:57:03Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjgzOQ==", "bodyText": "should we test with MAJOR compaction too?", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408686839", "createdAt": "2020-04-15T08:57:13Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMzAzNA==", "bodyText": "will do.\nI didnt add major compaction tests as they were not in the context of this fix. Should I add them in the same commit or a separate one?", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408703034", "createdAt": "2020-04-15T09:24:02Z", "author": {"login": "shubhamtagra"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTI2NQ==", "bodyText": "can be in one", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408765265", "createdAt": "2020-04-15T11:16:40Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NjAxMA==", "bodyText": "i would consider adding an additional enum parameter to test methods like\nenum Compaction { NONE, MINOR, MAJOR }\n\nso that the test code remains shorter, not \"an epic story\" testing various cases one by one", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408766010", "createdAt": "2020-04-15T11:18:08Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3MjQ3Mg==", "bodyText": "That would increase the number of tests three times and each of these tests is time taking so overall increase in test suite runtime will be considerable. Is that okay @findepi ?", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r409372472", "createdAt": "2020-04-16T08:24:20Z", "author": {"login": "shubhamtagra"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MzQwMQ==", "bodyText": "Thanks for raising this up. How many seconds will this add?", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r409493401", "createdAt": "2020-04-16T11:48:17Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MzM2OQ==", "bodyText": "In current PR runs (https://github.com/prestosql/presto/pull/3437/checks?check_run_id=588238426), 16 tests of testReadFullAcid took 8minutes. It would almost triple.", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r409683369", "createdAt": "2020-04-16T16:18:28Z", "author": {"login": "shubhamtagra"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2NDMyMA==", "bodyText": "Handled casing but left out Compaction as new test parameter, instead added major and minor compaction tests in method", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r412864320", "createdAt": "2020-04-22T10:29:27Z", "author": {"login": "shubhamtagra"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTMyNzAzOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyMDozNVrOGGD1Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDozMDowM1rOGJvQ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzQ0Nw==", "bodyText": "The extra parentheses are not needed.  Also I would flip the && and do the > 0 first", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r409007447", "createdAt": "2020-04-15T17:20:35Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -133,7 +133,7 @@ public Stripe readStripe(StripeInformation stripe, AggregatedMemoryContext syste\n \n         // handle stripes with more than one row group\n         boolean invalidCheckPoint = false;\n-        if (stripe.getNumberOfRows() > rowsInRowGroup) {\n+        if ((stripe.getNumberOfRows() > rowsInRowGroup) && rowsInRowGroup > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwOTY5NQ==", "bodyText": "There are two other uses of rowsInRowGroup in this file, in the createRowGroups and selectRowGroups methods, which are only called from this if block.  Add checkState calls to both of those methods, so it is clear they should not be used in this case.", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r409009695", "createdAt": "2020-04-15T17:24:23Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -133,7 +133,7 @@ public Stripe readStripe(StripeInformation stripe, AggregatedMemoryContext syste\n \n         // handle stripes with more than one row group\n         boolean invalidCheckPoint = false;\n-        if (stripe.getNumberOfRows() > rowsInRowGroup) {\n+        if ((stripe.getNumberOfRows() > rowsInRowGroup) && rowsInRowGroup > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzQ0Nw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDUzNA==", "bodyText": "Consider making rowsInRowGroup as OptionalInt, so it is super clear to future maintainers that this value may not be provided.", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r409010534", "createdAt": "2020-04-15T17:25:52Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -133,7 +133,7 @@ public Stripe readStripe(StripeInformation stripe, AggregatedMemoryContext syste\n \n         // handle stripes with more than one row group\n         boolean invalidCheckPoint = false;\n-        if (stripe.getNumberOfRows() > rowsInRowGroup) {\n+        if ((stripe.getNumberOfRows() > rowsInRowGroup) && rowsInRowGroup > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzQ0Nw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2NDcyMw==", "bodyText": "Done. Handled all three comments.", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r412864723", "createdAt": "2020-04-22T10:30:03Z", "author": {"login": "shubhamtagra"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -133,7 +133,7 @@ public Stripe readStripe(StripeInformation stripe, AggregatedMemoryContext syste\n \n         // handle stripes with more than one row group\n         boolean invalidCheckPoint = false;\n-        if (stripe.getNumberOfRows() > rowsInRowGroup) {\n+        if ((stripe.getNumberOfRows() > rowsInRowGroup) && rowsInRowGroup > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzQ0Nw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDUwNTc0OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoyMzo1MFrOGNrz0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDoyMzozOVrOGNvRXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjQ1MA==", "bodyText": "Maybe do this instead:\nint rowsInRowGroup = this.rowsInRowGroup.orElseThrow(() -> new IllegalStateException(\"Cannot create row groups if row group info is missing\"))\nThen the code below doesn't need to change.", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r417002450", "createdAt": "2020-04-29T00:23:50Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -332,12 +333,13 @@ private InputStreamSources createDictionaryStreamSources(Map<StreamId, Stream> s\n             ColumnMetadata<ColumnEncoding> encodings)\n             throws InvalidCheckpointException\n     {\n+        checkState(rowsInRowGroup.isPresent(), \"Cannot create row groups if row group info is missing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1OTE2Nw==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r417059167", "createdAt": "2020-04-29T04:23:39Z", "author": {"login": "shubhamtagra"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -332,12 +333,13 @@ private InputStreamSources createDictionaryStreamSources(Map<StreamId, Stream> s\n             ColumnMetadata<ColumnEncoding> encodings)\n             throws InvalidCheckpointException\n     {\n+        checkState(rowsInRowGroup.isPresent(), \"Cannot create row groups if row group info is missing\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjQ1MA=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDUwNjA4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoyMzo1N1rOGNrz_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDoyMzo0NlrOGNvRcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjQ5NA==", "bodyText": "Same here", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r417002494", "createdAt": "2020-04-29T00:23:57Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -438,13 +440,15 @@ static boolean isIndexStream(Stream stream)\n \n     private Set<Integer> selectRowGroups(StripeInformation stripe, Map<StreamId, List<RowGroupIndex>> columnIndexes)\n     {\n+        checkState(rowsInRowGroup.isPresent(), \"Cannot create row groups if row group info is missing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1OTE4Ng==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r417059186", "createdAt": "2020-04-29T04:23:46Z", "author": {"login": "shubhamtagra"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -438,13 +440,15 @@ static boolean isIndexStream(Stream stream)\n \n     private Set<Integer> selectRowGroups(StripeInformation stripe, Map<StreamId, List<RowGroupIndex>> columnIndexes)\n     {\n+        checkState(rowsInRowGroup.isPresent(), \"Cannot create row groups if row group info is missing\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjQ5NA=="}, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDUyMDQ1OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/metadata/Footer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDozMDowMlrOGNr78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDoyNDowOVrOGNvRxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNDUzMA==", "bodyText": "Change the argument type instead. That will make it clear in the metadata reader that there is something special about zero.  Then lets verify the value in the optional is at least 1. Something like:\nrowsInRowGroup.ifPresent(value -> checkArgument(value > 0, \"rowsInRowGroup must be at least 1\"));", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r417004530", "createdAt": "2020-04-29T00:30:02Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/metadata/Footer.java", "diffHunk": "@@ -45,7 +46,7 @@ public Footer(\n             Map<String, Slice> userMetadata)\n     {\n         this.numberOfRows = numberOfRows;\n-        this.rowsInRowGroup = rowsInRowGroup;\n+        this.rowsInRowGroup = rowsInRowGroup == 0 ? OptionalInt.empty() : OptionalInt.of(rowsInRowGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1OTI3MQ==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r417059271", "createdAt": "2020-04-29T04:24:09Z", "author": {"login": "shubhamtagra"}, "path": "presto-orc/src/main/java/io/prestosql/orc/metadata/Footer.java", "diffHunk": "@@ -45,7 +46,7 @@ public Footer(\n             Map<String, Slice> userMetadata)\n     {\n         this.numberOfRows = numberOfRows;\n-        this.rowsInRowGroup = rowsInRowGroup;\n+        this.rowsInRowGroup = rowsInRowGroup == 0 ? OptionalInt.empty() : OptionalInt.of(rowsInRowGroup);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNDUzMA=="}, "originalCommit": null, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 143, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}