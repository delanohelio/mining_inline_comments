{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDkzNzI5", "number": 2975, "title": "Reduce instance size and block copies in Page class", "bodyText": "Refactors Page internals to avoid extra allocations and copies. Fields didn't require AtomicLong semantics and simple volatile fields reduce per page GC pressure and retained size. Additionally, trusted methods in page needn't invoke Block[] copies in the Page constructor. Finally, no valid reason should exist for subclassing Page, so making the class final should be safe and can yield earlier inlining to usage sites.", "createdAt": "2020-03-01T20:57:13Z", "url": "https://github.com/trinodb/trino/pull/2975", "merged": true, "mergeCommit": {"oid": "511cf18a360f4d4e0f649ee7ad4924dcf207bb9b"}, "closed": true, "closedAt": "2020-04-06T19:56:51Z", "author": {"login": "pettyjamesm"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJsNZBgFqTM2NzEzNDk4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVD8ayAFqTM4ODU1NjAxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MTM0OTgy", "url": "https://github.com/trinodb/trino/pull/2975#pullrequestreview-367134982", "createdAt": "2020-03-02T11:40:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMTo0MDoyNFrOFwcjhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMTo0MToyMlrOFwclSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MzgxNA==", "bodyText": "does this bring any performance benefits? I think it's negligible optimization and can be removed", "url": "https://github.com/trinodb/trino/pull/2975#discussion_r386343814", "createdAt": "2020-03-02T11:40:24Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/Page.java", "diffHunk": "@@ -23,35 +23,38 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicLong;\n \n import static io.airlift.slice.SizeOf.sizeOf;\n import static io.prestosql.spi.block.DictionaryId.randomDictionaryId;\n import static java.lang.Math.min;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n-public class Page\n+public final class Page\n {\n-    public static final int INSTANCE_SIZE = ClassLayout.parseClass(Page.class).instanceSize() +\n-            (3 * ClassLayout.parseClass(AtomicLong.class).instanceSize());\n+    public static final int INSTANCE_SIZE = ClassLayout.parseClass(Page.class).instanceSize();\n \n     private final Block[] blocks;\n     private final int positionCount;\n-    private final AtomicLong sizeInBytes = new AtomicLong(-1);\n-    private final AtomicLong retainedSizeInBytes = new AtomicLong(-1);\n-    private final AtomicLong logicalSizeInBytes = new AtomicLong(-1);\n+    private volatile long sizeInBytes = -1;\n+    private volatile long retainedSizeInBytes = -1;\n+    private volatile long logicalSizeInBytes = -1;\n \n     public Page(Block... blocks)\n     {\n-        this(determinePositionCount(blocks), blocks);\n+        this(true, determinePositionCount(blocks), blocks);\n     }\n \n     public Page(int positionCount, Block... blocks)\n+    {\n+        this(true, positionCount, blocks);\n+    }\n+\n+    private Page(boolean blocksCopyRequired, int positionCount, Block[] blocks)\n     {\n         requireNonNull(blocks, \"blocks is null\");\n-        this.blocks = Arrays.copyOf(blocks, blocks.length);\n         this.positionCount = positionCount;\n+        this.blocks = blocksCopyRequired ? blocks.clone() : blocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0NDI2Ng==", "bodyText": "undo", "url": "https://github.com/trinodb/trino/pull/2975#discussion_r386344266", "createdAt": "2020-03-02T11:41:22Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/Page.java", "diffHunk": "@@ -311,16 +317,17 @@ public Page prependColumn(Block column)\n         result[0] = column;\n         System.arraycopy(blocks, 0, result, 1, blocks.length);\n \n-        return new Page(positionCount, result);\n+        return new Page(false, positionCount, result);\n     }\n \n-    private void updateRetainedSize()\n+    private long updateRetainedSize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 155}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjM4MTA5", "url": "https://github.com/trinodb/trino/pull/2975#pullrequestreview-387638109", "createdAt": "2020-04-03T23:52:26Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo1MjoyN1rOGAs12g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo1MjoyN1rOGAs12g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4Nzg2Ng==", "bodyText": "Can you merge this commit into the last one, rename this method to wrapBlocksWithoutCopy, and then use this method in page instead of the constructor. I think this will make the Page code more readable because it will clearly state the intent to avoid the extra copy.", "url": "https://github.com/trinodb/trino/pull/2975#discussion_r403387866", "createdAt": "2020-04-03T23:52:27Z", "author": {"login": "dain"}, "path": "presto-spi/src/main/java/io/prestosql/spi/Page.java", "diffHunk": "@@ -34,6 +34,15 @@\n {\n     public static final int INSTANCE_SIZE = ClassLayout.parseClass(Page.class).instanceSize();\n \n+    /**\n+     * Visible to give trusted classes like {@link PageBuilder} access to a constructor that doesn't\n+     * defensively copy the blocks\n+     */\n+    static Page ofBlocksWithoutCopy(int positionCount, Block[] blocks)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbb3b75b5bc6052c38bc6634e1df8e2d6b640f27", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/fbb3b75b5bc6052c38bc6634e1df8e2d6b640f27", "committedDate": "2020-04-06T12:12:45Z", "message": "Reduce instance size and block copies in Page class\n\nRefactors Page class to avoid extra allocations and copies. Fields\ndidn't require AtomicLong semantics and simple volatile fields are\nnow used instead. Additionally, trusted methods can avoid copying\nBlock[] in the page constructor by using a new static helper method.\nFinally, no valid reason should exist for Page subclassing, so the\nclass is now final."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "fbb3b75b5bc6052c38bc6634e1df8e2d6b640f27", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/fbb3b75b5bc6052c38bc6634e1df8e2d6b640f27", "committedDate": "2020-04-06T12:12:45Z", "message": "Reduce instance size and block copies in Page class\n\nRefactors Page class to avoid extra allocations and copies. Fields\ndidn't require AtomicLong semantics and simple volatile fields are\nnow used instead. Additionally, trusted methods can avoid copying\nBlock[] in the page constructor by using a new static helper method.\nFinally, no valid reason should exist for Page subclassing, so the\nclass is now final."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTU2MDE0", "url": "https://github.com/trinodb/trino/pull/2975#pullrequestreview-388556014", "createdAt": "2020-04-06T19:34:12Z", "commit": {"oid": "fbb3b75b5bc6052c38bc6634e1df8e2d6b640f27"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1620, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}