{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTk0NDcx", "number": 5507, "title": "Add support for batching in JDBC driver", "bodyText": "Fixes #1777\nThis is initial implementation without optimization.", "createdAt": "2020-10-10T15:33:45Z", "url": "https://github.com/trinodb/trino/pull/5507", "merged": true, "mergeCommit": {"oid": "b0ec1bd71ac791a621e5d08078e8a4a7b3ce793b"}, "closed": true, "closedAt": "2020-11-11T04:24:14Z", "author": {"login": "ebyhr"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRN5_HgFqTUwNjExMTkwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbTgzagBqjM5ODE2Mzg0MjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTExOTA0", "url": "https://github.com/trinodb/trino/pull/5507#pullrequestreview-506111904", "createdAt": "2020-10-10T17:02:32Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzowMjozMlrOHfhHkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzowNToxOFrOHfhIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMDUxNQ==", "bodyText": "Here we could make map into a list, and verify right number and right positions of parameters were set", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r502810515", "createdAt": "2020-10-10T17:02:32Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +455,29 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchParameters.add(ImmutableMap.copyOf(parameters));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMDYwOQ==", "bodyText": "should clearBatch be in finally?", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r502810609", "createdAt": "2020-10-10T17:03:52Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +455,29 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchParameters.add(ImmutableMap.copyOf(parameters));\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchParameters.clear();\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        int[] batchUpdateCounts = new int[batchParameters.size()];\n+        for (int i = 0; i < batchParameters.size(); i++) {\n+            super.execute(getExecuteSql(statementName, batchParameters.get(i)));\n+            batchUpdateCounts[i] = getUpdateCount();\n+        }\n+        clearBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMDc2MQ==", "bodyText": "Use memory connector and verify the data has been inserted correctly.", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r502810761", "createdAt": "2020-10-10T17:05:18Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -263,6 +263,38 @@ public void testExecuteUpdate()\n         }\n     }\n \n+    @Test\n+    public void testExecuteBatch()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2Mzg1Njk4", "url": "https://github.com/trinodb/trino/pull/5507#pullrequestreview-506385698", "createdAt": "2020-10-12T08:08:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODowODowOFrOHfzgqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODowODowOFrOHfzgqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ==", "bodyText": "Should execute*() methods be disallowed once addBatch is called?", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r503111849", "createdAt": "2020-10-12T08:08:08Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2Mzg4MzQw", "url": "https://github.com/trinodb/trino/pull/5507#pullrequestreview-506388340", "createdAt": "2020-10-12T08:11:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxMTo0NFrOHfzosw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxMjoxOFrOHfzqMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMzkwNw==", "bodyText": "You can express this more concisely  as in\nhttps://github.com/prestosql/presto/blob/7771f046f19b868e1cde7e04876dd45d8b0647dd/presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDatabaseMetaData.java#L404\n(and then you can remove ORDER BY)", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r503113907", "createdAt": "2020-10-12T08:11:44Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -263,6 +266,47 @@ public void testExecuteUpdate()\n         }\n     }\n \n+    @Test\n+    public void testExecuteBatch()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"memory\", \"default\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_execute_batch (c_int integer)\");\n+            }\n+\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(\n+                    \"INSERT INTO test_execute_batch VALUES (?)\")) {\n+                for (int i = 0; i < 3; i++) {\n+                    preparedStatement.setInt(1, i);\n+                    preparedStatement.addBatch();\n+                }\n+                assertEquals(preparedStatement.executeBatch(), new int[]{1, 1, 1});\n+\n+                try (Statement statement = connection.createStatement()) {\n+                    ResultSet resultSet = statement.executeQuery(\"SELECT c_int FROM test_execute_batch ORDER BY 1\");\n+                    for (int i = 0; i < 3; i++) {\n+                        assertTrue(resultSet.next());\n+                        assertEquals(i, resultSet.getInt(1));\n+                    }\n+                    assertFalse(resultSet.next());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNDI4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            statement.execute(\"CREATE TABLE test_execute_batch (c_int integer)\");\n          \n          \n            \n                            statement.execute(\"CREATE TABLE test_execute_batch(c_int integer)\");", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r503114288", "createdAt": "2020-10-12T08:12:18Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -263,6 +266,47 @@ public void testExecuteUpdate()\n         }\n     }\n \n+    @Test\n+    public void testExecuteBatch()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"memory\", \"default\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_execute_batch (c_int integer)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MDIwNTU0", "url": "https://github.com/trinodb/trino/pull/5507#pullrequestreview-524020554", "createdAt": "2020-11-05T08:28:14Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODoyODoxNFrOHt4Nrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODozMDowOVrOHt4SmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2ODk3NQ==", "bodyText": "final\nTest -> Testing", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r517868975", "createdAt": "2020-11-05T08:28:14Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestJdbcUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MDIzMg==", "bodyText": "Add a test when executeBatch is called without calling addBatch first", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r517870232", "createdAt": "2020-11-05T08:30:09Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchValues.clear();\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        try {\n+            int[] batchUpdateCounts = new int[batchValues.size()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODMyMzA2", "url": "https://github.com/trinodb/trino/pull/5507#pullrequestreview-525832306", "createdAt": "2020-11-08T18:15:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxODoxNTo0MVrOHvZRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxODoxNTo0MVrOHvZRDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ1OTA4NQ==", "bodyText": "is it possible execute SQLs in batch as well instead of one by one ?\nex: in case of INSERT, one by one insertion cause small files (hive connector)", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r519459085", "createdAt": "2020-11-08T18:15:41Z", "author": {"login": "51yu"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +459,35 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));\n+        isBatch = true;\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchValues.clear();\n+        isBatch = false;\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        try {\n+            int[] batchUpdateCounts = new int[batchValues.size()];\n+            for (int i = 0; i < batchValues.size(); i++) {\n+                super.execute(getExecuteSql(statementName, batchValues.get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26f688fc2890ade741e4d3ad395515cd6f478ae7", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/26f688fc2890ade741e4d3ad395515cd6f478ae7", "committedDate": "2020-11-11T01:16:54Z", "message": "Extract utility methods in JDBC module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13658e2a77a84639500233b03e36a290be7c0508", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/13658e2a77a84639500233b03e36a290be7c0508", "committedDate": "2020-11-11T01:16:54Z", "message": "Add support for batching in JDBC driver"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "13658e2a77a84639500233b03e36a290be7c0508", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/13658e2a77a84639500233b03e36a290be7c0508", "committedDate": "2020-11-11T01:16:54Z", "message": "Add support for batching in JDBC driver"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3390, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}