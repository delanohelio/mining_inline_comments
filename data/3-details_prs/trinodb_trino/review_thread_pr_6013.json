{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNzM1OTU0", "number": 6013, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzoyMjowNFrOFAqU6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wN1QyMjozMDoyN1rOGry_0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjM3ODAyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/VarcharType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzoyMjowNFrOH_D9Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNFQwMjowMToxNFrOKdsCdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4NzE3NA==", "bodyText": "Since these are for the COMPARISON_UNORDERED_LAST operator, should we name the function name to match as well?", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r535887174", "createdAt": "2020-12-04T07:22:04Z", "author": {"login": "erichwang"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/VarcharType.java", "diffHunk": "@@ -255,13 +255,13 @@ private static long xxHash64Operator(@BlockPosition Block block, @BlockIndex int\n         return block.hash(position, 0, block.getSliceLength(position));\n     }\n \n-    @ScalarOperator(COMPARISON)\n+    @ScalarOperator(COMPARISON_UNORDERED_LAST)\n     private static long comparisonOperator(Slice left, Slice right)\n     {\n         return left.compareTo(right);\n     }\n \n-    @ScalarOperator(COMPARISON)\n+    @ScalarOperator(COMPARISON_UNORDERED_LAST)\n     private static long comparisonOperator(@BlockPosition Block leftBlock, @BlockIndex int leftPosition, @BlockPosition Block rightBlock, @BlockIndex int rightPosition)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjIxODg3MQ==", "bodyText": "These types do not have unordered values, so the concept of placing them first or last is meaning less", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r702218871", "createdAt": "2021-09-04T02:01:14Z", "author": {"login": "dain"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/VarcharType.java", "diffHunk": "@@ -255,13 +255,13 @@ private static long xxHash64Operator(@BlockPosition Block block, @BlockIndex int\n         return block.hash(position, 0, block.getSliceLength(position));\n     }\n \n-    @ScalarOperator(COMPARISON)\n+    @ScalarOperator(COMPARISON_UNORDERED_LAST)\n     private static long comparisonOperator(Slice left, Slice right)\n     {\n         return left.compareTo(right);\n     }\n \n-    @ScalarOperator(COMPARISON)\n+    @ScalarOperator(COMPARISON_UNORDERED_LAST)\n     private static long comparisonOperator(@BlockPosition Block leftBlock, @BlockIndex int leftPosition, @BlockPosition Block rightBlock, @BlockIndex int rightPosition)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4NzE3NA=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjM5MDAyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeOperators.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzoyNjowNVrOH_ED3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNFQwMjowMDozMFrOKdsCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4ODg2MQ==", "bodyText": "Are we sure that we want to provide the opposite unordered value ordering if we can't find the right one defined? That seems to suggest that a caller requesting COMPARISON_UNORDERED_FIRST for a specific type is an optional preference and not a requirement?", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r535888861", "createdAt": "2020-12-04T07:26:05Z", "author": {"login": "erichwang"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeOperators.java", "diffHunk": "@@ -245,11 +255,24 @@ private OperatorMethodHandle selectOperatorMethodHandleToAdapt(OperatorConventio\n                         return List.of(defaultIndeterminateOperator(operatorConvention.getType().getJavaType()));\n                     }\n                     return indeterminateOperators;\n-                case COMPARISON:\n+                case COMPARISON_UNORDERED_LAST:\n                     if (operatorConvention.getSortOrder().isPresent()) {\n                         return List.of(generateOrderingOperator(operatorConvention));\n                     }\n-                    return typeOperatorDeclaration.getComparisonOperators();\n+                    Collection<OperatorMethodHandle> comparisonUnorderedLastOperators = typeOperatorDeclaration.getComparisonUnorderedLastOperators();\n+                    if (comparisonUnorderedLastOperators.isEmpty()) {\n+                        return typeOperatorDeclaration.getComparisonUnorderedFirstOperators();\n+                    }\n+                    return comparisonUnorderedLastOperators;\n+                case COMPARISON_UNORDERED_FIRST:\n+                    if (operatorConvention.getSortOrder().isPresent()) {\n+                        return List.of(generateOrderingOperator(operatorConvention));\n+                    }\n+                    Collection<OperatorMethodHandle> comparisonUnorderedFirstOperators = typeOperatorDeclaration.getComparisonUnorderedFirstOperators();\n+                    if (comparisonUnorderedFirstOperators.isEmpty()) {\n+                        return typeOperatorDeclaration.getComparisonUnorderedLastOperators();\n+                    }\n+                    return comparisonUnorderedFirstOperators;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjIxODgzNA==", "bodyText": "This is common for the type operatorrs to be generated from other operators.  I this case the only difference between the two ordering is the placement of the \"unordered\" values.  Most types do not have unordered values and thus should not have multiple methods.", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r702218834", "createdAt": "2021-09-04T02:00:30Z", "author": {"login": "dain"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeOperators.java", "diffHunk": "@@ -245,11 +255,24 @@ private OperatorMethodHandle selectOperatorMethodHandleToAdapt(OperatorConventio\n                         return List.of(defaultIndeterminateOperator(operatorConvention.getType().getJavaType()));\n                     }\n                     return indeterminateOperators;\n-                case COMPARISON:\n+                case COMPARISON_UNORDERED_LAST:\n                     if (operatorConvention.getSortOrder().isPresent()) {\n                         return List.of(generateOrderingOperator(operatorConvention));\n                     }\n-                    return typeOperatorDeclaration.getComparisonOperators();\n+                    Collection<OperatorMethodHandle> comparisonUnorderedLastOperators = typeOperatorDeclaration.getComparisonUnorderedLastOperators();\n+                    if (comparisonUnorderedLastOperators.isEmpty()) {\n+                        return typeOperatorDeclaration.getComparisonUnorderedFirstOperators();\n+                    }\n+                    return comparisonUnorderedLastOperators;\n+                case COMPARISON_UNORDERED_FIRST:\n+                    if (operatorConvention.getSortOrder().isPresent()) {\n+                        return List.of(generateOrderingOperator(operatorConvention));\n+                    }\n+                    Collection<OperatorMethodHandle> comparisonUnorderedFirstOperators = typeOperatorDeclaration.getComparisonUnorderedFirstOperators();\n+                    if (comparisonUnorderedFirstOperators.isEmpty()) {\n+                        return typeOperatorDeclaration.getComparisonUnorderedLastOperators();\n+                    }\n+                    return comparisonUnorderedFirstOperators;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4ODg2MQ=="}, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjQxMTQ0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/util/MinMaxCompare.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzozMjo1MFrOH_EPSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNFQwMjowMTo0NFrOKdsC1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5MTc4Nw==", "bodyText": "You can flatten this into a 3 line ternary:\nMethodHandle handle = isMin\n  ? typeOperators.getComparisonUnorderedLastOperator(type, convention)\n  : typeOperators.getComparisonUnorderedFirstOperator(type, convention);\n\nAlso in this context, I have a slight preference for \"min\" to be called \"isMin\"", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r535891787", "createdAt": "2020-12-04T07:32:50Z", "author": {"login": "erichwang"}, "path": "presto-main/src/main/java/io/prestosql/util/MinMaxCompare.java", "diffHunk": "@@ -52,6 +53,18 @@ public static MethodHandle getMinMaxCompare(FunctionDependencies dependencies, T\n         return filterReturnValue(handle, min ? MIN_FUNCTION : MAX_FUNCTION);\n     }\n \n+    public static MethodHandle getMinMaxCompare(TypeOperators typeOperators, Type type, InvocationConvention convention, boolean min)\n+    {\n+        MethodHandle handle;\n+        if (min) {\n+            handle = typeOperators.getComparisonUnorderedLastOperator(type, convention);\n+        }\n+        else {\n+            handle = typeOperators.getComparisonUnorderedFirstOperator(type, convention);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjIxODk2Ng==", "bodyText": "I prefer the if/else when it is multiline like that", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r702218966", "createdAt": "2021-09-04T02:01:44Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/util/MinMaxCompare.java", "diffHunk": "@@ -52,6 +53,18 @@ public static MethodHandle getMinMaxCompare(FunctionDependencies dependencies, T\n         return filterReturnValue(handle, min ? MIN_FUNCTION : MAX_FUNCTION);\n     }\n \n+    public static MethodHandle getMinMaxCompare(TypeOperators typeOperators, Type type, InvocationConvention convention, boolean min)\n+    {\n+        MethodHandle handle;\n+        if (min) {\n+            handle = typeOperators.getComparisonUnorderedLastOperator(type, convention);\n+        }\n+        else {\n+            handle = typeOperators.getComparisonUnorderedFirstOperator(type, convention);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5MTc4Nw=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjQ2ODM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/TypedKeyValueHeap.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo0OTo0N1rOH_EumQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo0OTo0N1rOH_EumQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5OTgwMQ==", "bodyText": "this comment was a bit confusing to read, until i realized you meant: \"this is a greater than operator, so we swap the object order and negate the result\"\nI think using the word \"negate\" here might be a bit more clear.", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r535899801", "createdAt": "2020-12-04T07:49:47Z", "author": {"login": "erichwang"}, "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/TypedKeyValueHeap.java", "diffHunk": "@@ -218,4 +220,16 @@ private void compactIfNecessary()\n         keyBlockBuilder = newHeapKeyBlockBuilder;\n         valueBlockBuilder = newHeapValueBlockBuilder;\n     }\n+\n+    private boolean keyGreaterThanOrEqual(Block leftBlock, int leftPosition, Block rightBlock, int rightPosition)\n+    {\n+        try {\n+            // this is a greater than operator, so we swap the object order and not the result", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjUxMTU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/AbstractMinMaxNAggregationFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODowMjowNFrOH_FGkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNFQwMjozNDo1MVrOKdsP1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwNTkzOQ==", "bodyText": "Rather than hard coding this directly here, it feels a bit better to pull it out directly from the MinMaxNStateSerializer which should be the one defining this intermediate type. Maybe add a static method to MinMaxNStateSerializer to fetch this?", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r535905939", "createdAt": "2020-12-04T08:02:04Z", "author": {"login": "erichwang"}, "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/AbstractMinMaxNAggregationFunction.java", "diffHunk": "@@ -84,31 +89,36 @@ protected AbstractMinMaxNAggregationFunction(String name, Function<Type, BlockPo\n                         AGGREGATE),\n                 true,\n                 false);\n-        requireNonNull(typeToComparison);\n-        this.typeToComparator = typeToComparison;\n+        this.min = min;\n     }\n \n     @Override\n     public List<TypeSignature> getIntermediateTypes(FunctionBinding functionBinding)\n     {\n         Type type = functionBinding.getTypeVariable(\"E\");\n-        return ImmutableList.of(new MinMaxNStateSerializer(typeToComparator.apply(type), type).getSerializedType().getTypeSignature());\n+        return ImmutableList.of(RowType.anonymous(ImmutableList.of(BIGINT, type)).getTypeSignature());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjIyMjI5Mg==", "bodyText": "Ya this code is a bit of a mess.  I clean this up as part of the function refactoring code.", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r702222292", "createdAt": "2021-09-04T02:34:51Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/AbstractMinMaxNAggregationFunction.java", "diffHunk": "@@ -84,31 +89,36 @@ protected AbstractMinMaxNAggregationFunction(String name, Function<Type, BlockPo\n                         AGGREGATE),\n                 true,\n                 false);\n-        requireNonNull(typeToComparison);\n-        this.typeToComparator = typeToComparison;\n+        this.min = min;\n     }\n \n     @Override\n     public List<TypeSignature> getIntermediateTypes(FunctionBinding functionBinding)\n     {\n         Type type = functionBinding.getTypeVariable(\"E\");\n-        return ImmutableList.of(new MinMaxNStateSerializer(typeToComparator.apply(type), type).getSerializedType().getTypeSignature());\n+        return ImmutableList.of(RowType.anonymous(ImmutableList.of(BIGINT, type)).getTypeSignature());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwNTkzOQ=="}, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU0NTMyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeOperators.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxMTozOFrOH_FaHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNFQwMjo0MToyOVrOKdsSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMDk0MA==", "bodyText": "So it's interesting that the nulls ordering is handled through an operator adapter, rather than a separate operator. Would it make sense to have the unordered first/last also be an InvocationConvention as well rather than a separate operator? Not sure if that breaks anything we are trying to do here, but it seems to more closely fit the usage where we have some basic behavior for types that may need to be specialized in some cases.", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r535910940", "createdAt": "2020-12-04T08:11:38Z", "author": {"login": "erichwang"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeOperators.java", "diffHunk": "@@ -116,20 +117,29 @@ public MethodHandle getIndeterminateOperator(Type type, InvocationConvention cal\n         return getOperatorAdaptor(type, callingConvention, OperatorType.INDETERMINATE).get();\n     }\n \n-    public MethodHandle getComparisonOperator(Type type, InvocationConvention callingConvention)\n+    public MethodHandle getComparisonUnorderedLastOperator(Type type, InvocationConvention callingConvention)\n     {\n         if (!type.isOrderable()) {\n             throw new UnsupportedOperationException(type + \" is not orderable\");\n         }\n-        return getOperatorAdaptor(type, callingConvention, COMPARISON).get();\n+        return getOperatorAdaptor(type, callingConvention, COMPARISON_UNORDERED_LAST).get();\n+    }\n+\n+    public MethodHandle getComparisonUnorderedFirstOperator(Type type, InvocationConvention callingConvention)\n+    {\n+        if (!type.isOrderable()) {\n+            throw new UnsupportedOperationException(type + \" is not orderable\");\n+        }\n+        return getOperatorAdaptor(type, callingConvention, COMPARISON_UNORDERED_FIRST).get();\n     }\n \n     public MethodHandle getOrderingOperator(Type type, SortOrder sortOrder, InvocationConvention callingConvention)\n     {\n         if (!type.isOrderable()) {\n             throw new UnsupportedOperationException(type + \" is not orderable\");\n         }\n-        return getOperatorAdaptor(type, Optional.of(sortOrder), callingConvention, COMPARISON).get();\n+        OperatorType comparisonType = sortOrder.isNullsFirst() ? COMPARISON_UNORDERED_LAST : COMPARISON_UNORDERED_FIRST;\n+        return getOperatorAdaptor(type, Optional.of(sortOrder), callingConvention, comparisonType).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjIyMjk0Mw==", "bodyText": "The invocation convention is really about the shape and capabilitties of the callsite, and not really about the desired target linkage method.  Also, I expect that would be a much bigger change.", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r702222943", "createdAt": "2021-09-04T02:41:29Z", "author": {"login": "dain"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TypeOperators.java", "diffHunk": "@@ -116,20 +117,29 @@ public MethodHandle getIndeterminateOperator(Type type, InvocationConvention cal\n         return getOperatorAdaptor(type, callingConvention, OperatorType.INDETERMINATE).get();\n     }\n \n-    public MethodHandle getComparisonOperator(Type type, InvocationConvention callingConvention)\n+    public MethodHandle getComparisonUnorderedLastOperator(Type type, InvocationConvention callingConvention)\n     {\n         if (!type.isOrderable()) {\n             throw new UnsupportedOperationException(type + \" is not orderable\");\n         }\n-        return getOperatorAdaptor(type, callingConvention, COMPARISON).get();\n+        return getOperatorAdaptor(type, callingConvention, COMPARISON_UNORDERED_LAST).get();\n+    }\n+\n+    public MethodHandle getComparisonUnorderedFirstOperator(Type type, InvocationConvention callingConvention)\n+    {\n+        if (!type.isOrderable()) {\n+            throw new UnsupportedOperationException(type + \" is not orderable\");\n+        }\n+        return getOperatorAdaptor(type, callingConvention, COMPARISON_UNORDERED_FIRST).get();\n     }\n \n     public MethodHandle getOrderingOperator(Type type, SortOrder sortOrder, InvocationConvention callingConvention)\n     {\n         if (!type.isOrderable()) {\n             throw new UnsupportedOperationException(type + \" is not orderable\");\n         }\n-        return getOperatorAdaptor(type, Optional.of(sortOrder), callingConvention, COMPARISON).get();\n+        OperatorType comparisonType = sortOrder.isNullsFirst() ? COMPARISON_UNORDERED_LAST : COMPARISON_UNORDERED_FIRST;\n+        return getOperatorAdaptor(type, Optional.of(sortOrder), callingConvention, comparisonType).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMDk0MA=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ4NTMxMzc5OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/type/TypeOperators.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wN1QyMDo1MjoyOFrOKfN4Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wN1QyMDo1MjoyOFrOKfN4Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMzgyMTg5MA==", "bodyText": "Add a comment explaining why this is ok.", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r703821890", "createdAt": "2021-09-07T20:52:28Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/type/TypeOperators.java", "diffHunk": "@@ -245,11 +255,24 @@ private OperatorMethodHandle selectOperatorMethodHandleToAdapt(OperatorConventio\n                         return List.of(defaultIndeterminateOperator(operatorConvention.getType().getJavaType()));\n                     }\n                     return indeterminateOperators;\n-                case COMPARISON:\n+                case COMPARISON_UNORDERED_LAST:\n                     if (operatorConvention.getSortOrder().isPresent()) {\n                         return List.of(generateOrderingOperator(operatorConvention));\n                     }\n-                    return typeOperatorDeclaration.getComparisonOperators();\n+                    Collection<OperatorMethodHandle> comparisonUnorderedLastOperators = typeOperatorDeclaration.getComparisonUnorderedLastOperators();\n+                    if (comparisonUnorderedLastOperators.isEmpty()) {\n+                        return typeOperatorDeclaration.getComparisonUnorderedFirstOperators();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c0fa6ce7cda8c5c4a12a8ef26a6c7a4035b00f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ4NTMyODM2OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/SimplePagesHashStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wN1QyMDo1NjoyMVrOKfOBAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wN1QyMDo1NjoyMVrOKfOBAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMzgyNDEzMA==", "bodyText": "In every place where the choice is arbitrary, we should have a comment so that future readers can understand why a choice was made. Or introduce a constant or method that makes the choice of a comparison that doesn't care whether unorderable values go explicit.", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r703824130", "createdAt": "2021-09-07T20:56:21Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/operator/SimplePagesHashStrategy.java", "diffHunk": "@@ -60,7 +60,7 @@ public SimplePagesHashStrategy(\n     {\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n         this.comparisonOperators = types.stream()\n-                .map(type -> type.isOrderable() ? Optional.of(blockTypeOperators.getComparisonOperator(type)) : Optional.<BlockPositionComparison>empty())\n+                .map(type -> type.isOrderable() ? Optional.of(blockTypeOperators.getComparisonUnorderedLastOperator(type)) : Optional.<BlockPositionComparison>empty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c0fa6ce7cda8c5c4a12a8ef26a6c7a4035b00f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ4NTc2ODQ0OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/function/OperatorType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wN1QyMjoyODowM1rOKfSWWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wN1QyMjoyODowM1rOKfSWWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMzg5NTEzMA==", "bodyText": "Add some documentation about what \"unordered last/first\" means", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r703895130", "createdAt": "2021-09-07T22:28:03Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/function/OperatorType.java", "diffHunk": "@@ -22,7 +22,8 @@\n     MODULUS(\"%\", 2),\n     NEGATION(\"-\", 1),\n     EQUAL(\"=\", 2),\n-    COMPARISON(\"COMPARISON\", 2),\n+    COMPARISON_UNORDERED_LAST(\"COMPARISON_UNORDERED_LAST\", 2),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c0fa6ce7cda8c5c4a12a8ef26a6c7a4035b00f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ4NTc3NDg4OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/type/BooleanType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wN1QyMjozMDoyN1rOKfSaKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wN1QyMjozMDoyN1rOKfSaKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMzg5NjEwNg==", "bodyText": "This operator for the boolean type doesn't really deal with unordered values (since there's no such a thing for booleans), so the fact that it's being declared as \"unordered last\" is a bit misleading.", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r703896106", "createdAt": "2021-09-07T22:30:27Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/type/BooleanType.java", "diffHunk": "@@ -154,7 +154,7 @@ private static long xxHash64Operator(boolean value)\n         return value ? TRUE_XX_HASH : FALSE_XX_HASH;\n     }\n \n-    @ScalarOperator(COMPARISON)\n+    @ScalarOperator(COMPARISON_UNORDERED_LAST)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c0fa6ce7cda8c5c4a12a8ef26a6c7a4035b00f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4827, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}