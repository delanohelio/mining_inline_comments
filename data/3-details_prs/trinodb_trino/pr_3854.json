{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMTc5ODYx", "number": 3854, "title": "Add PostgreSQL and MySQL floating point type mapping tests", "bodyText": "", "createdAt": "2020-05-26T12:39:07Z", "url": "https://github.com/trinodb/trino/pull/3854", "merged": true, "mergeCommit": {"oid": "76d74457e02eb25f4facf5f53e63e95dd475d8e1"}, "closed": true, "closedAt": "2020-05-29T11:00:02Z", "author": {"login": "losipiuk"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclFCb8AFqTQxODMxMzk2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl-4tQABqjMzODYzNTMyMDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MzEzOTY0", "url": "https://github.com/trinodb/trino/pull/3854#pullrequestreview-418313964", "createdAt": "2020-05-26T13:46:47Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0Njo0N1rOGafBmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1Mjo0M1rOGafTOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNDQ3NA==", "bodyText": "It was intentionally private because of its implicit use of Object::toString.\nif someone wants this semantics, they should choose them explicitly, using the dataType(String insertType, Type prestoResultType, Function<T, String> toLiteral) overload.", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r430424474", "createdAt": "2020-05-26T13:46:47Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataType.java", "diffHunk": "@@ -197,11 +215,16 @@ public static String binaryLiteral(byte[] value)\n         return \"X'\" + base16().encode(value) + \"'\";\n     }\n \n-    private static <T> DataType<T> dataType(String insertType, Type prestoResultType)\n+    public static <T> DataType<T> dataType(String insertType, Type prestoResultType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjQ5MA==", "bodyText": "i would divide this across type boundaries instead\n    @Test\n    public void testDouble()\n    {\n        doublePrecisionFloatinPointTests(doubleDataType())\n                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_double\"));\n\n        doublePrecisionFloatinPointTests(postgreSqlDoubleDataType())\n                .execute(getQueryRunner(), postgresCreateAndInsert(\"presto_test_double\"));\n    }", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r430426490", "createdAt": "2020-05-26T13:49:30Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1259,6 +1261,44 @@ public void testMoney()\n                 .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.presto_test_money\"));\n     }\n \n+    @Test\n+    public void testPrestoCreatedFloatingPoint()\n+    {\n+        singlePrecisionFloatingPointTests(realDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_float\"));\n+        doublePrecisionFloatinPointTests(doubleDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_double\"));\n+    }\n+\n+    @Test\n+    public void testPostgresCreatedFloatingPoint()\n+    {\n+        singlePrecisionFloatingPointTests(postgreSqlRealDataType())\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_float\"));\n+        doublePrecisionFloatinPointTests(postgreSqlDoubleDataType())\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_double\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNzc3Ng==", "bodyText": "You could reuse io.prestosql.testing.datatype.DataType#doubleDataType, if you avoid nan/infinity \"constants\":\nif (Double.isNaN(value)) {\n    return \"0 / 0\";\n}\nreturn format(\"%s1 / 0\", value > 0 ? \"+\" : \"-\");\n\n(up to you)", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r430427776", "createdAt": "2020-05-26T13:51:07Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1491,4 +1531,32 @@ private static void checkIsDoubled(ZoneId zone, LocalDateTime dateTime)\n     {\n         verify(zone.getRules().getValidOffsets(dateTime).size() == 2, \"Expected %s to be doubled in %s\", dateTime, zone);\n     }\n+\n+    public static DataType<Float> postgreSqlRealDataType()\n+    {\n+        return dataType(\"real\", RealType.REAL,\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"'NaN'\";\n+                    }\n+                    return format(\"'%sInfinity'\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Double> postgreSqlDoubleDataType()\n+    {\n+        return dataType(\"double precision\", DoubleType.DOUBLE,\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"'NaN'\";\n+                    }\n+                    return format(\"'%sInfinity'\", value > 0 ? \"+\" : \"-\");\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODk4NQ==", "bodyText": "Wow... Does the user get reasonable exception message?", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r430428985", "createdAt": "2020-05-26T13:52:43Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlTypeMapping.java", "diffHunk": "@@ -464,6 +466,40 @@ private DataTypeTest jsonTestCases(DataType<String> jsonDataType)\n                 .addRoundTrip(jsonDataType, \"[]\");\n     }\n \n+    @Test\n+    public void testPrestoCreatedFloatingPoint()\n+    {\n+        singlePrecisionFloatingPointTests(realDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_float\"));\n+        doublePrecisionFloatinPointTests(doubleDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_double\"));\n+    }\n+\n+    @Test\n+    public void testMysqlCreatedFloatingPoint()\n+    {\n+        singlePrecisionFloatingPointTests(mysqlFloatDataType())\n+                .execute(getQueryRunner(), mysqlCreateAndInsert(\"tpch.mysql_test_float\"));\n+        doublePrecisionFloatinPointTests(mysqlDoubleDataType())\n+                .execute(getQueryRunner(), mysqlCreateAndInsert(\"tpch.mysql_test_double\"));\n+    }\n+\n+    private static DataTypeTest singlePrecisionFloatingPointTests(DataType<Float> floatType)\n+    {\n+        // we are not testing Nan/-Infinity/+Infinity as those are not supported by MySQL", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTAxMjA2", "url": "https://github.com/trinodb/trino/pull/3854#pullrequestreview-420101206", "createdAt": "2020-05-28T13:23:25Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyMzoyNVrOGb02gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyNToyOVrOGb078g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMDY1OQ==", "bodyText": "Adding this overload may let you simplify call sites to the existing, 4-arg overload.", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r431830659", "createdAt": "2020-05-28T13:23:25Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataType.java", "diffHunk": "@@ -202,6 +220,11 @@ public static String binaryLiteral(byte[] value)\n         return new DataType<>(insertType, prestoResultType, Object::toString, Function.identity());\n     }\n \n+    public static <T> DataType<T> dataType(String insertType, Type prestoResultType, Function<T, String> toLiteral)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMTQ5Mg==", "bodyText": "add a test exhausting precision of a float (~7 digits), to detect potential over-eager rounding", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r431831492", "createdAt": "2020-05-28T13:24:38Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1259,6 +1261,46 @@ public void testMoney()\n                 .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.presto_test_money\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        singlePrecisionFloatingPointTests(realDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_real\"));\n+\n+        singlePrecisionFloatingPointTests(postgreSqlRealDataType())\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_real\"));\n+    }\n+\n+    @Test\n+    public void testDouble()\n+    {\n+        doublePrecisionFloatinPointTests(doubleDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_double\"));\n+\n+        doublePrecisionFloatinPointTests(postgreSqlDoubleDataType())\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_double\"));\n+    }\n+\n+    private static DataTypeTest singlePrecisionFloatingPointTests(DataType<Float> floatType)\n+    {\n+        return DataTypeTest.create()\n+                .addRoundTrip(floatType, 123.45f)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMjA1MA==", "bodyText": "a varchar?\nor \"'NaN'::double\"?", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r431832050", "createdAt": "2020-05-28T13:25:29Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1491,4 +1533,32 @@ private static void checkIsDoubled(ZoneId zone, LocalDateTime dateTime)\n     {\n         verify(zone.getRules().getValidOffsets(dateTime).size() == 2, \"Expected %s to be doubled in %s\", dateTime, zone);\n     }\n+\n+    private static DataType<Float> postgreSqlRealDataType()\n+    {\n+        return dataType(\"real\", RealType.REAL,\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"'NaN'\";\n+                    }\n+                    return format(\"'%sInfinity'\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    private static DataType<Double> postgreSqlDoubleDataType()\n+    {\n+        return dataType(\"double precision\", DoubleType.DOUBLE,\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"'NaN'\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bb623801920b88b578df1638179fb15fd25cbff", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/8bb623801920b88b578df1638179fb15fd25cbff", "committedDate": "2020-05-29T08:39:01Z", "message": "Support NaN and Infinity in JDBC testing datatypes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "e14309f1493e6357b04daa8700f66065b5afb69e", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/e14309f1493e6357b04daa8700f66065b5afb69e", "committedDate": "2020-05-29T09:15:14Z", "message": "Add PostgreSQL floating point type mapping tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "848c6de3274ecf122c2845a96c287fa3f8e34bb0", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/848c6de3274ecf122c2845a96c287fa3f8e34bb0", "committedDate": "2020-05-29T09:15:14Z", "message": "Add MySQL floating point type mapping tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "848c6de3274ecf122c2845a96c287fa3f8e34bb0", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/848c6de3274ecf122c2845a96c287fa3f8e34bb0", "committedDate": "2020-05-29T09:15:14Z", "message": "Add MySQL floating point type mapping tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1286, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}