{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwOTMzNTU0", "number": 5262, "title": "Refactor dynamic filtering configs", "bodyText": "Moved dynamic filtering related configs to DynamicFilterConfig.\nAdded enable-large-dynamic-filters to allow collection of\nlarge dynamic filters.\nRemoved existing configs dynamic-filtering-max-per-driver-row-count,\ndynamic-filtering-max-per-driver-size,\ndynamic-filtering-range-row-limit-per-driver and their session\nproperties. These are replaced by new properties based on\njoin distribution type and value of enable_large_dynamic_filters.", "createdAt": "2020-09-22T13:16:57Z", "url": "https://github.com/trinodb/trino/pull/5262", "merged": true, "mergeCommit": {"oid": "38ecd82a9e90cab7a7872aaa484c9f30a1afedda"}, "closed": true, "closedAt": "2020-09-24T13:25:12Z", "author": {"login": "raunaqmorarka"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLYHutABqjM3OTMzMDcxMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdL-q-BgBqjM4MDI1MjU3MDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNTQ0MDAx", "url": "https://github.com/trinodb/trino/pull/5262#pullrequestreview-493544001", "createdAt": "2020-09-22T14:48:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo0ODozNlrOHV97ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo1NzozM1rOHV-Ysw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5Njg2Nw==", "bodyText": "let's use replicated instead of broadcast. That's how we call DFs in rest of codebase", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r492796867", "createdAt": "2020-09-22T14:48:36Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize smallBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5OTQwMg==", "bodyText": "change to:\ndynamic-filtering.small-replicated.max-row-count-per-driver\n\nand others similarly", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r492799402", "createdAt": "2020-09-22T14:51:44Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize smallBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;\n+\n+    private int largeBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize largeBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int largeBroadcastRangeRowLimitPerDriver = 10_000;\n+\n+    private int smallPartitionedMaxPerDriverRowCount = 100;\n+    private DataSize smallPartitionedMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallPartitionedRangeRowLimitPerDriver;\n+\n+    private int largePartitionedMaxPerDriverRowCount = 100;\n+    private DataSize largePartitionedMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int largePartitionedRangeRowLimitPerDriver = 10_000;\n+\n+    public boolean isEnableDynamicFiltering()\n+    {\n+        return enableDynamicFiltering;\n+    }\n+\n+    @Config(\"enable-dynamic-filtering\")\n+    @LegacyConfig(\"experimental.enable-dynamic-filtering\")\n+    public DynamicFilterConfig setEnableDynamicFiltering(boolean enableDynamicFiltering)\n+    {\n+        this.enableDynamicFiltering = enableDynamicFiltering;\n+        return this;\n+    }\n+\n+    public boolean isEnableLargeDynamicFilters()\n+    {\n+        return enableLargeDynamicFilters;\n+    }\n+\n+    @Config(\"enable-large-dynamic-filters\")\n+    public DynamicFilterConfig setEnableLargeDynamicFilters(boolean enableLargeDynamicFilters)\n+    {\n+        this.enableLargeDynamicFilters = enableLargeDynamicFilters;\n+        return this;\n+    }\n+\n+    @MinDuration(\"1ms\")\n+    @MaxDuration(\"10s\")\n+    @NotNull\n+    public Duration getDynamicFilteringRefreshInterval()\n+    {\n+        return dynamicFilteringRefreshInterval;\n+    }\n+\n+    @Config(\"experimental.dynamic-filtering-refresh-interval\")\n+    public DynamicFilterConfig setDynamicFilteringRefreshInterval(Duration dynamicFilteringRefreshInterval)\n+    {\n+        this.dynamicFilteringRefreshInterval = dynamicFilteringRefreshInterval;\n+        return this;\n+    }\n+\n+    public int getSmallBroadcastMaxPerDriverRowCount()\n+    {\n+        return smallBroadcastMaxPerDriverRowCount;\n+    }\n+\n+    @Config(\"dynamic-filtering.small-broadcast.max-per-driver-row-count\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwMzIwOA==", "bodyText": "use io.prestosql.operator.JoinUtils#isBuildSideReplicated instead (it's used in DynamicFilterService)", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r492803208", "createdAt": "2020-09-22T14:56:18Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2144,14 +2146,17 @@ private DynamicFilterSourceOperatorFactory createDynamicFilterSourceOperatorFact\n                         return new DynamicFilterSourceOperator.Channel(filterId, type, index);\n                     })\n                     .collect(Collectors.toList());\n+            boolean isReplicatedJoin = node.getDistributionType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwMzM2Nw==", "bodyText": "use io.prestosql.operator.JoinUtils#isBuildSideReplicated instead", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r492803367", "createdAt": "2020-09-22T14:56:27Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2255,14 +2260,17 @@ public PhysicalOperation visitSemiJoin(SemiJoinNode node, LocalExecutionPlanCont\n                         ImmutableMap.of(filterId, buildSource.getTypes().get(buildChannel)),\n                         partitionCount);\n                 addSuccessCallback(filterConsumer.getDynamicFilterDomains(), context::addDynamicFilter);\n+                boolean isReplicatedJoin = node.getDistributionType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNDI3NQ==", "bodyText": "keep small (replicated, repartitioned) configs together", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r492804275", "createdAt": "2020-09-22T14:57:33Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxPerDriverRowCount = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDk2MDUz", "url": "https://github.com/trinodb/trino/pull/5262#pullrequestreview-494496053", "createdAt": "2020-09-23T10:00:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDowMDowMlrOHWilWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDowMDowMlrOHWilWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM5NzMzNg==", "bodyText": "please change name to smallBroadcastMaxRowCountPerDriver. It's more English like and consistent with smallBroadcastRangeRowLimitPerDriver. Similar for other fields", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r493397336", "createdAt": "2020-09-23T10:00:02Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxPerDriverRowCount = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTA4NjE4", "url": "https://github.com/trinodb/trino/pull/5262#pullrequestreview-494508618", "createdAt": "2020-09-23T10:16:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxNjoyMlrOHWjgaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoyMzo0N1rOHWj6Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxMjQ1Nw==", "bodyText": "Please io.prestosql.testing.DistributedQueryRunner.Builder#setSingleExtraProperty instead of relying on DF defaults. Please add a comment why we need to change property in first place", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r493412457", "createdAt": "2020-09-23T10:16:22Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveDynamicPartitionPruning.java", "diffHunk": "@@ -86,7 +86,7 @@ protected Session getSession()\n         return Session.builder(super.getSession())\n                 .setSystemProperty(JOIN_REORDERING_STRATEGY, NONE.name())\n                 .setSystemProperty(JOIN_DISTRIBUTION_TYPE, PARTITIONED.name()) // Avoid node local DF\n-                .setSystemProperty(DYNAMIC_FILTERING_RANGE_ROW_LIMIT_PER_DRIVER, \"100000\")\n+                .setSystemProperty(ENABLE_LARGE_DYNAMIC_FILTERS, \"true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNDM3Mw==", "bodyText": "let's make it 5_000 rows and 100KB. That gives 80_000 rows (16x drivers) per DF. It's still more than most connectors can accept.", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r493414373", "createdAt": "2020-09-23T10:18:50Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize smallBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;\n+    private int smallPartitionedMaxPerDriverRowCount = 100;\n+    private DataSize smallPartitionedMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallPartitionedRangeRowLimitPerDriver;\n+\n+    private int largeBroadcastMaxPerDriverRowCount = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNTg3Mg==", "bodyText": "Let's make it 500 and 10KB. Essentially 10x smaller than for broadcast", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r493415872", "createdAt": "2020-09-23T10:20:19Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize smallBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;\n+    private int smallPartitionedMaxPerDriverRowCount = 100;\n+    private DataSize smallPartitionedMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallPartitionedRangeRowLimitPerDriver;\n+\n+    private int largeBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize largeBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int largeBroadcastRangeRowLimitPerDriver = 10_000;\n+    private int largePartitionedMaxPerDriverRowCount = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNjEyMQ==", "bodyText": "Let's make it 50_000.", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r493416121", "createdAt": "2020-09-23T10:20:33Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize smallBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;\n+    private int smallPartitionedMaxPerDriverRowCount = 100;\n+    private DataSize smallPartitionedMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallPartitionedRangeRowLimitPerDriver;\n+\n+    private int largeBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize largeBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int largeBroadcastRangeRowLimitPerDriver = 10_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNjg2Mw==", "bodyText": "Let's make it 5_000", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r493416863", "createdAt": "2020-09-23T10:21:21Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize smallBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;\n+    private int smallPartitionedMaxPerDriverRowCount = 100;\n+    private DataSize smallPartitionedMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int smallPartitionedRangeRowLimitPerDriver;\n+\n+    private int largeBroadcastMaxPerDriverRowCount = 100;\n+    private DataSize largeBroadcastMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int largeBroadcastRangeRowLimitPerDriver = 10_000;\n+    private int largePartitionedMaxPerDriverRowCount = 100;\n+    private DataSize largePartitionedMaxPerDriverSize = DataSize.of(10, KILOBYTE);\n+    private int largePartitionedRangeRowLimitPerDriver = 10_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxODA5Ng==", "bodyText": "change name to getDynamicFilteringMaxRowCountPerDriver (and similar to others)", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r493418096", "createdAt": "2020-09-23T10:22:45Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2925,6 +2930,48 @@ private OperatorFactory createHashAggregationOperatorFactory(\n         }\n     }\n \n+    private int getDynamicFilteringMaxPerDriverRowCount(Session session, boolean isReplicatedJoin)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxODc5Mw==", "bodyText": "make it infinite", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r493418793", "createdAt": "2020-09-23T10:23:29Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/operator/BenchmarkDynamicFilterSourceOperator.java", "diffHunk": "@@ -89,9 +87,9 @@ public void setup()\n                     new PlanNodeId(\"joinNodeId\"),\n                     (tupleDomain -> {}),\n                     ImmutableList.of(new DynamicFilterSourceOperator.Channel(new DynamicFilterId(\"0\"), BIGINT, 0)),\n-                    getDynamicFilteringMaxPerDriverRowCount(TEST_SESSION),\n-                    getDynamicFilteringMaxPerDriverSize(TEST_SESSION),\n-                    getDynamicFilteringRangeRowLimitPerDriver(TEST_SESSION));\n+                    100,\n+                    DataSize.of(10, KILOBYTE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxOTA5MA==", "bodyText": "nit: this and max range rows should be variable of benchmark", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r493419090", "createdAt": "2020-09-23T10:23:47Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/operator/BenchmarkDynamicFilterSourceOperator.java", "diffHunk": "@@ -89,9 +87,9 @@ public void setup()\n                     new PlanNodeId(\"joinNodeId\"),\n                     (tupleDomain -> {}),\n                     ImmutableList.of(new DynamicFilterSourceOperator.Channel(new DynamicFilterId(\"0\"), BIGINT, 0)),\n-                    getDynamicFilteringMaxPerDriverRowCount(TEST_SESSION),\n-                    getDynamicFilteringMaxPerDriverSize(TEST_SESSION),\n-                    getDynamicFilteringRangeRowLimitPerDriver(TEST_SESSION));\n+                    100,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzAzNjk1", "url": "https://github.com/trinodb/trino/pull/5262#pullrequestreview-495303695", "createdAt": "2020-09-24T07:48:03Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo0ODowM1rOHXN8Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo1NDozMFrOHXOLZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwNzY4Nw==", "bodyText": "make it 10MB", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r494107687", "createdAt": "2020-09-24T07:48:03Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxDistinctValuesPerDriver = 100;\n+    private DataSize smallBroadcastMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;\n+    private int smallPartitionedMaxDistinctValuesPerDriver = 100;\n+    private DataSize smallPartitionedMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int smallPartitionedRangeRowLimitPerDriver;\n+\n+    private int largeBroadcastMaxDistinctValuesPerDriver = 5_000;\n+    private DataSize largeBroadcastMaxSizePerDriver = DataSize.of(100, KILOBYTE);\n+    private int largeBroadcastRangeRowLimitPerDriver = 50_000;\n+    private int largePartitionedMaxDistinctValuesPerDriver = 500;\n+    private DataSize largePartitionedMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int largePartitionedRangeRowLimitPerDriver = 5_000;\n+\n+    public boolean isEnableDynamicFiltering()\n+    {\n+        return enableDynamicFiltering;\n+    }\n+\n+    @Config(\"enable-dynamic-filtering\")\n+    @LegacyConfig(\"experimental.enable-dynamic-filtering\")\n+    public DynamicFilterConfig setEnableDynamicFiltering(boolean enableDynamicFiltering)\n+    {\n+        this.enableDynamicFiltering = enableDynamicFiltering;\n+        return this;\n+    }\n+\n+    public boolean isEnableLargeDynamicFilters()\n+    {\n+        return enableLargeDynamicFilters;\n+    }\n+\n+    @Config(\"enable-large-dynamic-filters\")\n+    public DynamicFilterConfig setEnableLargeDynamicFilters(boolean enableLargeDynamicFilters)\n+    {\n+        this.enableLargeDynamicFilters = enableLargeDynamicFilters;\n+        return this;\n+    }\n+\n+    @MinDuration(\"1ms\")\n+    @MaxDuration(\"10s\")\n+    @NotNull\n+    public Duration getDynamicFilteringRefreshInterval()\n+    {\n+        return dynamicFilteringRefreshInterval;\n+    }\n+\n+    @Config(\"experimental.dynamic-filtering-refresh-interval\")\n+    public DynamicFilterConfig setDynamicFilteringRefreshInterval(Duration dynamicFilteringRefreshInterval)\n+    {\n+        this.dynamicFilteringRefreshInterval = dynamicFilteringRefreshInterval;\n+        return this;\n+    }\n+\n+    public int getSmallBroadcastMaxDistinctValuesPerDriver()\n+    {\n+        return smallBroadcastMaxDistinctValuesPerDriver;\n+    }\n+\n+    @Config(\"dynamic-filtering.small-broadcast.max-distinct-values-per-driver\")\n+    public DynamicFilterConfig setSmallBroadcastMaxDistinctValuesPerDriver(int smallBroadcastMaxDistinctValuesPerDriver)\n+    {\n+        this.smallBroadcastMaxDistinctValuesPerDriver = smallBroadcastMaxDistinctValuesPerDriver;\n+        return this;\n+    }\n+\n+    @MaxDataSize(\"1MB\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwODI3NA==", "bodyText": "add @Min(0) here and in others", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r494108274", "createdAt": "2020-09-24T07:49:07Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxDistinctValuesPerDriver = 100;\n+    private DataSize smallBroadcastMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;\n+    private int smallPartitionedMaxDistinctValuesPerDriver = 100;\n+    private DataSize smallPartitionedMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int smallPartitionedRangeRowLimitPerDriver;\n+\n+    private int largeBroadcastMaxDistinctValuesPerDriver = 5_000;\n+    private DataSize largeBroadcastMaxSizePerDriver = DataSize.of(100, KILOBYTE);\n+    private int largeBroadcastRangeRowLimitPerDriver = 50_000;\n+    private int largePartitionedMaxDistinctValuesPerDriver = 500;\n+    private DataSize largePartitionedMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int largePartitionedRangeRowLimitPerDriver = 5_000;\n+\n+    public boolean isEnableDynamicFiltering()\n+    {\n+        return enableDynamicFiltering;\n+    }\n+\n+    @Config(\"enable-dynamic-filtering\")\n+    @LegacyConfig(\"experimental.enable-dynamic-filtering\")\n+    public DynamicFilterConfig setEnableDynamicFiltering(boolean enableDynamicFiltering)\n+    {\n+        this.enableDynamicFiltering = enableDynamicFiltering;\n+        return this;\n+    }\n+\n+    public boolean isEnableLargeDynamicFilters()\n+    {\n+        return enableLargeDynamicFilters;\n+    }\n+\n+    @Config(\"enable-large-dynamic-filters\")\n+    public DynamicFilterConfig setEnableLargeDynamicFilters(boolean enableLargeDynamicFilters)\n+    {\n+        this.enableLargeDynamicFilters = enableLargeDynamicFilters;\n+        return this;\n+    }\n+\n+    @MinDuration(\"1ms\")\n+    @MaxDuration(\"10s\")\n+    @NotNull\n+    public Duration getDynamicFilteringRefreshInterval()\n+    {\n+        return dynamicFilteringRefreshInterval;\n+    }\n+\n+    @Config(\"experimental.dynamic-filtering-refresh-interval\")\n+    public DynamicFilterConfig setDynamicFilteringRefreshInterval(Duration dynamicFilteringRefreshInterval)\n+    {\n+        this.dynamicFilteringRefreshInterval = dynamicFilteringRefreshInterval;\n+        return this;\n+    }\n+\n+    public int getSmallBroadcastMaxDistinctValuesPerDriver()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExMTU5MQ==", "bodyText": "rename to withLargeDynamicFilters", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r494111591", "createdAt": "2020-09-24T07:54:30Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -264,7 +267,7 @@ private Session withBroadcastJoinMinMax()\n     {\n         return Session.builder(this.getQueryRunner().getDefaultSession())\n                 .setSystemProperty(JOIN_DISTRIBUTION_TYPE, BROADCAST.name())\n-                .setSystemProperty(DYNAMIC_FILTERING_RANGE_ROW_LIMIT_PER_DRIVER, \"10000\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDE2ODU0", "url": "https://github.com/trinodb/trino/pull/5262#pullrequestreview-495416854", "createdAt": "2020-09-24T10:09:12Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowOToxMlrOHXTUVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoxNDo1NlrOHXThMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NTc5Nw==", "bodyText": "Maybe call it testJoinLargeBuildSideRangeDynamicFiltering\nAlso, we are missing test case for \"too\" large build side for DFs to be collected. It would be good to restore it, but it's not critical", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r494195797", "createdAt": "2020-09-24T10:09:12Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveDynamicPartitionPruning.java", "diffHunk": "@@ -166,7 +170,7 @@ public void testJoinWithNonSelectiveBuildSide()\n     }\n \n     @Test(timeOut = 30_000)\n-    public void testJoinLargeBuildSideNoDynamicFiltering()\n+    public void testJoinLargeBuildSideDynamicFiltering()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NTkyNA==", "bodyText": "call it testSemiJoinLargeBuildSideRangeDynamicFiltering", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r494195924", "createdAt": "2020-09-24T10:09:26Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveDynamicPartitionPruning.java", "diffHunk": "@@ -298,7 +302,7 @@ public void testSemiJoinWithNonSelectiveBuildSide()\n     }\n \n     @Test(timeOut = 30_000)\n-    public void testSemiJoinLargeBuildSideNoDynamicFiltering()\n+    public void testSemiJoinLargeBuildSideDynamicFiltering()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NzQ3Mg==", "bodyText": "let's make it 500KB (5_000 / 10)", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r494197472", "createdAt": "2020-09-24T10:12:03Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxDistinctValuesPerDriver = 100;\n+    private DataSize smallBroadcastMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;\n+    private int smallPartitionedMaxDistinctValuesPerDriver = 100;\n+    private DataSize smallPartitionedMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int smallPartitionedRangeRowLimitPerDriver;\n+\n+    private int largeBroadcastMaxDistinctValuesPerDriver = 5_000;\n+    private DataSize largeBroadcastMaxSizePerDriver = DataSize.of(100, KILOBYTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NzcwNw==", "bodyText": "let's make it 50KB (500/10)", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r494197707", "createdAt": "2020-09-24T10:12:30Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/DynamicFilterConfig.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.DefunctConfig;\n+import io.airlift.configuration.LegacyConfig;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MaxDataSize;\n+import io.airlift.units.MaxDuration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+import static io.airlift.units.DataSize.Unit.KILOBYTE;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@DefunctConfig({\n+        \"dynamic-filtering-max-per-driver-row-count\",\n+        \"experimental.dynamic-filtering-max-per-driver-row-count\",\n+        \"dynamic-filtering-max-per-driver-size\",\n+        \"experimental.dynamic-filtering-max-per-driver-size\",\n+        \"dynamic-filtering-range-row-limit-per-driver\"\n+})\n+public class DynamicFilterConfig\n+{\n+    private boolean enableDynamicFiltering = true;\n+    private boolean enableLargeDynamicFilters;\n+    private Duration dynamicFilteringRefreshInterval = new Duration(200, MILLISECONDS);\n+\n+    private int smallBroadcastMaxDistinctValuesPerDriver = 100;\n+    private DataSize smallBroadcastMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int smallBroadcastRangeRowLimitPerDriver;\n+    private int smallPartitionedMaxDistinctValuesPerDriver = 100;\n+    private DataSize smallPartitionedMaxSizePerDriver = DataSize.of(10, KILOBYTE);\n+    private int smallPartitionedRangeRowLimitPerDriver;\n+\n+    private int largeBroadcastMaxDistinctValuesPerDriver = 5_000;\n+    private DataSize largeBroadcastMaxSizePerDriver = DataSize.of(100, KILOBYTE);\n+    private int largeBroadcastRangeRowLimitPerDriver = 50_000;\n+    private int largePartitionedMaxDistinctValuesPerDriver = 500;\n+    private DataSize largePartitionedMaxSizePerDriver = DataSize.of(10, KILOBYTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5OTA4OA==", "bodyText": "rename to maxDistinctValuesCount", "url": "https://github.com/trinodb/trino/pull/5262#discussion_r494199088", "createdAt": "2020-09-24T10:14:56Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/operator/BenchmarkDynamicFilterSourceOperator.java", "diffHunk": "@@ -79,16 +85,20 @@ public void setup()\n             executor = newCachedThreadPool(daemonThreadsNamed(\"test-executor-%s\"));\n             scheduledExecutor = newScheduledThreadPool(2, daemonThreadsNamed(\"test-scheduledExecutor-%s\"));\n \n-            pages = createInputPages(Integer.valueOf(positionsPerPage));\n+            pages = createInputPages(positionsPerPage);\n+\n+            String[] limits = collectionLimits.split(\",\", 2);\n+            int maxFilterPositionsCount = Integer.parseInt(limits[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16206b99e47082c22a177224b667503c7bd77bcb", "author": {"user": {"login": "raunaqmorarka", "name": "Raunaq Morarka"}}, "url": "https://github.com/trinodb/trino/commit/16206b99e47082c22a177224b667503c7bd77bcb", "committedDate": "2020-09-24T10:28:32Z", "message": "Refactor dynamic filtering configs\n\nMoved dynamic filtering related configs to DynamicFilterConfig.\nAdded enable-large-dynamic-filters to allow collection of\nlarge dynamic filters.\nRemoved existing configs dynamic-filtering-max-per-driver-row-count,\ndynamic-filtering-max-per-driver-size,\ndynamic-filtering-range-row-limit-per-driver and their session\nproperties. These are replaced by new properties based on\njoin distribution type and value of enable_large_dynamic_filters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a745094cbbf4087c9d43a2a6362c5fce1fd2a54b", "author": {"user": {"login": "raunaqmorarka", "name": "Raunaq Morarka"}}, "url": "https://github.com/trinodb/trino/commit/a745094cbbf4087c9d43a2a6362c5fce1fd2a54b", "committedDate": "2020-09-24T10:28:39Z", "message": "Update BenchmarkDynamicFilterSourceOperator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a745094cbbf4087c9d43a2a6362c5fce1fd2a54b", "author": {"user": {"login": "raunaqmorarka", "name": "Raunaq Morarka"}}, "url": "https://github.com/trinodb/trino/commit/a745094cbbf4087c9d43a2a6362c5fce1fd2a54b", "committedDate": "2020-09-24T10:28:39Z", "message": "Update BenchmarkDynamicFilterSourceOperator"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3729, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}