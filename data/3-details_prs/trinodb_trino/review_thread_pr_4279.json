{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTYyNzAx", "number": 4279, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo0MDo0NFrOEKDsdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0OTo0OFrOEQm1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTgxNzQ5OnYy", "diffSide": "LEFT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveLocationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo0MDo0NFrOGq4ZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo0ODowMlrOGq4nkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYxNzMxNw==", "bodyText": "sigh. i wish orElse had longer name, so that it would be simply more convenient to call orElseGet.\nI guess you can find many places like that in the codebase.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r447617317", "createdAt": "2020-06-30T11:40:44Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveLocationService.java", "diffHunk": "@@ -55,7 +55,7 @@ public HiveLocationService(HdfsEnvironment hdfsEnvironment)\n     public LocationHandle forNewTable(SemiTransactionalHiveMetastore metastore, ConnectorSession session, String schemaName, String tableName, Optional<Path> externalLocation)\n     {\n         HdfsContext context = new HdfsContext(session, schemaName, tableName);\n-        Path targetPath = externalLocation.orElse(getTableDefaultLocation(context, metastore, hdfsEnvironment, schemaName, tableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyMTAwOQ==", "bodyText": "I'll add tests to exercise this check later - meanwhile you can ignore this PR. So true about Optional, I myself was surprised seeing this behaviour.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r447621009", "createdAt": "2020-06-30T11:48:02Z", "author": {"login": "hashhar"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveLocationService.java", "diffHunk": "@@ -55,7 +55,7 @@ public HiveLocationService(HdfsEnvironment hdfsEnvironment)\n     public LocationHandle forNewTable(SemiTransactionalHiveMetastore metastore, ConnectorSession session, String schemaName, String tableName, Optional<Path> externalLocation)\n     {\n         HdfsContext context = new HdfsContext(session, schemaName, tableName);\n-        Path targetPath = externalLocation.orElse(getTableDefaultLocation(context, metastore, hdfsEnvironment, schemaName, tableName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYxNzMxNw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjgxODA3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestExternalHiveTable.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTowODowNFrOGzO_xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxMzoyMToxM1rOGzoOrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjI2Mg==", "bodyText": "this fails on CI\n2020-07-11T18:47:14.9602286Z tests               | io.prestosql.tempto.query.QueryExecutionException: java.sql.SQLException: Query failed (#20200711_184714_00781_asknk): Writes to non-managed Hive tables is disabled\n\nsadly, we would need a separate environment with different hive.properties unlocking this...\nas this requires quite a few steps, and I am not sure of how much added value this actually brings,\ni would be OK taking a step back and not doing a test at all cc @kokosing @electrum\n(sorry, i didnt foreseen this earlier)\nif we want to go with a test, i can provide necessary guidance.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r456376262", "createdAt": "2020-07-17T11:08:04Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestExternalHiveTable.java", "diffHunk": "@@ -46,6 +53,27 @@ public Requirement getRequirements(Configuration configuration)\n                 mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY));\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithInaccessibleSchemaLocation()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzU0Nw==", "bodyText": "I think a test would be good and can be done if does not complicate the CI too much and is as simple as adding a new pt-config.\nOr we can add a hidden session property (there's already more of those - like query_max_stages) to bypass for the test if we absolutely need a test.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r456433547", "createdAt": "2020-07-17T13:13:52Z", "author": {"login": "hashhar"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestExternalHiveTable.java", "diffHunk": "@@ -46,6 +53,27 @@ public Requirement getRequirements(Configuration configuration)\n                 mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY));\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithInaccessibleSchemaLocation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjI2Mg=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc4OTY3OA==", "bodyText": "Or we can add a hidden session property (there's already more of those - like query_max_stages) to bypass for the test if we absolutely need a test.\n\nI guess you figured this could be a security issue.\n\nI think a test would be good and can be done if does not complicate the CI too much and is as simple as adding a new pt-config.\n\nnot a pt config.\nrather, a new environment, similar to singlenode but allowing to create/write external tables\n(singlenode-with-writes-to-external ?)\nThen you'd add an invocation of test run to a suite 1/2/3 or 5.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r456789678", "createdAt": "2020-07-18T13:21:13Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestExternalHiveTable.java", "diffHunk": "@@ -46,6 +53,27 @@ public Requirement getRequirements(Configuration configuration)\n                 mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY));\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithInaccessibleSchemaLocation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjI2Mg=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjgxODI3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestExternalHiveTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTowODowOVrOGzO_8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyMjoyMFrOGzSx0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjMwNA==", "bodyText": "The temp dir is local in the tests' containers, so it can as well not exist at all, am i right?", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r456376304", "createdAt": "2020-07-17T11:08:09Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestExternalHiveTable.java", "diffHunk": "@@ -46,6 +53,27 @@ public Requirement getRequirements(Configuration configuration)\n                 mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY));\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithInaccessibleSchemaLocation()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzODIyNg==", "bodyText": "Hmmmm, good point, not sure if this step is even needed. I'll need to verify though.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r456438226", "createdAt": "2020-07-17T13:22:20Z", "author": {"login": "hashhar"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestExternalHiveTable.java", "diffHunk": "@@ -46,6 +53,27 @@ public Requirement getRequirements(Configuration configuration)\n                 mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY));\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithInaccessibleSchemaLocation()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjMwNA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzQxOTQ1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeWithWritesToExternal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzo0NjozN1rOG0sIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NjozNFrOG1JJCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwMjI3OA==", "bodyText": "Instead of creating new environment, can you define new catalog (like hive_with_writes_to_external) in existing environment?", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r457902278", "createdAt": "2020-07-21T07:46:37Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeWithWritesToExternal.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import io.prestosql.tests.product.launcher.env.common.TestsEnvironment;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.utility.MountableFile.forHostPath;\n+\n+@TestsEnvironment\n+public final class SinglenodeWithWritesToExternal\n+        extends AbstractEnvironmentProvider\n+{\n+    private final DockerFiles dockerFiles;\n+\n+    @Inject\n+    public SinglenodeWithWritesToExternal(DockerFiles dockerFiles, Standard standard, Hadoop hadoop)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath(\"conf/environment/singlenode-with-writes-to-external/hive.properties\")), CONTAINER_PRESTO_HIVE_PROPERTIES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NzQ4Mg==", "bodyText": "Done. This simplified the tests a lot. Thanks for suggesting.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r458377482", "createdAt": "2020-07-21T20:46:34Z", "author": {"login": "hashhar"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeWithWritesToExternal.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import io.prestosql.tests.product.launcher.env.common.TestsEnvironment;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.utility.MountableFile.forHostPath;\n+\n+@TestsEnvironment\n+public final class SinglenodeWithWritesToExternal\n+        extends AbstractEnvironmentProvider\n+{\n+    private final DockerFiles dockerFiles;\n+\n+    @Inject\n+    public SinglenodeWithWritesToExternal(DockerFiles dockerFiles, Standard standard, Hadoop hadoop)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath(\"conf/environment/singlenode-with-writes-to-external/hive.properties\")), CONTAINER_PRESTO_HIVE_PROPERTIES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwMjI3OA=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODQ3NTQ2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0NjowMFrOG02N6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0NjowMFrOG02N6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2NzQzMw==", "bodyText": "redundant?", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r458067433", "createdAt": "2020-07-21T12:46:00Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTable\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Inject\n+    @Named(\"databases.hive.warehouse_directory_path\")\n+    private String warehouseDirectory;\n+\n+    @BeforeTestWithContext\n+    public void setup()\n+            throws Exception\n+    {\n+        hdfsClient.createDirectory(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void cleanup()\n+    {\n+        hdfsClient.delete(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return compose(\n+                mutableTable(NATION));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODQ3OTA3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0NzowMFrOG02QLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NDoyNFrOG1JEmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2ODAxMg==", "bodyText": "I would like to remove warehouse_directory_path.\nHere, it's not needed. You can create a directory in (HDFS's) /tmp", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r458068012", "createdAt": "2020-07-21T12:47:00Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTable\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Inject\n+    @Named(\"databases.hive.warehouse_directory_path\")\n+    private String warehouseDirectory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NjM0Ng==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r458376346", "createdAt": "2020-07-21T20:44:24Z", "author": {"login": "hashhar"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTable\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Inject\n+    @Named(\"databases.hive.warehouse_directory_path\")\n+    private String warehouseDirectory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2ODAxMg=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODQ5MDIwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0OTo0OFrOG02W4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NDoxM1rOG1JETw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2OTczMA==", "bodyText": "Use a shorter (not nested) path for tableLocation in the test code\nand this will let you remove setup and cleanup from here\n(even if you leave a table directory behind, it's not a problem)", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r458069730", "createdAt": "2020-07-21T12:49:48Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTable\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Inject\n+    @Named(\"databases.hive.warehouse_directory_path\")\n+    private String warehouseDirectory;\n+\n+    @BeforeTestWithContext\n+    public void setup()\n+            throws Exception\n+    {\n+        hdfsClient.createDirectory(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void cleanup()\n+    {\n+        hdfsClient.delete(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NjI3MQ==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r458376271", "createdAt": "2020-07-21T20:44:13Z", "author": {"login": "hashhar"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTable\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Inject\n+    @Named(\"databases.hive.warehouse_directory_path\")\n+    private String warehouseDirectory;\n+\n+    @BeforeTestWithContext\n+    public void setup()\n+            throws Exception\n+    {\n+        hdfsClient.createDirectory(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void cleanup()\n+    {\n+        hdfsClient.delete(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2OTczMA=="}, "originalCommit": null, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4000, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}