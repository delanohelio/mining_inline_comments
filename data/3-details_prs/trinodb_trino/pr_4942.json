{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMTk0NTc5", "number": 4942, "title": "Dynamic filtering for semi-joins: planner", "bodyText": "Supersedes the planner part of #2190", "createdAt": "2020-08-23T23:47:07Z", "url": "https://github.com/trinodb/trino/pull/4942", "merged": true, "mergeCommit": {"oid": "dd1b4137942af55a15925843993663ee3de6d0f0"}, "closed": true, "closedAt": "2020-08-27T08:54:10Z", "author": {"login": "lxynov"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCB8V_AFqTQ3MzMxODg1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCvUF1ABqjM2OTU4OTA1ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMzE4ODUz", "url": "https://github.com/trinodb/trino/pull/4942#pullrequestreview-473318853", "createdAt": "2020-08-24T10:12:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoxMjoyMVrOHFdv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo0MDo0MlrOHFicSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5MjMwNg==", "bodyText": "make it conditional, e.g:\nif (!node.getDynamicFilterId().isPresent()) {\n  return visitPlan(node, allowedDynamicFilterIds);\n}\n\nDynamicFilterId filterId = node.getDynamicFilterId().get()", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475492306", "createdAt": "2020-08-24T10:12:21Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -184,6 +187,58 @@ public PlanWithConsumedDynamicFilters visitSpatialJoin(SpatialJoinNode node, Set\n             return new PlanWithConsumedDynamicFilters(node, consumed);\n         }\n \n+        @Override\n+        public PlanWithConsumedDynamicFilters visitSemiJoin(SemiJoinNode node, Set<DynamicFilterId> allowedDynamicFilterIds)\n+        {\n+            Optional<DynamicFilterId> dynamicFilterId = node.getDynamicFilterId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NTMxNg==", "bodyText": "do something similar as we do for visitJoin:\nSet<DynamicFilterId> consumed = new HashSet<>(filteringSourceResult.getConsumedDynamicFilterIds());\nconsumed.addAll(sourceResult.getConsumedDynamicFilterIds());\nOptional<DynamicFilterId> newFilterId;\nif (consumed.contains(filterId)) {\n  consumed.remove(filterId);\n  newFilterId = Optional.of(filterId);\n} else {\n  newFilterId = Optional.empty();\n}", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475495316", "createdAt": "2020-08-24T10:18:22Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -184,6 +187,58 @@ public PlanWithConsumedDynamicFilters visitSpatialJoin(SpatialJoinNode node, Set\n             return new PlanWithConsumedDynamicFilters(node, consumed);\n         }\n \n+        @Override\n+        public PlanWithConsumedDynamicFilters visitSemiJoin(SemiJoinNode node, Set<DynamicFilterId> allowedDynamicFilterIds)\n+        {\n+            Optional<DynamicFilterId> dynamicFilterId = node.getDynamicFilterId();\n+\n+            Set<DynamicFilterId> allowedDynamicFilterIdsSourceSide = dynamicFilterId.isEmpty() ?\n+                    allowedDynamicFilterIds :\n+                    ImmutableSet.<DynamicFilterId>builder()\n+                            .add(dynamicFilterId.get())\n+                            .addAll(allowedDynamicFilterIds)\n+                            .build();\n+            PlanWithConsumedDynamicFilters sourceResult = node.getSource().accept(this, allowedDynamicFilterIdsSourceSide);\n+            PlanWithConsumedDynamicFilters filteringSourceResult = node.getFilteringSource().accept(this, allowedDynamicFilterIds);\n+\n+            Set<DynamicFilterId> consumedSourceSide = sourceResult.getConsumedDynamicFilterIds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNzg3MQ==", "bodyText": "Let's inline DF creation.\nOptional<DynamicFilterId> filterId = node.getDynamicFilterId();\nif (!filterId.isPresent() && isEnableDynamicFiltering(session) && dynamicFiltering) {\n  filterId = Optional.of(new DynamicFilterId(\"df_\" + idAllocator.getNextId().toString()));\n  Symbol sourceSymbol = node.getSourceJoinSymbol();\n  sourceConjuncts.add(createDynamicFilterExpression(metadata, filterId.get(), symbolAllocator.getTypes().get(sourceSymbol), sourceSymbol.toSymbolReference())\n}", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475507871", "createdAt": "2020-08-24T10:34:02Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PredicatePushDown.java", "diffHunk": "@@ -1262,6 +1277,15 @@ private PlanNode visitFilteringSemiJoin(SemiJoinNode node, RewriteContext<Expres\n             sourceConjuncts.addAll(allInferenceWithoutSourceInferred.generateEqualitiesPartitionedBy(sourceScope).getScopeEqualities());\n             filteringSourceConjuncts.addAll(allInferenceWithoutFilteringSourceInferred.generateEqualitiesPartitionedBy(filterScope).getScopeEqualities());\n \n+            // Add dynamic filtering predicate\n+            DynamicFiltersResult dynamicFiltersResult = createDynamicFilters(node, session, idAllocator);\n+            Optional<DynamicFilterId> dynamicFilterId = Optional.empty();\n+            List<Expression> dynamicFilteringPredicates = dynamicFiltersResult.getPredicates();\n+            if (!dynamicFilteringPredicates.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwOTEzOQ==", "bodyText": "let's be explicit here and also check in if below whether dynamic filter changed:\n|| !newFilterId.equals(node.getDynamicFilterId())", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475509139", "createdAt": "2020-08-24T10:36:25Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PredicatePushDown.java", "diffHunk": "@@ -1262,6 +1277,15 @@ private PlanNode visitFilteringSemiJoin(SemiJoinNode node, RewriteContext<Expres\n             sourceConjuncts.addAll(allInferenceWithoutSourceInferred.generateEqualitiesPartitionedBy(sourceScope).getScopeEqualities());\n             filteringSourceConjuncts.addAll(allInferenceWithoutFilteringSourceInferred.generateEqualitiesPartitionedBy(filterScope).getScopeEqualities());\n \n+            // Add dynamic filtering predicate\n+            DynamicFiltersResult dynamicFiltersResult = createDynamicFilters(node, session, idAllocator);\n+            Optional<DynamicFilterId> dynamicFilterId = Optional.empty();\n+            List<Expression> dynamicFilteringPredicates = dynamicFiltersResult.getPredicates();\n+            if (!dynamicFilteringPredicates.isEmpty()) {\n+                sourceConjuncts.addAll(dynamicFilteringPredicates);\n+                dynamicFilterId = Optional.of(getOnlyElement(dynamicFiltersResult.getDynamicFilters().keySet()));\n+            }\n+\n             PlanNode rewrittenSource = context.rewrite(node.getSource(), combineConjuncts(metadata, sourceConjuncts));\n             PlanNode rewrittenFilteringSource = context.rewrite(node.getFilteringSource(), combineConjuncts(metadata, filteringSourceConjuncts));\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMzIxMQ==", "bodyText": "this method is not really needed. We can inline logic in visitFilteringSemiJoin (see my comment there)", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475513211", "createdAt": "2020-08-24T10:45:21Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PredicatePushDown.java", "diffHunk": "@@ -597,6 +598,20 @@ private DynamicFiltersResult createDynamicFilters(JoinNode node, List<JoinNode.E\n             return new DynamicFiltersResult(dynamicFilters, predicates);\n         }\n \n+        private DynamicFiltersResult createDynamicFilters(SemiJoinNode node, Session session, PlanNodeIdAllocator idAllocator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxOTE1NQ==", "bodyText": "move it below\nnode.getDistributionType().ifPresent(distributionType -> nodeOutput.appendDetailsLine(\"Distribution: %s\", distributionType));\n\nline\nCould you share EXPLAIN to see how it looks?", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475519155", "createdAt": "2020-08-24T10:57:59Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/PlanPrinter.java", "diffHunk": "@@ -451,6 +451,7 @@ public Void visitSemiJoin(SemiJoinNode node, Void context)\n             node.getDistributionType().ifPresent(distributionType -> nodeOutput.appendDetailsLine(\"Distribution: %s\", distributionType));\n             node.getSource().accept(this, context);\n             node.getFilteringSource().accept(this, context);\n+            node.getDynamicFilterId().ifPresent(dynamicFilterId -> nodeOutput.appendDetailsLine(\"dynamicFilterId: %s\", dynamicFilterId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxOTg0Nw==", "bodyText": "replace semijoin with semi-join", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475519847", "createdAt": "2020-08-24T10:59:30Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -98,6 +100,25 @@ public void validate(PlanNode plan, Session session, Metadata metadata, TypeAnal\n                 return ImmutableSet.copyOf(unmatched);\n             }\n \n+            @Override\n+            public Set<DynamicFilterId> visitSemiJoin(SemiJoinNode node, Void context)\n+            {\n+                Set<DynamicFilterId> consumedSourceSide = node.getSource().accept(this, context);\n+                Set<DynamicFilterId> consumedFilteringSourceSide = node.getFilteringSource().accept(this, context);\n+                if (node.getDynamicFilterId().isPresent()) {\n+                    DynamicFilterId dynamicFilterId = node.getDynamicFilterId().get();\n+                    verify(consumedSourceSide.contains(dynamicFilterId),\n+                            \"The dynamic filter %s present in semijoin was not consumed by it's source side.\", dynamicFilterId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMDc4MQ==", "bodyText": "use something similar as for visitJoin:\nSet<DynamicFilterId> unmatched = new HashSet<>(consumedBuildSide);\nunmatched.addAll(consumedProbeSide);\nnode.getDynamicFilterId().ifPresent(unmatched::remove);\nreturn ImmutableSet.copyOf(unmatched);", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475520781", "createdAt": "2020-08-24T11:01:29Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -98,6 +100,25 @@ public void validate(PlanNode plan, Session session, Metadata metadata, TypeAnal\n                 return ImmutableSet.copyOf(unmatched);\n             }\n \n+            @Override\n+            public Set<DynamicFilterId> visitSemiJoin(SemiJoinNode node, Void context)\n+            {\n+                Set<DynamicFilterId> consumedSourceSide = node.getSource().accept(this, context);\n+                Set<DynamicFilterId> consumedFilteringSourceSide = node.getFilteringSource().accept(this, context);\n+                if (node.getDynamicFilterId().isPresent()) {\n+                    DynamicFilterId dynamicFilterId = node.getDynamicFilterId().get();\n+                    verify(consumedSourceSide.contains(dynamicFilterId),\n+                            \"The dynamic filter %s present in semijoin was not consumed by it's source side.\", dynamicFilterId);\n+                    verify(!consumedFilteringSourceSide.contains(dynamicFilterId),\n+                            \"The dynamic filter %s present in semijoin was consumed by it's filtering source side.\", dynamicFilterId);\n+                    consumedSourceSide = consumedSourceSide.stream().filter(id -> !id.equals(dynamicFilterId)).collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTMwMA==", "bodyText": "each arg in newline", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475525300", "createdAt": "2020-08-24T11:11:21Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/AbstractPredicatePushdownTest.java", "diffHunk": "@@ -122,11 +123,15 @@ public void testNonDeterministicPredicateDoesNotPropagateFromFilteringSideToSour\n     {\n         assertPlan(\"SELECT * FROM lineitem WHERE orderkey IN (SELECT orderkey FROM orders WHERE orderkey = random(5))\",\n                 anyTree(\n-                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\",\n-                                // NO filter here\n-                                project(\n-                                        tableScan(\"lineitem\", ImmutableMap.of(\n-                                                \"LINE_ORDER_KEY\", \"orderkey\"))),\n+                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\", Optional.empty(), enableDynamicFiltering,\n+                                enableDynamicFiltering ?\n+                                        anyTree(\n+                                                tableScan(\"lineitem\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMzU5Ng==", "bodyText": "introduce another semiJoin with just hasDynamicFilter so that we can avoid passing Optional.empty().", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475533596", "createdAt": "2020-08-24T11:29:07Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/AbstractPredicatePushdownTest.java", "diffHunk": "@@ -81,7 +82,7 @@ public void testPushDownToLhsOfSemiJoin()\n         assertPlan(\"SELECT quantity FROM (SELECT * FROM lineitem WHERE orderkey IN (SELECT orderkey FROM orders)) \" +\n                         \"WHERE linenumber = 2\",\n                 anyTree(\n-                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\",\n+                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\", Optional.empty(), enableDynamicFiltering,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNTE5MA==", "bodyText": "just\n                                        anyTree(\n                                                tableScan(\"lineitem\", ImmutableMap.of(\n                                                        \"LINE_ORDER_KEY\", \"orderkey\"))) :\n\nshould work for both cases", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475535190", "createdAt": "2020-08-24T11:31:22Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/AbstractPredicatePushdownTest.java", "diffHunk": "@@ -122,11 +123,15 @@ public void testNonDeterministicPredicateDoesNotPropagateFromFilteringSideToSour\n     {\n         assertPlan(\"SELECT * FROM lineitem WHERE orderkey IN (SELECT orderkey FROM orders WHERE orderkey = random(5))\",\n                 anyTree(\n-                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\",\n-                                // NO filter here\n-                                project(\n-                                        tableScan(\"lineitem\", ImmutableMap.of(\n-                                                \"LINE_ORDER_KEY\", \"orderkey\"))),\n+                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\", Optional.empty(), enableDynamicFiltering,\n+                                enableDynamicFiltering ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNTI4MA==", "bodyText": "put each tableScan argument in newline", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475535280", "createdAt": "2020-08-24T11:31:33Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/AbstractPredicatePushdownTest.java", "diffHunk": "@@ -122,11 +123,15 @@ public void testNonDeterministicPredicateDoesNotPropagateFromFilteringSideToSour\n     {\n         assertPlan(\"SELECT * FROM lineitem WHERE orderkey IN (SELECT orderkey FROM orders WHERE orderkey = random(5))\",\n                 anyTree(\n-                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\",\n-                                // NO filter here\n-                                project(\n-                                        tableScan(\"lineitem\", ImmutableMap.of(\n-                                                \"LINE_ORDER_KEY\", \"orderkey\"))),\n+                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\", Optional.empty(), enableDynamicFiltering,\n+                                enableDynamicFiltering ?\n+                                        anyTree(\n+                                                tableScan(\"lineitem\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNTk0Ng==", "bodyText": "pass false here to assert that DF is not added", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475535946", "createdAt": "2020-08-24T11:33:00Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -326,6 +306,103 @@ public void testNonPushedDownJoinFilterRemoval()\n                                                 tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\")))))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        assertPlan(\"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0)\",\n+                anyTree(\n+                        filter(\"S\",\n+                                project(\n+                                        semiJoin(\"X\", \"Y\", \"S\", Optional.empty(), true,\n+                                                anyTree(\n+                                                        tableScan(\"orders\", ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\"lineitem\", ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testNonFilteringSemiJoin()\n+    {\n+        // Dynamic filtering is not applied to non-filtering semi-join queries\n+        assertPlan(\"SELECT * FROM orders WHERE orderkey NOT IN (SELECT orderkey FROM lineitem WHERE linenumber < 0)\",\n+                anyTree(\n+                        filter(\"NOT S\",\n+                                project(\n+                                        semiJoin(\"X\", \"Y\", \"S\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzIxOQ==", "bodyText": "move this to testSemiJoin and assert DF is present. This is filtering semi join", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475537219", "createdAt": "2020-08-24T11:35:44Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -326,6 +306,103 @@ public void testNonPushedDownJoinFilterRemoval()\n                                                 tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\")))))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        assertPlan(\"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0)\",\n+                anyTree(\n+                        filter(\"S\",\n+                                project(\n+                                        semiJoin(\"X\", \"Y\", \"S\", Optional.empty(), true,\n+                                                anyTree(\n+                                                        tableScan(\"orders\", ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\"lineitem\", ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testNonFilteringSemiJoin()\n+    {\n+        // Dynamic filtering is not applied to non-filtering semi-join queries\n+        assertPlan(\"SELECT * FROM orders WHERE orderkey NOT IN (SELECT orderkey FROM lineitem WHERE linenumber < 0)\",\n+                anyTree(\n+                        filter(\"NOT S\",\n+                                project(\n+                                        semiJoin(\"X\", \"Y\", \"S\",\n+                                                anyTree(\n+                                                        tableScan(\"orders\", ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\"lineitem\", ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+\n+        assertPlan(\"SELECT orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber < 0) FROM orders\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzOTQ1OQ==", "bodyText": "this test can be simplified by removing semijoin IN (SELECT orders.orderkey FROM orders) which is non essential for this test", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475539459", "createdAt": "2020-08-24T11:40:43Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -326,6 +306,103 @@ public void testNonPushedDownJoinFilterRemoval()\n                                                 tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\")))))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        assertPlan(\"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0)\",\n+                anyTree(\n+                        filter(\"S\",\n+                                project(\n+                                        semiJoin(\"X\", \"Y\", \"S\", Optional.empty(), true,\n+                                                anyTree(\n+                                                        tableScan(\"orders\", ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\"lineitem\", ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testNonFilteringSemiJoin()\n+    {\n+        // Dynamic filtering is not applied to non-filtering semi-join queries\n+        assertPlan(\"SELECT * FROM orders WHERE orderkey NOT IN (SELECT orderkey FROM lineitem WHERE linenumber < 0)\",\n+                anyTree(\n+                        filter(\"NOT S\",\n+                                project(\n+                                        semiJoin(\"X\", \"Y\", \"S\",\n+                                                anyTree(\n+                                                        tableScan(\"orders\", ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\"lineitem\", ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+\n+        assertPlan(\"SELECT orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber < 0) FROM orders\",\n+                anyTree(\n+                        semiJoin(\"X\", \"Y\", \"S\",\n+                                anyTree(\n+                                        tableScan(\"orders\", ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                anyTree(\n+                                        tableScan(\"lineitem\", ImmutableMap.of(\"Y\", \"orderkey\"))))));\n+    }\n+\n+    @Test\n+    public void testSemiJoinWithStaticFiltering()\n+    {\n+        assertPlan(\"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0) AND orderkey > 0\",\n+                anyTree(\n+                        filter(\"S\",\n+                                project(\n+                                        semiJoin(\"X\", \"Y\", \"S\", Optional.empty(), true,\n+                                                anyTree(\n+                                                        filter(\n+                                                                \"X > BIGINT '0'\",\n+                                                                tableScan(\"orders\", ImmutableMap.of(\"X\", \"orderkey\")))),\n+                                                anyTree(\n+                                                        tableScan(\"lineitem\", ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testMultiSemiJoin()\n+    {\n+        assertPlan(\"SELECT part.partkey FROM part WHERE part.partkey IN (SELECT lineitem.partkey FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders))\",\n+                anyTree(\n+                        filter(\"S0\",\n+                                project(\n+                                        semiJoin(\"PART_PK\", \"LINEITEM_PK\", \"S0\", Optional.empty(), true,\n+                                                anyTree(\n+                                                        tableScan(\"part\", ImmutableMap.of(\"PART_PK\", \"partkey\"))),\n+                                                anyTree(\n+                                                        filter(\"S1\",\n+                                                                project(\n+                                                                        semiJoin(\"LINEITEM_OK\", \"ORDERS_OK\", \"S1\", Optional.empty(), true,\n+                                                                                anyTree(\n+                                                                                        tableScan(\"lineitem\", ImmutableMap.of(\"LINEITEM_PK\", \"partkey\", \"LINEITEM_OK\", \"orderkey\"))),\n+                                                                                anyTree(\n+                                                                                        tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))))))))))));\n+    }\n+\n+    @Test\n+    public void testSemiJoinUnsupportedDynamicFilterRemoval()\n+    {\n+        // Dynamic filters are supported only after a table scan\n+        assertPlan(\"WITH t AS (SELECT lineitem.partkey + 1000 partkey FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders)) \" +\n+                        \"SELECT t.partkey FROM t WHERE t.partkey IN (SELECT part.partkey FROM part)\",\n+                anyTree(\n+                        filter(\"S0\",\n+                                project(\n+                                        semiJoin(\"LINEITEM_PK_PLUS_1000\", \"PART_PK\", \"S0\", Optional.empty(), false,\n+                                                anyTree(\n+                                                        project(ImmutableMap.of(\"LINEITEM_PK_PLUS_1000\", expression(\"(LINEITEM_PK + BIGINT '1000')\")),\n+                                                                anyTree(\n+                                                                        filter(\"S1\",\n+                                                                                project(\n+                                                                                        semiJoin(\"LINEITEM_OK\", \"ORDERS_OK\", \"S1\", Optional.empty(), true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0NDQ0NQ==", "bodyText": "this can be simplified, see: io.prestosql.server.DynamicFilterService#getConsumedDynamicFilters:\nboolean dynamicFilterConsumed = extractExpressions(planNode).stream()\n                .flatMap(expression -> extractDynamicFilters(expression).getDynamicConjuncts().stream())\n                .filter(filter -> filter.getId().eqals(dynamicFilterId))\n                .anyMatch(filter -> {\n                  Symbol filterSourceSymbol = Symbol.from(filter.getInput());\n                  return symbolAliases.get(sourceSymbolAlias).equals(filterSourceSymbol.toSymbolReference());\n                })\nif (!dynamicFilterConsumed) {\n  return NO_MATCH;\n}", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475544445", "createdAt": "2020-08-24T11:51:52Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/assertions/SemiJoinMatcher.java", "diffHunk": "@@ -64,6 +78,31 @@ public MatchResult detailMatches(PlanNode node, StatsProvider stats, Session ses\n             return NO_MATCH;\n         }\n \n+        if (hasDynamicFilter) {\n+            if (semiJoinNode.getDynamicFilterId().isEmpty()) {\n+                return NO_MATCH;\n+            }\n+            DynamicFilterId dynamicFilterId = semiJoinNode.getDynamicFilterId().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU1MDMwNg==", "bodyText": "keep this test cases separate", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475550306", "createdAt": "2020-08-24T12:03:45Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestRemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -319,6 +320,77 @@ public void testSpatialJoin()\n                                 values(\"RIGHT_SYMBOL\"))));\n     }\n \n+    @Test\n+    public void testSemiJoin()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU1MTg0NA==", "bodyText": "put \"orders\" argument in newline", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475551844", "createdAt": "2020-08-24T12:06:50Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestRemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -319,6 +320,77 @@ public void testSpatialJoin()\n                                 values(\"RIGHT_SYMBOL\"))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        // Unconsumed dynamic filter\n+        PlanNode root = builder.semiJoin(\n+                builder.filter(expression(\"ORDERS_OK > 0\"), ordersTableScanNode),\n+                lineitemTableScanNode,\n+                ordersOrderKeySymbol,\n+                lineitemOrderKeySymbol,\n+                new Symbol(\"SEMIJOIN_OUTPUT\"),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.of(new DynamicFilterId(\"DF\")));\n+        assertPlan(\n+                removeUnsupportedDynamicFilters(root),\n+                semiJoin(\"ORDERS_OK\", \"LINEITEM_OK\", \"SEMIJOIN_OUTPUT\", Optional.empty(), false,\n+                        filter(\"ORDERS_OK > 0\",\n+                                tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2ODM1Ng==", "bodyText": "use io.prestosql.sql.planner.assertions.PlanMatchPattern#filter(io.prestosql.sql.tree.Expression, io.prestosql.sql.tree.Expression, io.prestosql.sql.planner.assertions.PlanMatchPattern) version of filter to assert DF is really gone", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475568356", "createdAt": "2020-08-24T12:39:06Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestRemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -319,6 +320,77 @@ public void testSpatialJoin()\n                                 values(\"RIGHT_SYMBOL\"))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        // Unconsumed dynamic filter\n+        PlanNode root = builder.semiJoin(\n+                builder.filter(expression(\"ORDERS_OK > 0\"), ordersTableScanNode),\n+                lineitemTableScanNode,\n+                ordersOrderKeySymbol,\n+                lineitemOrderKeySymbol,\n+                new Symbol(\"SEMIJOIN_OUTPUT\"),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.of(new DynamicFilterId(\"DF\")));\n+        assertPlan(\n+                removeUnsupportedDynamicFilters(root),\n+                semiJoin(\"ORDERS_OK\", \"LINEITEM_OK\", \"SEMIJOIN_OUTPUT\", Optional.empty(), false,\n+                        filter(\"ORDERS_OK > 0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2ODU0OA==", "bodyText": "use io.prestosql.sql.planner.assertions.PlanMatchPattern#filter(io.prestosql.sql.tree.Expression, io.prestosql.sql.tree.Expression, io.prestosql.sql.planner.assertions.PlanMatchPattern)", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475568548", "createdAt": "2020-08-24T12:39:26Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestRemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -319,6 +320,77 @@ public void testSpatialJoin()\n                                 values(\"RIGHT_SYMBOL\"))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        // Unconsumed dynamic filter\n+        PlanNode root = builder.semiJoin(\n+                builder.filter(expression(\"ORDERS_OK > 0\"), ordersTableScanNode),\n+                lineitemTableScanNode,\n+                ordersOrderKeySymbol,\n+                lineitemOrderKeySymbol,\n+                new Symbol(\"SEMIJOIN_OUTPUT\"),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.of(new DynamicFilterId(\"DF\")));\n+        assertPlan(\n+                removeUnsupportedDynamicFilters(root),\n+                semiJoin(\"ORDERS_OK\", \"LINEITEM_OK\", \"SEMIJOIN_OUTPUT\", Optional.empty(), false,\n+                        filter(\"ORDERS_OK > 0\",\n+                                tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))),\n+                        tableScan(\"lineitem\", ImmutableMap.of(\"LINEITEM_OK\", \"orderkey\"))));\n+\n+        Expression dynamicFilterExpression = createDynamicFilterExpression(metadata, new DynamicFilterId(\"DF\"), BIGINT, ordersOrderKeySymbol.toSymbolReference());\n+\n+        // Unmatched dynamic filter\n+        root = builder.semiJoin(\n+                builder.filter(\n+                        combineConjuncts(\n+                                metadata,\n+                                expression(\"ORDERS_OK > 0\"),\n+                                dynamicFilterExpression),\n+                        ordersTableScanNode),\n+                lineitemTableScanNode,\n+                ordersOrderKeySymbol,\n+                lineitemOrderKeySymbol,\n+                new Symbol(\"SEMIJOIN_OUTPUT\"),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty());\n+        assertPlan(\n+                removeUnsupportedDynamicFilters(root),\n+                semiJoin(\"ORDERS_OK\", \"LINEITEM_OK\", \"SEMIJOIN_OUTPUT\", Optional.empty(), false,\n+                        filter(\"ORDERS_OK > 0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2OTIyNw==", "bodyText": "please add a test to TestDynamicFiltersChecker", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r475569227", "createdAt": "2020-08-24T12:40:42Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -98,6 +100,25 @@ public void validate(PlanNode plan, Session session, Metadata metadata, TypeAnal\n                 return ImmutableSet.copyOf(unmatched);\n             }\n \n+            @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczODI1MjA2", "url": "https://github.com/trinodb/trino/pull/4942#pullrequestreview-473825206", "createdAt": "2020-08-24T20:17:30Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzA4Mzg3", "url": "https://github.com/trinodb/trino/pull/4942#pullrequestreview-474308387", "createdAt": "2020-08-25T09:36:11Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNjoxMlrOHGP_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTo1ODozM1rOHGQ1Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNTU2NA==", "bodyText": "please just inline all tableScan params:\ntableScan(\"lineitem\", ImmutableMap.of(\"LINE_ORDER_KEY\", \"orderkey\"))", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r476315564", "createdAt": "2020-08-25T09:36:12Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/AbstractPredicatePushdownTest.java", "diffHunk": "@@ -122,11 +122,10 @@ public void testNonDeterministicPredicateDoesNotPropagateFromFilteringSideToSour\n     {\n         assertPlan(\"SELECT * FROM lineitem WHERE orderkey IN (SELECT orderkey FROM orders WHERE orderkey = random(5))\",\n                 anyTree(\n-                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\",\n-                                // NO filter here\n-                                project(\n-                                        tableScan(\"lineitem\", ImmutableMap.of(\n-                                                \"LINE_ORDER_KEY\", \"orderkey\"))),\n+                        semiJoin(\"LINE_ORDER_KEY\", \"ORDERS_ORDER_KEY\", \"SEMI_JOIN_RESULT\", enableDynamicFiltering,\n+                                        anyTree(\n+                                                tableScan(\"lineitem\", ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNjYxNg==", "bodyText": "actually, I think\nfilter(\"S\",\n  project(\n    semiJoin(\"X\", \"Y\", \"S\", true,\n      anyTree\n\nis more readable, e.g: args that are not subtrees should stay in same line. Sorry for confusion", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r476316616", "createdAt": "2020-08-25T09:37:53Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -326,6 +306,177 @@ public void testNonPushedDownJoinFilterRemoval()\n                                                 tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\")))))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0)\",\n+                anyTree(\n+                        filter(\n+                                \"S\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNzg2OQ==", "bodyText": "yeah. Definitely previous formatting was better. ;)", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r476317869", "createdAt": "2020-08-25T09:39:59Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -326,6 +306,177 @@ public void testNonPushedDownJoinFilterRemoval()\n                                                 tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\")))))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0)\",\n+                anyTree(\n+                        filter(\n+                                \"S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                true,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"orders\",\n+                                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testNonFilteringSemiJoin()\n+    {\n+        // Dynamic filtering is not applied to non-filtering semi-join queries\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey NOT IN (SELECT orderkey FROM lineitem WHERE linenumber < 0)\",\n+                anyTree(\n+                        filter(\n+                                \"NOT S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                false,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"orders\",\n+                                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+\n+        assertPlan(\n+                \"SELECT orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber < 0) FROM orders\",\n+                anyTree(\n+                        semiJoin(\n+                                \"X\",\n+                                \"Y\",\n+                                \"S\",\n+                                false,\n+                                anyTree(\n+                                        tableScan(\n+                                                \"orders\",\n+                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                anyTree(\n+                                        tableScan(\n+                                                \"lineitem\",\n+                                                ImmutableMap.of(\"Y\", \"orderkey\"))))));\n+    }\n+\n+    @Test\n+    public void testSemiJoinWithStaticFiltering()\n+    {\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0) AND orderkey > 0\",\n+                anyTree(\n+                        filter(\n+                                \"S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                true,\n+                                                anyTree(\n+                                                        filter(\n+                                                                \"X > BIGINT '0'\",\n+                                                                tableScan(\n+                                                                        \"orders\",\n+                                                                        ImmutableMap.of(\"X\", \"orderkey\")))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testMultiSemiJoin()\n+    {\n+        assertPlan(\n+                \"SELECT part.partkey FROM part WHERE part.partkey IN (SELECT lineitem.partkey FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders))\",\n+                anyTree(\n+                        filter(\n+                                \"S0\",\n+                                project(\n+                                        semiJoin(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxODExNg==", "bodyText": "please put subquery in newline", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r476318116", "createdAt": "2020-08-25T09:40:21Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -326,6 +306,177 @@ public void testNonPushedDownJoinFilterRemoval()\n                                                 tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\")))))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0)\",\n+                anyTree(\n+                        filter(\n+                                \"S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                true,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"orders\",\n+                                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testNonFilteringSemiJoin()\n+    {\n+        // Dynamic filtering is not applied to non-filtering semi-join queries\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey NOT IN (SELECT orderkey FROM lineitem WHERE linenumber < 0)\",\n+                anyTree(\n+                        filter(\n+                                \"NOT S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                false,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"orders\",\n+                                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+\n+        assertPlan(\n+                \"SELECT orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber < 0) FROM orders\",\n+                anyTree(\n+                        semiJoin(\n+                                \"X\",\n+                                \"Y\",\n+                                \"S\",\n+                                false,\n+                                anyTree(\n+                                        tableScan(\n+                                                \"orders\",\n+                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                anyTree(\n+                                        tableScan(\n+                                                \"lineitem\",\n+                                                ImmutableMap.of(\"Y\", \"orderkey\"))))));\n+    }\n+\n+    @Test\n+    public void testSemiJoinWithStaticFiltering()\n+    {\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0) AND orderkey > 0\",\n+                anyTree(\n+                        filter(\n+                                \"S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                true,\n+                                                anyTree(\n+                                                        filter(\n+                                                                \"X > BIGINT '0'\",\n+                                                                tableScan(\n+                                                                        \"orders\",\n+                                                                        ImmutableMap.of(\"X\", \"orderkey\")))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testMultiSemiJoin()\n+    {\n+        assertPlan(\n+                \"SELECT part.partkey FROM part WHERE part.partkey IN (SELECT lineitem.partkey FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders))\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxOTE2OQ==", "bodyText": "We can cut WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders)) out. This case was tested already in other testSemiJoin method", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r476319169", "createdAt": "2020-08-25T09:41:57Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -326,6 +306,177 @@ public void testNonPushedDownJoinFilterRemoval()\n                                                 tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\")))))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0)\",\n+                anyTree(\n+                        filter(\n+                                \"S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                true,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"orders\",\n+                                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testNonFilteringSemiJoin()\n+    {\n+        // Dynamic filtering is not applied to non-filtering semi-join queries\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey NOT IN (SELECT orderkey FROM lineitem WHERE linenumber < 0)\",\n+                anyTree(\n+                        filter(\n+                                \"NOT S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                false,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"orders\",\n+                                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+\n+        assertPlan(\n+                \"SELECT orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber < 0) FROM orders\",\n+                anyTree(\n+                        semiJoin(\n+                                \"X\",\n+                                \"Y\",\n+                                \"S\",\n+                                false,\n+                                anyTree(\n+                                        tableScan(\n+                                                \"orders\",\n+                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                anyTree(\n+                                        tableScan(\n+                                                \"lineitem\",\n+                                                ImmutableMap.of(\"Y\", \"orderkey\"))))));\n+    }\n+\n+    @Test\n+    public void testSemiJoinWithStaticFiltering()\n+    {\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0) AND orderkey > 0\",\n+                anyTree(\n+                        filter(\n+                                \"S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                true,\n+                                                anyTree(\n+                                                        filter(\n+                                                                \"X > BIGINT '0'\",\n+                                                                tableScan(\n+                                                                        \"orders\",\n+                                                                        ImmutableMap.of(\"X\", \"orderkey\")))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testMultiSemiJoin()\n+    {\n+        assertPlan(\n+                \"SELECT part.partkey FROM part WHERE part.partkey IN (SELECT lineitem.partkey FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders))\",\n+                anyTree(\n+                        filter(\n+                                \"S0\",\n+                                project(\n+                                        semiJoin(\n+                                                \"PART_PK\",\n+                                                \"LINEITEM_PK\",\n+                                                \"S0\",\n+                                                true,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"part\",\n+                                                                ImmutableMap.of(\"PART_PK\", \"partkey\"))),\n+                                                anyTree(\n+                                                        filter(\n+                                                                \"S1\",\n+                                                                project(\n+                                                                        semiJoin(\n+                                                                                \"LINEITEM_OK\",\n+                                                                                \"ORDERS_OK\",\n+                                                                                \"S1\",\n+                                                                                true,\n+                                                                                anyTree(\n+                                                                                        tableScan(\n+                                                                                                \"lineitem\",\n+                                                                                                ImmutableMap.of(\"LINEITEM_PK\", \"partkey\", \"LINEITEM_OK\", \"orderkey\"))),\n+                                                                                anyTree(\n+                                                                                        tableScan(\n+                                                                                                \"orders\",\n+                                                                                                ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))))))))))));\n+    }\n+\n+    @Test\n+    public void testSemiJoinUnsupportedDynamicFilterRemoval()\n+    {\n+        // Dynamic filters are supported only after a table scan\n+        assertPlan(\n+                \"WITH t AS (SELECT lineitem.partkey + 1000 partkey FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders)) \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyMDI1MA==", "bodyText": "please fix query assertion instead", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r476320250", "createdAt": "2020-08-25T09:43:45Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLogicalPlanner.java", "diffHunk": "@@ -430,6 +431,9 @@ public void testUncorrelatedSubqueries()\n                                                         tableScan(\"lineitem\", ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n \n         assertPlan(\"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0)\",\n+                Session.builder(this.getQueryRunner().getDefaultSession())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyMDQ0OQ==", "bodyText": "please fix query assertion instead", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r476320449", "createdAt": "2020-08-25T09:44:06Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestQuantifiedComparison.java", "diffHunk": "@@ -35,12 +37,16 @@\n     public void testQuantifiedComparisonEqualsAny()\n     {\n         String query = \"SELECT orderkey, custkey FROM orders WHERE orderkey = ANY (VALUES ROW(CAST(5 as BIGINT)), ROW(CAST(3 as BIGINT)))\";\n-        assertPlan(query, anyTree(\n-                filter(\"S\",\n-                        project(\n-                                semiJoin(\"X\", \"Y\", \"S\",\n-                                        anyTree(tableScan(\"orders\", ImmutableMap.of(\"X\", \"orderkey\"))),\n-                                        anyTree(values(ImmutableMap.of(\"Y\", 0))))))));\n+        assertPlan(query,\n+                Session.builder(this.getQueryRunner().getDefaultSession())\n+                        .setSystemProperty(ENABLE_DYNAMIC_FILTERING, Boolean.toString(false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyMjM1NQ==", "bodyText": "let's make dynamic filter check optional, e.g use:\nOptional<Boolean> hasDynamicFilter\n\nthis way DF tests are isolated", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r476322355", "createdAt": "2020-08-25T09:47:13Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/assertions/PlanMatchPattern.java", "diffHunk": "@@ -417,12 +417,22 @@ public static PlanMatchPattern strictProject(Map<String, ExpressionMatcher> assi\n \n     public static PlanMatchPattern semiJoin(String sourceSymbolAlias, String filteringSymbolAlias, String outputAlias, PlanMatchPattern source, PlanMatchPattern filtering)\n     {\n-        return semiJoin(sourceSymbolAlias, filteringSymbolAlias, outputAlias, Optional.empty(), source, filtering);\n+        return semiJoin(sourceSymbolAlias, filteringSymbolAlias, outputAlias, Optional.empty(), false, source, filtering);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyOTIzOQ==", "bodyText": "Please also match that filtered symbol matches probe symbol:\nsymbolAliases.get(sourceSymbolAlias).equals(filterSourceSymbol.toSymbolReference());\n\nthat was a good assertion (unless it doesn't hold in tests)", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r476329239", "createdAt": "2020-08-25T09:58:33Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/assertions/SemiJoinMatcher.java", "diffHunk": "@@ -64,6 +76,26 @@ public MatchResult detailMatches(PlanNode node, StatsProvider stats, Session ses\n             return NO_MATCH;\n         }\n \n+        if (hasDynamicFilter) {\n+            if (semiJoinNode.getDynamicFilterId().isEmpty()) {\n+                return NO_MATCH;\n+            }\n+            DynamicFilterId dynamicFilterId = semiJoinNode.getDynamicFilterId().get();\n+            boolean dynamicFilterConsumed = searchFrom(semiJoinNode.getSource())\n+                    .where(FilterNode.class::isInstance)\n+                    .findAll()\n+                    .stream()\n+                    .flatMap(filterNode -> extractExpressions(filterNode).stream())\n+                    .flatMap(expression -> extractDynamicFilters(expression).getDynamicConjuncts().stream())\n+                    .anyMatch(descriptor -> descriptor.getId().equals(dynamicFilterId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzQ4MjIw", "url": "https://github.com/trinodb/trino/pull/4942#pullrequestreview-475348220", "createdAt": "2020-08-26T10:14:19Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoxNDoxOVrOHHFepA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDozNTowOVrOHHGIRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5MTg0NA==", "bodyText": "We should break that into multiple lines at this point", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r477191844", "createdAt": "2020-08-26T10:14:19Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/PredicatePushDown.java", "diffHunk": "@@ -1184,7 +1184,7 @@ private PlanNode visitNonFilteringSemiJoin(SemiJoinNode node, RewriteContext<Exp\n \n             PlanNode output = node;\n             if (rewrittenSource != node.getSource() || rewrittenFilteringSource != node.getFilteringSource()) {\n-                output = new SemiJoinNode(node.getId(), rewrittenSource, rewrittenFilteringSource, node.getSourceJoinSymbol(), node.getFilteringSourceJoinSymbol(), node.getSemiJoinOutput(), node.getSourceHashSymbol(), node.getFilteringSourceHashSymbol(), node.getDistributionType());\n+                output = new SemiJoinNode(node.getId(), rewrittenSource, rewrittenFilteringSource, node.getSourceJoinSymbol(), node.getFilteringSourceJoinSymbol(), node.getSemiJoinOutput(), node.getSourceHashSymbol(), node.getFilteringSourceHashSymbol(), node.getDistributionType(), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NjQwNQ==", "bodyText": "I think\nSELECT partkey FROM (SELECT lineitem.partkey + 1000 partkey FROM lineitem) WHERE partkey IN (SELECT part.partkey FROM part)\n\nshould be sufficient.\nIt would be easier for reader to undestand the test intent and matched tree.", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r477196405", "createdAt": "2020-08-26T10:23:17Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -326,6 +306,177 @@ public void testNonPushedDownJoinFilterRemoval()\n                                                 tableScan(\"part\", ImmutableMap.of(\"K2\", \"partkey\", \"V2\", \"size\")))))));\n     }\n \n+    @Test\n+    public void testSemiJoin()\n+    {\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0)\",\n+                anyTree(\n+                        filter(\n+                                \"S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                true,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"orders\",\n+                                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testNonFilteringSemiJoin()\n+    {\n+        // Dynamic filtering is not applied to non-filtering semi-join queries\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey NOT IN (SELECT orderkey FROM lineitem WHERE linenumber < 0)\",\n+                anyTree(\n+                        filter(\n+                                \"NOT S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                false,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"orders\",\n+                                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+\n+        assertPlan(\n+                \"SELECT orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber < 0) FROM orders\",\n+                anyTree(\n+                        semiJoin(\n+                                \"X\",\n+                                \"Y\",\n+                                \"S\",\n+                                false,\n+                                anyTree(\n+                                        tableScan(\n+                                                \"orders\",\n+                                                ImmutableMap.of(\"X\", \"orderkey\"))),\n+                                anyTree(\n+                                        tableScan(\n+                                                \"lineitem\",\n+                                                ImmutableMap.of(\"Y\", \"orderkey\"))))));\n+    }\n+\n+    @Test\n+    public void testSemiJoinWithStaticFiltering()\n+    {\n+        assertPlan(\n+                \"SELECT * FROM orders WHERE orderkey IN (SELECT orderkey FROM lineitem WHERE linenumber % 4 = 0) AND orderkey > 0\",\n+                anyTree(\n+                        filter(\n+                                \"S\",\n+                                project(\n+                                        semiJoin(\n+                                                \"X\",\n+                                                \"Y\",\n+                                                \"S\",\n+                                                true,\n+                                                anyTree(\n+                                                        filter(\n+                                                                \"X > BIGINT '0'\",\n+                                                                tableScan(\n+                                                                        \"orders\",\n+                                                                        ImmutableMap.of(\"X\", \"orderkey\")))),\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"lineitem\",\n+                                                                ImmutableMap.of(\"Y\", \"orderkey\"))))))));\n+    }\n+\n+    @Test\n+    public void testMultiSemiJoin()\n+    {\n+        assertPlan(\n+                \"SELECT part.partkey FROM part WHERE part.partkey IN (SELECT lineitem.partkey FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders))\",\n+                anyTree(\n+                        filter(\n+                                \"S0\",\n+                                project(\n+                                        semiJoin(\n+                                                \"PART_PK\",\n+                                                \"LINEITEM_PK\",\n+                                                \"S0\",\n+                                                true,\n+                                                anyTree(\n+                                                        tableScan(\n+                                                                \"part\",\n+                                                                ImmutableMap.of(\"PART_PK\", \"partkey\"))),\n+                                                anyTree(\n+                                                        filter(\n+                                                                \"S1\",\n+                                                                project(\n+                                                                        semiJoin(\n+                                                                                \"LINEITEM_OK\",\n+                                                                                \"ORDERS_OK\",\n+                                                                                \"S1\",\n+                                                                                true,\n+                                                                                anyTree(\n+                                                                                        tableScan(\n+                                                                                                \"lineitem\",\n+                                                                                                ImmutableMap.of(\"LINEITEM_PK\", \"partkey\", \"LINEITEM_OK\", \"orderkey\"))),\n+                                                                                anyTree(\n+                                                                                        tableScan(\n+                                                                                                \"orders\",\n+                                                                                                ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))))))))))));\n+    }\n+\n+    @Test\n+    public void testSemiJoinUnsupportedDynamicFilterRemoval()\n+    {\n+        // Dynamic filters are supported only after a table scan\n+        assertPlan(\n+                \"WITH t AS (SELECT lineitem.partkey + 1000 partkey FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders)) \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxOTE2OQ=="}, "originalCommit": null, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NzEyMw==", "bodyText": "nit for future: this should be separate commit (it changes formatting)", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r477197123", "createdAt": "2020-08-26T10:24:44Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestQuantifiedComparison.java", "diffHunk": "@@ -35,12 +35,13 @@\n     public void testQuantifiedComparisonEqualsAny()\n     {\n         String query = \"SELECT orderkey, custkey FROM orders WHERE orderkey = ANY (VALUES ROW(CAST(5 as BIGINT)), ROW(CAST(3 as BIGINT)))\";\n-        assertPlan(query, anyTree(\n-                filter(\"S\",\n-                        project(\n-                                semiJoin(\"X\", \"Y\", \"S\",\n-                                        anyTree(tableScan(\"orders\", ImmutableMap.of(\"X\", \"orderkey\"))),\n-                                        anyTree(values(ImmutableMap.of(\"Y\", 0))))))));\n+        assertPlan(query,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwMjUwMg==", "bodyText": "you should make sure that there is at least one match (allMatch returns true on empty stream), e.g:\nList<DynamicFilter.Descriptor> matchingDescriptors = searchFrom(semiJoinNode.getSource())\n  .where(FilterNode.class::isInstance)\n  .findAll()\n  .stream()\n  .flatMap(filterNode -> extractExpressions(filterNode).stream())\n  .flatMap(expression -> extractDynamicFilters(expression).getDynamicConjuncts().stream())\n  .filter(descriptor -> descriptor.getId().equals(dynamicFilterId))\n  .collect(toImmutableList();\nboolean sourceSymbolsMatch = matchingDescriptors.stream()\n  .map(descriptor -> Symbol.from(descriptor.getInput()))\n  .allMatch(sourceSymbol -> symbolAliases.get(sourceSymbolAlias).equals(sourceSymbol.toSymbolReference()));\nif (!matchingDescriptors.isEmpty() && sourceSymbolsMatch) {\n  ...\n}", "url": "https://github.com/trinodb/trino/pull/4942#discussion_r477202502", "createdAt": "2020-08-26T10:35:09Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/assertions/SemiJoinMatcher.java", "diffHunk": "@@ -64,6 +77,31 @@ public MatchResult detailMatches(PlanNode node, StatsProvider stats, Session ses\n             return NO_MATCH;\n         }\n \n+        if (hasDynamicFilter.isPresent()) {\n+            if (hasDynamicFilter.get()) {\n+                if (semiJoinNode.getDynamicFilterId().isEmpty()) {\n+                    return NO_MATCH;\n+                }\n+                DynamicFilterId dynamicFilterId = semiJoinNode.getDynamicFilterId().get();\n+                boolean dynamicFilterMatched = searchFrom(semiJoinNode.getSource())\n+                        .where(FilterNode.class::isInstance)\n+                        .findAll()\n+                        .stream()\n+                        .flatMap(filterNode -> extractExpressions(filterNode).stream())\n+                        .flatMap(expression -> extractDynamicFilters(expression).getDynamicConjuncts().stream())\n+                        .filter(descriptor -> descriptor.getId().equals(dynamicFilterId))\n+                        .map(descriptor -> Symbol.from(descriptor.getInput()))\n+                        .allMatch(sourceSymbol -> symbolAliases.get(sourceSymbolAlias).equals(sourceSymbol.toSymbolReference()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb21a6e00f61bb46930d5370a4fe5de7beff7af", "author": {"user": {"login": "lxynov", "name": "Xingyuan Lin"}}, "url": "https://github.com/trinodb/trino/commit/bdb21a6e00f61bb46930d5370a4fe5de7beff7af", "committedDate": "2020-08-26T17:21:02Z", "message": "Dynamic filtering for semi-joins: planner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bdb21a6e00f61bb46930d5370a4fe5de7beff7af", "author": {"user": {"login": "lxynov", "name": "Xingyuan Lin"}}, "url": "https://github.com/trinodb/trino/commit/bdb21a6e00f61bb46930d5370a4fe5de7beff7af", "committedDate": "2020-08-26T17:21:02Z", "message": "Dynamic filtering for semi-joins: planner"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4102, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}