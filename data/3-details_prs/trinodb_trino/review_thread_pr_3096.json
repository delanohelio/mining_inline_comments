{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MzczMjE1", "number": 3096, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzoyODoyNFrODoENKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo0OTo1MFrODpE61A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzM4NTM5OnYy", "diffSide": "RIGHT", "path": ".github/workflows/module-tests.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzoyODoyNFrOF2asrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzozMDoxNlrOF2atJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDg0NA==", "bodyText": "Nit: add trailing comma (keeps diffs clean when adding new lines)", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392604844", "createdAt": "2020-03-14T17:28:24Z", "author": {"login": "electrum"}, "path": ".github/workflows/module-tests.yml", "diffHunk": "@@ -114,6 +96,7 @@ jobs:\n           \"presto-redis\",\n           \"presto-sqlserver,presto-postgresql,presto-mysql\",\n           \"presto-phoenix,presto-iceberg\",\n+          \"presto-kudu\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDk2NA==", "bodyText": "added", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392604964", "createdAt": "2020-03-14T17:30:16Z", "author": {"login": "Praveen2112"}, "path": ".github/workflows/module-tests.yml", "diffHunk": "@@ -114,6 +96,7 @@ jobs:\n           \"presto-redis\",\n           \"presto-sqlserver,presto-postgresql,presto-mysql\",\n           \"presto-phoenix,presto-iceberg\",\n+          \"presto-kudu\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDg0NA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzM5NDYyOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzo0NjozMlrOF2axTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0Mjo1OVrOF3fbww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjAzMA==", "bodyText": "Move this above, to be directly after createQueryRunner", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392606030", "createdAt": "2020-03-14T17:46:32Z", "author": {"login": "electrum"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java", "diffHunk": "@@ -99,6 +103,13 @@ private void doTestCreateTableWithDecimalColumn(TestDecimal decimal)\n         assertEquals(0, actual, 0.3 * Math.pow(0.1, decimal.scale), \"p=\" + decimal.precision + \",s=\" + decimal.scale + \" => \" + actual + \",insert = \" + insertValue);\n     }\n \n+    @AfterClass(alwaysRun = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTAxMQ==", "bodyText": "ping", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393731011", "createdAt": "2020-03-17T14:42:59Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java", "diffHunk": "@@ -99,6 +103,13 @@ private void doTestCreateTableWithDecimalColumn(TestDecimal decimal)\n         assertEquals(0, actual, 0.3 * Math.pow(0.1, decimal.scale), \"p=\" + decimal.precision + \",s=\" + decimal.scale + \" => \" + actual + \",insert = \" + insertValue);\n     }\n \n+    @AfterClass(alwaysRun = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjAzMA=="}, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzM5NDc5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzo0NzowMlrOF2axZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0MzowN1rOF3fcLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjA1NA==", "bodyText": "This isn't needed as AbstractTestQueryFramework will close the returned query runner", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392606054", "createdAt": "2020-03-14T17:47:02Z", "author": {"login": "electrum"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java", "diffHunk": "@@ -99,6 +103,13 @@ private void doTestCreateTableWithDecimalColumn(TestDecimal decimal)\n         assertEquals(0, actual, 0.3 * Math.pow(0.1, decimal.scale), \"p=\" + decimal.precision + \",s=\" + decimal.scale + \" => \" + actual + \",insert = \" + insertValue);\n     }\n \n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        getQueryRunner().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTExOQ==", "bodyText": "ping", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393731119", "createdAt": "2020-03-17T14:43:07Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationDecimalColumns.java", "diffHunk": "@@ -99,6 +103,13 @@ private void doTestCreateTableWithDecimalColumn(TestDecimal decimal)\n         assertEquals(0, actual, 0.3 * Math.pow(0.1, decimal.scale), \"p=\" + decimal.precision + \",s=\" + decimal.scale + \" => \" + actual + \",insert = \" + insertValue);\n     }\n \n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        getQueryRunner().close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjA1NA=="}, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzM5NTY3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationSmoke.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzo0ODo1MFrOF2ax2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzo0ODo1MFrOF2ax2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjE2OQ==", "bodyText": "Let's move this method above and fix it by removing the redundant query runner close and the drop table. (no point in dropping since this is a temporary server we are about to destroy)", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392606169", "createdAt": "2020-03-14T17:48:50Z", "author": {"login": "electrum"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationSmoke.java", "diffHunk": "@@ -136,5 +139,6 @@ public final void destroy()\n     {\n         assertUpdate(\"DROP TABLE \" + ORDERS.getTableName());\n         getQueryRunner().close();\n+        kuduServer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzQzNjg0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduQueryRunnerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowNjozMFrOF2bGyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowNjozMFrOF2bGyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTUyOA==", "bodyText": "Accept HostAndPort instead of String", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611528", "createdAt": "2020-03-14T19:06:30Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduQueryRunnerFactory.java", "diffHunk": "@@ -98,20 +98,19 @@ private static String getSchemaEmulationPrefix()\n         return prefix;\n     }\n \n-    private static void installKuduConnector(QueryRunner runner, String schema)\n+    private static void installKuduConnector(String masterAddress, QueryRunner runner, String schema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzQzNzM5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowNzo0MVrOF2bHCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowNzo0MVrOF2bHCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTU5NA==", "bodyText": "No need for this log.", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611594", "createdAt": "2020-03-14T19:07:41Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,57 @@\n+\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.net.HostAndPort;\n+import io.airlift.log.Logger;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+\n+import static com.google.common.io.Resources.getResource;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static Logger log = Logger.get(KuduServer.class);\n+\n+    private static final int KUDU_MASTER_PORT = 7051;\n+    private static final int KUDU_TSERVER_PORT = 7050;\n+\n+    private final DockerComposeContainer<?> dockerComposeContainer;\n+\n+    public KuduServer()\n+    {\n+        log.info(\"Starting kudu...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzQzNzcwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowODowOFrOF2bHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowODowOFrOF2bHNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTYzOA==", "bodyText": "I would prefer to have two DockerContainer instances here instead of using docker-compose. See: io.prestosql.tests.product.launcher.env.common.Standard", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611638", "createdAt": "2020-03-14T19:08:08Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,57 @@\n+\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.net.HostAndPort;\n+import io.airlift.log.Logger;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+\n+import static com.google.common.io.Resources.getResource;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static Logger log = Logger.get(KuduServer.class);\n+\n+    private static final int KUDU_MASTER_PORT = 7051;\n+    private static final int KUDU_TSERVER_PORT = 7050;\n+\n+    private final DockerComposeContainer<?> dockerComposeContainer;\n+\n+    public KuduServer()\n+    {\n+        log.info(\"Starting kudu...\");\n+        dockerComposeContainer = new DockerComposeContainer(new File(getResource(\"docker-compose.yml\").getFile()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzQzODAwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowODo1NFrOF2bHWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowODo1NFrOF2bHWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTY3NQ==", "bodyText": "same comemnts", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611675", "createdAt": "2020-03-14T19:08:54Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java", "diffHunk": "@@ -79,4 +83,11 @@ private void doTestCreateTable(String tableName, @Language(\"SQL\") String createT\n         MaterializedResult result = computeActual(\"SELECT id FROM \" + tableName);\n         assertEquals(result.getRowCount(), 1);\n     }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        getQueryRunner().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzQzODExOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationIntegerColumns.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowOTowMlrOF2bHZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOTowOTowMlrOF2bHZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTY4Nw==", "bodyText": "ditto", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611687", "createdAt": "2020-03-14T19:09:02Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationIntegerColumns.java", "diffHunk": "@@ -92,6 +96,13 @@ private void doTestCreateTableWithIntegerColumn(TestInt test)\n         }\n     }\n \n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        getQueryRunner().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzQ0MDA1OnYy", "diffSide": "LEFT", "path": ".github/workflows/module-tests.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOToxMzowMlrOF2bIYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOToxMzowMlrOF2bIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMTkzNw==", "bodyText": "It looks like we are now losing some tests coverage. Not sure how much important is this. I wonder if it is possible to have some smoke tests to be executed 3 times for these cases, like having base smoke tests class for kudu and three different implementation with three different KuduServer. That requires that KuduServer need to be parametric.", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r392611937", "createdAt": "2020-03-14T19:13:02Z", "author": {"login": "kokosing"}, "path": ".github/workflows/module-tests.yml", "diffHunk": "@@ -52,24 +52,6 @@ jobs:\n             ./mvnw test -B -Dair.check.skip-all -pl presto-hive -P test-hive-glue\n           fi\n \n-  kudu-tests:\n-    runs-on: ubuntu-latest\n-    steps:\n-      - uses: actions/checkout@v1\n-      - uses: actions/setup-java@v1\n-        with:\n-          java-version: 8\n-      - name: Install Kudu Module\n-        run: |\n-          export MAVEN_OPTS=\"${MAVEN_INSTALL_OPTS}\"\n-          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl presto-kudu\n-      - name: Run Kudu Tests -- disable InferSchema\n-        run: presto-kudu/bin/run_kudu_tests.sh \"null\"\n-      - name: Run Kudu Tests -- enable InferSchema, empty prefix\n-        run: presto-kudu/bin/run_kudu_tests.sh \"\"\n-      - name: Run Kudu Tests -- enable InferSchema, standard prefix\n-        run: presto-kudu/bin/run_kudu_tests.sh \"presto::\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e05c33f56f2892c313114ed8244129b284ccae"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU2MjMyOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0MToxM1rOF3fW4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0MToxM1rOF3fW4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyOTc2MQ==", "bodyText": "TestingKuduCluster?", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393729761", "createdAt": "2020-03-17T14:41:13Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+\n+public class KuduServer", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU2NTk1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0MjowN1rOF3fZVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0MjowN1rOF3fZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMDM5MQ==", "bodyText": "Use Closer, so in case any container fail to stop, the other one is stopped.", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393730391", "createdAt": "2020-03-17T14:42:07Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static final Integer KUDU_MASTER_PORT = 7051;\n+    private static final Integer KUDU_TSERVER_PORT = 7050;\n+\n+    private final GenericContainer<?> masterContainer;\n+    private final List<GenericContainer<?>> tServerContainers;\n+\n+    public KuduServer(int numberOfReplica)\n+    {\n+        Network network = Network.newNetwork();\n+\n+        ImmutableList.Builder<GenericContainer<?>> tContainersBuilder = ImmutableList.builder();\n+        this.masterContainer = new GenericContainer<>(\"apache/kudu:1.10.0\")\n+                .withExposedPorts(KUDU_MASTER_PORT)\n+                .withCommand(\"master\")\n+                .withNetwork(network)\n+                .withNetworkAliases(\"kudu-master\")\n+                .withEnv(\"MASTER_ARGS\", \"--fs_wal_dir=/var/lib/kudu/master --use_hybrid_clock=false --default_num_replicas=\" + numberOfReplica);\n+\n+        for (int instance = 0; instance < numberOfReplica; instance++) {\n+            String instanceName = \"kudu-tserver-\" + instance;\n+            tContainersBuilder.add(new GenericContainer<>(\"apache/kudu:1.10.0\")\n+                    .withExposedPorts(KUDU_TSERVER_PORT)\n+                    .withCommand(\"tserver\")\n+                    .withEnv(\"KUDU_MASTERS\", \"kudu-master:\" + KUDU_MASTER_PORT)\n+                    .withNetwork(network)\n+                    .withNetworkAliases(\"kudu-tserver-\" + instance)\n+                    .dependsOn(masterContainer)\n+                    .withEnv(\"TSERVER_ARGS\", \"--fs_wal_dir=/var/lib/kudu/tserver --use_hybrid_clock=false --rpc_advertised_addresses=\" + instanceName));\n+        }\n+        this.tServerContainers = tContainersBuilder.build();\n+        masterContainer.start();\n+        tServerContainers.forEach(GenericContainer::start);\n+    }\n+\n+    public HostAndPort getMasterAddress()\n+    {\n+        return HostAndPort.fromParts(\n+                masterContainer.getContainerIpAddress(),\n+                masterContainer.getMappedPort(KUDU_MASTER_PORT));\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        tServerContainers.forEach(GenericContainer::stop);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU3MzU4OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0Mzo1N1rOF3feag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzo1NToyMVrOF3nqgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTY5MA==", "bodyText": "maybe use always 2, no need to pass parameter then.", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393731690", "createdAt": "2020-03-17T14:43:57Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static final Integer KUDU_MASTER_PORT = 7051;\n+    private static final Integer KUDU_TSERVER_PORT = 7050;\n+\n+    private final GenericContainer<?> masterContainer;\n+    private final List<GenericContainer<?>> tServerContainers;\n+\n+    public KuduServer(int numberOfReplica)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2NTg1Nw==", "bodyText": "We can't set an even number of replication", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393865857", "createdAt": "2020-03-17T17:55:21Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static final Integer KUDU_MASTER_PORT = 7051;\n+    private static final Integer KUDU_TSERVER_PORT = 7050;\n+\n+    private final GenericContainer<?> masterContainer;\n+    private final List<GenericContainer<?>> tServerContainers;\n+\n+    public KuduServer(int numberOfReplica)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTY5MA=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU3NDkyOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NDoyMFrOF3ffZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NDoyMFrOF3ffZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTk0Mw==", "bodyText": "s/masterContainer/master", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393731943", "createdAt": "2020-03-17T14:44:20Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static final Integer KUDU_MASTER_PORT = 7051;\n+    private static final Integer KUDU_TSERVER_PORT = 7050;\n+\n+    private final GenericContainer<?> masterContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU3NTQwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NDoyOFrOF3ffuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NDoyOFrOF3ffuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMjAyNA==", "bodyText": "s/tServerContainers/tServers?", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393732024", "createdAt": "2020-03-17T14:44:28Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static final Integer KUDU_MASTER_PORT = 7051;\n+    private static final Integer KUDU_TSERVER_PORT = 7050;\n+\n+    private final GenericContainer<?> masterContainer;\n+    private final List<GenericContainer<?>> tServerContainers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU3ODc5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NToxOVrOF3fh8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NToxOVrOF3fh8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMjU5Mw==", "bodyText": "No need to wrap this line", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393732593", "createdAt": "2020-03-17T14:45:19Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduServer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+\n+public class KuduServer\n+        implements Closeable\n+{\n+    private static final Integer KUDU_MASTER_PORT = 7051;\n+    private static final Integer KUDU_TSERVER_PORT = 7050;\n+\n+    private final GenericContainer<?> masterContainer;\n+    private final List<GenericContainer<?>> tServerContainers;\n+\n+    public KuduServer(int numberOfReplica)\n+    {\n+        Network network = Network.newNetwork();\n+\n+        ImmutableList.Builder<GenericContainer<?>> tContainersBuilder = ImmutableList.builder();\n+        this.masterContainer = new GenericContainer<>(\"apache/kudu:1.10.0\")\n+                .withExposedPorts(KUDU_MASTER_PORT)\n+                .withCommand(\"master\")\n+                .withNetwork(network)\n+                .withNetworkAliases(\"kudu-master\")\n+                .withEnv(\"MASTER_ARGS\", \"--fs_wal_dir=/var/lib/kudu/master --use_hybrid_clock=false --default_num_replicas=\" + numberOfReplica);\n+\n+        for (int instance = 0; instance < numberOfReplica; instance++) {\n+            String instanceName = \"kudu-tserver-\" + instance;\n+            tContainersBuilder.add(new GenericContainer<>(\"apache/kudu:1.10.0\")\n+                    .withExposedPorts(KUDU_TSERVER_PORT)\n+                    .withCommand(\"tserver\")\n+                    .withEnv(\"KUDU_MASTERS\", \"kudu-master:\" + KUDU_MASTER_PORT)\n+                    .withNetwork(network)\n+                    .withNetworkAliases(\"kudu-tserver-\" + instance)\n+                    .dependsOn(masterContainer)\n+                    .withEnv(\"TSERVER_ARGS\", \"--fs_wal_dir=/var/lib/kudu/tserver --use_hybrid_clock=false --rpc_advertised_addresses=\" + instanceName));\n+        }\n+        this.tServerContainers = tContainersBuilder.build();\n+        masterContainer.start();\n+        tServerContainers.forEach(GenericContainer::start);\n+    }\n+\n+    public HostAndPort getMasterAddress()\n+    {\n+        return HostAndPort.fromParts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU4MjM0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduQueryRunnerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NjowNFrOF3fkGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NjowNFrOF3fkGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMzE0NA==", "bodyText": "s/kuduSchema/kuduSchemaEmulationPrefix", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393733144", "createdAt": "2020-03-17T14:46:04Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/KuduQueryRunnerFactory.java", "diffHunk": "@@ -98,28 +97,27 @@ private static String getSchemaEmulationPrefix()\n         return prefix;\n     }\n \n-    private static void installKuduConnector(QueryRunner runner, String schema)\n+    private static void installKuduConnector(String masterAddress, QueryRunner runner, Optional<String> kuduSchema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU4NDI1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NjoyN1rOF3flSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NjoyN1rOF3flSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMzQ1MA==", "bodyText": "s/getKuduSchema/getKuduSchemaEmulationPrefix", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r393733450", "createdAt": "2020-03-17T14:46:27Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java", "diffHunk": "@@ -28,14 +29,25 @@\n import static io.prestosql.tpch.TpchTable.ORDERS;\n import static org.testng.Assert.assertTrue;\n \n-public class TestKuduIntegrationSmoke\n+public abstract class AbstractTestKuduIntegrationSmoke\n         extends AbstractTestIntegrationSmokeTest\n {\n+    private KuduServer kuduServer;\n+\n+    public abstract Optional<String> getKuduSchema();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mzg3MjU4OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMToxMzowMFrOF4AT1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMToxMzowMFrOF4AT1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2OTY1Mg==", "bodyText": "rename this class to AbstractKuduIntegrationSmokeTest", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r394269652", "createdAt": "2020-03-18T11:13:00Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/AbstractTestKuduIntegrationSmoke.java", "diffHunk": "@@ -28,14 +29,25 @@\n import static io.prestosql.tpch.TpchTable.ORDERS;\n import static org.testng.Assert.assertTrue;\n \n-public class TestKuduIntegrationSmoke\n+public abstract class AbstractTestKuduIntegrationSmoke", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d0fea98b17f0140591a2b221e8805c93c72dcf1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mzk4NjI2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestDisableInferSchemaSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo0OToxM1rOF4BdJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo0OToxM1rOF4BdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4ODQyMA==", "bodyText": "TestKuduSmokeTestWithDisabledInferSchema\nPlease same naming pattern for other tests too.", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r394288420", "createdAt": "2020-03-18T11:49:13Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestDisableInferSchemaSmokeTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import java.util.Optional;\n+\n+public class TestDisableInferSchemaSmokeTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d0fea98b17f0140591a2b221e8805c93c72dcf1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mzk4ODA0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo0OTo1MFrOF4Beaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo0OTo1MFrOF4Beaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4ODc0Nw==", "bodyText": "static imports", "url": "https://github.com/trinodb/trino/pull/3096#discussion_r394288747", "createdAt": "2020-03-18T11:49:50Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationHashPartitioning.java", "diffHunk": "@@ -17,18 +17,28 @@\n import io.prestosql.testing.MaterializedResult;\n import io.prestosql.testing.QueryRunner;\n import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.AfterClass;\n import org.testng.annotations.Test;\n \n import static org.testng.Assert.assertEquals;\n \n public class TestKuduIntegrationHashPartitioning\n         extends AbstractTestQueryFramework\n {\n+    private TestingKuduServer kuduServer;\n+\n     @Override\n     protected QueryRunner createQueryRunner()\n             throws Exception\n     {\n-        return KuduQueryRunnerFactory.createKuduQueryRunner(\"hash\");\n+        kuduServer = new TestingKuduServer();\n+        return KuduQueryRunnerFactory.createKuduQueryRunner(kuduServer, \"hash\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d0fea98b17f0140591a2b221e8805c93c72dcf1"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 585, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}