{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NjAxMzU4", "number": 5610, "title": "Implement SSLVerification parameter to JDBC driver", "bodyText": "Fixes #5246", "createdAt": "2020-10-20T08:47:50Z", "url": "https://github.com/trinodb/trino/pull/5610", "merged": true, "mergeCommit": {"oid": "304dce3620fe3f650e76ac9bea9737991c4ed231"}, "closed": true, "closedAt": "2020-10-28T09:00:02Z", "author": {"login": "choiwaiyiu"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUWuBZAFqTUxMjU4NTQ5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWnNiNgFqTUxNzU5Njc3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTg1NDk2", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-512585496", "createdAt": "2020-10-20T11:01:46Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTowMTo0N1rOHk2wzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTowMzo0NFrOHk21KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwODAxMg==", "bodyText": "Can we set it as a default value in AbstractConnectionProperty ?", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508408012", "createdAt": "2020-10-20T11:01:47Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -255,10 +262,12 @@ public Ssl()\n     {\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.FULL).equals(SslVerificationMode.NONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTEyOQ==", "bodyText": "Can we do a static import of setupInsecureSsl", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508409129", "createdAt": "2020-10-20T11:03:44Z", "author": {"login": "Praveen2112"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -216,14 +222,25 @@ public void setupClient(OkHttpClient.Builder builder)\n             }\n \n             if (useSecureConnection) {\n-                setupSsl(\n-                        builder,\n-                        SSL_KEY_STORE_PATH.getValue(properties),\n-                        SSL_KEY_STORE_PASSWORD.getValue(properties),\n-                        SSL_KEY_STORE_TYPE.getValue(properties),\n-                        SSL_TRUST_STORE_PATH.getValue(properties),\n-                        SSL_TRUST_STORE_PASSWORD.getValue(properties),\n-                        SSL_TRUST_STORE_TYPE.getValue(properties));\n+                SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValue(properties).orElse(FULL);\n+                if (sslVerificationMode.equals(FULL) || sslVerificationMode.equals(CA)) {\n+                    setupSsl(\n+                            builder,\n+                            SSL_KEY_STORE_PATH.getValue(properties),\n+                            SSL_KEY_STORE_PASSWORD.getValue(properties),\n+                            SSL_KEY_STORE_TYPE.getValue(properties),\n+                            SSL_TRUST_STORE_PATH.getValue(properties),\n+                            SSL_TRUST_STORE_PASSWORD.getValue(properties),\n+                            SSL_TRUST_STORE_TYPE.getValue(properties));\n+                }\n+\n+                if (sslVerificationMode.equals(CA)) {\n+                    builder.hostnameVerifier((hostname, session) -> true);\n+                }\n+\n+                if (sslVerificationMode.equals(NONE)) {\n+                    OkHttpUtil.setupInsecureSsl(builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjU4NDc3", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-512658477", "createdAt": "2020-10-20T12:37:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjozNzozN1rOHk6Lpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjo0NzowNVrOHk6klg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NDAzOA==", "bodyText": "you should use default value when SSL_VERIFICATION is not set explicitly. Also this predicate should be defined SslVerificationMode and reused instead of being copied 3 times.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508464038", "createdAt": "2020-10-20T12:37:37Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -303,10 +318,12 @@ public SslTrustStorePath()\n     {\n         private static final Predicate<Properties> IF_TRUST_STORE =\n                 checkedPredicate(properties -> SSL_TRUST_STORE_PATH.getValue(properties).isPresent());\n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.FULL).equals(SslVerificationMode.NONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2OTY1OQ==", "bodyText": "Please correct me if I am wrong. Key stores are not to used to verify SSL but to authenticate using SSL. So SSL verification should not affect this.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508469659", "createdAt": "2020-10-20T12:45:53Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -255,10 +262,12 @@ public Ssl()\n     {\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.FULL).equals(SslVerificationMode.NONE));\n \n         public SslKeyStorePath()\n         {\n-            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED, STRING_CONVERTER);\n+            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED.and(IF_SSL_VERIFICATION_ENABLED), STRING_CONVERTER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MDQyMg==", "bodyText": "you should use default value.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508470422", "createdAt": "2020-10-20T12:47:05Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -216,14 +222,25 @@ public void setupClient(OkHttpClient.Builder builder)\n             }\n \n             if (useSecureConnection) {\n-                setupSsl(\n-                        builder,\n-                        SSL_KEY_STORE_PATH.getValue(properties),\n-                        SSL_KEY_STORE_PASSWORD.getValue(properties),\n-                        SSL_KEY_STORE_TYPE.getValue(properties),\n-                        SSL_TRUST_STORE_PATH.getValue(properties),\n-                        SSL_TRUST_STORE_PASSWORD.getValue(properties),\n-                        SSL_TRUST_STORE_TYPE.getValue(properties));\n+                SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValue(properties).orElse(FULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzgzMzE0", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-513383314", "createdAt": "2020-10-21T07:33:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzozMzoxMVrOHleD5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0NToyMFrOHlegpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MTg3Nw==", "bodyText": "use static import for IF_SSL_VERIFICATION_ENABLED", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509051877", "createdAt": "2020-10-21T07:33:11Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -258,7 +270,7 @@ public Ssl()\n \n         public SslKeyStorePath()\n         {\n-            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED, STRING_CONVERTER);\n+            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED.and(SslVerificationMode.IF_SSL_VERIFICATION_ENABLED), STRING_CONVERTER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MzIzMA==", "bodyText": "why this one is defined here, and IF_SSL_VERIFICATION_ENABLED is defined elsewhere?", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509053230", "createdAt": "2020-10-21T07:35:28Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -318,7 +330,19 @@ public SslTrustStorePassword()\n \n         public SslTrustStoreType()\n         {\n-            super(\"SSLTrustStoreType\", NOT_REQUIRED, IF_TRUST_STORE, STRING_CONVERTER);\n+            super(\"SSLTrustStoreType\", NOT_REQUIRED, IF_TRUST_STORE.and(SslVerificationMode.IF_SSL_VERIFICATION_ENABLED), STRING_CONVERTER);\n+        }\n+    }\n+\n+    private static class SslVerification\n+            extends AbstractConnectionProperty<SslVerificationMode>\n+    {\n+        private static final Predicate<Properties> IF_SSL_ENABLED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NTA0MQ==", "bodyText": "it would be nice to replace\nSSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.valueOf(DEFAULTS.get(SSL_VERIFICATION.getKey())) with new SSL_VERIFICATION.getValueOrDefault(properties), that would require adding new method but it would be much readable.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509055041", "createdAt": "2020-10-21T07:38:33Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -41,6 +41,16 @@\n \n final class ConnectionProperties\n {\n+    enum SslVerificationMode\n+    {\n+        FULL,\n+        CA,\n+        NONE;\n+\n+        static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.valueOf(DEFAULTS.get(SSL_VERIFICATION.getKey()))).equals(SslVerificationMode.NONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NTczOA==", "bodyText": "I find removing properties hacky, I would prefer to modify logic below instead to handle mentioned cases.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509055738", "createdAt": "2020-10-21T07:39:43Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -105,6 +112,16 @@ private PrestoDriverUri(URI uri, Properties driverProperties)\n         address = HostAndPort.fromParts(uri.getHost(), uri.getPort());\n         properties = mergeConnectionProperties(uri, driverProperties);\n \n+        // Remove the default SSL_VERIFICATION property in the following cases in which SSL_VERIFICATION is not allowed", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NjM3Mg==", "bodyText": "it is unintuitive that this belongs to if (useSecureConnection) { block.\nI think we need to change the code and remove useSecureConnection and instead use sslVerificationMode", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509056372", "createdAt": "2020-10-21T07:40:41Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -216,14 +233,25 @@ public void setupClient(OkHttpClient.Builder builder)\n             }\n \n             if (useSecureConnection) {\n-                setupSsl(\n-                        builder,\n-                        SSL_KEY_STORE_PATH.getValue(properties),\n-                        SSL_KEY_STORE_PASSWORD.getValue(properties),\n-                        SSL_KEY_STORE_TYPE.getValue(properties),\n-                        SSL_TRUST_STORE_PATH.getValue(properties),\n-                        SSL_TRUST_STORE_PASSWORD.getValue(properties),\n-                        SSL_TRUST_STORE_TYPE.getValue(properties));\n+                SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.valueOf(getDefaults().get(SSL_VERIFICATION.getKey())));\n+                if (sslVerificationMode.equals(FULL) || sslVerificationMode.equals(CA)) {\n+                    setupSsl(\n+                            builder,\n+                            SSL_KEY_STORE_PATH.getValue(properties),\n+                            SSL_KEY_STORE_PASSWORD.getValue(properties),\n+                            SSL_KEY_STORE_TYPE.getValue(properties),\n+                            SSL_TRUST_STORE_PATH.getValue(properties),\n+                            SSL_TRUST_STORE_PASSWORD.getValue(properties),\n+                            SSL_TRUST_STORE_TYPE.getValue(properties));\n+                }\n+\n+                if (sslVerificationMode.equals(CA)) {\n+                    builder.hostnameVerifier((hostname, session) -> true);\n+                }\n+\n+                if (sslVerificationMode.equals(NONE)) {\n+                    setupInsecureSsl(builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1OTIzOQ==", "bodyText": "Ok, as I understand to goal is to make impossible to use SSL (certificate) authentication with SSLVerification=NONE.\n@electrum Do I understand this correctly?", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509059239", "createdAt": "2020-10-21T07:45:20Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -255,10 +262,12 @@ public Ssl()\n     {\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.FULL).equals(SslVerificationMode.NONE));\n \n         public SslKeyStorePath()\n         {\n-            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED, STRING_CONVERTER);\n+            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED.and(IF_SSL_VERIFICATION_ENABLED), STRING_CONVERTER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2OTY1OQ=="}, "originalCommit": null, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzkzMDc2", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-513393076", "createdAt": "2020-10-21T07:45:47Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NDI5NzY0", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-514429764", "createdAt": "2020-10-22T07:24:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzoyNDo0MVrOHmUA6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzozMzowN1rOHmUTdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzNTg0OQ==", "bodyText": "final?", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509935849", "createdAt": "2020-10-22T07:24:41Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractConnectionProperty.java", "diffHunk": "@@ -30,6 +30,7 @@\n {\n     private final String key;\n     private final Optional<String> defaultValue;\n+    private boolean isProvided;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzNjY2NQ==", "bodyText": "I don't like this field. It express the state of independent object  (Properties here in this case) and not actual property description. I think instead you should have local variable in the context of usage.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509936665", "createdAt": "2020-10-22T07:26:06Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractConnectionProperty.java", "diffHunk": "@@ -69,6 +71,18 @@ public String getKey()\n         return defaultValue;\n     }\n \n+    @Override\n+    public void setIsProvided(Properties properties)\n+    {\n+        isProvided = properties.containsKey(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzODc0Mg==", "bodyText": "let's not move existing properties.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509938742", "createdAt": "2020-10-22T07:29:50Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -196,9 +231,6 @@ public SocksProxy()\n     private static class HttpProxy\n             extends AbstractConnectionProperty<HostAndPort>\n     {\n-        private static final Predicate<Properties> NO_SOCKS_PROXY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzOTAyMQ==", "bodyText": "no need to wrap it in additional class.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509939021", "createdAt": "2020-10-22T07:30:12Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -34,13 +34,49 @@\n import static io.prestosql.client.ClientSelectedRole.Type.ALL;\n import static io.prestosql.client.ClientSelectedRole.Type.NONE;\n import static io.prestosql.jdbc.AbstractConnectionProperty.checkedPredicate;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_KEY_STORE;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_ENABLED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_VERIFICATION_ALLOWED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_VERIFICATION_ENABLED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_TRUST_STORE;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.NO_HTTP_PROXY;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.NO_SOCKS_PROXY;\n import static java.util.Collections.unmodifiableMap;\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n import static java.util.stream.Collectors.toMap;\n \n final class ConnectionProperties\n {\n+    enum SslVerificationMode\n+    {\n+        FULL, CA, NONE;\n+    }\n+\n+    static class Predicates", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzOTU1NQ==", "bodyText": "getValueOrDefault?", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509939555", "createdAt": "2020-10-22T07:31:09Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -215,7 +222,8 @@ public void setupClient(OkHttpClient.Builder builder)\n                 builder.addInterceptor(basicAuth(getUser(), password));\n             }\n \n-            if (useSecureConnection) {\n+            SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.valueOf(getDefaults().get(SSL_VERIFICATION.getKey())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MDU5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            checkedPredicate(properties -> SSL.isProvided() && SSL.getValue(properties).get() || !SSL_VERIFICATION.isProvided());\n          \n          \n            \n                            checkedPredicate(properties -> SSL.getValue(properties).isPresent() && SSL.getValue(properties).get() || !SSL_VERIFICATION.getValue(properties).isPresent());\n          \n      \n    \n    \n  \n\nNo need for isProvided", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509940599", "createdAt": "2020-10-22T07:33:07Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -34,13 +34,49 @@\n import static io.prestosql.client.ClientSelectedRole.Type.ALL;\n import static io.prestosql.client.ClientSelectedRole.Type.NONE;\n import static io.prestosql.jdbc.AbstractConnectionProperty.checkedPredicate;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_KEY_STORE;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_ENABLED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_VERIFICATION_ALLOWED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_VERIFICATION_ENABLED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_TRUST_STORE;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.NO_HTTP_PROXY;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.NO_SOCKS_PROXY;\n import static java.util.Collections.unmodifiableMap;\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n import static java.util.stream.Collectors.toMap;\n \n final class ConnectionProperties\n {\n+    enum SslVerificationMode\n+    {\n+        FULL, CA, NONE;\n+    }\n+\n+    static class Predicates\n+    {\n+        static final Predicate<Properties> IF_KEY_STORE =\n+                checkedPredicate(properties -> SSL_KEY_STORE_PATH.getValue(properties).isPresent());\n+\n+        static final Predicate<Properties> IF_SSL_ENABLED =\n+                checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n+\n+        static final Predicate<Properties> IF_SSL_VERIFICATION_ALLOWED =\n+                checkedPredicate(properties -> SSL.isProvided() && SSL.getValue(properties).get() || !SSL_VERIFICATION.isProvided());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTkxNjc1", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-514591675", "createdAt": "2020-10-22T10:42:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo0MjozNVrOHmbpfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo0MjozNVrOHmbpfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MDkyNA==", "bodyText": "If we set default values to SSL and SSL_VERIFICATION, the previous code will throw an exception in the following case:\n\nBoth of SSL and SSL_VERIFICATION are not provided in the URI or driver properties\nThe default values of SSL and SSL_VERIFICATION are merged into the variable properties\nSSL=false by default\nSSL=false and SSL_VERIFICATION in properties => java.sql.SQLException: Connection property 'SSLVerification' is not allowed\n\nI tried to solve this problem by first validating the provided properties, then merging the default properties into the variable properties without overwriting.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r510060924", "createdAt": "2020-10-22T10:42:35Z", "author": {"login": "choiwaiyiu"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -103,10 +109,14 @@ private PrestoDriverUri(URI uri, Properties driverProperties)\n     {\n         this.uri = requireNonNull(uri, \"uri is null\");\n         address = HostAndPort.fromParts(uri.getHost(), uri.getPort());\n-        properties = mergeConnectionProperties(uri, driverProperties);\n+        properties = mergeProvidedProperties(uri, driverProperties);\n+\n+        setSSLPropertyByPortIfNotProvided(properties, uri);\n \n         validateConnectionProperties(properties);\n \n+        setDefaultPropertiesIfNotProvided(properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NjA1OTA2", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-514605906", "createdAt": "2020-10-22T11:02:00Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowMjowMFrOHmcTjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowMjowMFrOHmcTjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3MTY5Mg==", "bodyText": "@kokosing I am not sure how to avoid calling orElse(FULL) after getValueOrDefault(properties).\nMay I ask for your advice? Thank you.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r510071692", "createdAt": "2020-10-22T11:02:00Z", "author": {"login": "choiwaiyiu"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -215,7 +225,8 @@ public void setupClient(OkHttpClient.Builder builder)\n                 builder.addInterceptor(basicAuth(getUser(), password));\n             }\n \n-            if (useSecureConnection) {\n+            SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValueOrDefault(properties).orElse(FULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTg4NzMy", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-516588732", "createdAt": "2020-10-26T09:19:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToxOTowN1rOHoGv4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyNTo1OFrOHoHAOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNTY1MQ==", "bodyText": "Please define this in SslVerification and reuse it.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511815651", "createdAt": "2020-10-26T09:19:07Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -256,9 +275,12 @@ public Ssl()\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n \n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNzg3MA==", "bodyText": "checkedPredicate(properties ->  !SSL_VERIFICATION.getValueOrDefault(properties).orElseThrow().equals(SslVerificationMode.NONE));\n\nWhat SSL_VERIFICATION.getValueOrDefault(properties).isEmpty() would mean? NONE or FULL. I think we require a value here, we cannot evaluate this predicate to false if value is not set as that would mean NONE.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511817870", "createdAt": "2020-10-26T09:22:52Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -256,9 +275,12 @@ public Ssl()\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n \n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> SSL_VERIFICATION.getValueOrDefault(properties).isPresent() && !SSL_VERIFICATION.getValueOrDefault(properties).get().equals(SslVerificationMode.NONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxOTgzMg==", "bodyText": "you changed the logic here. Previously port could influence if SSL is enabled, now SSL is changing the port. Please revert that change.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511819832", "createdAt": "2020-10-26T09:25:58Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -103,12 +109,17 @@ private PrestoDriverUri(URI uri, Properties driverProperties)\n     {\n         this.uri = requireNonNull(uri, \"uri is null\");\n         address = HostAndPort.fromParts(uri.getHost(), uri.getPort());\n-        properties = mergeConnectionProperties(uri, driverProperties);\n+        properties = mergeProvidedProperties(uri, driverProperties);\n+\n+        setSSLPropertyByPortIfNotProvided(properties, uri);\n \n         validateConnectionProperties(properties);\n \n+        setDefaultPropertiesIfNotProvided(properties);\n+\n         // enable SSL by default for standard port\n-        useSecureConnection = SSL.getValue(properties).orElse(uri.getPort() == 443);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjQ3OTI0", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-516647924", "createdAt": "2020-10-26T10:35:43Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDozNTo0NFrOHoJmOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDo0NjoyNVrOHoJ-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MjMzMA==", "bodyText": "SSL_VERIFICATION is expected to have a default value.\n\nYes, so SSL_VERIFICATION.getValueOrDefault(properties).isPresent() is not needed here.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511862330", "createdAt": "2020-10-26T10:35:44Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -256,9 +275,12 @@ public Ssl()\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n \n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> SSL_VERIFICATION.getValueOrDefault(properties).isPresent() && !SSL_VERIFICATION.getValueOrDefault(properties).get().equals(SslVerificationMode.NONE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNzg3MA=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2Mjg1OQ==", "bodyText": "Why this method was renamed?", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511862859", "createdAt": "2020-10-26T10:36:35Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -103,12 +109,17 @@ private PrestoDriverUri(URI uri, Properties driverProperties)\n     {\n         this.uri = requireNonNull(uri, \"uri is null\");\n         address = HostAndPort.fromParts(uri.getHost(), uri.getPort());\n-        properties = mergeConnectionProperties(uri, driverProperties);\n+        properties = mergeProvidedProperties(uri, driverProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2NTAzOA==", "bodyText": "Please use org.assertj.core.api.Assertions.assertThatThrownBy; instead of expectedExceptions", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511865038", "createdAt": "2020-10-26T10:40:11Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDriverAuth.java", "diffHunk": "@@ -230,6 +230,126 @@ public void testFailedUnknownPublicKey()\n         }\n     }\n \n+    @Test\n+    public void testSuccessFullSslVerification()\n+            throws Exception\n+    {\n+        String accessToken = Jwts.builder()\n+                .setSubject(\"test\")\n+                .setHeaderParam(KEY_ID, \"33\")\n+                .signWith(SignatureAlgorithm.RS256, privateKey33)\n+                .compact();\n+\n+        try (Connection connection = createConnection(ImmutableMap.of(\"accessToken\", accessToken, \"SSLVerification\", \"FULL\"))) {\n+            try (Statement statement = connection.createStatement()) {\n+                assertTrue(statement.execute(\"SELECT 123\"));\n+                ResultSet rs = statement.getResultSet();\n+                assertTrue(rs.next());\n+                assertEquals(rs.getLong(1), 123);\n+                assertFalse(rs.next());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testSuccessCaSslVerification()\n+            throws Exception\n+    {\n+        String accessToken = Jwts.builder()\n+                .setSubject(\"test\")\n+                .setHeaderParam(KEY_ID, \"33\")\n+                .signWith(SignatureAlgorithm.RS256, privateKey33)\n+                .compact();\n+\n+        try (Connection connection = createConnection(ImmutableMap.of(\"accessToken\", accessToken, \"SSLVerification\", \"CA\"))) {\n+            try (Statement statement = connection.createStatement()) {\n+                assertTrue(statement.execute(\"SELECT 123\"));\n+                ResultSet rs = statement.getResultSet();\n+                assertTrue(rs.next());\n+                assertEquals(rs.getLong(1), 123);\n+                assertFalse(rs.next());\n+            }\n+        }\n+    }\n+\n+    // TODO: testSuccessCaSslVerificationMismatchedHostnameValidCA()\n+\n+    // TODO: testSuccessNoneSslVerificationMismatchedHostname()\n+\n+    // TODO: testSuccessNoneSslVerificationInvalidCA()\n+\n+    @Test(expectedExceptions = SQLException.class, expectedExceptionsMessageRegExp = \"Connection property 'SSLVerification' is not allowed\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2NzYzNQ==", "bodyText": "Maybe SSL_VERIFICATION should not have default value then or be ignored when SSL=false?", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511867635", "createdAt": "2020-10-26T10:44:42Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -103,10 +109,14 @@ private PrestoDriverUri(URI uri, Properties driverProperties)\n     {\n         this.uri = requireNonNull(uri, \"uri is null\");\n         address = HostAndPort.fromParts(uri.getHost(), uri.getPort());\n-        properties = mergeConnectionProperties(uri, driverProperties);\n+        properties = mergeProvidedProperties(uri, driverProperties);\n+\n+        setSSLPropertyByPortIfNotProvided(properties, uri);\n \n         validateConnectionProperties(properties);\n \n+        setDefaultPropertiesIfNotProvided(properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MDkyNA=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2NzcyNw==", "bodyText": "This affects mergeProvidedProperties and things that were overwritten there will be no longer overwritten.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511867727", "createdAt": "2020-10-26T10:44:51Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -359,16 +389,23 @@ private static Properties mergeConnectionProperties(URI uri, Properties driverPr\n         }\n \n         Properties result = new Properties();\n-        setProperties(result, defaults);\n         setProperties(result, urlProperties);\n         setProperties(result, suppliedProperties);\n         return result;\n     }\n \n+    private static void setDefaultPropertiesIfNotProvided(Properties properties)\n+    {\n+        Map<String, String> defaults = ConnectionProperties.getDefaults();\n+        setProperties(properties, defaults);\n+    }\n+\n     private static void setProperties(Properties properties, Map<String, String> values)\n     {\n         for (Entry<String, String> entry : values.entrySet()) {\n-            properties.setProperty(entry.getKey(), entry.getValue());\n+            if (!properties.containsKey(entry.getKey())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2ODY1Nw==", "bodyText": "I would prefer to have this code to work as it worked previously that defaults are overwritten instead of added later.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511868657", "createdAt": "2020-10-26T10:46:25Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -359,16 +389,23 @@ private static Properties mergeConnectionProperties(URI uri, Properties driverPr\n         }\n \n         Properties result = new Properties();\n-        setProperties(result, defaults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3Mzg3NDU0", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-517387454", "createdAt": "2020-10-27T06:45:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjo0NToyNFrOHotZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjo0NToyNFrOHotZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0ODgwNQ==", "bodyText": "Static import is not applied to SslVerificationMode.FULL and SslVerificationMode.NONE as io.prestosql.client.ClientSelectedRole.Type.NONE has already been imported.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r512448805", "createdAt": "2020-10-27T06:45:24Z", "author": {"login": "choiwaiyiu"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -250,15 +257,27 @@ public Ssl()\n         }\n     }\n \n-    private static class SslKeyStorePath\n-            extends AbstractConnectionProperty<String>\n+    private static class SslVerification\n+            extends AbstractConnectionProperty<SslVerificationMode>\n     {\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n \n+        static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                IF_SSL_ENABLED.and(checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.FULL).equals(SslVerificationMode.NONE)));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDQ2Mzcz", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-517446373", "createdAt": "2020-10-27T08:25:39Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyNTozOVrOHowM7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyNTozOVrOHowM7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NDgzMQ==", "bodyText": "Can you please add a test where port 443 is used and when there is no SSL=true given but SSLVerification is set.", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r512494831", "createdAt": "2020-10-27T08:25:39Z", "author": {"login": "kokosing"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDriverUri.java", "diffHunk": "@@ -234,6 +266,39 @@ public void testUriWithSslEnabledPassword()\n         assertEquals(properties.getProperty(SSL_TRUST_STORE_PASSWORD.getKey()), \"password\");\n     }\n \n+    @Test\n+    public void testUriWithSslEnabledUsing443SslVerificationFull()\n+            throws SQLException\n+    {\n+        PrestoDriverUri parameters = createDriverUri(\"presto://localhost:443/blackhole?SSL=true&SSLVerification=FULL\");\n+        assertUriPortScheme(parameters, 443, \"https\");\n+\n+        Properties properties = parameters.getProperties();\n+        assertEquals(properties.getProperty(SSL_VERIFICATION.getKey()), FULL.name());\n+    }\n+\n+    @Test\n+    public void testUriWithSslEnabledUsing443SslVerificationCA()\n+            throws SQLException\n+    {\n+        PrestoDriverUri parameters = createDriverUri(\"presto://localhost:443/blackhole?SSL=true&SSLVerification=CA\");\n+        assertUriPortScheme(parameters, 443, \"https\");\n+\n+        Properties properties = parameters.getProperties();\n+        assertEquals(properties.getProperty(SSL_VERIFICATION.getKey()), CA.name());\n+    }\n+\n+    @Test\n+    public void testUriWithSslEnabledUsing443SslVerificationNONE()\n+            throws SQLException\n+    {\n+        PrestoDriverUri parameters = createDriverUri(\"presto://localhost:443/blackhole?SSL=true&SSLVerification=NONE\");\n+        assertUriPortScheme(parameters, 443, \"https\");\n+\n+        Properties properties = parameters.getProperties();\n+        assertEquals(properties.getProperty(SSL_VERIFICATION.getKey()), NONE.name());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe8573a0b8582a41b90dfd5cd60bd973882eb60", "author": {"user": {"login": "choiwaiyiu", "name": "CHOI Wai Yiu"}}, "url": "https://github.com/trinodb/trino/commit/9fe8573a0b8582a41b90dfd5cd60bd973882eb60", "committedDate": "2020-10-27T08:50:14Z", "message": "Implement SSLVerification parameter to JDBC drive"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9fe8573a0b8582a41b90dfd5cd60bd973882eb60", "author": {"user": {"login": "choiwaiyiu", "name": "CHOI Wai Yiu"}}, "url": "https://github.com/trinodb/trino/commit/9fe8573a0b8582a41b90dfd5cd60bd973882eb60", "committedDate": "2020-10-27T08:50:14Z", "message": "Implement SSLVerification parameter to JDBC drive"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTk2Nzcz", "url": "https://github.com/trinodb/trino/pull/5610#pullrequestreview-517596773", "createdAt": "2020-10-27T11:24:39Z", "commit": {"oid": "9fe8573a0b8582a41b90dfd5cd60bd973882eb60"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3017, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}