{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NjcxNTcy", "number": 3479, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNjoxMTo0M1rODzbB3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzoxNzoxM1rODzuMkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjQ2ODEzOnYy", "diffSide": "LEFT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcDiagnosticModule.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNjoxMTo0M1rOGH5p9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoyMDowM1rOGIIvgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzg0NA==", "bodyText": "What was wrong?", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r410937844", "createdAt": "2020-04-19T16:11:43Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcDiagnosticModule.java", "diffHunk": "@@ -58,21 +58,19 @@ public void configure(Binder binder)\n     @StatsCollecting\n     public JdbcClient createJdbcClientWithStats(@ForBaseJdbc JdbcClient client)\n     {\n-        StatisticsAwareJdbcClient statisticsAwareJdbcClient = new StatisticsAwareJdbcClient(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzOTI4MA==", "bodyText": "It looks like StatisticsAwareJdbcClient#getStats is not exposed in JMX so the actual stats are not exposed\nBefore\n   Column    |  Type   | Extra | Comment\n-------------+---------+-------+---------\n node        | varchar |       |\n object_name | varchar |       |\n\nAfter\n                         Column                          |  Type   | Extra | Comment\n---------------------------------------------------------+---------+-------+---------\n abortreadconnection.failures.fifteenminute.count        | double  |       |\n abortreadconnection.failures.fifteenminute.rate         | double  |       |\n abortreadconnection.failures.fiveminute.count           | double  |       |", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r410939280", "createdAt": "2020-04-19T16:19:34Z", "author": {"login": "Praveen2112"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcDiagnosticModule.java", "diffHunk": "@@ -58,21 +58,19 @@ public void configure(Binder binder)\n     @StatsCollecting\n     public JdbcClient createJdbcClientWithStats(@ForBaseJdbc JdbcClient client)\n     {\n-        StatisticsAwareJdbcClient statisticsAwareJdbcClient = new StatisticsAwareJdbcClient(client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzg0NA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNTUxOA==", "bodyText": "Can you please add a test for that?\nOr even better it would be to add a trap for things like that. Do you exact reasaon why stats were not exposed? Like not allowing to use newExporter when bean does not expose method with @Managed?", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411105518", "createdAt": "2020-04-20T05:38:29Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcDiagnosticModule.java", "diffHunk": "@@ -58,21 +58,19 @@ public void configure(Binder binder)\n     @StatsCollecting\n     public JdbcClient createJdbcClientWithStats(@ForBaseJdbc JdbcClient client)\n     {\n-        StatisticsAwareJdbcClient statisticsAwareJdbcClient = new StatisticsAwareJdbcClient(client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzg0NA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMTUyMg==", "bodyText": "It didn't work because the StatisticsAwareJdbcClient instance was not a bean (never exposed at guice DI level) and so it could not get exported.", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411131522", "createdAt": "2020-04-20T06:44:31Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcDiagnosticModule.java", "diffHunk": "@@ -58,21 +58,19 @@ public void configure(Binder binder)\n     @StatsCollecting\n     public JdbcClient createJdbcClientWithStats(@ForBaseJdbc JdbcClient client)\n     {\n-        StatisticsAwareJdbcClient statisticsAwareJdbcClient = new StatisticsAwareJdbcClient(client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzg0NA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NTAyNg==", "bodyText": "Stats do not get exposed automatically, we expose them using newExporter(..).... This code was called but StatisticsAwareJdbcClient was wrapped so annotated methods with @Managed were not accessible. It would be nice to have something to prevent such bugs.", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411185026", "createdAt": "2020-04-20T08:20:03Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcDiagnosticModule.java", "diffHunk": "@@ -58,21 +58,19 @@ public void configure(Binder binder)\n     @StatsCollecting\n     public JdbcClient createJdbcClientWithStats(@ForBaseJdbc JdbcClient client)\n     {\n-        StatisticsAwareJdbcClient statisticsAwareJdbcClient = new StatisticsAwareJdbcClient(client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzg0NA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQwODM3OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcModule.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMToyMFrOGISGyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzoxNTo0MFrOGIT4Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODQ0Mw==", "bodyText": "Why?", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411338443", "createdAt": "2020-04-20T12:31:20Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcModule.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n import static java.lang.String.format;\n \n-class TestingH2JdbcModule\n+public class TestingH2JdbcModule", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NTkyMA==", "bodyText": "Previously it was package protected so we cant access in our JmxTest or we have to move JmxTest to a different package", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411355920", "createdAt": "2020-04-20T12:58:35Z", "author": {"login": "Praveen2112"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcModule.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n import static java.lang.String.format;\n \n-class TestingH2JdbcModule\n+public class TestingH2JdbcModule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODQ0Mw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NzQ5MA==", "bodyText": "Please move JmxTest to different package. I don't think we need separate package for single test, do we? Otherwise please squash commits.", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411367490", "createdAt": "2020-04-20T13:15:40Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcModule.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n import static java.lang.String.format;\n \n-class TestingH2JdbcModule\n+public class TestingH2JdbcModule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODQ0Mw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQwOTY3OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMTo0MVrOGISHnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo1ODo0MlrOGITLTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODY1Mw==", "bodyText": "just throws Exception?", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411338653", "createdAt": "2020-04-20T12:31:41Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc.jmx;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.jdbc.JdbcPlugin;\n+import io.prestosql.plugin.jdbc.TestingH2JdbcModule;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.testing.TestingConnectorContext;\n+import org.assertj.core.util.Arrays;\n+import org.testng.annotations.Test;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestJmxStats\n+{\n+    @Test\n+    public void testJmxStatsExposure()\n+            throws MalformedObjectNameException, IntrospectionException, InstanceNotFoundException, ReflectionException", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NTk4MQ==", "bodyText": "Modified", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411355981", "createdAt": "2020-04-20T12:58:42Z", "author": {"login": "Praveen2112"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc.jmx;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.jdbc.JdbcPlugin;\n+import io.prestosql.plugin.jdbc.TestingH2JdbcModule;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.testing.TestingConnectorContext;\n+import org.assertj.core.util.Arrays;\n+import org.testng.annotations.Test;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestJmxStats\n+{\n+    @Test\n+    public void testJmxStatsExposure()\n+            throws MalformedObjectNameException, IntrospectionException, InstanceNotFoundException, ReflectionException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODY1Mw=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQxMDkxOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMTo1OFrOGISIUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo1ODo1MFrOGITL0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODgzMw==", "bodyText": "Please remove this for", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411338833", "createdAt": "2020-04-20T12:31:58Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc.jmx;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.jdbc.JdbcPlugin;\n+import io.prestosql.plugin.jdbc.TestingH2JdbcModule;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.testing.TestingConnectorContext;\n+import org.assertj.core.util.Arrays;\n+import org.testng.annotations.Test;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestJmxStats\n+{\n+    @Test\n+    public void testJmxStatsExposure()\n+            throws MalformedObjectNameException, IntrospectionException, InstanceNotFoundException, ReflectionException\n+    {\n+        Plugin plugin = new JdbcPlugin(\"base-jdbc\", new TestingH2JdbcModule());\n+        ConnectorFactory factory = getOnlyElement(plugin.getConnectorFactories());\n+        factory.create(\"test\", ImmutableMap.of(\"connection-url\", \"jdbc\"), new TestingConnectorContext());\n+        MBeanServer mbeanServer = getPlatformMBeanServer();\n+        for (String domainName : mbeanServer.getDomains()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NjExMg==", "bodyText": "Removed it", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411356112", "createdAt": "2020-04-20T12:58:50Z", "author": {"login": "Praveen2112"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc.jmx;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.jdbc.JdbcPlugin;\n+import io.prestosql.plugin.jdbc.TestingH2JdbcModule;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.testing.TestingConnectorContext;\n+import org.assertj.core.util.Arrays;\n+import org.testng.annotations.Test;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestJmxStats\n+{\n+    @Test\n+    public void testJmxStatsExposure()\n+            throws MalformedObjectNameException, IntrospectionException, InstanceNotFoundException, ReflectionException\n+    {\n+        Plugin plugin = new JdbcPlugin(\"base-jdbc\", new TestingH2JdbcModule());\n+        ConnectorFactory factory = getOnlyElement(plugin.getConnectorFactories());\n+        factory.create(\"test\", ImmutableMap.of(\"connection-url\", \"jdbc\"), new TestingConnectorContext());\n+        MBeanServer mbeanServer = getPlatformMBeanServer();\n+        for (String domainName : mbeanServer.getDomains()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODgzMw=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQxMzUzOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMjozN1rOGISJ4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMjozN1rOGISJ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzOTIzMw==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411339233", "createdAt": "2020-04-20T12:32:37Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc.jmx;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.jdbc.JdbcPlugin;\n+import io.prestosql.plugin.jdbc.TestingH2JdbcModule;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.testing.TestingConnectorContext;\n+import org.assertj.core.util.Arrays;\n+import org.testng.annotations.Test;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestJmxStats\n+{\n+    @Test\n+    public void testJmxStatsExposure()\n+            throws MalformedObjectNameException, IntrospectionException, InstanceNotFoundException, ReflectionException\n+    {\n+        Plugin plugin = new JdbcPlugin(\"base-jdbc\", new TestingH2JdbcModule());\n+        ConnectorFactory factory = getOnlyElement(plugin.getConnectorFactories());\n+        factory.create(\"test\", ImmutableMap.of(\"connection-url\", \"jdbc\"), new TestingConnectorContext());\n+        MBeanServer mbeanServer = getPlatformMBeanServer();\n+        for (String domainName : mbeanServer.getDomains()) {\n+            System.out.println(domainName);\n+        }\n+        for (ObjectName objectName : mbeanServer.queryNames(new ObjectName(\"io.prestosql.plugin.jdbc:*\"), null)) {\n+            MBeanInfo mbeanInfo = mbeanServer.getMBeanInfo(objectName);\n+            assertFalse(Arrays.isNullOrEmpty(mbeanInfo.getAttributes()), format(\"Object %s doesn't expose JMX stats\", objectName.getCanonicalName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQxNTgwOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMzoxNVrOGISLTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo1OTowMVrOGITMWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzOTU5Nw==", "bodyText": "Is this test failing without changes in presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcDiagnosticModule.java?", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411339597", "createdAt": "2020-04-20T12:33:15Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc.jmx;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.jdbc.JdbcPlugin;\n+import io.prestosql.plugin.jdbc.TestingH2JdbcModule;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.testing.TestingConnectorContext;\n+import org.assertj.core.util.Arrays;\n+import org.testng.annotations.Test;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestJmxStats\n+{\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NjI1MQ==", "bodyText": "Yes", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411356251", "createdAt": "2020-04-20T12:59:01Z", "author": {"login": "Praveen2112"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc.jmx;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.jdbc.JdbcPlugin;\n+import io.prestosql.plugin.jdbc.TestingH2JdbcModule;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.testing.TestingConnectorContext;\n+import org.assertj.core.util.Arrays;\n+import org.testng.annotations.Test;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestJmxStats\n+{\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzOTU5Nw=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTYwODQ4OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzoxNzoxM1rOGIT8jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzoxNzoxM1rOGIT8jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2ODU4OA==", "bodyText": "Please make sure that mbeanServer.queryNames(new ObjectName(\"io.prestosql.plugin.jdbc:*\") does not return empty list. Also please verify that few that we care of are there (jdbc client and coonnection factory)", "url": "https://github.com/trinodb/trino/pull/3479#discussion_r411368588", "createdAt": "2020-04-20T13:17:13Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/jmx/TestJmxStats.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc.jmx;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.plugin.jdbc.JdbcPlugin;\n+import io.prestosql.plugin.jdbc.TestingH2JdbcModule;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.testing.TestingConnectorContext;\n+import org.testng.annotations.Test;\n+\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.ObjectName;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.lang.management.ManagementFactory.getPlatformMBeanServer;\n+import static org.assertj.core.util.Arrays.isNullOrEmpty;\n+import static org.testng.Assert.assertFalse;\n+\n+public class TestJmxStats\n+{\n+    @Test\n+    public void testJmxStatsExposure()\n+            throws Exception\n+    {\n+        Plugin plugin = new JdbcPlugin(\"base-jdbc\", new TestingH2JdbcModule());\n+        ConnectorFactory factory = getOnlyElement(plugin.getConnectorFactories());\n+        factory.create(\"test\", ImmutableMap.of(\"connection-url\", \"jdbc\"), new TestingConnectorContext());\n+        MBeanServer mbeanServer = getPlatformMBeanServer();\n+        for (ObjectName objectName : mbeanServer.queryNames(new ObjectName(\"io.prestosql.plugin.jdbc:*\"), null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 180, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}