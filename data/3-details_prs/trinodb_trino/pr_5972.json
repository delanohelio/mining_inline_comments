{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNzI2Njg1", "number": 5972, "title": "Expand BenchmarkBlockSerde", "bodyText": "Add more block types - Int96, int, short and byte\nAdd variable amount of nulls as a parameter.\nThere are no changes in the actual implementations or tests.", "createdAt": "2020-11-16T15:11:39Z", "url": "https://github.com/trinodb/trino/pull/5972", "merged": true, "mergeCommit": {"oid": "930a3c8f3a0bb9a8cc7a1e9b03040bb301c5f0d8"}, "closed": true, "closedAt": "2020-11-23T11:55:09Z", "author": {"login": "skrzypo987"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddGrl4gFqTUzMTQyNzkzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfT09oAFqTUzNjQwMzg4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNDI3OTM5", "url": "https://github.com/trinodb/trino/pull/5972#pullrequestreview-531427939", "createdAt": "2020-11-16T15:26:53Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyNjo1M1rOH0D3NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyNjo1M1rOH0D3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MTI4NA==", "bodyText": "Not introduced in this PR, but this should use the regular PagesSerdeFactory instead of TestingPagesSerdeFactory since the testing version produces a PagesSerde that includes extra synchronization that might be material in the benchmark results.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r524351284", "createdAt": "2020-11-16T15:26:53Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -187,30 +292,20 @@ public void setup(Iterator<Page> pagesIterator)\n             dataSource = sliceOutput.slice();\n         }\n \n-        public void setup(Type type, Iterator<?> values)\n+        public <T> void setup(Type type, Iterator<T> values, BiConsumer<BlockBuilder, T> writer)\n                 throws Exception\n         {\n             pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 195}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTIyMDc3", "url": "https://github.com/trinodb/trino/pull/5972#pullrequestreview-532122077", "createdAt": "2020-11-17T08:27:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoyNzo1M1rOH0pc8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODozMDozOFrOH0pjmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NzE1NQ==", "bodyText": "Commit message is ambiguous. Can you please be more specific?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r524967155", "createdAt": "2020-11-17T08:27:53Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -27,7 +27,6 @@\n import io.prestosql.spi.type.Decimals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2ODg1OQ==", "bodyText": "Is it possible to use composition instead? So you would have single TypeBenchmarkData class to which you would inject customizations.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r524968859", "createdAt": "2020-11-17T08:30:38Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -245,44 +237,38 @@ public Slice getDataSource()\n         }\n     }\n \n-    @State(Thread)\n-    public static class LongDecimalNoNullBenchmarkData\n+    public abstract static class TypeBenchmarkData<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTY5MzI4", "url": "https://github.com/trinodb/trino/pull/5972#pullrequestreview-532169328", "createdAt": "2020-11-17T09:26:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyNjoxMVrOH0ruMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozMDo1NlrOH0r7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNDMzNw==", "bodyText": "@pettyjamesm we don't use synchronized factory here. Synchronized factory is only used when io.prestosql.execution.buffer.TestingPagesSerdeFactory#testingPagesSerde is used. It's not used here", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r525004337", "createdAt": "2020-11-17T09:26:11Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -187,30 +292,20 @@ public void setup(Iterator<Page> pagesIterator)\n             dataSource = sliceOutput.slice();\n         }\n \n-        public void setup(Type type, Iterator<?> values)\n+        public <T> void setup(Type type, Iterator<T> values, BiConsumer<BlockBuilder, T> writer)\n                 throws Exception\n         {\n             pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MTI4NA=="}, "originalCommit": null, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNTI1MQ==", "bodyText": "These benchmarks were intentionally similar to BenchmarkColumnReaders. Could we keep them uniform? This most likely requires extraction of datagen to some external utility. However, we could then also benchmark Parquet in similar way and do head-to-head comparisons with different serde.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r525005251", "createdAt": "2020-11-17T09:27:26Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -50,6 +49,8 @@\n import java.util.List;\n import java.util.Random;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjY2MA==", "bodyText": "Could we extract data generation, so that new way of data gen is also used in io.prestosql.orc.BenchmarkColumnReaders (and potentially Parquet too)?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r525006660", "createdAt": "2020-11-17T09:29:29Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -384,10 +385,13 @@ public void setup()\n     public static class LongDecimalWithNullBenchmarkData\n             extends LongDecimalBenchmarkData\n     {\n+        @Param({\".01\", \".10\", \".50\", \".90\", \".99\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNzc1Mg==", "bodyText": "you can remove constructor in TestingPagesSerdeFactory too", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r525007752", "createdAt": "2020-11-17T09:30:56Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -284,7 +284,7 @@ public Object deserializeLineitem(LineitemBenchmarkData data)\n         public void setup(Iterator<Page> pagesIterator)\n                 throws Exception\n         {\n-            pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();\n+            pagesSerde = new PagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MzY2MTUw", "url": "https://github.com/trinodb/trino/pull/5972#pullrequestreview-534366150", "createdAt": "2020-11-19T12:06:17Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjY2Mjgx", "url": "https://github.com/trinodb/trino/pull/5972#pullrequestreview-535266281", "createdAt": "2020-11-20T09:35:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozNTo0OVrOH3ICiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0ODozMVrOH3IgGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NTQ0OA==", "bodyText": "Sure, we can do this as following PR", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527565448", "createdAt": "2020-11-20T09:35:49Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -50,6 +49,8 @@\n import java.util.List;\n import java.util.Random;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNTI1MQ=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NzgzNg==", "bodyText": "why not just pass null change as TypeBenchmarkData param?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527567836", "createdAt": "2020-11-20T09:39:55Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -245,44 +237,38 @@ public Slice getDataSource()\n         }\n     }\n \n-    @State(Thread)\n-    public static class LongDecimalNoNullBenchmarkData\n+    public abstract static class TypeBenchmarkData<T>\n             extends BenchmarkData\n     {\n-        @Setup\n-        public void setup()\n-                throws Exception\n+        private final Type type;\n+        private final Function<Random, T> valueGenerator;\n+        private final BiConsumer<BlockBuilder, T> blockWriter;\n+\n+        public TypeBenchmarkData(Type type, Function<Random, T> valueGenerator, BiConsumer<BlockBuilder, T> blockWriter)\n         {\n-            setup(LONG_DECIMAL_TYPE, createValues());\n+            this.type = requireNonNull(type, \"type is null\");\n+            this.valueGenerator = requireNonNull(valueGenerator, \"valueGenerator is null\");\n+            this.blockWriter = requireNonNull(blockWriter, \"blockWriter is null\");\n         }\n \n-        private Iterator<?> createValues()\n+        protected double getNullChance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2OTI3Mg==", "bodyText": "Why remove these? Now every TypeBenchmarkData needs to know how to serialize values.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527569272", "createdAt": "2020-11-20T09:42:19Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -187,30 +189,20 @@ public void setup(Iterator<Page> pagesIterator)\n             dataSource = sliceOutput.slice();\n         }\n \n-        public void setup(Type type, Iterator<?> values)\n+        public <T> void setup(Type type, Iterator<T> values, BiConsumer<BlockBuilder, T> writer)\n                 throws Exception\n         {\n             pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();\n             PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(type));\n             BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(0);\n             ImmutableList.Builder<Page> pagesBuilder = ImmutableList.builder();\n             while (values.hasNext()) {\n-                Object value = values.next();\n+                T value = values.next();\n                 if (value == null) {\n                     blockBuilder.appendNull();\n                 }\n-                else if (BIGINT.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3MTU5NQ==", "bodyText": "also add benchmarks for Int128ArrayBlock?", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527571595", "createdAt": "2020-11-20T09:46:22Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -103,6 +109,30 @@ public Object deserializeLongDecimalWithNull(LongDecimalWithNullBenchmarkData da\n         return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n     }\n \n+    @Benchmark\n+    public Object serializeInt96NoNull(LongTimestampBenchmarkData data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3MzAxNw==", "bodyText": "Those params cannot unfortunately be extracted. So every case needs to have this field.\n\nThese params could be part of io.prestosql.execution.buffer.BenchmarkBlockSerde.BenchmarkData (then they need to be defined once)\nio.prestosql.execution.buffer.BenchmarkBlockSerde.BenchmarkData could accept some data generator.\nThis would the composition that @kokosing mentioned.", "url": "https://github.com/trinodb/trino/pull/5972#discussion_r527573017", "createdAt": "2020-11-20T09:48:31Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -384,10 +385,13 @@ public void setup()\n     public static class LongDecimalWithNullBenchmarkData\n             extends LongDecimalBenchmarkData\n     {\n+        @Param({\".01\", \".10\", \".50\", \".90\", \".99\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjY2MA=="}, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "616821669f0fe5aa78542bdf5e5d6f09fd20f209", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/616821669f0fe5aa78542bdf5e5d6f09fd20f209", "committedDate": "2020-11-20T13:10:34Z", "message": "Organize benchmarks in BenchmarkBlockSerde"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1cda862cc0d2a8ad48c349afdf171427fea16b6", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/d1cda862cc0d2a8ad48c349afdf171427fea16b6", "committedDate": "2020-11-20T13:10:36Z", "message": "Add more types to BenchmarkBlockSerde"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbb3c6ada766f417328dc29bc53a873614dafcba", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/bbb3c6ada766f417328dc29bc53a873614dafcba", "committedDate": "2020-11-20T13:10:36Z", "message": "Add different null distributions to BenchmarkBlockSerde"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1e04842a6ddead4a798b3899520df2e35b29bfc", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/c1e04842a6ddead4a798b3899520df2e35b29bfc", "committedDate": "2020-11-20T13:10:36Z", "message": "Remove TestingPagesSerdeFactory from BenchmarkBlockSerde"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c1e04842a6ddead4a798b3899520df2e35b29bfc", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/c1e04842a6ddead4a798b3899520df2e35b29bfc", "committedDate": "2020-11-20T13:10:36Z", "message": "Remove TestingPagesSerdeFactory from BenchmarkBlockSerde"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NDAzODg4", "url": "https://github.com/trinodb/trino/pull/5972#pullrequestreview-536403888", "createdAt": "2020-11-23T11:54:56Z", "commit": {"oid": "c1e04842a6ddead4a798b3899520df2e35b29bfc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2586, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}