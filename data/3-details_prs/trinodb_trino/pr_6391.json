{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyOTg4MzQ1", "number": 6391, "title": "Convert selected PostgreSQL tests to SqlDataTypeTest", "bodyText": "", "createdAt": "2020-12-19T22:48:19Z", "url": "https://github.com/trinodb/trino/pull/6391", "merged": true, "mergeCommit": {"oid": "9dcf9472d796817019d0bb1449c9b8a58b8859a8"}, "closed": true, "closedAt": "2020-12-21T11:24:14Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoSYtOgFqTU1NjIzNTQ4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoS_mfABqjQxMzUyNDcyODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjM1NDg2", "url": "https://github.com/trinodb/trino/pull/6391#pullrequestreview-556235486", "createdAt": "2020-12-21T09:19:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToxOToyOVrOIJRcyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToxOToyOVrOIJRcyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Mzk5NA==", "bodyText": "It is not specific to this PR directly, but a second thought on the mechanism. Why express expected type as spi.type.Type instead a type name. Wouldn't having type names everywhere be more consistent?", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546593994", "createdAt": "2020-12-21T09:19:29Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -190,11 +190,51 @@ public void testBasicTypes()\n                 .addRoundTrip(\"integer\", \"123456789\", INTEGER)\n                 .addRoundTrip(\"smallint\", \"32456\", SMALLINT, \"SMALLINT '32456'\")\n                 .addRoundTrip(\"tinyint\", \"5\", SMALLINT, \"SMALLINT '5'\")\n-                .addRoundTrip(\"double\", \"123.45\", DOUBLE, \"DOUBLE '123.45'\")\n-                .addRoundTrip(\"real\", \"123.45\", REAL, \"REAL '123.45'\")\n                 .execute(getQueryRunner(), prestoCreateAsSelect(\"test_basic_types\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjM1NzYz", "url": "https://github.com/trinodb/trino/pull/6391#pullrequestreview-556235763", "createdAt": "2020-12-21T09:19:53Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjU0NjU2", "url": "https://github.com/trinodb/trino/pull/6391#pullrequestreview-556254656", "createdAt": "2020-12-21T09:50:10Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo1MDoxMFrOIJSVlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo1MDoxMFrOIJSVlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwODUzMw==", "bodyText": "nit: Any specific reason to use the PostgreSQL specific CAST syntax?", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546608533", "createdAt": "2020-12-21T09:50:10Z", "author": {"login": "hashhar"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -190,11 +190,51 @@ public void testBasicTypes()\n                 .addRoundTrip(\"integer\", \"123456789\", INTEGER)\n                 .addRoundTrip(\"smallint\", \"32456\", SMALLINT, \"SMALLINT '32456'\")\n                 .addRoundTrip(\"tinyint\", \"5\", SMALLINT, \"SMALLINT '5'\")\n-                .addRoundTrip(\"double\", \"123.45\", DOUBLE, \"DOUBLE '123.45'\")\n-                .addRoundTrip(\"real\", \"123.45\", REAL, \"REAL '123.45'\")\n                 .execute(getQueryRunner(), prestoCreateAsSelect(\"test_basic_types\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")\n+                .addRoundTrip(\"real\", \"3.14\", REAL, \"REAL '3.14'\")\n+                .addRoundTrip(\"real\", \"3.1415927\", REAL, \"REAL '3.1415927'\")\n+                .addRoundTrip(\"real\", \"'NaN'::real\", REAL, \"CAST(nan() AS real)\")\n+                .addRoundTrip(\"real\", \"'-Infinity'::real\", REAL, \"CAST(-infinity() AS real)\")\n+                .addRoundTrip(\"real\", \"'+Infinity'::real\", REAL, \"CAST(+infinity() AS real)\")\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_real\"));\n+\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")\n+                .addRoundTrip(\"real\", \"3.14\", REAL, \"REAL '3.14'\")\n+                .addRoundTrip(\"real\", \"3.1415927\", REAL, \"REAL '3.1415927'\")\n+                .addRoundTrip(\"real\", \"nan()\", REAL, \"CAST(nan() AS real)\")\n+                .addRoundTrip(\"real\", \"-infinity()\", REAL, \"CAST(-infinity() AS real)\")\n+                .addRoundTrip(\"real\", \"+infinity()\", REAL, \"CAST(+infinity() AS real)\")\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_real\"));\n+    }\n+\n+    @Test\n+    public void testDouble()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"double precision\", \"NULL\", DOUBLE, \"CAST(NULL AS double)\")\n+                .addRoundTrip(\"double precision\", \"1.0E100\", DOUBLE, \"1.0E100\")\n+                .addRoundTrip(\"double precision\", \"'NaN'::double precision\", DOUBLE, \"nan()\")\n+                .addRoundTrip(\"double precision\", \"'+Infinity'::double precision\", DOUBLE, \"+infinity()\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b8753a95b7455d40b609642b4e2d60115ee262", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/15b8753a95b7455d40b609642b4e2d60115ee262", "committedDate": "2020-12-21T09:54:35Z", "message": "Add helper class aiding conversion to SqlDataTypeTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "de81a483b38e91b4110d91e5ea6916901c2e4ed4", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/de81a483b38e91b4110d91e5ea6916901c2e4ed4", "committedDate": "2020-12-21T10:01:40Z", "message": "Convert PostgreSQL testVarbinary to SqlDataTypeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcffc6e7227960d10b5b75c9263e185b97f324fc", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/bcffc6e7227960d10b5b75c9263e185b97f324fc", "committedDate": "2020-12-21T10:01:40Z", "message": "Convert PostgreSQL decimal test to SqlDataTypeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c664973513661a83ae35b247dc6826c81212d01e", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/c664973513661a83ae35b247dc6826c81212d01e", "committedDate": "2020-12-21T10:01:42Z", "message": "Convert PostgreSQL char test to SqlDataTypeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29208f776a7749c9491da8f7b64076d9f3f90bb5", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/29208f776a7749c9491da8f7b64076d9f3f90bb5", "committedDate": "2020-12-21T10:01:42Z", "message": "Convert PostgreSQL real, double tests to SqlDataTypeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9087c42f0b23c05632ea8f18e75b57f913e400ae", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/9087c42f0b23c05632ea8f18e75b57f913e400ae", "committedDate": "2020-12-21T10:01:43Z", "message": "Fix test class name\n\nThe \"Sql\" infix looks incidental."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9087c42f0b23c05632ea8f18e75b57f913e400ae", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/9087c42f0b23c05632ea8f18e75b57f913e400ae", "committedDate": "2020-12-21T10:01:43Z", "message": "Fix test class name\n\nThe \"Sql\" infix looks incidental."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1883, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}