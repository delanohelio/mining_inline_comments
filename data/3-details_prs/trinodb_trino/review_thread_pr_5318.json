{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzOTc3MTcy", "number": 5318, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDowNlrOEn-caw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo0ODoxMlrOEoCtkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUzMDAzOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDowNlrOHYziag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDowNlrOHYziag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjI2Ng==", "bodyText": "#5313", "url": "https://github.com/trinodb/trino/pull/5318#discussion_r495772266", "createdAt": "2020-09-28T08:30:06Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -150,9 +171,13 @@ public void testTime()\n             checkRepresentation(connectedStatement.getStatement(), \"TIME '09:39:05.000'\", Types.TIME, (rs, column) -> {\n                 assertEquals(rs.getObject(column), Time.valueOf(LocalTime.of(9, 39, 5)));\n                 assertEquals(rs.getObject(column, Time.class), Time.valueOf(LocalTime.of(9, 39, 5)));\n-                assertThrows(() -> rs.getDate(column));\n+                assertThatThrownBy(() -> rs.getDate(column))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Invalid date from server: 09:39:05.000\"); // TODO (https://github.com/prestosql/presto/issues/5313) wrong message", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUzMDM1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDoxM1rOHYzinQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDoxM1rOHYzinQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjMxNw==", "bodyText": "#5315", "url": "https://github.com/trinodb/trino/pull/5318#discussion_r495772317", "createdAt": "2020-09-28T08:30:13Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -150,9 +171,13 @@ public void testTime()\n             checkRepresentation(connectedStatement.getStatement(), \"TIME '09:39:05.000'\", Types.TIME, (rs, column) -> {\n                 assertEquals(rs.getObject(column), Time.valueOf(LocalTime.of(9, 39, 5)));\n                 assertEquals(rs.getObject(column, Time.class), Time.valueOf(LocalTime.of(9, 39, 5)));\n-                assertThrows(() -> rs.getDate(column));\n+                assertThatThrownBy(() -> rs.getDate(column))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Invalid date from server: 09:39:05.000\"); // TODO (https://github.com/prestosql/presto/issues/5313) wrong message\n                 assertEquals(rs.getTime(column), Time.valueOf(LocalTime.of(9, 39, 5)));\n-                assertThrows(() -> rs.getTimestamp(column));\n+                assertThatThrownBy(() -> rs.getTimestamp(column))\n+                        .isInstanceOf(IllegalArgumentException.class) // TODO (https://github.com/prestosql/presto/issues/5315) SQLException", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUzMDc1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDoyMVrOHYzi5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDoyMVrOHYzi5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjM4OQ==", "bodyText": "#5317", "url": "https://github.com/trinodb/trino/pull/5318#discussion_r495772389", "createdAt": "2020-09-28T08:30:21Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -163,9 +188,13 @@ public void testTime()\n \n             checkRepresentation(connectedStatement.getStatement(), \"TIME '09:39:07 +01:00'\", Types.TIME /* TODO TIME_WITH_TIMEZONE */, (rs, column) -> {\n                 assertEquals(rs.getObject(column), Time.valueOf(LocalTime.of(1, 39, 7))); // TODO this should represent TIME '09:39:07 +01:00'\n-                assertThrows(() -> rs.getDate(column));\n+                assertThatThrownBy(() -> rs.getDate(column))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Invalid date from server: 09:39:07+01:00\"); // TODO (https://github.com/prestosql/presto/issues/5313) wrong message\n                 assertEquals(rs.getTime(column), Time.valueOf(LocalTime.of(1, 39, 7))); // TODO this should fail, or represent TIME '09:39:07'\n-                assertThrows(() -> rs.getTimestamp(column));\n+                assertThatThrownBy(() -> rs.getTimestamp(column))\n+                        .isInstanceOf(IllegalArgumentException.class) // TODO (https://github.com/prestosql/presto/issues/5315) SQLException\n+                        .hasMessage(\"Expected column to be a timestamp type but is time with time zone(0)\"); // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDIyOTI4OnYy", "diffSide": "LEFT", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo0ODoxMlrOHY6EKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo0ODoxMlrOHY6EKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3OTIwOQ==", "bodyText": "Hmmm. It was still useful to be able to test agains specific versions manually. Maybe not enough to keep it... IDK", "url": "https://github.com/trinodb/trino/pull/5318#discussion_r495879209", "createdAt": "2020-09-28T11:48:12Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -43,7 +43,6 @@\n {\n     private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n     private static final int TESTED_VERSIONS_GRANULARITY = 3;\n-    private static final String TESTED_VERSIONS_ENV_KEY = \"TESTED_PRESTO_SERVER_VERSIONS\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db49df718efd908b69e9826d2a75413ee431bbd7"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4719, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}