{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NzE4NjMw", "number": 4424, "title": "Change Iceberg to use the new ParquetFileWriter", "bodyText": "This commit changes the Iceberg connector to use the new ParquetFileWriter, and fixes bugs in handling of decimal and timestamp columns for both Orc and Parquet.\nThis commit removes DomainConverter and the test TestDomainConverter, superseded by fixes and conversions in ExpressionConverter, MessageTypeConverter and new class TimestampValueWriter.\nThis commit adds new TestIcebergSmoke tests for decimal and timestamp, and fixes the existing tests.  With this commit, all TestIcebergSmoke tests pass.\n#1324", "createdAt": "2020-07-11T04:44:24Z", "url": "https://github.com/trinodb/trino/pull/4424", "merged": true, "mergeCommit": {"oid": "6398acc69a9bc8ed880c39149ee1cb4f070a4e21"}, "closed": true, "closedAt": "2020-07-22T01:22:18Z", "author": {"login": "djsstarburst"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1k2JyAFqTQ1MDE3MzA4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3NZlvABqjM1NzMyNjEyNjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTczMDg5", "url": "https://github.com/trinodb/trino/pull/4424#pullrequestreview-450173089", "createdAt": "2020-07-16T19:59:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo1OTo0OFrOGy6rRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo1OTo0OFrOGy6rRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0MzMzMg==", "bodyText": "Rename test databases to prevent name collisions\n\n-> Rename test tables ...", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r456043332", "createdAt": "2020-07-16T19:59:48Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -54,22 +54,22 @@ public void testCreateExternalTableWithData()\n         File tableLocation = new File(tempDir, \"data\");\n \n         @Language(\"SQL\") String createTableSql = format(\"\" +\n-                        \"CREATE TABLE test_create_external \" +\n+                        \"CREATE TABLE test_create_external_with_data \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODY2NDU2", "url": "https://github.com/trinodb/trino/pull/4424#pullrequestreview-451866456", "createdAt": "2020-07-20T18:44:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODo0NDoyMVrOG0awkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMTowNTo0N1rOG0fRjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxNzU1NQ==", "bodyText": "Keep this private. See comment on the usage below.", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457617555", "createdAt": "2020-07-20T18:44:21Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/parquet/ParquetFileWriterFactory.java", "diffHunk": "@@ -136,7 +141,7 @@ public ParquetFileWriterFactory(\n         }\n     }\n \n-    private static CompressionCodecName getCompression(JobConf configuration)\n+    public static CompressionCodecName getCompression(JobConf configuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxODczNA==", "bodyText": "These properties are for the Hive writer. Remove this and inline the code below to directly create the column names and types. We don't need to go to/from Hive properties.", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457618734", "createdAt": "2020-07-20T18:46:28Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +148,64 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n+        ParquetWriterOptions parquetWriterOptions = ParquetWriterOptions.builder()\n+                .setMaxPageSize(HiveSessionProperties.getParquetWriterPageSize(session))\n+                .setMaxBlockSize(HiveSessionProperties.getParquetWriterBlockSize(session))\n+                .build();\n+\n         Properties properties = new Properties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxOTA2NQ==", "bodyText": "This is not needed, as it's for the Hive writer.\njobConf is now only needed for the hdfsEnvironment.getFileSystem() call.", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457619065", "createdAt": "2020-07-20T18:47:06Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +148,64 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n+        ParquetWriterOptions parquetWriterOptions = ParquetWriterOptions.builder()\n+                .setMaxPageSize(HiveSessionProperties.getParquetWriterPageSize(session))\n+                .setMaxBlockSize(HiveSessionProperties.getParquetWriterBlockSize(session))\n+                .build();\n+\n         Properties properties = new Properties();\n         properties.setProperty(IOConstants.COLUMNS, columns.stream()\n                 .map(IcebergColumnHandle::getName)\n                 .collect(joining(\",\")));\n+\n         properties.setProperty(IOConstants.COLUMNS_TYPES, columns.stream()\n                 .map(column -> toHiveType(column.getType()).getHiveTypeName().toString())\n                 .collect(joining(\":\")));\n \n         setParquetSchema(jobConf, convert(icebergSchema, \"table\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxOTQ4MA==", "bodyText": "Also not needed. Replace below with\nCompressionCodecName compressionCodecName = getCompressionCodec(session).getParquetCompressionCodec()\nAnd probably just inline that into the new IcebergParquetFileWriter() call", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457619480", "createdAt": "2020-07-20T18:47:50Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +148,64 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n+        ParquetWriterOptions parquetWriterOptions = ParquetWriterOptions.builder()\n+                .setMaxPageSize(HiveSessionProperties.getParquetWriterPageSize(session))\n+                .setMaxBlockSize(HiveSessionProperties.getParquetWriterBlockSize(session))\n+                .build();\n+\n         Properties properties = new Properties();\n         properties.setProperty(IOConstants.COLUMNS, columns.stream()\n                 .map(IcebergColumnHandle::getName)\n                 .collect(joining(\",\")));\n+\n         properties.setProperty(IOConstants.COLUMNS_TYPES, columns.stream()\n                 .map(column -> toHiveType(column.getType()).getHiveTypeName().toString())\n                 .collect(joining(\":\")));\n \n         setParquetSchema(jobConf, convert(icebergSchema, \"table\"));\n         jobConf.set(ParquetOutputFormat.COMPRESSION, getCompressionCodec(session).getParquetCompressionCodec().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MTU1NQ==", "bodyText": "This should be IcebergSessionProperties (we can static import the methods). Looks like the properties were added, but not the static methods, so we'll need to add those there.", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457641555", "createdAt": "2020-07-20T19:28:42Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +148,64 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n+        ParquetWriterOptions parquetWriterOptions = ParquetWriterOptions.builder()\n+                .setMaxPageSize(HiveSessionProperties.getParquetWriterPageSize(session))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MzAwMQ==", "bodyText": "Now that we have a writer for both formats, we could move the code from IcebergPageSink.getMetrics() here and make getMetrics() return just Metrics (non-optional).\nLater, we'll replace it with code to return statistics directly from the writer, rather than reading them again from the written file.", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457643001", "createdAt": "2020-07-20T19:31:30Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -226,4 +277,34 @@ private IcebergFileWriter createOrcWriter(\n             throw new PrestoException(ICEBERG_WRITER_OPEN_ERROR, \"Error creating ORC file\", e);\n         }\n     }\n+\n+    public static class IcebergParquetFileWriter\n+            extends ParquetFileWriter implements IcebergFileWriter\n+    {\n+        public IcebergParquetFileWriter(\n+                OutputStream outputStream,\n+                Callable<Void> rollbackAction,\n+                List<Type> fileColumnTypes,\n+                MessageType messageType,\n+                Map<List<String>, Type> primitiveTypes,\n+                ParquetWriterOptions parquetWriterOptions,\n+                int[] fileInputColumnIndexes,\n+                CompressionCodecName compressionCodecName)\n+        {\n+            super(outputStream,\n+                    rollbackAction,\n+                    fileColumnTypes,\n+                    messageType,\n+                    primitiveTypes,\n+                    parquetWriterOptions,\n+                    fileInputColumnIndexes,\n+                    compressionCodecName);\n+        }\n+\n+        @Override\n+        public Optional<Metrics> getMetrics()\n+        {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1ODAzOQ==", "bodyText": "Let's make this a top level class to mirror IcebergOrcFileWriter", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457658039", "createdAt": "2020-07-20T20:00:07Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -226,4 +277,34 @@ private IcebergFileWriter createOrcWriter(\n             throw new PrestoException(ICEBERG_WRITER_OPEN_ERROR, \"Error creating ORC file\", e);\n         }\n     }\n+\n+    public static class IcebergParquetFileWriter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1ODE2NQ==", "bodyText": "Formatting: implements on separate line", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457658165", "createdAt": "2020-07-20T20:00:21Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -226,4 +277,34 @@ private IcebergFileWriter createOrcWriter(\n             throw new PrestoException(ICEBERG_WRITER_OPEN_ERROR, \"Error creating ORC file\", e);\n         }\n     }\n+\n+    public static class IcebergParquetFileWriter\n+            extends ParquetFileWriter implements IcebergFileWriter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3MDQ2MA==", "bodyText": "ICEBERG_WRITER_OPEN_ERROR", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457670460", "createdAt": "2020-07-20T20:24:40Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +148,64 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n+        ParquetWriterOptions parquetWriterOptions = ParquetWriterOptions.builder()\n+                .setMaxPageSize(HiveSessionProperties.getParquetWriterPageSize(session))\n+                .setMaxBlockSize(HiveSessionProperties.getParquetWriterBlockSize(session))\n+                .build();\n+\n         Properties properties = new Properties();\n         properties.setProperty(IOConstants.COLUMNS, columns.stream()\n                 .map(IcebergColumnHandle::getName)\n                 .collect(joining(\",\")));\n+\n         properties.setProperty(IOConstants.COLUMNS_TYPES, columns.stream()\n                 .map(column -> toHiveType(column.getType()).getHiveTypeName().toString())\n                 .collect(joining(\":\")));\n \n         setParquetSchema(jobConf, convert(icebergSchema, \"table\"));\n         jobConf.set(ParquetOutputFormat.COMPRESSION, getCompressionCodec(session).getParquetCompressionCodec().name());\n \n-        return new IcebergRecordFileWriter(\n-                outputPath,\n-                columns.stream()\n-                        .map(IcebergColumnHandle::getName)\n-                        .collect(toImmutableList()),\n-                fromHiveStorageFormat(HiveStorageFormat.PARQUET),\n-                properties,\n-                HiveStorageFormat.PARQUET.getEstimatedWriterSystemMemoryUsage(),\n-                jobConf,\n-                typeManager,\n-                session);\n+        StorageFormat storageFormat = fromHiveStorageFormat(HiveStorageFormat.PARQUET);\n+        checkArgument(MapredParquetOutputFormat.class.getName().equals(storageFormat.getOutputFormat()), \"The storage format shoud be Parquet, but is not\");\n+\n+        CompressionCodecName compressionCodecName = getCompression(jobConf);\n+\n+        List<String> fileColumnNames = getColumnNames(properties);\n+        List<Type> fileColumnTypes = getColumnTypes(properties).stream()\n+                .map(hiveType -> hiveType.getType(typeManager))\n+                .collect(toList());\n+\n+        List<String> inputColumnNames = columns.stream()\n+                .map(IcebergColumnHandle::getName)\n+                .collect(Collectors.toList());\n+\n+        int[] fileInputColumnIndexes = fileColumnNames.stream()\n+                .mapToInt(inputColumnNames::indexOf)\n+                .toArray();\n+\n+        try {\n+            FileSystem fileSystem = hdfsEnvironment.getFileSystem(session.getUser(), outputPath, jobConf);\n+\n+            Callable<Void> rollbackAction = () -> {\n+                fileSystem.delete(outputPath, false);\n+                return null;\n+            };\n+\n+            ParquetSchemaConverter schemaConverter = new ParquetSchemaConverter(fileColumnTypes, fileColumnNames, IcebergParquetPrimitiveTypeConverter.INSTANCE);\n+\n+            return new IcebergParquetFileWriter(\n+                    fileSystem.create(outputPath),\n+                    rollbackAction,\n+                    fileColumnTypes,\n+                    convert(icebergSchema, \"table\"),\n+                    schemaConverter.getPrimitiveTypes(),\n+                    parquetWriterOptions,\n+                    fileInputColumnIndexes,\n+                    compressionCodecName);\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(HIVE_WRITER_OPEN_ERROR, \"Error creating Parquet file\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3MTcyOA==", "bodyText": "We shouldn't need both inputColumnNames and fileColumnNames as these should be identical.", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457671728", "createdAt": "2020-07-20T20:26:57Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +148,64 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n+        ParquetWriterOptions parquetWriterOptions = ParquetWriterOptions.builder()\n+                .setMaxPageSize(HiveSessionProperties.getParquetWriterPageSize(session))\n+                .setMaxBlockSize(HiveSessionProperties.getParquetWriterBlockSize(session))\n+                .build();\n+\n         Properties properties = new Properties();\n         properties.setProperty(IOConstants.COLUMNS, columns.stream()\n                 .map(IcebergColumnHandle::getName)\n                 .collect(joining(\",\")));\n+\n         properties.setProperty(IOConstants.COLUMNS_TYPES, columns.stream()\n                 .map(column -> toHiveType(column.getType()).getHiveTypeName().toString())\n                 .collect(joining(\":\")));\n \n         setParquetSchema(jobConf, convert(icebergSchema, \"table\"));\n         jobConf.set(ParquetOutputFormat.COMPRESSION, getCompressionCodec(session).getParquetCompressionCodec().name());\n \n-        return new IcebergRecordFileWriter(\n-                outputPath,\n-                columns.stream()\n-                        .map(IcebergColumnHandle::getName)\n-                        .collect(toImmutableList()),\n-                fromHiveStorageFormat(HiveStorageFormat.PARQUET),\n-                properties,\n-                HiveStorageFormat.PARQUET.getEstimatedWriterSystemMemoryUsage(),\n-                jobConf,\n-                typeManager,\n-                session);\n+        StorageFormat storageFormat = fromHiveStorageFormat(HiveStorageFormat.PARQUET);\n+        checkArgument(MapredParquetOutputFormat.class.getName().equals(storageFormat.getOutputFormat()), \"The storage format shoud be Parquet, but is not\");\n+\n+        CompressionCodecName compressionCodecName = getCompression(jobConf);\n+\n+        List<String> fileColumnNames = getColumnNames(properties);\n+        List<Type> fileColumnTypes = getColumnTypes(properties).stream()\n+                .map(hiveType -> hiveType.getType(typeManager))\n+                .collect(toList());\n+\n+        List<String> inputColumnNames = columns.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3MjkwMA==", "bodyText": "We can replace this with\nIntStream.range(0, fileColumnNames.size()).toArray()\nSame as ORC writer", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457672900", "createdAt": "2020-07-20T20:29:22Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +148,64 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n+        ParquetWriterOptions parquetWriterOptions = ParquetWriterOptions.builder()\n+                .setMaxPageSize(HiveSessionProperties.getParquetWriterPageSize(session))\n+                .setMaxBlockSize(HiveSessionProperties.getParquetWriterBlockSize(session))\n+                .build();\n+\n         Properties properties = new Properties();\n         properties.setProperty(IOConstants.COLUMNS, columns.stream()\n                 .map(IcebergColumnHandle::getName)\n                 .collect(joining(\",\")));\n+\n         properties.setProperty(IOConstants.COLUMNS_TYPES, columns.stream()\n                 .map(column -> toHiveType(column.getType()).getHiveTypeName().toString())\n                 .collect(joining(\":\")));\n \n         setParquetSchema(jobConf, convert(icebergSchema, \"table\"));\n         jobConf.set(ParquetOutputFormat.COMPRESSION, getCompressionCodec(session).getParquetCompressionCodec().name());\n \n-        return new IcebergRecordFileWriter(\n-                outputPath,\n-                columns.stream()\n-                        .map(IcebergColumnHandle::getName)\n-                        .collect(toImmutableList()),\n-                fromHiveStorageFormat(HiveStorageFormat.PARQUET),\n-                properties,\n-                HiveStorageFormat.PARQUET.getEstimatedWriterSystemMemoryUsage(),\n-                jobConf,\n-                typeManager,\n-                session);\n+        StorageFormat storageFormat = fromHiveStorageFormat(HiveStorageFormat.PARQUET);\n+        checkArgument(MapredParquetOutputFormat.class.getName().equals(storageFormat.getOutputFormat()), \"The storage format shoud be Parquet, but is not\");\n+\n+        CompressionCodecName compressionCodecName = getCompression(jobConf);\n+\n+        List<String> fileColumnNames = getColumnNames(properties);\n+        List<Type> fileColumnTypes = getColumnTypes(properties).stream()\n+                .map(hiveType -> hiveType.getType(typeManager))\n+                .collect(toList());\n+\n+        List<String> inputColumnNames = columns.stream()\n+                .map(IcebergColumnHandle::getName)\n+                .collect(Collectors.toList());\n+\n+        int[] fileInputColumnIndexes = fileColumnNames.stream()\n+                .mapToInt(inputColumnNames::indexOf)\n+                .toArray();\n+\n+        try {\n+            FileSystem fileSystem = hdfsEnvironment.getFileSystem(session.getUser(), outputPath, jobConf);\n+\n+            Callable<Void> rollbackAction = () -> {\n+                fileSystem.delete(outputPath, false);\n+                return null;\n+            };\n+\n+            ParquetSchemaConverter schemaConverter = new ParquetSchemaConverter(fileColumnTypes, fileColumnNames, IcebergParquetPrimitiveTypeConverter.INSTANCE);\n+\n+            return new IcebergParquetFileWriter(\n+                    fileSystem.create(outputPath),\n+                    rollbackAction,\n+                    fileColumnTypes,\n+                    convert(icebergSchema, \"table\"),\n+                    schemaConverter.getPrimitiveTypes(),\n+                    parquetWriterOptions,\n+                    fileInputColumnIndexes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NTQ5Mg==", "bodyText": "Import PrimitiveTypeName directly for readability", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457675492", "createdAt": "2020-07-20T20:34:36Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NTc1Nw==", "bodyText": "Move above so it's next to the other integer types", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457675757", "createdAt": "2020-07-20T20:35:03Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else if (decimalType.isShort()) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT64)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                        .length(decimalRequiredBytes(((DecimalType) type).getPrecision()))\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+        }\n+        if (DATE.equals(type)) {\n+            return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                    .as(dateType())\n+                    .named(name);\n+        }\n+        if (BIGINT.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NTg5MQ==", "bodyText": "Move these to be after integer types", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457675891", "createdAt": "2020-07-20T20:35:18Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else if (decimalType.isShort()) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT64)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                        .length(decimalRequiredBytes(((DecimalType) type).getPrecision()))\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+        }\n+        if (DATE.equals(type)) {\n+            return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                    .as(dateType())\n+                    .named(name);\n+        }\n+        if (BIGINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(intType(64, true))\n+                    .named(name);\n+        }\n+        if (TIMESTAMP.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(timestampType(false, LogicalTypeAnnotation.TimeUnit.MICROS))\n+                    .named(name);\n+        }\n+        if (TIME.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(timeType(false, LogicalTypeAnnotation.TimeUnit.MICROS))\n+                    .named(name);\n+        }\n+        if (DOUBLE.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NjAxMg==", "bodyText": "Static import REAL", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457676012", "createdAt": "2020-07-20T20:35:30Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else if (decimalType.isShort()) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT64)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                        .length(decimalRequiredBytes(((DecimalType) type).getPrecision()))\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+        }\n+        if (DATE.equals(type)) {\n+            return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                    .as(dateType())\n+                    .named(name);\n+        }\n+        if (BIGINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(intType(64, true))\n+                    .named(name);\n+        }\n+        if (TIMESTAMP.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(timestampType(false, LogicalTypeAnnotation.TimeUnit.MICROS))\n+                    .named(name);\n+        }\n+        if (TIME.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(timeType(false, LogicalTypeAnnotation.TimeUnit.MICROS))\n+                    .named(name);\n+        }\n+        if (DOUBLE.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.DOUBLE, OPTIONAL).named(name);\n+        }\n+        if (RealType.REAL.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NjMzOQ==", "bodyText": "No need for format here since it's just a concat to the end\nthrow new PrestoException(NOT_SUPPORTED, \"Unsupported primitive type: \" + type);", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457676339", "createdAt": "2020-07-20T20:36:14Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else if (decimalType.isShort()) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT64)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                        .length(decimalRequiredBytes(((DecimalType) type).getPrecision()))\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+        }\n+        if (DATE.equals(type)) {\n+            return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                    .as(dateType())\n+                    .named(name);\n+        }\n+        if (BIGINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(intType(64, true))\n+                    .named(name);\n+        }\n+        if (TIMESTAMP.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(timestampType(false, LogicalTypeAnnotation.TimeUnit.MICROS))\n+                    .named(name);\n+        }\n+        if (TIME.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(timeType(false, LogicalTypeAnnotation.TimeUnit.MICROS))\n+                    .named(name);\n+        }\n+        if (DOUBLE.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.DOUBLE, OPTIONAL).named(name);\n+        }\n+        if (RealType.REAL.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.FLOAT, OPTIONAL).named(name);\n+        }\n+        if (type instanceof VarcharType || type instanceof CharType || type instanceof VarbinaryType) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BINARY, OPTIONAL).named(name);\n+        }\n+        throw new PrestoException(NOT_SUPPORTED, format(\"Unsupported primitive type: %s\", type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NjgyMw==", "bodyText": "Should these be as(intType(..., true)) with 8/16/32?", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457676823", "createdAt": "2020-07-20T20:37:09Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3ODAxNQ==", "bodyText": "char and varchar should have stringType() logical type", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457678015", "createdAt": "2020-07-20T20:39:24Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else if (decimalType.isShort()) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT64)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                        .length(decimalRequiredBytes(((DecimalType) type).getPrecision()))\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+        }\n+        if (DATE.equals(type)) {\n+            return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                    .as(dateType())\n+                    .named(name);\n+        }\n+        if (BIGINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(intType(64, true))\n+                    .named(name);\n+        }\n+        if (TIMESTAMP.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(timestampType(false, LogicalTypeAnnotation.TimeUnit.MICROS))\n+                    .named(name);\n+        }\n+        if (TIME.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL)\n+                    .as(timeType(false, LogicalTypeAnnotation.TimeUnit.MICROS))\n+                    .named(name);\n+        }\n+        if (DOUBLE.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.DOUBLE, OPTIONAL).named(name);\n+        }\n+        if (RealType.REAL.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.FLOAT, OPTIONAL).named(name);\n+        }\n+        if (type instanceof VarcharType || type instanceof CharType || type instanceof VarbinaryType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3OTI3OQ==", "bodyText": "I think we could split out the name part. This would make the code a bit simpler and enforce that we always set a name.\npublic Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n{\n    return primitive(type).named(name);\n}\n\nprivate PrimitiveBuilder<PrimitiveType> primitive(io.prestosql.spi.type.Type type) { ... }", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457679279", "createdAt": "2020-07-20T20:41:58Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3OTk3Ng==", "bodyText": "Use Types.optional() instead of primitive() everywhere", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457679976", "createdAt": "2020-07-20T20:43:18Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NTQ5Mg=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4MDI0NA==", "bodyText": "Use decimalType here", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457680244", "createdAt": "2020-07-20T20:43:50Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else if (decimalType.isShort()) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT64)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                        .length(decimalRequiredBytes(((DecimalType) type).getPrecision()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4MDM0NA==", "bodyText": "The \"else\" is redundant", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457680344", "createdAt": "2020-07-20T20:44:00Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else if (decimalType.isShort()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4MTg3OQ==", "bodyText": "Maybe use getPrecision() <= 18 here since that matches the Iceberg spec. We aren't using ShortDecimalType here, so at this point the fact that isShort() == 18 is somewhat of a coincidence.", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457681879", "createdAt": "2020-07-20T20:46:54Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()))\n+                        .named(name);\n+            }\n+            else if (decimalType.isShort()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4MDM0NA=="}, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4NTA1OQ==", "bodyText": "We like to write empty methods like\nprivate IcebergParquetPrimitiveTypeConverter() {}", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457685059", "createdAt": "2020-07-20T20:53:16Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4NTg0MA==", "bodyText": "Use optional() instead of primitive()", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457685840", "createdAt": "2020-07-20T20:54:44Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4NTk0OQ==", "bodyText": "I'd use <= 18 for readability", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457685949", "createdAt": "2020-07-20T20:54:56Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+            else if (decimalType.isShort()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4NjEwMQ==", "bodyText": "OriginalType is deprecated, switch to LogicalTypeAnnotation", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457686101", "createdAt": "2020-07-20T20:55:13Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(OriginalType.DECIMAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4NjE5MQ==", "bodyText": "Put named() on next line for these", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457686191", "createdAt": "2020-07-20T20:55:22Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4NjU0Mw==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457686543", "createdAt": "2020-07-20T20:56:02Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+            else if (decimalType.isShort()) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT64)\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+            else {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                        .length(PRECISION_TO_BYTE_COUNT[decimalType.getPrecision() - 1])\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+        }\n+        if (DATE.equals(type)) {\n+            return Types.optional(PrimitiveType.PrimitiveTypeName.INT32).as(OriginalType.DATE).named(name);\n+        }\n+        if (BIGINT.equals(type) || TIMESTAMP.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL).named(name);\n+        }\n+        if (DOUBLE.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.DOUBLE, OPTIONAL).named(name);\n+        }\n+        if (RealType.REAL.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4Nzc3MQ==", "bodyText": "Like Iceberg, based on my reading of org.apache.hadoop.hive.ql.io.parquet.convert.HiveSchemaConverter, the char and varchar types should use as(stringType())", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457687771", "createdAt": "2020-07-20T20:58:22Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+            else if (decimalType.isShort()) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT64)\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+            else {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                        .length(PRECISION_TO_BYTE_COUNT[decimalType.getPrecision() - 1])\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+        }\n+        if (DATE.equals(type)) {\n+            return Types.optional(PrimitiveType.PrimitiveTypeName.INT32).as(OriginalType.DATE).named(name);\n+        }\n+        if (BIGINT.equals(type) || TIMESTAMP.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL).named(name);\n+        }\n+        if (DOUBLE.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.DOUBLE, OPTIONAL).named(name);\n+        }\n+        if (RealType.REAL.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.FLOAT, OPTIONAL).named(name);\n+        }\n+        if (type instanceof VarcharType || type instanceof CharType || type instanceof VarbinaryType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4OTkwOQ==", "bodyText": "Same as Iceberg, these and bigint should have as(intType(..., true))", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457689909", "createdAt": "2020-07-20T21:02:24Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5MDMxNw==", "bodyText": "Add a comment\n// this should match org.apache.hadoop.hive.ql.io.parquet.convert.HiveSchemaConverter", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457690317", "createdAt": "2020-07-20T21:03:16Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5MDQ4Mw==", "bodyText": "private HiveParquetPrimitiveTypeConverter() {}", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457690483", "createdAt": "2020-07-20T21:03:38Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5MDcwMg==", "bodyText": "throw new PrestoException(NOT_SUPPORTED, \"Unsupported primitive type: \" + type);", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457690702", "createdAt": "2020-07-20T21:04:05Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter()\n+    {\n+    }\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BOOLEAN, OPTIONAL).named(name);\n+        }\n+        if (INTEGER.equals(type) || SMALLINT.equals(type) || TINYINT.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT32, OPTIONAL).named(name);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT32)\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+            else if (decimalType.isShort()) {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.INT64)\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+            else {\n+                return Types.optional(PrimitiveType.PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                        .length(PRECISION_TO_BYTE_COUNT[decimalType.getPrecision() - 1])\n+                        .as(OriginalType.DECIMAL)\n+                        .precision(decimalType.getPrecision())\n+                        .scale(decimalType.getScale()).named(name);\n+            }\n+        }\n+        if (DATE.equals(type)) {\n+            return Types.optional(PrimitiveType.PrimitiveTypeName.INT32).as(OriginalType.DATE).named(name);\n+        }\n+        if (BIGINT.equals(type) || TIMESTAMP.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.INT64, OPTIONAL).named(name);\n+        }\n+        if (DOUBLE.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.DOUBLE, OPTIONAL).named(name);\n+        }\n+        if (RealType.REAL.equals(type)) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.FLOAT, OPTIONAL).named(name);\n+        }\n+        if (type instanceof VarcharType || type instanceof CharType || type instanceof VarbinaryType) {\n+            return Types.primitive(PrimitiveType.PrimitiveTypeName.BINARY, OPTIONAL).named(name);\n+        }\n+        throw new PrestoException(NOT_SUPPORTED, format(\"Unsupported primitive type: %s\", type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5MDk1Mg==", "bodyText": "this.primitiveTypeConverter = requireNonNull(primitiveTypeConverter, \"primitiveTypeConverter is null\");", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457690952", "createdAt": "2020-07-20T21:04:38Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetSchemaConverter.java", "diffHunk": "@@ -14,53 +14,42 @@\n package io.prestosql.parquet.writer;\n \n import com.google.common.collect.ImmutableList;\n-import io.prestosql.spi.PrestoException;\n import io.prestosql.spi.type.ArrayType;\n-import io.prestosql.spi.type.CharType;\n-import io.prestosql.spi.type.DecimalType;\n import io.prestosql.spi.type.MapType;\n-import io.prestosql.spi.type.RealType;\n import io.prestosql.spi.type.RowType;\n import io.prestosql.spi.type.Type;\n-import io.prestosql.spi.type.VarbinaryType;\n-import io.prestosql.spi.type.VarcharType;\n import org.apache.parquet.schema.GroupType;\n import org.apache.parquet.schema.MessageType;\n-import org.apache.parquet.schema.OriginalType;\n-import org.apache.parquet.schema.PrimitiveType;\n import org.apache.parquet.schema.Types;\n \n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n-import static io.prestosql.spi.type.BigintType.BIGINT;\n-import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n-import static io.prestosql.spi.type.DateType.DATE;\n-import static io.prestosql.spi.type.DoubleType.DOUBLE;\n-import static io.prestosql.spi.type.IntegerType.INTEGER;\n-import static io.prestosql.spi.type.SmallintType.SMALLINT;\n import static io.prestosql.spi.type.StandardTypes.ARRAY;\n import static io.prestosql.spi.type.StandardTypes.MAP;\n import static io.prestosql.spi.type.StandardTypes.ROW;\n-import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n-import static io.prestosql.spi.type.TinyintType.TINYINT;\n-import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n import static org.apache.parquet.Preconditions.checkArgument;\n import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n \n public class ParquetSchemaConverter\n {\n-    private Map<List<String>, Type> primitiveTypes = new HashMap<>();\n+    private final PrimitiveTypeConverter primitiveTypeConverter;\n+    private final Map<List<String>, Type> primitiveTypes = new HashMap<>();\n     private final MessageType messageType;\n \n     public ParquetSchemaConverter(List<Type> types, List<String> columnNames)\n+    {\n+        this(types, columnNames, HiveParquetPrimitiveTypeConverter.INSTANCE);\n+    }\n+\n+    public ParquetSchemaConverter(List<Type> types, List<String> columnNames, PrimitiveTypeConverter primitiveTypeConverter)\n     {\n         requireNonNull(types, \"types is null\");\n         requireNonNull(columnNames, \"columnNames is null\");\n         checkArgument(types.size() == columnNames.size(), \"types size not equals to columnNames size\");\n+        this.primitiveTypeConverter = primitiveTypeConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5MTUzMg==", "bodyText": "It's better if presto-parquet doesn't have Hive specific logic. Remove this constructor variant, then you can move HiveParquetPrimitiveTypeConverter to the presto-hive module.", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457691532", "createdAt": "2020-07-20T21:05:47Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetSchemaConverter.java", "diffHunk": "@@ -14,53 +14,42 @@\n package io.prestosql.parquet.writer;\n \n import com.google.common.collect.ImmutableList;\n-import io.prestosql.spi.PrestoException;\n import io.prestosql.spi.type.ArrayType;\n-import io.prestosql.spi.type.CharType;\n-import io.prestosql.spi.type.DecimalType;\n import io.prestosql.spi.type.MapType;\n-import io.prestosql.spi.type.RealType;\n import io.prestosql.spi.type.RowType;\n import io.prestosql.spi.type.Type;\n-import io.prestosql.spi.type.VarbinaryType;\n-import io.prestosql.spi.type.VarcharType;\n import org.apache.parquet.schema.GroupType;\n import org.apache.parquet.schema.MessageType;\n-import org.apache.parquet.schema.OriginalType;\n-import org.apache.parquet.schema.PrimitiveType;\n import org.apache.parquet.schema.Types;\n \n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n-import static io.prestosql.spi.type.BigintType.BIGINT;\n-import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n-import static io.prestosql.spi.type.DateType.DATE;\n-import static io.prestosql.spi.type.DoubleType.DOUBLE;\n-import static io.prestosql.spi.type.IntegerType.INTEGER;\n-import static io.prestosql.spi.type.SmallintType.SMALLINT;\n import static io.prestosql.spi.type.StandardTypes.ARRAY;\n import static io.prestosql.spi.type.StandardTypes.MAP;\n import static io.prestosql.spi.type.StandardTypes.ROW;\n-import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n-import static io.prestosql.spi.type.TinyintType.TINYINT;\n-import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n import static org.apache.parquet.Preconditions.checkArgument;\n import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n \n public class ParquetSchemaConverter\n {\n-    private Map<List<String>, Type> primitiveTypes = new HashMap<>();\n+    private final PrimitiveTypeConverter primitiveTypeConverter;\n+    private final Map<List<String>, Type> primitiveTypes = new HashMap<>();\n     private final MessageType messageType;\n \n     public ParquetSchemaConverter(List<Type> types, List<String> columnNames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDE1MzQ3", "url": "https://github.com/trinodb/trino/pull/4424#pullrequestreview-452015347", "createdAt": "2020-07-20T22:58:58Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1ODo1OFrOG0iIdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1OToyMFrOG0iI4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczODM1OA==", "bodyText": "I think we can use the Hive code directly here:\nTypeInfo hiveType = new HiveTypeTranslator().translate(type);\nMessageType messageType = HiveSchemaConverter.convert(List.of(name), List.of(hiveType));\nreturn messageType.getType(0);", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457738358", "createdAt": "2020-07-20T22:58:58Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+import org.apache.parquet.schema.Types;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT;\n+import static org.apache.parquet.schema.Type.Repetition.OPTIONAL;\n+\n+// this should match org.apache.hadoop.hive.ql.io.parquet.convert.HiveSchemaConverter\n+public class HiveParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final HiveParquetPrimitiveTypeConverter INSTANCE = new HiveParquetPrimitiveTypeConverter();\n+\n+    private HiveParquetPrimitiveTypeConverter() {}\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        if (BOOLEAN.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczODQ2Nw==", "bodyText": "These two lines are not needed", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r457738467", "createdAt": "2020-07-20T22:59:20Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +139,52 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n-        Properties properties = new Properties();\n-        properties.setProperty(IOConstants.COLUMNS, columns.stream()\n+        StorageFormat storageFormat = fromHiveStorageFormat(HiveStorageFormat.PARQUET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjIwMjA0", "url": "https://github.com/trinodb/trino/pull/4424#pullrequestreview-452620204", "createdAt": "2020-07-21T16:16:46Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoxNjo0N1rOG0_qjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoxNjo0N1rOG0_qjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyMjIyMg==", "bodyText": "The TIMESTAMP constant uses the default precision 3, milliseconds. You probably want to check the precision of the timestamp type. https://github.com/prestosql/presto/blob/master/presto-spi/src/main/java/io/prestosql/spi/type/TimestampType.java#L66", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458222222", "createdAt": "2020-07-21T16:16:47Z", "author": {"login": "alexjo2144"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetPrimitiveTypeConverter.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.PrimitiveTypeConverter;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.type.CharType;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import org.apache.parquet.schema.LogicalTypeAnnotation;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.RealType.REAL;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static org.apache.iceberg.types.TypeUtil.decimalRequiredBytes;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.stringType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n+import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName;\n+import static org.apache.parquet.schema.Types.PrimitiveBuilder;\n+import static org.apache.parquet.schema.Types.optional;\n+\n+public class IcebergParquetPrimitiveTypeConverter\n+        implements PrimitiveTypeConverter\n+{\n+    public static final IcebergParquetPrimitiveTypeConverter INSTANCE = new IcebergParquetPrimitiveTypeConverter();\n+\n+    private IcebergParquetPrimitiveTypeConverter() {}\n+\n+    @Override\n+    public Type getPrimitiveType(io.prestosql.spi.type.Type type, String name)\n+    {\n+        return primitive(type).named(name);\n+    }\n+\n+    private PrimitiveBuilder<PrimitiveType> primitive(io.prestosql.spi.type.Type type)\n+    {\n+        if (BOOLEAN.equals(type)) {\n+            return optional(PrimitiveTypeName.BOOLEAN);\n+        }\n+        if (BIGINT.equals(type)) {\n+            return optional(PrimitiveTypeName.INT64)\n+                    .as(intType(64, true));\n+        }\n+        if (INTEGER.equals(type)) {\n+            return optional(PrimitiveTypeName.INT32)\n+                    .as(intType(32, true));\n+        }\n+        if (SMALLINT.equals(type)) {\n+            return optional(PrimitiveTypeName.INT32)\n+                    .as(intType(16, true));\n+        }\n+        if (TINYINT.equals(type)) {\n+            return optional(PrimitiveTypeName.INT32)\n+                    .as(intType(8, true));\n+        }\n+        if (REAL.equals(type)) {\n+            return optional(PrimitiveTypeName.FLOAT);\n+        }\n+        if (DOUBLE.equals(type)) {\n+            return optional(PrimitiveTypeName.DOUBLE);\n+        }\n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            if (decimalType.getPrecision() <= 9) {\n+                return optional(PrimitiveTypeName.INT32)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()));\n+            }\n+            if (decimalType.getPrecision() <= 18) {\n+                return optional(PrimitiveTypeName.INT64)\n+                        .as(decimalType(decimalType.getScale(), decimalType.getPrecision()));\n+            }\n+            return optional(PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY)\n+                    .length(decimalRequiredBytes(decimalType.getPrecision()))\n+                    .as(decimalType(decimalType.getScale(), decimalType.getPrecision()));\n+        }\n+        if (DATE.equals(type)) {\n+            return optional(PrimitiveTypeName.INT32)\n+                    .as(dateType());\n+        }\n+        if (TIMESTAMP.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODI1MzIw", "url": "https://github.com/trinodb/trino/pull/4424#pullrequestreview-452825320", "createdAt": "2020-07-21T21:00:38Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTowMDozOFrOG1JltQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToxNDo1MFrOG1KCDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4NDgyMQ==", "bodyText": "We can remove the columns argument from the method since it's no longer used.", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458384821", "createdAt": "2020-07-21T21:00:38Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +126,43 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n-        Properties properties = new Properties();\n-        properties.setProperty(IOConstants.COLUMNS, columns.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4NDk0OQ==", "bodyText": "Let's inline this, to match the ORC code", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458384949", "createdAt": "2020-07-21T21:00:52Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergFileWriterFactory.java", "diffHunk": "@@ -133,28 +126,43 @@ private IcebergFileWriter createParquetWriter(\n             JobConf jobConf,\n             ConnectorSession session)\n     {\n-        Properties properties = new Properties();\n-        properties.setProperty(IOConstants.COLUMNS, columns.stream()\n-                .map(IcebergColumnHandle::getName)\n-                .collect(joining(\",\")));\n-        properties.setProperty(IOConstants.COLUMNS_TYPES, columns.stream()\n-                .map(column -> toHiveType(column.getType()).getHiveTypeName().toString())\n-                .collect(joining(\":\")));\n-\n-        setParquetSchema(jobConf, convert(icebergSchema, \"table\"));\n-        jobConf.set(ParquetOutputFormat.COMPRESSION, getCompressionCodec(session).getParquetCompressionCodec().name());\n-\n-        return new IcebergRecordFileWriter(\n-                outputPath,\n-                columns.stream()\n-                        .map(IcebergColumnHandle::getName)\n-                        .collect(toImmutableList()),\n-                fromHiveStorageFormat(HiveStorageFormat.PARQUET),\n-                properties,\n-                HiveStorageFormat.PARQUET.getEstimatedWriterSystemMemoryUsage(),\n-                jobConf,\n-                typeManager,\n-                session);\n+        List<String> fileColumnNames = icebergSchema.columns().stream()\n+                .map(Types.NestedField::name)\n+                .collect(toImmutableList());\n+        List<Type> fileColumnTypes = icebergSchema.columns().stream()\n+                .map(column -> toPrestoType(column.type(), typeManager))\n+                .collect(toImmutableList());\n+\n+        int[] fileInputColumnIndexes = IntStream.range(0, fileColumnNames.size()).toArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4NjE5OA==", "bodyText": "This entire getMetrics() method is no longer needed. (and should be removed since we're reading the metrics twice for Parquet)", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458386198", "createdAt": "2020-07-21T21:03:20Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergPageSink.java", "diffHunk": "@@ -328,8 +327,7 @@ private Metrics getMetrics(WriteContext writeContext)\n             case PARQUET:\n                 return ParquetUtil.fileMetrics(HadoopInputFile.fromPath(writeContext.getPath(), jobConf), MetricsConfig.getDefault());\n             case ORC:\n-                return writeContext.getWriter().getMetrics()\n-                        .orElseThrow(() -> new VerifyException(\"Iceberg ORC file writers should return Iceberg metrics\"));\n+                return writeContext.getWriter().getMetrics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4Njg3Ng==", "bodyText": "Use requireNonNull for both assignments", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458386876", "createdAt": "2020-07-21T21:04:38Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergParquetFileWriter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import io.prestosql.parquet.writer.ParquetWriterOptions;\n+import io.prestosql.plugin.hive.parquet.ParquetFileWriter;\n+import io.prestosql.spi.type.Type;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.iceberg.Metrics;\n+import org.apache.iceberg.MetricsConfig;\n+import org.apache.iceberg.hadoop.HadoopInputFile;\n+import org.apache.iceberg.parquet.ParquetUtil;\n+import org.apache.parquet.hadoop.metadata.CompressionCodecName;\n+import org.apache.parquet.schema.MessageType;\n+\n+import java.io.OutputStream;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+public class IcebergParquetFileWriter\n+        extends ParquetFileWriter\n+        implements IcebergFileWriter\n+{\n+    private final Path outputPath;\n+    private final JobConf jobConf;\n+\n+    public IcebergParquetFileWriter(\n+            OutputStream outputStream,\n+            Callable<Void> rollbackAction,\n+            List<Type> fileColumnTypes,\n+            MessageType messageType,\n+            Map<List<String>, Type> primitiveTypes,\n+            ParquetWriterOptions parquetWriterOptions,\n+            int[] fileInputColumnIndexes,\n+            CompressionCodecName compressionCodecName,\n+            Path outputPath,\n+            JobConf jobConf)\n+    {\n+        super(outputStream,\n+                rollbackAction,\n+                fileColumnTypes,\n+                messageType,\n+                primitiveTypes,\n+                parquetWriterOptions,\n+                fileInputColumnIndexes,\n+                compressionCodecName);\n+        this.outputPath = outputPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4Nzc0MA==", "bodyText": "This class is now unused and can be deleted", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458387740", "createdAt": "2020-07-21T21:06:18Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergRecordFileWriter.java", "diffHunk": "@@ -21,15 +21,20 @@\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.mapred.JobConf;\n import org.apache.iceberg.Metrics;\n+import org.apache.iceberg.MetricsConfig;\n+import org.apache.iceberg.hadoop.HadoopInputFile;\n+import org.apache.iceberg.parquet.ParquetUtil;\n \n import java.util.List;\n-import java.util.Optional;\n import java.util.Properties;\n \n public class IcebergRecordFileWriter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4ODIzNg==", "bodyText": "Maybe wrap .configure() here", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458388236", "createdAt": "2020-07-21T21:07:19Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionData.java", "diffHunk": "@@ -34,7 +35,7 @@\n {\n     private static final String PARTITION_VALUES_FIELD = \"partitionValues\";\n     private static final JsonFactory FACTORY = new JsonFactory();\n-    private static final ObjectMapper MAPPER = new ObjectMapper(FACTORY);\n+    private static final ObjectMapper MAPPER = new ObjectMapper(FACTORY).configure(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4ODY1Mw==", "bodyText": "Let's put this in the util package (we should move more things there)", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458388653", "createdAt": "2020-07-21T21:08:06Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PrimitiveTypeMapBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4OTIxOA==", "bodyText": "Make this private", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458389218", "createdAt": "2020-07-21T21:09:19Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PrimitiveTypeMapBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.MapType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.prestosql.spi.type.StandardTypes.ARRAY;\n+import static io.prestosql.spi.type.StandardTypes.MAP;\n+import static io.prestosql.spi.type.StandardTypes.ROW;\n+\n+public class PrimitiveTypeMapBuilder\n+{\n+    private final ImmutableMap.Builder<List<String>, Type> builder = ImmutableMap.builder();\n+\n+    private PrimitiveTypeMapBuilder() {}\n+\n+    public static Map<List<String>, Type> makeTypeMap(List<Type> types, List<String> columnNames)\n+    {\n+        return new PrimitiveTypeMapBuilder().buildTypeMap(types, columnNames);\n+    }\n+\n+    public Map<List<String>, Type> buildTypeMap(List<Type> types, List<String> columnNames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MTMyMg==", "bodyText": "Static import checkArgument", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458391322", "createdAt": "2020-07-21T21:13:27Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PrimitiveTypeMapBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.MapType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.prestosql.spi.type.StandardTypes.ARRAY;\n+import static io.prestosql.spi.type.StandardTypes.MAP;\n+import static io.prestosql.spi.type.StandardTypes.ROW;\n+\n+public class PrimitiveTypeMapBuilder\n+{\n+    private final ImmutableMap.Builder<List<String>, Type> builder = ImmutableMap.builder();\n+\n+    private PrimitiveTypeMapBuilder() {}\n+\n+    public static Map<List<String>, Type> makeTypeMap(List<Type> types, List<String> columnNames)\n+    {\n+        return new PrimitiveTypeMapBuilder().buildTypeMap(types, columnNames);\n+    }\n+\n+    public Map<List<String>, Type> buildTypeMap(List<Type> types, List<String> columnNames)\n+    {\n+        for (int i = 0; i < types.size(); i++) {\n+            visitType(types.get(i), columnNames.get(i), ImmutableList.of());\n+        }\n+        return builder.build();\n+    }\n+\n+    private void visitType(Type type, String name, List<String> parent)\n+    {\n+        if (ROW.equals(type.getTypeSignature().getBase())) {\n+            visitRowType((RowType) type, name, parent);\n+        }\n+        else if (MAP.equals(type.getTypeSignature().getBase())) {\n+            visitMapType((MapType) type, name, parent);\n+        }\n+        else if (ARRAY.equals(type.getTypeSignature().getBase())) {\n+            visitArrayType((ArrayType) type, name, parent);\n+        }\n+        else {\n+            builder.put(ImmutableList.<String>builder().addAll(parent).add(name).build(), type);\n+        }\n+    }\n+\n+    private void visitArrayType(ArrayType type, String name, List<String> parent)\n+    {\n+        parent = ImmutableList.<String>builder().addAll(parent).add(name).add(\"array\").build();\n+        visitType(type.getElementType(), \"array\", parent);\n+    }\n+\n+    private void visitMapType(MapType type, String name, List<String> parent)\n+    {\n+        parent = ImmutableList.<String>builder().addAll(parent).add(name).add(\"map\").build();\n+        visitType(type.getKeyType(), \"key\", parent);\n+        visitType(type.getValueType(), \"value\", parent);\n+    }\n+\n+    private void visitRowType(RowType type, String name, List<String> parent)\n+    {\n+        parent = ImmutableList.<String>builder().addAll(parent).add(name).build();\n+        for (RowType.Field field : type.getFields()) {\n+            com.google.common.base.Preconditions.checkArgument(field.getName().isPresent(), \"field in struct type doesn't have name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MTU4OQ==", "bodyText": "requireNonNull", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458391589", "createdAt": "2020-07-21T21:13:56Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetWriter.java", "diffHunk": "@@ -78,28 +77,23 @@\n \n     public ParquetWriter(\n             OutputStream outputStream,\n-            List<String> columnNames,\n-            List<Type> types,\n+            MessageType messageType,\n+            Map<List<String>, Type> primitiveTypes,\n             ParquetWriterOptions writerOption,\n             CompressionCodecName compressionCodecName)\n     {\n         this.outputStream = new OutputStreamSliceOutput(requireNonNull(outputStream, \"outputstream is null\"));\n-        this.names = ImmutableList.copyOf(requireNonNull(columnNames, \"columnNames is null\"));\n-        this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n         this.writerOption = requireNonNull(writerOption, \"writerOption is null\");\n         requireNonNull(compressionCodecName, \"compressionCodecName is null\");\n \n-        checkArgument(types.size() == columnNames.size(), \"type size %s is not equal to name size %s\", types.size(), columnNames.size());\n-\n-        ParquetSchemaConverter parquetSchemaConverter = new ParquetSchemaConverter(types, columnNames);\n-        this.messageType = parquetSchemaConverter.getMessageType();\n+        this.messageType = messageType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MjA3OA==", "bodyText": "Move this above, after the other integer types", "url": "https://github.com/trinodb/trino/pull/4424#discussion_r458392078", "createdAt": "2020-07-21T21:14:50Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetWriters.java", "diffHunk": "@@ -165,9 +166,12 @@ private static PrimitiveValueWriter getValueWriter(ValuesWriter valuesWriter, io\n         if (DATE.equals(type)) {\n             return new DateValueWriter(valuesWriter, parquetType);\n         }\n-        if (BIGINT.equals(type) || TIMESTAMP.equals(type)) {\n+        if (BIGINT.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81db7fecf583e2a0d35e8d7dac04542fc64bfbc5", "author": {"user": {"login": "djsstarburst", "name": "David Stryker"}}, "url": "https://github.com/trinodb/trino/commit/81db7fecf583e2a0d35e8d7dac04542fc64bfbc5", "committedDate": "2020-07-21T21:48:24Z", "message": "Change Iceberg to use ParquetFileWriter\n\nThis commit changes the Iceberg connector to use the new\nParquetFileWriter, and fixes bugs in handling of decimal and\ntimestamp columns for both Orc and Parquet.\n\nThis commit removes DomainConverter and the test\nTestDomainConverter, superseded by fixes and conversions\nin ExpressionConverter, MessageTypeConverter and\nnew class TimestampValueWriter.\n\nThis commit adds new TestIcebergSmoke tests for decimal\nand timestamp, and fixes the existing tests.  With this\ncommit, all TestIcebergSmoke tests pass."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "81db7fecf583e2a0d35e8d7dac04542fc64bfbc5", "author": {"user": {"login": "djsstarburst", "name": "David Stryker"}}, "url": "https://github.com/trinodb/trino/commit/81db7fecf583e2a0d35e8d7dac04542fc64bfbc5", "committedDate": "2020-07-21T21:48:24Z", "message": "Change Iceberg to use ParquetFileWriter\n\nThis commit changes the Iceberg connector to use the new\nParquetFileWriter, and fixes bugs in handling of decimal and\ntimestamp columns for both Orc and Parquet.\n\nThis commit removes DomainConverter and the test\nTestDomainConverter, superseded by fixes and conversions\nin ExpressionConverter, MessageTypeConverter and\nnew class TimestampValueWriter.\n\nThis commit adds new TestIcebergSmoke tests for decimal\nand timestamp, and fixes the existing tests.  With this\ncommit, all TestIcebergSmoke tests pass."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 79, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}