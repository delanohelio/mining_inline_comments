{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzA3ODQ5", "number": 5300, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODo1MTowOFrOEnkVaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNTowN1rOEofM2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTI1MjI1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODo1MTowOFrOHYO8Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODo1MTowOFrOHYO8Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE3MjYyMg==", "bodyText": "What is the motivation?", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r495172622", "createdAt": "2020-09-25T18:51:08Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -18,6 +18,7 @@\n import com.github.dockerjava.api.model.HealthCheck;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjAxNjc3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0MDoyOVrOHZLB0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0MDoyOVrOHZLB0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1NzEzNw==", "bodyText": "no point of splitting the line here", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496157137", "createdAt": "2020-09-28T18:40:29Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -201,37 +206,67 @@ public void copyLogsToHostPath(Path hostPath)\n         Path hostLogPath = Paths.get(hostPath.toString(), logicalName);\n         ensurePathExists(hostLogPath);\n \n+        ImmutableList.Builder<String> files = ImmutableList\n+                .builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjAzMDEwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0NDoyN1rOHZLKFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0NDoyN1rOHZLKFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1OTI1NA==", "bodyText": "Throwable?", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496159254", "createdAt": "2020-09-28T18:44:27Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -182,11 +186,23 @@ protected void containerIsStopped(InspectContainerResponse containerInfo)\n         this.listener.ifPresent(listener -> listener.containerStopped(this, containerInfo));\n     }\n \n-    private void copyFileToContainer(String containerPath, Runnable copy)\n+    private void copyFileToContainer(String containerPath, CheckedRunnable copy)\n     {\n-        Stopwatch stopwatch = Stopwatch.createStarted();\n-        copy.run();\n-        log.info(\"Copied files into %s %s in %.1f s\", this, containerPath, stopwatch.elapsed(MILLISECONDS) / 1000.);\n+        final Stopwatch stopwatch = Stopwatch.createStarted();\n+\n+        try {\n+            executor.runAsync(copy).whenComplete((ignore, throwable) -> {\n+                if (throwable == null) {\n+                    log.info(\"Copied files into %s %s in %.1f s\", this, containerPath, stopwatch.elapsed(MILLISECONDS) / 1000.);\n+                }\n+                else {\n+                    log.warn(\"Could not copy files into %s %s: %s\", this, containerPath, getStackTraceAsString((Throwable) throwable));\n+                }\n+            }).get();\n+        }\n+        catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjAzMDgwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0NDo0MFrOHZLKiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTowNToxOVrOHZL2WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1OTM2OQ==", "bodyText": "Make more operations async\n\nWhat is the benefit of this?", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496159369", "createdAt": "2020-09-28T18:44:40Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -23,10 +23,12 @@\n import com.google.common.base.Stopwatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3MDU4NA==", "bodyText": "Previously some of the operations were not interruptible + they were executed in thread pool not controlled by launcher (okhttp from testcontainers)", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496170584", "createdAt": "2020-09-28T19:05:19Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -23,10 +23,12 @@\n import com.google.common.base.Stopwatch;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1OTM2OQ=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjAzOTkwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0NzowOVrOHZLQKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoxMjoyM1rOHZN8wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MDgwOQ==", "bodyText": "What is the difference between run(...) and  runAsync(...).get()?", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496160809", "createdAt": "2020-09-28T18:47:09Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -370,7 +386,7 @@ public void tryStop()\n         }\n \n         try {\n-            executor.run(this::stop);\n+            executor.runAsync(this::stop).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3MjgzMA==", "bodyText": "runAsync executed CheckedRunnable on scheduler", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496172830", "createdAt": "2020-09-28T19:09:43Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -370,7 +386,7 @@ public void tryStop()\n         }\n \n         try {\n-            executor.run(this::stop);\n+            executor.runAsync(this::stop).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MDgwOQ=="}, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNDk5Mw==", "bodyText": "?", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496204993", "createdAt": "2020-09-28T20:12:23Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -370,7 +386,7 @@ public void tryStop()\n         }\n \n         try {\n-            executor.run(this::stop);\n+            executor.runAsync(this::stop).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MDgwOQ=="}, "originalCommit": null, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjA0Nzg2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0OToyN1rOHZLVNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTowNTo1MFrOHZL3aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MjEwMw==", "bodyText": "io.airlift.concurrent.Threads#daemonThreadsNamed?", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496162103", "createdAt": "2020-09-28T18:49:27Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -80,6 +83,9 @@\n     private final Map<String, DockerContainer> containers;\n     private final Optional<EnvironmentListener> listener;\n \n+    private static final ExecutorService executorService = Executors\n+            .newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(\"environment-%d\").build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3MDg1Ng==", "bodyText": "Didn't know that :) What's the difference?", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496170856", "createdAt": "2020-09-28T19:05:50Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -80,6 +83,9 @@\n     private final Map<String, DockerContainer> containers;\n     private final Optional<EnvironmentListener> listener;\n \n+    private static final ExecutorService executorService = Executors\n+            .newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(\"environment-%d\").build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MjEwMw=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjMzNjA5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoxODoyNlrOHZOH-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxODo0MVrOHZmV6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNzg2Ng==", "bodyText": "Seems like the library is broken. I would expect the DockerClient.close to close the callback passed to client.statsCmd(getContainerId()).exec(callback);.\nDid you maybe report a bug?", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496207866", "createdAt": "2020-09-28T20:18:26Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -302,10 +302,8 @@ private void copyFileFromContainer(String filename, Path targetPath)\n             return Optional.empty();\n         }\n \n-        try (DockerClient client = DockerClientFactory.lazyClient()) {\n-            InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>();\n+        try (DockerClient client = DockerClientFactory.lazyClient(); AsyncResultCallback<Statistics> callback = new AsyncResultCallback<>()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNDY0OQ==", "bodyText": "No. I didn't. And I wouldn't expect that to be fixed like you've described.", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496604649", "createdAt": "2020-09-29T10:18:41Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -302,10 +302,8 @@ private void copyFileFromContainer(String filename, Path targetPath)\n             return Optional.empty();\n         }\n \n-        try (DockerClient client = DockerClientFactory.lazyClient()) {\n-            InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>();\n+        try (DockerClient client = DockerClientFactory.lazyClient(); AsyncResultCallback<Statistics> callback = new AsyncResultCallback<>()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNzg2Ng=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg5NjkxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNTowN1rOHZm59w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNTowN1rOHZm59w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMzg3OQ==", "bodyText": "nit: do not use abbreviation", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496613879", "createdAt": "2020-09-29T10:35:07Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.model.MemoryStatsConfig;\n+import com.github.dockerjava.api.model.StatisticNetworksConfig;\n+import com.github.dockerjava.api.model.Statistics;\n+import com.github.dockerjava.core.InvocationBuilder;\n+import io.airlift.log.Logger;\n+import io.airlift.units.DataSize;\n+import net.jodah.failsafe.FailsafeExecutor;\n+import org.testcontainers.DockerClientFactory;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class StatisticsFetcher\n+{\n+    private final DockerContainer container;\n+    private final FailsafeExecutor executor;\n+    private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+\n+    public StatisticsFetcher(DockerContainer container, FailsafeExecutor executor)\n+    {\n+        this.container = requireNonNull(container, \"container is null\");\n+        this.executor = requireNonNull(executor, \"executor is null\");\n+    }\n+\n+    public Stats get()\n+    {\n+        if (!container.isRunning()) {\n+            log.warn(\"Could not get statistics for stopped container %s\", container.getLogicalName());\n+            return lastStats.get();\n+        }\n+\n+        try (DockerClient client = DockerClientFactory.lazyClient(); InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>()) {\n+            client.statsCmd(container.getContainerId()).exec(callback);\n+\n+            return lastStats.getAndUpdate(previousStats -> toStats((Statistics) executor.get(callback::awaitResult), previousStats));\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        catch (Exception e) {\n+            log.error(\"Could not fetch container %s statistics: %s\", container.getLogicalName(), getStackTraceAsString(e));\n+            return lastStats.get();\n+        }\n+    }\n+\n+    private Stats toStats(Statistics statistics, Stats previousStats)\n+    {\n+        Stats stats = new Stats();\n+\n+        if (statistics == null || statistics.getCpuStats() == null) {\n+            return previousStats;\n+        }\n+\n+        stats.systemCpuUsage = statistics.getCpuStats().getSystemCpuUsage();\n+        stats.totalCpuUsage = statistics.getCpuStats().getCpuUsage().getTotalUsage();\n+        stats.cpuUsagePerc = 0.0;\n+\n+        if (previousStats.systemCpuUsage != -1 && previousStats.totalCpuUsage != -1) {\n+            double usageCpuDelta = stats.totalCpuUsage - previousStats.totalCpuUsage;\n+            double systemCpuDelta = stats.systemCpuUsage - previousStats.systemCpuUsage;\n+\n+            if (usageCpuDelta > 0.0 && systemCpuDelta > 0.0) {\n+                stats.cpuUsagePerc = usageCpuDelta / systemCpuDelta * statistics.getCpuStats().getCpuUsage().getPercpuUsage().size() * 100;\n+            }\n+        }\n+\n+        MemoryStatsConfig memoryStats = statistics.getMemoryStats();\n+        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).succinct();\n+        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).succinct();\n+        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).succinct();\n+        stats.memoryUsagePerc = 100.0 * memoryStats.getUsage() / memoryStats.getLimit();\n+\n+        stats.pids = statistics.getPidsStats().getCurrent();\n+\n+        Supplier<Stream<StatisticNetworksConfig>> stream = () -> statistics.getNetworks().values().stream();\n+        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+\n+        return stats;\n+    }\n+\n+    public static class Stats\n+    {\n+        private long systemCpuUsage = -1;\n+        private long totalCpuUsage = -1;\n+        private double cpuUsagePerc;\n+        private double memoryUsagePerc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9a70552f7ae5494bb02966e5984a23c946343ef"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3076, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}