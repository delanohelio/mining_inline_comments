{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NjcwMjU1", "number": 6467, "title": "Fix return type of array subscript", "bodyText": "This addresses #6350.\nThe second and fourth commits are reverted in the third and fifth (I'll squash\nthem before merging).\nThe second commit presents an alternative solution that potentially requires\nfewer changes to operators, at a marginally-increased runtime cost (a checked\ncast for every time a SQL function is called on an object-based type). It also\nloses its benefit when combined with the fix for verifyMethodHandleSignature.\nThe test added in the fourth commit becomes redundant with the fix for\nverifyMethodHandleSignature, because the error is not caught in\ntestSubscript.", "createdAt": "2020-12-29T23:22:34Z", "url": "https://github.com/trinodb/trino/pull/6467", "merged": true, "mergeCommit": {"oid": "8228acb28c99224bd28d39029ae1e78ce188a714"}, "closed": true, "closedAt": "2021-01-04T22:19:06Z", "author": {"login": "jirassimok"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdrDkrCgFqTU1OTczODc4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABds5T48gBqjQxNjU4MzI1OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzM4Nzgy", "url": "https://github.com/trinodb/trino/pull/6467#pullrequestreview-559738782", "createdAt": "2020-12-29T23:33:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozMzoyOFrOIMacYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzo0NTozN1rOIMakug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4NzA3NA==", "bodyText": "in #6429", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887074", "createdAt": "2020-12-29T23:33:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -209,7 +209,7 @@ public static BytecodeNode generateInvocation(\n     private static Function<Optional<Class<?>>, BytecodeNode> simpleArgument(BytecodeNode argument)\n     {\n         return lambdaInterface -> {\n-            checkArgument(!lambdaInterface.isPresent(), \"Simple method invocation can not be used with functions that have lambda arguments\");\n+            checkArgument(lambdaInterface.isEmpty(), \"Simple method invocation can not be used with functions that have lambda arguments\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4NzIwMg==", "bodyText": "we prefer comments on line before", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887202", "createdAt": "2020-12-29T23:34:04Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -269,37 +269,32 @@ else if (functionMetadata.getArgumentDefinitions().get(i).isNullable()) {\n                 true);\n         FunctionInvoker functionInvoker = functionInvokerProvider.apply(invocationConvention);\n \n-        Binding binding = binder.bind(functionInvoker.getMethodHandle());\n-\n         LabelNode end = new LabelNode(\"end\");\n         BytecodeBlock block = new BytecodeBlock()\n                 .setDescription(\"invoke \" + functionMetadata.getSignature().getName());\n \n-        Optional<BytecodeNode> instance = functionInvoker.getInstanceFactory()\n-                .map(instanceFactory);\n-\n-        // Index of current parameter in the MethodHandle\n-        int currentParameterIndex = 0;\n-\n-        // Index of parameter (without @IsNull) in Presto function\n-        int realParameterIndex = 0;\n-\n-        // Index of function argument types\n-        int lambdaArgumentIndex = 0;\n-\n+        Binding binding = binder.bind(functionInvoker.getMethodHandle());\n         MethodType methodType = binding.getType();\n         Class<?> returnType = methodType.returnType();\n         Class<?> unboxedReturnType = Primitives.unwrap(returnType);\n \n+        // Types on the stack as the parameters are processed\n         List<Class<?>> stackTypes = new ArrayList<>();\n-        boolean boundInstance = false;\n+\n+        Optional<BytecodeNode> instance = functionInvoker.getInstanceFactory().map(instanceFactory);\n+        boolean instanceIsBound = false;\n+\n+        int currentParameterIndex = 0; // Index of current parameter in the MethodHandle", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4NzYyOQ==", "bodyText": "was lack of this cast exploitable with any test today?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887629", "createdAt": "2020-12-29T23:36:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -345,6 +350,9 @@ else if (type == ConnectorSession.class) {\n         if (functionMetadata.isNullable()) {\n             block.append(unboxPrimitiveIfNecessary(scope, returnType));\n         }\n+        if (Object.class.equals(returnType)) {\n+            block.comment(\"Cast to proper SQL return type\").checkCast(sqlReturnType.getJavaType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4Nzg4MA==", "bodyText": "Why equals? Would \"object.class.isAssignableFrom returntype && returntype != sqlReturnType.getJavaType()\" be better?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887880", "createdAt": "2020-12-29T23:37:39Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -345,6 +350,9 @@ else if (type == ConnectorSession.class) {\n         if (functionMetadata.isNullable()) {\n             block.append(unboxPrimitiveIfNecessary(scope, returnType));\n         }\n+        if (Object.class.equals(returnType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4Nzk5NQ==", "bodyText": "squash! Fix array subscripting for SQL types represented as Objects\n\nremove squash from the message", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887995", "createdAt": "2020-12-29T23:38:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,9 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODI3MA==", "bodyText": "Typically this comment would go before this line (standalone).\nBut I think it's fine to go without a comment at all here", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549888270", "createdAt": "2020-12-29T23:39:53Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,9 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(\n+                    // Force this operator to return the element type instead of Object", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODM1NA==", "bodyText": "This got reverted. Was that an abandoned attempt approach?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549888354", "createdAt": "2020-12-29T23:40:29Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -350,9 +345,6 @@ else if (type == ConnectorSession.class) {\n         if (functionMetadata.isNullable()) {\n             block.append(unboxPrimitiveIfNecessary(scope, returnType));\n         }\n-        if (Object.class.equals(returnType)) {\n-            block.comment(\"Cast to proper SQL return type\").checkCast(sqlReturnType.getJavaType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODcwOA==", "bodyText": "Looks very sturdy but then the expression below doesn't validate that the expression used is indeed a timestamp nanos, so the value of this check is comemntary\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Verify that timestamps with nanoseconds are represented as a non-slice object\n          \n          \n            \n                    assertTrue(TIMESTAMP_NANOS.getJavaType() == LongTimestamp.class && !Slice.class.isAssignableFrom(LongTimestamp.class));\n          \n          \n            \n                    // timestamp(9) has LongTimestamp stack representation (Object-based)", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549888708", "createdAt": "2020-12-29T23:42:50Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +752,17 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testObjectSubscript()\n+    {\n+        // Verify that timestamps with nanoseconds are represented as a non-slice object\n+        assertTrue(TIMESTAMP_NANOS.getJavaType() == LongTimestamp.class && !Slice.class.isAssignableFrom(LongTimestamp.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODg4OQ==", "bodyText": "and it's gone?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549888889", "createdAt": "2020-12-29T23:43:46Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -752,17 +749,6 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n-    @Test\n-    public void testObjectSubscript()\n-    {\n-        // Verify that timestamps with nanoseconds are represented as a non-slice object\n-        assertTrue(TIMESTAMP_NANOS.getJavaType() == LongTimestamp.class && !Slice.class.isAssignableFrom(LongTimestamp.class));\n-        assertFunction(\n-                \"CAST((ARRAY [TIMESTAMP '1970-01-01 00:00:00.000000001'])[1] AS VARCHAR(30))\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4OTIxMA==", "bodyText": "The check was previously reversed, so what is actually satisfied is equality.\nAnd indeed, the stack representation is not polymorphic today, so equality can be demanded.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549889210", "createdAt": "2020-12-29T23:45:37Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -2025,11 +2025,13 @@ private static void verifyMethodHandleSignature(BoundSignature boundSignature, F\n         Type returnType = boundSignature.getReturnType();\n         switch (convention.getReturnConvention()) {\n             case FAIL_ON_NULL:\n-                verifyFunctionSignature(methodType.returnType().isAssignableFrom(returnType.getJavaType()),\n+                verifyFunctionSignature(\n+                        returnType.getJavaType().isAssignableFrom(methodType.returnType()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNDE5Mzkx", "url": "https://github.com/trinodb/trino/pull/6467#pullrequestreview-560419391", "createdAt": "2020-12-31T14:58:32Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNDo1ODozMlrOIM_1dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNDo1ODozMlrOIM_1dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5OTcwMw==", "bodyText": "a Block is a special case.\nit works today, dunno why\nassertFunction(\"CAST((ARRAY[ARRAY['xxx']])[1] AS json)\", JSON, \"[\\\"xxx\\\"]\"); // block\n\nbut still worth having a test\nnote: cast here is to JSON, because of #6347\nthis anomaly in test cases leads to a question whether assertSubscriptCast is worth having separate or inline back. I'd inline.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550499703", "createdAt": "2020-12-31T14:58:32Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +750,23 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testSubscriptReturnType()\n+    {\n+        // Test return type of array subscript by passing it to another operation\n+        // One test for each specialization of the operator\n+        assertSubscriptCast(\"true\", \"true\"); // boolean\n+        assertSubscriptCast(\"1234\", \"1234\"); // long\n+        assertSubscriptCast(\"1.23\", \"1.23\"); // double\n+        assertSubscriptCast(\"IPADDRESS '127.0.0.1'\", \"127.0.0.1\"); // slice\n+        assertSubscriptCast(\"TIMESTAMP '1970-01-01 00:00:00.000000001'\", \"1970-01-01 00:00:00.000000001\"); // object (LongTimestamp)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTA5MzY5", "url": "https://github.com/trinodb/trino/pull/6467#pullrequestreview-560509369", "createdAt": "2020-12-31T16:06:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNjowNjoyMVrOINA5tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNjowNjoyMVrOINA5tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUxNzE3Mg==", "bodyText": "select CAST((ARRAY [TIMESTAMP '1970-01-01 00:00:00.000000001'])[1] AS VARCHAR); does not fail even without your fixes.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550517172", "createdAt": "2020-12-31T16:06:21Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +750,23 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testSubscriptReturnType()\n+    {\n+        // Test return type of array subscript by passing it to another operation\n+        // One test for each specialization of the operator\n+        assertSubscriptCast(\"true\", \"true\"); // boolean\n+        assertSubscriptCast(\"1234\", \"1234\"); // long\n+        assertSubscriptCast(\"1.23\", \"1.23\"); // double\n+        assertSubscriptCast(\"IPADDRESS '127.0.0.1'\", \"127.0.0.1\"); // slice\n+        assertSubscriptCast(\"TIMESTAMP '1970-01-01 00:00:00.000000001'\", \"1970-01-01 00:00:00.000000001\"); // object (LongTimestamp)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTEwNjE3", "url": "https://github.com/trinodb/trino/pull/6467#pullrequestreview-560510617", "createdAt": "2020-12-31T16:13:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNjoxMzozOFrOINBP0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNjoxMzozOFrOINBP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUyMjgzMw==", "bodyText": "I was planning to add suggestion to add extra casting in the generated code, as I was expecting array subscript is not only affected function.\nFor example I expected MapSubscriptOperator to have same issue. But for some reason I do not reproduce the problem with\nCREATE TABLE test (col MAP(VARCHAR,TIMESTAMP(7)));\n\ninteresting.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550522833", "createdAt": "2020-12-31T16:13:38Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,8 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(\n+                    METHOD_HANDLE_OBJECT.type().changeReturnType(elementType.getJavaType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTEzMzQ0", "url": "https://github.com/trinodb/trino/pull/6467#pullrequestreview-560513344", "createdAt": "2020-12-31T16:29:22Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjA3MTUz", "url": "https://github.com/trinodb/trino/pull/6467#pullrequestreview-560607153", "createdAt": "2021-01-01T21:43:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMTo0Mzo0NFrOINSypg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMTo0Mzo0NFrOINSypg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxMDI3OA==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550810278", "createdAt": "2021-01-01T21:43:44Z", "author": {"login": "findepi"}, "path": "presto-server-main/etc/catalog/tpch.properties", "diffHunk": "@@ -1,9 +0,0 @@\n-#\n-# WARNING\n-# ^^^^^^^\n-# This configuration file is for development only and should NOT be used\n-# in production. For example configuration, see the Presto documentation.\n-#\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ab203aff87aa4e63fb5c2ed2c31fd580bf0eaf", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/45ab203aff87aa4e63fb5c2ed2c31fd580bf0eaf", "committedDate": "2021-01-04T14:38:54Z", "message": "Fix array subscripting for SQL types represented as Objects\n\nWhen subscripting arrays containing SQL types represented as Java\nObjects (as opposed to long-, double-, or Slice-based types), the\ntype returned was previously Object.\n\nThis caused compiler failures when attempting to perform any operation\nafter subscripting (i.e. `fn(arr[1])`), because of the mismatch\nbetween the actual type (Object) and type expected by the following\noperation (e.g. LongTimestamp)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "45ab203aff87aa4e63fb5c2ed2c31fd580bf0eaf", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/45ab203aff87aa4e63fb5c2ed2c31fd580bf0eaf", "committedDate": "2021-01-04T14:38:54Z", "message": "Fix array subscripting for SQL types represented as Objects\n\nWhen subscripting arrays containing SQL types represented as Java\nObjects (as opposed to long-, double-, or Slice-based types), the\ntype returned was previously Object.\n\nThis caused compiler failures when attempting to perform any operation\nafter subscripting (i.e. `fn(arr[1])`), because of the mismatch\nbetween the actual type (Object) and type expected by the following\noperation (e.g. LongTimestamp)."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1784, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}