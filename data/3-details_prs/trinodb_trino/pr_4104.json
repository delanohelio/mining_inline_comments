{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3Mjg0MjIw", "number": 4104, "title": "Add pushdown for parquet timestamp predicate", "bodyText": "", "createdAt": "2020-06-19T20:31:27Z", "url": "https://github.com/trinodb/trino/pull/4104", "merged": true, "mergeCommit": {"oid": "dc1c442a584b675276f9fc5ffe36e13b88ceea09"}, "closed": true, "closedAt": "2020-06-24T15:36:38Z", "author": {"login": "alexjo2144"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuDepHgFqTQzNTY2MzU3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuL5pNgFqTQzNjE1MjgwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjYzNTc4", "url": "https://github.com/trinodb/trino/pull/4104#pullrequestreview-435663578", "createdAt": "2020-06-23T10:48:48Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0ODo0OFrOGnjyig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTowODo1NlrOGnkXmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDAyNg==", "bodyText": "assertThat produces better exc msg than assertTrue(... > ...)", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444134026", "createdAt": "2020-06-23T10:48:48Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4041,6 +4042,34 @@ public void testPredicatePushDownToTableScan()\n         }\n     }\n \n+    @Test\n+    public void testParquetTimestampPredicatePushdown()\n+    {\n+        assertUpdate(\"CREATE TABLE test_parquet_timestamp_predicate_pushdown (t TIMESTAMP) WITH (format = 'PARQUET')\");\n+        assertUpdate(\"INSERT INTO test_parquet_timestamp_predicate_pushdown VALUES (TIMESTAMP '2012-10-31 01:00')\", 1);\n+\n+        DistributedQueryRunner queryRunner = (DistributedQueryRunner) getQueryRunner();\n+        ResultWithQueryId<MaterializedResult> queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t < TIMESTAMP '2012-10-31 01:00'\");\n+        assertEquals(getProcessedInputDataSize(queryRunner, queryResult), 0);\n+\n+        queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t > TIMESTAMP '2012-10-31 01:00'\");\n+        assertEquals(getProcessedInputDataSize(queryRunner, queryResult), 0);\n+\n+        queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t = TIMESTAMP '2012-10-31 01:00'\");\n+        assertTrue(getProcessedInputDataSize(queryRunner, queryResult) > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDc2NA==", "bodyText": "That's not too long, but would be slightly better to extract QueryInfo fullQueryInfo var", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444134764", "createdAt": "2020-06-23T10:50:19Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4041,6 +4042,34 @@ public void testPredicatePushDownToTableScan()\n         }\n     }\n \n+    @Test\n+    public void testParquetTimestampPredicatePushdown()\n+    {\n+        assertUpdate(\"CREATE TABLE test_parquet_timestamp_predicate_pushdown (t TIMESTAMP) WITH (format = 'PARQUET')\");\n+        assertUpdate(\"INSERT INTO test_parquet_timestamp_predicate_pushdown VALUES (TIMESTAMP '2012-10-31 01:00')\", 1);\n+\n+        DistributedQueryRunner queryRunner = (DistributedQueryRunner) getQueryRunner();\n+        ResultWithQueryId<MaterializedResult> queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t < TIMESTAMP '2012-10-31 01:00'\");\n+        assertEquals(getProcessedInputDataSize(queryRunner, queryResult), 0);\n+\n+        queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t > TIMESTAMP '2012-10-31 01:00'\");\n+        assertEquals(getProcessedInputDataSize(queryRunner, queryResult), 0);\n+\n+        queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t = TIMESTAMP '2012-10-31 01:00'\");\n+        assertTrue(getProcessedInputDataSize(queryRunner, queryResult) > 0);\n+    }\n+\n+    private long getProcessedInputDataSize(DistributedQueryRunner queryRunner, ResultWithQueryId<MaterializedResult> queryResult)\n+    {\n+        return queryRunner.getCoordinator().getQueryManager().getFullQueryInfo(queryResult.getQueryId()).getQueryStats().getProcessedInputDataSize().toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzODkwMQ==", "bodyText": "Change the min max variables to long, since they cannot be null here (and you do not allow them to be)", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444138901", "createdAt": "2020-06-23T10:58:58Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -229,6 +231,18 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n             return createDomain(type, hasNullValue, parquetIntegerStatistics);\n         }\n \n+        if (type instanceof TimestampType && statistics instanceof BinaryStatistics) {\n+            BinaryStatistics binaryStatistics = (BinaryStatistics) statistics;\n+            Long max = getTimestampMillis(binaryStatistics.genericGetMax());\n+            Long min = getTimestampMillis(binaryStatistics.genericGetMin());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzOTQ4Mw==", "bodyText": "You can make fields and ctor args primitive long", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444139483", "createdAt": "2020-06-23T11:00:18Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/ParquetTimestampStatistics.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.predicate;\n+\n+public class ParquetTimestampStatistics\n+        implements ParquetRangeStatistics<Long>\n+{\n+    private final Long minimum;\n+    private final Long maximum;\n+\n+    public ParquetTimestampStatistics(Long min, Long max)\n+    {\n+        this.minimum = min;\n+        this.maximum = max;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MDcxNA==", "bodyText": "testTimestampMilli -> testTimestampMillis", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444140714", "createdAt": "2020-06-23T11:02:49Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MDc4OA==", "bodyText": "use constant moment", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444140788", "createdAt": "2020-06-23T11:02:58Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()\n+            throws ParquetCorruptionException\n+    {\n+        Instant now = Instant.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MjE0Ng==", "bodyText": "Slice slice = Slices.allocate(12);\nslice.setLong(0, timeOfDayNanos);\nslice.setInt(8, millisToJulianDay(timestamp.toEpochMilli()));\nreturn slice.byteArray();", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444142146", "createdAt": "2020-06-23T11:05:59Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()\n+            throws ParquetCorruptionException\n+    {\n+        Instant now = Instant.now();\n+        String column = \"timestampColumn\";\n+        ShortTimestampType timestampType = new ShortTimestampType(3);\n+        assertEquals(getDomain(timestampType, 0, null, ID, column, true), all(timestampType));\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now, now), ID, column, true), singleValue(timestampType, now.toEpochMilli()));\n+        assertEquals(\n+                getDomain(timestampType, 10, timestampColumnStats(now.minusSeconds(10), now), ID, column, true),\n+                create(ValueSet.ofRanges(range(timestampType, now.minusSeconds(10).toEpochMilli(), true, now.toEpochMilli(), true)), false));\n+\n+        // ignore corrupted statistics\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, false), create(ValueSet.all(timestampType), false));\n+        // fail on corrupted statistics\n+        assertThatExceptionOfType(ParquetCorruptionException.class)\n+                .isThrownBy(() -> getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, true))\n+                .withMessageMatching(\"Corrupted statistics for column \\\"timestampColumn\\\" in Parquet file \\\"testFile\\\":.*\");\n+    }\n+\n+    private static BinaryStatistics timestampColumnStats(Instant minimum, Instant maximum)\n+    {\n+        BinaryStatistics statistics = new BinaryStatistics();\n+        statistics.setMinMax(Binary.fromConstantByteArray(toParquetEncoding(minimum)), Binary.fromConstantByteArray(toParquetEncoding(maximum)));\n+        return statistics;\n+    }\n+\n+    private static byte[] toParquetEncoding(Instant timestamp)\n+    {\n+        long startOfDay = LocalDate.ofInstant(timestamp, ZoneOffset.UTC).atStartOfDay().toInstant(ZoneOffset.UTC).toEpochMilli();\n+        long timeOfDayNanos = (long) ((timestamp.toEpochMilli() - startOfDay) * Math.pow(10, 6));\n+\n+        ByteBuffer encoding = ByteBuffer.allocate(12).order(ByteOrder.LITTLE_ENDIAN);\n+        encoding.putLong(timeOfDayNanos);\n+        encoding.putInt(millisToJulianDay(timestamp.toEpochMilli()));\n+        byte[] arr = new byte[12];\n+        encoding.position(0).get(arr, 0, 12);\n+        return arr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MzE0OQ==", "bodyText": "we usually just [TimeUnit.]MILLISECONDS.toDays(timestamp)\navoid unckeched (int) cast\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int) (timestamp / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS;\n          \n          \n            \n                    return toIntExact(MILLISECONDS.toDays(timestamp) + JULIAN_EPOCH_OFFSET_DAYS);", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444143149", "createdAt": "2020-06-23T11:08:05Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()\n+            throws ParquetCorruptionException\n+    {\n+        Instant now = Instant.now();\n+        String column = \"timestampColumn\";\n+        ShortTimestampType timestampType = new ShortTimestampType(3);\n+        assertEquals(getDomain(timestampType, 0, null, ID, column, true), all(timestampType));\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now, now), ID, column, true), singleValue(timestampType, now.toEpochMilli()));\n+        assertEquals(\n+                getDomain(timestampType, 10, timestampColumnStats(now.minusSeconds(10), now), ID, column, true),\n+                create(ValueSet.ofRanges(range(timestampType, now.minusSeconds(10).toEpochMilli(), true, now.toEpochMilli(), true)), false));\n+\n+        // ignore corrupted statistics\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, false), create(ValueSet.all(timestampType), false));\n+        // fail on corrupted statistics\n+        assertThatExceptionOfType(ParquetCorruptionException.class)\n+                .isThrownBy(() -> getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, true))\n+                .withMessageMatching(\"Corrupted statistics for column \\\"timestampColumn\\\" in Parquet file \\\"testFile\\\":.*\");\n+    }\n+\n+    private static BinaryStatistics timestampColumnStats(Instant minimum, Instant maximum)\n+    {\n+        BinaryStatistics statistics = new BinaryStatistics();\n+        statistics.setMinMax(Binary.fromConstantByteArray(toParquetEncoding(minimum)), Binary.fromConstantByteArray(toParquetEncoding(maximum)));\n+        return statistics;\n+    }\n+\n+    private static byte[] toParquetEncoding(Instant timestamp)\n+    {\n+        long startOfDay = LocalDate.ofInstant(timestamp, ZoneOffset.UTC).atStartOfDay().toInstant(ZoneOffset.UTC).toEpochMilli();\n+        long timeOfDayNanos = (long) ((timestamp.toEpochMilli() - startOfDay) * Math.pow(10, 6));\n+\n+        ByteBuffer encoding = ByteBuffer.allocate(12).order(ByteOrder.LITTLE_ENDIAN);\n+        encoding.putLong(timeOfDayNanos);\n+        encoding.putInt(millisToJulianDay(timestamp.toEpochMilli()));\n+        byte[] arr = new byte[12];\n+        encoding.position(0).get(arr, 0, 12);\n+        return arr;\n+    }\n+\n+    private static final int JULIAN_EPOCH_OFFSET_DAYS = 2_440_588;\n+    private static final long MILLIS_IN_DAY = TimeUnit.DAYS.toMillis(1);\n+\n+    private static int millisToJulianDay(long timestamp)\n+    {\n+        return (int) (timestamp / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MzUxMg==", "bodyText": "Let's reuse io.prestosql.parquet.ParquetTimestampUtils#JULIAN_EPOCH_OFFSET_DAYS\n(package private, @VisibleForTesting)", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444143512", "createdAt": "2020-06-23T11:08:56Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()\n+            throws ParquetCorruptionException\n+    {\n+        Instant now = Instant.now();\n+        String column = \"timestampColumn\";\n+        ShortTimestampType timestampType = new ShortTimestampType(3);\n+        assertEquals(getDomain(timestampType, 0, null, ID, column, true), all(timestampType));\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now, now), ID, column, true), singleValue(timestampType, now.toEpochMilli()));\n+        assertEquals(\n+                getDomain(timestampType, 10, timestampColumnStats(now.minusSeconds(10), now), ID, column, true),\n+                create(ValueSet.ofRanges(range(timestampType, now.minusSeconds(10).toEpochMilli(), true, now.toEpochMilli(), true)), false));\n+\n+        // ignore corrupted statistics\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, false), create(ValueSet.all(timestampType), false));\n+        // fail on corrupted statistics\n+        assertThatExceptionOfType(ParquetCorruptionException.class)\n+                .isThrownBy(() -> getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, true))\n+                .withMessageMatching(\"Corrupted statistics for column \\\"timestampColumn\\\" in Parquet file \\\"testFile\\\":.*\");\n+    }\n+\n+    private static BinaryStatistics timestampColumnStats(Instant minimum, Instant maximum)\n+    {\n+        BinaryStatistics statistics = new BinaryStatistics();\n+        statistics.setMinMax(Binary.fromConstantByteArray(toParquetEncoding(minimum)), Binary.fromConstantByteArray(toParquetEncoding(maximum)));\n+        return statistics;\n+    }\n+\n+    private static byte[] toParquetEncoding(Instant timestamp)\n+    {\n+        long startOfDay = LocalDate.ofInstant(timestamp, ZoneOffset.UTC).atStartOfDay().toInstant(ZoneOffset.UTC).toEpochMilli();\n+        long timeOfDayNanos = (long) ((timestamp.toEpochMilli() - startOfDay) * Math.pow(10, 6));\n+\n+        ByteBuffer encoding = ByteBuffer.allocate(12).order(ByteOrder.LITTLE_ENDIAN);\n+        encoding.putLong(timeOfDayNanos);\n+        encoding.putInt(millisToJulianDay(timestamp.toEpochMilli()));\n+        byte[] arr = new byte[12];\n+        encoding.position(0).get(arr, 0, 12);\n+        return arr;\n+    }\n+\n+    private static final int JULIAN_EPOCH_OFFSET_DAYS = 2_440_588;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ee8a5a62b262114917df45ff260864040f88bd", "author": {"user": {"login": "alexjo2144", "name": "Alexander Jo"}}, "url": "https://github.com/trinodb/trino/commit/80ee8a5a62b262114917df45ff260864040f88bd", "committedDate": "2020-06-23T17:59:04Z", "message": "Add pushdown for parquet timestamp predicate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "80ee8a5a62b262114917df45ff260864040f88bd", "author": {"user": {"login": "alexjo2144", "name": "Alexander Jo"}}, "url": "https://github.com/trinodb/trino/commit/80ee8a5a62b262114917df45ff260864040f88bd", "committedDate": "2020-06-23T17:59:04Z", "message": "Add pushdown for parquet timestamp predicate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTUyODAx", "url": "https://github.com/trinodb/trino/pull/4104#pullrequestreview-436152801", "createdAt": "2020-06-23T20:58:31Z", "commit": {"oid": "80ee8a5a62b262114917df45ff260864040f88bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 465, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}