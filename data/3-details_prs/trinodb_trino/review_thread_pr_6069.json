{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MzIwMTcz", "number": 6069, "reviewThreads": {"totalCount": 95, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxODo1MzoyN1rOFSBHIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xOFQxMjoxNjo1MVrOGjr1qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NDM2ODk3OnYy", "diffSide": "RIGHT", "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxODo1MzoyN1rOIYxDJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxODo1MzoyN1rOIYxDJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0MDM1Ng==", "bodyText": "This should be enabled by default. It should exist as a fallback only until we're confident the feature works as expected, and then we should remove it entirely.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r562840356", "createdAt": "2021-01-22T18:53:27Z", "author": {"login": "martint"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotConfig.java", "diffHunk": "@@ -50,6 +50,7 @@\n     private int fetchRetryCount = 2;\n     private int nonAggregateLimitForBrokerQueries = 25_000;\n     private int maxRowsPerSplitForSegmentQueries = 50_000;\n+    private boolean aggregationPushdownEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NDM3NDY4OnYy", "diffSide": "RIGHT", "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxODo1NToxMlrOIYxGyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wM1QxODowOTowNVrOJnJEJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0MTI5MQ==", "bodyText": "Why?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r562841291", "createdAt": "2021-01-22T18:55:12Z", "author": {"login": "martint"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotMetadata.java", "diffHunk": "@@ -267,6 +278,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+\n+        if (tableHandle.getQuery().isPresent()) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzY4MzU2MA==", "bodyText": "If the query is already a broker query that means that either aggregation pushdown was already done or it's a \"passthrough\" query. In a subsequent pr the \"passthrough\" query feature will be disabled.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r587683560", "createdAt": "2021-03-04T17:44:15Z", "author": {"login": "elonazoulay"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotMetadata.java", "diffHunk": "@@ -267,6 +278,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+\n+        if (tableHandle.getQuery().isPresent()) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0MTI5MQ=="}, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTAyMjc1Ng==", "bodyText": "This is now handled. All cases except aggregations for aggregate queries, as pinot cannot do subqueries.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r645022756", "createdAt": "2021-06-03T18:09:05Z", "author": {"login": "elonazoulay"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotMetadata.java", "diffHunk": "@@ -267,6 +278,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+\n+        if (tableHandle.getQuery().isPresent()) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0MTI5MQ=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NTM3MjA4OnYy", "diffSide": "RIGHT", "path": "presto-pinot/src/main/java/io/prestosql/pinot/query/DynamicTableBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMToyMzoxNFrOIY6hhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQxMDoyNTo1MFrOJL_dvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5NTU4OA==", "bodyText": "I'm not sure I understand this comment. What do you mean by \"aggregation expressions\"?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r562995588", "createdAt": "2021-01-23T01:23:14Z", "author": {"login": "martint"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,32 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/prestosql/presto/issues/4171\n+                // Until then this branch will never be executed", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzY4NDQzNg==", "bodyText": "Using an aggregate function on an expression, not just a single column, ex. sum(x + y) vs sum(x).", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r587684436", "createdAt": "2021-03-04T17:45:31Z", "author": {"login": "elonazoulay"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,32 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/prestosql/presto/issues/4171\n+                // Until then this branch will never be executed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5NTU4OA=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjU1MzkxNg==", "bodyText": "Removed, since it would never be executed anyway.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616553916", "createdAt": "2021-04-20T10:25:50Z", "author": {"login": "elonazoulay"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,32 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/prestosql/presto/issues/4171\n+                // Until then this branch will never be executed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5NTU4OA=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1ODAzNzUyOnYy", "diffSide": "RIGHT", "path": "presto-pinot/src/main/java/io/prestosql/pinot/query/DynamicTableBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMToxNlrOIaueAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMToxNlrOIaueAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5NTIzMg==", "bodyText": "This is hard to read, especially with the optional and lambda in the middle. I'd break it up into multiple parts and make the check more explicit.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r564895232", "createdAt": "2021-01-26T23:01:16Z", "author": {"login": "martint"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,32 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/prestosql/presto/issues/4171\n+                // Until then this branch will never be executed\n+                return Optional.of(\"distinctcount\");\n+            }\n+            return Optional.empty();\n+        }\n+        return Optional.of(aggregateFunction.getFunctionName());\n+    }\n+\n+    public static String getInputExpresion(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        // Pinot converts count(column_name) to count(*)\n+        if (aggregateFunction.getInputs().isEmpty() || getAggregationFunctionName(aggregateFunction).map(functionName -> functionName.equalsIgnoreCase(\"count\")).orElse(false)) {\n+            return \"*\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1ODA0MTI0OnYy", "diffSide": "RIGHT", "path": "presto-pinot/src/test/java/io/prestosql/pinot/PinotQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMTo1NFrOIaugrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMTo1NFrOIaugrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5NTkxOQ==", "bodyText": "This seems unrelated to this change, so move to a separate commit", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r564895919", "createdAt": "2021-01-26T23:01:54Z", "author": {"login": "martint"}, "path": "presto-pinot/src/test/java/io/prestosql/pinot/PinotQueryRunner.java", "diffHunk": "@@ -36,19 +39,26 @@ public static DistributedQueryRunner createPinotQueryRunner(Map<String, String>\n             throws Exception\n     {\n         DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(createSession(\"default\"))\n-                .setNodeCount(2)\n+                .setNodeCount(3)\n                 .setExtraProperties(extraProperties)\n                 .build();\n         queryRunner.installPlugin(new PinotPlugin(extension));\n-        queryRunner.createCatalog(\"pinot\", \"pinot\", extraPinotProperties);\n+        queryRunner.createCatalog(PINOT_CATALOG, PINOT_CATALOG, extraPinotProperties);\n         return queryRunner;\n     }\n \n     public static Session createSession(String schema)\n+    {\n+        return createSession(schema, new PinotConfig());\n+    }\n+\n+    public static Session createSession(String schema, PinotConfig config)\n     {\n         SessionPropertyManager sessionPropertyManager = new SessionPropertyManager();\n+        PinotSessionProperties pinotSessionProperties = new PinotSessionProperties(config);\n+        sessionPropertyManager.addConnectorSessionProperties(new CatalogName(PINOT_CATALOG), pinotSessionProperties.getSessionProperties());\n         return testSessionBuilder(sessionPropertyManager)\n-                .setCatalog(\"pinot\")\n+                .setCatalog(PINOT_CATALOG)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1ODA1NzUxOnYy", "diffSide": "RIGHT", "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNToxNlrOIaus8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQxNzoyMTowM1rOJLf2-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5OTA1OA==", "bodyText": "What role does this column name have? Will it be an issue if it contains characters like parentheses?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r564899058", "createdAt": "2021-01-26T23:05:16Z", "author": {"login": "martint"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotMetadata.java", "diffHunk": "@@ -267,6 +278,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+\n+        if (tableHandle.getQuery().isPresent()) {\n+            return Optional.empty();\n+        }\n+        if (tableHandle.getLimit().isPresent()) {\n+            // handle's limit is applied after aggregations, so we cannot apply aggregations if limit is already set\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            String inputExpression = getInputExpresion(aggregate);\n+            Optional<String> aggregateFunctionName = getAggregationFunctionName(aggregate);\n+            if (!aggregateFunctionName.isPresent()) {\n+                return Optional.empty();\n+            }\n+            String outputColumnName = format(\"%s(%s)\", aggregateFunctionName.get(), inputExpression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODc0NzA2Mw==", "bodyText": "It's used to build the aggregate expression, pinot names the output column as \"functionName(columnName)\". Currently inputExpression is a single column name, even if it contains parens it would not be an issue.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r588747063", "createdAt": "2021-03-05T22:07:28Z", "author": {"login": "elonazoulay"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotMetadata.java", "diffHunk": "@@ -267,6 +278,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+\n+        if (tableHandle.getQuery().isPresent()) {\n+            return Optional.empty();\n+        }\n+        if (tableHandle.getLimit().isPresent()) {\n+            // handle's limit is applied after aggregations, so we cannot apply aggregations if limit is already set\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            String inputExpression = getInputExpresion(aggregate);\n+            Optional<String> aggregateFunctionName = getAggregationFunctionName(aggregate);\n+            if (!aggregateFunctionName.isPresent()) {\n+                return Optional.empty();\n+            }\n+            String outputColumnName = format(\"%s(%s)\", aggregateFunctionName.get(), inputExpression);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5OTA1OA=="}, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjAzNjA5MA==", "bodyText": "Added tests to ensure we capture all the behavior from pinot. Found some surprising things like pinot lower cases mixed case columns when there is an aggregate function used, and there is no min(string_type) function.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616036090", "createdAt": "2021-04-19T17:21:03Z", "author": {"login": "elonazoulay"}, "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotMetadata.java", "diffHunk": "@@ -267,6 +278,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+\n+        if (tableHandle.getQuery().isPresent()) {\n+            return Optional.empty();\n+        }\n+        if (tableHandle.getLimit().isPresent()) {\n+            // handle's limit is applied after aggregations, so we cannot apply aggregations if limit is already set\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            String inputExpression = getInputExpresion(aggregate);\n+            Optional<String> aggregateFunctionName = getAggregationFunctionName(aggregate);\n+            if (!aggregateFunctionName.isPresent()) {\n+                return Optional.empty();\n+            }\n+            String outputColumnName = format(\"%s(%s)\", aggregateFunctionName.get(), inputExpression);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5OTA1OA=="}, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwOTYyNzQ0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMTo0Njo1OVrOIwnfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMTo0Njo1OVrOIwnfqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzg0OTY0MQ==", "bodyText": "nit: here & elsewhere, update the link please", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r587849641", "createdAt": "2021-03-04T21:46:59Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,34 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/prestosql/presto/issues/4171", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNzE0NjMxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQyMjoyODoxMlrOIxp_bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQxNzoxOToyOFrOJLfy_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTExOQ==", "bodyText": "The two are not equivalent. in SQL, count(column_name) counts how many non-null values there are", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r588939119", "createdAt": "2021-03-06T22:28:12Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,34 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/trinodb/trino/issues/4171\n+                // Until then this branch will never be executed\n+                return Optional.of(\"distinctcount\");\n+            }\n+            return Optional.empty();\n+        }\n+        return Optional.of(aggregateFunction.getFunctionName());\n+    }\n+\n+    public static String getInputExpresion(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        Optional<String> aggregationFunctionName = getAggregationFunctionName(aggregateFunction);\n+        boolean isCountFunction = aggregationFunctionName.map(name -> name.equalsIgnoreCase(\"count\")).orElse(false);\n+        // Pinot converts count(column_name) to count(*)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzUzMjczOQ==", "bodyText": "Thanks! I will add the is not null filter for that case.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r593532739", "createdAt": "2021-03-13T01:01:41Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,34 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/trinodb/trino/issues/4171\n+                // Until then this branch will never be executed\n+                return Optional.of(\"distinctcount\");\n+            }\n+            return Optional.empty();\n+        }\n+        return Optional.of(aggregateFunction.getFunctionName());\n+    }\n+\n+    public static String getInputExpresion(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        Optional<String> aggregationFunctionName = getAggregationFunctionName(aggregateFunction);\n+        boolean isCountFunction = aggregationFunctionName.map(name -> name.equalsIgnoreCase(\"count\")).orElse(false);\n+        // Pinot converts count(column_name) to count(*)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTExOQ=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDUzNDE0MA==", "bodyText": "Changed to preserve the column name. Null value support will then be handled by pinot (still in progress): https://docs.pinot.apache.org/developers/advanced/null-value-support.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r614534140", "createdAt": "2021-04-16T03:21:37Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,34 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/trinodb/trino/issues/4171\n+                // Until then this branch will never be executed\n+                return Optional.of(\"distinctcount\");\n+            }\n+            return Optional.empty();\n+        }\n+        return Optional.of(aggregateFunction.getFunctionName());\n+    }\n+\n+    public static String getInputExpresion(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        Optional<String> aggregationFunctionName = getAggregationFunctionName(aggregateFunction);\n+        boolean isCountFunction = aggregationFunctionName.map(name -> name.equalsIgnoreCase(\"count\")).orElse(false);\n+        // Pinot converts count(column_name) to count(*)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTExOQ=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDg3MDQ1MQ==", "bodyText": "Update: pinot converts count(<column name>) to count(*). Changed behavior to enforce that only count(*) is used to avoid result set column mapping mismatches. When count(<column name>) is supported in pinot I will update the code.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r614870451", "createdAt": "2021-04-16T14:12:52Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,34 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/trinodb/trino/issues/4171\n+                // Until then this branch will never be executed\n+                return Optional.of(\"distinctcount\");\n+            }\n+            return Optional.empty();\n+        }\n+        return Optional.of(aggregateFunction.getFunctionName());\n+    }\n+\n+    public static String getInputExpresion(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        Optional<String> aggregationFunctionName = getAggregationFunctionName(aggregateFunction);\n+        boolean isCountFunction = aggregationFunctionName.map(name -> name.equalsIgnoreCase(\"count\")).orElse(false);\n+        // Pinot converts count(column_name) to count(*)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTExOQ=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDg4MDc1Ng==", "bodyText": "Update: pinot converts count(<column name>) to count(*).\n\nWe should have a correctness-ensuring, reusable connector test for count(a) over nullable data.\nCan you please ensure we have one, or add?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r614880756", "createdAt": "2021-04-16T14:26:41Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,34 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/trinodb/trino/issues/4171\n+                // Until then this branch will never be executed\n+                return Optional.of(\"distinctcount\");\n+            }\n+            return Optional.empty();\n+        }\n+        return Optional.of(aggregateFunction.getFunctionName());\n+    }\n+\n+    public static String getInputExpresion(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        Optional<String> aggregationFunctionName = getAggregationFunctionName(aggregateFunction);\n+        boolean isCountFunction = aggregationFunctionName.map(name -> name.equalsIgnoreCase(\"count\")).orElse(false);\n+        // Pinot converts count(column_name) to count(*)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTExOQ=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTQwNjAwMQ==", "bodyText": "I added tests to ensure count(*) is used, and enabled the \"null handling\" pinot config on the test table. There is no null value in pinot, i.e. string null is 'null', long null becomes Long.MIN_VALUE, int null -> Integer.MIN_VALUE.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r615406001", "createdAt": "2021-04-18T14:23:11Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,34 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/trinodb/trino/issues/4171\n+                // Until then this branch will never be executed\n+                return Optional.of(\"distinctcount\");\n+            }\n+            return Optional.empty();\n+        }\n+        return Optional.of(aggregateFunction.getFunctionName());\n+    }\n+\n+    public static String getInputExpresion(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        Optional<String> aggregationFunctionName = getAggregationFunctionName(aggregateFunction);\n+        boolean isCountFunction = aggregationFunctionName.map(name -> name.equalsIgnoreCase(\"count\")).orElse(false);\n+        // Pinot converts count(column_name) to count(*)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTExOQ=="}, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjAzNTA3MA==", "bodyText": "Added thorough null tests and other behavior. Also extracted the first 2 commits to #7627", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616035070", "createdAt": "2021-04-19T17:19:28Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -122,6 +125,34 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n     }\n \n+    public static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (aggregateFunction.isDistinct()) {\n+            if (aggregateFunction.getFunctionName().equalsIgnoreCase(\"count\")) {\n+                // When aggregation expressions push down is implemented,\n+                // count(distinct <expression>) will be mapped to distinctcount(expression)\n+                // See https://github.com/trinodb/trino/issues/4171\n+                // Until then this branch will never be executed\n+                return Optional.of(\"distinctcount\");\n+            }\n+            return Optional.empty();\n+        }\n+        return Optional.of(aggregateFunction.getFunctionName());\n+    }\n+\n+    public static String getInputExpresion(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        Optional<String> aggregationFunctionName = getAggregationFunctionName(aggregateFunction);\n+        boolean isCountFunction = aggregationFunctionName.map(name -> name.equalsIgnoreCase(\"count\")).orElse(false);\n+        // Pinot converts count(column_name) to count(*)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTExOQ=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNzE0ODAzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQyMjozMDowN1rOIxqAMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wM1QxODoxMDowM1rOJnJGZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTMxNQ==", "bodyText": "Can this be modelled with io.trino.plugin.pinot.query.DynamicTable#query as a nested query?\nSee \n  \n    \n      trino/plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java\n    \n    \n         Line 248\n      in\n      6e3bc78\n    \n    \n    \n    \n\n        \n          \n           handle = flushAttributesAsQuery(session, handle); \n        \n    \n  \n\n\nand the test\n\n  \n    \n      trino/plugin/trino-postgresql/src/test/java/io/trino/plugin/postgresql/TestPostgreSqlConnectorTest.java\n    \n    \n         Line 520\n      in\n      f2582d1\n    \n    \n    \n    \n\n        \n          \n           .isFullyPushedDown();", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r588939315", "createdAt": "2021-03-06T22:30:07Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -267,6 +278,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+\n+        if (tableHandle.getQuery().isPresent()) {\n+            return Optional.empty();\n+        }\n+        if (tableHandle.getLimit().isPresent()) {\n+            // handle's limit is applied after aggregations, so we cannot apply aggregations if limit is already set\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTAyMzE1OQ==", "bodyText": "Updated - did not completely remove the dynamic table class, but now filters and limits can be applied multiple times and there are tests to verify pushdown.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r645023159", "createdAt": "2021-06-03T18:09:44Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -267,6 +278,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+\n+        if (tableHandle.getQuery().isPresent()) {\n+            return Optional.empty();\n+        }\n+        if (tableHandle.getLimit().isPresent()) {\n+            // handle's limit is applied after aggregations, so we cannot apply aggregations if limit is already set\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTMxNQ=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTAyMzMzNQ==", "bodyText": "Will update the interface in a subsequent pr", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r645023335", "createdAt": "2021-06-03T18:10:03Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -267,6 +278,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary()));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+\n+        if (tableHandle.getQuery().isPresent()) {\n+            return Optional.empty();\n+        }\n+        if (tableHandle.getLimit().isPresent()) {\n+            // handle's limit is applied after aggregations, so we cannot apply aggregations if limit is already set\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTMxNQ=="}, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxNzE0OTU1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestMinimalFunctionality.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQyMjozMjowNFrOIxqA4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wM1QxODoxMDoxN1rOJnJHEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTQ5MA==", "bodyText": "Can you update the test cases to use io.trino.sql.query.QueryAssertions.QueryAssert#isFullyPushedDown to verify that pushdown actually takes places?\nThis has the added benefit that it automatically verifies correctness, by comparing results with pushdown and without.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r588939490", "createdAt": "2021-03-06T22:32:04Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestMinimalFunctionality.java", "diffHunk": "@@ -184,6 +187,31 @@ public void testLimitForSegmentQueries()\n         assertQueryFails(\"SELECT * FROM \" + TOPIC_AND_TABLE, \"Segment query returned.*\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzUyOTU1Ng==", "bodyText": "Sure will do", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r593529556", "createdAt": "2021-03-13T00:46:10Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestMinimalFunctionality.java", "diffHunk": "@@ -184,6 +187,31 @@ public void testLimitForSegmentQueries()\n         assertQueryFails(\"SELECT * FROM \" + TOPIC_AND_TABLE, \"Segment query returned.*\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTQ5MA=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE1OTgyNg==", "bodyText": "BTW Maybe  you can  copy TestPostgreSqlConnectorTest.test*AggregationPushdown methods into Pinot tests (of course, the relevant ones?)\nThis would give you isFullyPushedDown usage and many test cases out of the box", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616159826", "createdAt": "2021-04-19T20:35:55Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestMinimalFunctionality.java", "diffHunk": "@@ -184,6 +187,31 @@ public void testLimitForSegmentQueries()\n         assertQueryFails(\"SELECT * FROM \" + TOPIC_AND_TABLE, \"Segment query returned.*\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTQ5MA=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTAyMzUwNw==", "bodyText": "Updated.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r645023507", "createdAt": "2021-06-03T18:10:17Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestMinimalFunctionality.java", "diffHunk": "@@ -184,6 +187,31 @@ public void testLimitForSegmentQueries()\n         assertQueryFails(\"SELECT * FROM \" + TOPIC_AND_TABLE, \"Segment query returned.*\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzOTQ5MA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg5OTE0OTM1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQyMDoyOToyNlrOJLnL6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQyMDoyOToyNlrOJLnL6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE1NjEzNg==", "bodyText": "pinot.aggregation-pushdown.enabled", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616156136", "createdAt": "2021-04-19T20:29:26Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "diffHunk": "@@ -257,4 +258,16 @@ public PinotConfig setMaxRowsPerSplitForSegmentQueries(int maxRowsPerSplitForSeg\n         this.maxRowsPerSplitForSegmentQueries = maxRowsPerSplitForSegmentQueries;\n         return this;\n     }\n+\n+    public boolean isAggregationPushdownEnabled()\n+    {\n+        return aggregationPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.enable-aggregation-pushdown\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg5OTE1MTc0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotSessionProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQyMDoyOTo1OVrOJLnNUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQyMDoyOTo1OVrOJLnNUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE1NjQ5OQ==", "bodyText": "aggregation_pushdown_enabled", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616156499", "createdAt": "2021-04-19T20:29:59Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotSessionProperties.java", "diffHunk": "@@ -34,6 +34,7 @@\n     private static final String PREFER_BROKER_QUERIES = \"prefer_broker_queries\";\n     private static final String RETRY_COUNT = \"retry_count\";\n     private static final String NON_AGGREGATE_LIMIT_FOR_BROKER_QUERIES = \"non_aggregate_limit_for_broker_queries\";\n+    private static final String ENABLE_AGGREGATION_PUSHDOWN = \"enable_aggregation_pushdown\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg5OTE3MDI0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestAggregationPushdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQyMDozNTowNVrOJLnYZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQyMDozNTowNVrOJLnYZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE1OTMzNQ==", "bodyText": "Maybe call it TestPinotMetadata since this looks like a unit test of that class", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616159335", "createdAt": "2021-04-19T20:35:05Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestAggregationPushdown.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.trino.plugin.pinot.client.PinotClient;\n+import io.trino.plugin.pinot.query.AggregationExpression;\n+import io.trino.plugin.pinot.query.DynamicTable;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.connector.AggregationApplicationResult;\n+import io.trino.spi.connector.ColumnHandle;\n+import io.trino.spi.expression.Variable;\n+import io.trino.spi.predicate.TupleDomain;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+\n+import static io.airlift.concurrent.Threads.threadsNamed;\n+import static io.trino.plugin.pinot.PinotQueryRunner.createSession;\n+import static io.trino.plugin.pinot.TestPinotQueryBase.getTestingMetadata;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static io.trino.spi.type.DoubleType.DOUBLE;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestAggregationPushdown", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg5OTE3NjQzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestMinimalFunctionality.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQyMDozNjo0MVrOJLncMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwODo1ODozNVrOJL7ZRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE2MDMwNg==", "bodyText": "Why this is expected to fail? please add explanation.\n(same below)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616160306", "createdAt": "2021-04-19T20:36:41Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestMinimalFunctionality.java", "diffHunk": "@@ -184,6 +187,31 @@ public void testLimitForSegmentQueries()\n         assertQueryFails(\"SELECT * FROM \" + TOPIC_AND_TABLE, \"Segment query returned.*\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        Session aggregationPushdownEnabledSession = Session.builder(getDistributedQueryRunner().getDefaultSession())\n+                .setCatalogSessionProperty(\"pinot\", \"enable_aggregation_pushdown\", \"true\")\n+                .build();\n+        String noGroupingsQueryTemplate = \"SELECT COUNT(*), SUM(%1$s), AVG(%1$s), MIN(%1$s), MAX(%1$s) FROM \" + TOPIC_AND_TABLE;\n+        assertQueryFails(format(noGroupingsQueryTemplate, \"long_number\"), \"Segment query returned.*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjQ4NzIzNw==", "bodyText": "Without aggregation pushdown enabled, the connector will query the servers directly. This is a way to test the limit for segment queries. A limit is enforced to avoid pinot servers crashing when too many large selects are run.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616487237", "createdAt": "2021-04-20T08:58:35Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestMinimalFunctionality.java", "diffHunk": "@@ -184,6 +187,31 @@ public void testLimitForSegmentQueries()\n         assertQueryFails(\"SELECT * FROM \" + TOPIC_AND_TABLE, \"Segment query returned.*\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        Session aggregationPushdownEnabledSession = Session.builder(getDistributedQueryRunner().getDefaultSession())\n+                .setCatalogSessionProperty(\"pinot\", \"enable_aggregation_pushdown\", \"true\")\n+                .build();\n+        String noGroupingsQueryTemplate = \"SELECT COUNT(*), SUM(%1$s), AVG(%1$s), MIN(%1$s), MAX(%1$s) FROM \" + TOPIC_AND_TABLE;\n+        assertQueryFails(format(noGroupingsQueryTemplate, \"long_number\"), \"Segment query returned.*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE2MDMwNg=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg5OTE4NTMwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQyMDozODo1NFrOJLnhaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo1MToyMlrOKAIcAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE2MTY0MQ==", "bodyText": "seems like there is some overlap between this test and TestMinimalFunctionality.\nMaybe having one would be enough?\nI'd prefer having tests here, and trying to migrate away of \"test minimal functionality\" classes (they are lightweight, but then it's unclear which tests should be added there and which ones here, etc.)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616161641", "createdAt": "2021-04-19T20:38:54Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+import io.trino.plugin.pinot.client.PinotHostMapper;\n+import io.trino.sql.planner.plan.AggregationNode;\n+import io.trino.sql.planner.plan.ExchangeNode;\n+import io.trino.sql.planner.plan.LimitNode;\n+import io.trino.sql.planner.plan.ProjectNode;\n+import io.trino.testing.AbstractTestQueryFramework;\n+import io.trino.testing.QueryRunner;\n+import io.trino.testing.kafka.TestingKafka;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaBuilder;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.GenericRecordBuilder;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.testcontainers.shaded.org.bouncycastle.util.encoders.Hex;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.inject.multibindings.OptionalBinder.newOptionalBinder;\n+import static io.airlift.testing.Closeables.closeAllRuntimeException;\n+import static io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG;\n+import static java.lang.Math.abs;\n+import static java.lang.String.join;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Test(singleThreaded = true)\n+public class TestPinotIntegrationSmokeTest\n+        extends AbstractTestQueryFramework\n+{\n+    // TODO extend BaseConnectorTest\n+    private static final String ALL_TYPES = \"alltypes\";\n+    private static final int DEFAULT_PINOT_LIMIT_FOR_BROKER_QUERIES = 10;\n+    private static final int COUNT = 1000;\n+    private static final int NULL_COUNT = 17;\n+    private static final int ARRAY_NULL_COUNT = 13;\n+    private TestingPinotCluster pinot;\n+    private TestingKafka kafka;\n+    private Random random;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        random = new Random(22);\n+        kafka = TestingKafka.createWithSchemaRegistry();\n+        kafka.start();\n+        pinot = new TestingPinotCluster(kafka.getNetwork());\n+        pinot.start();\n+\n+        kafka.createTopic(ALL_TYPES);\n+\n+        int step = 3;\n+        int offset = 1;\n+        checkState(COUNT > NULL_COUNT, \"COUNT must be greater than NULL_COUNT\");\n+        checkState(NULL_COUNT > ARRAY_NULL_COUNT, \"NULL_COUNT must be greater than ARRAY_NULL_COUNT\");\n+        ImmutableList.Builder<ProducerRecord<String, GenericRecord>> builder = ImmutableList.builder();\n+        for (long i = 0; i < COUNT - NULL_COUNT; i++) {\n+            builder.add(new ProducerRecord<>(ALL_TYPES, \"key\" + i * step, createRandomRecord(offset + i * step)));\n+        }\n+        kafka.sendMessages(builder.build().stream(), schemaRegistryAwareProducer(kafka).build());\n+        builder = ImmutableList.builder();\n+        for (int i = COUNT - NULL_COUNT; i < COUNT - ARRAY_NULL_COUNT; i++) {\n+            builder.add(new ProducerRecord<>(ALL_TYPES, null, createNullRecord()));\n+        }\n+        kafka.sendMessages(builder.build().stream(), schemaRegistryAwareProducer(kafka).build());\n+        builder = ImmutableList.builder();\n+        for (int i = COUNT - ARRAY_NULL_COUNT; i < COUNT; i++) {\n+            builder.add(new ProducerRecord<>(ALL_TYPES, null, createArrayNullRecord()));\n+        }\n+        kafka.sendMessages(builder.build().stream(), schemaRegistryAwareProducer(kafka).build());\n+        pinot.createSchema(getClass().getClassLoader().getResourceAsStream(\"alltypes_schema.json\"), ALL_TYPES);\n+        pinot.addRealTimeTable(getClass().getClassLoader().getResourceAsStream(\"alltypes_realtimeSpec.json\"), ALL_TYPES);\n+\n+        Map<String, String> pinotProperties = ImmutableMap.<String, String>builder()\n+                .put(\"pinot.controller-urls\", pinot.getControllerConnectString())\n+                .build();\n+\n+        return PinotQueryRunner.createPinotQueryRunner(\n+                ImmutableMap.of(),\n+                pinotProperties,\n+                Optional.of(binder -> newOptionalBinder(binder, PinotHostMapper.class).setBinding()\n+                        .toInstance(new TestingPinotHostMapper(pinot.getBrokerHostAndPort(), pinot.getServerHostAndPort()))));\n+    }\n+\n+    private static ImmutableMap.Builder<String, String> schemaRegistryAwareProducer(TestingKafka testingKafka)\n+    {\n+        return ImmutableMap.<String, String>builder()\n+                .put(SCHEMA_REGISTRY_URL_CONFIG, testingKafka.getSchemaRegistryConnectString())\n+                .put(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())\n+                .put(VALUE_SERIALIZER_CLASS_CONFIG, KafkaAvroSerializer.class.getName());\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void tearDown()\n+    {\n+        closeAllRuntimeException(pinot, kafka);\n+    }\n+\n+    private GenericRecord createRandomRecord(long offset)\n+    {\n+        return createTestRecord(\n+                random.ints(3, 0, 10001).limit(3).mapToObj(val -> \"string_\" + val).collect(toList()),\n+                Arrays.asList(random.nextBoolean(), random.nextBoolean(), random.nextBoolean()),\n+                random.ints().limit(3).boxed().collect(toList()),\n+                random.ints(3, -10000, 10001).asDoubleStream().map(d -> d / 10000).boxed().map(Double::floatValue).collect(toList()),\n+                random.ints(3, -10000, 10001).asDoubleStream().map(d -> d / 10000).boxed().collect(toList()),\n+                random.longs(3, ((long) Integer.MIN_VALUE) * 2, ((long) Integer.MAX_VALUE) * 2).boxed().collect(toList()),\n+                Instant.now().truncatedTo(ChronoUnit.DAYS).plusMillis(offset).toEpochMilli());\n+    }\n+\n+    private GenericRecord createArrayNullRecord()\n+    {\n+        Schema schema = getAvroSchema();\n+        List<String> stringList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            if (i % 2 == 0) {\n+                stringList.add(\"string_\" + abs(random.nextInt(10001)));\n+            }\n+            else {\n+                stringList.add(null);\n+            }\n+        }\n+        List<Boolean> booleanList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            if (i % 2 == 0) {\n+                booleanList.add(random.nextBoolean());\n+            }\n+            else {\n+                booleanList.add(null);\n+            }\n+        }\n+\n+        List<Integer> integerList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            integerList.add(null);\n+        }\n+\n+        List<Integer> integerWithDefaultList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            if (i % 2 == 0) {\n+                integerWithDefaultList.add(random.nextInt(10000));\n+            }\n+            else {\n+                integerWithDefaultList.add(null);\n+            }\n+        }\n+\n+        List<Float> floatList = new ArrayList<>();\n+        floatList.add(null);\n+\n+        List<Integer> doubleList = new ArrayList<>();\n+        doubleList.add(null);\n+\n+        return new GenericRecordBuilder(schema)\n+                .set(\"string_array_col\", stringList)\n+                .set(\"bool_array_col\", booleanList)\n+                .set(\"int_array_col\", integerList)\n+                .set(\"int_array_col_with_pinot_default\", integerWithDefaultList)\n+                .set(\"float_array_col\", floatList)\n+                .set(\"double_array_col\", doubleList)\n+                .set(\"long_array_col\", new ArrayList<>())\n+                .build();\n+    }\n+\n+    private static GenericRecord createTestRecord(\n+            List<String> stringArrayColumn,\n+            List<Boolean> booleanArrayColumn,\n+            List<Integer> intArrayColumn,\n+            List<Float> floatArrayColumn,\n+            List<Double> doubleArrayColumn,\n+            List<Long> longArrayColumn,\n+            long updatedAtMillis)\n+    {\n+        Schema schema = getAvroSchema();\n+\n+        return new GenericRecordBuilder(schema)\n+                .set(\"string_CoL\", stringArrayColumn.get(0))\n+                .set(\"bool_COL\", booleanArrayColumn.get(0))\n+                .set(\"bytes_col\", Hex.toHexString(stringArrayColumn.get(0).getBytes(StandardCharsets.UTF_8)))\n+                .set(\"string_array_col\", stringArrayColumn)\n+                .set(\"bool_array_col\", booleanArrayColumn)\n+                .set(\"int_array_col\", intArrayColumn)\n+                .set(\"int_array_col_with_pinot_default\", intArrayColumn)\n+                .set(\"float_array_col\", floatArrayColumn)\n+                .set(\"double_array_col\", doubleArrayColumn)\n+                .set(\"long_array_col\", longArrayColumn)\n+                .set(\"int_CoL\", intArrayColumn.get(0))\n+                .set(\"float_col\", floatArrayColumn.get(0))\n+                .set(\"double_col\", doubleArrayColumn.get(0))\n+                .set(\"long_CoL\", longArrayColumn.get(0))\n+                .set(\"updated_at\", updatedAtMillis)\n+                .build();\n+    }\n+\n+    private static GenericRecord createNullRecord()\n+    {\n+        Schema schema = getAvroSchema();\n+        return new GenericRecordBuilder(schema).build();\n+    }\n+\n+    private static Schema getAvroSchema()\n+    {\n+        // Note:\n+        // The reason optional() is used is because the avro record can omit those fields.\n+        // Fields with nullable type are required to be included or have a default value.\n+        // ex. if \"string_col\" is set to type().nullable().stringType().noDefault()\n+        // the following error is returned: Field string_col type:UNION pos:0 not set and has no default value\n+\n+        return SchemaBuilder.record(\"alltypes\")\n+                .fields()\n+                .name(\"string_CoL\").type().optional().stringType()\n+                .name(\"bool_COL\").type().optional().booleanType()\n+                .name(\"bytes_col\").type().optional().stringType()\n+                .name(\"string_array_col\").type().optional().array().items().nullable().stringType()\n+                .name(\"bool_array_col\").type().optional().array().items().nullable().booleanType()\n+                .name(\"int_array_col\").type().optional().array().items().nullable().intType()\n+                .name(\"int_array_col_with_pinot_default\").type().optional().array().items().nullable().intType()\n+                .name(\"float_array_col\").type().optional().array().items().nullable().floatType()\n+                .name(\"double_array_col\").type().optional().array().items().nullable().doubleType()\n+                .name(\"long_array_col\").type().optional().array().items().nullable().longType()\n+                .name(\"int_CoL\").type().optional().intType()\n+                .name(\"float_col\").type().optional().floatType()\n+                .name(\"double_col\").type().optional().doubleType()\n+                .name(\"long_CoL\").type().optional().longType()\n+                .name(\"updated_at\").type().optional().longType()\n+                .endRecord();\n+    }\n+\n+    @Test\n+    public void testCount()\n+    {\n+        assertQuery(\"SELECT \\\"count(*)\\\" FROM \\\"SELECT COUNT(*) FROM \" + ALL_TYPES + \"\\\"\", \"VALUES(\" + COUNT + \")\");\n+        // If no limit is supplied to a broker query, 10 rows will be returned. Verify this behavior:\n+        assertQuery(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES + \"\\\"\", \"VALUES (\" + DEFAULT_PINOT_LIMIT_FOR_BROKER_QUERIES + \")\");\n+    }\n+\n+    @Test\n+    public void testNullBehavior()\n+    {\n+        // Verify the null behavior of pinot:\n+        // Default null value for varbinary (BYtES in pinot) is X''\n+        // Arrays of varbinary are not supported in pinot\n+        // Default null value for long single value columns is 0\n+        // Default null value for long array values is Long.MIN_VALUE,\n+        // Default null value for int single value columns is 0\n+        // Default null value for int array values is Integer.MIN_VALUE,\n+        // Default null value for float single value columns is 0.0F\n+        // Default null value for float array values is -INFINITY,\n+        // Default null value for double single value columns is 0.0D\n+        // Default null value for double array values is -INFINITY,\n+\n+        assertQuery(\"SELECT MIN(long_col), MIN(element_at(long_array_col, 1)),\" +\n+                        \"  MIN(int_col), MIN(element_at(int_array_col, 1)), MIN(element_at(int_array_col_with_pinot_default, 1)),\" +\n+                        \"  MIN(float_col), MIN(element_at(float_array_col, 1)),\" +\n+                        \"  MIN(double_col), MIN(element_at(double_array_col, 1))\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X''\",\n+                \"VALUES(0, \" + Long.MIN_VALUE + \", \" +\n+                        \"  0, \" + Integer.MIN_VALUE + \", 7,\" +\n+                        \"  0.0, -POWER(0, -1),\" +\n+                        \"  0.0, -POWER(0, -1)\" +\n+                        \")\");\n+\n+        // Default null value for strings is the string 'null'\n+        // Default null value for booleans is the string 'null', boolean is treated as a string\n+        assertQuery(\"SELECT DISTINCT string_col, element_at(string_array_col, 1), bool_col, element_at(bool_array_col, 1)\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X'' and element_at(int_array_col_with_pinot_default, 1) = 7\",\n+                \"VALUES ('null', 'null', 'null', 'null')\");\n+\n+        // Null behavior for arrays:\n+        // Default value for a \"null\" array is 1 element with default null array value,\n+        // ex.\n+        // Null string or boolean arrays will have ['null'] as the default,\n+        // Null integer arrays will have [Integer.MIN_VALUE] as the default\n+        // Null long arrays will have [Long.MIN_VALUE] as the default,\n+        // Null float arrays will have [-INFINITY] as the default\n+        // Null double arrays will have [-INFINITY] as the default\n+        // As mentioned above, arrays of varbinary are not supported\n+        assertQuery(\"SELECT CARDINALITY(string_array_col), CARDINALITY(bool_array_col), CARDINALITY(int_array_col),  CARDINALITY(int_array_col_with_pinot_default),\" +\n+                        \"  CARDINALITY(float_array_col),  CARDINALITY(long_array_col),  CARDINALITY(long_array_col)\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X'' and element_at(int_array_col_with_pinot_default, 1) = 7\",\n+                \"VALUES \" + join(\", \", IntStream.range(0, NULL_COUNT - ARRAY_NULL_COUNT).mapToObj(i -> \"(1, 1, 1, 1, 1, 1, 1)\").collect(toList())));\n+\n+        // If an array contains both null and non-null values, the null values are omitted:\n+        // There are 5 values in the avro records, but only the 3 non-null values are in pinot\n+        assertQuery(\"SELECT CARDINALITY(string_array_col), CARDINALITY(bool_array_col), CARDINALITY(int_array_col),  CARDINALITY(int_array_col_with_pinot_default),\" +\n+                        \"  CARDINALITY(float_array_col),  CARDINALITY(long_array_col),  CARDINALITY(long_array_col)\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X'' and element_at(bool_array_col, 1) != 'null'\",\n+                \"VALUES \" + join(\", \", IntStream.range(0, ARRAY_NULL_COUNT).mapToObj(i -> \"(3, 3, 1, 3, 1, 1, 1)\").collect(toList())));\n+    }\n+\n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 329}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTAyMzg4NQ==", "bodyText": "Removed TestMinimalFunctionality, all the tests were merged into the smoke test.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r645023885", "createdAt": "2021-06-03T18:10:50Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+import io.trino.plugin.pinot.client.PinotHostMapper;\n+import io.trino.sql.planner.plan.AggregationNode;\n+import io.trino.sql.planner.plan.ExchangeNode;\n+import io.trino.sql.planner.plan.LimitNode;\n+import io.trino.sql.planner.plan.ProjectNode;\n+import io.trino.testing.AbstractTestQueryFramework;\n+import io.trino.testing.QueryRunner;\n+import io.trino.testing.kafka.TestingKafka;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaBuilder;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.GenericRecordBuilder;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.testcontainers.shaded.org.bouncycastle.util.encoders.Hex;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.inject.multibindings.OptionalBinder.newOptionalBinder;\n+import static io.airlift.testing.Closeables.closeAllRuntimeException;\n+import static io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG;\n+import static java.lang.Math.abs;\n+import static java.lang.String.join;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Test(singleThreaded = true)\n+public class TestPinotIntegrationSmokeTest\n+        extends AbstractTestQueryFramework\n+{\n+    // TODO extend BaseConnectorTest\n+    private static final String ALL_TYPES = \"alltypes\";\n+    private static final int DEFAULT_PINOT_LIMIT_FOR_BROKER_QUERIES = 10;\n+    private static final int COUNT = 1000;\n+    private static final int NULL_COUNT = 17;\n+    private static final int ARRAY_NULL_COUNT = 13;\n+    private TestingPinotCluster pinot;\n+    private TestingKafka kafka;\n+    private Random random;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        random = new Random(22);\n+        kafka = TestingKafka.createWithSchemaRegistry();\n+        kafka.start();\n+        pinot = new TestingPinotCluster(kafka.getNetwork());\n+        pinot.start();\n+\n+        kafka.createTopic(ALL_TYPES);\n+\n+        int step = 3;\n+        int offset = 1;\n+        checkState(COUNT > NULL_COUNT, \"COUNT must be greater than NULL_COUNT\");\n+        checkState(NULL_COUNT > ARRAY_NULL_COUNT, \"NULL_COUNT must be greater than ARRAY_NULL_COUNT\");\n+        ImmutableList.Builder<ProducerRecord<String, GenericRecord>> builder = ImmutableList.builder();\n+        for (long i = 0; i < COUNT - NULL_COUNT; i++) {\n+            builder.add(new ProducerRecord<>(ALL_TYPES, \"key\" + i * step, createRandomRecord(offset + i * step)));\n+        }\n+        kafka.sendMessages(builder.build().stream(), schemaRegistryAwareProducer(kafka).build());\n+        builder = ImmutableList.builder();\n+        for (int i = COUNT - NULL_COUNT; i < COUNT - ARRAY_NULL_COUNT; i++) {\n+            builder.add(new ProducerRecord<>(ALL_TYPES, null, createNullRecord()));\n+        }\n+        kafka.sendMessages(builder.build().stream(), schemaRegistryAwareProducer(kafka).build());\n+        builder = ImmutableList.builder();\n+        for (int i = COUNT - ARRAY_NULL_COUNT; i < COUNT; i++) {\n+            builder.add(new ProducerRecord<>(ALL_TYPES, null, createArrayNullRecord()));\n+        }\n+        kafka.sendMessages(builder.build().stream(), schemaRegistryAwareProducer(kafka).build());\n+        pinot.createSchema(getClass().getClassLoader().getResourceAsStream(\"alltypes_schema.json\"), ALL_TYPES);\n+        pinot.addRealTimeTable(getClass().getClassLoader().getResourceAsStream(\"alltypes_realtimeSpec.json\"), ALL_TYPES);\n+\n+        Map<String, String> pinotProperties = ImmutableMap.<String, String>builder()\n+                .put(\"pinot.controller-urls\", pinot.getControllerConnectString())\n+                .build();\n+\n+        return PinotQueryRunner.createPinotQueryRunner(\n+                ImmutableMap.of(),\n+                pinotProperties,\n+                Optional.of(binder -> newOptionalBinder(binder, PinotHostMapper.class).setBinding()\n+                        .toInstance(new TestingPinotHostMapper(pinot.getBrokerHostAndPort(), pinot.getServerHostAndPort()))));\n+    }\n+\n+    private static ImmutableMap.Builder<String, String> schemaRegistryAwareProducer(TestingKafka testingKafka)\n+    {\n+        return ImmutableMap.<String, String>builder()\n+                .put(SCHEMA_REGISTRY_URL_CONFIG, testingKafka.getSchemaRegistryConnectString())\n+                .put(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())\n+                .put(VALUE_SERIALIZER_CLASS_CONFIG, KafkaAvroSerializer.class.getName());\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void tearDown()\n+    {\n+        closeAllRuntimeException(pinot, kafka);\n+    }\n+\n+    private GenericRecord createRandomRecord(long offset)\n+    {\n+        return createTestRecord(\n+                random.ints(3, 0, 10001).limit(3).mapToObj(val -> \"string_\" + val).collect(toList()),\n+                Arrays.asList(random.nextBoolean(), random.nextBoolean(), random.nextBoolean()),\n+                random.ints().limit(3).boxed().collect(toList()),\n+                random.ints(3, -10000, 10001).asDoubleStream().map(d -> d / 10000).boxed().map(Double::floatValue).collect(toList()),\n+                random.ints(3, -10000, 10001).asDoubleStream().map(d -> d / 10000).boxed().collect(toList()),\n+                random.longs(3, ((long) Integer.MIN_VALUE) * 2, ((long) Integer.MAX_VALUE) * 2).boxed().collect(toList()),\n+                Instant.now().truncatedTo(ChronoUnit.DAYS).plusMillis(offset).toEpochMilli());\n+    }\n+\n+    private GenericRecord createArrayNullRecord()\n+    {\n+        Schema schema = getAvroSchema();\n+        List<String> stringList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            if (i % 2 == 0) {\n+                stringList.add(\"string_\" + abs(random.nextInt(10001)));\n+            }\n+            else {\n+                stringList.add(null);\n+            }\n+        }\n+        List<Boolean> booleanList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            if (i % 2 == 0) {\n+                booleanList.add(random.nextBoolean());\n+            }\n+            else {\n+                booleanList.add(null);\n+            }\n+        }\n+\n+        List<Integer> integerList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            integerList.add(null);\n+        }\n+\n+        List<Integer> integerWithDefaultList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            if (i % 2 == 0) {\n+                integerWithDefaultList.add(random.nextInt(10000));\n+            }\n+            else {\n+                integerWithDefaultList.add(null);\n+            }\n+        }\n+\n+        List<Float> floatList = new ArrayList<>();\n+        floatList.add(null);\n+\n+        List<Integer> doubleList = new ArrayList<>();\n+        doubleList.add(null);\n+\n+        return new GenericRecordBuilder(schema)\n+                .set(\"string_array_col\", stringList)\n+                .set(\"bool_array_col\", booleanList)\n+                .set(\"int_array_col\", integerList)\n+                .set(\"int_array_col_with_pinot_default\", integerWithDefaultList)\n+                .set(\"float_array_col\", floatList)\n+                .set(\"double_array_col\", doubleList)\n+                .set(\"long_array_col\", new ArrayList<>())\n+                .build();\n+    }\n+\n+    private static GenericRecord createTestRecord(\n+            List<String> stringArrayColumn,\n+            List<Boolean> booleanArrayColumn,\n+            List<Integer> intArrayColumn,\n+            List<Float> floatArrayColumn,\n+            List<Double> doubleArrayColumn,\n+            List<Long> longArrayColumn,\n+            long updatedAtMillis)\n+    {\n+        Schema schema = getAvroSchema();\n+\n+        return new GenericRecordBuilder(schema)\n+                .set(\"string_CoL\", stringArrayColumn.get(0))\n+                .set(\"bool_COL\", booleanArrayColumn.get(0))\n+                .set(\"bytes_col\", Hex.toHexString(stringArrayColumn.get(0).getBytes(StandardCharsets.UTF_8)))\n+                .set(\"string_array_col\", stringArrayColumn)\n+                .set(\"bool_array_col\", booleanArrayColumn)\n+                .set(\"int_array_col\", intArrayColumn)\n+                .set(\"int_array_col_with_pinot_default\", intArrayColumn)\n+                .set(\"float_array_col\", floatArrayColumn)\n+                .set(\"double_array_col\", doubleArrayColumn)\n+                .set(\"long_array_col\", longArrayColumn)\n+                .set(\"int_CoL\", intArrayColumn.get(0))\n+                .set(\"float_col\", floatArrayColumn.get(0))\n+                .set(\"double_col\", doubleArrayColumn.get(0))\n+                .set(\"long_CoL\", longArrayColumn.get(0))\n+                .set(\"updated_at\", updatedAtMillis)\n+                .build();\n+    }\n+\n+    private static GenericRecord createNullRecord()\n+    {\n+        Schema schema = getAvroSchema();\n+        return new GenericRecordBuilder(schema).build();\n+    }\n+\n+    private static Schema getAvroSchema()\n+    {\n+        // Note:\n+        // The reason optional() is used is because the avro record can omit those fields.\n+        // Fields with nullable type are required to be included or have a default value.\n+        // ex. if \"string_col\" is set to type().nullable().stringType().noDefault()\n+        // the following error is returned: Field string_col type:UNION pos:0 not set and has no default value\n+\n+        return SchemaBuilder.record(\"alltypes\")\n+                .fields()\n+                .name(\"string_CoL\").type().optional().stringType()\n+                .name(\"bool_COL\").type().optional().booleanType()\n+                .name(\"bytes_col\").type().optional().stringType()\n+                .name(\"string_array_col\").type().optional().array().items().nullable().stringType()\n+                .name(\"bool_array_col\").type().optional().array().items().nullable().booleanType()\n+                .name(\"int_array_col\").type().optional().array().items().nullable().intType()\n+                .name(\"int_array_col_with_pinot_default\").type().optional().array().items().nullable().intType()\n+                .name(\"float_array_col\").type().optional().array().items().nullable().floatType()\n+                .name(\"double_array_col\").type().optional().array().items().nullable().doubleType()\n+                .name(\"long_array_col\").type().optional().array().items().nullable().longType()\n+                .name(\"int_CoL\").type().optional().intType()\n+                .name(\"float_col\").type().optional().floatType()\n+                .name(\"double_col\").type().optional().doubleType()\n+                .name(\"long_CoL\").type().optional().longType()\n+                .name(\"updated_at\").type().optional().longType()\n+                .endRecord();\n+    }\n+\n+    @Test\n+    public void testCount()\n+    {\n+        assertQuery(\"SELECT \\\"count(*)\\\" FROM \\\"SELECT COUNT(*) FROM \" + ALL_TYPES + \"\\\"\", \"VALUES(\" + COUNT + \")\");\n+        // If no limit is supplied to a broker query, 10 rows will be returned. Verify this behavior:\n+        assertQuery(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES + \"\\\"\", \"VALUES (\" + DEFAULT_PINOT_LIMIT_FOR_BROKER_QUERIES + \")\");\n+    }\n+\n+    @Test\n+    public void testNullBehavior()\n+    {\n+        // Verify the null behavior of pinot:\n+        // Default null value for varbinary (BYtES in pinot) is X''\n+        // Arrays of varbinary are not supported in pinot\n+        // Default null value for long single value columns is 0\n+        // Default null value for long array values is Long.MIN_VALUE,\n+        // Default null value for int single value columns is 0\n+        // Default null value for int array values is Integer.MIN_VALUE,\n+        // Default null value for float single value columns is 0.0F\n+        // Default null value for float array values is -INFINITY,\n+        // Default null value for double single value columns is 0.0D\n+        // Default null value for double array values is -INFINITY,\n+\n+        assertQuery(\"SELECT MIN(long_col), MIN(element_at(long_array_col, 1)),\" +\n+                        \"  MIN(int_col), MIN(element_at(int_array_col, 1)), MIN(element_at(int_array_col_with_pinot_default, 1)),\" +\n+                        \"  MIN(float_col), MIN(element_at(float_array_col, 1)),\" +\n+                        \"  MIN(double_col), MIN(element_at(double_array_col, 1))\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X''\",\n+                \"VALUES(0, \" + Long.MIN_VALUE + \", \" +\n+                        \"  0, \" + Integer.MIN_VALUE + \", 7,\" +\n+                        \"  0.0, -POWER(0, -1),\" +\n+                        \"  0.0, -POWER(0, -1)\" +\n+                        \")\");\n+\n+        // Default null value for strings is the string 'null'\n+        // Default null value for booleans is the string 'null', boolean is treated as a string\n+        assertQuery(\"SELECT DISTINCT string_col, element_at(string_array_col, 1), bool_col, element_at(bool_array_col, 1)\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X'' and element_at(int_array_col_with_pinot_default, 1) = 7\",\n+                \"VALUES ('null', 'null', 'null', 'null')\");\n+\n+        // Null behavior for arrays:\n+        // Default value for a \"null\" array is 1 element with default null array value,\n+        // ex.\n+        // Null string or boolean arrays will have ['null'] as the default,\n+        // Null integer arrays will have [Integer.MIN_VALUE] as the default\n+        // Null long arrays will have [Long.MIN_VALUE] as the default,\n+        // Null float arrays will have [-INFINITY] as the default\n+        // Null double arrays will have [-INFINITY] as the default\n+        // As mentioned above, arrays of varbinary are not supported\n+        assertQuery(\"SELECT CARDINALITY(string_array_col), CARDINALITY(bool_array_col), CARDINALITY(int_array_col),  CARDINALITY(int_array_col_with_pinot_default),\" +\n+                        \"  CARDINALITY(float_array_col),  CARDINALITY(long_array_col),  CARDINALITY(long_array_col)\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X'' and element_at(int_array_col_with_pinot_default, 1) = 7\",\n+                \"VALUES \" + join(\", \", IntStream.range(0, NULL_COUNT - ARRAY_NULL_COUNT).mapToObj(i -> \"(1, 1, 1, 1, 1, 1, 1)\").collect(toList())));\n+\n+        // If an array contains both null and non-null values, the null values are omitted:\n+        // There are 5 values in the avro records, but only the 3 non-null values are in pinot\n+        assertQuery(\"SELECT CARDINALITY(string_array_col), CARDINALITY(bool_array_col), CARDINALITY(int_array_col),  CARDINALITY(int_array_col_with_pinot_default),\" +\n+                        \"  CARDINALITY(float_array_col),  CARDINALITY(long_array_col),  CARDINALITY(long_array_col)\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X'' and element_at(bool_array_col, 1) != 'null'\",\n+                \"VALUES \" + join(\", \", IntStream.range(0, ARRAY_NULL_COUNT).mapToObj(i -> \"(3, 3, 1, 3, 1, 1, 1)\").collect(toList())));\n+    }\n+\n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE2MTY0MQ=="}, "originalCommit": null, "originalPosition": 329}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIyNjg4MQ==", "bodyText": "Could Pinot reuse io.trino.plugin.jdbc.BaseJdbcConnectorTest#testAggregationPushdown?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671226881", "createdAt": "2021-07-16T12:51:22Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+import io.trino.plugin.pinot.client.PinotHostMapper;\n+import io.trino.sql.planner.plan.AggregationNode;\n+import io.trino.sql.planner.plan.ExchangeNode;\n+import io.trino.sql.planner.plan.LimitNode;\n+import io.trino.sql.planner.plan.ProjectNode;\n+import io.trino.testing.AbstractTestQueryFramework;\n+import io.trino.testing.QueryRunner;\n+import io.trino.testing.kafka.TestingKafka;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaBuilder;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.GenericRecordBuilder;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.testcontainers.shaded.org.bouncycastle.util.encoders.Hex;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.inject.multibindings.OptionalBinder.newOptionalBinder;\n+import static io.airlift.testing.Closeables.closeAllRuntimeException;\n+import static io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG;\n+import static java.lang.Math.abs;\n+import static java.lang.String.join;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Test(singleThreaded = true)\n+public class TestPinotIntegrationSmokeTest\n+        extends AbstractTestQueryFramework\n+{\n+    // TODO extend BaseConnectorTest\n+    private static final String ALL_TYPES = \"alltypes\";\n+    private static final int DEFAULT_PINOT_LIMIT_FOR_BROKER_QUERIES = 10;\n+    private static final int COUNT = 1000;\n+    private static final int NULL_COUNT = 17;\n+    private static final int ARRAY_NULL_COUNT = 13;\n+    private TestingPinotCluster pinot;\n+    private TestingKafka kafka;\n+    private Random random;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        random = new Random(22);\n+        kafka = TestingKafka.createWithSchemaRegistry();\n+        kafka.start();\n+        pinot = new TestingPinotCluster(kafka.getNetwork());\n+        pinot.start();\n+\n+        kafka.createTopic(ALL_TYPES);\n+\n+        int step = 3;\n+        int offset = 1;\n+        checkState(COUNT > NULL_COUNT, \"COUNT must be greater than NULL_COUNT\");\n+        checkState(NULL_COUNT > ARRAY_NULL_COUNT, \"NULL_COUNT must be greater than ARRAY_NULL_COUNT\");\n+        ImmutableList.Builder<ProducerRecord<String, GenericRecord>> builder = ImmutableList.builder();\n+        for (long i = 0; i < COUNT - NULL_COUNT; i++) {\n+            builder.add(new ProducerRecord<>(ALL_TYPES, \"key\" + i * step, createRandomRecord(offset + i * step)));\n+        }\n+        kafka.sendMessages(builder.build().stream(), schemaRegistryAwareProducer(kafka).build());\n+        builder = ImmutableList.builder();\n+        for (int i = COUNT - NULL_COUNT; i < COUNT - ARRAY_NULL_COUNT; i++) {\n+            builder.add(new ProducerRecord<>(ALL_TYPES, null, createNullRecord()));\n+        }\n+        kafka.sendMessages(builder.build().stream(), schemaRegistryAwareProducer(kafka).build());\n+        builder = ImmutableList.builder();\n+        for (int i = COUNT - ARRAY_NULL_COUNT; i < COUNT; i++) {\n+            builder.add(new ProducerRecord<>(ALL_TYPES, null, createArrayNullRecord()));\n+        }\n+        kafka.sendMessages(builder.build().stream(), schemaRegistryAwareProducer(kafka).build());\n+        pinot.createSchema(getClass().getClassLoader().getResourceAsStream(\"alltypes_schema.json\"), ALL_TYPES);\n+        pinot.addRealTimeTable(getClass().getClassLoader().getResourceAsStream(\"alltypes_realtimeSpec.json\"), ALL_TYPES);\n+\n+        Map<String, String> pinotProperties = ImmutableMap.<String, String>builder()\n+                .put(\"pinot.controller-urls\", pinot.getControllerConnectString())\n+                .build();\n+\n+        return PinotQueryRunner.createPinotQueryRunner(\n+                ImmutableMap.of(),\n+                pinotProperties,\n+                Optional.of(binder -> newOptionalBinder(binder, PinotHostMapper.class).setBinding()\n+                        .toInstance(new TestingPinotHostMapper(pinot.getBrokerHostAndPort(), pinot.getServerHostAndPort()))));\n+    }\n+\n+    private static ImmutableMap.Builder<String, String> schemaRegistryAwareProducer(TestingKafka testingKafka)\n+    {\n+        return ImmutableMap.<String, String>builder()\n+                .put(SCHEMA_REGISTRY_URL_CONFIG, testingKafka.getSchemaRegistryConnectString())\n+                .put(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())\n+                .put(VALUE_SERIALIZER_CLASS_CONFIG, KafkaAvroSerializer.class.getName());\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void tearDown()\n+    {\n+        closeAllRuntimeException(pinot, kafka);\n+    }\n+\n+    private GenericRecord createRandomRecord(long offset)\n+    {\n+        return createTestRecord(\n+                random.ints(3, 0, 10001).limit(3).mapToObj(val -> \"string_\" + val).collect(toList()),\n+                Arrays.asList(random.nextBoolean(), random.nextBoolean(), random.nextBoolean()),\n+                random.ints().limit(3).boxed().collect(toList()),\n+                random.ints(3, -10000, 10001).asDoubleStream().map(d -> d / 10000).boxed().map(Double::floatValue).collect(toList()),\n+                random.ints(3, -10000, 10001).asDoubleStream().map(d -> d / 10000).boxed().collect(toList()),\n+                random.longs(3, ((long) Integer.MIN_VALUE) * 2, ((long) Integer.MAX_VALUE) * 2).boxed().collect(toList()),\n+                Instant.now().truncatedTo(ChronoUnit.DAYS).plusMillis(offset).toEpochMilli());\n+    }\n+\n+    private GenericRecord createArrayNullRecord()\n+    {\n+        Schema schema = getAvroSchema();\n+        List<String> stringList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            if (i % 2 == 0) {\n+                stringList.add(\"string_\" + abs(random.nextInt(10001)));\n+            }\n+            else {\n+                stringList.add(null);\n+            }\n+        }\n+        List<Boolean> booleanList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            if (i % 2 == 0) {\n+                booleanList.add(random.nextBoolean());\n+            }\n+            else {\n+                booleanList.add(null);\n+            }\n+        }\n+\n+        List<Integer> integerList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            integerList.add(null);\n+        }\n+\n+        List<Integer> integerWithDefaultList = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            if (i % 2 == 0) {\n+                integerWithDefaultList.add(random.nextInt(10000));\n+            }\n+            else {\n+                integerWithDefaultList.add(null);\n+            }\n+        }\n+\n+        List<Float> floatList = new ArrayList<>();\n+        floatList.add(null);\n+\n+        List<Integer> doubleList = new ArrayList<>();\n+        doubleList.add(null);\n+\n+        return new GenericRecordBuilder(schema)\n+                .set(\"string_array_col\", stringList)\n+                .set(\"bool_array_col\", booleanList)\n+                .set(\"int_array_col\", integerList)\n+                .set(\"int_array_col_with_pinot_default\", integerWithDefaultList)\n+                .set(\"float_array_col\", floatList)\n+                .set(\"double_array_col\", doubleList)\n+                .set(\"long_array_col\", new ArrayList<>())\n+                .build();\n+    }\n+\n+    private static GenericRecord createTestRecord(\n+            List<String> stringArrayColumn,\n+            List<Boolean> booleanArrayColumn,\n+            List<Integer> intArrayColumn,\n+            List<Float> floatArrayColumn,\n+            List<Double> doubleArrayColumn,\n+            List<Long> longArrayColumn,\n+            long updatedAtMillis)\n+    {\n+        Schema schema = getAvroSchema();\n+\n+        return new GenericRecordBuilder(schema)\n+                .set(\"string_CoL\", stringArrayColumn.get(0))\n+                .set(\"bool_COL\", booleanArrayColumn.get(0))\n+                .set(\"bytes_col\", Hex.toHexString(stringArrayColumn.get(0).getBytes(StandardCharsets.UTF_8)))\n+                .set(\"string_array_col\", stringArrayColumn)\n+                .set(\"bool_array_col\", booleanArrayColumn)\n+                .set(\"int_array_col\", intArrayColumn)\n+                .set(\"int_array_col_with_pinot_default\", intArrayColumn)\n+                .set(\"float_array_col\", floatArrayColumn)\n+                .set(\"double_array_col\", doubleArrayColumn)\n+                .set(\"long_array_col\", longArrayColumn)\n+                .set(\"int_CoL\", intArrayColumn.get(0))\n+                .set(\"float_col\", floatArrayColumn.get(0))\n+                .set(\"double_col\", doubleArrayColumn.get(0))\n+                .set(\"long_CoL\", longArrayColumn.get(0))\n+                .set(\"updated_at\", updatedAtMillis)\n+                .build();\n+    }\n+\n+    private static GenericRecord createNullRecord()\n+    {\n+        Schema schema = getAvroSchema();\n+        return new GenericRecordBuilder(schema).build();\n+    }\n+\n+    private static Schema getAvroSchema()\n+    {\n+        // Note:\n+        // The reason optional() is used is because the avro record can omit those fields.\n+        // Fields with nullable type are required to be included or have a default value.\n+        // ex. if \"string_col\" is set to type().nullable().stringType().noDefault()\n+        // the following error is returned: Field string_col type:UNION pos:0 not set and has no default value\n+\n+        return SchemaBuilder.record(\"alltypes\")\n+                .fields()\n+                .name(\"string_CoL\").type().optional().stringType()\n+                .name(\"bool_COL\").type().optional().booleanType()\n+                .name(\"bytes_col\").type().optional().stringType()\n+                .name(\"string_array_col\").type().optional().array().items().nullable().stringType()\n+                .name(\"bool_array_col\").type().optional().array().items().nullable().booleanType()\n+                .name(\"int_array_col\").type().optional().array().items().nullable().intType()\n+                .name(\"int_array_col_with_pinot_default\").type().optional().array().items().nullable().intType()\n+                .name(\"float_array_col\").type().optional().array().items().nullable().floatType()\n+                .name(\"double_array_col\").type().optional().array().items().nullable().doubleType()\n+                .name(\"long_array_col\").type().optional().array().items().nullable().longType()\n+                .name(\"int_CoL\").type().optional().intType()\n+                .name(\"float_col\").type().optional().floatType()\n+                .name(\"double_col\").type().optional().doubleType()\n+                .name(\"long_CoL\").type().optional().longType()\n+                .name(\"updated_at\").type().optional().longType()\n+                .endRecord();\n+    }\n+\n+    @Test\n+    public void testCount()\n+    {\n+        assertQuery(\"SELECT \\\"count(*)\\\" FROM \\\"SELECT COUNT(*) FROM \" + ALL_TYPES + \"\\\"\", \"VALUES(\" + COUNT + \")\");\n+        // If no limit is supplied to a broker query, 10 rows will be returned. Verify this behavior:\n+        assertQuery(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES + \"\\\"\", \"VALUES (\" + DEFAULT_PINOT_LIMIT_FOR_BROKER_QUERIES + \")\");\n+    }\n+\n+    @Test\n+    public void testNullBehavior()\n+    {\n+        // Verify the null behavior of pinot:\n+        // Default null value for varbinary (BYtES in pinot) is X''\n+        // Arrays of varbinary are not supported in pinot\n+        // Default null value for long single value columns is 0\n+        // Default null value for long array values is Long.MIN_VALUE,\n+        // Default null value for int single value columns is 0\n+        // Default null value for int array values is Integer.MIN_VALUE,\n+        // Default null value for float single value columns is 0.0F\n+        // Default null value for float array values is -INFINITY,\n+        // Default null value for double single value columns is 0.0D\n+        // Default null value for double array values is -INFINITY,\n+\n+        assertQuery(\"SELECT MIN(long_col), MIN(element_at(long_array_col, 1)),\" +\n+                        \"  MIN(int_col), MIN(element_at(int_array_col, 1)), MIN(element_at(int_array_col_with_pinot_default, 1)),\" +\n+                        \"  MIN(float_col), MIN(element_at(float_array_col, 1)),\" +\n+                        \"  MIN(double_col), MIN(element_at(double_array_col, 1))\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X''\",\n+                \"VALUES(0, \" + Long.MIN_VALUE + \", \" +\n+                        \"  0, \" + Integer.MIN_VALUE + \", 7,\" +\n+                        \"  0.0, -POWER(0, -1),\" +\n+                        \"  0.0, -POWER(0, -1)\" +\n+                        \")\");\n+\n+        // Default null value for strings is the string 'null'\n+        // Default null value for booleans is the string 'null', boolean is treated as a string\n+        assertQuery(\"SELECT DISTINCT string_col, element_at(string_array_col, 1), bool_col, element_at(bool_array_col, 1)\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X'' and element_at(int_array_col_with_pinot_default, 1) = 7\",\n+                \"VALUES ('null', 'null', 'null', 'null')\");\n+\n+        // Null behavior for arrays:\n+        // Default value for a \"null\" array is 1 element with default null array value,\n+        // ex.\n+        // Null string or boolean arrays will have ['null'] as the default,\n+        // Null integer arrays will have [Integer.MIN_VALUE] as the default\n+        // Null long arrays will have [Long.MIN_VALUE] as the default,\n+        // Null float arrays will have [-INFINITY] as the default\n+        // Null double arrays will have [-INFINITY] as the default\n+        // As mentioned above, arrays of varbinary are not supported\n+        assertQuery(\"SELECT CARDINALITY(string_array_col), CARDINALITY(bool_array_col), CARDINALITY(int_array_col),  CARDINALITY(int_array_col_with_pinot_default),\" +\n+                        \"  CARDINALITY(float_array_col),  CARDINALITY(long_array_col),  CARDINALITY(long_array_col)\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X'' and element_at(int_array_col_with_pinot_default, 1) = 7\",\n+                \"VALUES \" + join(\", \", IntStream.range(0, NULL_COUNT - ARRAY_NULL_COUNT).mapToObj(i -> \"(1, 1, 1, 1, 1, 1, 1)\").collect(toList())));\n+\n+        // If an array contains both null and non-null values, the null values are omitted:\n+        // There are 5 values in the avro records, but only the 3 non-null values are in pinot\n+        assertQuery(\"SELECT CARDINALITY(string_array_col), CARDINALITY(bool_array_col), CARDINALITY(int_array_col),  CARDINALITY(int_array_col_with_pinot_default),\" +\n+                        \"  CARDINALITY(float_array_col),  CARDINALITY(long_array_col),  CARDINALITY(long_array_col)\" +\n+                        \"  FROM \" + ALL_TYPES +\n+                        \"  WHERE bytes_col = X'' and element_at(bool_array_col, 1) != 'null'\",\n+                \"VALUES \" + join(\", \", IntStream.range(0, ARRAY_NULL_COUNT).mapToObj(i -> \"(3, 3, 1, 3, 1, 1, 1)\").collect(toList())));\n+    }\n+\n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE2MTY0MQ=="}, "originalCommit": null, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg5OTE4ODUxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQyMDozOTozNVrOJLnjNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwODo1Njo1OVrOJL7UGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE2MjEwMw==", "bodyText": "sum is defined for doubles, but also for bigint, decimal. is it an issue?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616162103", "createdAt": "2021-04-19T20:39:35Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -41,7 +41,7 @@\n     private static final CalciteSqlCompiler REQUEST_COMPILER = new CalciteSqlCompiler();\n     private static final String COLUMN_KEY = \"column\";\n     private static final String WILDCARD = \"*\";\n-    public static final Set<String> DOUBLE_AGGREGATIONS = ImmutableSet.of(\"distinctcounthll\", \"avg\");\n+    public static final Set<String> DOUBLE_AGGREGATIONS = ImmutableSet.of(\"sum\", \"distinctcounthll\", \"avg\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjQ4NTkxNA==", "bodyText": "Pinot client returns sum() as double regardless of it's type.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r616485914", "createdAt": "2021-04-20T08:56:59Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -41,7 +41,7 @@\n     private static final CalciteSqlCompiler REQUEST_COMPILER = new CalciteSqlCompiler();\n     private static final String COLUMN_KEY = \"column\";\n     private static final String WILDCARD = \"*\";\n-    public static final Set<String> DOUBLE_AGGREGATIONS = ImmutableSet.of(\"distinctcounthll\", \"avg\");\n+    public static final Set<String> DOUBLE_AGGREGATIONS = ImmutableSet.of(\"sum\", \"distinctcounthll\", \"avg\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE2MjEwMw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzE0NjAyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/PinotQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToxNjo0OVrOJqGN7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToxNjo0OVrOJqGN7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEyMTgzNw==", "bodyText": "Second argument is connectorName, so we should pass \"pinot\" here, not PINOT_CATALOG", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648121837", "createdAt": "2021-06-09T09:16:49Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/PinotQueryRunner.java", "diffHunk": "@@ -40,15 +42,15 @@ public static DistributedQueryRunner createPinotQueryRunner(Map<String, String>\n                 .setExtraProperties(extraProperties)\n                 .build();\n         queryRunner.installPlugin(new PinotPlugin(extension));\n-        queryRunner.createCatalog(\"pinot\", \"pinot\", extraPinotProperties);\n+        queryRunner.createCatalog(PINOT_CATALOG, PINOT_CATALOG, extraPinotProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzE3Mzc4OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToyMjo0MFrOJqGfHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToyMjo0MFrOJqGfHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEyNjIzNg==", "bodyText": "This should be either handled by the caller of getColumnIndices method, or reflected in the name.\nOtherwise getColumnIndices([\"Something\"]).get(\"Something\") returns null, instead of 0.\nBTW since getColumnIndices is called in one place only, I would just make it more fluent and inline:\nMap<String, Integer> columnIndices = IntStream.range(0, columnNames.length)\n        .boxed()\n        // Pinot lower cases column names which use aggregate functions, ex. min(my_Col) becomes min(my_col)\n        .collect(toImmutableMap(i -> columnNames[i].toLowerCase(ENGLISH), identity()));\n\nThen toLowerCase use when building the Map, and when querying it will be in the same method, which ensures the map is used correctly.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648126236", "createdAt": "2021-06-09T09:22:40Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "diffHunk": "@@ -419,9 +420,12 @@ protected BrokerResultRow computeNext()\n \n     private static Map<String, Integer> getColumnIndices(String[] columnNames)\n     {\n+        // Note:\n+        // Pinot lower cases column names which use aggregate functions, ex. min(my_Col) becomes min(my_col)\n+        // To avoid mismatches, lower case all column names\n         ImmutableMap.Builder<String, Integer> columnIndicesBuilder = ImmutableMap.builder();\n         for (int index = 0; index < columnNames.length; index++) {\n-            columnIndicesBuilder.put(columnNames[index], index);\n+            columnIndicesBuilder.put(columnNames[index].toLowerCase(ENGLISH), index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzE4NDQ2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToyNDo0OFrOJqGluQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToyNDo0OFrOJqGluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEyNzkyOQ==", "bodyText": "Fix filter pushdown for segment queries\n\ncall it \"Remove enforced filter for Pinot segment queries\"", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648127929", "createdAt": "2021-06-09T09:24:48Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -267,7 +291,7 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n                 newDomain,\n                 handle.getLimit(),\n                 handle.getQuery());\n-        return Optional.of(new ConstraintApplicationResult<>(handle, constraint.getSummary(), false));\n+        return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzE4NzU4OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToyNToyM1rOJqGnhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToyNToyM1rOJqGnhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEyODM4OA==", "bodyText": "I don't think it's helpful, especially given that the code below is different than the DefaultJdbcMetadata's.\nRemove comment", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648128388", "createdAt": "2021-06-09T09:25:23Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -254,9 +256,31 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n     {\n         PinotTableHandle handle = (PinotTableHandle) table;\n         TupleDomain<ColumnHandle> oldDomain = handle.getConstraint();\n-        // Pinot does not support array literals\n-        TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary())\n-                .filter((columnHandle, domain) -> !(((PinotColumnHandle) columnHandle).getDataType() instanceof ArrayType));\n+\n+        // Extracted from DefaultJdbcMetadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzIwNTQxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToyODo1OVrOJqGySQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xM1QxODozMTowMlrOJsbGkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzMTE0NQ==", "bodyText": "Is every other (non-array) filter enforced strictly, including varchar predicates (potentnial case (in)sensitivity issues)?\nWe apparently do not run io.trino.testing.AbstractTestDistributedQueries#testDataMappingSmokeTest and io.trino.testing.AbstractTestDistributedQueries#testCaseSensitiveDataMapping for Pinot yet. This is important.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648131145", "createdAt": "2021-06-09T09:28:59Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -254,9 +256,31 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n     {\n         PinotTableHandle handle = (PinotTableHandle) table;\n         TupleDomain<ColumnHandle> oldDomain = handle.getConstraint();\n-        // Pinot does not support array literals\n-        TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary())\n-                .filter((columnHandle, domain) -> !(((PinotColumnHandle) columnHandle).getDataType() instanceof ArrayType));\n+\n+        // Extracted from DefaultJdbcMetadata\n+        TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary());\n+        TupleDomain<ColumnHandle> remainingFilter;\n+        if (newDomain.isNone()) {\n+            remainingFilter = TupleDomain.all();\n+        }\n+        else {\n+            Map<ColumnHandle, Domain> domains = newDomain.getDomains().orElseThrow();\n+\n+            Map<ColumnHandle, Domain> supported = new HashMap<>();\n+            Map<ColumnHandle, Domain> unsupported = new HashMap<>();\n+            for (Map.Entry<ColumnHandle, Domain> entry : domains.entrySet()) {\n+                // Pinot does not support array literals\n+                if (((PinotColumnHandle) entry.getKey()).getDataType() instanceof ArrayType) {\n+                    unsupported.put(entry.getKey(), entry.getValue());\n+                }\n+                else {\n+                    supported.put(entry.getKey(), entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU2MTE2OA==", "bodyText": "Yes, there are tests. Case sensitivity is not an issue. Recently boolean and timestamp types were implemented in pinot. In a subsequent pr I will update to use those tests since the types required (boolean and date/timestamp) will be supported.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r650561168", "createdAt": "2021-06-13T18:31:02Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -254,9 +256,31 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n     {\n         PinotTableHandle handle = (PinotTableHandle) table;\n         TupleDomain<ColumnHandle> oldDomain = handle.getConstraint();\n-        // Pinot does not support array literals\n-        TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary())\n-                .filter((columnHandle, domain) -> !(((PinotColumnHandle) columnHandle).getDataType() instanceof ArrayType));\n+\n+        // Extracted from DefaultJdbcMetadata\n+        TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary());\n+        TupleDomain<ColumnHandle> remainingFilter;\n+        if (newDomain.isNone()) {\n+            remainingFilter = TupleDomain.all();\n+        }\n+        else {\n+            Map<ColumnHandle, Domain> domains = newDomain.getDomains().orElseThrow();\n+\n+            Map<ColumnHandle, Domain> supported = new HashMap<>();\n+            Map<ColumnHandle, Domain> unsupported = new HashMap<>();\n+            for (Map.Entry<ColumnHandle, Domain> entry : domains.entrySet()) {\n+                // Pinot does not support array literals\n+                if (((PinotColumnHandle) entry.getKey()).getDataType() instanceof ArrayType) {\n+                    unsupported.put(entry.getKey(), entry.getValue());\n+                }\n+                else {\n+                    supported.put(entry.getKey(), entry.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzMTE0NQ=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzIxMDA3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/PinotQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToyOTo1MVrOJqG1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOToyOTo1MVrOJqG1Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzMTg1OA==", "bodyText": "This looks like a refactor. Let's move it out of \"Fix filter pushdown for segment queries\" commit.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648131858", "createdAt": "2021-06-09T09:29:51Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/PinotQueryBuilder.java", "diffHunk": "@@ -100,11 +101,9 @@ private static void generateFilterPql(StringBuilder pqlBuilder, PinotTableHandle\n         ImmutableList.Builder<String> conjunctsBuilder = ImmutableList.builder();\n         timePredicate.ifPresent(conjunctsBuilder::add);\n         if (!tupleDomain.equals(TupleDomain.all())) {\n-            for (PinotColumnHandle columnHandle : columnHandles) {\n-                Domain domain = tupleDomain.getDomains().get().get(columnHandle);\n-                if (domain != null) {\n-                    conjunctsBuilder.add(toPredicate(columnHandle.getColumnName(), domain));\n-                }\n+            Map<ColumnHandle, Domain> domains = tupleDomain.getDomains().orElseThrow();\n+            for (Map.Entry<ColumnHandle, Domain> entry : domains.entrySet()) {\n+                conjunctsBuilder.add(toPredicate(((PinotColumnHandle) entry.getKey()).getColumnName(), entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzIyMTU1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozMjoxM1rOJqG8HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozMjoxM1rOJqG8HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzMzY2MA==", "bodyText": "The intent of QueryAssert (assertThat(query(...))) is to avoid methods with many overloads, or abstractions that make it harder to add more assertions. I.e. the assertThat(query(...)) should typically be used directly. If there is something preventing us from doing that (e.g. so verbose that it's unreadable) we should think how to improve.\nPlease inline these.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648133660", "createdAt": "2021-06-09T09:32:13Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -417,6 +419,16 @@ public static Object of(\n         }\n     }\n \n+    private void checkResultMatchesAndIsPushedDown(@Language(\"SQL\") String query, @Language(\"SQL\") String expected)\n+    {\n+        assertThat(query(query)).matches(expected).isFullyPushedDown();\n+    }\n+\n+    private void checkResultMatchesAndIsNotPushedDown(@Language(\"SQL\") String query, @Language(\"SQL\") String expected, Class<? extends PlanNode>... retainedNodes)\n+    {\n+        assertThat(query(query)).matches(expected).isNotFullyPushedDown(retainedNodes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzIyNDk2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozMjo1NVrOJqG-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xM1QxODozNjozOFrOJsbJEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzNDE5Mg==", "bodyText": "'string_3' and VARCHAR 'string_3' is the same value and same type. Please remove VARCHAR.\nWhy the third value changed its type from varchar to BIGINT?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648134192", "createdAt": "2021-06-09T09:32:55Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -520,16 +530,16 @@ public void testNonLowerCaseColumnNames()\n                         \"  FROM  \\\"SELECT updatedatseconds, longcol, stringcol FROM \" + MIXED_CASE_COLUMN_NAMES_TABLE + \"\\\"\",\n                 mixedCaseColumnNamesTableValues);\n \n-        String singleRowValues = \"VALUES ('string_3', '3', '1620604803')\";\n+        String singleRowValues = \"VALUES (VARCHAR 'string_3', BIGINT '3', BIGINT '1620604803')\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU2MTgxMA==", "bodyText": "Generally time columns use long in pinot, as Integer.MAX_VALUE epoch seconds can only go up to 1/19/2038.  I can always switch it back... lmk", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r650561810", "createdAt": "2021-06-13T18:36:38Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -520,16 +530,16 @@ public void testNonLowerCaseColumnNames()\n                         \"  FROM  \\\"SELECT updatedatseconds, longcol, stringcol FROM \" + MIXED_CASE_COLUMN_NAMES_TABLE + \"\\\"\",\n                 mixedCaseColumnNamesTableValues);\n \n-        String singleRowValues = \"VALUES ('string_3', '3', '1620604803')\";\n+        String singleRowValues = \"VALUES (VARCHAR 'string_3', BIGINT '3', BIGINT '1620604803')\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzNDE5Mg=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzIzMDk1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozNDowOVrOJqHB1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNFQxMDozNzoyMFrOJsry0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzNTEyNg==", "bodyText": "VARCHAR is redundant here", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648135126", "createdAt": "2021-06-09T09:34:09Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -732,33 +742,33 @@ public void testBrokerQueriesWithCaseStatementsInFilter()\n     @Test\n     public void testFilterWithRealLiteral()\n     {\n-        String expectedSingleValue = \"VALUES ('3.5', 'vendor1')\";\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price = 3.5\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price <= 3.5\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price BETWEEN 3 AND 4\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price > 3 AND price < 4\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price >= 3.5 AND price <= 4\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price < 3.6\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5)\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5, 4)\", expectedSingleValue);\n+        String expectedSingleValue = \"VALUES (REAL '3.5', VARCHAR 'vendor1')\";\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price = 3.5\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price <= 3.5\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price BETWEEN 3 AND 4\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price > 3 AND price < 4\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price >= 3.5 AND price <= 4\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price < 3.6\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5)\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5, 4)\", expectedSingleValue);\n         // NOT IN is not pushed down\n         assertThat(query(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price NOT IN (4.5, 5.5, 6.5, 7.5, 8.5, 9.5)\")).isNotFullyPushedDown(FilterNode.class);\n \n         String expectedMultipleValues = \"VALUES\" +\n-                \"  ('3.5', 'vendor1'),\" +\n-                \"  ('4.5', 'vendor2')\";\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price < 4.6\", expectedMultipleValues);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price BETWEEN 3.5 AND 4.5\", expectedMultipleValues);\n-\n-        String expectedMaxValue = \"VALUES ('9.5', 'vendor7')\";\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price > 9\", expectedMaxValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price >= 9\", expectedMaxValue);\n+                \"  (REAL '3.5', VARCHAR 'vendor1'),\" +\n+                \"  (REAL '4.5', VARCHAR 'vendor2')\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU2MTk2Ng==", "bodyText": "It would be varchar(7) which causes the types check to fail:\norg.junit.ComparisonFailure: [Output types] \nExpected :[real, varchar(7)]\nActual   :[real, varchar]", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r650561966", "createdAt": "2021-06-13T18:37:58Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -732,33 +742,33 @@ public void testBrokerQueriesWithCaseStatementsInFilter()\n     @Test\n     public void testFilterWithRealLiteral()\n     {\n-        String expectedSingleValue = \"VALUES ('3.5', 'vendor1')\";\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price = 3.5\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price <= 3.5\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price BETWEEN 3 AND 4\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price > 3 AND price < 4\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price >= 3.5 AND price <= 4\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price < 3.6\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5)\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5, 4)\", expectedSingleValue);\n+        String expectedSingleValue = \"VALUES (REAL '3.5', VARCHAR 'vendor1')\";\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price = 3.5\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price <= 3.5\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price BETWEEN 3 AND 4\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price > 3 AND price < 4\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price >= 3.5 AND price <= 4\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price < 3.6\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5)\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5, 4)\", expectedSingleValue);\n         // NOT IN is not pushed down\n         assertThat(query(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price NOT IN (4.5, 5.5, 6.5, 7.5, 8.5, 9.5)\")).isNotFullyPushedDown(FilterNode.class);\n \n         String expectedMultipleValues = \"VALUES\" +\n-                \"  ('3.5', 'vendor1'),\" +\n-                \"  ('4.5', 'vendor2')\";\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price < 4.6\", expectedMultipleValues);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price BETWEEN 3.5 AND 4.5\", expectedMultipleValues);\n-\n-        String expectedMaxValue = \"VALUES ('9.5', 'vendor7')\";\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price > 9\", expectedMaxValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price >= 9\", expectedMaxValue);\n+                \"  (REAL '3.5', VARCHAR 'vendor1'),\" +\n+                \"  (REAL '4.5', VARCHAR 'vendor2')\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzNTEyNg=="}, "originalCommit": null, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDgzNDY0MQ==", "bodyText": "I was totally unaware and would write lengthy CAST('...' AS varchar) to achieve the unbounded varchar type.\nhttps://trinodb.slack.com/archives/CP1MUNEUX/p1623666956326300\nwe can simplify some other tests using your version.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r650834641", "createdAt": "2021-06-14T10:37:20Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -732,33 +742,33 @@ public void testBrokerQueriesWithCaseStatementsInFilter()\n     @Test\n     public void testFilterWithRealLiteral()\n     {\n-        String expectedSingleValue = \"VALUES ('3.5', 'vendor1')\";\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price = 3.5\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price <= 3.5\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price BETWEEN 3 AND 4\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price > 3 AND price < 4\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price >= 3.5 AND price <= 4\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price < 3.6\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5)\", expectedSingleValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5, 4)\", expectedSingleValue);\n+        String expectedSingleValue = \"VALUES (REAL '3.5', VARCHAR 'vendor1')\";\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price = 3.5\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price <= 3.5\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price BETWEEN 3 AND 4\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price > 3 AND price < 4\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price >= 3.5 AND price <= 4\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price < 3.6\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5)\", expectedSingleValue);\n+        checkResultMatchesAndIsPushedDown(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price IN (3.5, 4)\", expectedSingleValue);\n         // NOT IN is not pushed down\n         assertThat(query(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price NOT IN (4.5, 5.5, 6.5, 7.5, 8.5, 9.5)\")).isNotFullyPushedDown(FilterNode.class);\n \n         String expectedMultipleValues = \"VALUES\" +\n-                \"  ('3.5', 'vendor1'),\" +\n-                \"  ('4.5', 'vendor2')\";\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price < 4.6\", expectedMultipleValues);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price BETWEEN 3.5 AND 4.5\", expectedMultipleValues);\n-\n-        String expectedMaxValue = \"VALUES ('9.5', 'vendor7')\";\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price > 9\", expectedMaxValue);\n-        assertQuery(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE price >= 9\", expectedMaxValue);\n+                \"  (REAL '3.5', VARCHAR 'vendor1'),\" +\n+                \"  (REAL '4.5', VARCHAR 'vendor2')\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzNTEyNg=="}, "originalCommit": null, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzI0NjQyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozNzozM1rOJqHLoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozNzozM1rOJqHLoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzNzYzMw==", "bodyText": "Maybe add sth like\nLimit is guaranteed when dynamicTable is present, because broker query has one split.\n\nor even better:\nboolean singleSplit = dynamicTable.isPresent();\nreturn Optional.of(new LimitApplicationResult<>(handle, singleSplit, false));", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648137633", "createdAt": "2021-06-09T09:37:33Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -248,7 +248,7 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n                 handle.getConstraint(),\n                 OptionalLong.of(limit),\n                 dynamicTable);\n-        return Optional.of(new LimitApplicationResult<>(handle, false, false));\n+        return Optional.of(new LimitApplicationResult<>(handle, dynamicTable.isPresent(), false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzI1NTEzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozOToyMFrOJqHRBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozOToyMFrOJqHRBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzOTAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"\\\"SELECT string_col, long_col, bool_col FROM \" + ALL_TYPES_TABLE + \" WHERE int_col > 0\\\"\" +\n          \n          \n            \n            \"\\\"SELECT string_col, long_col, bool_col FROM \" + ALL_TYPES_TABLE + \" WHERE int_col > 0\\\" \" +", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648139015", "createdAt": "2021-06-09T09:39:20Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -773,4 +774,16 @@ public void testArrayFilter()\n         // Array filters are not pushed down, as there are no array literals in pinot\n         assertThat(query(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE prices = ARRAY[3.5, 5.5]\")).isNotFullyPushedDown(FilterNode.class);\n     }\n+\n+    @Test\n+    public void testFilterPushdownWithLimit()\n+    {\n+        assertThat(query(\"SELECT string_col, long_col FROM \" +\n+                \"\\\"SELECT string_col, long_col, bool_col FROM \" + ALL_TYPES_TABLE + \" WHERE int_col > 0\\\"\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzI1Nzg4OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozOTo1NFrOJqHSvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTozOTo1NFrOJqHSvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzOTQ1Mw==", "bodyText": "fmt:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n          \n          \n            \n                            \"  WHERE int_col > 0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n          \n          \n            \n            Write", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648139453", "createdAt": "2021-06-09T09:39:54Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -773,4 +774,16 @@ public void testArrayFilter()\n         // Array filters are not pushed down, as there are no array literals in pinot\n         assertThat(query(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE prices = ARRAY[3.5, 5.5]\")).isNotFullyPushedDown(FilterNode.class);\n     }\n+\n+    @Test\n+    public void testFilterPushdownWithLimit()\n+    {\n+        assertThat(query(\"SELECT string_col, long_col FROM \" +\n+                \"\\\"SELECT string_col, long_col, bool_col FROM \" + ALL_TYPES_TABLE + \" WHERE int_col > 0\\\"\" +\n+                \"  WHERE bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+        assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE +\n+                \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzI2MDIyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0MDoyM1rOJqHUQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xM1QxOTo0MzowN1rOJsbkzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzOTg0MA==", "bodyText": "Why false is in quotes?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648139840", "createdAt": "2021-06-09T09:40:23Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -773,4 +774,16 @@ public void testArrayFilter()\n         // Array filters are not pushed down, as there are no array literals in pinot\n         assertThat(query(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE prices = ARRAY[3.5, 5.5]\")).isNotFullyPushedDown(FilterNode.class);\n     }\n+\n+    @Test\n+    public void testFilterPushdownWithLimit()\n+    {\n+        assertThat(query(\"SELECT string_col, long_col FROM \" +\n+                \"\\\"SELECT string_col, long_col, bool_col FROM \" + ALL_TYPES_TABLE + \" WHERE int_col > 0\\\"\" +\n+                \"  WHERE bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+        assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE +\n+                \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU2ODkxMQ==", "bodyText": "Currently boolean is treated as string, but in an upcoming release Pinot will support boolean type.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r650568911", "createdAt": "2021-06-13T19:43:07Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -773,4 +774,16 @@ public void testArrayFilter()\n         // Array filters are not pushed down, as there are no array literals in pinot\n         assertThat(query(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE prices = ARRAY[3.5, 5.5]\")).isNotFullyPushedDown(FilterNode.class);\n     }\n+\n+    @Test\n+    public void testFilterPushdownWithLimit()\n+    {\n+        assertThat(query(\"SELECT string_col, long_col FROM \" +\n+                \"\\\"SELECT string_col, long_col, bool_col FROM \" + ALL_TYPES_TABLE + \" WHERE int_col > 0\\\"\" +\n+                \"  WHERE bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+        assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE +\n+                \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODEzOTg0MA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzI2MTE3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0MDozN1rOJqHU4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0MDozN1rOJqHU4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE0MDAwMg==", "bodyText": "copy naming and test cases from io.trino.plugin.jdbc.BaseJdbcConnectorTest#testLimitPushdown", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648140002", "createdAt": "2021-06-09T09:40:37Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -773,4 +774,16 @@ public void testArrayFilter()\n         // Array filters are not pushed down, as there are no array literals in pinot\n         assertThat(query(\"SELECT price, vendor FROM \" + JSON_TABLE + \" WHERE prices = ARRAY[3.5, 5.5]\")).isNotFullyPushedDown(FilterNode.class);\n     }\n+\n+    @Test\n+    public void testFilterPushdownWithLimit()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzI3MjEzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0Mjo0OFrOJqHbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0Mjo0OFrOJqHbfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE0MTY5NQ==", "bodyText": "maybe something \"approximate-count-distinct\"\nbut i am not convinced we want this at all. Instead, we should support pushdown for approx_distinct.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648141695", "createdAt": "2021-06-09T09:42:48Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "diffHunk": "@@ -257,4 +260,38 @@ public PinotConfig setMaxRowsPerSplitForSegmentQueries(int maxRowsPerSplitForSeg\n         this.maxRowsPerSplitForSegmentQueries = maxRowsPerSplitForSegmentQueries;\n         return this;\n     }\n+\n+    public boolean isAggregationPushdownEnabled()\n+    {\n+        return aggregationPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.aggregation-pushdown.enabled\")\n+    public PinotConfig setAggregationPushdownEnabled(boolean aggregationPushdownEnabled)\n+    {\n+        this.aggregationPushdownEnabled = aggregationPushdownEnabled;\n+        return this;\n+    }\n+\n+    public boolean isDistinctCountHllEnabled()\n+    {\n+        return distinctCountHllEnabled;\n+    }\n+\n+    /**\n+     * Pinot distinctcounthll benefits from the star tree index.\n+     * For performance reasons this may be desirable.\n+     * The default behavior is to group by the grouping columns\n+     * and the distinct count column, and use trino to do the\n+     * final aggregation.\n+     * @param distinctCountHllEnabled\n+     * @return\n+     */\n+    @Config(\"pinot.distinct-count-hll.enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzI4MTM4OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0NDo0MFrOJqHhSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0NDo0MFrOJqHhSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE0MzE3OA==", "bodyText": ".orElseThrow(() -> ...) since you assume below the expression must be present", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648143178", "createdAt": "2021-06-09T09:44:40Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +306,211 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> distinctCountHllResult = applyDistinctCountHll(session, tableHandle, aggregates, assignments, groupingSets);\n+        if (distinctCountHllResult.isPresent()) {\n+            return distinctCountHllResult;\n+        }\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<String> inputExpression = getInputExpression(aggregate, assignments);\n+            // Do not push COUNT(<column>) into pinot as it converts to COUNT(*)\n+            // This will count null values.\n+            if (inputExpression.isEmpty() || (isCountFunction(aggregate) && !isCountStarFunction(aggregate))) {\n+                return Optional.empty();\n+            }\n+            // Distinct aggregations other than distinctcounthll are not supported\n+            if (aggregate.isDistinct()) {\n+                return Optional.empty();\n+            }\n+            Optional<String> aggregateFunctionName = getAggregationFunctionName(aggregate);\n+            if (aggregateFunctionName.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            String outputColumnName = format(\"%s(%s)\", aggregateFunctionName.get(), inputExpression.get());\n+            aggregationExpressions.add(new AggregationExpression(\n+                    outputColumnName,\n+                    inputExpression.get(),\n+                    aggregateFunctionName.get()));\n+            PinotColumnHandle newColumn = new PinotColumnHandle(outputColumnName, aggregate.getOutputType());\n+            projections.add(new Variable(newColumn.getColumnName(), newColumn.getDataType()));\n+            resultAssignments.add(new Assignment(outputColumnName, newColumn, aggregate.getOutputType()));\n+        }\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                getOnlyElement(groupingSets).stream()\n+                        .map(PinotColumnHandle.class::cast)\n+                        .map(PinotColumnHandle::getColumnName)\n+                        .collect(toImmutableList()),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),\n+                aggregationExpressions.build(),\n+                ImmutableList.of(),\n+                OptionalLong.empty(),\n+                OptionalLong.empty(),\n+                \"\");\n+        tableHandle = new PinotTableHandle(tableHandle.getSchemaName(), tableHandle.getTableName(), tableHandle.getConstraint(), tableHandle.getLimit(), Optional.of(dynamicTable));\n+\n+        return Optional.of(new AggregationApplicationResult<>(tableHandle, projections.build(), resultAssignments.build(), ImmutableMap.of(), false));\n+    }\n+\n+    private static boolean useDistinctCountHll(ConnectorSession session,\n+            PinotTableHandle tableHandle,\n+            List<AggregateFunction> aggregateFunctions,\n+            Map<String, ColumnHandle> assignments)\n+    {\n+        if (!isDistinctCountHllEnabled(session)) {\n+            return false;\n+        }\n+        if (tableHandle.getQuery().isEmpty()) {\n+            return false;\n+        }\n+        DynamicTable dynamicTable = tableHandle.getQuery().get();\n+\n+        if (aggregateFunctions.size() != 1) {\n+            return false;\n+        }\n+        AggregateFunction aggregateFunction = getOnlyElement(aggregateFunctions);\n+        // The first applyAggregation call will populate the grouping columns\n+        // and add the distinct column as well.\n+        // The second call contains a single count aggregate function which is not\n+        // distinct.\n+        if (!isCountFunction(aggregateFunction) ||\n+                isCountStarFunction(aggregateFunction) ||\n+                aggregateFunction.isDistinct() ||\n+                aggregateFunction.getFilter().isPresent() ||\n+                !aggregateFunction.getSortItems().isEmpty()) {\n+            return false;\n+        }\n+        Optional<String> inputExpression = getInputExpression(aggregateFunction, assignments);\n+        if (inputExpression.isEmpty() || inputExpression.get().equals(\"*\")) {\n+            return false;\n+        }\n+        PinotColumnHandle pinotColumnHandle = (PinotColumnHandle) assignments.get(inputExpression.get());\n+        // The grouping columns should contain the distinct column from the previous applyAggregation call\n+        if (!dynamicTable.getGroupingColumns().contains(pinotColumnHandle.getColumnName())) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private Optional<AggregationApplicationResult<ConnectorTableHandle>> applyDistinctCountHll(ConnectorSession session,\n+            PinotTableHandle tableHandle,\n+            List<AggregateFunction> aggregateFunctions,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!useDistinctCountHll(session, tableHandle, aggregateFunctions, assignments)) {\n+            return Optional.empty();\n+        }\n+        AggregateFunction aggregateFunction = getOnlyElement(aggregateFunctions);\n+        Optional<String> inputExpression = getInputExpression(aggregateFunction, assignments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzI5MzIzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0NzoxMVrOJqHonw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0NzoxMVrOJqHonw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE0NTA1NQ==", "bodyText": "Add explanation", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648145055", "createdAt": "2021-06-09T09:47:11Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +306,211 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzI5NDA4OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0NzoxOVrOJqHpGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0NzoxOVrOJqHpGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE0NTE3Nw==", "bodyText": "Explain why.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648145177", "createdAt": "2021-06-09T09:47:19Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +306,211 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> distinctCountHllResult = applyDistinctCountHll(session, tableHandle, aggregates, assignments, groupingSets);\n+        if (distinctCountHllResult.isPresent()) {\n+            return distinctCountHllResult;\n+        }\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzMwMzI4OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0OToxNFrOJqHutQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo0OToxNFrOJqHutQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE0NjYxMw==", "bodyText": "The input validation is not spread across two methods.\nInline.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648146613", "createdAt": "2021-06-09T09:49:14Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +306,211 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> distinctCountHllResult = applyDistinctCountHll(session, tableHandle, aggregates, assignments, groupingSets);\n+        if (distinctCountHllResult.isPresent()) {\n+            return distinctCountHllResult;\n+        }\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<String> inputExpression = getInputExpression(aggregate, assignments);\n+            // Do not push COUNT(<column>) into pinot as it converts to COUNT(*)\n+            // This will count null values.\n+            if (inputExpression.isEmpty() || (isCountFunction(aggregate) && !isCountStarFunction(aggregate))) {\n+                return Optional.empty();\n+            }\n+            // Distinct aggregations other than distinctcounthll are not supported\n+            if (aggregate.isDistinct()) {\n+                return Optional.empty();\n+            }\n+            Optional<String> aggregateFunctionName = getAggregationFunctionName(aggregate);\n+            if (aggregateFunctionName.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            String outputColumnName = format(\"%s(%s)\", aggregateFunctionName.get(), inputExpression.get());\n+            aggregationExpressions.add(new AggregationExpression(\n+                    outputColumnName,\n+                    inputExpression.get(),\n+                    aggregateFunctionName.get()));\n+            PinotColumnHandle newColumn = new PinotColumnHandle(outputColumnName, aggregate.getOutputType());\n+            projections.add(new Variable(newColumn.getColumnName(), newColumn.getDataType()));\n+            resultAssignments.add(new Assignment(outputColumnName, newColumn, aggregate.getOutputType()));\n+        }\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                getOnlyElement(groupingSets).stream()\n+                        .map(PinotColumnHandle.class::cast)\n+                        .map(PinotColumnHandle::getColumnName)\n+                        .collect(toImmutableList()),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),\n+                aggregationExpressions.build(),\n+                ImmutableList.of(),\n+                OptionalLong.empty(),\n+                OptionalLong.empty(),\n+                \"\");\n+        tableHandle = new PinotTableHandle(tableHandle.getSchemaName(), tableHandle.getTableName(), tableHandle.getConstraint(), tableHandle.getLimit(), Optional.of(dynamicTable));\n+\n+        return Optional.of(new AggregationApplicationResult<>(tableHandle, projections.build(), resultAssignments.build(), ImmutableMap.of(), false));\n+    }\n+\n+    private static boolean useDistinctCountHll(ConnectorSession session,\n+            PinotTableHandle tableHandle,\n+            List<AggregateFunction> aggregateFunctions,\n+            Map<String, ColumnHandle> assignments)\n+    {\n+        if (!isDistinctCountHllEnabled(session)) {\n+            return false;\n+        }\n+        if (tableHandle.getQuery().isEmpty()) {\n+            return false;\n+        }\n+        DynamicTable dynamicTable = tableHandle.getQuery().get();\n+\n+        if (aggregateFunctions.size() != 1) {\n+            return false;\n+        }\n+        AggregateFunction aggregateFunction = getOnlyElement(aggregateFunctions);\n+        // The first applyAggregation call will populate the grouping columns\n+        // and add the distinct column as well.\n+        // The second call contains a single count aggregate function which is not\n+        // distinct.\n+        if (!isCountFunction(aggregateFunction) ||\n+                isCountStarFunction(aggregateFunction) ||\n+                aggregateFunction.isDistinct() ||\n+                aggregateFunction.getFilter().isPresent() ||\n+                !aggregateFunction.getSortItems().isEmpty()) {\n+            return false;\n+        }\n+        Optional<String> inputExpression = getInputExpression(aggregateFunction, assignments);\n+        if (inputExpression.isEmpty() || inputExpression.get().equals(\"*\")) {\n+            return false;\n+        }\n+        PinotColumnHandle pinotColumnHandle = (PinotColumnHandle) assignments.get(inputExpression.get());\n+        // The grouping columns should contain the distinct column from the previous applyAggregation call\n+        if (!dynamicTable.getGroupingColumns().contains(pinotColumnHandle.getColumnName())) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private Optional<AggregationApplicationResult<ConnectorTableHandle>> applyDistinctCountHll(ConnectorSession session,\n+            PinotTableHandle tableHandle,\n+            List<AggregateFunction> aggregateFunctions,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!useDistinctCountHll(session, tableHandle, aggregateFunctions, assignments)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzMyODMwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo1NDoyMFrOJqH-OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQwOTo1NDoyMFrOJqH-OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE1MDU4NA==", "bodyText": "SUPPORTED_AGGREGATIONS should contain names of Trino aggregate functions.\nremove distinctcounthll  from it.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648150584", "createdAt": "2021-06-09T09:54:20Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +306,211 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> distinctCountHllResult = applyDistinctCountHll(session, tableHandle, aggregates, assignments, groupingSets);\n+        if (distinctCountHllResult.isPresent()) {\n+            return distinctCountHllResult;\n+        }\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<String> inputExpression = getInputExpression(aggregate, assignments);\n+            // Do not push COUNT(<column>) into pinot as it converts to COUNT(*)\n+            // This will count null values.\n+            if (inputExpression.isEmpty() || (isCountFunction(aggregate) && !isCountStarFunction(aggregate))) {\n+                return Optional.empty();\n+            }\n+            // Distinct aggregations other than distinctcounthll are not supported\n+            if (aggregate.isDistinct()) {\n+                return Optional.empty();\n+            }\n+            Optional<String> aggregateFunctionName = getAggregationFunctionName(aggregate);\n+            if (aggregateFunctionName.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            String outputColumnName = format(\"%s(%s)\", aggregateFunctionName.get(), inputExpression.get());\n+            aggregationExpressions.add(new AggregationExpression(\n+                    outputColumnName,\n+                    inputExpression.get(),\n+                    aggregateFunctionName.get()));\n+            PinotColumnHandle newColumn = new PinotColumnHandle(outputColumnName, aggregate.getOutputType());\n+            projections.add(new Variable(newColumn.getColumnName(), newColumn.getDataType()));\n+            resultAssignments.add(new Assignment(outputColumnName, newColumn, aggregate.getOutputType()));\n+        }\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                getOnlyElement(groupingSets).stream()\n+                        .map(PinotColumnHandle.class::cast)\n+                        .map(PinotColumnHandle::getColumnName)\n+                        .collect(toImmutableList()),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),\n+                aggregationExpressions.build(),\n+                ImmutableList.of(),\n+                OptionalLong.empty(),\n+                OptionalLong.empty(),\n+                \"\");\n+        tableHandle = new PinotTableHandle(tableHandle.getSchemaName(), tableHandle.getTableName(), tableHandle.getConstraint(), tableHandle.getLimit(), Optional.of(dynamicTable));\n+\n+        return Optional.of(new AggregationApplicationResult<>(tableHandle, projections.build(), resultAssignments.build(), ImmutableMap.of(), false));\n+    }\n+\n+    private static boolean useDistinctCountHll(ConnectorSession session,\n+            PinotTableHandle tableHandle,\n+            List<AggregateFunction> aggregateFunctions,\n+            Map<String, ColumnHandle> assignments)\n+    {\n+        if (!isDistinctCountHllEnabled(session)) {\n+            return false;\n+        }\n+        if (tableHandle.getQuery().isEmpty()) {\n+            return false;\n+        }\n+        DynamicTable dynamicTable = tableHandle.getQuery().get();\n+\n+        if (aggregateFunctions.size() != 1) {\n+            return false;\n+        }\n+        AggregateFunction aggregateFunction = getOnlyElement(aggregateFunctions);\n+        // The first applyAggregation call will populate the grouping columns\n+        // and add the distinct column as well.\n+        // The second call contains a single count aggregate function which is not\n+        // distinct.\n+        if (!isCountFunction(aggregateFunction) ||\n+                isCountStarFunction(aggregateFunction) ||\n+                aggregateFunction.isDistinct() ||\n+                aggregateFunction.getFilter().isPresent() ||\n+                !aggregateFunction.getSortItems().isEmpty()) {\n+            return false;\n+        }\n+        Optional<String> inputExpression = getInputExpression(aggregateFunction, assignments);\n+        if (inputExpression.isEmpty() || inputExpression.get().equals(\"*\")) {\n+            return false;\n+        }\n+        PinotColumnHandle pinotColumnHandle = (PinotColumnHandle) assignments.get(inputExpression.get());\n+        // The grouping columns should contain the distinct column from the previous applyAggregation call\n+        if (!dynamicTable.getGroupingColumns().contains(pinotColumnHandle.getColumnName())) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private Optional<AggregationApplicationResult<ConnectorTableHandle>> applyDistinctCountHll(ConnectorSession session,\n+            PinotTableHandle tableHandle,\n+            List<AggregateFunction> aggregateFunctions,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!useDistinctCountHll(session, tableHandle, aggregateFunctions, assignments)) {\n+            return Optional.empty();\n+        }\n+        AggregateFunction aggregateFunction = getOnlyElement(aggregateFunctions);\n+        Optional<String> inputExpression = getInputExpression(aggregateFunction, assignments);\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+        String outputColumnName = format(\"distinctcounthll(%s)\", inputExpression.get());\n+        aggregationExpressions.add(new AggregationExpression(\n+                outputColumnName,\n+                inputExpression.get(),\n+                \"distinctcounthll\"));\n+        PinotColumnHandle newColumn = new PinotColumnHandle(outputColumnName, DOUBLE);\n+        projections.add(new Variable(newColumn.getColumnName(), newColumn.getDataType()));\n+        resultAssignments.add(new Assignment(outputColumnName, newColumn, DOUBLE));\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                getOnlyElement(groupingSets).stream()\n+                        .map(PinotColumnHandle.class::cast)\n+                        .map(PinotColumnHandle::getColumnName)\n+                        .collect(toImmutableList()),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),\n+                aggregationExpressions.build(),\n+                ImmutableList.of(),\n+                OptionalLong.empty(),\n+                OptionalLong.empty(),\n+                \"\");\n+        tableHandle = new PinotTableHandle(tableHandle.getSchemaName(), tableHandle.getTableName(), tableHandle.getConstraint(), tableHandle.getLimit(), Optional.of(dynamicTable));\n+\n+        return Optional.of(new AggregationApplicationResult<>(tableHandle, projections.build(), resultAssignments.build(), ImmutableMap.of(), false));\n+    }\n+\n+    private static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (!SUPPORTED_AGGREGATIONS.contains(aggregateFunction.getFunctionName()) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzM2NTUyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQxMDowMjozM1rOJqIU1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQxMDowMjozM1rOJqIU1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE1NjM3NA==", "bodyText": "sort items don't matter for count function", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648156374", "createdAt": "2021-06-09T10:02:33Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +306,211 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> distinctCountHllResult = applyDistinctCountHll(session, tableHandle, aggregates, assignments, groupingSets);\n+        if (distinctCountHllResult.isPresent()) {\n+            return distinctCountHllResult;\n+        }\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<String> inputExpression = getInputExpression(aggregate, assignments);\n+            // Do not push COUNT(<column>) into pinot as it converts to COUNT(*)\n+            // This will count null values.\n+            if (inputExpression.isEmpty() || (isCountFunction(aggregate) && !isCountStarFunction(aggregate))) {\n+                return Optional.empty();\n+            }\n+            // Distinct aggregations other than distinctcounthll are not supported\n+            if (aggregate.isDistinct()) {\n+                return Optional.empty();\n+            }\n+            Optional<String> aggregateFunctionName = getAggregationFunctionName(aggregate);\n+            if (aggregateFunctionName.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            String outputColumnName = format(\"%s(%s)\", aggregateFunctionName.get(), inputExpression.get());\n+            aggregationExpressions.add(new AggregationExpression(\n+                    outputColumnName,\n+                    inputExpression.get(),\n+                    aggregateFunctionName.get()));\n+            PinotColumnHandle newColumn = new PinotColumnHandle(outputColumnName, aggregate.getOutputType());\n+            projections.add(new Variable(newColumn.getColumnName(), newColumn.getDataType()));\n+            resultAssignments.add(new Assignment(outputColumnName, newColumn, aggregate.getOutputType()));\n+        }\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                getOnlyElement(groupingSets).stream()\n+                        .map(PinotColumnHandle.class::cast)\n+                        .map(PinotColumnHandle::getColumnName)\n+                        .collect(toImmutableList()),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),\n+                aggregationExpressions.build(),\n+                ImmutableList.of(),\n+                OptionalLong.empty(),\n+                OptionalLong.empty(),\n+                \"\");\n+        tableHandle = new PinotTableHandle(tableHandle.getSchemaName(), tableHandle.getTableName(), tableHandle.getConstraint(), tableHandle.getLimit(), Optional.of(dynamicTable));\n+\n+        return Optional.of(new AggregationApplicationResult<>(tableHandle, projections.build(), resultAssignments.build(), ImmutableMap.of(), false));\n+    }\n+\n+    private static boolean useDistinctCountHll(ConnectorSession session,\n+            PinotTableHandle tableHandle,\n+            List<AggregateFunction> aggregateFunctions,\n+            Map<String, ColumnHandle> assignments)\n+    {\n+        if (!isDistinctCountHllEnabled(session)) {\n+            return false;\n+        }\n+        if (tableHandle.getQuery().isEmpty()) {\n+            return false;\n+        }\n+        DynamicTable dynamicTable = tableHandle.getQuery().get();\n+\n+        if (aggregateFunctions.size() != 1) {\n+            return false;\n+        }\n+        AggregateFunction aggregateFunction = getOnlyElement(aggregateFunctions);\n+        // The first applyAggregation call will populate the grouping columns\n+        // and add the distinct column as well.\n+        // The second call contains a single count aggregate function which is not\n+        // distinct.\n+        if (!isCountFunction(aggregateFunction) ||\n+                isCountStarFunction(aggregateFunction) ||\n+                aggregateFunction.isDistinct() ||\n+                aggregateFunction.getFilter().isPresent() ||\n+                !aggregateFunction.getSortItems().isEmpty()) {\n+            return false;\n+        }\n+        Optional<String> inputExpression = getInputExpression(aggregateFunction, assignments);\n+        if (inputExpression.isEmpty() || inputExpression.get().equals(\"*\")) {\n+            return false;\n+        }\n+        PinotColumnHandle pinotColumnHandle = (PinotColumnHandle) assignments.get(inputExpression.get());\n+        // The grouping columns should contain the distinct column from the previous applyAggregation call\n+        if (!dynamicTable.getGroupingColumns().contains(pinotColumnHandle.getColumnName())) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private Optional<AggregationApplicationResult<ConnectorTableHandle>> applyDistinctCountHll(ConnectorSession session,\n+            PinotTableHandle tableHandle,\n+            List<AggregateFunction> aggregateFunctions,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!useDistinctCountHll(session, tableHandle, aggregateFunctions, assignments)) {\n+            return Optional.empty();\n+        }\n+        AggregateFunction aggregateFunction = getOnlyElement(aggregateFunctions);\n+        Optional<String> inputExpression = getInputExpression(aggregateFunction, assignments);\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+        String outputColumnName = format(\"distinctcounthll(%s)\", inputExpression.get());\n+        aggregationExpressions.add(new AggregationExpression(\n+                outputColumnName,\n+                inputExpression.get(),\n+                \"distinctcounthll\"));\n+        PinotColumnHandle newColumn = new PinotColumnHandle(outputColumnName, DOUBLE);\n+        projections.add(new Variable(newColumn.getColumnName(), newColumn.getDataType()));\n+        resultAssignments.add(new Assignment(outputColumnName, newColumn, DOUBLE));\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                getOnlyElement(groupingSets).stream()\n+                        .map(PinotColumnHandle.class::cast)\n+                        .map(PinotColumnHandle::getColumnName)\n+                        .collect(toImmutableList()),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),\n+                aggregationExpressions.build(),\n+                ImmutableList.of(),\n+                OptionalLong.empty(),\n+                OptionalLong.empty(),\n+                \"\");\n+        tableHandle = new PinotTableHandle(tableHandle.getSchemaName(), tableHandle.getTableName(), tableHandle.getConstraint(), tableHandle.getLimit(), Optional.of(dynamicTable));\n+\n+        return Optional.of(new AggregationApplicationResult<>(tableHandle, projections.build(), resultAssignments.build(), ImmutableMap.of(), false));\n+    }\n+\n+    private static Optional<String> getAggregationFunctionName(AggregateFunction aggregateFunction)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        if (!SUPPORTED_AGGREGATIONS.contains(aggregateFunction.getFunctionName()) ||\n+                aggregateFunction.isDistinct() ||\n+                aggregateFunction.getFilter().isPresent()) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(aggregateFunction.getFunctionName());\n+    }\n+\n+    public static Optional<String> getInputExpression(AggregateFunction aggregateFunction, Map<String, ColumnHandle> columnHandles)\n+    {\n+        requireNonNull(aggregateFunction, \"aggregateFunction is null\");\n+        // Pinot converts count(column_name) to count(*)\n+        if (isCountStarFunction(aggregateFunction)) {\n+            return Optional.of(\"*\");\n+        }\n+        if (aggregateFunction.getInputs().size() != 1) {\n+            return Optional.empty();\n+        }\n+        String inputColumnName = ((Variable) getOnlyElement(aggregateFunction.getInputs())).getName();\n+        PinotColumnHandle pinotColumnHandle = (PinotColumnHandle) columnHandles.get(inputColumnName);\n+        if (pinotColumnHandle != null && SUPPORTED_INPUT_TYPES.contains(pinotColumnHandle.getDataType())) {\n+            return Optional.of(pinotColumnHandle.getColumnName());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static boolean isCountFunction(AggregateFunction aggregateFunction)\n+    {\n+        Optional<String> aggregationFunctionName = getAggregationFunctionName(aggregateFunction);\n+        return aggregationFunctionName.map(name -> name.equalsIgnoreCase(\"count\")).orElse(false);\n+    }\n+\n+    private static boolean isCountStarFunction(AggregateFunction aggregateFunction)\n+    {\n+        Optional<String> aggregationFunctionName = getAggregationFunctionName(aggregateFunction);\n+        return aggregationFunctionName.map(name -> name.equalsIgnoreCase(\"count\")).orElse(false) &&\n+                aggregateFunction.getInputs().isEmpty() &&\n+                !aggregateFunction.isDistinct() &&\n+                aggregateFunction.getFilter().isEmpty() &&\n+                aggregateFunction.getSortItems().isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzM4MDUwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQxMDowNTo1MlrOJqIdvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQxMDowNTo1MlrOJqIdvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE1ODY1NQ==", "bodyText": "This should be handled for individual functions separately. What would it take to use AggregateFunctionRewriter here?\nAlso, checking isDistinct is not enough.\nSee io.trino.plugin.jdbc.expression.AggregateFunctionPatterns#basicAggregation which matches only \"basic\" aggregation functions, without features that are both:  easy to forget about and hard to implement in the remote system.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648158655", "createdAt": "2021-06-09T10:05:52Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +306,211 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> distinctCountHllResult = applyDistinctCountHll(session, tableHandle, aggregates, assignments, groupingSets);\n+        if (distinctCountHllResult.isPresent()) {\n+            return distinctCountHllResult;\n+        }\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<String> inputExpression = getInputExpression(aggregate, assignments);\n+            // Do not push COUNT(<column>) into pinot as it converts to COUNT(*)\n+            // This will count null values.\n+            if (inputExpression.isEmpty() || (isCountFunction(aggregate) && !isCountStarFunction(aggregate))) {\n+                return Optional.empty();\n+            }\n+            // Distinct aggregations other than distinctcounthll are not supported\n+            if (aggregate.isDistinct()) {\n+                return Optional.empty();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExMzQwNDIzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wOVQxMDoxMToyMlrOJqIsUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNFQyMTowNToyN1rOJ40RyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE2MjM4NQ==", "bodyText": "in DynamicTable what are the semantics of filters, aggregations, sorting, etc?\nWhich is applied first, which is second, etc.?\nCurrent ordering of fields suggest that aggregation comes before filter, so this line looks incorrect -- you are transposing pre-existing filter with an aggregation.\nIf this is \"just\" a matter of field ordering in DynamicTable, please update it and add commentary like here:\n\n  \n    \n      trino/presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java\n    \n    \n        Lines 47 to 56\n      in\n      b52bcd7\n    \n    \n    \n    \n\n        \n          \n           private final TupleDomain<ColumnHandle> constraint; \n        \n\n        \n          \n            \n        \n\n        \n          \n           // semantically aggregation is applied after constraint \n        \n\n        \n          \n           private final Optional<List<List<JdbcColumnHandle>>> groupingSets; \n        \n\n        \n          \n            \n        \n\n        \n          \n           // semantically limit is applied after aggregation \n        \n\n        \n          \n           private final OptionalLong limit; \n        \n\n        \n          \n            \n        \n\n        \n          \n           // columns of the relation described by this handle, after projections, aggregations, etc. \n        \n\n        \n          \n           private final Optional<List<JdbcColumnHandle>> columns; \n        \n    \n  \n\n\nWhen doing that, sure the ordering of fields matches that of constructor arguments, they are equally important!", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r648162385", "createdAt": "2021-06-09T10:11:22Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +306,211 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> distinctCountHllResult = applyDistinctCountHll(session, tableHandle, aggregates, assignments, groupingSets);\n+        if (distinctCountHllResult.isPresent()) {\n+            return distinctCountHllResult;\n+        }\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<String> inputExpression = getInputExpression(aggregate, assignments);\n+            // Do not push COUNT(<column>) into pinot as it converts to COUNT(*)\n+            // This will count null values.\n+            if (inputExpression.isEmpty() || (isCountFunction(aggregate) && !isCountStarFunction(aggregate))) {\n+                return Optional.empty();\n+            }\n+            // Distinct aggregations other than distinctcounthll are not supported\n+            if (aggregate.isDistinct()) {\n+                return Optional.empty();\n+            }\n+            Optional<String> aggregateFunctionName = getAggregationFunctionName(aggregate);\n+            if (aggregateFunctionName.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            String outputColumnName = format(\"%s(%s)\", aggregateFunctionName.get(), inputExpression.get());\n+            aggregationExpressions.add(new AggregationExpression(\n+                    outputColumnName,\n+                    inputExpression.get(),\n+                    aggregateFunctionName.get()));\n+            PinotColumnHandle newColumn = new PinotColumnHandle(outputColumnName, aggregate.getOutputType());\n+            projections.add(new Variable(newColumn.getColumnName(), newColumn.getDataType()));\n+            resultAssignments.add(new Assignment(outputColumnName, newColumn, aggregate.getOutputType()));\n+        }\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                getOnlyElement(groupingSets).stream()\n+                        .map(PinotColumnHandle.class::cast)\n+                        .map(PinotColumnHandle::getColumnName)\n+                        .collect(toImmutableList()),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzU1NjU1Mw==", "bodyText": "Removed AggregationExpression and now the connector returns the exact pinot data type for aggregations. Also implemented approx_distinct pushdown.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663556553", "createdAt": "2021-07-04T21:05:27Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +306,211 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> distinctCountHllResult = applyDistinctCountHll(session, tableHandle, aggregates, assignments, groupingSets);\n+        if (distinctCountHllResult.isPresent()) {\n+            return distinctCountHllResult;\n+        }\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<String> inputExpression = getInputExpression(aggregate, assignments);\n+            // Do not push COUNT(<column>) into pinot as it converts to COUNT(*)\n+            // This will count null values.\n+            if (inputExpression.isEmpty() || (isCountFunction(aggregate) && !isCountStarFunction(aggregate))) {\n+                return Optional.empty();\n+            }\n+            // Distinct aggregations other than distinctcounthll are not supported\n+            if (aggregate.isDistinct()) {\n+                return Optional.empty();\n+            }\n+            Optional<String> aggregateFunctionName = getAggregationFunctionName(aggregate);\n+            if (aggregateFunctionName.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            String outputColumnName = format(\"%s(%s)\", aggregateFunctionName.get(), inputExpression.get());\n+            aggregationExpressions.add(new AggregationExpression(\n+                    outputColumnName,\n+                    inputExpression.get(),\n+                    aggregateFunctionName.get()));\n+            PinotColumnHandle newColumn = new PinotColumnHandle(outputColumnName, aggregate.getOutputType());\n+            projections.add(new Variable(newColumn.getColumnName(), newColumn.getDataType()));\n+            resultAssignments.add(new Assignment(outputColumnName, newColumn, aggregate.getOutputType()));\n+        }\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                getOnlyElement(groupingSets).stream()\n+                        .map(PinotColumnHandle.class::cast)\n+                        .map(PinotColumnHandle::getColumnName)\n+                        .collect(toImmutableList()),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE2MjM4NQ=="}, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjYwODYwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzozOTowN1rOJ4cT5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wM1QyMzo1Nzo1NVrOJ4sKxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2Mzg3OA==", "bodyText": "Where does this number come from? What are the implications of using a smaller or larger number?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663163878", "createdAt": "2021-07-02T17:39:07Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +317,74 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate and grouping columns are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<AggregationFunctionRewriteResult> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            aggregationExpressions.add(rewriteResult.get().getAggregationExpression());\n+            projections.add(rewriteResult.get().getProjection());\n+            resultAssignments.add(rewriteResult.get().getAssignment());\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()\n+                .map(PinotColumnHandle.class::cast)\n+                .map(PinotColumnHandle::getColumnName)\n+                .collect(toImmutableList());\n+        OptionalLong limitForDynamicTable = OptionalLong.empty();\n+        // Ensure that pinot default limit of 10 rows is not used\n+        // Currently pinot has a max limit of Integer.MAX_VALUE\n+        if (tableHandle.getLimit().isEmpty() && !groupingColumns.isEmpty()) {\n+            limitForDynamicTable = OptionalLong.of(1_000_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQyMzY4NA==", "bodyText": "Reordered the commits and set to the configured value of pinot.max-rows-for-broker-queries.\nThe number should be on the smaller side until the connector uses a pinot release version where this is fixed (should be in 0.8.0):\napache/pinot#7110", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663423684", "createdAt": "2021-07-03T23:57:55Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +317,74 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate and grouping columns are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<AggregationExpression> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<AggregationFunctionRewriteResult> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            aggregationExpressions.add(rewriteResult.get().getAggregationExpression());\n+            projections.add(rewriteResult.get().getProjection());\n+            resultAssignments.add(rewriteResult.get().getAssignment());\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()\n+                .map(PinotColumnHandle.class::cast)\n+                .map(PinotColumnHandle::getColumnName)\n+                .collect(toImmutableList());\n+        OptionalLong limitForDynamicTable = OptionalLong.empty();\n+        // Ensure that pinot default limit of 10 rows is not used\n+        // Currently pinot has a max limit of Integer.MAX_VALUE\n+        if (tableHandle.getLimit().isEmpty() && !groupingColumns.isEmpty()) {\n+            limitForDynamicTable = OptionalLong.of(1_000_000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2Mzg3OA=="}, "originalCommit": null, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjYxMzUwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo0MDo1MlrOJ4cW1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo0MDo1MlrOJ4cW1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NDYyOQ==", "bodyText": "This might be easier to read as:\n if (tableHandle.getQuery().isPresent() &&\n    (!tableHandle.getQuery().get().getAggregateColumns().isEmpty() || !tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {\nBasically, \"if the query is present and either aggregate columns or grouping columns are non-empty...\"", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663164629", "createdAt": "2021-07-02T17:40:52Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +317,74 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate and grouping columns are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !(tableHandle.getQuery().get().getAggregateColumns().isEmpty() &&\n+                        tableHandle.getQuery().get().getGroupingColumns().isEmpty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjYyOTAyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo0NTo0N1rOJ4cgNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNlQwMzowNzowOVrOJ5b5LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NzAzMA==", "bodyText": "Is this a reliable way to tell if it's count(*)? Maybe we should encode that in the column handle and tag them when the operation is pushed down.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663167030", "createdAt": "2021-07-02T17:45:47Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "diffHunk": "@@ -479,7 +480,20 @@ public static ResultsIterator fromResultTable(ResultTable resultTable, List<Pino\n         for (int i = 0; i < columnHandles.size(); i++) {\n             indices[i] = columnIndices.get(columnHandles.get(i).getColumnName().toLowerCase(ENGLISH));\n         }\n-        return new ResultsIterator(resultTable, indices);\n+        List<Object[]> rows = resultTable.getRows();\n+        // If returning from an aggregate with no grouping columns, make sure all non-count columns are null\n+        if (brokerResponse.getNumDocsScanned() == 0 && resultTable.getRows().size() == 1) {\n+            Object[] originalRow = getOnlyElement(resultTable.getRows());\n+            Object[] newRow = new Object[originalRow.length];\n+            for (int i = 0; i < originalRow.length; i++) {\n+                if (resultTable.getDataSchema().getColumnName(i).equals(\"count(*)\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDIwNTYxMg==", "bodyText": "Updated: information is encoded in the column handle.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r664205612", "createdAt": "2021-07-06T03:07:09Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "diffHunk": "@@ -479,7 +480,20 @@ public static ResultsIterator fromResultTable(ResultTable resultTable, List<Pino\n         for (int i = 0; i < columnHandles.size(); i++) {\n             indices[i] = columnIndices.get(columnHandles.get(i).getColumnName().toLowerCase(ENGLISH));\n         }\n-        return new ResultsIterator(resultTable, indices);\n+        List<Object[]> rows = resultTable.getRows();\n+        // If returning from an aggregate with no grouping columns, make sure all non-count columns are null\n+        if (brokerResponse.getNumDocsScanned() == 0 && resultTable.getRows().size() == 1) {\n+            Object[] originalRow = getOnlyElement(resultTable.getRows());\n+            Object[] newRow = new Object[originalRow.length];\n+            for (int i = 0; i < originalRow.length; i++) {\n+                if (resultTable.getDataSchema().getColumnName(i).equals(\"count(*)\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NzAzMA=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjYzMzEwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo0Njo0OFrOJ4citA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNFQwMDoyNzozMlrOJ4sTmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NzY2OA==", "bodyText": "Unrelated formatting changes", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663167668", "createdAt": "2021-07-02T17:46:48Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,34 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n+\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n+\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQyMjk4Mg==", "bodyText": "This was suggested by @findepi above, did I interpret his suggestion incorrectly or did you mean to put it in a different commit?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663422982", "createdAt": "2021-07-03T23:48:45Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,34 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n+\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n+\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NzY2OA=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQyNTk0Ng==", "bodyText": "That's ok, but move it to a separate commit.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663425946", "createdAt": "2021-07-04T00:27:32Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,34 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n+\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n+\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NzY2OA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjYzNDMwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo0NzowOFrOJ4cjXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDoyODoxNlrOJ62LqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NzgzNw==", "bodyText": "Why did this change position?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663167837", "createdAt": "2021-07-02T17:47:08Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,34 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n+\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n+\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+\n     private final String query;\n \n     @JsonCreator\n     public DynamicTable(\n             @JsonProperty(\"tableName\") String tableName,\n             @JsonProperty(\"suffix\") Optional<String> suffix,\n             @JsonProperty(\"selections\") List<String> selections,\n-            @JsonProperty(\"groupingColumns\") List<String> groupingColumns,\n             @JsonProperty(\"filter\") Optional<String> filter,\n+            @JsonProperty(\"groupingColumns\") List<String> groupingColumns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQyMzA1OQ==", "bodyText": "This was suggested by @findepi - if I interpreted correctly.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663423059", "createdAt": "2021-07-03T23:49:09Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,34 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n+\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n+\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+\n     private final String query;\n \n     @JsonCreator\n     public DynamicTable(\n             @JsonProperty(\"tableName\") String tableName,\n             @JsonProperty(\"suffix\") Optional<String> suffix,\n             @JsonProperty(\"selections\") List<String> selections,\n-            @JsonProperty(\"groupingColumns\") List<String> groupingColumns,\n             @JsonProperty(\"filter\") Optional<String> filter,\n+            @JsonProperty(\"groupingColumns\") List<String> groupingColumns,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NzgzNw=="}, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY4NDkwNA==", "bodyText": "This change should go in the first commit.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665684904", "createdAt": "2021-07-07T20:28:16Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,34 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n+\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n+\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+\n     private final String query;\n \n     @JsonCreator\n     public DynamicTable(\n             @JsonProperty(\"tableName\") String tableName,\n             @JsonProperty(\"suffix\") Optional<String> suffix,\n             @JsonProperty(\"selections\") List<String> selections,\n-            @JsonProperty(\"groupingColumns\") List<String> groupingColumns,\n             @JsonProperty(\"filter\") Optional<String> filter,\n+            @JsonProperty(\"groupingColumns\") List<String> groupingColumns,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NzgzNw=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjYzNTMwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo0NzoyNFrOJ4cj7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNFQwMDoyNjoxMlrOJ4sTPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2Nzk4Mw==", "bodyText": "Why did this change position?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663167983", "createdAt": "2021-07-02T17:47:24Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -54,8 +65,8 @@ public DynamicTable(\n         this.tableName = requireNonNull(tableName, \"tableName is null\");\n         this.suffix = requireNonNull(suffix, \"suffix is null\");\n         this.selections = ImmutableList.copyOf(requireNonNull(selections, \"selections is null\"));\n-        this.groupingColumns = ImmutableList.copyOf(requireNonNull(groupingColumns, \"groupingColumns is null\"));\n         this.filter = requireNonNull(filter, \"filter is null\");\n+        this.groupingColumns = ImmutableList.copyOf(requireNonNull(groupingColumns, \"groupingColumns is null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQyMzA2NQ==", "bodyText": "Same - suggested by @findepi - if I interpreted correctly:)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663423065", "createdAt": "2021-07-03T23:49:30Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -54,8 +65,8 @@ public DynamicTable(\n         this.tableName = requireNonNull(tableName, \"tableName is null\");\n         this.suffix = requireNonNull(suffix, \"suffix is null\");\n         this.selections = ImmutableList.copyOf(requireNonNull(selections, \"selections is null\"));\n-        this.groupingColumns = ImmutableList.copyOf(requireNonNull(groupingColumns, \"groupingColumns is null\"));\n         this.filter = requireNonNull(filter, \"filter is null\");\n+        this.groupingColumns = ImmutableList.copyOf(requireNonNull(groupingColumns, \"groupingColumns is null\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2Nzk4Mw=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQyNTg1Mw==", "bodyText": "That's ok, but do it in a separate commit to keep the logical changes independent.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663425853", "createdAt": "2021-07-04T00:26:12Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -54,8 +65,8 @@ public DynamicTable(\n         this.tableName = requireNonNull(tableName, \"tableName is null\");\n         this.suffix = requireNonNull(suffix, \"suffix is null\");\n         this.selections = ImmutableList.copyOf(requireNonNull(selections, \"selections is null\"));\n-        this.groupingColumns = ImmutableList.copyOf(requireNonNull(groupingColumns, \"groupingColumns is null\"));\n         this.filter = requireNonNull(filter, \"filter is null\");\n+        this.groupingColumns = ImmutableList.copyOf(requireNonNull(groupingColumns, \"groupingColumns is null\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2Nzk4Mw=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjYzODIzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo0ODoyN1rOJ4cl1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDoyOToyMVrOJ62N2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2ODQ2OQ==", "bodyText": "Unrelated change (i.e., reordering of methods). If it's warranted, move it to a separate commit.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663168469", "createdAt": "2021-07-02T17:48:27Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -76,9 +87,9 @@ public String getTableName()\n     }\n \n     @JsonProperty\n-    public List<String> getGroupingColumns()\n+    public List<String> getSelections()\n     {\n-        return groupingColumns;\n+        return selections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY4NTQ2NQ==", "bodyText": "I looks like this is still not resolved. Move the change to the first commit.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665685465", "createdAt": "2021-07-07T20:29:21Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -76,9 +87,9 @@ public String getTableName()\n     }\n \n     @JsonProperty\n-    public List<String> getGroupingColumns()\n+    public List<String> getSelections()\n     {\n-        return groupingColumns;\n+        return selections;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2ODQ2OQ=="}, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjY0MDEwOnYy", "diffSide": "LEFT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo0OTowNVrOJ4cm-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNVQwMDozNDoxNVrOJ41p_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2ODc2Mw==", "bodyText": "What happened to distinctcounthll?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663168763", "createdAt": "2021-07-02T17:49:05Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -42,8 +47,9 @@\n     private static final CalciteSqlCompiler REQUEST_COMPILER = new CalciteSqlCompiler();\n     private static final String COLUMN_KEY = \"column\";\n     private static final String WILDCARD = \"*\";\n-    public static final Set<String> DOUBLE_AGGREGATIONS = ImmutableSet.of(\"distinctcounthll\", \"avg\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQyMzE1NQ==", "bodyText": "This was suggested by @findepi above as well (if I interpreted correctly) - I can add it back, lmk.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663423155", "createdAt": "2021-07-03T23:50:33Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -42,8 +47,9 @@\n     private static final CalciteSqlCompiler REQUEST_COMPILER = new CalciteSqlCompiler();\n     private static final String COLUMN_KEY = \"column\";\n     private static final String WILDCARD = \"*\";\n-    public static final Set<String> DOUBLE_AGGREGATIONS = ImmutableSet.of(\"distinctcounthll\", \"avg\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2ODc2Mw=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQyNjIxMg==", "bodyText": "I'm ok either way, but I'm curious about why it was removed?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663426212", "createdAt": "2021-07-04T00:30:31Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -42,8 +47,9 @@\n     private static final CalciteSqlCompiler REQUEST_COMPILER = new CalciteSqlCompiler();\n     private static final String COLUMN_KEY = \"column\";\n     private static final String WILDCARD = \"*\";\n-    public static final Set<String> DOUBLE_AGGREGATIONS = ImmutableSet.of(\"distinctcounthll\", \"avg\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2ODc2Mw=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQ1OTE2Mw==", "bodyText": "@findepi suggested it's better to add as projection for approximate count which makes sense (I can do it in another pr). And for distinct count: if it's fully pushed to pinot it can crash a broker on a large table, but if the \"select col1, col2... group by col1, col2\" is pushed down and then trino does the \"select col1, count(col2)...\" it doesn't crash (tried this on large tables).", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663459163", "createdAt": "2021-07-04T07:15:38Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -42,8 +47,9 @@\n     private static final CalciteSqlCompiler REQUEST_COMPILER = new CalciteSqlCompiler();\n     private static final String COLUMN_KEY = \"column\";\n     private static final String WILDCARD = \"*\";\n-    public static final Set<String> DOUBLE_AGGREGATIONS = ImmutableSet.of(\"distinctcounthll\", \"avg\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2ODc2Mw=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzU3OTEzNA==", "bodyText": "Update: pushed down approx_distinct -> distinctcounthll in pinot.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663579134", "createdAt": "2021-07-05T00:34:15Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -42,8 +47,9 @@\n     private static final CalciteSqlCompiler REQUEST_COMPILER = new CalciteSqlCompiler();\n     private static final String COLUMN_KEY = \"column\";\n     private static final String WILDCARD = \"*\";\n-    public static final Set<String> DOUBLE_AGGREGATIONS = ImmutableSet.of(\"distinctcounthll\", \"avg\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2ODc2Mw=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjY2ODcwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementMinMax.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo1OTowMlrOJ4c4MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxNzo1OTowMlrOJ4c4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE3MzE2OA==", "bodyText": "Why is this not part of the pattern?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663173168", "createdAt": "2021-07-02T17:59:02Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementMinMax.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static java.lang.String.format;\n+\n+/**\n+ * Implements {@code min(x)}, {@code max(x)}.\n+ */\n+public class ImplementMinMax\n+        implements AggregateFunctionRule\n+{\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().matching(Set.of(\"min\", \"max\")::contains))\n+                .with(singleInput().matching(variable().capturedAs(INPUT)));\n+    }\n+\n+    @Override\n+    public Optional<AggregationFunctionRewriteResult> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        if (!isSupportedSingleColumnAggregateFunction(aggregateFunction, context)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxMjY5MTYxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementSum.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxODowNzozNFrOJ4dF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQxODowNzozNFrOJ4dF-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE3NjY5Nw==", "bodyText": "Remove commented out code", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r663176697", "createdAt": "2021-07-02T18:07:34Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementSum.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static java.lang.String.format;\n+\n+/**\n+ * Implements {@code sum(x)}\n+ */\n+public class ImplementSum\n+        implements AggregateFunctionRule\n+{\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    //public ImplementSum(Function<DecimalType, Optional<JdbcTypeHandle>> decimalTypeHandle)\n+    public ImplementSum()\n+    {\n+        //this.decimalTypeHandle = requireNonNull(decimalTypeHandle, \"decimalTypeHandle is null\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIyNDgxNzQ0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNlQyMjoyMTo0NFrOJ6HITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMVQxMToxODowN1rOJ8i2FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkxMzk5Ng==", "bodyText": "so we need to register here whenever we implement a new pushdown? Can we make this to something using  Reflectionor or Annotation?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r664913996", "createdAt": "2021-07-06T22:21:44Z", "author": {"login": "xiangfu0"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -100,6 +114,14 @@ public PinotMetadata(\n                         }, executor));\n \n         executor.execute(() -> this.allTablesCache.refresh(ALL_TABLES_CACHE_KEY));\n+        this.maxRowsPerBrokerQuery = pinotConfig.getMaxRowsForBrokerQueries();\n+        this.aggregateFunctionRewriter = new AggregateFunctionRewriter(identity(), ImmutableSet.<AggregateFunctionRule>builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzQ2NTIzNw==", "bodyText": "This was suggested above in this pr, the reasons being that it is easier to reason about and customize, and simplifies the implementation using common patterns which also reduce the chances of mistakes i.e. return null on empty set, different names for aggregations between pinot and trino, basic aggregation patterns, etc.\nThis is similar to the jdbc plugin, code was extracted from that plugin - suggested by @findepi above.\nlmk if that sounds correct @findepi , @xiangfu0", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r667465237", "createdAt": "2021-07-11T11:18:07Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -100,6 +114,14 @@ public PinotMetadata(\n                         }, executor));\n \n         executor.execute(() -> this.allTablesCache.refresh(ALL_TABLES_CACHE_KEY));\n+        this.maxRowsPerBrokerQuery = pinotConfig.getMaxRowsForBrokerQueries();\n+        this.aggregateFunctionRewriter = new AggregateFunctionRewriter(identity(), ImmutableSet.<AggregateFunctionRule>builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkxMzk5Ng=="}, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIyNDg5MzkyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotBrokerPageSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNlQyMjo1MDo0NFrOJ6H0jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMVQxMToyMToxOFrOJ8i3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkyNTMyNA==", "bodyText": "Do we need this limitForBrokerQueries in PinotBrokerPageSource? I feel we should leverage this in the planning phase, if it's large than this number, then we can fall back to segment-level query without broker pushdown?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r664925324", "createdAt": "2021-07-06T22:50:44Z", "author": {"login": "xiangfu0"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -45,20 +49,24 @@\n     private boolean finished;\n     private long readTimeNanos;\n     private long completedBytes;\n+    private final AtomicLong currentRowCount = new AtomicLong();\n+    private final int limitForBrokerQueries;\n \n     private Iterator<BrokerResultRow> resultIterator;\n \n     public PinotBrokerPageSource(\n             ConnectorSession session,\n             PinotQuery query,\n             List<PinotColumnHandle> columnHandles,\n-            PinotClient pinotClient)\n+            PinotClient pinotClient,\n+            int limitForBrokerQueries)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzQ2NTY1OA==", "bodyText": "I don't see how it's possible to do it in planning as you do not know how many rows will be returned ahead of time.\nThis is similar to how the segment queries handle rows exceeded, it was extracted from the elastic search connector, suggested by @martint - @martint , @xiangfu0 , lmk if this sounds correct.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r667465658", "createdAt": "2021-07-11T11:21:18Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -45,20 +49,24 @@\n     private boolean finished;\n     private long readTimeNanos;\n     private long completedBytes;\n+    private final AtomicLong currentRowCount = new AtomicLong();\n+    private final int limitForBrokerQueries;\n \n     private Iterator<BrokerResultRow> resultIterator;\n \n     public PinotBrokerPageSource(\n             ConnectorSession session,\n             PinotQuery query,\n             List<PinotColumnHandle> columnHandles,\n-            PinotClient pinotClient)\n+            PinotClient pinotClient,\n+            int limitForBrokerQueries)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkyNTMyNA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIyOTgwOTU1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDoyNTo0OVrOJ62GKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDoyNTo0OVrOJ62GKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY4MzQ5Nw==", "bodyText": "This should go in the first commit", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665683497", "createdAt": "2021-07-07T20:25:49Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -233,8 +251,8 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n             dynamicTable = Optional.of(new DynamicTable(dynamicTable.get().getTableName(),\n                     dynamicTable.get().getSuffix(),\n                     dynamicTable.get().getSelections(),\n-                    dynamicTable.get().getGroupingColumns(),\n                     dynamicTable.get().getFilter(),\n+                    dynamicTable.get().getGroupingColumns(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIyOTgyMDY3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDoyODo0OVrOJ62Mzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDoyODo0OVrOJ62Mzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY4NTE5OQ==", "bodyText": "This change should go in the first commit", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665685199", "createdAt": "2021-07-07T20:28:49Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,24 +29,33 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n-    private final List<AggregationExpression> aggregateColumns;\n+    private final List<PinotColumnHandle> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+\n     private final String query;\n \n     @JsonCreator\n     public DynamicTable(\n             @JsonProperty(\"tableName\") String tableName,\n             @JsonProperty(\"suffix\") Optional<String> suffix,\n             @JsonProperty(\"selections\") List<String> selections,\n-            @JsonProperty(\"groupingColumns\") List<String> groupingColumns,\n             @JsonProperty(\"filter\") Optional<String> filter,\n-            @JsonProperty(\"aggregateColumns\") List<AggregationExpression> aggregateColumns,\n+            @JsonProperty(\"groupingColumns\") List<String> groupingColumns,\n+            @JsonProperty(\"aggregateColumns\") List<PinotColumnHandle> aggregateColumns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIyOTgyNzMwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDozMDo0MlrOJ62Qwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDozMDo0MlrOJ62Qwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY4NjIxMA==", "bodyText": "Place one argument per line when splitting arguments across lines. So, format it like this:\naggregateColumnsBuilder.add(new PinotColumnHandle(\n        aggregationFunction.getResultColumnName(),\n        getTrinoTypeFromColumnDataType(aggregationFunction.getFinalResultColumnType())));", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665686210", "createdAt": "2021-07-07T20:30:42Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -93,33 +105,47 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         else {\n             filter = Optional.empty();\n         }\n-\n-        ImmutableList.Builder<AggregationExpression> aggregationExpressionBuilder = ImmutableList.builder();\n+        QueryContext queryContext = BrokerRequestToQueryContextConverter.convert(request);\n+        ImmutableList.Builder<PinotColumnHandle> aggregateColumnsBuilder = ImmutableList.builder();\n         if (request.getAggregationsInfo() != null) {\n-            for (AggregationInfo aggregationInfo : request.getAggregationsInfo()) {\n-                String baseColumnName = aggregationInfo.getAggregationParams().get(COLUMN_KEY);\n-                AggregationExpression aggregationExpression;\n-                if (baseColumnName.equals(WILDCARD)) {\n-                    aggregationExpression = new AggregationExpression(getOutputColumnName(aggregationInfo, baseColumnName),\n-                            baseColumnName,\n-                            aggregationInfo.getAggregationType());\n-                }\n-                else {\n-                    PinotColumnHandle columnHandle = (PinotColumnHandle) columnHandles.get(baseColumnName);\n-                    if (columnHandle == null) {\n-                        throw new ColumnNotFoundException(schemaTableName, aggregationInfo.getAggregationParams().get(COLUMN_KEY));\n-                    }\n-                    aggregationExpression = new AggregationExpression(\n-                            getOutputColumnName(aggregationInfo, columnHandle.getColumnName()),\n-                            columnHandle.getColumnName(),\n-                            aggregationInfo.getAggregationType());\n-                }\n-\n-                aggregationExpressionBuilder.add(aggregationExpression);\n+            for (AggregationFunction aggregationFunction : queryContext.getAggregationFunctions()) {\n+                aggregationFunction.getResultColumnName();\n+                aggregationFunction.getType().getName();\n+                aggregateColumnsBuilder.add(new PinotColumnHandle(aggregationFunction.getResultColumnName(),\n+                        getTrinoTypeFromColumnDataType(aggregationFunction.getFinalResultColumnType())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIyOTgyOTM1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDozMToyMFrOJ62SFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDozMToyMFrOJ62SFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY4NjU1MA==", "bodyText": "I'd just call this toTrinoType", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665686550", "createdAt": "2021-07-07T20:31:20Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -93,33 +105,47 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         else {\n             filter = Optional.empty();\n         }\n-\n-        ImmutableList.Builder<AggregationExpression> aggregationExpressionBuilder = ImmutableList.builder();\n+        QueryContext queryContext = BrokerRequestToQueryContextConverter.convert(request);\n+        ImmutableList.Builder<PinotColumnHandle> aggregateColumnsBuilder = ImmutableList.builder();\n         if (request.getAggregationsInfo() != null) {\n-            for (AggregationInfo aggregationInfo : request.getAggregationsInfo()) {\n-                String baseColumnName = aggregationInfo.getAggregationParams().get(COLUMN_KEY);\n-                AggregationExpression aggregationExpression;\n-                if (baseColumnName.equals(WILDCARD)) {\n-                    aggregationExpression = new AggregationExpression(getOutputColumnName(aggregationInfo, baseColumnName),\n-                            baseColumnName,\n-                            aggregationInfo.getAggregationType());\n-                }\n-                else {\n-                    PinotColumnHandle columnHandle = (PinotColumnHandle) columnHandles.get(baseColumnName);\n-                    if (columnHandle == null) {\n-                        throw new ColumnNotFoundException(schemaTableName, aggregationInfo.getAggregationParams().get(COLUMN_KEY));\n-                    }\n-                    aggregationExpression = new AggregationExpression(\n-                            getOutputColumnName(aggregationInfo, columnHandle.getColumnName()),\n-                            columnHandle.getColumnName(),\n-                            aggregationInfo.getAggregationType());\n-                }\n-\n-                aggregationExpressionBuilder.add(aggregationExpression);\n+            for (AggregationFunction aggregationFunction : queryContext.getAggregationFunctions()) {\n+                aggregationFunction.getResultColumnName();\n+                aggregationFunction.getType().getName();\n+                aggregateColumnsBuilder.add(new PinotColumnHandle(aggregationFunction.getResultColumnName(),\n+                        getTrinoTypeFromColumnDataType(aggregationFunction.getFinalResultColumnType())));\n             }\n         }\n \n-        return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+        return new DynamicTable(pinotTableName, suffix, selectionColumns, filter, groupByColumns, aggregateColumnsBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+    }\n+\n+    private static Type getTrinoTypeFromColumnDataType(DataSchema.ColumnDataType columnDataType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIyOTg0NTY0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotColumnHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDozNToyMFrOJ62bng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMDozNToyMFrOJ62bng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY4ODk5MA==", "bodyText": "It's not very clear what this means. I would call this \"returnNullOnEmptyGroup\" and adjust the code accordingly.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665688990", "createdAt": "2021-07-07T20:35:20Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotColumnHandle.java", "diffHunk": "@@ -56,6 +64,12 @@ public ColumnMetadata getColumnMetadata()\n         return new ColumnMetadata(getColumnName(), getDataType());\n     }\n \n+    @JsonProperty\n+    public boolean isPreservePinotEmptyAggregateValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIzMDAzOTUzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotColumnHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMToyOToyNFrOJ64OnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wOFQwNTozMzo0MlrOJ7CNVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTcxODQyOA==", "bodyText": "Can you add some comments on this, why we need it?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665718428", "createdAt": "2021-07-07T21:29:24Z", "author": {"login": "xiangfu0"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotColumnHandle.java", "diffHunk": "@@ -29,14 +29,22 @@\n {\n     private final String columnName;\n     private final Type dataType;\n+    private final boolean preservePinotEmptyAggregateValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTg4MTk0Mg==", "bodyText": "Yep will do: it's because pinot will return 0 for count() and distinctcount() on an empty set but the other aggregation functions will return -infinity (or default null value) when trino would return null, ex. for avg, sum, min and max.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665881942", "createdAt": "2021-07-08T05:33:42Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotColumnHandle.java", "diffHunk": "@@ -29,14 +29,22 @@\n {\n     private final String columnName;\n     private final Type dataType;\n+    private final boolean preservePinotEmptyAggregateValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTcxODQyOA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIzMDE4NzQ1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wN1QyMjoxNjoyMlrOJ65lCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMVQyMjowOTo1MVrOJ8niEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTc0MDU1NQ==", "bodyText": "Also, do you have any idea how we can push down count(distinct A) to Pinot as distinctCount(A)  or  count(distinct A) ?\nNote, Pinot internal will rewrite count(distinct A)  to distinctCount(A) as well.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665740555", "createdAt": "2021-07-07T22:16:22Z", "author": {"login": "xiangfu0"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -100,6 +114,14 @@ public PinotMetadata(\n                         }, executor));\n \n         executor.execute(() -> this.allTablesCache.refresh(ALL_TABLES_CACHE_KEY));\n+        this.maxRowsPerBrokerQuery = pinotConfig.getMaxRowsForBrokerQueries();\n+        this.aggregateFunctionRewriter = new AggregateFunctionRewriter(identity(), ImmutableSet.<AggregateFunctionRule>builder()\n+                .add(new ImplementCountAll())\n+                .add(new ImplementAvg())\n+                .add(new ImplementMinMax())\n+                .add(new ImplementSum())\n+                .add(new ImplementApproxDistinct())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTg4MDE1NA==", "bodyText": "I have code I can put back as an additional commit - so the broker request should use count(distinct A) and not distinctCount(A)?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665880154", "createdAt": "2021-07-08T05:28:51Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -100,6 +114,14 @@ public PinotMetadata(\n                         }, executor));\n \n         executor.execute(() -> this.allTablesCache.refresh(ALL_TABLES_CACHE_KEY));\n+        this.maxRowsPerBrokerQuery = pinotConfig.getMaxRowsForBrokerQueries();\n+        this.aggregateFunctionRewriter = new AggregateFunctionRewriter(identity(), ImmutableSet.<AggregateFunctionRule>builder()\n+                .add(new ImplementCountAll())\n+                .add(new ImplementAvg())\n+                .add(new ImplementMinMax())\n+                .add(new ImplementSum())\n+                .add(new ImplementApproxDistinct())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTc0MDU1NQ=="}, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTg4OTQ3MQ==", "bodyText": "Had a concern that it can use a lot of resources on the pinot servers though since it would have to scan all the segments that passed the filter and it would be done on a single broker vs many trino workers. wdyt?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665889471", "createdAt": "2021-07-08T05:53:37Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -100,6 +114,14 @@ public PinotMetadata(\n                         }, executor));\n \n         executor.execute(() -> this.allTablesCache.refresh(ALL_TABLES_CACHE_KEY));\n+        this.maxRowsPerBrokerQuery = pinotConfig.getMaxRowsForBrokerQueries();\n+        this.aggregateFunctionRewriter = new AggregateFunctionRewriter(identity(), ImmutableSet.<AggregateFunctionRule>builder()\n+                .add(new ImplementCountAll())\n+                .add(new ImplementAvg())\n+                .add(new ImplementMinMax())\n+                .add(new ImplementSum())\n+                .add(new ImplementApproxDistinct())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTc0MDU1NQ=="}, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTk1NzE3MA==", "bodyText": "hmm, this is a good point.\nI still feel that the Pinot side should handle the count(distinct ) queries since it would be much cheaper computation comparing to stream data to trino workers. Also pinot side has done many optimization for this type of query.\nAlso, we can add server and session configs to allow users disable pushdown for distinct count queries. So they can skip pushdown if the intermediate data are too large.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r665957170", "createdAt": "2021-07-08T07:53:41Z", "author": {"login": "xiangfu0"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -100,6 +114,14 @@ public PinotMetadata(\n                         }, executor));\n \n         executor.execute(() -> this.allTablesCache.refresh(ALL_TABLES_CACHE_KEY));\n+        this.maxRowsPerBrokerQuery = pinotConfig.getMaxRowsForBrokerQueries();\n+        this.aggregateFunctionRewriter = new AggregateFunctionRewriter(identity(), ImmutableSet.<AggregateFunctionRule>builder()\n+                .add(new ImplementCountAll())\n+                .add(new ImplementAvg())\n+                .add(new ImplementMinMax())\n+                .add(new ImplementSum())\n+                .add(new ImplementApproxDistinct())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTc0MDU1NQ=="}, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzUxNDk0NA==", "bodyText": "Update: added a session property to control whether distinct count is pushed down, implemented distinct count pushdown and added tests. Default behavior is to enable distinct count pushdown.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r667514944", "createdAt": "2021-07-11T17:53:05Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -100,6 +114,14 @@ public PinotMetadata(\n                         }, executor));\n \n         executor.execute(() -> this.allTablesCache.refresh(ALL_TABLES_CACHE_KEY));\n+        this.maxRowsPerBrokerQuery = pinotConfig.getMaxRowsForBrokerQueries();\n+        this.aggregateFunctionRewriter = new AggregateFunctionRewriter(identity(), ImmutableSet.<AggregateFunctionRule>builder()\n+                .add(new ImplementCountAll())\n+                .add(new ImplementAvg())\n+                .add(new ImplementMinMax())\n+                .add(new ImplementSum())\n+                .add(new ImplementApproxDistinct())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTc0MDU1NQ=="}, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzU0MjAzNQ==", "bodyText": "Last commit can be squashed into the \"Implement aggregation pushdown\" - kept it separate for now, hopefully easier to review. @martint, @findepi , @xiangfu0  - thanks so much for all the suggestions, ideas and learning!", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r667542035", "createdAt": "2021-07-11T22:09:51Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -100,6 +114,14 @@ public PinotMetadata(\n                         }, executor));\n \n         executor.execute(() -> this.allTablesCache.refresh(ALL_TABLES_CACHE_KEY));\n+        this.maxRowsPerBrokerQuery = pinotConfig.getMaxRowsForBrokerQueries();\n+        this.aggregateFunctionRewriter = new AggregateFunctionRewriter(identity(), ImmutableSet.<AggregateFunctionRule>builder()\n+                .add(new ImplementCountAll())\n+                .add(new ImplementAvg())\n+                .add(new ImplementMinMax())\n+                .add(new ImplementSum())\n+                .add(new ImplementApproxDistinct())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTc0MDU1NQ=="}, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjM1MTQwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotColumnHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMTo1NToyN1rOKAF7kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0zMVQwMDo0NDozNFrOKIxBRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE4NTgxMA==", "bodyText": "preservePinotEmptyAggregateValue -> returnNullOnEmptyGroup", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671185810", "createdAt": "2021-07-16T11:55:27Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotColumnHandle.java", "diffHunk": "@@ -83,6 +99,7 @@ public String toString()\n         return toStringHelper(this)\n                 .add(\"columnName\", columnName)\n                 .add(\"dataType\", dataType)\n+                .add(\"preservePinotEmptyAggregateValue\", returnNullOnEmptyGroup)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDI4MDM5MA==", "bodyText": "Thanks:)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r680280390", "createdAt": "2021-07-31T00:44:34Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotColumnHandle.java", "diffHunk": "@@ -83,6 +99,7 @@ public String toString()\n         return toStringHelper(this)\n                 .add(\"columnName\", columnName)\n                 .add(\"dataType\", dataType)\n+                .add(\"preservePinotEmptyAggregateValue\", returnNullOnEmptyGroup)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE4NTgxMA=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjM1NDcxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMTo1NjozNFrOKAF9uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMTo1NjozNFrOKAF9uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE4NjM2MA==", "bodyText": "\"after sorting\"", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671186360", "createdAt": "2021-07-16T11:56:34Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,32 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjM1NTY1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMTo1Njo1MVrOKAF-VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMTo1Njo1MVrOKAF-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE4NjUxNg==", "bodyText": "add // semantically sorting is applied after aggregation", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671186516", "createdAt": "2021-07-16T11:56:51Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,32 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjM1ODgzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMTo1Nzo0NVrOKAGAOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNFQxNjoyMjoxNlrOKLJAIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE4NzAwMw==", "bodyText": "should query be moved before filter, aggregations, sorting and limit?\nie are filter, aggregations, sorting and limit applied on top of a query?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671187003", "createdAt": "2021-07-16T11:57:45Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,32 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+\n     private final String query;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE4NzA5Mg==", "bodyText": "what about selections?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671187092", "createdAt": "2021-07-16T11:57:56Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,32 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+\n     private final String query;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE4NzAwMw=="}, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDI4MTUwOA==", "bodyText": "The query, if present, is the \"passthrough\" query - which is then parsed by pinot. The result will only contain selections if there are no aggregations.\nIf there are pushdowns, then the query will be empty.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r680281508", "createdAt": "2021-07-31T00:51:54Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,32 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+\n     private final String query;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE4NzAwMw=="}, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mjc3MDQ2Ng==", "bodyText": "A little more context: for passthrough queries, DynamicTableBuilder takes the query, parses it with the pinot broker request parser and the other fields in DynamicTable (selections, filter, grouping columns, limit) are created based on the parsed query.\nIf the DynamicTable was created via pushdown then the query will be empty and the other fields will be based on the result of the pushdown.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r682770466", "createdAt": "2021-08-04T16:22:16Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTable.java", "diffHunk": "@@ -28,23 +28,32 @@\n public final class DynamicTable\n {\n     private final String tableName;\n+\n     private final Optional<String> suffix;\n+\n     private final List<String> selections;\n+\n+    private final Optional<String> filter;\n+\n+    // semantically aggregation is applied after constraint\n     private final List<String> groupingColumns;\n     private final List<AggregationExpression> aggregateColumns;\n+\n     private final List<OrderByExpression> orderBy;\n+\n+    // semantically limit is applied after aggregation\n     private final OptionalLong limit;\n     private final OptionalLong offset;\n-    private final Optional<String> filter;\n+\n     private final String query;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE4NzAwMw=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjM4NzYzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotBrokerPageSource.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjowNTozN1rOKAGQ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yM1QwODoyOToyMVrOKVoNww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE5MTI2Mw==", "bodyText": "I understand limitForBrokerQueries is a temporary workaround until fix for apache/pinot#7110 is widespread. Let's add a TODO comment here so that we can remove this.\nAnyway, i don't quite understand why we want to do this.\nWe apply limit after the fact. We already know Pinot didn't crash and handled our query correctly.\nPlease store the explanation as a code comment.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671191263", "createdAt": "2021-07-16T12:05:37Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -113,6 +121,9 @@ public Page getNextPage()\n         int rowCount = 0;\n         while (size < PageBuilderStatus.DEFAULT_MAX_PAGE_SIZE_IN_BYTES && resultIterator.hasNext()) {\n             rowCount++;\n+            if (currentRowCount.incrementAndGet() > limitForBrokerQueries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDI4MzU3NA==", "bodyText": "The limit could be applied manually in the passthrough query also, I'll add a comment and TODO.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r680283574", "createdAt": "2021-07-31T01:08:36Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -113,6 +121,9 @@ public Page getNextPage()\n         int rowCount = 0;\n         while (size < PageBuilderStatus.DEFAULT_MAX_PAGE_SIZE_IN_BYTES && resultIterator.hasNext()) {\n             rowCount++;\n+            if (currentRowCount.incrementAndGet() > limitForBrokerQueries) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE5MTI2Mw=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDU3MTE1Mg==", "bodyText": "The other time a limit would be needed is during pushdown: no limit will only return 10 rows from pinot by default. If the limit is Integer.MAX_VALUE (limit is an integer in pinot) this can cause oom's in pinot (pinot#7110) -so it is set to the limit for broker queries config, and if there are more results an error is thrown.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r680571152", "createdAt": "2021-08-01T21:54:00Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -113,6 +121,9 @@ public Page getNextPage()\n         int rowCount = 0;\n         while (size < PageBuilderStatus.DEFAULT_MAX_PAGE_SIZE_IN_BYTES && resultIterator.hasNext()) {\n             rowCount++;\n+            if (currentRowCount.incrementAndGet() > limitForBrokerQueries) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE5MTI2Mw=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2MDE0Ng==", "bodyText": "I'm a bit confused? Does Pinot stream results back as soon as they are available? i.e. does Pinot run into an OOM after some results have been returned? If not and Pinot OOMs early then what I think Piotr is saying is that this may be dead code since the Pinot query would've failed already and we'd not have reached here in the first place.\nCan you share what Pinot's behaviour is?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683960146", "createdAt": "2021-08-06T05:36:47Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -113,6 +121,9 @@ public Page getNextPage()\n         int rowCount = 0;\n         while (size < PageBuilderStatus.DEFAULT_MAX_PAGE_SIZE_IN_BYTES && resultIterator.hasNext()) {\n             rowCount++;\n+            if (currentRowCount.incrementAndGet() > limitForBrokerQueries) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE5MTI2Mw=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mzc2NzYxOQ==", "bodyText": "@elonazoulay Bump.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r693767619", "createdAt": "2021-08-23T08:29:21Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotBrokerPageSource.java", "diffHunk": "@@ -113,6 +121,9 @@ public Page getNextPage()\n         int rowCount = 0;\n         while (size < PageBuilderStatus.DEFAULT_MAX_PAGE_SIZE_IN_BYTES && resultIterator.hasNext()) {\n             rowCount++;\n+            if (currentRowCount.incrementAndGet() > limitForBrokerQueries) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE5MTI2Mw=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjM5MTk3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestBrokerQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjowNjo1MFrOKAGTlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjowNjo1MFrOKAGTlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE5MTk1Ng==", "bodyText": "Looks like TestBrokerQueries could benefit from a test that shows that the broker queries limit gets applied.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671191956", "createdAt": "2021-07-16T12:06:50Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestBrokerQueries.java", "diffHunk": "@@ -46,6 +46,7 @@\n     private static final DataSchema DATA_SCHEMA;\n     private static final List<Object[]> TEST_DATA;\n     private static final ResultTable RESULT_TABLE;\n+    private static final int LIMIT_FOR_BROKER_QUERIES = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjQwMzIyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjowOTowMlrOKAGaDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjowOTowMlrOKAGaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE5MzYxNA==", "bodyText": "where does -2147483648 come from? it's an integer overflow on the Pinot side, right?\nplease add a link to a Pinot issue here for clarify\n// Note that -2147483648 is due to an integer overflow in Pinot, see https://.....", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671193614", "createdAt": "2021-07-16T12:09:02Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -578,6 +599,44 @@ public void testBrokerQueryWithTooManyRowsForSegmentQuery()\n                 tooManyRowsTableValues);\n     }\n \n+    @Test\n+    public void testMaxLimitForPassthroughQueries()\n+            throws InterruptedException\n+    {\n+        assertQueryFails(\"SELECT string_col, updated_at_seconds\" +\n+                        \"  FROM  \\\"SELECT updated_at_seconds, string_col FROM \" + TOO_MANY_BROKER_ROWS_TABLE +\n+                        \"  LIMIT \" + (MAX_ROWS_PER_SPLIT_FOR_BROKER_QUERIES + 1) + \"\\\"\",\n+                \"Broker query returned '13' rows, maximum allowed is '12' rows. with query \\\"select updated_at_seconds, string_col from too_many_broker_rows limit 13\\\"\");\n+\n+        // Pinot issue preventing Integer.MAX_VALUE from being a limit: https://github.com/apache/incubator-pinot/issues/7110\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + Integer.MAX_VALUE + \"\\\"\",\n+                \"Unexpected response status: 500 for request \\\\{\\\"sql\\\" : \\\"select string_col, long_col from alltypes limit 2147483647\\\" \\\\} to url http://localhost:\\\\d+/query/sql, with headers \\\\{Accept=\\\\[application/json\\\\], Content-Type=\\\\[application/json\\\\]\\\\}, full response null\");\n+\n+        // Pinot broker requests do not handle limits greater than Integer.MAX_VALUE\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + ((long) Integer.MAX_VALUE + 1) + \"\\\"\",\n+                \"Query select string_col, long_col from alltypes limit -2147483648 encountered exception org.apache.pinot.common.response.broker.QueryProcessingException@\\\\w+ with query \\\"select string_col, long_col from alltypes limit -2147483648\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjQ0MTc3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjoxNzozOFrOKAGxNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wM1QxNzo1MDowMlrOKKYi9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE5OTU0Mw==", "bodyText": "// If returning from a global aggregation (no grouping columns) over an empty table, NULL-out all aggregation function results except for `count()`\n\nSome questions\n\nIs brokerResponse.getNumDocsScanned() == 0 equivalent to saying \"table is empty\"? Can a document hold no rows? What if there were documents scanned, but data was filtered out (SELECT max(x) FROM non_empty_table WHERE y = non_existent_value)?\nresultTable.getRows().size() == 1  combined with \"no data\" is a tricky way saying \"global aggregation\". Would checking query.getGroupByClauses()==0 be sufficient? (assuming getGroupByClauses is populated correctly, which i didn't check)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671199543", "createdAt": "2021-07-16T12:17:38Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "diffHunk": "@@ -462,24 +462,39 @@ private BrokerResponseNative submitBrokerQueryJson(ConnectorSession session, Pin\n     public Iterator<BrokerResultRow> createResultIterator(ConnectorSession session, PinotQuery query, List<PinotColumnHandle> columnHandles)\n     {\n         BrokerResponseNative response = submitBrokerQueryJson(session, query);\n-        return fromResultTable(response.getResultTable(), columnHandles);\n+        return fromResultTable(response, columnHandles);\n     }\n \n     @VisibleForTesting\n-    public static ResultsIterator fromResultTable(ResultTable resultTable, List<PinotColumnHandle> columnHandles)\n+    public static ResultsIterator fromResultTable(BrokerResponseNative brokerResponse, List<PinotColumnHandle> columnHandles)\n     {\n-        requireNonNull(resultTable, \"resultTable is null\");\n+        requireNonNull(brokerResponse, \"brokerResponse is null\");\n         requireNonNull(columnHandles, \"columnHandles is null\");\n+        ResultTable resultTable = brokerResponse.getResultTable();\n         String[] columnNames = resultTable.getDataSchema().getColumnNames();\n         Map<String, Integer> columnIndices = IntStream.range(0, columnNames.length)\n                 .boxed()\n                 // Pinot lower cases column names which use aggregate functions, ex. min(my_Col) becomes min(my_col)\n                 .collect(toImmutableMap(i -> columnNames[i].toLowerCase(ENGLISH), identity()));\n         int[] indices = new int[columnNames.length];\n+        int[] inverseIndices = new int[columnNames.length];\n         for (int i = 0; i < columnHandles.size(); i++) {\n             indices[i] = columnIndices.get(columnHandles.get(i).getColumnName().toLowerCase(ENGLISH));\n+            inverseIndices[indices[i]] = i;\n         }\n-        return new ResultsIterator(resultTable, indices);\n+        List<Object[]> rows = resultTable.getRows();\n+        // If returning from an aggregate with no grouping columns, make sure all non-count columns are null\n+        if (brokerResponse.getNumDocsScanned() == 0 && resultTable.getRows().size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTk3NjU2NQ==", "bodyText": "The numDocsScanned in the response will be set to 0 if the result set is empty even if the dataset before the filter is non-empty. The numSegmentsScanned in the response will be > 0 if the data set was not empty, i.e. it scanned over rows but the filter removed them.\nGood point: I added groupingColumns as an extra verification.\nThere is a test to verify this behavior in testAggregationPushdown - the one with the comment: // Test single row from pinot where filter results in an empty result set.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r681976565", "createdAt": "2021-08-03T17:50:02Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "diffHunk": "@@ -462,24 +462,39 @@ private BrokerResponseNative submitBrokerQueryJson(ConnectorSession session, Pin\n     public Iterator<BrokerResultRow> createResultIterator(ConnectorSession session, PinotQuery query, List<PinotColumnHandle> columnHandles)\n     {\n         BrokerResponseNative response = submitBrokerQueryJson(session, query);\n-        return fromResultTable(response.getResultTable(), columnHandles);\n+        return fromResultTable(response, columnHandles);\n     }\n \n     @VisibleForTesting\n-    public static ResultsIterator fromResultTable(ResultTable resultTable, List<PinotColumnHandle> columnHandles)\n+    public static ResultsIterator fromResultTable(BrokerResponseNative brokerResponse, List<PinotColumnHandle> columnHandles)\n     {\n-        requireNonNull(resultTable, \"resultTable is null\");\n+        requireNonNull(brokerResponse, \"brokerResponse is null\");\n         requireNonNull(columnHandles, \"columnHandles is null\");\n+        ResultTable resultTable = brokerResponse.getResultTable();\n         String[] columnNames = resultTable.getDataSchema().getColumnNames();\n         Map<String, Integer> columnIndices = IntStream.range(0, columnNames.length)\n                 .boxed()\n                 // Pinot lower cases column names which use aggregate functions, ex. min(my_Col) becomes min(my_col)\n                 .collect(toImmutableMap(i -> columnNames[i].toLowerCase(ENGLISH), identity()));\n         int[] indices = new int[columnNames.length];\n+        int[] inverseIndices = new int[columnNames.length];\n         for (int i = 0; i < columnHandles.size(); i++) {\n             indices[i] = columnIndices.get(columnHandles.get(i).getColumnName().toLowerCase(ENGLISH));\n+            inverseIndices[indices[i]] = i;\n         }\n-        return new ResultsIterator(resultTable, indices);\n+        List<Object[]> rows = resultTable.getRows();\n+        // If returning from an aggregate with no grouping columns, make sure all non-count columns are null\n+        if (brokerResponse.getNumDocsScanned() == 0 && resultTable.getRows().size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTE5OTU0Mw=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjQ2MzEzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/decoders/ArrayDecoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjoyMjoxNlrOKAG-aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0zMFQyMzo0NjoyOFrOKIwYHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIwMjkyMA==", "bodyText": "looks like unrelated to aggregations, is it?\nSeems like you're fixing reading of array type when the array itself is null?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671202920", "createdAt": "2021-07-16T12:22:16Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/decoders/ArrayDecoder.java", "diffHunk": "@@ -42,11 +42,16 @@ public ArrayDecoder(Type type)\n     public void decode(Supplier<Object> getter, BlockBuilder output)\n     {\n         List<?> value = (List<?>) getter.get();\n-        BlockBuilder elementBlockBuilder = type.getElementType().createBlockBuilder(null, 1);\n-        for (int i = 0; i < value.size(); i++) {\n-            int index = i;\n-            elementDecoder.decode(() -> value.get(index), elementBlockBuilder);\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDI2OTg1NA==", "bodyText": "The only time it could be null is when it's set during a single row aggregation (no grouping columns) over an empty set, depending on the aggregate function. Counting functions return 0 for empty set and everything else returns null. Pinot does not return null values, the connector sets them to null in this case.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r680269854", "createdAt": "2021-07-30T23:46:28Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/decoders/ArrayDecoder.java", "diffHunk": "@@ -42,11 +42,16 @@ public ArrayDecoder(Type type)\n     public void decode(Supplier<Object> getter, BlockBuilder output)\n     {\n         List<?> value = (List<?>) getter.get();\n-        BlockBuilder elementBlockBuilder = type.getElementType().createBlockBuilder(null, 1);\n-        for (int i = 0; i < value.size(); i++) {\n-            int index = i;\n-            elementDecoder.decode(() -> value.get(index), elementBlockBuilder);\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIwMjkyMA=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjQ2NTIyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/decoders/BigintDecoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjoyMjo0OFrOKAG_tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yOVQxODo0NToxNFrOKH7YXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIwMzI1Mw==", "bodyText": "looks like unrelated to aggregations, is it?\n(same for other decoders)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671203253", "createdAt": "2021-07-16T12:22:48Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/decoders/BigintDecoder.java", "diffHunk": "@@ -25,6 +25,12 @@\n     @Override\n     public void decode(Supplier<Object> getter, BlockBuilder output)\n     {\n-        BIGINT.writeLong(output, ((Number) getter.get()).longValue());\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTQwMTU2NA==", "bodyText": "This is due to a change related to aggregation: for queries with aggregates and no grouping columns, if the data is empty pinot returns \"-infinity\" for  numeric columns (even integer and long), so there is code to manually set these to null.\nPinot never returns null, this was done in the connector so the behavior matches what is expected, i.e. count, count distinct over no data returns 0, all other implemented aggregations return null.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r679401564", "createdAt": "2021-07-29T18:45:14Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/decoders/BigintDecoder.java", "diffHunk": "@@ -25,6 +25,12 @@\n     @Override\n     public void decode(Supplier<Object> getter, BlockBuilder output)\n     {\n-        BIGINT.writeLong(output, ((Number) getter.get()).longValue());\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIwMzI1Mw=="}, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjQ3OTYwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionPatterns.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjoyNTo0MlrOKAHIKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNjo1MDo0N1rOKM4WgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIwNTQxOA==", "bodyText": "Let's move AggregateFunctionPatterns to plugin-toolkit instead of copying it.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671205418", "createdAt": "2021-07-16T12:25:42Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionPatterns.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Match;\n+import io.trino.matching.Pattern;\n+import io.trino.matching.PatternVisitor;\n+import io.trino.matching.Property;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.ConnectorExpression;\n+import io.trino.spi.expression.Variable;\n+import io.trino.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class AggregateFunctionPatterns\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.AggregateFunctionPatterns", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIxOTE4NA==", "bodyText": "#8578", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671219184", "createdAt": "2021-07-16T12:42:58Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionPatterns.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Match;\n+import io.trino.matching.Pattern;\n+import io.trino.matching.PatternVisitor;\n+import io.trino.matching.Property;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.ConnectorExpression;\n+import io.trino.spi.expression.Variable;\n+import io.trino.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class AggregateFunctionPatterns\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.AggregateFunctionPatterns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIwNTQxOA=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2NzQ2Ng==", "bodyText": "@elonazoulay Was there any conclusion here? I agree it'd be much nicer to avoid a copy to prevent code from drifting away.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683967466", "createdAt": "2021-08-06T05:57:04Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionPatterns.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Match;\n+import io.trino.matching.Pattern;\n+import io.trino.matching.PatternVisitor;\n+import io.trino.matching.Property;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.ConnectorExpression;\n+import io.trino.spi.expression.Variable;\n+import io.trino.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class AggregateFunctionPatterns\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.AggregateFunctionPatterns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIwNTQxOA=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU5NDc3Nw==", "bodyText": "I was wondering if I could make RewriteContext extendible, or add the groupingColumns to it. Count distinct in pinot needs to verify that the input column is contained in the grouping columns if there is a passthrough query. Let me know what you think.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684594777", "createdAt": "2021-08-07T06:50:20Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionPatterns.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Match;\n+import io.trino.matching.Pattern;\n+import io.trino.matching.PatternVisitor;\n+import io.trino.matching.Property;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.ConnectorExpression;\n+import io.trino.spi.expression.Variable;\n+import io.trino.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class AggregateFunctionPatterns\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.AggregateFunctionPatterns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIwNTQxOA=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU5NDgxNw==", "bodyText": "Agreed, would be much better to use #8578 .", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684594817", "createdAt": "2021-08-07T06:50:47Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionPatterns.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Match;\n+import io.trino.matching.Pattern;\n+import io.trino.matching.PatternVisitor;\n+import io.trino.matching.Property;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.ConnectorExpression;\n+import io.trino.spi.expression.Variable;\n+import io.trino.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class AggregateFunctionPatterns\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.AggregateFunctionPatterns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIwNTQxOA=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjU3MDQwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionRewriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0MzowOVrOKAH-fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0MzowOVrOKAH-fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIxOTMyNA==", "bodyText": "#8578", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671219324", "createdAt": "2021-07-16T12:43:09Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionRewriter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.trino.matching.Match;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.connector.ColumnHandle;\n+import io.trino.spi.connector.ConnectorSession;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public final class AggregateFunctionRewriter\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.AggregateFunctionRewriter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjU3MTAwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0MzoxNFrOKAH-zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0MzoxNFrOKAH-zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIxOTQwNg==", "bodyText": "#8578", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671219406", "createdAt": "2021-07-16T12:43:14Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/AggregateFunctionRule.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.connector.ColumnHandle;\n+import io.trino.spi.connector.ConnectorSession;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static java.util.Objects.requireNonNull;\n+\n+public interface AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.AggregateFunctionRule", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjU3ODYyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementAvg.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0NDo1MFrOKAIDyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNjo1Mjo1NVrOKM4XRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIyMDY4Mw==", "bodyText": "SUPPORTED_INPUT_TYPES doesn't look like specific to averages, so reuse here looks wrong.\ni suggest defining supported types directly here, in ImplementAvg\n(some for other cases)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671220683", "createdAt": "2021-07-16T12:44:50Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementAvg.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.DynamicTableBuilder.SUPPORTED_INPUT_TYPES;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.expressionType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static java.lang.String.format;\n+\n+public class ImplementAvg\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"avg\"))\n+                .with(singleInput().matching(\n+                        variable()\n+                                .with(expressionType().matching(SUPPORTED_INPUT_TYPES::contains))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2ODk3Mw==", "bodyText": "@elonazoulay bumping this up again", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683968973", "createdAt": "2021-08-06T06:01:01Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementAvg.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.DynamicTableBuilder.SUPPORTED_INPUT_TYPES;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.expressionType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static java.lang.String.format;\n+\n+public class ImplementAvg\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"avg\"))\n+                .with(singleInput().matching(\n+                        variable()\n+                                .with(expressionType().matching(SUPPORTED_INPUT_TYPES::contains))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIyMDY4Mw=="}, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU5NTAxMg==", "bodyText": "I moved SUPPORTED_INPUT_TYPES to ImplementAvg, I think that line is unchanged, but above it's declared private static, no longer imported.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684595012", "createdAt": "2021-08-07T06:52:55Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementAvg.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.DynamicTableBuilder.SUPPORTED_INPUT_TYPES;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.expressionType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static java.lang.String.format;\n+\n+public class ImplementAvg\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"avg\"))\n+                .with(singleInput().matching(\n+                        variable()\n+                                .with(expressionType().matching(SUPPORTED_INPUT_TYPES::contains))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIyMDY4Mw=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjU5MTEzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementCountAll.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0NzowOFrOKAILgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0NzowOFrOKAILgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIyMjY1Nw==", "bodyText": "the intention of \n  \n    \n      trino/plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/expression/ImplementCountAll.java\n    \n    \n         Line 61\n      in\n      d649dca\n    \n    \n    \n    \n\n        \n          \n           verify(aggregateFunction.getOutputType() == BIGINT); \n        \n    \n  \n\n is \"make sure this code gets updated, should return type of count(*) change to whatever else\"\nremove .with(outputType().equalTo(BIGINT)); from the pattern above, to achieve the same (otherwise this line would be redundant)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671222657", "createdAt": "2021-07-16T12:47:08Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementCountAll.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.inputs;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+\n+/**\n+ * Implements {@code count(*)}.\n+ */\n+public class ImplementCountAll\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.ImplementCountAll\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"count\"))\n+                .with(inputs().equalTo(List.of()))\n+                .with(outputType().equalTo(BIGINT));\n+    }\n+\n+    @Override\n+    public Optional<PinotColumnHandle> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        verify(aggregateFunction.getOutputType() == BIGINT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjU5NjMwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementCountAll.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0Nzo1OFrOKAIOpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0Nzo1OFrOKAIOpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIyMzQ2MA==", "bodyText": "inline outputColumnHandle\n(same in others)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671223460", "createdAt": "2021-07-16T12:47:58Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementCountAll.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.inputs;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+\n+/**\n+ * Implements {@code count(*)}.\n+ */\n+public class ImplementCountAll\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.ImplementCountAll\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"count\"))\n+                .with(inputs().equalTo(List.of()))\n+                .with(outputType().equalTo(BIGINT));\n+    }\n+\n+    @Override\n+    public Optional<PinotColumnHandle> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        verify(aggregateFunction.getOutputType() == BIGINT);\n+        PinotColumnHandle outputColumnHandle = new PinotColumnHandle(\"count(*)\", aggregateFunction.getOutputType(), false);\n+        return Optional.of(outputColumnHandle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI2NjYwNjEzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementMinMax.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0OTozOVrOKAIU6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNlQxMjo0OTozOVrOKAIU6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTIyNTA2NQ==", "bodyText": "SUPPORTED_INPUT_TYPES doesn't look specific to min or max (to comparisons).\ni would suggest defining supported data types directly here, in ImplementMinMax", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r671225065", "createdAt": "2021-07-16T12:49:39Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementMinMax.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.DynamicTableBuilder.SUPPORTED_INPUT_TYPES;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.expressionType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static java.lang.String.format;\n+\n+/**\n+ * Implements {@code min(x)}, {@code max(x)}.\n+ */\n+public class ImplementMinMax\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression.ImplementMinMax\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().matching(Set.of(\"min\", \"max\")::contains))\n+                .with(singleInput().matching(\n+                        variable()\n+                                .with(expressionType().matching(SUPPORTED_INPUT_TYPES::contains))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwMDM4MTM1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementCountDistinct.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNVQxOTowNzo0N1rOKE3UOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNjoxODowOVrOKM4KWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjE4OTI0Mw==", "bodyText": "What is this about?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r676189243", "createdAt": "2021-07-25T19:07:47Z", "author": {"login": "findepi"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementCountDistinct.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.PinotSessionProperties.isDistinctCountPushdownEnabled;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static java.lang.String.format;\n+\n+public class ImplementCountDistinct\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"count\"))\n+                .with(outputType().equalTo(BIGINT))\n+                .with(singleInput().matching(variable().capturedAs(INPUT)));\n+    }\n+\n+    @Override\n+    public Optional<PinotColumnHandle> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        if (!isDistinctCountPushdownEnabled(context.getSession())) {\n+            return Optional.empty();\n+        }\n+        Variable input = captures.get(INPUT);\n+        verify(aggregateFunction.getOutputType() == BIGINT);\n+        if (context.getExistingGroupingColumns().isEmpty() || !context.getExistingGroupingColumns().get().contains(input.getName())) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTM4MTIzOQ==", "bodyText": "This is to verify that the grouping columns in the table handle contain the column that is in the count distinct:", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r679381239", "createdAt": "2021-07-29T18:14:13Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementCountDistinct.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.PinotSessionProperties.isDistinctCountPushdownEnabled;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static java.lang.String.format;\n+\n+public class ImplementCountDistinct\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"count\"))\n+                .with(outputType().equalTo(BIGINT))\n+                .with(singleInput().matching(variable().capturedAs(INPUT)));\n+    }\n+\n+    @Override\n+    public Optional<PinotColumnHandle> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        if (!isDistinctCountPushdownEnabled(context.getSession())) {\n+            return Optional.empty();\n+        }\n+        Variable input = captures.get(INPUT);\n+        verify(aggregateFunction.getOutputType() == BIGINT);\n+        if (context.getExistingGroupingColumns().isEmpty() || !context.getExistingGroupingColumns().get().contains(input.getName())) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjE4OTI0Mw=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2OTg3MQ==", "bodyText": "@elonazoulay Wouldn't Trino ensure that? Otherwise the query would fail analysis?\nEDIT: I guess this is needed because of dynamic tables?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683969871", "createdAt": "2021-08-06T06:03:18Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementCountDistinct.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.PinotSessionProperties.isDistinctCountPushdownEnabled;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static java.lang.String.format;\n+\n+public class ImplementCountDistinct\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"count\"))\n+                .with(outputType().equalTo(BIGINT))\n+                .with(singleInput().matching(variable().capturedAs(INPUT)));\n+    }\n+\n+    @Override\n+    public Optional<PinotColumnHandle> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        if (!isDistinctCountPushdownEnabled(context.getSession())) {\n+            return Optional.empty();\n+        }\n+        Variable input = captures.get(INPUT);\n+        verify(aggregateFunction.getOutputType() == BIGINT);\n+        if (context.getExistingGroupingColumns().isEmpty() || !context.getExistingGroupingColumns().get().contains(input.getName())) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjE4OTI0Mw=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU5MTcwNA==", "bodyText": "Yes, if you do a passthrough query this is the only way to verify that the grouping columns contain the input column.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684591704", "createdAt": "2021-08-07T06:18:09Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementCountDistinct.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.PinotSessionProperties.isDistinctCountPushdownEnabled;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static java.lang.String.format;\n+\n+public class ImplementCountDistinct\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"count\"))\n+                .with(outputType().equalTo(BIGINT))\n+                .with(singleInput().matching(variable().capturedAs(INPUT)));\n+    }\n+\n+    @Override\n+    public Optional<PinotColumnHandle> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        if (!isDistinctCountPushdownEnabled(context.getSession())) {\n+            return Optional.empty();\n+        }\n+        Variable input = captures.get(INPUT);\n+        verify(aggregateFunction.getOutputType() == BIGINT);\n+        if (context.getExistingGroupingColumns().isEmpty() || !context.getExistingGroupingColumns().get().contains(input.getName())) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjE4OTI0Mw=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwMTMxNTc2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQwNjowNjozNFrOKE--ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQwNjowNjozNFrOKE--ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxNDcyNA==", "bodyText": "nit: distinctCountPushdownEnabled -> countDistinctPushdownEnabled (since that's what the optimizer calls it)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r676314724", "createdAt": "2021-07-26T06:06:34Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "diffHunk": "@@ -50,6 +51,9 @@\n     private int fetchRetryCount = 2;\n     private int nonAggregateLimitForBrokerQueries = 25_000;\n     private int maxRowsPerSplitForSegmentQueries = 50_000;\n+    private int maxRowsForBrokerQueries = 50_000;\n+    private boolean aggregationPushdownEnabled = true;\n+    private boolean distinctCountPushdownEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwMTMyMjczOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQwNjowODo1M1rOKE_CIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNjoyOTowOVrOKM4Ocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxNTY4Mg==", "bodyText": "Add validation to disallow setting this without also setting pinot.aggregation-pushdown.enabled.\nBtw why do we need this? If we don't pushdown COUNT(DISTINCT) then also we might end up with a full-scan? Or is that not true? i.e. why can't we have just pinot.aggregation-pushdown.enabled?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r676315682", "createdAt": "2021-07-26T06:08:53Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "diffHunk": "@@ -257,4 +261,41 @@ public PinotConfig setMaxRowsPerSplitForSegmentQueries(int maxRowsPerSplitForSeg\n         this.maxRowsPerSplitForSegmentQueries = maxRowsPerSplitForSegmentQueries;\n         return this;\n     }\n+\n+    public int getMaxRowsForBrokerQueries()\n+    {\n+        return maxRowsForBrokerQueries;\n+    }\n+\n+    @Config(\"pinot.max-rows-for-broker-queries\")\n+    public PinotConfig setMaxRowsForBrokerQueries(int maxRowsForBrokerQueries)\n+    {\n+        this.maxRowsForBrokerQueries = maxRowsForBrokerQueries;\n+        return this;\n+    }\n+\n+    public boolean isAggregationPushdownEnabled()\n+    {\n+        return aggregationPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.aggregation-pushdown.enabled\")\n+    public PinotConfig setAggregationPushdownEnabled(boolean aggregationPushdownEnabled)\n+    {\n+        this.aggregationPushdownEnabled = aggregationPushdownEnabled;\n+        return this;\n+    }\n+\n+    public boolean isDistinctCountPushdownEnabled()\n+    {\n+        return distinctCountPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.distinct-count-pushdown.enabled\")\n+    @ConfigDescription(\"Controls whether distinct count is pushed down to Pinot. Distinct count pushdown can cause Pinot to do a full scan. Aggregation pushdown must also be enabled in addition to this parameter otherwise no pushdowns will be enabled.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDI3NTgyNQ==", "bodyText": "If count-distinct-pushdown is enabled it may crash pinot servers due to full scan. If it is disabled and there are more trino workers then it could actually return faster since the workers will do the count and the results will stream from pinot.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r680275825", "createdAt": "2021-07-31T00:16:57Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "diffHunk": "@@ -257,4 +261,41 @@ public PinotConfig setMaxRowsPerSplitForSegmentQueries(int maxRowsPerSplitForSeg\n         this.maxRowsPerSplitForSegmentQueries = maxRowsPerSplitForSegmentQueries;\n         return this;\n     }\n+\n+    public int getMaxRowsForBrokerQueries()\n+    {\n+        return maxRowsForBrokerQueries;\n+    }\n+\n+    @Config(\"pinot.max-rows-for-broker-queries\")\n+    public PinotConfig setMaxRowsForBrokerQueries(int maxRowsForBrokerQueries)\n+    {\n+        this.maxRowsForBrokerQueries = maxRowsForBrokerQueries;\n+        return this;\n+    }\n+\n+    public boolean isAggregationPushdownEnabled()\n+    {\n+        return aggregationPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.aggregation-pushdown.enabled\")\n+    public PinotConfig setAggregationPushdownEnabled(boolean aggregationPushdownEnabled)\n+    {\n+        this.aggregationPushdownEnabled = aggregationPushdownEnabled;\n+        return this;\n+    }\n+\n+    public boolean isDistinctCountPushdownEnabled()\n+    {\n+        return distinctCountPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.distinct-count-pushdown.enabled\")\n+    @ConfigDescription(\"Controls whether distinct count is pushed down to Pinot. Distinct count pushdown can cause Pinot to do a full scan. Aggregation pushdown must also be enabled in addition to this parameter otherwise no pushdowns will be enabled.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxNTY4Mg=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2MDU0OQ==", "bodyText": "Can you add a @PostConstruct public void validate() to validate that this is not set without also setting pinot.aggregation-pushdown.enabled?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683960549", "createdAt": "2021-08-06T05:37:50Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "diffHunk": "@@ -257,4 +261,41 @@ public PinotConfig setMaxRowsPerSplitForSegmentQueries(int maxRowsPerSplitForSeg\n         this.maxRowsPerSplitForSegmentQueries = maxRowsPerSplitForSegmentQueries;\n         return this;\n     }\n+\n+    public int getMaxRowsForBrokerQueries()\n+    {\n+        return maxRowsForBrokerQueries;\n+    }\n+\n+    @Config(\"pinot.max-rows-for-broker-queries\")\n+    public PinotConfig setMaxRowsForBrokerQueries(int maxRowsForBrokerQueries)\n+    {\n+        this.maxRowsForBrokerQueries = maxRowsForBrokerQueries;\n+        return this;\n+    }\n+\n+    public boolean isAggregationPushdownEnabled()\n+    {\n+        return aggregationPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.aggregation-pushdown.enabled\")\n+    public PinotConfig setAggregationPushdownEnabled(boolean aggregationPushdownEnabled)\n+    {\n+        this.aggregationPushdownEnabled = aggregationPushdownEnabled;\n+        return this;\n+    }\n+\n+    public boolean isDistinctCountPushdownEnabled()\n+    {\n+        return distinctCountPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.distinct-count-pushdown.enabled\")\n+    @ConfigDescription(\"Controls whether distinct count is pushed down to Pinot. Distinct count pushdown can cause Pinot to do a full scan. Aggregation pushdown must also be enabled in addition to this parameter otherwise no pushdowns will be enabled.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxNTY4Mg=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU5Mjc1NQ==", "bodyText": "Oh nice, thanks!", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684592755", "createdAt": "2021-08-07T06:29:09Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotConfig.java", "diffHunk": "@@ -257,4 +261,41 @@ public PinotConfig setMaxRowsPerSplitForSegmentQueries(int maxRowsPerSplitForSeg\n         this.maxRowsPerSplitForSegmentQueries = maxRowsPerSplitForSegmentQueries;\n         return this;\n     }\n+\n+    public int getMaxRowsForBrokerQueries()\n+    {\n+        return maxRowsForBrokerQueries;\n+    }\n+\n+    @Config(\"pinot.max-rows-for-broker-queries\")\n+    public PinotConfig setMaxRowsForBrokerQueries(int maxRowsForBrokerQueries)\n+    {\n+        this.maxRowsForBrokerQueries = maxRowsForBrokerQueries;\n+        return this;\n+    }\n+\n+    public boolean isAggregationPushdownEnabled()\n+    {\n+        return aggregationPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.aggregation-pushdown.enabled\")\n+    public PinotConfig setAggregationPushdownEnabled(boolean aggregationPushdownEnabled)\n+    {\n+        this.aggregationPushdownEnabled = aggregationPushdownEnabled;\n+        return this;\n+    }\n+\n+    public boolean isDistinctCountPushdownEnabled()\n+    {\n+        return distinctCountPushdownEnabled;\n+    }\n+\n+    @Config(\"pinot.distinct-count-pushdown.enabled\")\n+    @ConfigDescription(\"Controls whether distinct count is pushed down to Pinot. Distinct count pushdown can cause Pinot to do a full scan. Aggregation pushdown must also be enabled in addition to this parameter otherwise no pushdowns will be enabled.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxNTY4Mg=="}, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwMTMzMjg0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotSessionProperties.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQwNjoxMjoxN1rOKE_H1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNjozOTowMlrOKM4SPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxNzE0MA==", "bodyText": "Add validation to ensure this cannot be set without setting pinot.aggregation-pushdown.enabled too.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r676317140", "createdAt": "2021-07-26T06:12:17Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotSessionProperties.java", "diffHunk": "@@ -108,6 +120,16 @@ public PinotSessionProperties(PinotConfig pinotConfig)\n                         \"Number of segments of the same host per split\",\n                         pinotConfig.getSegmentsPerSplit(),\n                         value -> checkArgument(value > 0, \"Number of segments per split must be more than zero\"),\n+                        false),\n+                booleanProperty(\n+                        AGGREGATION_PUSHDOWN_ENABLED,\n+                        \"Enable aggregation pushdown\",\n+                        pinotConfig.isAggregationPushdownEnabled(),\n+                        false),\n+                booleanProperty(\n+                        DISTINCT_COUNT_PUSHDOWN_ENABLED,\n+                        \"Enable distinct count pushdown\",\n+                        pinotConfig.isDistinctCountPushdownEnabled(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mjc5NTgyOQ==", "bodyText": "Without passing the session into the validator I do not see a way to do this. Instead I added the check for aggregation pushdown being enabled to isCountDistinctPushdownEnabled.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r682795829", "createdAt": "2021-08-04T16:56:27Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotSessionProperties.java", "diffHunk": "@@ -108,6 +120,16 @@ public PinotSessionProperties(PinotConfig pinotConfig)\n                         \"Number of segments of the same host per split\",\n                         pinotConfig.getSegmentsPerSplit(),\n                         value -> checkArgument(value > 0, \"Number of segments per split must be more than zero\"),\n+                        false),\n+                booleanProperty(\n+                        AGGREGATION_PUSHDOWN_ENABLED,\n+                        \"Enable aggregation pushdown\",\n+                        pinotConfig.isAggregationPushdownEnabled(),\n+                        false),\n+                booleanProperty(\n+                        DISTINCT_COUNT_PUSHDOWN_ENABLED,\n+                        \"Enable distinct count pushdown\",\n+                        pinotConfig.isDistinctCountPushdownEnabled(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxNzE0MA=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3NjQ3Mw==", "bodyText": "@martint Is there any to way validate session properties based on other session properties? The only examples I could find do it in the getter for the session property (\n  \n    \n      trino/plugin/trino-hive/src/main/java/io/trino/plugin/hive/HiveSessionProperties.java\n    \n    \n         Line 492\n      in\n      d27254d\n    \n    \n    \n    \n\n        \n          \n           public static boolean isOrcOptimizedWriterValidate(ConnectorSession session) \n        \n    \n  \n\n).", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683976473", "createdAt": "2021-08-06T06:19:25Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotSessionProperties.java", "diffHunk": "@@ -108,6 +120,16 @@ public PinotSessionProperties(PinotConfig pinotConfig)\n                         \"Number of segments of the same host per split\",\n                         pinotConfig.getSegmentsPerSplit(),\n                         value -> checkArgument(value > 0, \"Number of segments per split must be more than zero\"),\n+                        false),\n+                booleanProperty(\n+                        AGGREGATION_PUSHDOWN_ENABLED,\n+                        \"Enable aggregation pushdown\",\n+                        pinotConfig.isAggregationPushdownEnabled(),\n+                        false),\n+                booleanProperty(\n+                        DISTINCT_COUNT_PUSHDOWN_ENABLED,\n+                        \"Enable distinct count pushdown\",\n+                        pinotConfig.isDistinctCountPushdownEnabled(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxNzE0MA=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU5MzcyNw==", "bodyText": "Thanks! I added a verify as the PinotSessionProperties.isCountDistinctPushdownEnabled() method would never be called unless aggregation pushdown is enabled.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684593727", "createdAt": "2021-08-07T06:39:02Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotSessionProperties.java", "diffHunk": "@@ -108,6 +120,16 @@ public PinotSessionProperties(PinotConfig pinotConfig)\n                         \"Number of segments of the same host per split\",\n                         pinotConfig.getSegmentsPerSplit(),\n                         value -> checkArgument(value > 0, \"Number of segments per split must be more than zero\"),\n+                        false),\n+                booleanProperty(\n+                        AGGREGATION_PUSHDOWN_ENABLED,\n+                        \"Enable aggregation pushdown\",\n+                        pinotConfig.isAggregationPushdownEnabled(),\n+                        false),\n+                booleanProperty(\n+                        DISTINCT_COUNT_PUSHDOWN_ENABLED,\n+                        \"Enable distinct count pushdown\",\n+                        pinotConfig.isDistinctCountPushdownEnabled(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxNzE0MA=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwMTMzOTQ3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQwNjoxNDo0N1rOKE_LsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNTo1NDo0MlrOKMSAUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxODEyOQ==", "bodyText": "Maybe fall-through instead?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r676318129", "createdAt": "2021-07-26T06:14:47Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -93,33 +105,48 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         else {\n             filter = Optional.empty();\n         }\n-\n-        ImmutableList.Builder<AggregationExpression> aggregationExpressionBuilder = ImmutableList.builder();\n+        QueryContext queryContext = BrokerRequestToQueryContextConverter.convert(request);\n+        ImmutableList.Builder<PinotColumnHandle> aggregateColumnsBuilder = ImmutableList.builder();\n         if (request.getAggregationsInfo() != null) {\n-            for (AggregationInfo aggregationInfo : request.getAggregationsInfo()) {\n-                String baseColumnName = aggregationInfo.getAggregationParams().get(COLUMN_KEY);\n-                AggregationExpression aggregationExpression;\n-                if (baseColumnName.equals(WILDCARD)) {\n-                    aggregationExpression = new AggregationExpression(getOutputColumnName(aggregationInfo, baseColumnName),\n-                            baseColumnName,\n-                            aggregationInfo.getAggregationType());\n-                }\n-                else {\n-                    PinotColumnHandle columnHandle = (PinotColumnHandle) columnHandles.get(baseColumnName);\n-                    if (columnHandle == null) {\n-                        throw new ColumnNotFoundException(schemaTableName, aggregationInfo.getAggregationParams().get(COLUMN_KEY));\n-                    }\n-                    aggregationExpression = new AggregationExpression(\n-                            getOutputColumnName(aggregationInfo, columnHandle.getColumnName()),\n-                            columnHandle.getColumnName(),\n-                            aggregationInfo.getAggregationType());\n-                }\n-\n-                aggregationExpressionBuilder.add(aggregationExpression);\n+            for (AggregationFunction aggregationFunction : queryContext.getAggregationFunctions()) {\n+                aggregationFunction.getResultColumnName();\n+                aggregationFunction.getType().getName();\n+                aggregateColumnsBuilder.add(new PinotColumnHandle(\n+                        aggregationFunction.getResultColumnName(),\n+                        toTrinoType(aggregationFunction.getFinalResultColumnType())));\n             }\n         }\n \n-        return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+        return new DynamicTable(pinotTableName, suffix, selectionColumns, filter, groupByColumns, aggregateColumnsBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+    }\n+\n+    private static Type toTrinoType(DataSchema.ColumnDataType columnDataType)\n+    {\n+        switch (columnDataType) {\n+            case INT:\n+                return INTEGER;\n+            case LONG:\n+                return BIGINT;\n+            case FLOAT:\n+                return REAL;\n+            case DOUBLE:\n+                return DOUBLE;\n+            case STRING:\n+                return VARCHAR;\n+            case BYTES:\n+                return VARBINARY;\n+            case INT_ARRAY:\n+                return new ArrayType(INTEGER);\n+            case LONG_ARRAY:\n+                return new ArrayType(BIGINT);\n+            case DOUBLE_ARRAY:\n+                return new ArrayType(DOUBLE);\n+            case STRING_ARRAY:\n+                return new ArrayType(VARCHAR);\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjkyNjE4Mg==", "bodyText": "I just removed the default block, left conversation unresolved so you can take a look.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r682926182", "createdAt": "2021-08-04T20:12:53Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -93,33 +105,48 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         else {\n             filter = Optional.empty();\n         }\n-\n-        ImmutableList.Builder<AggregationExpression> aggregationExpressionBuilder = ImmutableList.builder();\n+        QueryContext queryContext = BrokerRequestToQueryContextConverter.convert(request);\n+        ImmutableList.Builder<PinotColumnHandle> aggregateColumnsBuilder = ImmutableList.builder();\n         if (request.getAggregationsInfo() != null) {\n-            for (AggregationInfo aggregationInfo : request.getAggregationsInfo()) {\n-                String baseColumnName = aggregationInfo.getAggregationParams().get(COLUMN_KEY);\n-                AggregationExpression aggregationExpression;\n-                if (baseColumnName.equals(WILDCARD)) {\n-                    aggregationExpression = new AggregationExpression(getOutputColumnName(aggregationInfo, baseColumnName),\n-                            baseColumnName,\n-                            aggregationInfo.getAggregationType());\n-                }\n-                else {\n-                    PinotColumnHandle columnHandle = (PinotColumnHandle) columnHandles.get(baseColumnName);\n-                    if (columnHandle == null) {\n-                        throw new ColumnNotFoundException(schemaTableName, aggregationInfo.getAggregationParams().get(COLUMN_KEY));\n-                    }\n-                    aggregationExpression = new AggregationExpression(\n-                            getOutputColumnName(aggregationInfo, columnHandle.getColumnName()),\n-                            columnHandle.getColumnName(),\n-                            aggregationInfo.getAggregationType());\n-                }\n-\n-                aggregationExpressionBuilder.add(aggregationExpression);\n+            for (AggregationFunction aggregationFunction : queryContext.getAggregationFunctions()) {\n+                aggregationFunction.getResultColumnName();\n+                aggregationFunction.getType().getName();\n+                aggregateColumnsBuilder.add(new PinotColumnHandle(\n+                        aggregationFunction.getResultColumnName(),\n+                        toTrinoType(aggregationFunction.getFinalResultColumnType())));\n             }\n         }\n \n-        return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+        return new DynamicTable(pinotTableName, suffix, selectionColumns, filter, groupByColumns, aggregateColumnsBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+    }\n+\n+    private static Type toTrinoType(DataSchema.ColumnDataType columnDataType)\n+    {\n+        switch (columnDataType) {\n+            case INT:\n+                return INTEGER;\n+            case LONG:\n+                return BIGINT;\n+            case FLOAT:\n+                return REAL;\n+            case DOUBLE:\n+                return DOUBLE;\n+            case STRING:\n+                return VARCHAR;\n+            case BYTES:\n+                return VARBINARY;\n+            case INT_ARRAY:\n+                return new ArrayType(INTEGER);\n+            case LONG_ARRAY:\n+                return new ArrayType(BIGINT);\n+            case DOUBLE_ARRAY:\n+                return new ArrayType(DOUBLE);\n+            case STRING_ARRAY:\n+                return new ArrayType(VARCHAR);\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxODEyOQ=="}, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzc4MzA5MA==", "bodyText": "Got an errorprone warning, will try a few other things out and update shortly.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683783090", "createdAt": "2021-08-05T20:58:39Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -93,33 +105,48 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         else {\n             filter = Optional.empty();\n         }\n-\n-        ImmutableList.Builder<AggregationExpression> aggregationExpressionBuilder = ImmutableList.builder();\n+        QueryContext queryContext = BrokerRequestToQueryContextConverter.convert(request);\n+        ImmutableList.Builder<PinotColumnHandle> aggregateColumnsBuilder = ImmutableList.builder();\n         if (request.getAggregationsInfo() != null) {\n-            for (AggregationInfo aggregationInfo : request.getAggregationsInfo()) {\n-                String baseColumnName = aggregationInfo.getAggregationParams().get(COLUMN_KEY);\n-                AggregationExpression aggregationExpression;\n-                if (baseColumnName.equals(WILDCARD)) {\n-                    aggregationExpression = new AggregationExpression(getOutputColumnName(aggregationInfo, baseColumnName),\n-                            baseColumnName,\n-                            aggregationInfo.getAggregationType());\n-                }\n-                else {\n-                    PinotColumnHandle columnHandle = (PinotColumnHandle) columnHandles.get(baseColumnName);\n-                    if (columnHandle == null) {\n-                        throw new ColumnNotFoundException(schemaTableName, aggregationInfo.getAggregationParams().get(COLUMN_KEY));\n-                    }\n-                    aggregationExpression = new AggregationExpression(\n-                            getOutputColumnName(aggregationInfo, columnHandle.getColumnName()),\n-                            columnHandle.getColumnName(),\n-                            aggregationInfo.getAggregationType());\n-                }\n-\n-                aggregationExpressionBuilder.add(aggregationExpression);\n+            for (AggregationFunction aggregationFunction : queryContext.getAggregationFunctions()) {\n+                aggregationFunction.getResultColumnName();\n+                aggregationFunction.getType().getName();\n+                aggregateColumnsBuilder.add(new PinotColumnHandle(\n+                        aggregationFunction.getResultColumnName(),\n+                        toTrinoType(aggregationFunction.getFinalResultColumnType())));\n             }\n         }\n \n-        return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+        return new DynamicTable(pinotTableName, suffix, selectionColumns, filter, groupByColumns, aggregateColumnsBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+    }\n+\n+    private static Type toTrinoType(DataSchema.ColumnDataType columnDataType)\n+    {\n+        switch (columnDataType) {\n+            case INT:\n+                return INTEGER;\n+            case LONG:\n+                return BIGINT;\n+            case FLOAT:\n+                return REAL;\n+            case DOUBLE:\n+                return DOUBLE;\n+            case STRING:\n+                return VARCHAR;\n+            case BYTES:\n+                return VARBINARY;\n+            case INT_ARRAY:\n+                return new ArrayType(INTEGER);\n+            case LONG_ARRAY:\n+                return new ArrayType(BIGINT);\n+            case DOUBLE_ARRAY:\n+                return new ArrayType(DOUBLE);\n+            case STRING_ARRAY:\n+                return new ArrayType(VARCHAR);\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxODEyOQ=="}, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2NjU0Nw==", "bodyText": "ErrorProne might complain if you don't have a case for each of the possible enumerations.\nIf we already cover all values of the enum then removing default and letting fall-through would've worked but it seems we're missing a case for OBJECT.\nLet's keep as is (otherwise you'd need to add a case for OBJECT and throw from there instead of outside the switch).", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683966547", "createdAt": "2021-08-06T05:54:42Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/DynamicTableBuilder.java", "diffHunk": "@@ -93,33 +105,48 @@ public static DynamicTable buildFromPql(PinotMetadata pinotMetadata, SchemaTable\n         else {\n             filter = Optional.empty();\n         }\n-\n-        ImmutableList.Builder<AggregationExpression> aggregationExpressionBuilder = ImmutableList.builder();\n+        QueryContext queryContext = BrokerRequestToQueryContextConverter.convert(request);\n+        ImmutableList.Builder<PinotColumnHandle> aggregateColumnsBuilder = ImmutableList.builder();\n         if (request.getAggregationsInfo() != null) {\n-            for (AggregationInfo aggregationInfo : request.getAggregationsInfo()) {\n-                String baseColumnName = aggregationInfo.getAggregationParams().get(COLUMN_KEY);\n-                AggregationExpression aggregationExpression;\n-                if (baseColumnName.equals(WILDCARD)) {\n-                    aggregationExpression = new AggregationExpression(getOutputColumnName(aggregationInfo, baseColumnName),\n-                            baseColumnName,\n-                            aggregationInfo.getAggregationType());\n-                }\n-                else {\n-                    PinotColumnHandle columnHandle = (PinotColumnHandle) columnHandles.get(baseColumnName);\n-                    if (columnHandle == null) {\n-                        throw new ColumnNotFoundException(schemaTableName, aggregationInfo.getAggregationParams().get(COLUMN_KEY));\n-                    }\n-                    aggregationExpression = new AggregationExpression(\n-                            getOutputColumnName(aggregationInfo, columnHandle.getColumnName()),\n-                            columnHandle.getColumnName(),\n-                            aggregationInfo.getAggregationType());\n-                }\n-\n-                aggregationExpressionBuilder.add(aggregationExpression);\n+            for (AggregationFunction aggregationFunction : queryContext.getAggregationFunctions()) {\n+                aggregationFunction.getResultColumnName();\n+                aggregationFunction.getType().getName();\n+                aggregateColumnsBuilder.add(new PinotColumnHandle(\n+                        aggregationFunction.getResultColumnName(),\n+                        toTrinoType(aggregationFunction.getFinalResultColumnType())));\n             }\n         }\n \n-        return new DynamicTable(pinotTableName, suffix, selectionColumns, groupByColumns, filter, aggregationExpressionBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+        return new DynamicTable(pinotTableName, suffix, selectionColumns, filter, groupByColumns, aggregateColumnsBuilder.build(), orderBy, getTopNOrLimit(request), getOffset(request), query);\n+    }\n+\n+    private static Type toTrinoType(DataSchema.ColumnDataType columnDataType)\n+    {\n+        switch (columnDataType) {\n+            case INT:\n+                return INTEGER;\n+            case LONG:\n+                return BIGINT;\n+            case FLOAT:\n+                return REAL;\n+            case DOUBLE:\n+                return DOUBLE;\n+            case STRING:\n+                return VARCHAR;\n+            case BYTES:\n+                return VARBINARY;\n+            case INT_ARRAY:\n+                return new ArrayType(INTEGER);\n+            case LONG_ARRAY:\n+                return new ArrayType(BIGINT);\n+            case DOUBLE_ARRAY:\n+                return new ArrayType(DOUBLE);\n+            case STRING_ARRAY:\n+                return new ArrayType(VARCHAR);\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxODEyOQ=="}, "originalCommit": null, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwMTM1MTE1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementApproxDistinct.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQwNjoxODo0NFrOKE_SSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNTo1OToxNFrOKMSHEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxOTgxOA==", "bodyText": "Remove to make the verify in rewrite actually work. This pattern will not match any query shapes that would fail the verify.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r676319818", "createdAt": "2021-07-26T06:18:44Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementApproxDistinct.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static java.lang.String.format;\n+\n+public class ImplementApproxDistinct\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"approx_distinct\"))\n+                .with(outputType().equalTo(BIGINT))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mjc4MTk3OA==", "bodyText": "I opted to remove the verify, since this only works when the output type is BIGINT. lmk what you think.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r682781978", "createdAt": "2021-08-04T16:37:48Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementApproxDistinct.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static java.lang.String.format;\n+\n+public class ImplementApproxDistinct\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"approx_distinct\"))\n+                .with(outputType().equalTo(BIGINT))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxOTgxOA=="}, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2ODI3NQ==", "bodyText": "Makes sense.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683968275", "createdAt": "2021-08-06T05:59:14Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementApproxDistinct.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static java.lang.String.format;\n+\n+public class ImplementApproxDistinct\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"approx_distinct\"))\n+                .with(outputType().equalTo(BIGINT))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMxOTgxOA=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwMTM2NTU0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQwNjoyMzoyNFrOKE_aMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNFQyMDoxMzo1OFrOKLSjGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMyMTg0MQ==", "bodyText": "Take a look at BaseJdbcConnectorTest#testAggregationPushdown (and similarly named methods) for some other useful tests.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r676321841", "createdAt": "2021-07-26T06:23:24Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +860,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjkyNjc5OA==", "bodyText": "Sounds good! I will use the base connector tests as soon as pinot supports varbinary and boolean types, which will be in the next release.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r682926798", "createdAt": "2021-08-04T20:13:51Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +860,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMyMTg0MQ=="}, "originalCommit": null, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjkyNjg3Mg==", "bodyText": "Sounds good! I will use the base connector tests as soon as pinot supports varbinary and boolean types, which will be in the next release.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r682926872", "createdAt": "2021-08-04T20:13:58Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +860,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjMyMTg0MQ=="}, "originalCommit": null, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjIwNTYyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNTo0MjoxM1rOKMRvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQyMzoxODozNVrOKM1Tgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2MjEyOA==", "bodyText": "Why the +1? Deserves a comment in my opinion since it's not obvious (to me at least).", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683962128", "createdAt": "2021-08-06T05:42:13Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +314,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments, tableHandle);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()\n+                .map(PinotColumnHandle.class::cast)\n+                .map(PinotColumnHandle::getColumnName)\n+                .collect(toImmutableList());\n+        OptionalLong limitForDynamicTable = OptionalLong.empty();\n+        // Ensure that pinot default limit of 10 rows is not used\n+        if (tableHandle.getLimit().isEmpty() && !groupingColumns.isEmpty()) {\n+            limitForDynamicTable = OptionalLong.of(maxRowsPerBrokerQuery + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU0NDg5OA==", "bodyText": "Sure will add one. Just for context: this is similar to the limit for segment queries which was done like the elastic search connector, @martint pointed me to that code: if the limit is + 1 then the connector will know when too many rows are returned and throw an exception.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684544898", "createdAt": "2021-08-06T23:18:35Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +314,73 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments, tableHandle);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()\n+                .map(PinotColumnHandle.class::cast)\n+                .map(PinotColumnHandle::getColumnName)\n+                .collect(toImmutableList());\n+        OptionalLong limitForDynamicTable = OptionalLong.empty();\n+        // Ensure that pinot default limit of 10 rows is not used\n+        if (tableHandle.getLimit().isEmpty() && !groupingColumns.isEmpty()) {\n+            limitForDynamicTable = OptionalLong.of(maxRowsPerBrokerQuery + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2MjEyOA=="}, "originalCommit": null, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjIyMjAwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNTo0ODo1MFrOKMR4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQyMjowODozNFrOKM0LGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2NDQ5NQ==", "bodyText": "cc: @martint This looks correct to me (I looked at most aggregation functions) but I'd appreciate your view if there are any other functions that behave like count?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683964495", "createdAt": "2021-08-06T05:48:50Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "diffHunk": "@@ -462,24 +462,39 @@ private BrokerResponseNative submitBrokerQueryJson(ConnectorSession session, Pin\n     public Iterator<BrokerResultRow> createResultIterator(ConnectorSession session, PinotQuery query, List<PinotColumnHandle> columnHandles)\n     {\n         BrokerResponseNative response = submitBrokerQueryJson(session, query);\n-        return fromResultTable(response.getResultTable(), columnHandles);\n+        return fromResultTable(response, columnHandles, query.getGroupByClauses());\n     }\n \n     @VisibleForTesting\n-    public static ResultsIterator fromResultTable(ResultTable resultTable, List<PinotColumnHandle> columnHandles)\n+    public static ResultsIterator fromResultTable(BrokerResponseNative brokerResponse, List<PinotColumnHandle> columnHandles, int groupByClauses)\n     {\n-        requireNonNull(resultTable, \"resultTable is null\");\n+        requireNonNull(brokerResponse, \"brokerResponse is null\");\n         requireNonNull(columnHandles, \"columnHandles is null\");\n+        ResultTable resultTable = brokerResponse.getResultTable();\n         String[] columnNames = resultTable.getDataSchema().getColumnNames();\n         Map<String, Integer> columnIndices = IntStream.range(0, columnNames.length)\n                 .boxed()\n                 // Pinot lower cases column names which use aggregate functions, ex. min(my_Col) becomes min(my_col)\n                 .collect(toImmutableMap(i -> columnNames[i].toLowerCase(ENGLISH), identity()));\n         int[] indices = new int[columnNames.length];\n+        int[] inverseIndices = new int[columnNames.length];\n         for (int i = 0; i < columnHandles.size(); i++) {\n             indices[i] = columnIndices.get(columnHandles.get(i).getColumnName().toLowerCase(ENGLISH));\n+            inverseIndices[indices[i]] = i;\n         }\n-        return new ResultsIterator(resultTable, indices);\n+        List<Object[]> rows = resultTable.getRows();\n+        // If returning from a global aggregation (no grouping columns) over an empty table, NULL-out all aggregation function results except for `count()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDUyNjM2Mw==", "bodyText": "No, count is the only function defined in the SQL spec that has that behavior.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684526363", "createdAt": "2021-08-06T22:08:34Z", "author": {"login": "martint"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/client/PinotClient.java", "diffHunk": "@@ -462,24 +462,39 @@ private BrokerResponseNative submitBrokerQueryJson(ConnectorSession session, Pin\n     public Iterator<BrokerResultRow> createResultIterator(ConnectorSession session, PinotQuery query, List<PinotColumnHandle> columnHandles)\n     {\n         BrokerResponseNative response = submitBrokerQueryJson(session, query);\n-        return fromResultTable(response.getResultTable(), columnHandles);\n+        return fromResultTable(response, columnHandles, query.getGroupByClauses());\n     }\n \n     @VisibleForTesting\n-    public static ResultsIterator fromResultTable(ResultTable resultTable, List<PinotColumnHandle> columnHandles)\n+    public static ResultsIterator fromResultTable(BrokerResponseNative brokerResponse, List<PinotColumnHandle> columnHandles, int groupByClauses)\n     {\n-        requireNonNull(resultTable, \"resultTable is null\");\n+        requireNonNull(brokerResponse, \"brokerResponse is null\");\n         requireNonNull(columnHandles, \"columnHandles is null\");\n+        ResultTable resultTable = brokerResponse.getResultTable();\n         String[] columnNames = resultTable.getDataSchema().getColumnNames();\n         Map<String, Integer> columnIndices = IntStream.range(0, columnNames.length)\n                 .boxed()\n                 // Pinot lower cases column names which use aggregate functions, ex. min(my_Col) becomes min(my_col)\n                 .collect(toImmutableMap(i -> columnNames[i].toLowerCase(ENGLISH), identity()));\n         int[] indices = new int[columnNames.length];\n+        int[] inverseIndices = new int[columnNames.length];\n         for (int i = 0; i < columnHandles.size(); i++) {\n             indices[i] = columnIndices.get(columnHandles.get(i).getColumnName().toLowerCase(ENGLISH));\n+            inverseIndices[indices[i]] = i;\n         }\n-        return new ResultsIterator(resultTable, indices);\n+        List<Object[]> rows = resultTable.getRows();\n+        // If returning from a global aggregation (no grouping columns) over an empty table, NULL-out all aggregation function results except for `count()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2NDQ5NQ=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjI0ODU0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementApproxDistinct.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNTo1OTo0MVrOKMSHsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQyMzoxOToxMVrOKM1UBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2ODQzMg==", "bodyText": "I think you forgot to remove this (or maybe push the commit?)", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683968432", "createdAt": "2021-08-06T05:59:41Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementApproxDistinct.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static java.lang.String.format;\n+\n+public class ImplementApproxDistinct\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"approx_distinct\"))\n+                .with(outputType().equalTo(BIGINT))\n+                .with(singleInput().matching(variable().capturedAs(INPUT)));\n+    }\n+\n+    @Override\n+    public Optional<PinotColumnHandle> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        Variable input = captures.get(INPUT);\n+        verify(aggregateFunction.getOutputType() == BIGINT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU0NTAzMA==", "bodyText": "Thanks:) Will do.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684545030", "createdAt": "2021-08-06T23:19:11Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementApproxDistinct.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.outputType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static java.lang.String.format;\n+\n+public class ImplementApproxDistinct\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"approx_distinct\"))\n+                .with(outputType().equalTo(BIGINT))\n+                .with(singleInput().matching(variable().capturedAs(INPUT)));\n+    }\n+\n+    @Override\n+    public Optional<PinotColumnHandle> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        Variable input = captures.get(INPUT);\n+        verify(aggregateFunction.getOutputType() == BIGINT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2ODQzMg=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjI1MDkzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementAvg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjowMDozM1rOKMSJDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjowMjoxNFrOKMSLrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2ODc4MA==", "bodyText": "Remove the comment since it's normal for each datasource to have their own aggregation function semantics and hence the rewrite rules need to be different too.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683968780", "createdAt": "2021-08-06T06:00:33Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementAvg.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+import io.trino.spi.type.Type;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.expressionType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static io.trino.spi.type.DoubleType.DOUBLE;\n+import static io.trino.spi.type.IntegerType.INTEGER;\n+import static io.trino.spi.type.RealType.REAL;\n+import static java.lang.String.format;\n+\n+public class ImplementAvg\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2OTQ1Mw==", "bodyText": "Same for other rewrites too IMO. (But yeah, I would like to use the changes in #8578 if possible).", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683969453", "createdAt": "2021-08-06T06:02:14Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/query/expression/ImplementAvg.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.pinot.query.expression;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.trino.matching.Capture;\n+import io.trino.matching.Captures;\n+import io.trino.matching.Pattern;\n+import io.trino.plugin.pinot.PinotColumnHandle;\n+import io.trino.spi.connector.AggregateFunction;\n+import io.trino.spi.expression.Variable;\n+import io.trino.spi.type.Type;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.trino.matching.Capture.newCapture;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.expressionType;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.functionName;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.singleInput;\n+import static io.trino.plugin.pinot.query.expression.AggregateFunctionPatterns.variable;\n+import static io.trino.spi.type.BigintType.BIGINT;\n+import static io.trino.spi.type.DoubleType.DOUBLE;\n+import static io.trino.spi.type.IntegerType.INTEGER;\n+import static io.trino.spi.type.RealType.REAL;\n+import static java.lang.String.format;\n+\n+public class ImplementAvg\n+        implements AggregateFunctionRule\n+{\n+    // Extracted from io.trino.plugin.jdbc.expression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk2ODc4MA=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjI3MDY5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjowNzo1M1rOKMSU4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNjo0NDo0N1rOKM4Ueg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MTgxMA==", "bodyText": "Can we add validation on our end to disallow such queries? Or is this not easy to do due to dynamic tables?\nOverflows can turn into unsigned values again if the value is sufficiently large (which is easy to do with typos).", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683971810", "createdAt": "2021-08-06T06:07:53Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -578,12 +603,52 @@ public void testBrokerQueryWithTooManyRowsForSegmentQuery()\n                 tooManyRowsTableValues);\n     }\n \n+    @Test\n+    public void testMaxLimitForPassthroughQueries()\n+            throws InterruptedException\n+    {\n+        assertQueryFails(\"SELECT string_col, updated_at_seconds\" +\n+                        \"  FROM  \\\"SELECT updated_at_seconds, string_col FROM \" + TOO_MANY_BROKER_ROWS_TABLE +\n+                        \"  LIMIT \" + (MAX_ROWS_PER_SPLIT_FOR_BROKER_QUERIES + 1) + \"\\\"\",\n+                \"Broker query returned '13' rows, maximum allowed is '12' rows. with query \\\"select updated_at_seconds, string_col from too_many_broker_rows limit 13\\\"\");\n+\n+        // Pinot issue preventing Integer.MAX_VALUE from being a limit: https://github.com/apache/incubator-pinot/issues/7110\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + Integer.MAX_VALUE + \"\\\"\",\n+                \"Unexpected response status: 500 for request \\\\{\\\"sql\\\" : \\\"select string_col, long_col from alltypes limit 2147483647\\\" \\\\} to url http://localhost:\\\\d+/query/sql, with headers \\\\{Accept=\\\\[application/json\\\\], Content-Type=\\\\[application/json\\\\]\\\\}, full response null\");\n+\n+        // Pinot broker requests do not handle limits greater than Integer.MAX_VALUE\n+        // Note that -2147483648 is due to an integer overflow in Pinot: https://github.com/apache/pinot/issues/7242", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU5NDI5OA==", "bodyText": "There is no easy way: the pinot request compiler will throw this error for dynamic tables when it parses the passthrough query.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684594298", "createdAt": "2021-08-07T06:44:47Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -578,12 +603,52 @@ public void testBrokerQueryWithTooManyRowsForSegmentQuery()\n                 tooManyRowsTableValues);\n     }\n \n+    @Test\n+    public void testMaxLimitForPassthroughQueries()\n+            throws InterruptedException\n+    {\n+        assertQueryFails(\"SELECT string_col, updated_at_seconds\" +\n+                        \"  FROM  \\\"SELECT updated_at_seconds, string_col FROM \" + TOO_MANY_BROKER_ROWS_TABLE +\n+                        \"  LIMIT \" + (MAX_ROWS_PER_SPLIT_FOR_BROKER_QUERIES + 1) + \"\\\"\",\n+                \"Broker query returned '13' rows, maximum allowed is '12' rows. with query \\\"select updated_at_seconds, string_col from too_many_broker_rows limit 13\\\"\");\n+\n+        // Pinot issue preventing Integer.MAX_VALUE from being a limit: https://github.com/apache/incubator-pinot/issues/7110\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + Integer.MAX_VALUE + \"\\\"\",\n+                \"Unexpected response status: 500 for request \\\\{\\\"sql\\\" : \\\"select string_col, long_col from alltypes limit 2147483647\\\" \\\\} to url http://localhost:\\\\d+/query/sql, with headers \\\\{Accept=\\\\[application/json\\\\], Content-Type=\\\\[application/json\\\\]\\\\}, full response null\");\n+\n+        // Pinot broker requests do not handle limits greater than Integer.MAX_VALUE\n+        // Note that -2147483648 is due to an integer overflow in Pinot: https://github.com/apache/pinot/issues/7242", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MTgxMA=="}, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjI3NDE5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjowODo1NlrOKMSWzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNjoxNTozM1rOKM4JhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MjMwMQ==", "bodyText": "This behaviour might be very surprising for people looking at this from the Trino side. Not sure if we can do anything about this though?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683972301", "createdAt": "2021-08-06T06:08:56Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -578,12 +603,52 @@ public void testBrokerQueryWithTooManyRowsForSegmentQuery()\n                 tooManyRowsTableValues);\n     }\n \n+    @Test\n+    public void testMaxLimitForPassthroughQueries()\n+            throws InterruptedException\n+    {\n+        assertQueryFails(\"SELECT string_col, updated_at_seconds\" +\n+                        \"  FROM  \\\"SELECT updated_at_seconds, string_col FROM \" + TOO_MANY_BROKER_ROWS_TABLE +\n+                        \"  LIMIT \" + (MAX_ROWS_PER_SPLIT_FOR_BROKER_QUERIES + 1) + \"\\\"\",\n+                \"Broker query returned '13' rows, maximum allowed is '12' rows. with query \\\"select updated_at_seconds, string_col from too_many_broker_rows limit 13\\\"\");\n+\n+        // Pinot issue preventing Integer.MAX_VALUE from being a limit: https://github.com/apache/incubator-pinot/issues/7110\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + Integer.MAX_VALUE + \"\\\"\",\n+                \"Unexpected response status: 500 for request \\\\{\\\"sql\\\" : \\\"select string_col, long_col from alltypes limit 2147483647\\\" \\\\} to url http://localhost:\\\\d+/query/sql, with headers \\\\{Accept=\\\\[application/json\\\\], Content-Type=\\\\[application/json\\\\]\\\\}, full response null\");\n+\n+        // Pinot broker requests do not handle limits greater than Integer.MAX_VALUE\n+        // Note that -2147483648 is due to an integer overflow in Pinot: https://github.com/apache/pinot/issues/7242\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + ((long) Integer.MAX_VALUE + 1) + \"\\\"\",\n+                \"Query select string_col, long_col from alltypes limit -2147483648 encountered exception org.apache.pinot.common.response.broker.QueryProcessingException@\\\\w+ with query \\\"select string_col, long_col from alltypes limit -2147483648\\\"\");\n+\n+        String tooManyBrokerRowsTableValues = \"VALUES ('string_0', '1620604800'),\" +\n+                \"  ('string_1', '1620604801'),\" +\n+                \"  ('string_2', '1620604802'),\" +\n+                \"  ('string_3', '1620604803'),\" +\n+                \"  ('string_4', '1620604804'),\" +\n+                \"  ('string_5', '1620604805'),\" +\n+                \"  ('string_6', '1620604806'),\" +\n+                \"  ('string_7', '1620604807'),\" +\n+                \"  ('string_8', '1620604808'),\" +\n+                \"  ('string_9', '1620604809'),\" +\n+                \"  ('string_10', '1620604810'),\" +\n+                \"  ('string_11', '1620604811')\";\n+\n+        // Explicit limit is necessary otherwise pinot returns 10 rows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU0NTk1NA==", "bodyText": "Yep, I think it was done in pinot to make data exploration easier, but it was not obvious until I actually ran tests and found that out.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684545954", "createdAt": "2021-08-06T23:22:39Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -578,12 +603,52 @@ public void testBrokerQueryWithTooManyRowsForSegmentQuery()\n                 tooManyRowsTableValues);\n     }\n \n+    @Test\n+    public void testMaxLimitForPassthroughQueries()\n+            throws InterruptedException\n+    {\n+        assertQueryFails(\"SELECT string_col, updated_at_seconds\" +\n+                        \"  FROM  \\\"SELECT updated_at_seconds, string_col FROM \" + TOO_MANY_BROKER_ROWS_TABLE +\n+                        \"  LIMIT \" + (MAX_ROWS_PER_SPLIT_FOR_BROKER_QUERIES + 1) + \"\\\"\",\n+                \"Broker query returned '13' rows, maximum allowed is '12' rows. with query \\\"select updated_at_seconds, string_col from too_many_broker_rows limit 13\\\"\");\n+\n+        // Pinot issue preventing Integer.MAX_VALUE from being a limit: https://github.com/apache/incubator-pinot/issues/7110\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + Integer.MAX_VALUE + \"\\\"\",\n+                \"Unexpected response status: 500 for request \\\\{\\\"sql\\\" : \\\"select string_col, long_col from alltypes limit 2147483647\\\" \\\\} to url http://localhost:\\\\d+/query/sql, with headers \\\\{Accept=\\\\[application/json\\\\], Content-Type=\\\\[application/json\\\\]\\\\}, full response null\");\n+\n+        // Pinot broker requests do not handle limits greater than Integer.MAX_VALUE\n+        // Note that -2147483648 is due to an integer overflow in Pinot: https://github.com/apache/pinot/issues/7242\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + ((long) Integer.MAX_VALUE + 1) + \"\\\"\",\n+                \"Query select string_col, long_col from alltypes limit -2147483648 encountered exception org.apache.pinot.common.response.broker.QueryProcessingException@\\\\w+ with query \\\"select string_col, long_col from alltypes limit -2147483648\\\"\");\n+\n+        String tooManyBrokerRowsTableValues = \"VALUES ('string_0', '1620604800'),\" +\n+                \"  ('string_1', '1620604801'),\" +\n+                \"  ('string_2', '1620604802'),\" +\n+                \"  ('string_3', '1620604803'),\" +\n+                \"  ('string_4', '1620604804'),\" +\n+                \"  ('string_5', '1620604805'),\" +\n+                \"  ('string_6', '1620604806'),\" +\n+                \"  ('string_7', '1620604807'),\" +\n+                \"  ('string_8', '1620604808'),\" +\n+                \"  ('string_9', '1620604809'),\" +\n+                \"  ('string_10', '1620604810'),\" +\n+                \"  ('string_11', '1620604811')\";\n+\n+        // Explicit limit is necessary otherwise pinot returns 10 rows.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MjMwMQ=="}, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU5MTQ5Mg==", "bodyText": "The broker limit helps with this: if no limit is supplied then the default broker limit is applied.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684591492", "createdAt": "2021-08-07T06:15:33Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -578,12 +603,52 @@ public void testBrokerQueryWithTooManyRowsForSegmentQuery()\n                 tooManyRowsTableValues);\n     }\n \n+    @Test\n+    public void testMaxLimitForPassthroughQueries()\n+            throws InterruptedException\n+    {\n+        assertQueryFails(\"SELECT string_col, updated_at_seconds\" +\n+                        \"  FROM  \\\"SELECT updated_at_seconds, string_col FROM \" + TOO_MANY_BROKER_ROWS_TABLE +\n+                        \"  LIMIT \" + (MAX_ROWS_PER_SPLIT_FOR_BROKER_QUERIES + 1) + \"\\\"\",\n+                \"Broker query returned '13' rows, maximum allowed is '12' rows. with query \\\"select updated_at_seconds, string_col from too_many_broker_rows limit 13\\\"\");\n+\n+        // Pinot issue preventing Integer.MAX_VALUE from being a limit: https://github.com/apache/incubator-pinot/issues/7110\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + Integer.MAX_VALUE + \"\\\"\",\n+                \"Unexpected response status: 500 for request \\\\{\\\"sql\\\" : \\\"select string_col, long_col from alltypes limit 2147483647\\\" \\\\} to url http://localhost:\\\\d+/query/sql, with headers \\\\{Accept=\\\\[application/json\\\\], Content-Type=\\\\[application/json\\\\]\\\\}, full response null\");\n+\n+        // Pinot broker requests do not handle limits greater than Integer.MAX_VALUE\n+        // Note that -2147483648 is due to an integer overflow in Pinot: https://github.com/apache/pinot/issues/7242\n+        assertQueryFails(\"SELECT * FROM \\\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + ((long) Integer.MAX_VALUE + 1) + \"\\\"\",\n+                \"Query select string_col, long_col from alltypes limit -2147483648 encountered exception org.apache.pinot.common.response.broker.QueryProcessingException@\\\\w+ with query \\\"select string_col, long_col from alltypes limit -2147483648\\\"\");\n+\n+        String tooManyBrokerRowsTableValues = \"VALUES ('string_0', '1620604800'),\" +\n+                \"  ('string_1', '1620604801'),\" +\n+                \"  ('string_2', '1620604802'),\" +\n+                \"  ('string_3', '1620604803'),\" +\n+                \"  ('string_4', '1620604804'),\" +\n+                \"  ('string_5', '1620604805'),\" +\n+                \"  ('string_6', '1620604806'),\" +\n+                \"  ('string_7', '1620604807'),\" +\n+                \"  ('string_8', '1620604808'),\" +\n+                \"  ('string_9', '1620604809'),\" +\n+                \"  ('string_10', '1620604810'),\" +\n+                \"  ('string_11', '1620604811')\";\n+\n+        // Explicit limit is necessary otherwise pinot returns 10 rows.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MjMwMQ=="}, "originalCommit": null, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjI3ODIxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjoxMDoxOVrOKMSZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xMVQxOToyNjo1NVrOKPSB2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MjkwOQ==", "bodyText": "Is the filter on long_col pushed down? We should have tests with both cases where the predicate gets pushed down and where the filtering is done by the engine.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683972909", "createdAt": "2021-08-06T06:10:19Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU4MjY1NA==", "bodyText": "I thought this test compares the results with and without pushdown, verifies types and rows match. Let me know if you meant something else.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684582654", "createdAt": "2021-08-07T04:37:37Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MjkwOQ=="}, "originalCommit": null, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU4MjY2NA==", "bodyText": "I thought this test compares the results with and without pushdown, verifies types and rows match. Let me know if you meant something else.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684582664", "createdAt": "2021-08-07T04:37:55Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MjkwOQ=="}, "originalCommit": null, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzExMjY2Nw==", "bodyText": "@elonazoulay The test disables ALL pushdowns. I meant a test where the predicate cannot be pushed down but the aggregation could be. The reasoning is that if the predicates are applied incorrectly or at the wrong time the aggregation would return different results.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r687112667", "createdAt": "2021-08-11T19:26:55Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MjkwOQ=="}, "originalCommit": null, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjI3OTYwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjoxMDo0N1rOKMSZ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNDozODo0MVrOKM3nNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzExNQ==", "bodyText": "https://github.com/trinodb/trino/pull/6069/files#r683972909", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683973115", "createdAt": "2021-08-06T06:10:47Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU4MjcwOQ==", "bodyText": "Same as above. Let me know.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684582709", "createdAt": "2021-08-07T04:38:41Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzExNQ=="}, "originalCommit": null, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjI4MDI2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjoxMTowNlrOKMSaZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNDozOTozM1rOKM3nbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzIyMA==", "bodyText": "https://github.com/trinodb/trino/pull/6069/files#r683972909", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683973220", "createdAt": "2021-08-06T06:11:06Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a limit\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a filter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU4Mjc0MA==", "bodyText": "Same as above, let me know.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684582740", "createdAt": "2021-08-07T04:39:15Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a limit\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzIyMA=="}, "originalCommit": null, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU4Mjc2Ng==", "bodyText": "Same as above, let me know.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684582766", "createdAt": "2021-08-07T04:39:33Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a limit\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzIyMA=="}, "originalCommit": null, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjI4MDQwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjoxMToxMFrOKMSagg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wN1QwNjowOTozNlrOKM4HRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzI1MA==", "bodyText": "https://github.com/trinodb/trino/pull/6069/files#r683972909", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683973250", "createdAt": "2021-08-06T06:11:10Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a limit\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a filter\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649 GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column, a filter and a limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzUyMg==", "bodyText": "Also, can we tests for MAX/MIN over text types? This is related to #8551.\nSee the test added in that PR for an example.\nEDIT: I see there are explicit tests verifying MIN/MAX aren't pushed down but distinct is getting pushed down. Can you add a test case similar to the one in linked PR for correctness of distinct over VARCHAR?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683973522", "createdAt": "2021-08-06T06:11:54Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a limit\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a filter\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649 GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column, a filter and a limit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzI1MA=="}, "originalCommit": null, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU4Mjk1Ng==", "bodyText": "Pinot does not support min/max for varchar or boolean using this version of the pinot libraries (0.6.0). Will upgrade soon and retest. The min/max aggregations are not pushed down: see SUPPORTED_TYPES in the ImplementMinMax.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684582956", "createdAt": "2021-08-07T04:41:56Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a limit\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a filter\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649 GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column, a filter and a limit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzI1MA=="}, "originalCommit": null, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDU5MDkxNg==", "bodyText": "Added some tests for mixed case values with distinct, count distinct and approx_distinct.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r684590916", "createdAt": "2021-08-07T06:09:36Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a limit\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a filter\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649 GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column, a filter and a limit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3MzI1MA=="}, "originalCommit": null, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1MjI5MDQ3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjoxNTowNlrOKMSgYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNlQwNjoxNTowNlrOKMSgYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Mzk3NDc1Mg==", "bodyText": "nit: extra space after SELECT", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r683974752", "createdAt": "2021-08-06T06:15:06Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/test/java/io/trino/plugin/pinot/TestPinotIntegrationSmokeTest.java", "diffHunk": "@@ -796,4 +861,264 @@ public void testLimitPushdown()\n         assertThat(query(\"SELECT string_col, long_col FROM \" + ALL_TYPES_TABLE + \"  WHERE int_col >0 AND bool_col = 'false' LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n                 .isNotFullyPushedDown(LimitNode.class);\n     }\n+\n+    @Test\n+    public void testAggregationPushdown()\n+    {\n+        // Without the limit inside the passthrough query, pinot will only return 10 rows\n+        assertThat(query(\"SELECT COUNT(*) FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with no grouping columns with a filter and limit\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a limit\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column and a filter\n+        assertThat(query(\"SELECT bool_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649 GROUP BY bool_col\"))\n+                .isFullyPushedDown();\n+\n+        // Test aggregates with one grouping column, a filter and a limit\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col < 4147483649 GROUP BY string_col\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // Test single row from pinot where filter results in an empty result set.\n+        // A direct pinot query would return 1 row with default values, not null values.\n+        assertThat(query(\"SELECT COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" WHERE long_col > 4147483649\")).isFullyPushedDown();\n+\n+        // Test passthrough queries with no aggregates\n+        assertThat(query(\"SELECT string_col, COUNT(*),\" +\n+                \"  MIN(int_col), MAX(int_col),\" +\n+                \"  MIN(long_col), MAX(long_col), AVG(long_col), SUM(long_col),\" +\n+                \"  MIN(float_col), MAX(float_col), AVG(float_col), SUM(float_col),\" +\n+                \"  MIN(double_col), MAX(double_col), AVG(double_col), SUM(double_col)\" +\n+                \"  FROM \\\"SELECT * FROM \" + ALL_TYPES_TABLE + \" WHERE long_col > 4147483649\" +\n+                \"  LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES + \"\\\"  GROUP BY string_col\"))\n+                .isFullyPushedDown();\n+\n+        // Passthrough queries with aggregates will not push down more aggregations.\n+        assertThat(query(\"SELECT bool_col, \\\"count(*)\\\", COUNT(*) FROM \\\"SELECT bool_col, count(*) FROM \" +\n+                ALL_TYPES_TABLE + \" GROUP BY bool_col\\\" GROUP BY bool_col, \\\"count(*)\\\"\"))\n+                .isNotFullyPushedDown(ExchangeNode.class, ProjectNode.class, AggregationNode.class, ExchangeNode.class, ExchangeNode.class, AggregationNode.class, ProjectNode.class);\n+\n+        assertThat(query(\"SELECT bool_col, \\\"max(long_col)\\\", COUNT(*) FROM \\\"SELECT bool_col, max(long_col) FROM \" +\n+                ALL_TYPES_TABLE + \" GROUP BY bool_col\\\" GROUP BY bool_col, \\\"max(long_col)\\\"\"))\n+                .isNotFullyPushedDown(ExchangeNode.class, ProjectNode.class, AggregationNode.class, ExchangeNode.class, ExchangeNode.class, AggregationNode.class, ProjectNode.class);\n+\n+        assertThat(query(\"SELECT int_col, COUNT(*) FROM \" + ALL_TYPES_TABLE + \" GROUP BY int_col LIMIT \" + MAX_ROWS_PER_SPLIT_FOR_SEGMENT_QUERIES))\n+                .isFullyPushedDown();\n+\n+        // count(<column>) should not be pushed down, as pinot currently only implements count(*)\n+        assertThat(query(\"SELECT bool_col, COUNT(long_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isNotFullyPushedDown(ProjectNode.class, AggregationNode.class, ExchangeNode.class, ExchangeNode.class, AggregationNode.class, ProjectNode.class);\n+\n+        // AVG on INTEGER columns is not pushed down\n+        assertThat(query(\"SELECT string_col, AVG(int_col) FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\"))\n+                .isNotFullyPushedDown(ProjectNode.class, AggregationNode.class, ExchangeNode.class, ExchangeNode.class, AggregationNode.class, ProjectNode.class);\n+\n+        // SUM on INTEGER columns is not pushed down\n+        assertThat(query(\"SELECT string_col, SUM(int_col) FROM \" + ALL_TYPES_TABLE + \" GROUP BY string_col\"))\n+                .isNotFullyPushedDown(ProjectNode.class, AggregationNode.class, ExchangeNode.class, ExchangeNode.class, AggregationNode.class, ProjectNode.class);\n+\n+        // MIN on VARCHAR columns is not pushed down\n+        assertThat(query(\"SELECT bool_col, MIN(string_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isNotFullyPushedDown(ProjectNode.class, AggregationNode.class, ExchangeNode.class, ExchangeNode.class, AggregationNode.class, ProjectNode.class);\n+\n+        // MAX on VARCHAR columns is not pushed down\n+        assertThat(query(\"SELECT bool_col, MAX(string_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isNotFullyPushedDown(ProjectNode.class, AggregationNode.class, ExchangeNode.class, ExchangeNode.class, AggregationNode.class, ProjectNode.class);\n+\n+        // COUNT on VARCHAR columns is not pushed down\n+        assertThat(query(\"SELECT bool_col, COUNT(string_col)\" +\n+                \"  FROM \" + ALL_TYPES_TABLE + \" GROUP BY bool_col\"))\n+                .isNotFullyPushedDown(ProjectNode.class, AggregationNode.class, ExchangeNode.class, ExchangeNode.class, AggregationNode.class, ProjectNode.class);\n+\n+        // Distinct on varchar is pushed down\n+        assertThat(query(\"SELECT DISTINCT string_col FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+        // Distinct on bool is pushed down\n+        assertThat(query(\"SELECT DISTINCT bool_col FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+        // Distinct on double is pushed down\n+        assertThat(query(\"SELECT DISTINCT double_col FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+        // Distinct on float is pushed down\n+        assertThat(query(\"SELECT DISTINCT float_col FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+        // Distinct on long is pushed down\n+        assertThat(query(\"SELECT DISTINCT long_col FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+        // Distinct on int is partially pushed down\n+        assertThat(query(\"SELECT DISTINCT int_col FROM \" + ALL_TYPES_TABLE))\n+                .isNotFullyPushedDown(ExchangeNode.class);\n+\n+        // Distinct on 2 columns for supported types:\n+        assertThat(query(\"SELECT DISTINCT bool_col, string_col FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+        assertThat(query(\"SELECT DISTINCT bool_col, double_col FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+        assertThat(query(\"SELECT DISTINCT bool_col, float_col FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+        assertThat(query(\"SELECT DISTINCT bool_col, long_col FROM \" + ALL_TYPES_TABLE))\n+                .isFullyPushedDown();\n+        assertThat(query(\"SELECT DISTINCT bool_col, int_col FROM \" + ALL_TYPES_TABLE))\n+                .isNotFullyPushedDown(ExchangeNode.class);\n+\n+        // Approx distinct on varchar is pushed down\n+        assertThat(query(\"SELECT  approx_distinct(string_col) FROM \" + ALL_TYPES_TABLE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM3MzUwMTQ3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xMVQxOTo0MTo1NFrOKPSl5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xOFQxMjoxODozMVrOKTKWgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEyMTg5Mg==", "bodyText": "@elonazoulay IIUC the grouping columns in rewrite context are only needed to verify that the grouping columns are part of the SELECT clause. If so, can we instead do that validation here after the rewrite is done?\nYes, the connector will end up doing work that gets discarded but that seems cleaner because even if we add grouping columns to RewriteContext I don't see an easy way to populate them for other connectors so we won't be able to provide a sane impl. which doesn't return null for that method.\nI think this is possible to do because here we have tableHandle available from which we can get the grouping columns in case of DynamicTable.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r687121892", "createdAt": "2021-08-11T19:41:54Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +314,75 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments, tableHandle);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzU0NjY0Mg==", "bodyText": "Yep, in a previous version of this pr it was done before the rewrite rules, I can add it back. Another idea: can RewriteContext.getGroupingColumns() return an Optional<List> as a default method?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r687546642", "createdAt": "2021-08-12T09:29:42Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +314,75 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments, tableHandle);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEyMTg5Mg=="}, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzU2NDE4NQ==", "bodyText": "Was there some specific reason to change from the old implementation? Maybe I'm missing something. If it's feasible to do I'd like that.\nAs for the RewriteContext changes I'll defer to @martint (and Piotr once he's back). IMO if we have alternatives which are cleaner then I'd like to avoid the change. IMO the validation that grouping columns are part of select isn't exclusive to just count_distinct and makes sense to do before any rewrite.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r687564185", "createdAt": "2021-08-12T09:53:04Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +314,75 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments, tableHandle);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEyMTg5Mg=="}, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODA2NzQxNQ==", "bodyText": "Sounds good. Would another option be to pass the table handle into the rewrite context? I can get the grouping columns there also.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r688067415", "createdAt": "2021-08-12T20:37:23Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +314,75 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments, tableHandle);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEyMTg5Mg=="}, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDIwNjcxNQ==", "bodyText": "@hashhar - I extracted the check for grouping columns and reverted the changes for AggregateFunctionRewriter and RewriteContext. What do you think about adding TableHandle to the RewriteContext instead of this approach?\nJust in case I saved the previous version.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r690206715", "createdAt": "2021-08-17T09:41:42Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +314,75 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments, tableHandle);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEyMTg5Mg=="}, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTE4MTE4Ng==", "bodyText": "I like the newer version. We can revisit changing RewriteContext once we have other non-JDBC connectors that implement agg pushdown. We'll have better information at that time to decide the correct abstraction.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r691181186", "createdAt": "2021-08-18T12:18:31Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -294,6 +314,75 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments, tableHandle);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEyMTg5Mg=="}, "originalCommit": null, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQwMDcxNTkyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xOFQxMjoxNjo1MVrOKTKR6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yMVQxOToyOTo0N1rOKVRS_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTE4MDAxMA==", "bodyText": "Should this return empty if the grouping column doesn't contain the column on which aggregation is applied? Or should it throw an error?", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r691180010", "createdAt": "2021-08-18T12:16:51Z", "author": {"login": "hashhar"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -305,6 +328,109 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments);\n+            rewriteResult = applyCountDistinct(session, aggregate, assignments, tableHandle, rewriteResult);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()\n+                .map(PinotColumnHandle.class::cast)\n+                .map(PinotColumnHandle::getColumnName)\n+                .collect(toImmutableList());\n+        OptionalLong limitForDynamicTable = OptionalLong.empty();\n+        // Ensure that pinot default limit of 10 rows is not used\n+        // By setting the limit to maxRowsPerBrokerQuery + 1 the connector will\n+        // know when the limit was exceeded and throw an error\n+        if (tableHandle.getLimit().isEmpty() && !groupingColumns.isEmpty()) {\n+            limitForDynamicTable = OptionalLong.of(maxRowsPerBrokerQuery + 1);\n+        }\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),\n+                groupingColumns,\n+                aggregationExpressions.build(),\n+                ImmutableList.of(),\n+                limitForDynamicTable,\n+                OptionalLong.empty(),\n+                \"\");\n+        tableHandle = new PinotTableHandle(tableHandle.getSchemaName(), tableHandle.getTableName(), tableHandle.getConstraint(), tableHandle.getLimit(), Optional.of(dynamicTable));\n+\n+        return Optional.of(new AggregationApplicationResult<>(tableHandle, projections.build(), resultAssignments.build(), ImmutableMap.of(), false));\n+    }\n+\n+    private Optional<PinotColumnHandle> applyCountDistinct(ConnectorSession session, AggregateFunction aggregate, Map<String, ColumnHandle> assignments, PinotTableHandle tableHandle, Optional<PinotColumnHandle> rewriteResult)\n+    {\n+        AggregateFunctionRule.RewriteContext context = new AggregateFunctionRule.RewriteContext()\n+        {\n+            @Override\n+            public Map<String, ColumnHandle> getAssignments()\n+            {\n+                return assignments;\n+            }\n+\n+            @Override\n+            public Function<String, String> getIdentifierQuote()\n+            {\n+                return identity();\n+            }\n+\n+            @Override\n+            public ConnectorSession getSession()\n+            {\n+                return session;\n+            }\n+        };\n+\n+        if (implementCountDistinct.getPattern().matches(aggregate, context) && aggregate.getInputs().size() == 1) {\n+            Variable input = (Variable) getOnlyElement(aggregate.getInputs());\n+            if (tableHandle.getQuery().isEmpty() ||\n+                    !tableHandle.getQuery().get().getGroupingColumns().contains(input.getName())) {\n+                return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzM5MjEyNQ==", "bodyText": "It should return empty not push the aggregation down. Added tests to verify this behavior with corner cases, like when the broker query is present and there is no count distinct. Also added a comment explaining the reason: count() is allowed in the query, just should not be pushed down, it's not an error condition.", "url": "https://github.com/trinodb/trino/pull/6069#discussion_r693392125", "createdAt": "2021-08-21T19:29:47Z", "author": {"login": "elonazoulay"}, "path": "plugin/trino-pinot/src/main/java/io/trino/plugin/pinot/PinotMetadata.java", "diffHunk": "@@ -305,6 +328,109 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return Optional.of(new ConstraintApplicationResult<>(handle, remainingFilter, false));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle handle,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupingSets)\n+    {\n+        if (!isAggregationPushdownEnabled(session)) {\n+            return Optional.empty();\n+        }\n+\n+        // Global aggregation is represented by [[]]\n+        verify(!groupingSets.isEmpty(), \"No grouping sets provided\");\n+\n+        // Pinot currently only supports simple GROUP BY clauses with a single grouping set\n+        if (groupingSets.size() != 1) {\n+            return Optional.empty();\n+        }\n+\n+        PinotTableHandle tableHandle = (PinotTableHandle) handle;\n+        // If aggregate are present than no further aggregations\n+        // can be pushed down: there are currently no subqueries in pinot\n+        if (tableHandle.getQuery().isPresent() &&\n+                !tableHandle.getQuery().get().getAggregateColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        ImmutableList.Builder<PinotColumnHandle> aggregationExpressions = ImmutableList.builder();\n+\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<PinotColumnHandle> rewriteResult = aggregateFunctionRewriter.rewrite(session, aggregate, assignments);\n+            rewriteResult = applyCountDistinct(session, aggregate, assignments, tableHandle, rewriteResult);\n+            if (rewriteResult.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            PinotColumnHandle pinotColumnHandle = rewriteResult.get();\n+            aggregationExpressions.add(pinotColumnHandle);\n+            projections.add(new Variable(pinotColumnHandle.getColumnName(), pinotColumnHandle.getDataType()));\n+            resultAssignments.add(new Assignment(pinotColumnHandle.getColumnName(), pinotColumnHandle, pinotColumnHandle.getDataType()));\n+        }\n+        List<String> groupingColumns = getOnlyElement(groupingSets).stream()\n+                .map(PinotColumnHandle.class::cast)\n+                .map(PinotColumnHandle::getColumnName)\n+                .collect(toImmutableList());\n+        OptionalLong limitForDynamicTable = OptionalLong.empty();\n+        // Ensure that pinot default limit of 10 rows is not used\n+        // By setting the limit to maxRowsPerBrokerQuery + 1 the connector will\n+        // know when the limit was exceeded and throw an error\n+        if (tableHandle.getLimit().isEmpty() && !groupingColumns.isEmpty()) {\n+            limitForDynamicTable = OptionalLong.of(maxRowsPerBrokerQuery + 1);\n+        }\n+        DynamicTable dynamicTable = new DynamicTable(\n+                tableHandle.getTableName(),\n+                Optional.empty(),\n+                ImmutableList.of(),\n+                tableHandle.getQuery().flatMap(DynamicTable::getFilter),\n+                groupingColumns,\n+                aggregationExpressions.build(),\n+                ImmutableList.of(),\n+                limitForDynamicTable,\n+                OptionalLong.empty(),\n+                \"\");\n+        tableHandle = new PinotTableHandle(tableHandle.getSchemaName(), tableHandle.getTableName(), tableHandle.getConstraint(), tableHandle.getLimit(), Optional.of(dynamicTable));\n+\n+        return Optional.of(new AggregationApplicationResult<>(tableHandle, projections.build(), resultAssignments.build(), ImmutableMap.of(), false));\n+    }\n+\n+    private Optional<PinotColumnHandle> applyCountDistinct(ConnectorSession session, AggregateFunction aggregate, Map<String, ColumnHandle> assignments, PinotTableHandle tableHandle, Optional<PinotColumnHandle> rewriteResult)\n+    {\n+        AggregateFunctionRule.RewriteContext context = new AggregateFunctionRule.RewriteContext()\n+        {\n+            @Override\n+            public Map<String, ColumnHandle> getAssignments()\n+            {\n+                return assignments;\n+            }\n+\n+            @Override\n+            public Function<String, String> getIdentifierQuote()\n+            {\n+                return identity();\n+            }\n+\n+            @Override\n+            public ConnectorSession getSession()\n+            {\n+                return session;\n+            }\n+        };\n+\n+        if (implementCountDistinct.getPattern().matches(aggregate, context) && aggregate.getInputs().size() == 1) {\n+            Variable input = (Variable) getOnlyElement(aggregate.getInputs());\n+            if (tableHandle.getQuery().isEmpty() ||\n+                    !tableHandle.getQuery().get().getGroupingColumns().contains(input.getName())) {\n+                return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTE4MDAxMA=="}, "originalCommit": null, "originalPosition": 207}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4638, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}