{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjQ2NDg5", "number": 6078, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxOToyMFrOE89HMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxOToyMFrOE89HMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzUxMjgyOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxOToyMFrOH5YgIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTo1NjozOVrOH552AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMjMyMA==", "bodyText": "Use built-in thread safe cache loading for columns\n\nThe commit may be read as if the previous code was not thread safe, while i think it was.\nam i missing something?\nif it is just a refactor, then perhaps name the commit as such, eg\nSimplify loading columns into cache in CachingJdbcClient\n\nUtilize `cache.get` with a loader, to simplify control flow.", "url": "https://github.com/trinodb/trino/pull/6078#discussion_r529932320", "createdAt": "2020-11-24T22:19:20Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -106,15 +106,8 @@ public boolean schemaExists(JdbcIdentity identity, String schema)\n         if (tableHandle.getColumns().isPresent()) {\n             return tableHandle.getColumns().get();\n         }\n-\n         ColumnsCacheKey key = new ColumnsCacheKey(JdbcIdentity.from(session), tableHandle.getSchemaTableName());\n-        List<JdbcColumnHandle> columns = columnsCache.getIfPresent(key);\n-        if (columns != null) {\n-            return columns;\n-        }\n-        columns = delegate.getColumns(session, tableHandle);\n-        columnsCache.put(key, columns);\n-        return columns;\n+        return get(columnsCache, key, () -> delegate.getColumns(session, tableHandle));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1OTc3OQ==", "bodyText": "I understand it in this way:\n\ngetColumns method does not have any synchronisation so two concurrent clients can invoke it.\ncolumnsCache.getIfPresent(key) returns false for both clients.\ndelegate.getColumns(session, tableHandle) is invoked for each of the clients\n\nIn any case I can update message.", "url": "https://github.com/trinodb/trino/pull/6078#discussion_r530259779", "createdAt": "2020-11-25T10:19:18Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -106,15 +106,8 @@ public boolean schemaExists(JdbcIdentity identity, String schema)\n         if (tableHandle.getColumns().isPresent()) {\n             return tableHandle.getColumns().get();\n         }\n-\n         ColumnsCacheKey key = new ColumnsCacheKey(JdbcIdentity.from(session), tableHandle.getSchemaTableName());\n-        List<JdbcColumnHandle> columns = columnsCache.getIfPresent(key);\n-        if (columns != null) {\n-            return columns;\n-        }\n-        columns = delegate.getColumns(session, tableHandle);\n-        columnsCache.put(key, columns);\n-        return columns;\n+        return get(columnsCache, key, () -> delegate.getColumns(session, tableHandle));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMjMyMA=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2MzcxOQ==", "bodyText": "the previous code was not thread safe\n\nIt was thread safe, but not optimal. There was a case where we could load the same cache entry concurrently by several threads. Not it should be fixed.\n@zaz968m Can you please add a test for that?", "url": "https://github.com/trinodb/trino/pull/6078#discussion_r530263719", "createdAt": "2020-11-25T10:25:20Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -106,15 +106,8 @@ public boolean schemaExists(JdbcIdentity identity, String schema)\n         if (tableHandle.getColumns().isPresent()) {\n             return tableHandle.getColumns().get();\n         }\n-\n         ColumnsCacheKey key = new ColumnsCacheKey(JdbcIdentity.from(session), tableHandle.getSchemaTableName());\n-        List<JdbcColumnHandle> columns = columnsCache.getIfPresent(key);\n-        if (columns != null) {\n-            return columns;\n-        }\n-        columns = delegate.getColumns(session, tableHandle);\n-        columnsCache.put(key, columns);\n-        return columns;\n+        return get(columnsCache, key, () -> delegate.getColumns(session, tableHandle));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMjMyMA=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwNDYyNw==", "bodyText": "It was thread safe, but not optimal. There was a case where we could load the same cache entry concurrently by several threads. Not it should be fixed.\n\nthis is not a problem.\nactually, the new version could be seen as introducing unnecessary contention/synchronization. I do not think it is an actual problem either, but i do insist we are not fixing any problem other than code readability and so this should be reflected in cmt msg appropriately.", "url": "https://github.com/trinodb/trino/pull/6078#discussion_r530304627", "createdAt": "2020-11-25T11:31:02Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -106,15 +106,8 @@ public boolean schemaExists(JdbcIdentity identity, String schema)\n         if (tableHandle.getColumns().isPresent()) {\n             return tableHandle.getColumns().get();\n         }\n-\n         ColumnsCacheKey key = new ColumnsCacheKey(JdbcIdentity.from(session), tableHandle.getSchemaTableName());\n-        List<JdbcColumnHandle> columns = columnsCache.getIfPresent(key);\n-        if (columns != null) {\n-            return columns;\n-        }\n-        columns = delegate.getColumns(session, tableHandle);\n-        columnsCache.put(key, columns);\n-        return columns;\n+        return get(columnsCache, key, () -> delegate.getColumns(session, tableHandle));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMjMyMA=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5Nzc4Mg==", "bodyText": "@kokosing as agreed, test will be delivered in separate pr.", "url": "https://github.com/trinodb/trino/pull/6078#discussion_r530397782", "createdAt": "2020-11-25T14:05:43Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -106,15 +106,8 @@ public boolean schemaExists(JdbcIdentity identity, String schema)\n         if (tableHandle.getColumns().isPresent()) {\n             return tableHandle.getColumns().get();\n         }\n-\n         ColumnsCacheKey key = new ColumnsCacheKey(JdbcIdentity.from(session), tableHandle.getSchemaTableName());\n-        List<JdbcColumnHandle> columns = columnsCache.getIfPresent(key);\n-        if (columns != null) {\n-            return columns;\n-        }\n-        columns = delegate.getColumns(session, tableHandle);\n-        columnsCache.put(key, columns);\n-        return columns;\n+        return get(columnsCache, key, () -> delegate.getColumns(session, tableHandle));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMjMyMA=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ3ODU5Mg==", "bodyText": "@findepi commit message is updated. Please AC.", "url": "https://github.com/trinodb/trino/pull/6078#discussion_r530478592", "createdAt": "2020-11-25T15:56:39Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -106,15 +106,8 @@ public boolean schemaExists(JdbcIdentity identity, String schema)\n         if (tableHandle.getColumns().isPresent()) {\n             return tableHandle.getColumns().get();\n         }\n-\n         ColumnsCacheKey key = new ColumnsCacheKey(JdbcIdentity.from(session), tableHandle.getSchemaTableName());\n-        List<JdbcColumnHandle> columns = columnsCache.getIfPresent(key);\n-        if (columns != null) {\n-            return columns;\n-        }\n-        columns = delegate.getColumns(session, tableHandle);\n-        columnsCache.put(key, columns);\n-        return columns;\n+        return get(columnsCache, key, () -> delegate.getColumns(session, tableHandle));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMjMyMA=="}, "originalCommit": null, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4649, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}