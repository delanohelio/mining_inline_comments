{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzMzMTI4", "number": 5795, "title": "Prefer most recently working metastore", "bodyText": "", "createdAt": "2020-11-03T13:27:47Z", "url": "https://github.com/trinodb/trino/pull/5795", "merged": true, "mergeCommit": {"oid": "5e7abebd9da1d396fe97ff28633dd238fa14f780"}, "closed": true, "closedAt": "2020-11-05T12:59:40Z", "author": {"login": "losipiuk"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY03IdAH2gAyNTE0NzMzMTI4OjA5MzQ1ZGRkNWQzN2ZmNTc5YzMzYzM1YWY2NWQ4ODA0MTE3Yzc3YTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZPqQCABqjM5NTgxOTgzNzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "09345ddd5d37ff579c33c35af65d8804117c77a9", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/09345ddd5d37ff579c33c35af65d8804117c77a9", "committedDate": "2020-11-03T08:26:42Z", "message": "Rename field"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTAyNTQw", "url": "https://github.com/trinodb/trino/pull/5795#pullrequestreview-522902540", "createdAt": "2020-11-03T21:54:59Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo1NDo1OVrOHtB1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjowMjo0OFrOHtCDaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODAwNQ==", "bodyText": ".", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516978005", "createdAt": "2020-11-03T21:54:59Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -87,8 +98,11 @@ public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastor\n     public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationToken)\n             throws TException\n     {\n+//        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODMzNQ==", "bodyText": "Any chance to keep fewer overloads of the ctor?", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516978335", "createdAt": "2020-11-03T21:55:41Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -63,14 +69,19 @@ public StaticMetastoreLocator(StaticMetastoreConfig config, ThriftMetastoreAuthe\n     }\n \n     public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory)\n+    {\n+        this(metastoreUris, metastoreUsername, clientFactory, Ticker.systemTicker());\n+    }\n+\n+    private StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory, Ticker ticker)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3OTY1NQ==", "bodyText": "pre-existing, but not so nice...\nWe're sorting a list and then getting indexOf for every element.\nWe could eg encode metastoreindex as a payload in the Backoff object,\nor map to Entry<Integer, Backoff> and sort that", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516979655", "createdAt": "2020-11-03T21:58:47Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -87,8 +98,11 @@ public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastor\n     public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationToken)\n             throws TException\n     {\n+//        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration);\n+        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n+                .thenComparingLong(Backoff::getLastFailureTimestamp);\n         List<Integer> indices = backoffs.stream()\n-                .sorted(Comparator.comparingLong(Backoff::getBackoffDuration))\n+                .sorted(comparator)\n                 .map(backoffs::indexOf)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MDUzOQ==", "bodyText": "do you want to reset lastFailureTimestamp here (as it used to be)?\nnote that you do not sort over success field", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516980539", "createdAt": "2020-11-03T22:00:29Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,34 +152,46 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff\n     {\n-        private static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n-        private static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n+        static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n+        static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n \n-        private final Ticker ticker = Ticker.systemTicker();\n+        private final Ticker ticker;\n         private long backoffDuration = MIN_BACKOFF;\n-        private OptionalLong lastFailureTimestamp = OptionalLong.empty();\n+        private boolean success = true;\n+        private long lastFailureTimestamp;\n+\n+        Backoff(Ticker ticker)\n+        {\n+            this.ticker = requireNonNull(ticker, \"ticker is null\");\n+        }\n \n         synchronized void fail()\n         {\n-            lastFailureTimestamp = OptionalLong.of(ticker.read());\n+            success = false;\n+            lastFailureTimestamp = ticker.read();\n             backoffDuration = min(backoffDuration * 2, MAX_BACKOFF);\n         }\n \n         synchronized void success()\n         {\n-            lastFailureTimestamp = OptionalLong.empty();\n+            success = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MTYwOQ==", "bodyText": "This looks like incrementing lastFailureTimestamp value, but it may actually decrement it -- ticker can return a negative value.\nMaybe init lastFailureTimestamp to Long.MIN_VALUE to make reader's life easier?", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516981609", "createdAt": "2020-11-03T22:02:48Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,34 +152,46 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff\n     {\n-        private static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n-        private static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n+        static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n+        static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n \n-        private final Ticker ticker = Ticker.systemTicker();\n+        private final Ticker ticker;\n         private long backoffDuration = MIN_BACKOFF;\n-        private OptionalLong lastFailureTimestamp = OptionalLong.empty();\n+        private boolean success = true;\n+        private long lastFailureTimestamp;\n+\n+        Backoff(Ticker ticker)\n+        {\n+            this.ticker = requireNonNull(ticker, \"ticker is null\");\n+        }\n \n         synchronized void fail()\n         {\n-            lastFailureTimestamp = OptionalLong.of(ticker.read());\n+            success = false;\n+            lastFailureTimestamp = ticker.read();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNDM3Mjc4", "url": "https://github.com/trinodb/trino/pull/5795#pullrequestreview-523437278", "createdAt": "2020-11-04T14:53:44Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1Mzo0NVrOHtbskQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1NjozMVrOHtb08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMTc0NQ==", "bodyText": "@VisibleForTesting", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517401745", "createdAt": "2020-11-04T14:53:45Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,15 +152,20 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzE0Mg==", "bodyText": "the public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory) seems unused now", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517403142", "createdAt": "2020-11-04T14:55:32Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -63,14 +70,19 @@ public StaticMetastoreLocator(StaticMetastoreConfig config, ThriftMetastoreAuthe\n     }\n \n     public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzg5MA==", "bodyText": "Construct a list of attempted addresses (in order of attempt) so that \"Failed connecting to Hive metastore: \" below is accurate.\nThen you can remove addresses field.", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517403890", "createdAt": "2020-11-04T14:56:31Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -101,15 +102,14 @@ public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationTo\n     {\n         Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n                 .thenComparingLong(Backoff::getLastFailureTimestamp);\n-        List<Integer> indices = backoffs.stream()\n+        List<Backoff> backoffsSorted = backoffs.stream()\n                 .sorted(comparator)\n-                .map(backoffs::indexOf)\n                 .collect(toImmutableList());\n \n         TException lastException = null;\n-        for (int index : indices) {\n+        for (Backoff backoff : backoffsSorted) {\n             try {\n-                return getClient(addresses.get(index), backoffs.get(index), delegationToken);\n+                return getClient(backoff.getAddress(), backoff, delegationToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9bacfd3957ae226fb607df4c5e760172c6111a6", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/a9bacfd3957ae226fb607df4c5e760172c6111a6", "committedDate": "2020-11-04T15:32:56Z", "message": "Prefer most recently working metastore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2178279c1c7a8521551ae4f8e5c04082f9d00f2", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/a2178279c1c7a8521551ae4f8e5c04082f9d00f2", "committedDate": "2020-11-04T15:39:55Z", "message": "Add reverse mapping from Backoff to metastore address"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a2178279c1c7a8521551ae4f8e5c04082f9d00f2", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/a2178279c1c7a8521551ae4f8e5c04082f9d00f2", "committedDate": "2020-11-04T15:39:55Z", "message": "Add reverse mapping from Backoff to metastore address"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2777, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}