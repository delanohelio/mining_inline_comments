{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjc4NTIw", "number": 6210, "reviewThreads": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyNzozN1rOFA8kkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xM1QxMzowODo0M1rOGt-VCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTM2NzIxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/S3SecurityMappingConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyNzozN1rOH_e90Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoyOToxMFrOIAbIOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyOTY4MQ==", "bodyText": "Use enum instead of String with values like FILE.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r536329681", "createdAt": "2020-12-04T19:27:37Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -27,6 +27,20 @@\n     private String roleCredentialName;\n     private Duration refreshPeriod;\n     private String colonReplacement;\n+    private String securityMappingsProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNTM4Ng==", "bodyText": "This is relevant under the conditions that all implementations of S3SecurityMappingsProvider are part of presto-hive, right?", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r537315386", "createdAt": "2020-12-07T08:29:10Z", "author": {"login": "clemensvonschwerin"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -27,6 +27,20 @@\n     private String roleCredentialName;\n     private Duration refreshPeriod;\n     private String colonReplacement;\n+    private String securityMappingsProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyOTY4MQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTM2Nzk2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/S3SecurityMappingConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyNzo0N1rOH_e-MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoyNDo0MVrOIAa9zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyOTc3Nw==", "bodyText": "We do not use reflection for things like that. We need to have all provider implementations here.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r536329777", "createdAt": "2020-12-04T19:27:47Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -27,6 +27,20 @@\n     private String roleCredentialName;\n     private Duration refreshPeriod;\n     private String colonReplacement;\n+    private String securityMappingsProvider;\n+\n+    public String getSecurityMappingsProvider()\n+    {\n+        return securityMappingsProvider == null ? FileBasedS3SecurityMappingsProvider.class.getName() : securityMappingsProvider;\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.provider\")\n+    @ConfigDescription(\"class used to obtain the s3 security mappings\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxMjcxNw==", "bodyText": "So what I did locally to test the implementation and to setup for later is: I set up a new maven project, added presto-hive as a dependency and implemented a custom S3SecurityMappingsProvider in that project. Then I built the jar and put it into the hive-hadoop2 plugin directory. That way it can be found on the classpath and the custom implementation can be used. I think it leaves you more flexible in terms of implementation.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r537312717", "createdAt": "2020-12-07T08:24:41Z", "author": {"login": "clemensvonschwerin"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -27,6 +27,20 @@\n     private String roleCredentialName;\n     private Duration refreshPeriod;\n     private String colonReplacement;\n+    private String securityMappingsProvider;\n+\n+    public String getSecurityMappingsProvider()\n+    {\n+        return securityMappingsProvider == null ? FileBasedS3SecurityMappingsProvider.class.getName() : securityMappingsProvider;\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.provider\")\n+    @ConfigDescription(\"class used to obtain the s3 security mappings\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyOTc3Nw=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTAxODQzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/sphinx/connector/hive-s3.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxOTo1NzoxMVrOJP2v5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxOTo1NzoxMVrOJP2v5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYwNTQxMw==", "bodyText": "Missing space before \"or\"", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620605413", "createdAt": "2021-04-26T19:57:11Z", "author": {"login": "electrum"}, "path": "docs/src/main/sphinx/connector/hive-s3.rst", "diffHunk": "@@ -189,7 +189,11 @@ In addition to the rules above, the default mapping can contain the optional\n \n If no mapping entry matches and no default is configured, the access is denied.\n \n-Example JSON configuration file:\n+The configuration JSON can either be retrieved from a file specified via\n+``hive.s3.security-mapping.config-file``or from a REST-endpoint specified via", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTAyNjY5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/sphinx/connector/hive-s3.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxOTo1OTowNVrOJP200w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxOTo1OTowNVrOJP200w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYwNjY3NQ==", "bodyText": "Interesting, I'd never heard of JSON pointer. That's useful, especially since it's standardized, unlike JSONPath.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620606675", "createdAt": "2021-04-26T19:59:05Z", "author": {"login": "electrum"}, "path": "docs/src/main/sphinx/connector/hive-s3.rst", "diffHunk": "@@ -235,6 +239,9 @@ Example JSON configuration file:\n Property Name                                           Description\n ======================================================= =================================================================\n ``hive.s3.security-mapping.config-file``                The JSON configuration file containing security mappings.\n+``hive.s3.security-mapping.config-uri``                 The URI to fetch the security mappings from (via REST).\n+``hive.s3.security-mapping.json-pointer``               A JSON pointer (RFC 6901) to mappings inside the JSON from either", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTAzNTUwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDowMToxMlrOJP26Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDowMToxMlrOJP26Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYwODAxNQ==", "bodyText": "Configs are mutable (they are beans in order to use the Bean Validation framework), so we always copy out the values into final fields in the constructor, along with null checks, etc.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620608015", "createdAt": "2021-04-26T20:01:12Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.json.ObjectMapperProvider;\n+\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final S3SecurityMappingConfig config;\n+\n+    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.config = config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTA3ODg5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoxMTowNlrOJP3TAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoxMTowNlrOJP3TAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYxNDQwMA==", "bodyText": "Can you add a method\npublic static JsonNode parseJson(byte[] jsonBytes);\nto io.trino.plugin.base.util.JsonUtils? You can make the ObjectMapper a constant in that utility class so that we share it across both methods (and importantly, ensure it is the same configuration).", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620614400", "createdAt": "2021-04-26T20:11:06Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.json.ObjectMapperProvider;\n+\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final S3SecurityMappingConfig config;\n+\n+    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.config = config;\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            ObjectMapper mapper = new ObjectMapperProvider().get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTA5OTc5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoxNTo1N1rOJP3e9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoxNTo1N1rOJP3e9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYxNzQ2MA==", "bodyText": "Let's preserve the original exception, since it will give a hint why it failed. I'm not sure if we want to include the full JSON, but if so, we can put it at the end, so we don't split the error message\nthrow new IllegalArgumentException(\"Failed to parse JSON for S3 security mappings: \" + jsonString, e);", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620617460", "createdAt": "2021-04-26T20:15:57Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.json.ObjectMapperProvider;\n+\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final S3SecurityMappingConfig config;\n+\n+    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.config = config;\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            ObjectMapper mapper = new ObjectMapperProvider().get()\n+                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n+            JsonNode node = mapper.readTree(jsonString);\n+            JsonNode mappingsNode = node.at(config.getJSONPointer());\n+            return mapper.treeToValue(mappingsNode, S3SecurityMappings.class);\n+        }\n+        catch (JsonProcessingException ex) {\n+            throw new IllegalArgumentException(format(\"Could not parse json input string '%s' as s3 security mappings\", jsonString));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTEwMjQyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoxNjozM1rOJP3gcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoxNjozM1rOJP3gcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYxNzg0Mw==", "bodyText": "Nit: our code style only capitalizes the first letter, so name this getRawJsonString()", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620617843", "createdAt": "2021-04-26T20:16:33Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.json.ObjectMapperProvider;\n+\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final S3SecurityMappingConfig config;\n+\n+    public S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.config = config;\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            ObjectMapper mapper = new ObjectMapperProvider().get()\n+                    .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n+            JsonNode node = mapper.readTree(jsonString);\n+            JsonNode mappingsNode = node.at(config.getJSONPointer());\n+            return mapper.treeToValue(mappingsNode, S3SecurityMappings.class);\n+        }\n+        catch (JsonProcessingException ex) {\n+            throw new IllegalArgumentException(format(\"Could not parse json input string '%s' as s3 security mappings\", jsonString));\n+        }\n+    }\n+\n+    protected abstract String getRawJSONString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTEwMzgxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoxNjo1N1rOJP3hVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoxNjo1N1rOJP3hVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYxODA2OA==", "bodyText": "Nit: put empty method on one line\nprivate S3SecurityMappingsProviderFactory() {}", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620618068", "createdAt": "2021-04-26T20:16:57Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.util.List;\n+\n+public class S3SecurityMappingsProviderFactory\n+{\n+    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n+\n+    private S3SecurityMappingsProviderFactory()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTEyMDA0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoyMDo1NlrOJP3qxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDoyMDo1NlrOJP3qxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYyMDQ4Nw==", "bodyText": "Move the default to the initializer and make this @NotNull\nprivate String jsonPointer = \"\";\n@NotNull\npublic String getJsonPointer()\n{\n    return jsonPointer;\n}", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620620487", "createdAt": "2021-04-26T20:20:56Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -42,6 +44,32 @@ public S3SecurityMappingConfig setConfigFile(File configFile)\n         return this;\n     }\n \n+    public Optional<String> getConfigUri()\n+    {\n+        return Optional.ofNullable(configUri);\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.config-uri\")\n+    @ConfigDescription(\"URI returning the security mappings as JSON\")\n+    public S3SecurityMappingConfig setConfigUri(String configUri)\n+    {\n+        this.configUri = configUri;\n+        return this;\n+    }\n+\n+    public String getJSONPointer()\n+    {\n+        return jsonPointer == null ? \"\" : jsonPointer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTM3MDc2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMToxOTozN1rOJP57OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yN1QxMTo1Nzo1M1rOJQXQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY1NzQ2NA==", "bodyText": "This will cause isProviderAvailable() to fail (since this method cannot return zero)", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620657464", "createdAt": "2021-04-26T21:19:37Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.util.List;\n+\n+public class S3SecurityMappingsProviderFactory\n+{\n+    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n+\n+    private S3SecurityMappingsProviderFactory()\n+    {}\n+\n+    private static long getNumberOfMatchingProviders(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).count();\n+    }\n+\n+    public static S3SecurityMappingsProvider createMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        long matching = getNumberOfMatchingProviders(config);\n+        if (matching == 0) {\n+            throw new IllegalArgumentException(\"No provider available for current hive.s3.security-mapping configuration. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTAwNTkxNQ==", "bodyText": "Sorry, I do not fully understand your comment. isProivderAvailable() should return a boolean indicating if a single, unambiguous provider can be created. Of course, we cannot force devs to call this method first before calling createMappingsProvider(...). Here I wanted to distinguish between ambigous configuration and no provider configured at all as different error causes.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r621005915", "createdAt": "2021-04-27T08:58:35Z", "author": {"login": "clemensvonschwerin"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.util.List;\n+\n+public class S3SecurityMappingsProviderFactory\n+{\n+    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n+\n+    private S3SecurityMappingsProviderFactory()\n+    {}\n+\n+    private static long getNumberOfMatchingProviders(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).count();\n+    }\n+\n+    public static S3SecurityMappingsProvider createMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        long matching = getNumberOfMatchingProviders(config);\n+        if (matching == 0) {\n+            throw new IllegalArgumentException(\"No provider available for current hive.s3.security-mapping configuration. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY1NzQ2NA=="}, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTEzODEzMw==", "bodyText": "I guess it does not matter anyways, because I removed S3SecurityMappingsProviderFactory.java completely in favour of setup via airlift & binders as you suggested in your comment about using airlift's HttpClient.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r621138133", "createdAt": "2021-04-27T11:57:53Z", "author": {"login": "clemensvonschwerin"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.util.List;\n+\n+public class S3SecurityMappingsProviderFactory\n+{\n+    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n+\n+    private S3SecurityMappingsProviderFactory()\n+    {}\n+\n+    private static long getNumberOfMatchingProviders(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).count();\n+    }\n+\n+    public static S3SecurityMappingsProvider createMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        long matching = getNumberOfMatchingProviders(config);\n+        if (matching == 0) {\n+            throw new IllegalArgumentException(\"No provider available for current hive.s3.security-mapping configuration. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY1NzQ2NA=="}, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTM4NjYzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMToyMzozMFrOJP6ELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMToyMzozMFrOJP6ELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY1OTc1Ng==", "bodyText": "You can move this into S3SecurityMappingConfig to have a better user experience\n@AssertTrue(message = \"Cannot set both hive.s3.security-mapping.config-file and hive.s3.security-mapping.config-uri\")\npublic boolean atMostOneProvider()\n{\n    return getConfigFile() == null || getConfigUri() == null;\n}", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620659756", "createdAt": "2021-04-26T21:23:30Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProviderFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.util.List;\n+\n+public class S3SecurityMappingsProviderFactory\n+{\n+    private static final Logger log = Logger.get(S3SecurityMappingsProviderFactory.class);\n+\n+    private S3SecurityMappingsProviderFactory()\n+    {}\n+\n+    private static long getNumberOfMatchingProviders(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        return providers.stream().filter(S3SecurityMappingsProvider::checkPreconditions).count();\n+    }\n+\n+    public static S3SecurityMappingsProvider createMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        List<S3SecurityMappingsProvider> providers = List.of(new FileBasedS3SecurityMappingsProvider(config), new UriBasedS3SecurityMappingsProvider(config));\n+        long matching = getNumberOfMatchingProviders(config);\n+        if (matching == 0) {\n+            throw new IllegalArgumentException(\"No provider available for current hive.s3.security-mapping configuration. \" +\n+                    \"Try to set either hive.s3.security-mapping.config-file or hive.s3.security-mapping.config-uri.\");\n+        }\n+        else if (matching > 1) {\n+            throw new IllegalArgumentException(\"Ambiguous provider configuration in hive.s3.security-mapping. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTU3OTE0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMjoxNDo1NFrOJP7vfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMjoxNDo1NFrOJP7vfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY4NzIyOQ==", "bodyText": "We should really use the Airlift HTTP client here, like we do in the rest of Trino, since it integrates with the config system and provides full support for HTTPS configuration rather than relying on JVM defaults. It may feel like overkill here, but provides consistency and makes it more future proof.\nYou'd do this by changing the bindings in HiveS3Module to bind the provider conditionally and inject S3SecurityMappingsProvider rather than having S3SecurityMappingsProviderFactory. Something like this\nprivate void bindSecurityMapping(Binder binder)\n{\n    if (buildConfigObject(S3SecurityMappingConfig.class).getConfigFile().isPresent()) {\n        binder.bind(S3SecurityMappingsProvider).to(FileBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n    }\n    else if (buildConfigObject(S3SecurityMappingConfig.class).getConfigUri().isPresent()) {\n        binder.bind(S3SecurityMappingsProvider).to(UriBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n        httpClientBinder(binder).bindHttpClient(\"s3SecurityMapping\", ForS3SecurityMapping.class)\n                .withConfigDefaults(config -> config\n                        .setRequestTimeout(10, SECONDS)\n                        .setSelectorCount(1)\n                        .setMinThreads(1);\n                });\n    }\n    else {\n        return;\n    }\n\n    newSetBinder(binder, DynamicConfigurationProvider.class).addBinding()\n            .to(S3SecurityMappingConfigurationProvider.class).in(Scopes.SINGLETON);\n\n    checkArgument(!buildConfigObject(HiveConfig.class).isS3SelectPushdownEnabled(), \"S3 security mapping is not compatible with S3 Select pushdown\");\n    checkArgument(!buildConfigObject(RubixEnabledConfig.class).isCacheEnabled(), \"S3 security mapping is not compatible with Hive caching\");\n}\nSee io.trino.server.security.jwt.JwkService for a simple example of using the client. You'll need to add an annotation ForS3SecurityMapping to qualify the client for injecting (just copy ForJwk). Using createStringResponseHandler() is probably good for this, just like Jwks.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620687229", "createdAt": "2021-04-26T22:14:54Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+    }\n+\n+    @Override\n+    protected String getRawJSONString()\n+    {\n+        String urlString = config.getConfigUri().orElseThrow(() -> new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\"));\n+        try {\n+            URL url = new URL(urlString);\n+            HttpURLConnection con = (HttpURLConnection) url.openConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTYxMzE3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMjoyNTozMVrOJP8C8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMjoyNTozMVrOJP8C8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY5MjIwOA==", "bodyText": "This is an internal JDK API that we shouldn't use. See TestJwkService for how to use TestingHttpClient to test the code after switching to Airlift HTTP client.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620692208", "createdAt": "2021-04-26T22:25:31Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.sun.net.httpserver.HttpServer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyOTYxNTYyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMapping.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMjoyNjoxNlrOJP8EWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMjoyNjoxNlrOJP8EWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY5MjU2OQ==", "bodyText": "Please revert this change, since it's an unrelated refactoring / code organization and not logically part of this PR.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r620692569", "createdAt": "2021-04-26T22:26:16Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMapping.java", "diffHunk": "@@ -96,6 +96,25 @@ public S3SecurityMapping(\n         this.endpoint = requireNonNull(endpoint, \"endpoint is null\");\n     }\n \n+    private static Predicate<URI> prefixPredicate(URI prefix)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab47b6d9ee46e968b3539a1170a9d08076e52e33"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzA4MjE1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1NTozNlrOJWBxug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1NTozNlrOJWBxug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3NzU2Mg==", "bodyText": "Please leave this method in the original location, as we typically put private methods at the end of the file (but before any nested classes)", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627077562", "createdAt": "2021-05-06T04:55:36Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -16,23 +16,38 @@\n import com.google.inject.Binder;\n import com.google.inject.Scopes;\n import io.airlift.configuration.AbstractConfigurationAwareModule;\n+import io.airlift.units.Duration;\n import io.trino.plugin.hive.ConfigurationInitializer;\n import io.trino.plugin.hive.DynamicConfigurationProvider;\n import io.trino.plugin.hive.HiveConfig;\n import io.trino.plugin.hive.rubix.RubixEnabledConfig;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hive.common.JavaUtils;\n \n+import java.util.concurrent.TimeUnit;\n+\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.inject.multibindings.Multibinder.newSetBinder;\n import static io.airlift.configuration.ConfigBinder.configBinder;\n+import static io.airlift.http.client.HttpClientBinder.httpClientBinder;\n import static org.weakref.jmx.guice.ExportBinder.newExporter;\n \n public class HiveS3Module\n         extends AbstractConfigurationAwareModule\n {\n     public static final String EMR_FS_CLASS_NAME = \"com.amazon.ws.emr.hadoop.fs.EmrFileSystem\";\n \n+    private static void validateEmrFsClass()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzA4NjUyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1NzozMFrOJWB0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1NzozMFrOJWB0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3ODE4OQ==", "bodyText": "This class is only bound if the config file is present, so we can validate this in the constructor:\nconfigFile = config.getConfigFile().orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627078189", "createdAt": "2021-05-06T04:57:30Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static java.lang.String.format;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+        configFile = config.getConfigFile().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzA4NzAwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1Nzo0OFrOJWB0eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1Nzo0OFrOJWB0eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3ODI2NA==", "bodyText": "Nit: we normally name exceptions e", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627078264", "createdAt": "2021-05-06T04:57:48Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static java.lang.String.format;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+        configFile = config.getConfigFile().orElse(null);\n+    }\n+\n+    @Override\n+    public String getRawJsonString()\n+    {\n+        if (this.configFile == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-file is not set\");\n+        }\n+        log.info(\"Retrieving config from file %s\", configFile);\n+        try {\n+            return Files.readString(configFile.toPath());\n+        }\n+        catch (IOException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzA4OTUyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1ODo1N1rOJWB16Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1ODo1N1rOJWB16Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3ODYzMw==", "bodyText": "Rethrow IOException as UncheckedIOException and simply propagate the cause\nthrow new UncheckedIOException(\"Failed to read file: \" + configFile, e);", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627078633", "createdAt": "2021-05-06T04:58:57Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static java.lang.String.format;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+        configFile = config.getConfigFile().orElse(null);\n+    }\n+\n+    @Override\n+    public String getRawJsonString()\n+    {\n+        if (this.configFile == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-file is not set\");\n+        }\n+        log.info(\"Retrieving config from file %s\", configFile);\n+        try {\n+            return Files.readString(configFile.toPath());\n+        }\n+        catch (IOException ex) {\n+            throw new IllegalStateException(format(\"Could not read file '%s', cause: '%s'\", configFile.toPath(), ex.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzA5MDYyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1OTozMFrOJWB2mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNDo1OTozMFrOJWB2mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3ODgxMA==", "bodyText": "This is now unused. Please remove everywhere", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627078810", "createdAt": "2021-05-06T04:59:30Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final String jsonPointer;\n+\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.jsonPointer = requireNonNull(config.getJSONPointer());\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            JsonNode node = JsonUtils.parseJson(jsonString.getBytes(StandardCharsets.UTF_8));\n+            JsonNode mappingsNode = node.at(this.jsonPointer);\n+            return JsonUtils.OBJECT_MAPPER.treeToValue(mappingsNode, S3SecurityMappings.class);\n+        }\n+        catch (JsonProcessingException e) {\n+            throw new IllegalArgumentException(format(\"Failed to parse JSON for S3 security mappings: %s\", jsonString), e);\n+        }\n+    }\n+\n+    protected abstract String getRawJsonString();\n+\n+    public abstract boolean checkPreconditions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzA5MjMwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/ForS3SecurityMapping.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMDowMFrOJWB3eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMDowMFrOJWB3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3OTAzMw==", "bodyText": "Nit: write empty annotations like\npublic @interface ForS3SecurityMapping {}", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627079033", "createdAt": "2021-05-06T05:00:00Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/ForS3SecurityMapping.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.google.inject.BindingAnnotation;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Retention(RUNTIME)\n+@Target({FIELD, PARAMETER, METHOD})\n+@BindingAnnotation\n+public @interface ForS3SecurityMapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzA5MzgzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMDoyOFrOJWB4TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMDoyOFrOJWB4TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3OTI0NQ==", "bodyText": "This should be javax.validation.constraints.NotNull", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627079245", "createdAt": "2021-05-06T05:00:28Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -17,13 +17,18 @@\n import io.airlift.configuration.ConfigDescription;\n import io.airlift.configuration.validation.FileExists;\n import io.airlift.units.Duration;\n+import org.codehaus.commons.nullanalysis.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzA5NTQ2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMToxNFrOJWB5Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMToxNFrOJWB5Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3OTUwNg==", "bodyText": "Our code style is to name things in camel case where only the first letter is capitalized, including acronyms, so write this as getJsonPointer", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627079506", "createdAt": "2021-05-06T05:01:14Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -42,6 +47,39 @@ public S3SecurityMappingConfig setConfigFile(File configFile)\n         return this;\n     }\n \n+    public Optional<String> getConfigUri()\n+    {\n+        return Optional.ofNullable(configUri);\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.config-uri\")\n+    @ConfigDescription(\"URI returning the security mappings as JSON\")\n+    public S3SecurityMappingConfig setConfigUri(String configUri)\n+    {\n+        this.configUri = configUri;\n+        return this;\n+    }\n+\n+    @AssertTrue(message = \"Cannot set both hive.s3.security-mapping.config-file and hive.s3.security-mapping.config-uri\")\n+    public boolean atMostOneProvider()\n+    {\n+        return getConfigFile().isEmpty() || getConfigUri().isEmpty();\n+    }\n+\n+    @NotNull\n+    public String getJSONPointer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzA5NTg5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMToyMlrOJWB5jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMToyMlrOJWB5jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA3OTU2NQ==", "bodyText": "setJsonPointer", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627079565", "createdAt": "2021-05-06T05:01:22Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfig.java", "diffHunk": "@@ -42,6 +47,39 @@ public S3SecurityMappingConfig setConfigFile(File configFile)\n         return this;\n     }\n \n+    public Optional<String> getConfigUri()\n+    {\n+        return Optional.ofNullable(configUri);\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.config-uri\")\n+    @ConfigDescription(\"URI returning the security mappings as JSON\")\n+    public S3SecurityMappingConfig setConfigUri(String configUri)\n+    {\n+        this.configUri = configUri;\n+        return this;\n+    }\n+\n+    @AssertTrue(message = \"Cannot set both hive.s3.security-mapping.config-file and hive.s3.security-mapping.config-uri\")\n+    public boolean atMostOneProvider()\n+    {\n+        return getConfigFile().isEmpty() || getConfigUri().isEmpty();\n+    }\n+\n+    @NotNull\n+    public String getJSONPointer()\n+    {\n+        return jsonPointer;\n+    }\n+\n+    @Config(\"hive.s3.security-mapping.json-pointer\")\n+    @ConfigDescription(\"JSON pointer (RFC 6901) to mappings inside JSON config\")\n+    public S3SecurityMappingConfig setJSONPointer(String jsonPointer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzEwMjA0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMzo1N1rOJWB82A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowMzo1N1rOJWB82A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MDQwOA==", "bodyText": "Add a utility method jsonTreeToValue to JsonUtils for this and make OBJECT_MAPPER private", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627080408", "createdAt": "2021-05-06T05:03:57Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final String jsonPointer;\n+\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.jsonPointer = requireNonNull(config.getJSONPointer());\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            JsonNode node = JsonUtils.parseJson(jsonString.getBytes(StandardCharsets.UTF_8));\n+            JsonNode mappingsNode = node.at(this.jsonPointer);\n+            return JsonUtils.OBJECT_MAPPER.treeToValue(mappingsNode, S3SecurityMappings.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzEwNjgxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowNjoyMVrOJWB_nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowNjoyMVrOJWB_nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MTExOQ==", "bodyText": "Change parseJson to take a String so that callers don't need to do conversion to bytes. ObjectMapper has a readTree overload that takes String directly.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627081119", "createdAt": "2021-05-06T05:06:21Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final String jsonPointer;\n+\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.jsonPointer = requireNonNull(config.getJSONPointer());\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            JsonNode node = JsonUtils.parseJson(jsonString.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzEwOTAzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowNzoxNFrOJWCAvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowNzoxNFrOJWCAvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MTQwNw==", "bodyText": "throw new UncheckedIOException(\"Failed to parse JSON for S3 security mappings: \" + jsonString, e);", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627081407", "createdAt": "2021-05-06T05:07:14Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Supplier;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider\n+        implements Supplier<S3SecurityMappings>\n+{\n+    protected final String jsonPointer;\n+\n+    protected S3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.jsonPointer = requireNonNull(config.getJSONPointer());\n+    }\n+\n+    protected S3SecurityMappings parse(String jsonString)\n+    {\n+        try {\n+            JsonNode node = JsonUtils.parseJson(jsonString.getBytes(StandardCharsets.UTF_8));\n+            JsonNode mappingsNode = node.at(this.jsonPointer);\n+            return JsonUtils.OBJECT_MAPPER.treeToValue(mappingsNode, S3SecurityMappings.class);\n+        }\n+        catch (JsonProcessingException e) {\n+            throw new IllegalArgumentException(format(\"Failed to parse JSON for S3 security mappings: %s\", jsonString), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzExMjA5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowODo0MFrOJWCCbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowODo0MFrOJWCCbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MTgzOQ==", "bodyText": "Make final", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627081839", "createdAt": "2021-05-06T05:08:40Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzExNDQzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowOTozNVrOJWCDsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowOTozNVrOJWCDsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjE2Mw==", "bodyText": "This class should only be constructed when the URI is present\nthis.configUri = config.getConfigUri().orElseThrow(() -> new IllegalArgumentException(\"configUri not set\"));", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082163", "createdAt": "2021-05-06T05:09:35Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzExNDc5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowOTo0N1rOJWCD8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNTowOTo0N1rOJWCD8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjIyNQ==", "bodyText": "this.httpClient = requireNonNull(httpClient, \"httpClient is null\");", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082225", "createdAt": "2021-05-06T05:09:47Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzExNTY3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxMDoxM1rOJWCEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxMDoxM1rOJWCEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjM1Nw==", "bodyText": "Not needed after moving validation to constructor", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082357", "createdAt": "2021-05-06T05:10:13Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static java.lang.String.format;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        super(config);\n+        configFile = config.getConfigFile().orElse(null);\n+    }\n+\n+    @Override\n+    public String getRawJsonString()\n+    {\n+        if (this.configFile == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzExNjE2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxMDozMFrOJWCExg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxMDozMFrOJWCExg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjQzOA==", "bodyText": "Not needed after moving validation to constructor", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082438", "createdAt": "2021-05-06T05:10:30Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzExNzIwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxMDo1OFrOJWCFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxMDo1OFrOJWCFXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4MjU4OQ==", "bodyText": "We normally only use this. in the constructor for assignments (often required due to fields and parameters having the same name)", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627082589", "createdAt": "2021-05-06T05:10:58Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        }\n+        Request request = prepareGet().setUri(this.configUri).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzEyNzc2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxNTo1OVrOJWCLVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxNTo1OVrOJWCLVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NDExNg==", "bodyText": "I think we only want to accept 200, as anything else won't have a body\nif (status != HttpStatusOK.code()) {\n    throw new RuntimeException(format(\"Unexpected status code %s from %s\", status, configUri));\n}", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627084116", "createdAt": "2021-05-06T05:15:59Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        }\n+        Request request = prepareGet().setUri(this.configUri).build();\n+        StringResponseHandler.StringResponse response;\n+        try {\n+            response = httpClient.execute(request, createStringResponseHandler());\n+            int status = response.getStatusCode();\n+            if (200 <= status && status <= 299) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzEyODM2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxNjoxM1rOJWCLsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxNjoxM1rOJWCLsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NDIwOA==", "bodyText": "We shouldn't need to do this, as the HTTP client already throws a good error message on failure", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627084208", "createdAt": "2021-05-06T05:16:13Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        }\n+        Request request = prepareGet().setUri(this.configUri).build();\n+        StringResponseHandler.StringResponse response;\n+        try {\n+            response = httpClient.execute(request, createStringResponseHandler());\n+            int status = response.getStatusCode();\n+            if (200 <= status && status <= 299) {\n+                return response.getBody();\n+            }\n+            throw new IllegalStateException(format(\"Request to '%s' returned unexpected status code: '%d'\", this.configUri, status));\n+        }\n+        catch (RuntimeException ex) {\n+            throw new IllegalStateException(format(\"Error while sending get request to '%s'\", this.configUri), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzEyOTE1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxNjozM1rOJWCMFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxNjozM1rOJWCMFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NDMxMQ==", "bodyText": "Nit: status import StringResponse", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627084311", "createdAt": "2021-05-06T05:16:33Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/UriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler;\n+\n+import java.net.URI;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static java.lang.String.format;\n+\n+public class UriBasedS3SecurityMappingsProvider\n+        extends S3SecurityMappingsProvider\n+{\n+    private final URI configUri;\n+    private HttpClient httpClient;\n+\n+    public UriBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config, @ForS3SecurityMapping HttpClient httpClient)\n+    {\n+        super(config);\n+        this.configUri = config.getConfigUri().map(URI::create).orElse(null);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    protected String getRawJsonString()\n+    {\n+        if (this.configUri == null) {\n+            throw new IllegalArgumentException(\"hive.s3.security-mapping.config-uri file is not set\");\n+        }\n+        Request request = prepareGet().setUri(this.configUri).build();\n+        StringResponseHandler.StringResponse response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzEzMDY2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestS3SecurityMappingConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxNzoxOFrOJWCNAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToxNzoxOFrOJWCNAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NDU0NQ==", "bodyText": "This isn't needed as the testDefaults method already does this", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627084545", "createdAt": "2021-05-06T05:17:18Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestS3SecurityMappingConfig.java", "diffHunk": "@@ -26,20 +26,30 @@\n import static io.airlift.configuration.testing.ConfigAssertions.assertRecordedDefaults;\n import static io.airlift.configuration.testing.ConfigAssertions.recordDefaults;\n import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.testng.Assert.assertEquals;\n \n public class TestS3SecurityMappingConfig\n {\n     @Test\n     public void testDefaults()\n     {\n         assertRecordedDefaults(recordDefaults(S3SecurityMappingConfig.class)\n+                .setConfigUri(null)\n+                .setJSONPointer(\"\")\n                 .setConfigFile(null)\n                 .setRoleCredentialName(null)\n                 .setKmsKeyIdCredentialName(null)\n                 .setRefreshPeriod(null)\n                 .setColonReplacement(null));\n     }\n \n+    @Test\n+    public void testDefaultValues()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk3MzEzNjk0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToyMDoyNlrOJWCQ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwNToyMDoyNlrOJWCQ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzA4NTUyMA==", "bodyText": "I don't think AtomicReference is needed here. Doing this as\nResponse response = ...\nnew TestingHttpClient(request -> response)\nshould work the same", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r627085520", "createdAt": "2021-05-06T05:20:26Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.Response;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import org.testng.annotations.Test;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestUriBasedS3SecurityMappingsProvider\n+{\n+    private static final String MOCK_MAPPINGS_RESPONSE =\n+            \"{\\\"mappings\\\": [{\\\"iamRole\\\":\\\"arn:aws:iam::test\\\",\\\"user\\\":\\\"test\\\"}]}\";\n+\n+    @Test\n+    public void testGetRawJSON()\n+    {\n+        AtomicReference<Response> response = new AtomicReference<>(mockResponse(HttpStatus.OK, JSON_UTF_8, MOCK_MAPPINGS_RESPONSE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4731029d37f59c8a5ffa7e08726b9071b1531ec"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAxNDk0NjE3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/sphinx/connector/hive-s3.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xN1QwODozNTozMFrOJb_ytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMVQxOTo1NDoxNlrOJfrW0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzMzNjUwMQ==", "bodyText": "Can we make hive.s3.security-mapping.config-file to accept URI? Then you don't need to have two properties to maintain. Also the way we read JSON is quite reused (for example for file based access controls) so if your change could be generic enough other places could also benefit from that.\nNotice that we already are doing this where one can give an URI for http-server.authentication.jwt.key-file.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r633336501", "createdAt": "2021-05-17T08:35:30Z", "author": {"login": "kokosing"}, "path": "docs/src/main/sphinx/connector/hive-s3.rst", "diffHunk": "@@ -189,7 +189,11 @@ In addition to the rules above, the default mapping can contain the optional\n \n If no mapping entry matches and no default is configured, the access is denied.\n \n-Example JSON configuration file:\n+The configuration JSON can either be retrieved from a file specified via\n+``hive.s3.security-mapping.config-file`` or from a REST-endpoint specified via\n+``hive.s3.security-mapping.config-uri``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ab3e46a19cca6f6abbe721b9bfd102c6493e3ea"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzYwMzY0NA==", "bodyText": "I agree, having one option definitely has its benefits. Unfortunately, I have a very tight schedule at the moment and won't be able to work at the PR. Could we maybe have a followup to merge these options? What is your take on the one option vs two options @electrum ?", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r633603644", "createdAt": "2021-05-17T14:53:54Z", "author": {"login": "clemensvonschwerin"}, "path": "docs/src/main/sphinx/connector/hive-s3.rst", "diffHunk": "@@ -189,7 +189,11 @@ In addition to the rules above, the default mapping can contain the optional\n \n If no mapping entry matches and no default is configured, the access is denied.\n \n-Example JSON configuration file:\n+The configuration JSON can either be retrieved from a file specified via\n+``hive.s3.security-mapping.config-file`` or from a REST-endpoint specified via\n+``hive.s3.security-mapping.config-uri``.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzMzNjUwMQ=="}, "originalCommit": {"oid": "9ab3e46a19cca6f6abbe721b9bfd102c6493e3ea"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzE5NTk4Ng==", "bodyText": "My apologies, I've been very busy and haven't followed up here. I appreciate your patience on this. Let me try updating it to use the existing config and get this merged. I do like the idea of a single config.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r637195986", "createdAt": "2021-05-21T19:54:16Z", "author": {"login": "electrum"}, "path": "docs/src/main/sphinx/connector/hive-s3.rst", "diffHunk": "@@ -189,7 +189,11 @@ In addition to the rules above, the default mapping can contain the optional\n \n If no mapping entry matches and no default is configured, the access is denied.\n \n-Example JSON configuration file:\n+The configuration JSON can either be retrieved from a file specified via\n+``hive.s3.security-mapping.config-file`` or from a REST-endpoint specified via\n+``hive.s3.security-mapping.config-uri``.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzMzNjUwMQ=="}, "originalCommit": {"oid": "9ab3e46a19cca6f6abbe721b9bfd102c6493e3ea"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI5NTcyMzU1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxMzoyMjo1MVrOKEQ8sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxMzoyMjo1MVrOKEQ8sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MDYyNQ==", "bodyText": "invert the condition, so else block is not needed", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r675560625", "createdAt": "2021-07-23T13:22:51Z", "author": {"login": "kokosing"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -61,13 +65,29 @@ protected void setup(Binder binder)\n \n     private void bindSecurityMapping(Binder binder)\n     {\n-        if (buildConfigObject(S3SecurityMappingConfig.class).getConfigFile().isPresent()) {\n-            checkArgument(!buildConfigObject(HiveConfig.class).isS3SelectPushdownEnabled(), \"S3 security mapping is not compatible with S3 Select pushdown\");\n-            checkArgument(!buildConfigObject(RubixEnabledConfig.class).isCacheEnabled(), \"S3 security mapping is not compatible with Hive caching\");\n-\n-            newSetBinder(binder, DynamicConfigurationProvider.class).addBinding()\n-                    .to(S3SecurityMappingConfigurationProvider.class).in(Scopes.SINGLETON);\n+        S3SecurityMappingConfig configuration = buildConfigObject(S3SecurityMappingConfig.class);\n+        if (configuration.getConfigFilePath().isPresent()) {\n+            if (isHttp(configuration)) {\n+                binder.bind(S3SecurityMappingsProvider.class).to(UriBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n+                httpClientBinder(binder).bindHttpClient(\"s3SecurityMapping\", ForS3SecurityMapping.class)\n+                        .withConfigDefaults(config -> config\n+                                .setRequestTimeout(Duration.succinctDuration(10, TimeUnit.SECONDS))\n+                                .setSelectorCount(1)\n+                                .setMinThreads(1));\n+            }\n+            else {\n+                binder.bind(S3SecurityMappingsProvider.class).to(FileBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n+            }\n         }\n+        else {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9646e7260db88dcc87f0a9d767c514d905556d8e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI5NTcyNjg1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfigurationProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxMzoyMzozOFrOKEQ-uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxMzoyMzozOFrOKEQ-uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MTE0NQ==", "bodyText": "Why removed?", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r675561145", "createdAt": "2021-07-23T13:23:38Z", "author": {"login": "kokosing"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingConfigurationProvider.java", "diffHunk": "@@ -57,35 +55,33 @@\n     private final Optional<String> colonReplacement;\n \n     @Inject\n-    public S3SecurityMappingConfigurationProvider(S3SecurityMappingConfig config)\n+    public S3SecurityMappingConfigurationProvider(S3SecurityMappingConfig config, S3SecurityMappingsProvider mappingsProvider)\n     {\n-        this(getMappings(config), config.getRoleCredentialName(), config.getKmsKeyIdCredentialName(), config.getColonReplacement());\n+        this(getMappings(config, mappingsProvider), config.getRoleCredentialName(), config.getKmsKeyIdCredentialName(), config.getColonReplacement());\n     }\n \n-    private static Supplier<S3SecurityMappings> getMappings(S3SecurityMappingConfig config)\n+    public S3SecurityMappingConfigurationProvider(Supplier<S3SecurityMappings> mappings, Optional<String> roleCredentialName, Optional<String> kmsKeyIdCredentialName, Optional<String> colonReplacement)\n+    {\n+        this.mappings = requireNonNull(mappings, \"mappings is null\");\n+        this.roleCredentialName = requireNonNull(roleCredentialName, \"roleCredentialName is null\");\n+        this.kmsKeyIdCredentialName = requireNonNull(kmsKeyIdCredentialName, \"kmsKeyIdCredentialName is null\");\n+        this.colonReplacement = requireNonNull(colonReplacement, \"colonReplacement is null\");\n+    }\n+\n+    private static Supplier<S3SecurityMappings> getMappings(S3SecurityMappingConfig config, S3SecurityMappingsProvider supplier)\n     {\n-        File configFile = config.getConfigFile().orElseThrow(() -> new IllegalArgumentException(\"config file not set\"));\n-        Supplier<S3SecurityMappings> supplier = () -> parseJson(configFile.toPath(), S3SecurityMappings.class);\n         if (config.getRefreshPeriod().isEmpty()) {\n             return Suppliers.memoize(supplier::get);\n         }\n         return Suppliers.memoizeWithExpiration(\n                 () -> {\n-                    log.info(\"Refreshing S3 security mapping configuration from %s\", configFile);\n+                    log.info(\"Refreshing S3 security mapping configuration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9646e7260db88dcc87f0a9d767c514d905556d8e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI5NTczNTA1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxMzoyNTozM1rOKERDvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQxMzoyNDozOVrOKFQZNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MjQzMQ==", "bodyText": "Can we use composition instead of inheritance here?", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r675562431", "createdAt": "2021-07-23T13:25:33Z", "author": {"login": "kokosing"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9646e7260db88dcc87f0a9d767c514d905556d8e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQxMjkxMw==", "bodyText": "How exactly would you like that to look? Remove abstract from S3SecurityMappingsProvider and create a new interface for UriBasedS3SecurityMappingsProvider and FileBasedS3SecurityMappingsProvider to implement?", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r676412913", "createdAt": "2021-07-26T08:49:58Z", "author": {"login": "clemensvonschwerin"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MjQzMQ=="}, "originalCommit": {"oid": "9646e7260db88dcc87f0a9d767c514d905556d8e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjQ1NDE2MA==", "bodyText": "I think it is fine to have an interface for S3SecurityMappingsProvider that is only implements Supplier<S3SecurityMappings>, but then when implementing the other classes we could extract the common code to a separate class that is used from UriBasedS3SecurityMappingsProvider and FileBasedS3SecurityMappingsProvider", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r676454160", "createdAt": "2021-07-26T09:48:05Z", "author": {"login": "kokosing"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MjQzMQ=="}, "originalCommit": {"oid": "9646e7260db88dcc87f0a9d767c514d905556d8e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjYwMDExNg==", "bodyText": "Alright, I will update the PR accordingly", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r676600116", "createdAt": "2021-07-26T13:24:39Z", "author": {"login": "clemensvonschwerin"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/S3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.trino.plugin.base.util.JsonUtils;\n+\n+import java.util.function.Supplier;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class S3SecurityMappingsProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTU2MjQzMQ=="}, "originalCommit": {"oid": "9646e7260db88dcc87f0a9d767c514d905556d8e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MTI3NjQyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/sphinx/connector/hive-s3.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wM1QxMDo0MzowMlrOKdR71A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNlQxMDoxODoyOVrOKeOqBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MTE4OA==", "bodyText": "Please structure commits according to: https://github.com/trinodb/trino/blob/master/DEVELOPMENT.md#git-merge-strategy\nGit history matters for us a lot, and this is also a matter of code review.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r701791188", "createdAt": "2021-09-03T10:43:02Z", "author": {"login": "kokosing"}, "path": "docs/src/main/sphinx/connector/hive-s3.rst", "diffHunk": "@@ -169,7 +169,7 @@ The security mapping must provide one or more configuration settings:\n   credential. If list cotains \"*\", then any key can be specified via extra credential.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjc4NjA1Mg==", "bodyText": "Sure, after all your comments are resolved I will squash all my commits into a single one and commit that one", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r702786052", "createdAt": "2021-09-06T10:18:29Z", "author": {"login": "cvs-mckinsey"}, "path": "docs/src/main/sphinx/connector/hive-s3.rst", "diffHunk": "@@ -169,7 +169,7 @@ The security mapping must provide one or more configuration settings:\n   credential. If list cotains \"*\", then any key can be specified via extra credential.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MTE4OA=="}, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MTI4NDE0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wM1QxMDo0NToxNVrOKdSAcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNlQxMDoxODo1MFrOKeOqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MjM2OA==", "bodyText": "static import for format", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r701792368", "createdAt": "2021-09-03T10:45:15Z", "author": {"login": "kokosing"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.google.inject.Inject;\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        implements S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+    private final S3SecurityMappingsParser parser;\n+\n+    @Inject\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjc4NjI0NA==", "bodyText": "Updated", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r702786244", "createdAt": "2021-09-06T10:18:50Z", "author": {"login": "cvs-mckinsey"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.google.inject.Inject;\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        implements S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+    private final S3SecurityMappingsParser parser;\n+\n+    @Inject\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MjM2OA=="}, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MTI5MzMwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wM1QxMDo0Nzo0OFrOKdSGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNlQxMDoxNDo1MVrOKeOghQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MzgxMg==", "bodyText": "are we going to download and load mapping every single call? It might contribute the query latency. I think we need to have some kind of caching with usage of Suppliers.memoizeWithExpire for this.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r701793812", "createdAt": "2021-09-03T10:47:48Z", "author": {"login": "kokosing"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.google.inject.Inject;\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        implements S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+    private final S3SecurityMappingsParser parser;\n+\n+    @Inject\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));\n+        }\n+        this.parser = new S3SecurityMappingsParser(config);\n+    }\n+\n+    private String getRawJsonString()\n+    {\n+        log.info(\"Retrieving config from file %s\", configFile);\n+        try {\n+            return Files.readString(configFile.toPath());\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(\"Failed to read file: \" + configFile, e);\n+        }\n+    }\n+\n+    @Override\n+    public S3SecurityMappings get()\n+    {\n+        return parser.parseJSONString(getRawJsonString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjc4MzYyMQ==", "bodyText": "Isn't that already handled by S3SecurityMappingConfigurationProvider::getMappings(...) ?", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r702783621", "createdAt": "2021-09-06T10:14:51Z", "author": {"login": "cvs-mckinsey"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/FileBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import com.google.inject.Inject;\n+import io.airlift.log.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+\n+public class FileBasedS3SecurityMappingsProvider\n+        implements S3SecurityMappingsProvider\n+{\n+    private static final Logger log = Logger.get(FileBasedS3SecurityMappingsProvider.class);\n+    private final File configFile;\n+    private final S3SecurityMappingsParser parser;\n+\n+    @Inject\n+    public FileBasedS3SecurityMappingsProvider(S3SecurityMappingConfig config)\n+    {\n+        this.configFile = config.getConfigFilePath().map(File::new).orElseThrow(() -> new IllegalArgumentException(\"configFile not set\"));\n+        if (!configFile.exists()) {\n+            throw new IllegalArgumentException(String.format(\"configFile %s does not exist\", configFile.getAbsoluteFile()));\n+        }\n+        this.parser = new S3SecurityMappingsParser(config);\n+    }\n+\n+    private String getRawJsonString()\n+    {\n+        log.info(\"Retrieving config from file %s\", configFile);\n+        try {\n+            return Files.readString(configFile.toPath());\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(\"Failed to read file: \" + configFile, e);\n+        }\n+    }\n+\n+    @Override\n+    public S3SecurityMappings get()\n+    {\n+        return parser.parseJSONString(getRawJsonString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5MzgxMg=="}, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MTI5Njk0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wM1QxMDo0ODo1M1rOKdSIPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNlQxMDoxNjoxNlrOKeOkBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5NDM2NA==", "bodyText": "Why these are set to 1?", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r701794364", "createdAt": "2021-09-03T10:48:53Z", "author": {"login": "kokosing"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -61,13 +65,28 @@ protected void setup(Binder binder)\n \n     private void bindSecurityMapping(Binder binder)\n     {\n-        if (buildConfigObject(S3SecurityMappingConfig.class).getConfigFile().isPresent()) {\n-            checkArgument(!buildConfigObject(HiveConfig.class).isS3SelectPushdownEnabled(), \"S3 security mapping is not compatible with S3 Select pushdown\");\n-            checkArgument(!buildConfigObject(RubixEnabledConfig.class).isCacheEnabled(), \"S3 security mapping is not compatible with Hive caching\");\n+        S3SecurityMappingConfig configuration = buildConfigObject(S3SecurityMappingConfig.class);\n+        if (configuration.getConfigFilePath().isEmpty()) {\n+            return;\n+        }\n \n-            newSetBinder(binder, DynamicConfigurationProvider.class).addBinding()\n-                    .to(S3SecurityMappingConfigurationProvider.class).in(Scopes.SINGLETON);\n+        if (isHttp(configuration)) {\n+            binder.bind(S3SecurityMappingsProvider.class).to(UriBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n+            httpClientBinder(binder).bindHttpClient(\"s3SecurityMapping\", ForS3SecurityMapping.class)\n+                    .withConfigDefaults(config -> config\n+                            .setRequestTimeout(Duration.succinctDuration(10, TimeUnit.SECONDS))\n+                            .setSelectorCount(1)\n+                            .setMinThreads(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjc4NDUxNw==", "bodyText": "Taken from @electrum 's suggestion in #6210 (comment)\nIf you have any other suggestions I can update these values accordingly or just use the defaults.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r702784517", "createdAt": "2021-09-06T10:16:16Z", "author": {"login": "cvs-mckinsey"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -61,13 +65,28 @@ protected void setup(Binder binder)\n \n     private void bindSecurityMapping(Binder binder)\n     {\n-        if (buildConfigObject(S3SecurityMappingConfig.class).getConfigFile().isPresent()) {\n-            checkArgument(!buildConfigObject(HiveConfig.class).isS3SelectPushdownEnabled(), \"S3 security mapping is not compatible with S3 Select pushdown\");\n-            checkArgument(!buildConfigObject(RubixEnabledConfig.class).isCacheEnabled(), \"S3 security mapping is not compatible with Hive caching\");\n+        S3SecurityMappingConfig configuration = buildConfigObject(S3SecurityMappingConfig.class);\n+        if (configuration.getConfigFilePath().isEmpty()) {\n+            return;\n+        }\n \n-            newSetBinder(binder, DynamicConfigurationProvider.class).addBinding()\n-                    .to(S3SecurityMappingConfigurationProvider.class).in(Scopes.SINGLETON);\n+        if (isHttp(configuration)) {\n+            binder.bind(S3SecurityMappingsProvider.class).to(UriBasedS3SecurityMappingsProvider.class).in(Scopes.SINGLETON);\n+            httpClientBinder(binder).bindHttpClient(\"s3SecurityMapping\", ForS3SecurityMapping.class)\n+                    .withConfigDefaults(config -> config\n+                            .setRequestTimeout(Duration.succinctDuration(10, TimeUnit.SECONDS))\n+                            .setSelectorCount(1)\n+                            .setMinThreads(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5NDM2NA=="}, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ3MTMwMzgwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wM1QxMDo1MDo0NFrOKdSMXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wNlQxMDoxODo0MVrOKeOqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5NTQyMQ==", "bodyText": "No need to wrap lines here.", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r701795421", "createdAt": "2021-09-03T10:50:44Z", "author": {"login": "kokosing"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.Response;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestUriBasedS3SecurityMappingsProvider\n+{\n+    private static final String MOCK_MAPPINGS_RESPONSE =\n+            \"{\\\"mappings\\\": [{\\\"iamRole\\\":\\\"arn:aws:iam::test\\\",\\\"user\\\":\\\"test\\\"}]}\";\n+\n+    @Test\n+    public void testGetRawJSON()\n+    {\n+        final Response response = mockResponse(HttpStatus.OK, JSON_UTF_8, MOCK_MAPPINGS_RESPONSE);\n+        S3SecurityMappingConfig conf = new S3SecurityMappingConfig().setConfigFilePath(\"http://test:1234/api/endpoint\");\n+        UriBasedS3SecurityMappingsProvider provider =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjc4NjE3MA==", "bodyText": "Updated", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r702786170", "createdAt": "2021-09-06T10:18:41Z", "author": {"login": "cvs-mckinsey"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/s3/TestUriBasedS3SecurityMappingsProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.s3;\n+\n+import io.airlift.http.client.HttpStatus;\n+import io.airlift.http.client.Response;\n+import io.airlift.http.client.testing.TestingHttpClient;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static io.airlift.http.client.testing.TestingResponse.mockResponse;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestUriBasedS3SecurityMappingsProvider\n+{\n+    private static final String MOCK_MAPPINGS_RESPONSE =\n+            \"{\\\"mappings\\\": [{\\\"iamRole\\\":\\\"arn:aws:iam::test\\\",\\\"user\\\":\\\"test\\\"}]}\";\n+\n+    @Test\n+    public void testGetRawJSON()\n+    {\n+        final Response response = mockResponse(HttpStatus.OK, JSON_UTF_8, MOCK_MAPPINGS_RESPONSE);\n+        S3SecurityMappingConfig conf = new S3SecurityMappingConfig().setConfigFilePath(\"http://test:1234/api/endpoint\");\n+        UriBasedS3SecurityMappingsProvider provider =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTc5NTQyMQ=="}, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDUwNzI0NzgzOnYy", "diffSide": "RIGHT", "path": "lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/util/JsonUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xM1QwODoyMToyOFrOKiWiOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xM1QwODoyMToyOFrOKiWiOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzEwOTQzMg==", "bodyText": "Please rename jsonStr to just json", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r707109432", "createdAt": "2021-09-13T08:21:28Z", "author": {"login": "kokosing"}, "path": "lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/util/JsonUtils.java", "diffHunk": "@@ -50,13 +57,30 @@ private JsonUtils() {}\n         }\n     }\n \n+    public static JsonNode parseJson(String jsonStr)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908bfef8076aac93f3200e5f5bf5c8cb3264862f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDUwODYwMjk2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/sphinx/connector/hive-s3.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xM1QxMzowODo0M1rOKijOGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xM1QxMzo0NDo0N1rOKilJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzMxNzI3NA==", "bodyText": "Can you please format your commit message according to: https://github.com/trinodb/trino/blob/master/.github/DEVELOPMENT.md#format-git-commit-messages?", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r707317274", "createdAt": "2021-09-13T13:08:43Z", "author": {"login": "kokosing"}, "path": "docs/src/main/sphinx/connector/hive-s3.rst", "diffHunk": "@@ -169,7 +169,7 @@ The security mapping must provide one or more configuration settings:\n   credential. If list cotains \"*\", then any key can be specified via extra credential.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzM0ODkyMw==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/6210#discussion_r707348923", "createdAt": "2021-09-13T13:44:47Z", "author": {"login": "cvs-mckinsey"}, "path": "docs/src/main/sphinx/connector/hive-s3.rst", "diffHunk": "@@ -169,7 +169,7 @@ The security mapping must provide one or more configuration settings:\n   credential. If list cotains \"*\", then any key can be specified via extra credential.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzMxNzI3NA=="}, "originalCommit": null, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4487, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}