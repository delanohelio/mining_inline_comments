{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMTg1MzIy", "number": 4940, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo1NToxOVrOFBw_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTo0MDoxOFrOFCRrUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mzk1NTYzOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo1NToxOVrOIAldRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzo0NjoxOFrOIAnc6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4NDYxMg==", "bodyText": "Can you please provide some tests for this and for ignore?", "url": "https://github.com/trinodb/trino/pull/4940#discussion_r537484612", "createdAt": "2020-12-07T12:55:19Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -343,13 +350,32 @@ protected ResultSet getColumns(JdbcTableHandle tableHandle, DatabaseMetaData met\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        Optional<ColumnMapping> connectorMapping = jdbcTypeToPrestoType(typeHandle);\n-        if (connectorMapping.isPresent()) {\n-            return connectorMapping;\n+\n+        mapping = jdbcTypeToPrestoType(typeHandle);\n+        if (mapping.isPresent()) {\n+            switch (legacyGenericColumnMapping) {\n+                case ENABLE:\n+                    return mapping;\n+                case THROW:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxNzI5MA==", "bodyText": "No connector should allow test covering that, so i would need to have a whole new connector just for this test.", "url": "https://github.com/trinodb/trino/pull/4940#discussion_r537517290", "createdAt": "2020-12-07T13:46:18Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -343,13 +350,32 @@ protected ResultSet getColumns(JdbcTableHandle tableHandle, DatabaseMetaData met\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        Optional<ColumnMapping> connectorMapping = jdbcTypeToPrestoType(typeHandle);\n-        if (connectorMapping.isPresent()) {\n-            return connectorMapping;\n+\n+        mapping = jdbcTypeToPrestoType(typeHandle);\n+        if (mapping.isPresent()) {\n+            switch (legacyGenericColumnMapping) {\n+                case ENABLE:\n+                    return mapping;\n+                case THROW:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4NDYxMg=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTMxMDg5OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTo0MDoxOFrOIBVRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowODo1MlrOICPGaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI2Nzk2Nw==", "bodyText": "to ignore is not exactly percise as the optional CONVERT_TO_VARCHAR is still in place. Would you rather return Optional.empty() instead break in IGNORE branch?", "url": "https://github.com/trinodb/trino/pull/4940#discussion_r538267967", "createdAt": "2020-12-08T11:40:18Z", "author": {"login": "losipiuk"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -343,13 +350,32 @@ protected ResultSet getColumns(JdbcTableHandle tableHandle, DatabaseMetaData met\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        Optional<ColumnMapping> connectorMapping = jdbcTypeToPrestoType(typeHandle);\n-        if (connectorMapping.isPresent()) {\n-            return connectorMapping;\n+\n+        mapping = jdbcTypeToPrestoType(typeHandle);\n+        if (mapping.isPresent()) {\n+            switch (legacyGenericColumnMapping) {\n+                case ENABLE:\n+                    return mapping;\n+                case THROW:\n+                    throw new IllegalStateException(format(\n+                            \"Column type %s is not explicitly mapped by the connector, and used to be mapped to %s by deprecated generic mappings. \" +\n+                                    \"You can set '%s' to '%s' to temporarily restore the legacy mapping, or to '%s' to ignore the column.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3ODc5MQ==", "bodyText": "Would you rather return Optional.empty() instead break in IGNORE branch?\n\nThat would not be correct with respect to unsupported_type_handling.\nCan you please help me improve the wording here?", "url": "https://github.com/trinodb/trino/pull/4940#discussion_r538378791", "createdAt": "2020-12-08T13:38:42Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -343,13 +350,32 @@ protected ResultSet getColumns(JdbcTableHandle tableHandle, DatabaseMetaData met\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        Optional<ColumnMapping> connectorMapping = jdbcTypeToPrestoType(typeHandle);\n-        if (connectorMapping.isPresent()) {\n-            return connectorMapping;\n+\n+        mapping = jdbcTypeToPrestoType(typeHandle);\n+        if (mapping.isPresent()) {\n+            switch (legacyGenericColumnMapping) {\n+                case ENABLE:\n+                    return mapping;\n+                case THROW:\n+                    throw new IllegalStateException(format(\n+                            \"Column type %s is not explicitly mapped by the connector, and used to be mapped to %s by deprecated generic mappings. \" +\n+                                    \"You can set '%s' to '%s' to temporarily restore the legacy mapping, or to '%s' to ignore the column.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI2Nzk2Nw=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwNTU1OA==", "bodyText": "you can resplace to ignore the column with to fallback to default handling of unsupported types ?", "url": "https://github.com/trinodb/trino/pull/4940#discussion_r538405558", "createdAt": "2020-12-08T14:02:18Z", "author": {"login": "losipiuk"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -343,13 +350,32 @@ protected ResultSet getColumns(JdbcTableHandle tableHandle, DatabaseMetaData met\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        Optional<ColumnMapping> connectorMapping = jdbcTypeToPrestoType(typeHandle);\n-        if (connectorMapping.isPresent()) {\n-            return connectorMapping;\n+\n+        mapping = jdbcTypeToPrestoType(typeHandle);\n+        if (mapping.isPresent()) {\n+            switch (legacyGenericColumnMapping) {\n+                case ENABLE:\n+                    return mapping;\n+                case THROW:\n+                    throw new IllegalStateException(format(\n+                            \"Column type %s is not explicitly mapped by the connector, and used to be mapped to %s by deprecated generic mappings. \" +\n+                                    \"You can set '%s' to '%s' to temporarily restore the legacy mapping, or to '%s' to ignore the column.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI2Nzk2Nw=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ2ODA0NA==", "bodyText": "\"to suppress this message\" ?", "url": "https://github.com/trinodb/trino/pull/4940#discussion_r538468044", "createdAt": "2020-12-08T15:00:17Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -343,13 +350,32 @@ protected ResultSet getColumns(JdbcTableHandle tableHandle, DatabaseMetaData met\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        Optional<ColumnMapping> connectorMapping = jdbcTypeToPrestoType(typeHandle);\n-        if (connectorMapping.isPresent()) {\n-            return connectorMapping;\n+\n+        mapping = jdbcTypeToPrestoType(typeHandle);\n+        if (mapping.isPresent()) {\n+            switch (legacyGenericColumnMapping) {\n+                case ENABLE:\n+                    return mapping;\n+                case THROW:\n+                    throw new IllegalStateException(format(\n+                            \"Column type %s is not explicitly mapped by the connector, and used to be mapped to %s by deprecated generic mappings. \" +\n+                                    \"You can set '%s' to '%s' to temporarily restore the legacy mapping, or to '%s' to ignore the column.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI2Nzk2Nw=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3NzcxNg==", "bodyText": "Even better :P", "url": "https://github.com/trinodb/trino/pull/4940#discussion_r538577716", "createdAt": "2020-12-08T16:37:39Z", "author": {"login": "losipiuk"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -343,13 +350,32 @@ protected ResultSet getColumns(JdbcTableHandle tableHandle, DatabaseMetaData met\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        Optional<ColumnMapping> connectorMapping = jdbcTypeToPrestoType(typeHandle);\n-        if (connectorMapping.isPresent()) {\n-            return connectorMapping;\n+\n+        mapping = jdbcTypeToPrestoType(typeHandle);\n+        if (mapping.isPresent()) {\n+            switch (legacyGenericColumnMapping) {\n+                case ENABLE:\n+                    return mapping;\n+                case THROW:\n+                    throw new IllegalStateException(format(\n+                            \"Column type %s is not explicitly mapped by the connector, and used to be mapped to %s by deprecated generic mappings. \" +\n+                                    \"You can set '%s' to '%s' to temporarily restore the legacy mapping, or to '%s' to ignore the column.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI2Nzk2Nw=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNTQ2Nw==", "bodyText": "Updated", "url": "https://github.com/trinodb/trino/pull/4940#discussion_r539215467", "createdAt": "2020-12-09T11:08:52Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -343,13 +350,32 @@ protected ResultSet getColumns(JdbcTableHandle tableHandle, DatabaseMetaData met\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        Optional<ColumnMapping> connectorMapping = jdbcTypeToPrestoType(typeHandle);\n-        if (connectorMapping.isPresent()) {\n-            return connectorMapping;\n+\n+        mapping = jdbcTypeToPrestoType(typeHandle);\n+        if (mapping.isPresent()) {\n+            switch (legacyGenericColumnMapping) {\n+                case ENABLE:\n+                    return mapping;\n+                case THROW:\n+                    throw new IllegalStateException(format(\n+                            \"Column type %s is not explicitly mapped by the connector, and used to be mapped to %s by deprecated generic mappings. \" +\n+                                    \"You can set '%s' to '%s' to temporarily restore the legacy mapping, or to '%s' to ignore the column.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI2Nzk2Nw=="}, "originalCommit": null, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3263, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}