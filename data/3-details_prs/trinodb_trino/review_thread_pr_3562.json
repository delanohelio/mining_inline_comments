{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzQ1MjIy", "number": 3562, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToyMjo1MVrOD25zNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0OTozNFrOD3T8GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODk2NjkzOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/sql/TestTable.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToyMjo1MVrOGM4R8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTo1Mzo0M1rOGNbFNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODE5Mw==", "bodyText": "Actually, do we need to pass any argument here? Maybe we could have only getUniqueTableName() or just getUniqueName()?", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416158193", "createdAt": "2020-04-27T21:22:51Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/sql/TestTable.java", "diffHunk": "@@ -66,6 +66,11 @@ public void close()\n         sqlExecutor.execute(\"DROP TABLE \" + name);\n     }\n \n+    public static String getTestTableName(String baseTableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NTA0Nw==", "bodyText": "Maybe we could have only getUniqueTableName() or just getUniqueName()?\n\nthat won't work. table name prefix is very important. it's sometimes the only useuful information in an err msg\nbut i think we don't need this method; the inline version with manual concatenation is rather readable", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416165047", "createdAt": "2020-04-27T21:34:24Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/sql/TestTable.java", "diffHunk": "@@ -66,6 +66,11 @@ public void close()\n         sqlExecutor.execute(\"DROP TABLE \" + name);\n     }\n \n+    public static String getTestTableName(String baseTableName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODE5Mw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NDk5OA==", "bodyText": "I can switch them to match the existing tests. My only preference for this was the extra _ between the prefix and the random suffix.", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416194998", "createdAt": "2020-04-27T22:33:43Z", "author": {"login": "alexjo2144"}, "path": "presto-testing/src/main/java/io/prestosql/testing/sql/TestTable.java", "diffHunk": "@@ -66,6 +66,11 @@ public void close()\n         sqlExecutor.execute(\"DROP TABLE \" + name);\n     }\n \n+    public static String getTestTableName(String baseTableName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODE5Mw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyODM3NA==", "bodyText": "Just removed that method, opting for the inline string concat like the existing tests.", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416728374", "createdAt": "2020-04-28T15:53:43Z", "author": {"login": "alexjo2144"}, "path": "presto-testing/src/main/java/io/prestosql/testing/sql/TestTable.java", "diffHunk": "@@ -66,6 +66,11 @@ public void close()\n         sqlExecutor.execute(\"DROP TABLE \" + name);\n     }\n \n+    public static String getTestTableName(String baseTableName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODE5Mw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODk2OTY2OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToyMzoyOFrOGM4TeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTo1Mjo1NlrOGNbDDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODU4NQ==", "bodyText": "This test is missing DROP", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416158585", "createdAt": "2020-04-27T21:23:28Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -349,94 +354,101 @@ protected void assertCreateTableAsSelect(Session session, @Language(\"SQL\") Strin\n     @Test\n     public void testRenameTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_rename AS SELECT 123 x\", 1);\n+        String tableName = getTestTableName(\"test_rename\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 123 x\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_rename RENAME TO test_rename_new\");\n-        assertQuery(\"SELECT x FROM test_rename_new\", \"VALUES 123\");\n+        String renamedTable = getTestTableName(\"test_rename_new\");\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME TO \" + renamedTable);\n+        assertQuery(\"SELECT x FROM \" + renamedTable, \"VALUES 123\");\n \n-        assertUpdate(\"ALTER TABLE test_rename_new RENAME TO TEST_RENAME\"); // 'TEST_RENAME' is upper-case, not delimited\n+        String uppercaseName = getTestTableName(\"TEST_RENAME\");\n+        assertUpdate(\"ALTER TABLE \" + renamedTable + \" RENAME TO \" + uppercaseName); // 'TEST_RENAME' is upper-case, not delimited\n         assertQuery(\n-                \"SELECT x FROM test_rename\", // 'test_rename' is lower-case, not delimited\n+                \"SELECT x FROM \" + uppercaseName.toLowerCase(ENGLISH), // 'test_rename' is lower-case, not delimited\n                 \"VALUES 123\");\n \n-        assertUpdate(\"DROP TABLE test_rename\");\n+        assertUpdate(\"DROP TABLE \" + uppercaseName);\n \n-        assertFalse(getQueryRunner().tableExists(getSession(), \"test_rename\"));\n-        assertFalse(getQueryRunner().tableExists(getSession(), \"test_rename_new\"));\n+        assertFalse(getQueryRunner().tableExists(getSession(), tableName));\n+        assertFalse(getQueryRunner().tableExists(getSession(), renamedTable));\n     }\n \n     @Test\n     public void testCommentTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_comment(id integer)\");\n+        String tableName = getTestTableName(\"test_comment\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(id integer)\");\n \n-        assertUpdate(\"COMMENT ON TABLE test_comment IS 'new comment'\");\n-        MaterializedResult materializedRows = computeActual(\"SHOW CREATE TABLE test_comment\");\n+        assertUpdate(\"COMMENT ON TABLE \" + tableName + \" IS 'new comment'\");\n+        MaterializedResult materializedRows = computeActual(\"SHOW CREATE TABLE \" + tableName);\n         assertTrue(materializedRows.getMaterializedRows().get(0).getField(0).toString().contains(\"COMMENT 'new comment'\"));\n \n-        assertUpdate(\"COMMENT ON TABLE test_comment IS ''\");\n-        materializedRows = computeActual(\"SHOW CREATE TABLE test_comment\");\n+        assertUpdate(\"COMMENT ON TABLE \" + tableName + \" IS ''\");\n+        materializedRows = computeActual(\"SHOW CREATE TABLE \" + tableName);\n         assertTrue(materializedRows.getMaterializedRows().get(0).getField(0).toString().contains(\"COMMENT ''\"));\n \n-        assertUpdate(\"COMMENT ON TABLE test_comment IS NULL\");\n-        materializedRows = computeActual(\"SHOW CREATE TABLE test_comment\");\n+        assertUpdate(\"COMMENT ON TABLE \" + tableName + \" IS NULL\");\n+        materializedRows = computeActual(\"SHOW CREATE TABLE \" + tableName);\n         assertFalse(materializedRows.getMaterializedRows().get(0).getField(0).toString().contains(\"COMMENT\"));\n \n-        assertUpdate(\"DROP TABLE test_comment\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n     @Test\n     public void testRenameColumn()\n     {\n-        assertUpdate(\"CREATE TABLE test_rename_column AS SELECT 'some value' x\", 1);\n+        String tableName = getTestTableName(\"test_rename_column\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 'some value' x\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_rename_column RENAME COLUMN x TO y\");\n-        assertQuery(\"SELECT y FROM test_rename_column\", \"VALUES 'some value'\");\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME COLUMN x TO y\");\n+        assertQuery(\"SELECT y FROM \" + tableName, \"VALUES 'some value'\");\n \n-        assertUpdate(\"ALTER TABLE test_rename_column RENAME COLUMN y TO Z\"); // 'Z' is upper-case, not delimited\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME COLUMN y TO Z\"); // 'Z' is upper-case, not delimited\n         assertQuery(\n-                \"SELECT z FROM test_rename_column\", // 'z' is lower-case, not delimited\n+                \"SELECT z FROM \" + tableName, // 'z' is lower-case, not delimited\n                 \"VALUES 'some value'\");\n \n         // There should be exactly one column\n-        assertQuery(\"SELECT * FROM test_rename_column\", \"VALUES 'some value'\");\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'some value'\");\n \n-        assertUpdate(\"DROP TABLE test_rename_column\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n     @Test\n     public void testDropColumn()\n     {\n-        assertUpdate(\"CREATE TABLE test_drop_column AS SELECT 123 x, 111 a\", 1);\n+        String tableName = getTestTableName(\"test_drop_column\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 123 x, 111 a\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_drop_column DROP COLUMN x\");\n-        assertQueryFails(\"SELECT x FROM test_drop_column\", \".* Column 'x' cannot be resolved\");\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" DROP COLUMN x\");\n+        assertQueryFails(\"SELECT x FROM \" + tableName, \".* Column 'x' cannot be resolved\");\n \n-        assertQueryFails(\"ALTER TABLE test_drop_column DROP COLUMN a\", \".* Cannot drop the only column in a table\");\n+        assertQueryFails(\"ALTER TABLE \" + tableName + \" DROP COLUMN a\", \".* Cannot drop the only column in a table\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyNzgyMg==", "bodyText": "Added", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416727822", "createdAt": "2020-04-28T15:52:56Z", "author": {"login": "alexjo2144"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -349,94 +354,101 @@ protected void assertCreateTableAsSelect(Session session, @Language(\"SQL\") Strin\n     @Test\n     public void testRenameTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_rename AS SELECT 123 x\", 1);\n+        String tableName = getTestTableName(\"test_rename\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 123 x\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_rename RENAME TO test_rename_new\");\n-        assertQuery(\"SELECT x FROM test_rename_new\", \"VALUES 123\");\n+        String renamedTable = getTestTableName(\"test_rename_new\");\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME TO \" + renamedTable);\n+        assertQuery(\"SELECT x FROM \" + renamedTable, \"VALUES 123\");\n \n-        assertUpdate(\"ALTER TABLE test_rename_new RENAME TO TEST_RENAME\"); // 'TEST_RENAME' is upper-case, not delimited\n+        String uppercaseName = getTestTableName(\"TEST_RENAME\");\n+        assertUpdate(\"ALTER TABLE \" + renamedTable + \" RENAME TO \" + uppercaseName); // 'TEST_RENAME' is upper-case, not delimited\n         assertQuery(\n-                \"SELECT x FROM test_rename\", // 'test_rename' is lower-case, not delimited\n+                \"SELECT x FROM \" + uppercaseName.toLowerCase(ENGLISH), // 'test_rename' is lower-case, not delimited\n                 \"VALUES 123\");\n \n-        assertUpdate(\"DROP TABLE test_rename\");\n+        assertUpdate(\"DROP TABLE \" + uppercaseName);\n \n-        assertFalse(getQueryRunner().tableExists(getSession(), \"test_rename\"));\n-        assertFalse(getQueryRunner().tableExists(getSession(), \"test_rename_new\"));\n+        assertFalse(getQueryRunner().tableExists(getSession(), tableName));\n+        assertFalse(getQueryRunner().tableExists(getSession(), renamedTable));\n     }\n \n     @Test\n     public void testCommentTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_comment(id integer)\");\n+        String tableName = getTestTableName(\"test_comment\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(id integer)\");\n \n-        assertUpdate(\"COMMENT ON TABLE test_comment IS 'new comment'\");\n-        MaterializedResult materializedRows = computeActual(\"SHOW CREATE TABLE test_comment\");\n+        assertUpdate(\"COMMENT ON TABLE \" + tableName + \" IS 'new comment'\");\n+        MaterializedResult materializedRows = computeActual(\"SHOW CREATE TABLE \" + tableName);\n         assertTrue(materializedRows.getMaterializedRows().get(0).getField(0).toString().contains(\"COMMENT 'new comment'\"));\n \n-        assertUpdate(\"COMMENT ON TABLE test_comment IS ''\");\n-        materializedRows = computeActual(\"SHOW CREATE TABLE test_comment\");\n+        assertUpdate(\"COMMENT ON TABLE \" + tableName + \" IS ''\");\n+        materializedRows = computeActual(\"SHOW CREATE TABLE \" + tableName);\n         assertTrue(materializedRows.getMaterializedRows().get(0).getField(0).toString().contains(\"COMMENT ''\"));\n \n-        assertUpdate(\"COMMENT ON TABLE test_comment IS NULL\");\n-        materializedRows = computeActual(\"SHOW CREATE TABLE test_comment\");\n+        assertUpdate(\"COMMENT ON TABLE \" + tableName + \" IS NULL\");\n+        materializedRows = computeActual(\"SHOW CREATE TABLE \" + tableName);\n         assertFalse(materializedRows.getMaterializedRows().get(0).getField(0).toString().contains(\"COMMENT\"));\n \n-        assertUpdate(\"DROP TABLE test_comment\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n     @Test\n     public void testRenameColumn()\n     {\n-        assertUpdate(\"CREATE TABLE test_rename_column AS SELECT 'some value' x\", 1);\n+        String tableName = getTestTableName(\"test_rename_column\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 'some value' x\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_rename_column RENAME COLUMN x TO y\");\n-        assertQuery(\"SELECT y FROM test_rename_column\", \"VALUES 'some value'\");\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME COLUMN x TO y\");\n+        assertQuery(\"SELECT y FROM \" + tableName, \"VALUES 'some value'\");\n \n-        assertUpdate(\"ALTER TABLE test_rename_column RENAME COLUMN y TO Z\"); // 'Z' is upper-case, not delimited\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME COLUMN y TO Z\"); // 'Z' is upper-case, not delimited\n         assertQuery(\n-                \"SELECT z FROM test_rename_column\", // 'z' is lower-case, not delimited\n+                \"SELECT z FROM \" + tableName, // 'z' is lower-case, not delimited\n                 \"VALUES 'some value'\");\n \n         // There should be exactly one column\n-        assertQuery(\"SELECT * FROM test_rename_column\", \"VALUES 'some value'\");\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'some value'\");\n \n-        assertUpdate(\"DROP TABLE test_rename_column\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n     @Test\n     public void testDropColumn()\n     {\n-        assertUpdate(\"CREATE TABLE test_drop_column AS SELECT 123 x, 111 a\", 1);\n+        String tableName = getTestTableName(\"test_drop_column\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 123 x, 111 a\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_drop_column DROP COLUMN x\");\n-        assertQueryFails(\"SELECT x FROM test_drop_column\", \".* Column 'x' cannot be resolved\");\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" DROP COLUMN x\");\n+        assertQueryFails(\"SELECT x FROM \" + tableName, \".* Column 'x' cannot be resolved\");\n \n-        assertQueryFails(\"ALTER TABLE test_drop_column DROP COLUMN a\", \".* Cannot drop the only column in a table\");\n+        assertQueryFails(\"ALTER TABLE \" + tableName + \" DROP COLUMN a\", \".* Cannot drop the only column in a table\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODU4NQ=="}, "originalCommit": null, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODk3NTIzOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToyNDo0N1rOGM4Wkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTo1Mjo0OVrOGNbCug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTM3OQ==", "bodyText": "It looks like only few tests left... so maybe let's continue the convention from other tests.", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416159379", "createdAt": "2020-04-27T21:24:47Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -154,41 +155,45 @@ public void testResetSession()\n     @Test\n     public void testCreateTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_create (a bigint, b double, c varchar)\");\n-        assertTrue(getQueryRunner().tableExists(getSession(), \"test_create\"));\n-        assertTableColumnNames(\"test_create\", \"a\", \"b\", \"c\");\n+        String tableName = getTestTableName(\"test_create\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyNzczOA==", "bodyText": "Ah, I thought I had gotten them all. I just added a few that I missed the first round, but let me know if I missed any more.", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416727738", "createdAt": "2020-04-28T15:52:49Z", "author": {"login": "alexjo2144"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -154,41 +155,45 @@ public void testResetSession()\n     @Test\n     public void testCreateTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_create (a bigint, b double, c varchar)\");\n-        assertTrue(getQueryRunner().tableExists(getSession(), \"test_create\"));\n-        assertTableColumnNames(\"test_create\", \"a\", \"b\", \"c\");\n+        String tableName = getTestTableName(\"test_create\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTM3OQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzI0OTUzOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0OTozNFrOGNf68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0OTozNFrOGNf68g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwNzY2Ng==", "bodyText": "update the comment", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416807666", "createdAt": "2020-04-28T17:49:34Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -349,94 +353,101 @@ protected void assertCreateTableAsSelect(Session session, @Language(\"SQL\") Strin\n     @Test\n     public void testRenameTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_rename AS SELECT 123 x\", 1);\n+        String tableName = \"test_rename_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 123 x\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_rename RENAME TO test_rename_new\");\n-        assertQuery(\"SELECT x FROM test_rename_new\", \"VALUES 123\");\n+        String renamedTable = \"test_rename_new_\" + randomTableSuffix();\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME TO \" + renamedTable);\n+        assertQuery(\"SELECT x FROM \" + renamedTable, \"VALUES 123\");\n \n-        assertUpdate(\"ALTER TABLE test_rename_new RENAME TO TEST_RENAME\"); // 'TEST_RENAME' is upper-case, not delimited\n+        String uppercaseName = \"TEST_RENAME_\" + randomTableSuffix();\n+        assertUpdate(\"ALTER TABLE \" + renamedTable + \" RENAME TO \" + uppercaseName); // 'TEST_RENAME' is upper-case, not delimited\n         assertQuery(\n-                \"SELECT x FROM test_rename\", // 'test_rename' is lower-case, not delimited\n+                \"SELECT x FROM \" + uppercaseName.toLowerCase(ENGLISH), // 'test_rename' is lower-case, not delimited", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4963, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}