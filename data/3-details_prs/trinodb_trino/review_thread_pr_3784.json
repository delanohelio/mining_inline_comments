{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDM5NzE5", "number": 3784, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzowNjoyNlrOD-AI_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMTo0MzowOVrOD_IKZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzQwNjA0OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzowNjoyNlrOGX1pvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzowNjoyNlrOGX1pvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0OTQ2OA==", "bodyText": "I think it'd be cleaner to do this like\nprivate static final INTERNAL_SCHEMAS = ImmutableSet.of(\"information_schema\", ...);\n\nif (!INTERNAL_SCHEMAS.contains(schemaName.toLowerCase(ENGLISH))", "url": "https://github.com/trinodb/trino/pull/3784#discussion_r427649468", "createdAt": "2020-05-19T23:06:26Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -102,6 +104,35 @@ public OracleClient(\n         return new String[] {\"TABLE\", \"VIEW\"};\n     }\n \n+    @Override\n+    protected Collection<String> listSchemas(Connection connection)\n+    {\n+        try (ResultSet resultSet = connection.getMetaData().getSchemas(connection.getCatalog(), null)) {\n+            ImmutableSet.Builder<String> schemaNames = ImmutableSet.builder();\n+            while (resultSet.next()) {\n+                String schemaName = resultSet.getString(\"TABLE_SCHEM\");\n+                // skip internal schemas\n+                if (!schemaName.equalsIgnoreCase(\"information_schema\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTk3NDM3OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDozMDoxOVrOGYOsdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDozMDoxOVrOGYOsdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1OTc2NA==", "bodyText": "apex are tables for Oracle Apex (Oracle Application Express)\nI think we should leave this", "url": "https://github.com/trinodb/trino/pull/3784#discussion_r428059764", "createdAt": "2020-05-20T14:30:19Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -71,6 +74,20 @@\n public class OracleClient\n         extends BaseJdbcClient\n {\n+    private static final Set<String> INTERNAL_SCHEMAS = ImmutableSet.<String>builder()\n+            .add(\"information_schema\")\n+            .add(\"apex_040000\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTIwNjEzOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMTo0MzowOVrOGZo9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMzowMToxMlrOGZpTeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzODczNA==", "bodyText": "Introduce a filterSchema method in BaseJdbcClient, so that you need to override only that, instead of whole listSchemas.\nUse this new method in io.prestosql.plugin.jdbc.BaseJdbcClient#getTableNames too.\n(This could solve #3831 as well)\nsee io.prestosql.plugin.hive.HiveMetadata#filterSchema", "url": "https://github.com/trinodb/trino/pull/3784#discussion_r429538734", "createdAt": "2020-05-23T11:43:09Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -102,6 +119,25 @@ public OracleClient(\n         return new String[] {\"TABLE\", \"VIEW\"};\n     }\n \n+    @Override\n+    protected Collection<String> listSchemas(Connection connection)\n+    {\n+        try (ResultSet resultSet = connection.getMetaData().getSchemas(connection.getCatalog(), null)) {\n+            ImmutableSet.Builder<String> schemaNames = ImmutableSet.builder();\n+            while (resultSet.next()) {\n+                String schemaName = resultSet.getString(\"TABLE_SCHEM\");\n+                // skip internal schemas\n+                if (!INTERNAL_SCHEMAS.contains(schemaName.toLowerCase(ENGLISH))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NDMxMg==", "bodyText": "Let me separate PR as #3834", "url": "https://github.com/trinodb/trino/pull/3784#discussion_r429544312", "createdAt": "2020-05-23T13:01:12Z", "author": {"login": "ebyhr"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -102,6 +119,25 @@ public OracleClient(\n         return new String[] {\"TABLE\", \"VIEW\"};\n     }\n \n+    @Override\n+    protected Collection<String> listSchemas(Connection connection)\n+    {\n+        try (ResultSet resultSet = connection.getMetaData().getSchemas(connection.getCatalog(), null)) {\n+            ImmutableSet.Builder<String> schemaNames = ImmutableSet.builder();\n+            while (resultSet.next()) {\n+                String schemaName = resultSet.getString(\"TABLE_SCHEM\");\n+                // skip internal schemas\n+                if (!INTERNAL_SCHEMAS.contains(schemaName.toLowerCase(ENGLISH))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzODczNA=="}, "originalCommit": null, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4880, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}