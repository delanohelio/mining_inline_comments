{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxOTY4Mzc0", "number": 3823, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxMjo1OFrOD_DEzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxNTo0NVrOD_DHSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDM3MjYxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxMjo1OFrOGZhYVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMDoyNzoyM1rOGZi3iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNDQ4NQ==", "bodyText": "I would rather add some logic to probe for port to see if it can be bound. Not just blindly iterate forward. We can run into some other port which is already open on the machine.\nAlso I want to understand what is the reason for the ports to remain open after previous tests complete. Maybe we can fix the root cause.", "url": "https://github.com/trinodb/trino/pull/3823#discussion_r429414485", "createdAt": "2020-05-22T19:12:58Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -134,6 +137,12 @@ private RubixConfigurationInitializer initializeRubix(RubixConfig rubixConfig)\n \n         // initialize rubix in master-only mode\n         rubixConfig.setStartServerOnCoordinator(true);\n+\n+        // use different rubix ports for each test to prevent nondeterministic bind errors\n+        rubixConfig.setBookKeeperServerPort(DEFAULT_BOOKKEEPER_SERVER_PORT + cachingFileSystemCounter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzODg1OQ==", "bodyText": "added waiting for Rubix servers to stop", "url": "https://github.com/trinodb/trino/pull/3823#discussion_r429438859", "createdAt": "2020-05-22T20:27:23Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -134,6 +137,12 @@ private RubixConfigurationInitializer initializeRubix(RubixConfig rubixConfig)\n \n         // initialize rubix in master-only mode\n         rubixConfig.setStartServerOnCoordinator(true);\n+\n+        // use different rubix ports for each test to prevent nondeterministic bind errors\n+        rubixConfig.setBookKeeperServerPort(DEFAULT_BOOKKEEPER_SERVER_PORT + cachingFileSystemCounter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNDQ4NQ=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDM3NTA4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCaching.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxMzo1OFrOGZhZ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMDoyOTozN1rOGZi6Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNDkxMA==", "bodyText": "There might be IO operations caused by data preparations before tests start.\nInstead of this, i would rather work on the test to be more resilient.\nMaybe you can wait before the test start for any async IOs to complete? (there could be JMX counter with current async IOs)\nor maybe you can change the assertions in the test?", "url": "https://github.com/trinodb/trino/pull/3823#discussion_r429414910", "createdAt": "2020-05-22T19:13:58Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCaching.java", "diffHunk": "@@ -32,6 +32,9 @@\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.testng.Assert.assertEquals;\n \n+// make sure dedicated Rubix tests are executed first so that JMX counters are all set to 0\n+// and no pending async read is in progress\n+@Test(priority = -1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzOTUyMw==", "bodyText": "Made that test to run exclusively.\n\nThere might be IO operations caused by data preparations before tests start.\n\nInserts don't affect cache.\n\nInstead of this, i would rather work on the test to be more resilient.\n\nBelieve me. I tried. Rubix doesn't provide strict consistency for JMX counters in async read mode.\n\nMaybe you can wait before the test start for any async IOs to complete? (there could be JMX counter with current async IOs\n\nThere is such counter, but it's not reliable. You would still have to sleep.", "url": "https://github.com/trinodb/trino/pull/3823#discussion_r429439523", "createdAt": "2020-05-22T20:29:37Z", "author": {"login": "sopel39"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCaching.java", "diffHunk": "@@ -32,6 +32,9 @@\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.testng.Assert.assertEquals;\n \n+// make sure dedicated Rubix tests are executed first so that JMX counters are all set to 0\n+// and no pending async read is in progress\n+@Test(priority = -1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNDkxMA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDM3ODk3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxNTo0NVrOGZhcfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMDozMzoyNlrOGZi-_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNTU1MA==", "bodyText": "The test class is executed single threaded, so previously allocated ports should be free to take.\nIf this is not the case, this means that resource cleanup is ineffective, or async. It shouldn't be.", "url": "https://github.com/trinodb/trino/pull/3823#discussion_r429415550", "createdAt": "2020-05-22T19:15:45Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -134,6 +137,12 @@ private RubixConfigurationInitializer initializeRubix(RubixConfig rubixConfig)\n \n         // initialize rubix in master-only mode\n         rubixConfig.setStartServerOnCoordinator(true);\n+\n+        // use different rubix ports for each test to prevent nondeterministic bind errors\n+        rubixConfig.setBookKeeperServerPort(DEFAULT_BOOKKEEPER_SERVER_PORT + cachingFileSystemCounter);\n+        rubixConfig.setDataTransferServerPort(DEFAULT_DATA_TRANSFER_SERVER_PORT + cachingFileSystemCounter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ0MDc2Ng==", "bodyText": "The test class is executed single threaded, so previously allocated ports should be free to take.\n\nTests is single-threaded, but Rubix servers are not. Added waiting for Rubix server to stop on shutdown", "url": "https://github.com/trinodb/trino/pull/3823#discussion_r429440766", "createdAt": "2020-05-22T20:33:26Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -134,6 +137,12 @@ private RubixConfigurationInitializer initializeRubix(RubixConfig rubixConfig)\n \n         // initialize rubix in master-only mode\n         rubixConfig.setStartServerOnCoordinator(true);\n+\n+        // use different rubix ports for each test to prevent nondeterministic bind errors\n+        rubixConfig.setBookKeeperServerPort(DEFAULT_BOOKKEEPER_SERVER_PORT + cachingFileSystemCounter);\n+        rubixConfig.setDataTransferServerPort(DEFAULT_DATA_TRANSFER_SERVER_PORT + cachingFileSystemCounter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNTU1MA=="}, "originalCommit": null, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4916, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}