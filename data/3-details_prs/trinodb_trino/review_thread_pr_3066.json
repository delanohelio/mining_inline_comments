{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDUyNzUw", "number": 3066, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1MTozNlrODm96sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNDoxOFrODonz2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg2OTMxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1MTozNlrOF0sHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1MTozNlrOF0sHqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MzEyOQ==", "bodyText": "shouldn't this be one line above.\nCREATE SCHEMA x AUTHORIZATION owner_of_x WITH (properties...), instead of\nCREATE SCHEMA x WITH (properties...) AUHTORIZATION owner_of_x?\nI see that in SqlBase.g4 it is defined differently.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390793129", "createdAt": "2020-03-11T07:51:36Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "diffHunk": "@@ -9,6 +9,7 @@ Synopsis\n \n     CREATE SCHEMA [ IF NOT EXISTS ] schema_name\n     [ WITH ( property_name = expression [, ...] ) ]\n+    [ AUTHORIZATION ( user | USER user | ROLE role ) ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg3MTEzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1MjoyOVrOF0sI4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1MjoyOVrOF0sI4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MzQ0Mw==", "bodyText": "Please give an example with properties. Also it would be nice to give fully featured example for hive connector with custom schema owner and schema location.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390793443", "createdAt": "2020-03-11T07:52:29Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "diffHunk": "@@ -40,6 +41,14 @@ Create the schema ``traffic`` if it does not already exist::\n \n     CREATE SCHEMA IF NOT EXISTS traffic\n \n+Create a new schema ``web`` and set the owner to user ``alice``::\n+\n+    CREATE SCHEMA web AUTHORIZATION alice\n+\n+Create a new schema ``web`` and allow everyone to drop schema and create tables in schema ``web``::\n+\n+    CREATE SCHEMA web AUTHORIZATION ROLE PUBLIC", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg3NTM1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1NDowOVrOF0sLdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1NDowOVrOF0sLdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NDEwMA==", "bodyText": "can you add tests where different user cannot access that table or create another table in that schema?\nCan admin access that schema (I guess in Hive ROLE ADMIN can do anything)?", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390794100", "createdAt": "2020-03-11T07:54:09Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -481,6 +481,12 @@ public void testSchemaAuthorizationForUser()\n         assertUpdate(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\");\n         assertUpdate(user, \"DROP TABLE test_schema_authorization_user.test\");\n         assertUpdate(user, \"DROP SCHEMA test_schema_authorization_user\");\n+\n+        // now test create creations with authorization\n+        assertUpdate(admin, \"CREATE SCHEMA test_schema_authorization_user AUTHORIZATION user\");\n+        assertUpdate(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg3Njc1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1NDo0MlrOF0sMSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0MzozNVrOF1R38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NDMxNQ==", "bodyText": "can you add tests where different role cannot access that table or create another table in that schema?", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390794315", "createdAt": "2020-03-11T07:54:42Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -512,6 +518,13 @@ public void testSchemaAuthorizationForRole()\n         assertUpdate(user, \"DROP TABLE test_schema_authorization_role.test\");\n         assertUpdate(user, \"DROP SCHEMA test_schema_authorization_role\");\n \n+        // now test create creations with authorization\n+        assertQueryFails(admin, \"CREATE SCHEMA test_schema_authorization_role AUTHORIZATION ROLE nonexisting_role\", \".*?Role 'nonexisting_role' does not exist\");\n+        assertUpdate(admin, \"CREATE SCHEMA test_schema_authorization_role AUTHORIZATION ROLE authorized_users\");\n+        assertUpdate(user, \"CREATE TABLE test_schema_authorization_role.test (x bigint)\");\n+        assertUpdate(user, \"DROP TABLE test_schema_authorization_role.test\");\n+        assertUpdate(user, \"DROP SCHEMA test_schema_authorization_role\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMTY5OA==", "bodyText": "Done. But see the caveat with not finding the schema in the SELECT. This only happens for the SELECT, not for the other DML, and only in the test.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r391411698", "createdAt": "2020-03-12T05:43:35Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -512,6 +518,13 @@ public void testSchemaAuthorizationForRole()\n         assertUpdate(user, \"DROP TABLE test_schema_authorization_role.test\");\n         assertUpdate(user, \"DROP SCHEMA test_schema_authorization_role\");\n \n+        // now test create creations with authorization\n+        assertQueryFails(admin, \"CREATE SCHEMA test_schema_authorization_role AUTHORIZATION ROLE nonexisting_role\", \".*?Role 'nonexisting_role' does not exist\");\n+        assertUpdate(admin, \"CREATE SCHEMA test_schema_authorization_role AUTHORIZATION ROLE authorized_users\");\n+        assertUpdate(user, \"CREATE TABLE test_schema_authorization_role.test (x bigint)\");\n+        assertUpdate(user, \"DROP TABLE test_schema_authorization_role.test\");\n+        assertUpdate(user, \"DROP SCHEMA test_schema_authorization_role\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NDMxNQ=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg4NTA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/CreateSchemaTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1Nzo0NFrOF0sROQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1Nzo0NFrOF0sROQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NTU3Nw==", "bodyText": "Please extract this as method, then you could just write:\n        PrestoPrincipal principal = getCreateSchemaAuthorization(...);\n\n(no uninitialized variables).", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390795577", "createdAt": "2020-03-11T07:57:44Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateSchemaTask.java", "diffHunk": "@@ -71,6 +76,19 @@ public String explain(CreateSchema statement, List<Expression> parameters)\n         CatalogName catalogName = metadata.getCatalogHandle(session, schema.getCatalogName())\n                 .orElseThrow(() -> new PrestoException(NOT_FOUND, \"Catalog does not exist: \" + schema.getCatalogName()));\n \n+        PrestoPrincipal principal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg5MTg0OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemoryMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowMDoxN1rOF0sVYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowMDoxN1rOF0sVYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NjY0Mg==", "bodyText": "Can you pass something more meaningful here, new Principal(USER, SESION.getUser())?", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390796642", "createdAt": "2020-03-11T08:00:17Z", "author": {"login": "kokosing"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemoryMetadata.java", "diffHunk": "@@ -151,7 +151,7 @@ public void testReadTableBeforeCreationCompleted()\n     public void testCreateSchema()\n     {\n         assertEquals(metadata.listSchemaNames(SESSION), ImmutableList.of(\"default\"));\n-        metadata.createSchema(SESSION, \"test\", ImmutableMap.of());\n+        metadata.createSchema(SESSION, \"test\", ImmutableMap.of(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg5MjMzOnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemoryMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowMDoyNVrOF0sVpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowMDoyNVrOF0sVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NjcwOA==", "bodyText": "same here and below", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390796708", "createdAt": "2020-03-11T08:00:25Z", "author": {"login": "kokosing"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemoryMetadata.java", "diffHunk": "@@ -173,7 +173,7 @@ public void testCreateSchema()\n     public void testCreateViewWithoutReplace()\n     {\n         SchemaTableName test = new SchemaTableName(\"test\", \"test_view\");\n-        metadata.createSchema(SESSION, \"test\", ImmutableMap.of());\n+        metadata.createSchema(SESSION, \"test\", ImmutableMap.of(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg5NzY2OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowMjoyMVrOF0sYyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowMjoyMVrOF0sYyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NzUxNA==", "bodyText": "move (WITH...) to next line", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390797514", "createdAt": "2020-03-11T08:02:21Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -39,7 +39,7 @@ statement\n     | USE schema=identifier                                            #use\n     | USE catalog=identifier '.' schema=identifier                     #use\n     | CREATE SCHEMA (IF NOT EXISTS)? qualifiedName\n-        (WITH properties)?                                             #createSchema\n+       (AUTHORIZATION principal)? (WITH properties)?                   #createSchema", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTg5ODA4OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODowMjozMlrOF0sZEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODozOToyM1rOF1EAZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NzU4NQ==", "bodyText": "remove", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390797585", "createdAt": "2020-03-11T08:02:32Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -96,6 +96,7 @@ statement\n     | EXPLAIN ANALYZE? VERBOSE?\n         ('(' explainOption (',' explainOption)* ')')? statement        #explain\n     | SHOW CREATE TABLE qualifiedName                                  #showCreateTable\n+    | SHOW CREATE SCHEMA qualifiedName                                 #showCreateSchema", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NDQ4Ng==", "bodyText": "Arrghh... Sorry, I started adding this, but then decided two PRs is better.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r391184486", "createdAt": "2020-03-11T18:39:23Z", "author": {"login": "lhofhansl"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -96,6 +96,7 @@ statement\n     | EXPLAIN ANALYZE? VERBOSE?\n         ('(' explainOption (',' explainOption)* ')')? statement        #explain\n     | SHOW CREATE TABLE qualifiedName                                  #showCreateTable\n+    | SHOW CREATE SCHEMA qualifiedName                                 #showCreateSchema", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NzU4NQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTkyMDE0OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMToyNVrOF0smsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMToyNVrOF0smsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTA3Mw==", "bodyText": "I guess this should be mentioned before properties (possibly there are some missing tests).", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390801073", "createdAt": "2020-03-11T08:11:25Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -812,6 +812,11 @@ protected Void visitCreateSchema(CreateSchema node, Integer context)\n             builder.append(formatName(node.getSchemaName()));\n             builder.append(formatPropertiesMultiLine(node.getProperties()));\n \n+            if (node.getPrincipal().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTkyMDkzOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/CreateSchema.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMTo0MlrOF0snJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1MDo1OVrOF1L79Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTE5MQ==", "bodyText": "s/principal/authorization?", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390801191", "createdAt": "2020-03-11T08:11:42Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/CreateSchema.java", "diffHunk": "@@ -28,23 +28,25 @@\n     private final QualifiedName schemaName;\n     private final boolean notExists;\n     private final List<Property> properties;\n+    private final Optional<PrincipalSpecification> principal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NDQzMg==", "bodyText": "I was internally debating this. What we are referring to is the principal, so I thought this is better,", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r391184432", "createdAt": "2020-03-11T18:39:17Z", "author": {"login": "lhofhansl"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/CreateSchema.java", "diffHunk": "@@ -28,23 +28,25 @@\n     private final QualifiedName schemaName;\n     private final boolean notExists;\n     private final List<Property> properties;\n+    private final Optional<PrincipalSpecification> principal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTE5MQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNDQyMQ==", "bodyText": "Let's leave it this way, it's also aligned with SetSchemaAuthorization.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r391314421", "createdAt": "2020-03-11T22:50:59Z", "author": {"login": "lhofhansl"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/CreateSchema.java", "diffHunk": "@@ -28,23 +28,25 @@\n     private final QualifiedName schemaName;\n     private final boolean notExists;\n     private final List<Property> properties;\n+    private final Optional<PrincipalSpecification> principal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTE5MQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTkyMTU2OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestStatementBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMTo1OVrOF0snlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMTo1OVrOF0snlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTMwMw==", "bodyText": "please add tests with authorization and with with clauses", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390801303", "createdAt": "2020-03-11T08:11:59Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestStatementBuilder.java", "diffHunk": "@@ -193,6 +193,8 @@ public void testStatementBuilder()\n         printStatement(\"alter table a.b.c drop column x\");\n \n         printStatement(\"create schema test\");\n+        printStatement(\"create schema test authorization alice\");\n+        printStatement(\"create schema test authorization role public\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTkyMjg2OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMjozNVrOF0soZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMjozNVrOF0soZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTUxMA==", "bodyText": "add test with WITH and AUTHORIZATION", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390801510", "createdAt": "2020-03-11T08:12:35Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -5111,6 +5111,7 @@ public void testDescribeOutputNonSelect()\n         assertDescribeOutputEmpty(\"GRANT INSERT ON foo TO bar\");\n         assertDescribeOutputEmpty(\"REVOKE INSERT ON foo FROM bar\");\n         assertDescribeOutputEmpty(\"CREATE SCHEMA foo\");\n+        assertDescribeOutputEmpty(\"CREATE SCHEMA foo AUTHORIZATION bar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTkyMzQ4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMjo1M1rOF0so1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo0ODo1N1rOF1EVeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTYyMg==", "bodyText": "remove", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390801622", "createdAt": "2020-03-11T08:12:53Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -231,8 +231,9 @@ default TableStatistics getTableStatistics(ConnectorSession session, ConnectorTa\n \n     /**\n      * Creates a schema.\n+     * @param principal TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4OTg4MQ==", "bodyText": "Apologies, Eclipse generated that and I missed it.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r391189881", "createdAt": "2020-03-11T18:48:57Z", "author": {"login": "lhofhansl"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -231,8 +231,9 @@ default TableStatistics getTableStatistics(ConnectorSession session, ConnectorTa\n \n     /**\n      * Creates a schema.\n+     * @param principal TODO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTYyMg=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTkyNTIxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMzoyOVrOF0sp6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo0MDozM1rOF1ECyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTg5Ng==", "bodyText": "s/principal/authorization or owner (but if you choose one thing, then please use coherently across the commit).", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r390801896", "createdAt": "2020-03-11T08:13:29Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -231,8 +231,9 @@ default TableStatistics getTableStatistics(ConnectorSession session, ConnectorTa\n \n     /**\n      * Creates a schema.\n+     * @param principal TODO\n      */\n-    default void createSchema(ConnectorSession session, String schemaName, Map<String, Object> properties)\n+    default void createSchema(ConnectorSession session, String schemaName, Map<String, Object> properties, PrestoPrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NTA5OA==", "bodyText": "At the metadata level, I guess \"owner\" is better. I will make this so.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r391185098", "createdAt": "2020-03-11T18:40:33Z", "author": {"login": "lhofhansl"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -231,8 +231,9 @@ default TableStatistics getTableStatistics(ConnectorSession session, ConnectorTa\n \n     /**\n      * Creates a schema.\n+     * @param principal TODO\n      */\n-    default void createSchema(ConnectorSession session, String schemaName, Map<String, Object> properties)\n+    default void createSchema(ConnectorSession session, String schemaName, Map<String, Object> properties, PrestoPrincipal principal)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTg5Ng=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc2ODk0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0MjoxM1rOF1R2xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTowMDozOVrOF1raaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMTM5OQ==", "bodyText": "@kokosing Any idea on this one? Every SELECT query fails with an error indicating that schema test_schema_authorization_user does not exist, even though I was just able to create a table in it.\nIt does not matter on behalf of which user I do this.\nAnd it happens only in this test, not in a real cluster.\nAny ideas?", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r391411399", "createdAt": "2020-03-12T05:42:13Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -471,14 +471,46 @@ public void testSchemaAuthorizationForUser()\n                 .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n                 .build();\n \n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_schema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"anotheruser\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n         // ordinary users cannot drop a schema or create a table in a schema the do not own\n         assertQueryFails(user, \"DROP SCHEMA test_schema_authorization_user\", \"Access Denied: Cannot drop schema test_schema_authorization_user\");\n         assertQueryFails(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\", \"Access Denied: Cannot create table test_schema_authorization_user.test\");\n \n         // change owner to user\n         assertUpdate(admin, \"ALTER SCHEMA test_schema_authorization_user SET AUTHORIZATION user\");\n \n+        // another user still cannot create tables\n+        assertQueryFails(anotherUser, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\", \"Access Denied: Cannot create table test_schema_authorization_user.test\");\n+\n         assertUpdate(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\");\n+        String selectSQL = \"SELECT 1 FROM test_schema_authorization_user.test\";\n+        // TODO: This cannot find the schema for some reason\n+        // assertQuery(user, selectSQL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQyODUxMA==", "bodyText": "This is the exception: (I tried 1 and count(1), same result)\n[ERROR] Tests run: 141, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 193.997 s <<< FAILURE! - in io.prestosql.plugin.hive.TestHiveIntegrationSmokeTest\n[ERROR] testSchemaAuthorizationForUser(io.prestosql.plugin.hive.TestHiveIntegrationSmokeTest)  Time elapsed: 0.064 s  <<< FAILURE!\njava.lang.AssertionError: Execution of 'expected' query failed: SELECT count(1) FROM test_schema_authorization_user.test\n        at org.testng.Assert.fail(Assert.java:83)\n        at io.prestosql.testing.QueryAssertions.assertQuery(QueryAssertions.java:161)\n        at io.prestosql.testing.QueryAssertions.assertQuery(QueryAssertions.java:103)\n        at io.prestosql.testing.AbstractTestQueryFramework.assertQuery(AbstractTestQueryFramework.java:125)\n        at io.prestosql.plugin.hive.TestHiveIntegrationSmokeTest.testSchemaAuthorizationForUser(TestHiveIntegrationSmokeTest.java:493)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n        at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)\n        at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)\n        at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)\n        at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)\n        at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n        at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n        at java.base/java.lang.Thread.run(Thread.java:834)\nCaused by: org.jdbi.v3.core.statement.UnableToCreateStatementException: org.h2.jdbc.JdbcSQLSyntaxErrorException: Schema \"TEST_SCHEMA_AUTHORIZATION_USER\" not found; SQL statement:\nSELECT count(1) FROM test_schema_authorization_user.test [90079-200] [statement:\"SELECT count(1) FROM test_schema_authorization_user.test\", rewritten:\"SELECT count(1) FROM test_schema_authorization_user.test\", parsed:\"ParsedSql{sql='SELECT count(1) FROM test_schema_authorization_user.test', parameters=ParsedParameters{positional=false, parameterNames=[]}}\", arguments:{positional:{}, named:{}, finder:[]}]\n        at org.jdbi.v3.core.statement.SqlStatement.internalExecute(SqlStatement.java:1369)\n        at org.jdbi.v3.core.result.ResultProducers.lambda$getResultSet$2(ResultProducers.java:68)\n        at org.jdbi.v3.core.result.ResultIterable.lambda$of$0(ResultIterable.java:53)\n        at org.jdbi.v3.core.result.ResultIterable.stream(ResultIterable.java:141)\n        at org.jdbi.v3.core.result.ResultIterable.collect(ResultIterable.java:197)\n        at org.jdbi.v3.core.result.ResultIterable.list(ResultIterable.java:186)\n        at io.prestosql.testing.H2QueryRunner.execute(H2QueryRunner.java:185)\n        at io.prestosql.testing.QueryAssertions.assertQuery(QueryAssertions.java:158)\n        ... 16 more\nCaused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Schema \"TEST_SCHEMA_AUTHORIZATION_USER\" not found; SQL statement:\nSELECT count(1) FROM test_schema_authorization_user.test [90079-200]\n        at org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n        at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n        at org.h2.message.DbException.get(DbException.java:205)\n        at org.h2.message.DbException.get(DbException.java:181)\n        at org.h2.command.Parser.readTableFilter(Parser.java:1940)\n        at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)\n        at org.h2.command.Parser.parseSelect(Parser.java:2959)\n        at org.h2.command.Parser.parseQuerySub(Parser.java:2817)\n        at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)\n        at org.h2.command.Parser.parseQuery(Parser.java:2620)\n        at org.h2.command.Parser.parsePrepared(Parser.java:868)\n        at org.h2.command.Parser.parse(Parser.java:843)\n        at org.h2.command.Parser.parse(Parser.java:815)\n        at org.h2.command.Parser.prepareCommand(Parser.java:738)\n        at org.h2.engine.Session.prepareLocal(Session.java:657)\n        at org.h2.engine.Session.prepareCommand(Session.java:595)\n        at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)\n        at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)\n        at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:734)\n        at org.jdbi.v3.core.statement.DefaultStatementBuilder.create(DefaultStatementBuilder.java:57)\n        at org.jdbi.v3.core.statement.SqlStatement.internalExecute(SqlStatement.java:1361)\n        ... 23 more", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r391428510", "createdAt": "2020-03-12T06:49:17Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -471,14 +471,46 @@ public void testSchemaAuthorizationForUser()\n                 .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n                 .build();\n \n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_schema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"anotheruser\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n         // ordinary users cannot drop a schema or create a table in a schema the do not own\n         assertQueryFails(user, \"DROP SCHEMA test_schema_authorization_user\", \"Access Denied: Cannot drop schema test_schema_authorization_user\");\n         assertQueryFails(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\", \"Access Denied: Cannot create table test_schema_authorization_user.test\");\n \n         // change owner to user\n         assertUpdate(admin, \"ALTER SCHEMA test_schema_authorization_user SET AUTHORIZATION user\");\n \n+        // another user still cannot create tables\n+        assertQueryFails(anotherUser, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\", \"Access Denied: Cannot create table test_schema_authorization_user.test\");\n+\n         assertUpdate(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\");\n+        String selectSQL = \"SELECT 1 FROM test_schema_authorization_user.test\";\n+        // TODO: This cannot find the schema for some reason\n+        // assertQuery(user, selectSQL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMTM5OQ=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMDEyMQ==", "bodyText": "BTW. I tried without any authorization changes and just with an admin user, and get the same result. Perhaps a bug in the JDBC code. I'll investigate more, but if you have an idea I'm eager to hear it.\nUpdate: Even adding to other tests shows the same problem... I removed that part of the code now.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r391830121", "createdAt": "2020-03-12T19:00:39Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -471,14 +471,46 @@ public void testSchemaAuthorizationForUser()\n                 .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n                 .build();\n \n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_schema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"anotheruser\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n         // ordinary users cannot drop a schema or create a table in a schema the do not own\n         assertQueryFails(user, \"DROP SCHEMA test_schema_authorization_user\", \"Access Denied: Cannot drop schema test_schema_authorization_user\");\n         assertQueryFails(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\", \"Access Denied: Cannot create table test_schema_authorization_user.test\");\n \n         // change owner to user\n         assertUpdate(admin, \"ALTER SCHEMA test_schema_authorization_user SET AUTHORIZATION user\");\n \n+        // another user still cannot create tables\n+        assertQueryFails(anotherUser, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\", \"Access Denied: Cannot create table test_schema_authorization_user.test\");\n+\n         assertUpdate(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\");\n+        String selectSQL = \"SELECT 1 FROM test_schema_authorization_user.test\";\n+        // TODO: This cannot find the schema for some reason\n+        // assertQuery(user, selectSQL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMTM5OQ=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE5NzExOnYy", "diffSide": "RIGHT", "path": "presto-blackhole/src/test/java/io/prestosql/plugin/blackhole/TestBlackHoleMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxMzoxOVrOF18YlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0NTowMlrOF2M7eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwODE4MQ==", "bodyText": "I don't like passing nulls. Please pass there some valid variable like: new PrestoPrincipal(USER, SESSION.getUSER())", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r392108181", "createdAt": "2020-03-13T09:13:19Z", "author": {"login": "kokosing"}, "path": "presto-blackhole/src/test/java/io/prestosql/plugin/blackhole/TestBlackHoleMetadata.java", "diffHunk": "@@ -46,7 +46,7 @@\n     public void testCreateSchema()\n     {\n         assertEquals(metadata.listSchemaNames(SESSION), ImmutableList.of(\"default\"));\n-        metadata.createSchema(SESSION, \"test\", ImmutableMap.of());\n+        metadata.createSchema(SESSION, \"test\", ImmutableMap.of(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3OTI1Nw==", "bodyText": "Arrghh... I do not like it either. I missed this one.\n(I'm quite busy in my role at chief architect right now, but it's not really an excuse.)", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r392379257", "createdAt": "2020-03-13T17:45:02Z", "author": {"login": "lhofhansl"}, "path": "presto-blackhole/src/test/java/io/prestosql/plugin/blackhole/TestBlackHoleMetadata.java", "diffHunk": "@@ -46,7 +46,7 @@\n     public void testCreateSchema()\n     {\n         assertEquals(metadata.listSchemaNames(SESSION), ImmutableList.of(\"default\"));\n-        metadata.createSchema(SESSION, \"test\", ImmutableMap.of());\n+        metadata.createSchema(SESSION, \"test\", ImmutableMap.of(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwODE4MQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDIwMDMxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxNDozMVrOF18avA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODowMjoxNVrOF2NdRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwODczMg==", "bodyText": "there is no such property for hive schemas. Hive only supports only location property so far.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r392108732", "createdAt": "2020-03-13T09:14:31Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "diffHunk": "@@ -40,6 +44,18 @@ Create the schema ``traffic`` if it does not already exist::\n \n     CREATE SCHEMA IF NOT EXISTS traffic\n \n+Create a new schema ``web`` and set the owner to user ``alice``::\n+\n+    CREATE SCHEMA web AUTHORIZATION alice\n+\n+Create a new schema ``web``, set the ``format`` property to ``ORC`` and set the owner to user ``alice``::\n+\n+    CREATE SCHEMA web AUTHORIZATION alice WITH ( format = 'ORC' )", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NzkwOA==", "bodyText": "Oh right. That's for tables only.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r392387908", "createdAt": "2020-03-13T18:02:15Z", "author": {"login": "lhofhansl"}, "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "diffHunk": "@@ -40,6 +44,18 @@ Create the schema ``traffic`` if it does not already exist::\n \n     CREATE SCHEMA IF NOT EXISTS traffic\n \n+Create a new schema ``web`` and set the owner to user ``alice``::\n+\n+    CREATE SCHEMA web AUTHORIZATION alice\n+\n+Create a new schema ``web``, set the ``format`` property to ``ORC`` and set the owner to user ``alice``::\n+\n+    CREATE SCHEMA web AUTHORIZATION alice WITH ( format = 'ORC' )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwODczMg=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDIwMjk0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxNTozM1rOF18cgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxNTozM1rOF18cgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwOTE4Ng==", "bodyText": "Please put this example below example with ROLE.\n@mosabua, @electrum  Would you like take a look at docs changes?", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r392109186", "createdAt": "2020-03-13T09:15:33Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "diffHunk": "@@ -40,6 +44,18 @@ Create the schema ``traffic`` if it does not already exist::\n \n     CREATE SCHEMA IF NOT EXISTS traffic\n \n+Create a new schema ``web`` and set the owner to user ``alice``::\n+\n+    CREATE SCHEMA web AUTHORIZATION alice\n+\n+Create a new schema ``web``, set the ``format`` property to ``ORC`` and set the owner to user ``alice``::\n+\n+    CREATE SCHEMA web AUTHORIZATION alice WITH ( format = 'ORC' )", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDIxMzA4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxOToyOFrOF18jGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToxOToyOFrOF18jGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExMDg3NA==", "bodyText": ".setIdentity(Identity.forUser(\"anotheruser\")\n     .withPrincipal(getSession().getIdentity().getPrincipal())\n     .build())", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r392110874", "createdAt": "2020-03-13T09:19:28Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -471,14 +471,41 @@ public void testSchemaAuthorizationForUser()\n                 .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n                 .build();\n \n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_schema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"anotheruser\").withPrincipal(getSession().getIdentity().getPrincipal()).build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDIxNjkxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToyMDo0N1rOF18lhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToyMDo0N1rOF18lhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExMTQ5NA==", "bodyText": "Please have a dedicated test for CREATE SCHEMA WITH AUTHORIZATION. If you mix this with ALTER SCHEMA it is getting very complicated.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r392111494", "createdAt": "2020-03-13T09:20:47Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -471,14 +471,41 @@ public void testSchemaAuthorizationForUser()\n                 .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n                 .build();\n \n+        Session anotherUser = testSessionBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDIyMDIyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToyMTo0N1rOF18npw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOToyMTo0N1rOF18npw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExMjAzOQ==", "bodyText": "Please have dedicated tests for CREATE SCHEMA .. AUTHORIZATION ROLE ....\nIf you mix this with ALTER SCHEMA it is getting very complicated.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r392112039", "createdAt": "2020-03-13T09:21:47Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -508,7 +535,32 @@ public void testSchemaAuthorizationForRole()\n                 .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n                 .build();\n \n+        Session anotherUser = testSessionBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTE5OTgwOnYy", "diffSide": "RIGHT", "path": "presto-blackhole/src/test/java/io/prestosql/plugin/blackhole/TestBlackHoleMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoxODowNVrOF3RvoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoxODowNVrOF3RvoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwNjcyMQ==", "bodyText": "static import for USER", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r393506721", "createdAt": "2020-03-17T08:18:05Z", "author": {"login": "kokosing"}, "path": "presto-blackhole/src/test/java/io/prestosql/plugin/blackhole/TestBlackHoleMetadata.java", "diffHunk": "@@ -46,7 +48,7 @@\n     public void testCreateSchema()\n     {\n         assertEquals(metadata.listSchemaNames(SESSION), ImmutableList.of(\"default\"));\n-        metadata.createSchema(SESSION, \"test\", ImmutableMap.of());\n+        metadata.createSchema(SESSION, \"test\", ImmutableMap.of(), new PrestoPrincipal(PrincipalType.USER, SESSION.getUser()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIwMTg0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoxODo0OFrOF3Rw8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoxODo0OFrOF3Rw8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwNzA1OA==", "bodyText": "try to wrap lines about 80 characters with (convention in docs)", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r393507058", "createdAt": "2020-03-17T08:18:48Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/create-schema.rst", "diffHunk": "@@ -40,6 +44,22 @@ Create the schema ``traffic`` if it does not already exist::\n \n     CREATE SCHEMA IF NOT EXISTS traffic\n \n+Create a new schema ``web`` and set the owner to user ``alice``::\n+\n+    CREATE SCHEMA web AUTHORIZATION alice\n+\n+Create a new schema ``web``, set the ``LOCATION`` property to ``/hive/data/web`` and set the owner to user ``alice``::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIxMDk1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyMTo0N1rOF3R2eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDo0NzowOVrOF4WSDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwODQ3Mw==", "bodyText": "can you try to create another table when user has this role disabled (or enabled different role)?", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r393508473", "createdAt": "2020-03-17T08:21:47Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -505,16 +524,112 @@ public void testSchemaAuthorizationForRole()\n         Session user = testSessionBuilder()\n                 .setCatalog(getSession().getCatalog().get())\n                 .setSchema(\"test_schema_authorization_role\")\n-                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_schema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n                 .build();\n \n         assertUpdate(user, \"CREATE TABLE test_schema_authorization_role.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_schema_authorization_role.test\", \"Access Denied: Cannot drop table test_schema_authorization_role.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_schema_authorization_role.test\", \"Access Denied: Cannot select from table test_schema_authorization_role.test\");\n+\n         assertUpdate(user, \"DROP TABLE test_schema_authorization_role.test\");\n         assertUpdate(user, \"DROP SCHEMA test_schema_authorization_role\");\n \n         assertUpdate(admin, \"DROP ROLE authorized_users\");\n     }\n \n+    @Test\n+    public void testCreateSchemaWithAuthorizationForUser()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_user AUTHORIZATION user\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_user.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_createschema_authorization_user.test\", \"Access Denied: Cannot drop table test_createschema_authorization_user.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_createschema_authorization_user.test\", \"Access Denied: Cannot select from table test_createschema_authorization_user.test\");\n+\n+        assertUpdate(user, \"DROP TABLE test_createschema_authorization_user.test\");\n+        assertUpdate(user, \"DROP SCHEMA test_createschema_authorization_user\");\n+    }\n+\n+    @Test\n+    public void testCreateSchemaWithAuthorizationForRole()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertQueryFails(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE nonexisting_role\", \".*?Role 'nonexisting_role' does not exist\");\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE authorized_users\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_role.test (x bigint)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNzAwMw==", "bodyText": "Somehow I cannot set this up in the test - it works when I test it with an installed server.\nEdit: This has to do something with how the tests are setup. SET ROLE NONE does not appear to affect the session at all. But it works in a real test. I'll look a bit more, but not sure how to resolve.\nIs there some caching going on?!", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r393927003", "createdAt": "2020-03-17T19:44:47Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -505,16 +524,112 @@ public void testSchemaAuthorizationForRole()\n         Session user = testSessionBuilder()\n                 .setCatalog(getSession().getCatalog().get())\n                 .setSchema(\"test_schema_authorization_role\")\n-                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_schema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n                 .build();\n \n         assertUpdate(user, \"CREATE TABLE test_schema_authorization_role.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_schema_authorization_role.test\", \"Access Denied: Cannot drop table test_schema_authorization_role.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_schema_authorization_role.test\", \"Access Denied: Cannot select from table test_schema_authorization_role.test\");\n+\n         assertUpdate(user, \"DROP TABLE test_schema_authorization_role.test\");\n         assertUpdate(user, \"DROP SCHEMA test_schema_authorization_role\");\n \n         assertUpdate(admin, \"DROP ROLE authorized_users\");\n     }\n \n+    @Test\n+    public void testCreateSchemaWithAuthorizationForUser()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_user AUTHORIZATION user\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_user.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_createschema_authorization_user.test\", \"Access Denied: Cannot drop table test_createschema_authorization_user.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_createschema_authorization_user.test\", \"Access Denied: Cannot select from table test_createschema_authorization_user.test\");\n+\n+        assertUpdate(user, \"DROP TABLE test_createschema_authorization_user.test\");\n+        assertUpdate(user, \"DROP SCHEMA test_createschema_authorization_user\");\n+    }\n+\n+    @Test\n+    public void testCreateSchemaWithAuthorizationForRole()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertQueryFails(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE nonexisting_role\", \".*?Role 'nonexisting_role' does not exist\");\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE authorized_users\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_role.test (x bigint)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwODQ3Mw=="}, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzUzOA==", "bodyText": "You need to create another session instance where user has disabled role. SET ROLE ... does not work in unit tests (it does not modify the session object).", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r394297538", "createdAt": "2020-03-18T12:06:59Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -505,16 +524,112 @@ public void testSchemaAuthorizationForRole()\n         Session user = testSessionBuilder()\n                 .setCatalog(getSession().getCatalog().get())\n                 .setSchema(\"test_schema_authorization_role\")\n-                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_schema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n                 .build();\n \n         assertUpdate(user, \"CREATE TABLE test_schema_authorization_role.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_schema_authorization_role.test\", \"Access Denied: Cannot drop table test_schema_authorization_role.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_schema_authorization_role.test\", \"Access Denied: Cannot select from table test_schema_authorization_role.test\");\n+\n         assertUpdate(user, \"DROP TABLE test_schema_authorization_role.test\");\n         assertUpdate(user, \"DROP SCHEMA test_schema_authorization_role\");\n \n         assertUpdate(admin, \"DROP ROLE authorized_users\");\n     }\n \n+    @Test\n+    public void testCreateSchemaWithAuthorizationForUser()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_user AUTHORIZATION user\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_user.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_createschema_authorization_user.test\", \"Access Denied: Cannot drop table test_createschema_authorization_user.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_createschema_authorization_user.test\", \"Access Denied: Cannot select from table test_createschema_authorization_user.test\");\n+\n+        assertUpdate(user, \"DROP TABLE test_createschema_authorization_user.test\");\n+        assertUpdate(user, \"DROP SCHEMA test_createschema_authorization_user\");\n+    }\n+\n+    @Test\n+    public void testCreateSchemaWithAuthorizationForRole()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertQueryFails(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE nonexisting_role\", \".*?Role 'nonexisting_role' does not exist\");\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE authorized_users\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_role.test (x bigint)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwODQ3Mw=="}, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NjcwOA==", "bodyText": "I tried that too. Lemme look at that again.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r394486708", "createdAt": "2020-03-18T16:38:41Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -505,16 +524,112 @@ public void testSchemaAuthorizationForRole()\n         Session user = testSessionBuilder()\n                 .setCatalog(getSession().getCatalog().get())\n                 .setSchema(\"test_schema_authorization_role\")\n-                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_schema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n                 .build();\n \n         assertUpdate(user, \"CREATE TABLE test_schema_authorization_role.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_schema_authorization_role.test\", \"Access Denied: Cannot drop table test_schema_authorization_role.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_schema_authorization_role.test\", \"Access Denied: Cannot select from table test_schema_authorization_role.test\");\n+\n         assertUpdate(user, \"DROP TABLE test_schema_authorization_role.test\");\n         assertUpdate(user, \"DROP SCHEMA test_schema_authorization_role\");\n \n         assertUpdate(admin, \"DROP ROLE authorized_users\");\n     }\n \n+    @Test\n+    public void testCreateSchemaWithAuthorizationForUser()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_user AUTHORIZATION user\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_user.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_createschema_authorization_user.test\", \"Access Denied: Cannot drop table test_createschema_authorization_user.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_createschema_authorization_user.test\", \"Access Denied: Cannot select from table test_createschema_authorization_user.test\");\n+\n+        assertUpdate(user, \"DROP TABLE test_createschema_authorization_user.test\");\n+        assertUpdate(user, \"DROP SCHEMA test_createschema_authorization_user\");\n+    }\n+\n+    @Test\n+    public void testCreateSchemaWithAuthorizationForRole()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertQueryFails(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE nonexisting_role\", \".*?Role 'nonexisting_role' does not exist\");\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE authorized_users\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_role.test (x bigint)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwODQ3Mw=="}, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYyOTY0NA==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r394629644", "createdAt": "2020-03-18T20:47:09Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -505,16 +524,112 @@ public void testSchemaAuthorizationForRole()\n         Session user = testSessionBuilder()\n                 .setCatalog(getSession().getCatalog().get())\n                 .setSchema(\"test_schema_authorization_role\")\n-                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_schema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n                 .build();\n \n         assertUpdate(user, \"CREATE TABLE test_schema_authorization_role.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_schema_authorization_role.test\", \"Access Denied: Cannot drop table test_schema_authorization_role.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_schema_authorization_role.test\", \"Access Denied: Cannot select from table test_schema_authorization_role.test\");\n+\n         assertUpdate(user, \"DROP TABLE test_schema_authorization_role.test\");\n         assertUpdate(user, \"DROP SCHEMA test_schema_authorization_role\");\n \n         assertUpdate(admin, \"DROP ROLE authorized_users\");\n     }\n \n+    @Test\n+    public void testCreateSchemaWithAuthorizationForUser()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_user AUTHORIZATION user\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_user.test (x bigint)\");\n+\n+        // another user should not be able to drop the table\n+        assertQueryFails(anotherUser, \"DROP TABLE test_createschema_authorization_user.test\", \"Access Denied: Cannot drop table test_createschema_authorization_user.test\");\n+        // or access the table in any way\n+        assertQueryFails(anotherUser, \"SELECT 1 FROM test_createschema_authorization_user.test\", \"Access Denied: Cannot select from table test_createschema_authorization_user.test\");\n+\n+        assertUpdate(user, \"DROP TABLE test_createschema_authorization_user.test\");\n+        assertUpdate(user, \"DROP SCHEMA test_createschema_authorization_user\");\n+    }\n+\n+    @Test\n+    public void testCreateSchemaWithAuthorizationForRole()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"user\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        Session anotherUser = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_createschema_authorization_role\")\n+                .setIdentity(Identity.forUser(\"anotheruser\")\n+                     .withPrincipal(getSession().getIdentity().getPrincipal())\n+                     .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertQueryFails(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE nonexisting_role\", \".*?Role 'nonexisting_role' does not exist\");\n+        assertUpdate(admin, \"CREATE SCHEMA test_createschema_authorization_role AUTHORIZATION ROLE authorized_users\");\n+        assertUpdate(user, \"CREATE TABLE test_createschema_authorization_role.test (x bigint)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwODQ3Mw=="}, "originalCommit": null, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIxMjE1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/CreateSchemaTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyMjoxMlrOF3R3Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyMjoxMlrOF3R3Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwODY1NA==", "bodyText": "no need for empty line here", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r393508654", "createdAt": "2020-03-17T08:22:12Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateSchemaTask.java", "diffHunk": "@@ -79,8 +84,26 @@ public String explain(CreateSchema statement, List<Expression> parameters)\n                 metadata,\n                 parameterExtractor(statement, parameters));\n \n-        metadata.createSchema(session, schema, properties);\n+        PrestoPrincipal principal = getCreatePrincipal(statement, session, metadata);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIxMjg0OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemoryMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyMjoyNlrOF3R3oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyMjoyNlrOF3R3oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwODc2OQ==", "bodyText": "static import for USER", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r393508769", "createdAt": "2020-03-17T08:22:26Z", "author": {"login": "kokosing"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemoryMetadata.java", "diffHunk": "@@ -151,7 +153,7 @@ public void testReadTableBeforeCreationCompleted()\n     public void testCreateSchema()\n     {\n         assertEquals(metadata.listSchemaNames(SESSION), ImmutableList.of(\"default\"));\n-        metadata.createSchema(SESSION, \"test\", ImmutableMap.of());\n+        metadata.createSchema(SESSION, \"test\", ImmutableMap.of(), new PrestoPrincipal(PrincipalType.USER, SESSION.getUser()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIxNDc4OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyMzowN1rOF3R48w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyMzowN1rOF3R48w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwOTEwNw==", "bodyText": "you changed the indentation, please restore previous indentation", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r393509107", "createdAt": "2020-03-17T08:23:07Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -39,7 +39,8 @@ statement\n     | USE schema=identifier                                            #use\n     | USE catalog=identifier '.' schema=identifier                     #use\n     | CREATE SCHEMA (IF NOT EXISTS)? qualifiedName\n-        (WITH properties)?                                             #createSchema\n+       (AUTHORIZATION principal)?", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIxODgwOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestStatementBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNDoxOFrOF3R7ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyNDoxOFrOF3R7ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwOTczMw==", "bodyText": "Also add:\n        printStatement(\"create schema test authorization user alice\");\n        printStatement(\"create schema test authorization user alice with ( format = 'ORC' )\");", "url": "https://github.com/trinodb/trino/pull/3066#discussion_r393509733", "createdAt": "2020-03-17T08:24:18Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestStatementBuilder.java", "diffHunk": "@@ -193,6 +193,10 @@ public void testStatementBuilder()\n         printStatement(\"alter table a.b.c drop column x\");\n \n         printStatement(\"create schema test\");\n+        printStatement(\"create schema test authorization alice\");\n+        printStatement(\"create schema test authorization alice with ( format = 'ORC' )\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 554, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}