{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NDA4Mzk5", "number": 3350, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1Nzo0N1rODw1QsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowODo1MlrODw1anQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTMwODY1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushProjectionThroughExchange.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1Nzo0N1rOGEC_CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1Nzo0N1rOGEC_CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NjM5Mw==", "bodyText": "This is more functional and idiomatic:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ImmutableMap.Builder<Symbol, Expression> translationMap = ImmutableMap.builder();\n          \n          \n            \n                            outputToInputMap.forEach((key, value) -> translationMap.put(key, value.toSymbolReference()));\n          \n          \n            \n                            Expression translatedExpression = inlineSymbols(translationMap.build(), projection.getValue());\n          \n          \n            \n                            Map<Symbol, SymbolReference> translationMap = outputToInputMap.entrySet().stream()\n          \n          \n            \n                                    .collect(Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue().toSymbolReference()));", "url": "https://github.com/trinodb/trino/pull/3350#discussion_r406896393", "createdAt": "2020-04-10T18:57:47Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushProjectionThroughExchange.java", "diffHunk": "@@ -113,15 +112,16 @@ public Result apply(ProjectNode project, Captures captures, Context context)\n                         // do not project the same symbol twice as ExchangeNode verifies that source input symbols match partitioning scheme outputLayout\n                         .filter(symbol -> !partitioningColumns.contains(symbol))\n                         .map(outputToInputMap::get)\n-                        .forEach(nameReference -> {\n-                            Symbol symbol = Symbol.from(nameReference);\n-                            projections.put(symbol, nameReference);\n-                            inputs.add(symbol);\n+                        .forEach(inputSymbol -> {\n+                            projections.put(inputSymbol, inputSymbol.toSymbolReference());\n+                            inputs.add(inputSymbol);\n                         });\n             }\n \n             for (Map.Entry<Symbol, Expression> projection : project.getAssignments().entrySet()) {\n-                Expression translatedExpression = inlineSymbols(outputToInputMap, projection.getValue());\n+                ImmutableMap.Builder<Symbol, Expression> translationMap = ImmutableMap.builder();\n+                outputToInputMap.forEach((key, value) -> translationMap.put(key, value.toSymbolReference()));\n+                Expression translatedExpression = inlineSymbols(translationMap.build(), projection.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb03bff84c3ae3bcee07f09c327d83e600b12c5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTMzNDA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushProjectionThroughExchange.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowODo1MlrOGEDO2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowODo1MlrOGEDO2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMDQ0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ImmutableMap.Builder<Symbol, Expression> mapBuilder = ImmutableMap.builder();\n          \n          \n            \n                        outputToInputMap.forEach((key, value) -> mapBuilder.put(key, value.toSymbolReference()));\n          \n          \n            \n                        Map<Symbol, Expression> translationMap = mapBuilder.build();\n          \n          \n            \n                        Map<Symbol, Expression> mapBuilder = outputToInputMap.entrySet().stream()\n          \n          \n            \n                                .collect(Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue().toSymbolReference()));", "url": "https://github.com/trinodb/trino/pull/3350#discussion_r406900441", "createdAt": "2020-04-10T19:08:52Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushProjectionThroughExchange.java", "diffHunk": "@@ -120,10 +120,22 @@ public Result apply(ProjectNode project, Captures captures, Context context)\n                         });\n             }\n \n+            ImmutableSet.Builder<Symbol> outputBuilder = ImmutableSet.builder();\n+            partitioningColumns.forEach(outputBuilder::add);\n+            exchange.getPartitioningScheme().getHashColumn().ifPresent(outputBuilder::add);\n+            exchange.getOrderingScheme().ifPresent(orderingScheme -> outputBuilder.addAll(orderingScheme.getOrderBy()));\n+            Set<Symbol> partitioningHashAndOrderingOutputs = outputBuilder.build();\n+\n+            ImmutableMap.Builder<Symbol, Expression> mapBuilder = ImmutableMap.builder();\n+            outputToInputMap.forEach((key, value) -> mapBuilder.put(key, value.toSymbolReference()));\n+            Map<Symbol, Expression> translationMap = mapBuilder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 330, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}