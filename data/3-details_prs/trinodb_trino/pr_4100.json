{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTk0ODM2", "number": 4100, "title": "Avoid busy waiting in the JDBC client.", "bodyText": "See #3928.\nThis is the simplest solution I could come up with. Simply count the number of expected item in the queue with a Semaphore and release the Semaphore one more time at the end of the Future, hence when we can acquire the Semaphore and yet the queue is empty we know we're done.\nIn my testing with 100k batches I noticed some overhead from the synchronization, but I'm not 100% about my testing. What this does for sure is avoiding the busy waiting in the JDBC client.", "createdAt": "2020-06-19T16:28:34Z", "url": "https://github.com/trinodb/trino/pull/4100", "merged": true, "mergeCommit": {"oid": "51016e7c25cd67fda1f67e745f7d792fde73592d"}, "closed": true, "closedAt": "2020-06-30T10:19:21Z", "author": {"login": "lhofhansl"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs4zTMAFqTQzNDMxMjU4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwJvO5gH2gAyNDM3MTk0ODM2OmNiNjUxMTYzMmI1YzI1MWU5ZGE5Y2M0ZGE3NDk5M2RlNTBhYjczZTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MzEyNTg2", "url": "https://github.com/trinodb/trino/pull/4100#pullrequestreview-434312586", "createdAt": "2020-06-19T19:58:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTo1ODozM1rOGmf2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTo1ODozM1rOGmf2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMDgwNQ==", "bodyText": "Nit: we don't abbreviate variable names. Please call this semaphore.", "url": "https://github.com/trinodb/trino/pull/4100#discussion_r443020805", "createdAt": "2020-06-19T19:58:33Z", "author": {"login": "electrum"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSet.java", "diffHunk": "@@ -1807,29 +1808,31 @@ private static Number toNumber(Object value)\n         private final StatementClient client;\n         private final BlockingQueue<T> rowQueue = new ArrayBlockingQueue<>(MAX_QUEUED_ROWS);\n         private final CompletableFuture<Void> future;\n+        private final Semaphore s = new Semaphore(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzkzMDY5", "url": "https://github.com/trinodb/trino/pull/4100#pullrequestreview-438793069", "createdAt": "2020-06-28T16:08:26Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNjowODoyNlrOGp-fJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNjoxMjoxOFrOGp-gzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2ODU4Mw==", "bodyText": "move next to rowQueue and document semaphore meaning with a code comment (ie what does a permit represent)", "url": "https://github.com/trinodb/trino/pull/4100#discussion_r446668583", "createdAt": "2020-06-28T16:08:26Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSet.java", "diffHunk": "@@ -1807,23 +1808,25 @@ private static Number toNumber(Object value)\n         private final StatementClient client;\n         private final BlockingQueue<T> rowQueue = new ArrayBlockingQueue<>(MAX_QUEUED_ROWS);\n         private final CompletableFuture<Void> future;\n-        private Thread parent;\n+        private final Semaphore semaphore = new Semaphore(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2OTAwNg==", "bodyText": "That is not correct from Iterator's API perspective.\nhasNext() can be invoked once, multiple times or not at all.\nSo, calling hasNext() must have no visible side effects.\n(It can still change the internal state as it is eg in com.google.common.base.AbstractIterator).\nBTW using that class could make the code simpler.\nThen perhaps all you would need is blocking on rowQueue, without a need for a semaphore?", "url": "https://github.com/trinodb/trino/pull/4100#discussion_r446669006", "createdAt": "2020-06-28T16:12:18Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSet.java", "diffHunk": "@@ -1842,16 +1845,15 @@ public void interrupt(InterruptedException e)\n         @Override\n         public boolean hasNext()\n         {\n-            if (!rowQueue.isEmpty()) {\n-                return true;\n+            try {\n+                semaphore.acquire();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTA0MTkx", "url": "https://github.com/trinodb/trino/pull/4100#pullrequestreview-439504191", "createdAt": "2020-06-29T21:12:22Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToxMjoyMlrOGqiZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToxMjoyMlrOGqiZng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI1Njk5MA==", "bodyText": "Just this:\n// If we got here and the queue is empty the future must be done. Check status. \n[MoreFutures.]getDone(future);", "url": "https://github.com/trinodb/trino/pull/4100#discussion_r447256990", "createdAt": "2020-06-29T21:12:22Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSet.java", "diffHunk": "@@ -1840,18 +1845,17 @@ public void interrupt(InterruptedException e)\n         }\n \n         @Override\n-        public boolean hasNext()\n+        protected T computeNext()\n         {\n-            if (!rowQueue.isEmpty()) {\n-                return true;\n+            try {\n+                semaphore.acquire();\n             }\n-            while (rowQueue.isEmpty() && !future.isDone()) {\n-                // making sure rowQueue has some records to process or return false\n-                if (parent.isInterrupted()) {\n-                    interrupt(new InterruptedException(\"parent thread interrupted\"));\n-                }\n+            catch (InterruptedException e) {\n+                interrupt(e);\n             }\n-            if (future.isCompletedExceptionally()) {\n+            if (rowQueue.isEmpty()) {\n+                // If we got here and the queue is empty the future must be done.\n+                // Check for ExecutionExceptions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb6511632b5c251e9da9cc4da74993de50ab73e4", "author": {"user": {"login": "lhofhansl", "name": null}}, "url": "https://github.com/trinodb/trino/commit/cb6511632b5c251e9da9cc4da74993de50ab73e4", "committedDate": "2020-06-29T23:35:11Z", "message": "Avoid busy waiting in the JDBC client."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 459, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}