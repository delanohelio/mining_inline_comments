{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzOTQxMTM4", "number": 4506, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxNzo1OVrOEQequg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyNTo0NlrOEQeyJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE1MTMwOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxNzo1OVrOG0ppJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjo0MjoyOVrOG0qPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MTQxNQ==", "bodyText": "Does it matter we are calculating zoneId.toLowerCase(ENGLISH) twice now?", "url": "https://github.com/trinodb/trino/pull/4506#discussion_r457861415", "createdAt": "2020-07-21T06:17:59Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "diffHunk": "@@ -210,102 +251,89 @@ public static boolean isUtcZoneId(String zoneId)\n         return normalizeZoneId(zoneId).equals(\"utc\");\n     }\n \n-    private static String normalizeZoneId(String originalZoneId)\n+    private static String normalizeZoneId(String zoneId)\n     {\n-        String zoneId = originalZoneId.toLowerCase(ENGLISH);\n-\n-        boolean startsWithEtc = zoneId.startsWith(\"etc/\");\n-        if (startsWithEtc) {\n-            zoneId = zoneId.substring(4);\n-        }\n-\n         if (isUtcEquivalentName(zoneId)) {\n             return \"utc\";\n         }\n \n-        //\n-        // Normalize fixed offset time zones.\n-        //\n+        // The JDK doesn't understand legacy timezones such as Etc/GMT+00:00, GMT-7\n+        String lowerCased = zoneId.toLowerCase(ENGLISH);\n+        for (String prefix : UTC_OFFSET_PREFIXES) {\n+            if (lowerCased.startsWith(prefix)) {\n+                int offset = prefix.length();\n+                if (lowerCased.charAt(offset) != '+' && lowerCased.charAt(offset) != '-') {\n+                    // It must be something like GMT7, or Etc/UTC4, which are invalid\n+                    return zoneId;\n+                }\n+\n+                int colon = lowerCased.indexOf(':', offset);\n+                int hour;\n+                int minute = 0;\n+                if (colon != -1) {\n+                    hour = Integer.parseInt(lowerCased, offset, colon, 10);\n+                    minute = Integer.parseInt(lowerCased, colon + 1, lowerCased.length(), 10);\n+                }\n+                else if (lowerCased.length() - offset <= 3) {\n+                    // +H or +HH\n+                    hour = Integer.parseInt(lowerCased, offset, lowerCased.length(), 10);\n+                }\n+                else {\n+                    // let the JDK handle it below\n+                    break;\n+                }\n+\n+                if (hour == 0 && minute == 0) {\n+                    return \"utc\";\n+                }\n+\n+                if (prefix.equals(\"etc/gmt\")) {\n+                    hour = -hour;\n+                }\n \n-        // In some zones systems, these will start with UTC, GMT or UT.\n-        int length = zoneId.length();\n-        boolean startsWithEtcGmt = false;\n-        if (length > 3 && (zoneId.startsWith(\"utc\") || zoneId.startsWith(\"gmt\"))) {\n-            if (startsWithEtc && zoneId.startsWith(\"gmt\")) {\n-                startsWithEtcGmt = true;\n+                return formatZoneOffset(hour, minute);\n             }\n-            zoneId = zoneId.substring(3);\n-            length = zoneId.length();\n-        }\n-        else if (length > 2 && zoneId.startsWith(\"ut\")) {\n-            zoneId = zoneId.substring(2);\n-            length = zoneId.length();\n         }\n \n-        // (+/-)00:00 is UTC\n-        if (\"+00:00\".equals(zoneId) || \"-00:00\".equals(zoneId)) {\n-            return \"utc\";\n+        // Normalize using JDK rules. In particular, normalize forms such as +0735, +7, +073521\n+        try {\n+            zoneId = ZoneId.of(zoneId).getId();\n         }\n-\n-        // if zoneId matches XXX:XX, it is likely +HH:mm, so just return it\n-        // since only offset time zones will contain a `:` character\n-        if (length == 6 && zoneId.charAt(3) == ':') {\n+        catch (Exception e) {\n             return zoneId;\n         }\n \n-        //\n-        // Rewrite (+/-)H[H] to (+/-)HH:00\n-        //\n-        if (length != 2 && length != 3) {\n-            return originalZoneId;\n+        if (isUtcEquivalentName(zoneId)) {\n+            return \"utc\";\n         }\n \n-        // zone must start with a plus or minus sign\n-        char signChar = zoneId.charAt(0);\n-        if (signChar != '+' && signChar != '-') {\n-            return originalZoneId;\n-        }\n-        if (startsWithEtcGmt) {\n-            // Flip sign for Etc/GMT(+/-)H[H]\n-            signChar = signChar == '-' ? '+' : '-';\n-        }\n+        return zoneId;\n+    }\n \n-        // extract the tens and ones characters for the hour\n-        char hourTens;\n-        char hourOnes;\n-        if (length == 2) {\n-            hourTens = '0';\n-            hourOnes = zoneId.charAt(1);\n-        }\n-        else {\n-            hourTens = zoneId.charAt(1);\n-            hourOnes = zoneId.charAt(2);\n-        }\n+    private static String formatZoneOffset(int hour, int minute)\n+    {\n+        StringBuilder builder = new StringBuilder();\n+\n+        builder.append(hour >= 0 ? '+' : '-');\n \n-        // do we have a valid hours offset time zone?\n-        if (!isDigit(hourTens) || !isDigit(hourOnes)) {\n-            return originalZoneId;\n+        hour = abs(hour);\n+        if (hour < 10) {\n+            builder.append('0');\n         }\n+        builder.append(hour);\n+        builder.append(':');\n \n-        // is this offset 0 (e.g., UTC)?\n-        if (hourTens == '0' && hourOnes == '0') {\n-            return \"utc\";\n+        if (minute < 10) {\n+            builder.append('0');\n         }\n+        builder.append(minute);\n \n-        return \"\" + signChar + hourTens + hourOnes + \":00\";\n+        return builder.toString();\n     }\n \n     private static boolean isUtcEquivalentName(String zoneId)\n     {\n-        return zoneId.equals(\"utc\") ||\n-                zoneId.equals(\"z\") ||\n-                zoneId.equals(\"ut\") ||\n-                zoneId.equals(\"uct\") ||\n-                zoneId.equals(\"gmt\") ||\n-                zoneId.equals(\"gmt0\") ||\n-                zoneId.equals(\"greenwich\") ||\n-                zoneId.equals(\"universal\") ||\n-                zoneId.equals(\"zulu\");\n+        return UTC_EQUIVALENTS.contains(zoneId.toLowerCase(ENGLISH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MTE0Nw==", "bodyText": "Not really. I have another PR in progress to remove the case insensitivity. We don't support it, anyway.", "url": "https://github.com/trinodb/trino/pull/4506#discussion_r457871147", "createdAt": "2020-07-21T06:42:29Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "diffHunk": "@@ -210,102 +251,89 @@ public static boolean isUtcZoneId(String zoneId)\n         return normalizeZoneId(zoneId).equals(\"utc\");\n     }\n \n-    private static String normalizeZoneId(String originalZoneId)\n+    private static String normalizeZoneId(String zoneId)\n     {\n-        String zoneId = originalZoneId.toLowerCase(ENGLISH);\n-\n-        boolean startsWithEtc = zoneId.startsWith(\"etc/\");\n-        if (startsWithEtc) {\n-            zoneId = zoneId.substring(4);\n-        }\n-\n         if (isUtcEquivalentName(zoneId)) {\n             return \"utc\";\n         }\n \n-        //\n-        // Normalize fixed offset time zones.\n-        //\n+        // The JDK doesn't understand legacy timezones such as Etc/GMT+00:00, GMT-7\n+        String lowerCased = zoneId.toLowerCase(ENGLISH);\n+        for (String prefix : UTC_OFFSET_PREFIXES) {\n+            if (lowerCased.startsWith(prefix)) {\n+                int offset = prefix.length();\n+                if (lowerCased.charAt(offset) != '+' && lowerCased.charAt(offset) != '-') {\n+                    // It must be something like GMT7, or Etc/UTC4, which are invalid\n+                    return zoneId;\n+                }\n+\n+                int colon = lowerCased.indexOf(':', offset);\n+                int hour;\n+                int minute = 0;\n+                if (colon != -1) {\n+                    hour = Integer.parseInt(lowerCased, offset, colon, 10);\n+                    minute = Integer.parseInt(lowerCased, colon + 1, lowerCased.length(), 10);\n+                }\n+                else if (lowerCased.length() - offset <= 3) {\n+                    // +H or +HH\n+                    hour = Integer.parseInt(lowerCased, offset, lowerCased.length(), 10);\n+                }\n+                else {\n+                    // let the JDK handle it below\n+                    break;\n+                }\n+\n+                if (hour == 0 && minute == 0) {\n+                    return \"utc\";\n+                }\n+\n+                if (prefix.equals(\"etc/gmt\")) {\n+                    hour = -hour;\n+                }\n \n-        // In some zones systems, these will start with UTC, GMT or UT.\n-        int length = zoneId.length();\n-        boolean startsWithEtcGmt = false;\n-        if (length > 3 && (zoneId.startsWith(\"utc\") || zoneId.startsWith(\"gmt\"))) {\n-            if (startsWithEtc && zoneId.startsWith(\"gmt\")) {\n-                startsWithEtcGmt = true;\n+                return formatZoneOffset(hour, minute);\n             }\n-            zoneId = zoneId.substring(3);\n-            length = zoneId.length();\n-        }\n-        else if (length > 2 && zoneId.startsWith(\"ut\")) {\n-            zoneId = zoneId.substring(2);\n-            length = zoneId.length();\n         }\n \n-        // (+/-)00:00 is UTC\n-        if (\"+00:00\".equals(zoneId) || \"-00:00\".equals(zoneId)) {\n-            return \"utc\";\n+        // Normalize using JDK rules. In particular, normalize forms such as +0735, +7, +073521\n+        try {\n+            zoneId = ZoneId.of(zoneId).getId();\n         }\n-\n-        // if zoneId matches XXX:XX, it is likely +HH:mm, so just return it\n-        // since only offset time zones will contain a `:` character\n-        if (length == 6 && zoneId.charAt(3) == ':') {\n+        catch (Exception e) {\n             return zoneId;\n         }\n \n-        //\n-        // Rewrite (+/-)H[H] to (+/-)HH:00\n-        //\n-        if (length != 2 && length != 3) {\n-            return originalZoneId;\n+        if (isUtcEquivalentName(zoneId)) {\n+            return \"utc\";\n         }\n \n-        // zone must start with a plus or minus sign\n-        char signChar = zoneId.charAt(0);\n-        if (signChar != '+' && signChar != '-') {\n-            return originalZoneId;\n-        }\n-        if (startsWithEtcGmt) {\n-            // Flip sign for Etc/GMT(+/-)H[H]\n-            signChar = signChar == '-' ? '+' : '-';\n-        }\n+        return zoneId;\n+    }\n \n-        // extract the tens and ones characters for the hour\n-        char hourTens;\n-        char hourOnes;\n-        if (length == 2) {\n-            hourTens = '0';\n-            hourOnes = zoneId.charAt(1);\n-        }\n-        else {\n-            hourTens = zoneId.charAt(1);\n-            hourOnes = zoneId.charAt(2);\n-        }\n+    private static String formatZoneOffset(int hour, int minute)\n+    {\n+        StringBuilder builder = new StringBuilder();\n+\n+        builder.append(hour >= 0 ? '+' : '-');\n \n-        // do we have a valid hours offset time zone?\n-        if (!isDigit(hourTens) || !isDigit(hourOnes)) {\n-            return originalZoneId;\n+        hour = abs(hour);\n+        if (hour < 10) {\n+            builder.append('0');\n         }\n+        builder.append(hour);\n+        builder.append(':');\n \n-        // is this offset 0 (e.g., UTC)?\n-        if (hourTens == '0' && hourOnes == '0') {\n-            return \"utc\";\n+        if (minute < 10) {\n+            builder.append('0');\n         }\n+        builder.append(minute);\n \n-        return \"\" + signChar + hourTens + hourOnes + \":00\";\n+        return builder.toString();\n     }\n \n     private static boolean isUtcEquivalentName(String zoneId)\n     {\n-        return zoneId.equals(\"utc\") ||\n-                zoneId.equals(\"z\") ||\n-                zoneId.equals(\"ut\") ||\n-                zoneId.equals(\"uct\") ||\n-                zoneId.equals(\"gmt\") ||\n-                zoneId.equals(\"gmt0\") ||\n-                zoneId.equals(\"greenwich\") ||\n-                zoneId.equals(\"universal\") ||\n-                zoneId.equals(\"zulu\");\n+        return UTC_EQUIVALENTS.contains(zoneId.toLowerCase(ENGLISH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MTQxNQ=="}, "originalCommit": null, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE1MzI5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxOTowMFrOG0pqgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxOTowMFrOG0pqgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MTc2Mw==", "bodyText": "index out of bound ?", "url": "https://github.com/trinodb/trino/pull/4506#discussion_r457861763", "createdAt": "2020-07-21T06:19:00Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "diffHunk": "@@ -210,102 +251,89 @@ public static boolean isUtcZoneId(String zoneId)\n         return normalizeZoneId(zoneId).equals(\"utc\");\n     }\n \n-    private static String normalizeZoneId(String originalZoneId)\n+    private static String normalizeZoneId(String zoneId)\n     {\n-        String zoneId = originalZoneId.toLowerCase(ENGLISH);\n-\n-        boolean startsWithEtc = zoneId.startsWith(\"etc/\");\n-        if (startsWithEtc) {\n-            zoneId = zoneId.substring(4);\n-        }\n-\n         if (isUtcEquivalentName(zoneId)) {\n             return \"utc\";\n         }\n \n-        //\n-        // Normalize fixed offset time zones.\n-        //\n+        // The JDK doesn't understand legacy timezones such as Etc/GMT+00:00, GMT-7\n+        String lowerCased = zoneId.toLowerCase(ENGLISH);\n+        for (String prefix : UTC_OFFSET_PREFIXES) {\n+            if (lowerCased.startsWith(prefix)) {\n+                int offset = prefix.length();\n+                if (lowerCased.charAt(offset) != '+' && lowerCased.charAt(offset) != '-') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE1NTUyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxOTo1MVrOG0pryw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxOTo1MVrOG0pryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MjA5MQ==", "bodyText": "Include a note in the comment why you return instead of throwing for something deemed invalid.", "url": "https://github.com/trinodb/trino/pull/4506#discussion_r457862091", "createdAt": "2020-07-21T06:19:51Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "diffHunk": "@@ -210,102 +251,89 @@ public static boolean isUtcZoneId(String zoneId)\n         return normalizeZoneId(zoneId).equals(\"utc\");\n     }\n \n-    private static String normalizeZoneId(String originalZoneId)\n+    private static String normalizeZoneId(String zoneId)\n     {\n-        String zoneId = originalZoneId.toLowerCase(ENGLISH);\n-\n-        boolean startsWithEtc = zoneId.startsWith(\"etc/\");\n-        if (startsWithEtc) {\n-            zoneId = zoneId.substring(4);\n-        }\n-\n         if (isUtcEquivalentName(zoneId)) {\n             return \"utc\";\n         }\n \n-        //\n-        // Normalize fixed offset time zones.\n-        //\n+        // The JDK doesn't understand legacy timezones such as Etc/GMT+00:00, GMT-7\n+        String lowerCased = zoneId.toLowerCase(ENGLISH);\n+        for (String prefix : UTC_OFFSET_PREFIXES) {\n+            if (lowerCased.startsWith(prefix)) {\n+                int offset = prefix.length();\n+                if (lowerCased.charAt(offset) != '+' && lowerCased.charAt(offset) != '-') {\n+                    // It must be something like GMT7, or Etc/UTC4, which are invalid\n+                    return zoneId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE2MDYyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyMTo0OFrOG0pusA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyMTo0OFrOG0pusA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MjgzMg==", "bodyText": "What if part before the colon is empty or not digits (GMT+:10 or GMT+a:10)\nSame for part after the colon?\nShould this all be wrapped in catch (Exception e) { return zoneId; }?", "url": "https://github.com/trinodb/trino/pull/4506#discussion_r457862832", "createdAt": "2020-07-21T06:21:48Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "diffHunk": "@@ -210,102 +251,89 @@ public static boolean isUtcZoneId(String zoneId)\n         return normalizeZoneId(zoneId).equals(\"utc\");\n     }\n \n-    private static String normalizeZoneId(String originalZoneId)\n+    private static String normalizeZoneId(String zoneId)\n     {\n-        String zoneId = originalZoneId.toLowerCase(ENGLISH);\n-\n-        boolean startsWithEtc = zoneId.startsWith(\"etc/\");\n-        if (startsWithEtc) {\n-            zoneId = zoneId.substring(4);\n-        }\n-\n         if (isUtcEquivalentName(zoneId)) {\n             return \"utc\";\n         }\n \n-        //\n-        // Normalize fixed offset time zones.\n-        //\n+        // The JDK doesn't understand legacy timezones such as Etc/GMT+00:00, GMT-7\n+        String lowerCased = zoneId.toLowerCase(ENGLISH);\n+        for (String prefix : UTC_OFFSET_PREFIXES) {\n+            if (lowerCased.startsWith(prefix)) {\n+                int offset = prefix.length();\n+                if (lowerCased.charAt(offset) != '+' && lowerCased.charAt(offset) != '-') {\n+                    // It must be something like GMT7, or Etc/UTC4, which are invalid\n+                    return zoneId;\n+                }\n+\n+                int colon = lowerCased.indexOf(':', offset);\n+                int hour;\n+                int minute = 0;\n+                if (colon != -1) {\n+                    hour = Integer.parseInt(lowerCased, offset, colon, 10);\n+                    minute = Integer.parseInt(lowerCased, colon + 1, lowerCased.length(), 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE2NjM2OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyNDoxNlrOG0pyDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjo0NDowOVrOG0qRuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MzY5Mg==", "bodyText": "6 capacity, if you care about performance\n(format otherwise)", "url": "https://github.com/trinodb/trino/pull/4506#discussion_r457863692", "createdAt": "2020-07-21T06:24:16Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "diffHunk": "@@ -210,102 +251,89 @@ public static boolean isUtcZoneId(String zoneId)\n         return normalizeZoneId(zoneId).equals(\"utc\");\n     }\n \n-    private static String normalizeZoneId(String originalZoneId)\n+    private static String normalizeZoneId(String zoneId)\n     {\n-        String zoneId = originalZoneId.toLowerCase(ENGLISH);\n-\n-        boolean startsWithEtc = zoneId.startsWith(\"etc/\");\n-        if (startsWithEtc) {\n-            zoneId = zoneId.substring(4);\n-        }\n-\n         if (isUtcEquivalentName(zoneId)) {\n             return \"utc\";\n         }\n \n-        //\n-        // Normalize fixed offset time zones.\n-        //\n+        // The JDK doesn't understand legacy timezones such as Etc/GMT+00:00, GMT-7\n+        String lowerCased = zoneId.toLowerCase(ENGLISH);\n+        for (String prefix : UTC_OFFSET_PREFIXES) {\n+            if (lowerCased.startsWith(prefix)) {\n+                int offset = prefix.length();\n+                if (lowerCased.charAt(offset) != '+' && lowerCased.charAt(offset) != '-') {\n+                    // It must be something like GMT7, or Etc/UTC4, which are invalid\n+                    return zoneId;\n+                }\n+\n+                int colon = lowerCased.indexOf(':', offset);\n+                int hour;\n+                int minute = 0;\n+                if (colon != -1) {\n+                    hour = Integer.parseInt(lowerCased, offset, colon, 10);\n+                    minute = Integer.parseInt(lowerCased, colon + 1, lowerCased.length(), 10);\n+                }\n+                else if (lowerCased.length() - offset <= 3) {\n+                    // +H or +HH\n+                    hour = Integer.parseInt(lowerCased, offset, lowerCased.length(), 10);\n+                }\n+                else {\n+                    // let the JDK handle it below\n+                    break;\n+                }\n+\n+                if (hour == 0 && minute == 0) {\n+                    return \"utc\";\n+                }\n+\n+                if (prefix.equals(\"etc/gmt\")) {\n+                    hour = -hour;\n+                }\n \n-        // In some zones systems, these will start with UTC, GMT or UT.\n-        int length = zoneId.length();\n-        boolean startsWithEtcGmt = false;\n-        if (length > 3 && (zoneId.startsWith(\"utc\") || zoneId.startsWith(\"gmt\"))) {\n-            if (startsWithEtc && zoneId.startsWith(\"gmt\")) {\n-                startsWithEtcGmt = true;\n+                return formatZoneOffset(hour, minute);\n             }\n-            zoneId = zoneId.substring(3);\n-            length = zoneId.length();\n-        }\n-        else if (length > 2 && zoneId.startsWith(\"ut\")) {\n-            zoneId = zoneId.substring(2);\n-            length = zoneId.length();\n         }\n \n-        // (+/-)00:00 is UTC\n-        if (\"+00:00\".equals(zoneId) || \"-00:00\".equals(zoneId)) {\n-            return \"utc\";\n+        // Normalize using JDK rules. In particular, normalize forms such as +0735, +7, +073521\n+        try {\n+            zoneId = ZoneId.of(zoneId).getId();\n         }\n-\n-        // if zoneId matches XXX:XX, it is likely +HH:mm, so just return it\n-        // since only offset time zones will contain a `:` character\n-        if (length == 6 && zoneId.charAt(3) == ':') {\n+        catch (Exception e) {\n             return zoneId;\n         }\n \n-        //\n-        // Rewrite (+/-)H[H] to (+/-)HH:00\n-        //\n-        if (length != 2 && length != 3) {\n-            return originalZoneId;\n+        if (isUtcEquivalentName(zoneId)) {\n+            return \"utc\";\n         }\n \n-        // zone must start with a plus or minus sign\n-        char signChar = zoneId.charAt(0);\n-        if (signChar != '+' && signChar != '-') {\n-            return originalZoneId;\n-        }\n-        if (startsWithEtcGmt) {\n-            // Flip sign for Etc/GMT(+/-)H[H]\n-            signChar = signChar == '-' ? '+' : '-';\n-        }\n+        return zoneId;\n+    }\n \n-        // extract the tens and ones characters for the hour\n-        char hourTens;\n-        char hourOnes;\n-        if (length == 2) {\n-            hourTens = '0';\n-            hourOnes = zoneId.charAt(1);\n-        }\n-        else {\n-            hourTens = zoneId.charAt(1);\n-            hourOnes = zoneId.charAt(2);\n-        }\n+    private static String formatZoneOffset(int hour, int minute)\n+    {\n+        StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MTgwMw==", "bodyText": "format is much slower. Default StringBuilder capacity is 16, so performance-wise, setting it to 6 doesn't matter.", "url": "https://github.com/trinodb/trino/pull/4506#discussion_r457871803", "createdAt": "2020-07-21T06:44:09Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "diffHunk": "@@ -210,102 +251,89 @@ public static boolean isUtcZoneId(String zoneId)\n         return normalizeZoneId(zoneId).equals(\"utc\");\n     }\n \n-    private static String normalizeZoneId(String originalZoneId)\n+    private static String normalizeZoneId(String zoneId)\n     {\n-        String zoneId = originalZoneId.toLowerCase(ENGLISH);\n-\n-        boolean startsWithEtc = zoneId.startsWith(\"etc/\");\n-        if (startsWithEtc) {\n-            zoneId = zoneId.substring(4);\n-        }\n-\n         if (isUtcEquivalentName(zoneId)) {\n             return \"utc\";\n         }\n \n-        //\n-        // Normalize fixed offset time zones.\n-        //\n+        // The JDK doesn't understand legacy timezones such as Etc/GMT+00:00, GMT-7\n+        String lowerCased = zoneId.toLowerCase(ENGLISH);\n+        for (String prefix : UTC_OFFSET_PREFIXES) {\n+            if (lowerCased.startsWith(prefix)) {\n+                int offset = prefix.length();\n+                if (lowerCased.charAt(offset) != '+' && lowerCased.charAt(offset) != '-') {\n+                    // It must be something like GMT7, or Etc/UTC4, which are invalid\n+                    return zoneId;\n+                }\n+\n+                int colon = lowerCased.indexOf(':', offset);\n+                int hour;\n+                int minute = 0;\n+                if (colon != -1) {\n+                    hour = Integer.parseInt(lowerCased, offset, colon, 10);\n+                    minute = Integer.parseInt(lowerCased, colon + 1, lowerCased.length(), 10);\n+                }\n+                else if (lowerCased.length() - offset <= 3) {\n+                    // +H or +HH\n+                    hour = Integer.parseInt(lowerCased, offset, lowerCased.length(), 10);\n+                }\n+                else {\n+                    // let the JDK handle it below\n+                    break;\n+                }\n+\n+                if (hour == 0 && minute == 0) {\n+                    return \"utc\";\n+                }\n+\n+                if (prefix.equals(\"etc/gmt\")) {\n+                    hour = -hour;\n+                }\n \n-        // In some zones systems, these will start with UTC, GMT or UT.\n-        int length = zoneId.length();\n-        boolean startsWithEtcGmt = false;\n-        if (length > 3 && (zoneId.startsWith(\"utc\") || zoneId.startsWith(\"gmt\"))) {\n-            if (startsWithEtc && zoneId.startsWith(\"gmt\")) {\n-                startsWithEtcGmt = true;\n+                return formatZoneOffset(hour, minute);\n             }\n-            zoneId = zoneId.substring(3);\n-            length = zoneId.length();\n-        }\n-        else if (length > 2 && zoneId.startsWith(\"ut\")) {\n-            zoneId = zoneId.substring(2);\n-            length = zoneId.length();\n         }\n \n-        // (+/-)00:00 is UTC\n-        if (\"+00:00\".equals(zoneId) || \"-00:00\".equals(zoneId)) {\n-            return \"utc\";\n+        // Normalize using JDK rules. In particular, normalize forms such as +0735, +7, +073521\n+        try {\n+            zoneId = ZoneId.of(zoneId).getId();\n         }\n-\n-        // if zoneId matches XXX:XX, it is likely +HH:mm, so just return it\n-        // since only offset time zones will contain a `:` character\n-        if (length == 6 && zoneId.charAt(3) == ':') {\n+        catch (Exception e) {\n             return zoneId;\n         }\n \n-        //\n-        // Rewrite (+/-)H[H] to (+/-)HH:00\n-        //\n-        if (length != 2 && length != 3) {\n-            return originalZoneId;\n+        if (isUtcEquivalentName(zoneId)) {\n+            return \"utc\";\n         }\n \n-        // zone must start with a plus or minus sign\n-        char signChar = zoneId.charAt(0);\n-        if (signChar != '+' && signChar != '-') {\n-            return originalZoneId;\n-        }\n-        if (startsWithEtcGmt) {\n-            // Flip sign for Etc/GMT(+/-)H[H]\n-            signChar = signChar == '-' ? '+' : '-';\n-        }\n+        return zoneId;\n+    }\n \n-        // extract the tens and ones characters for the hour\n-        char hourTens;\n-        char hourOnes;\n-        if (length == 2) {\n-            hourTens = '0';\n-            hourOnes = zoneId.charAt(1);\n-        }\n-        else {\n-            hourTens = zoneId.charAt(1);\n-            hourOnes = zoneId.charAt(2);\n-        }\n+    private static String formatZoneOffset(int hour, int minute)\n+    {\n+        StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MzY5Mg=="}, "originalCommit": null, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE3MDMxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyNTo0NlrOG0p0PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjo0NToyMFrOG0qT2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NDI1Mw==", "bodyText": "Do you have a test for +073521 case?\n(what does it mean actually?)", "url": "https://github.com/trinodb/trino/pull/4506#discussion_r457864253", "createdAt": "2020-07-21T06:25:46Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "diffHunk": "@@ -210,102 +251,89 @@ public static boolean isUtcZoneId(String zoneId)\n         return normalizeZoneId(zoneId).equals(\"utc\");\n     }\n \n-    private static String normalizeZoneId(String originalZoneId)\n+    private static String normalizeZoneId(String zoneId)\n     {\n-        String zoneId = originalZoneId.toLowerCase(ENGLISH);\n-\n-        boolean startsWithEtc = zoneId.startsWith(\"etc/\");\n-        if (startsWithEtc) {\n-            zoneId = zoneId.substring(4);\n-        }\n-\n         if (isUtcEquivalentName(zoneId)) {\n             return \"utc\";\n         }\n \n-        //\n-        // Normalize fixed offset time zones.\n-        //\n+        // The JDK doesn't understand legacy timezones such as Etc/GMT+00:00, GMT-7\n+        String lowerCased = zoneId.toLowerCase(ENGLISH);\n+        for (String prefix : UTC_OFFSET_PREFIXES) {\n+            if (lowerCased.startsWith(prefix)) {\n+                int offset = prefix.length();\n+                if (lowerCased.charAt(offset) != '+' && lowerCased.charAt(offset) != '-') {\n+                    // It must be something like GMT7, or Etc/UTC4, which are invalid\n+                    return zoneId;\n+                }\n+\n+                int colon = lowerCased.indexOf(':', offset);\n+                int hour;\n+                int minute = 0;\n+                if (colon != -1) {\n+                    hour = Integer.parseInt(lowerCased, offset, colon, 10);\n+                    minute = Integer.parseInt(lowerCased, colon + 1, lowerCased.length(), 10);\n+                }\n+                else if (lowerCased.length() - offset <= 3) {\n+                    // +H or +HH\n+                    hour = Integer.parseInt(lowerCased, offset, lowerCased.length(), 10);\n+                }\n+                else {\n+                    // let the JDK handle it below\n+                    break;\n+                }\n+\n+                if (hour == 0 && minute == 0) {\n+                    return \"utc\";\n+                }\n+\n+                if (prefix.equals(\"etc/gmt\")) {\n+                    hour = -hour;\n+                }\n \n-        // In some zones systems, these will start with UTC, GMT or UT.\n-        int length = zoneId.length();\n-        boolean startsWithEtcGmt = false;\n-        if (length > 3 && (zoneId.startsWith(\"utc\") || zoneId.startsWith(\"gmt\"))) {\n-            if (startsWithEtc && zoneId.startsWith(\"gmt\")) {\n-                startsWithEtcGmt = true;\n+                return formatZoneOffset(hour, minute);\n             }\n-            zoneId = zoneId.substring(3);\n-            length = zoneId.length();\n-        }\n-        else if (length > 2 && zoneId.startsWith(\"ut\")) {\n-            zoneId = zoneId.substring(2);\n-            length = zoneId.length();\n         }\n \n-        // (+/-)00:00 is UTC\n-        if (\"+00:00\".equals(zoneId) || \"-00:00\".equals(zoneId)) {\n-            return \"utc\";\n+        // Normalize using JDK rules. In particular, normalize forms such as +0735, +7, +073521", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MjM0NA==", "bodyText": "We don't, because we don't support them in Presto. The comment is there for completeness. +073521 is +07:35:21 (i.e., an offset with non-zero seconds)", "url": "https://github.com/trinodb/trino/pull/4506#discussion_r457872344", "createdAt": "2020-07-21T06:45:20Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimeZoneKey.java", "diffHunk": "@@ -210,102 +251,89 @@ public static boolean isUtcZoneId(String zoneId)\n         return normalizeZoneId(zoneId).equals(\"utc\");\n     }\n \n-    private static String normalizeZoneId(String originalZoneId)\n+    private static String normalizeZoneId(String zoneId)\n     {\n-        String zoneId = originalZoneId.toLowerCase(ENGLISH);\n-\n-        boolean startsWithEtc = zoneId.startsWith(\"etc/\");\n-        if (startsWithEtc) {\n-            zoneId = zoneId.substring(4);\n-        }\n-\n         if (isUtcEquivalentName(zoneId)) {\n             return \"utc\";\n         }\n \n-        //\n-        // Normalize fixed offset time zones.\n-        //\n+        // The JDK doesn't understand legacy timezones such as Etc/GMT+00:00, GMT-7\n+        String lowerCased = zoneId.toLowerCase(ENGLISH);\n+        for (String prefix : UTC_OFFSET_PREFIXES) {\n+            if (lowerCased.startsWith(prefix)) {\n+                int offset = prefix.length();\n+                if (lowerCased.charAt(offset) != '+' && lowerCased.charAt(offset) != '-') {\n+                    // It must be something like GMT7, or Etc/UTC4, which are invalid\n+                    return zoneId;\n+                }\n+\n+                int colon = lowerCased.indexOf(':', offset);\n+                int hour;\n+                int minute = 0;\n+                if (colon != -1) {\n+                    hour = Integer.parseInt(lowerCased, offset, colon, 10);\n+                    minute = Integer.parseInt(lowerCased, colon + 1, lowerCased.length(), 10);\n+                }\n+                else if (lowerCased.length() - offset <= 3) {\n+                    // +H or +HH\n+                    hour = Integer.parseInt(lowerCased, offset, lowerCased.length(), 10);\n+                }\n+                else {\n+                    // let the JDK handle it below\n+                    break;\n+                }\n+\n+                if (hour == 0 && minute == 0) {\n+                    return \"utc\";\n+                }\n+\n+                if (prefix.equals(\"etc/gmt\")) {\n+                    hour = -hour;\n+                }\n \n-        // In some zones systems, these will start with UTC, GMT or UT.\n-        int length = zoneId.length();\n-        boolean startsWithEtcGmt = false;\n-        if (length > 3 && (zoneId.startsWith(\"utc\") || zoneId.startsWith(\"gmt\"))) {\n-            if (startsWithEtc && zoneId.startsWith(\"gmt\")) {\n-                startsWithEtcGmt = true;\n+                return formatZoneOffset(hour, minute);\n             }\n-            zoneId = zoneId.substring(3);\n-            length = zoneId.length();\n-        }\n-        else if (length > 2 && zoneId.startsWith(\"ut\")) {\n-            zoneId = zoneId.substring(2);\n-            length = zoneId.length();\n         }\n \n-        // (+/-)00:00 is UTC\n-        if (\"+00:00\".equals(zoneId) || \"-00:00\".equals(zoneId)) {\n-            return \"utc\";\n+        // Normalize using JDK rules. In particular, normalize forms such as +0735, +7, +073521", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NDI1Mw=="}, "originalCommit": null, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3688, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}