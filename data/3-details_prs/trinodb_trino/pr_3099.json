{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NDgxODM0", "number": 3099, "title": "Add support for SHOW CREATE SCHEMA.", "bodyText": "Needs #3066 (when that is merged, I'll rebase on master)\nWIP!\nNo tests. Basically works.\nReady for a review.", "createdAt": "2020-03-14T23:32:09Z", "url": "https://github.com/trinodb/trino/pull/3099", "merged": true, "mergeCommit": {"oid": "7aeea3a7b7a295428a20c643ea1b954ea3265daa"}, "closed": true, "closedAt": "2020-04-21T19:31:56Z", "author": {"login": "lhofhansl"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNuigKgFqTM3NDc2MzI2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ19iDAH2gAyMzg4NDgxODM0OmUxN2QzODQ3MWE4ZWY2NDVhZTNmOTgyNzQ1Y2YxMTk3ZGZmMGFjYmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzYzMjYz", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-374763263", "createdAt": "2020-03-15T00:40:24Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwMDo0MDoyNVrOF2cSqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwMDo0MDoyNVrOF2cSqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzMDk1NA==", "bodyText": "This will need discussion. If only an owner or admin can do this, it's kinda pointless. On the other hand information can be leaked this way: Where the schema is located or that the assigned USER or ROLE exists.\nMaybe limiting this to Owner/Admin is fine.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r392630954", "createdAt": "2020-03-15T00:40:25Z", "author": {"login": "lhofhansl"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -486,6 +495,33 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n                 return singleValueQuery(\"Create Table\", formatSql(createTable).trim());\n             }\n \n+            if (node.getType() == SCHEMA) {\n+                CatalogSchemaName schemaName = createCatalogSchemaName(session, node, Optional.of(node.getName()));\n+                Optional<ConnectorSchemaDefinition> schema = metadata.getSchema(session, schemaName);\n+\n+                // TODO: at present everyone can see schema metadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzYzMzA1", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-374763305", "createdAt": "2020-03-15T00:41:58Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwMDo0MTo1OVrOF2cS-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwMDo0MTo1OVrOF2cS-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzMTAzMw==", "bodyText": "This would also need discussion. I'm using it only when retrieving schema info, not when creating a schema (to avoid changing many dozens of interfaces/classes)", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r392631033", "createdAt": "2020-03-15T00:41:59Z", "author": {"login": "lhofhansl"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorSchemaDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ConnectorSchemaDefinition", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzYzMzIz", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-374763323", "createdAt": "2020-03-15T00:42:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwMDo0Mjo0MFrOF2cTDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwMDo0Mjo0MFrOF2cTDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzMTA1Mg==", "bodyText": "See the comment... With this we can avoid adding a new method to each and every connector.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r392631052", "createdAt": "2020-03-15T00:42:40Z", "author": {"login": "lhofhansl"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -521,6 +522,15 @@ default void dropView(ConnectorSession session, SchemaTableName viewName)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Gets the schema definition for the specified schema.\n+     */\n+    default Optional<ConnectorSchemaDefinition> getSchema(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        // Only the Hive Connector supports this. This default simplifies all other connectors.\n+        return Optional.of(new ConnectorSchemaDefinition(Collections.emptyMap(), Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODI1NTM3", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-374825537", "createdAt": "2020-03-15T19:13:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjY0OTg4", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-382664988", "createdAt": "2020-03-27T08:40:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODo0MDoxNlrOF8npXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODo1ODoxN1rOF8oOCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwODQ0NQ==", "bodyText": "Let's iterate over io.prestosql.plugin.hive.HiveSchemaProperties#SCHEMA_PROPERTIES instead listing all properties here.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399108445", "createdAt": "2020-03-27T08:40:16Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,26 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Optional<ConnectorSchemaDefinition> getSchema(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Optional.empty();\n+        }\n+        return metastore.getDatabase(schemaName.getSchemaName())\n+                .flatMap(db -> {\n+                    ImmutableSortedMap.Builder<String, Object> properties = ImmutableSortedMap.naturalOrder();\n+\n+                    // this is the only current properties for Hive\n+                    Optional<String> dbLocation = db.getLocation();\n+                    dbLocation.ifPresent(location -> properties.put(HiveSchemaProperties.LOCATION_PROPERTY, location));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExMzY4Mg==", "bodyText": "I would prefer to have two methods. One to get schema properties and one to schema owner. You may want to use io.prestosql.spi.connector.ConnectorMetadata#schemaExists to verify if schema exists.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399113682", "createdAt": "2020-03-27T08:50:14Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,26 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Optional<ConnectorSchemaDefinition> getSchema(ConnectorSession session, CatalogSchemaName schemaName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNjgwNg==", "bodyText": "How does SHOW CREATE TABLE work when user does not specify any property, are they still displayed?\nI am concern about displaying locations. It looks like external_location is not displayed when it is not set to some custom value.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399116806", "createdAt": "2020-03-27T08:56:11Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -713,6 +713,55 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzQ4Ng==", "bodyText": "Use assertEquals", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399117486", "createdAt": "2020-03-27T08:57:36Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -713,6 +713,55 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        String actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzU5Mg==", "bodyText": "assertEquals", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399117592", "createdAt": "2020-03-27T08:57:48Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -713,6 +713,55 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        String actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");\n+\n+        assertQueryFails(user, \"SHOW CREATE SCHEMA test_show_create_schema\", \"Access Denied: Cannot show create schema for test_show_create_schema\");\n+\n+        assertUpdate(admin, \"ALTER SCHEMA test_show_create_schema SET AUTHORIZATION ROLE authorized_users\");\n+\n+        createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION ROLE authorized_users\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzgzMg==", "bodyText": "renane authorized_users  to test_show_create_schema_role", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399117832", "createdAt": "2020-03-27T08:58:17Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -713,6 +713,55 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODg3Njc1", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-388887675", "createdAt": "2020-04-07T08:18:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoxODowOVrOGB4Pow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMDoyOFrOGB4uqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMzI2Nw==", "bodyText": "ImmutableMap.of()", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404623267", "createdAt": "2020-04-07T08:18:09Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();\n+        }\n+        String warehouse = metastore.getConfigValue(WAREHOUSE.getVarname()).orElseGet(() -> WAREHOUSE.getDefaultVal().toString());\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive\n+            // (only shown when it's not the default location)\n+            if (location.isPresent() && !location.get().startsWith(warehouse)) {\n+                return Collections.singletonMap(HiveSchemaProperties.LOCATION_PROPERTY, location.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNDQxNQ==", "bodyText": "I think this condition is not enough. Is it possible that one could create external table under warehouse location? Like pointing to data of another managed table? I do think there is a check for that in Hive and this allowed. We need to verify full path, not only prefix.\nPlease add test for that.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404624415", "createdAt": "2020-04-07T08:19:57Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();\n+        }\n+        String warehouse = metastore.getConfigValue(WAREHOUSE.getVarname()).orElseGet(() -> WAREHOUSE.getDefaultVal().toString());\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive\n+            // (only shown when it's not the default location)\n+            if (location.isPresent() && !location.get().startsWith(warehouse)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNDg4OA==", "bodyText": "ImmtableMap.of()\nThis is an unwritten convention.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404624888", "createdAt": "2020-04-07T08:20:43Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTA5Mw==", "bodyText": "ImmtableMap.of()", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404625093", "createdAt": "2020-04-07T08:20:59Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();\n+        }\n+        String warehouse = metastore.getConfigValue(WAREHOUSE.getVarname()).orElseGet(() -> WAREHOUSE.getDefaultVal().toString());\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive\n+            // (only shown when it's not the default location)\n+            if (location.isPresent() && !location.get().startsWith(warehouse)) {\n+                return Collections.singletonMap(HiveSchemaProperties.LOCATION_PROPERTY, location.get());\n+            }\n+        }\n+\n+        return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTgzMg==", "bodyText": "This is not responsibility of connector to filter schemas. It should be handled somewhere in ShowQueriesRewrite\nAlso if user is allowed to do show create schema then we don't need to filter schema here.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404625832", "createdAt": "2020-04-07T08:22:11Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();\n+        }\n+        String warehouse = metastore.getConfigValue(WAREHOUSE.getVarname()).orElseGet(() -> WAREHOUSE.getDefaultVal().toString());\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive\n+            // (only shown when it's not the default location)\n+            if (location.isPresent() && !location.get().startsWith(warehouse)) {\n+                return Collections.singletonMap(HiveSchemaProperties.LOCATION_PROPERTY, location.get());\n+            }\n+        }\n+\n+        return Collections.emptyMap();\n+    }\n+\n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNzg2MA==", "bodyText": "You should use io.prestosql.testing.AbstractTestQueryFramework#executeExclusively", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404627860", "createdAt": "2020-04-07T08:25:19Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -716,6 +756,66 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE test_show_create_schema_role\");\n+        assertUpdate(admin, \"GRANT test_show_create_schema_role TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\",\n+                getSession().getCatalog().get());\n+\n+        String actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertEquals(actualResult, createSchemaSql);\n+\n+        assertQueryFails(user, \"SHOW CREATE SCHEMA test_show_create_schema\", \"Access Denied: Cannot show create schema for test_show_create_schema\");\n+\n+        assertUpdate(admin, \"ALTER SCHEMA test_show_create_schema SET AUTHORIZATION ROLE test_show_create_schema_role\");\n+\n+        createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION ROLE test_show_create_schema_role\",\n+                getSession().getCatalog().get());\n+\n+        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertEquals(actualResult, createSchemaSql);\n+\n+        // test that LOCATION is shown when it does not match the metastore's default\n+        testingMetastore.overrideConfig(WAREHOUSE.getVarname(), \"x\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODA0NA==", "bodyText": "provide reset() method that would reset all the custom configuration", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404628044", "createdAt": "2020-04-07T08:25:35Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -716,6 +756,66 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE test_show_create_schema_role\");\n+        assertUpdate(admin, \"GRANT test_show_create_schema_role TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\",\n+                getSession().getCatalog().get());\n+\n+        String actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertEquals(actualResult, createSchemaSql);\n+\n+        assertQueryFails(user, \"SHOW CREATE SCHEMA test_show_create_schema\", \"Access Denied: Cannot show create schema for test_show_create_schema\");\n+\n+        assertUpdate(admin, \"ALTER SCHEMA test_show_create_schema SET AUTHORIZATION ROLE test_show_create_schema_role\");\n+\n+        createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION ROLE test_show_create_schema_role\",\n+                getSession().getCatalog().get());\n+\n+        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertEquals(actualResult, createSchemaSql);\n+\n+        // test that LOCATION is shown when it does not match the metastore's default\n+        testingMetastore.overrideConfig(WAREHOUSE.getVarname(), \"x\");\n+\n+        createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION ROLE test_show_create_schema_role\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");\n+\n+        testingMetastore.overrideConfig(WAREHOUSE.getVarname(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODk2OQ==", "bodyText": "Please introduce dedicated assertMatch to do regex based assertions.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404628969", "createdAt": "2020-04-07T08:27:02Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -713,6 +713,55 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        String actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");\n+\n+        assertQueryFails(user, \"SHOW CREATE SCHEMA test_show_create_schema\", \"Access Denied: Cannot show create schema for test_show_create_schema\");\n+\n+        assertUpdate(admin, \"ALTER SCHEMA test_show_create_schema SET AUTHORIZATION ROLE authorized_users\");\n+\n+        createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION ROLE authorized_users\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzU5Mg=="}, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDU4OQ==", "bodyText": "I don't like this optionality. When you ask for properties of not existing object this method should fail. Returning empty map suggests that object exists but has no properties.\nSame to the method below.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404630589", "createdAt": "2020-04-07T08:29:32Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -960,6 +961,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDcyMA==", "bodyText": "ImmutableMap", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404630720", "createdAt": "2020-04-07T08:29:42Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -960,6 +961,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaProperties(connectorSession, schemaName);\n+        }\n+        return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMTIxMQ==", "bodyText": "invert condition. Then else block is not needed.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404631211", "createdAt": "2020-04-07T08:30:28Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -486,7 +494,31 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n                 return singleValueQuery(\"Create Table\", formatSql(createTable).trim());\n             }\n \n-            throw new UnsupportedOperationException(\"SHOW CREATE only supported for tables and views\");\n+            if (node.getType() == SCHEMA) {\n+                CatalogSchemaName schemaName = createCatalogSchemaName(session, node, Optional.of(node.getName()));\n+                accessControl.checkCanShowCreateSchema(session.toSecurityContext(), schemaName);\n+\n+                if (metadata.schemaExists(session, schemaName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTgzMDE0", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-390583014", "createdAt": "2020-04-09T08:18:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoxODowMVrOGDOZbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoyNjoyN1rOGDOsSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNDc5Nw==", "bodyText": "I would you to use io.prestosql.plugin.hive.HiveSchemaProperties#SCHEMA_PROPERTIES. So whenever someone adds new schema property they don't need to do any changes here.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406034797", "createdAt": "2020-04-09T08:18:01Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1738,6 +1740,41 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            // \"information_schema\" and \"sys\" have no properties\n+            return ImmutableMap.of();\n+        }\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNTc4Nw==", "bodyText": "Please do not use filterSchema but just make sure that requested schema is one of these. And if it is the case I think we should throw an exception.\n@findepi I think you are more familiar with sys schema. Are ok with my suggestion?", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406035787", "createdAt": "2020-04-09T08:19:51Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1738,6 +1740,41 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            // \"information_schema\" and \"sys\" have no properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNjA4Mg==", "bodyText": "Please do not use filterSchema but just make sure that requested schema is one of these. And if it is the case I think we should throw an exception.\n@findepi I think you are more familiar with sys schema. Are ok with my suggestion?", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406036082", "createdAt": "2020-04-09T08:20:23Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();\n+        }\n+        String warehouse = metastore.getConfigValue(WAREHOUSE.getVarname()).orElseGet(() -> WAREHOUSE.getDefaultVal().toString());\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive\n+            // (only shown when it's not the default location)\n+            if (location.isPresent() && !location.get().startsWith(warehouse)) {\n+                return Collections.singletonMap(HiveSchemaProperties.LOCATION_PROPERTY, location.get());\n+            }\n+        }\n+\n+        return Collections.emptyMap();\n+    }\n+\n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTgzMg=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNjIwNg==", "bodyText": "Do you still need it?", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406036206", "createdAt": "2020-04-09T08:20:35Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -224,6 +225,15 @@ public synchronized void setDatabaseOwner(HiveIdentity identity, String database\n         writeSchemaFile(\"database\", databaseMetadataDirectory, databaseCodec, new DatabaseMetadata(newDatabase), true);\n     }\n \n+    @Override\n+    public Optional<String> getConfigValue(String name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNzQ1Mw==", "bodyText": "the other day I left a comment to use assertj, it has some native support for regex matching. If you apply that comment then I would expect this code become very fluent and so we might have no longer a need for this method (we could just inline it).\nassertMatch -> assertMatches", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406037453", "createdAt": "2020-04-09T08:22:42Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -115,6 +116,11 @@ protected Object computeScalar(@Language(\"SQL\") String sql)\n         return computeActual(sql).getOnlyValue();\n     }\n \n+    protected void assertMatch(String actual, String regex)\n+    {\n+        assertTrue(actual.matches(regex), \"[\" + actual + \"] does not match [\" + regex + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNzg2MQ==", "bodyText": "static. It does not belong to AbstractTestQueryFramework, but rather to something like PrestoAssert.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406037861", "createdAt": "2020-04-09T08:23:23Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -115,6 +116,11 @@ protected Object computeScalar(@Language(\"SQL\") String sql)\n         return computeActual(sql).getOnlyValue();\n     }\n \n+    protected void assertMatch(String actual, String regex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTU4Nw==", "bodyText": "I think it should throw by default.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406039587", "createdAt": "2020-04-09T08:26:23Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -521,6 +522,22 @@ default void dropView(ConnectorSession session, SchemaTableName viewName)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Gets the schema properties for the specified schema.\n+     */\n+    default Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTYyNg==", "bodyText": "I think it should throw by default.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406039626", "createdAt": "2020-04-09T08:26:27Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -521,6 +522,22 @@ default void dropView(ConnectorSession session, SchemaTableName viewName)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Gets the schema properties for the specified schema.\n+     */\n+    default Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Get the schema properties for the specified schema.\n+     */\n+    default Optional<PrestoPrincipal> getSchemaOwner(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzYzNDY4", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-392363468", "createdAt": "2020-04-13T19:06:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTowNjozOFrOGExfPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODozMTo0NFrOGFD3IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1ODMwMA==", "bodyText": "Access control should be done on different level. If this method is called then you should  assume that user has access to this schema or it will be filtered later.\nIn other words, please remove this line.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407658300", "createdAt": "2020-04-13T19:06:38Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1748,6 +1751,32 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        checkState(filterSchema(schemaName.getSchemaName()), \"Schema is not accessible: %s\", schemaName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1ODM0NA==", "bodyText": "Access control should be done on different level. If this method is called then you should  assume that user has access to this schema or it will be filtered later.\nIn other words, please remove this line.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407658344", "createdAt": "2020-04-13T19:06:43Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1748,6 +1751,32 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        checkState(filterSchema(schemaName.getSchemaName()), \"Schema is not accessible: %s\", schemaName);\n+\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            return HiveSchemaProperties.fromDatabase(db.get());\n+        }\n+\n+        throw new SchemaNotFoundException(schemaName.getSchemaName());\n+    }\n+\n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        checkState(filterSchema(schemaName.getSchemaName()), \"Schema is not accessible: %s\", schemaName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1OTQxOQ==", "bodyText": "I would be happy too.\nWe typically do not leave things that are not used. Future is unpredictable, so let's avoid of being too smart.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407659419", "createdAt": "2020-04-13T19:08:52Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -224,6 +225,15 @@ public synchronized void setDatabaseOwner(HiveIdentity identity, String database\n         writeSchemaFile(\"database\", databaseMetadataDirectory, databaseCodec, new DatabaseMetadata(newDatabase), true);\n     }\n \n+    @Override\n+    public Optional<String> getConfigValue(String name)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNjIwNg=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MzAwOQ==", "bodyText": "Is this correct? I guess RDBMS might have a notion of schema owner. Maybe we should leave it unimplemented?", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407953009", "createdAt": "2020-04-14T08:21:30Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -82,6 +83,18 @@ public boolean schemaExists(ConnectorSession session, String schemaName)\n         return ImmutableList.copyOf(jdbcClient.getSchemaNames(JdbcIdentity.from(session)));\n     }\n \n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NDY2Mg==", "bodyText": "We need also add simple test to io.prestosql.testing.AbstractTestIntegrationSmokeTest. That file is used to test connector implementations, you change connector SPI so we need tests for other connectors. It can be very simple, without any access control. Probably for most of the connectors it will be skipped.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407954662", "createdAt": "2020-04-14T08:24:16Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -716,6 +716,56 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NzU3NA==", "bodyText": "I think we should fail if schema does not exists", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407957574", "createdAt": "2020-04-14T08:28:54Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -957,6 +957,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaProperties(connectorSession, schemaName);\n+        }\n+        return ImmutableMap.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NzY3NA==", "bodyText": "I think we should fail if schema does not exists", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407957674", "createdAt": "2020-04-14T08:29:03Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -957,6 +957,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaProperties(connectorSession, schemaName);\n+        }\n+        return ImmutableMap.of();\n+    }\n+\n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaOwner(connectorSession, schemaName);\n+        }\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1OTMyOA==", "bodyText": "I think we should check existence of object before access control", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407959328", "createdAt": "2020-04-14T08:31:44Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -486,7 +494,30 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n                 return singleValueQuery(\"Create Table\", formatSql(createTable).trim());\n             }\n \n-            throw new UnsupportedOperationException(\"SHOW CREATE only supported for tables and views\");\n+            if (node.getType() == SCHEMA) {\n+                CatalogSchemaName schemaName = createCatalogSchemaName(session, node, Optional.of(node.getName()));\n+                accessControl.checkCanShowCreateSchema(session.toSecurityContext(), schemaName);\n+\n+                if (!metadata.schemaExists(session, schemaName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTU1ODU0", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-396155854", "createdAt": "2020-04-20T05:53:03Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTo1MzowM1rOGIEMcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjowOTozNVrOGIEkbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMDUxNQ==", "bodyText": "invert the condition.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411110515", "createdAt": "2020-04-20T05:53:03Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -957,6 +958,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMDU0Mg==", "bodyText": "invert the condition.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411110542", "createdAt": "2020-04-20T05:53:07Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -957,6 +958,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaProperties(connectorSession, schemaName);\n+        }\n+        throw new PrestoException(SCHEMA_NOT_FOUND, format(\"Schema '%s' does not exist\", schemaName));\n+    }\n+\n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMTExNA==", "bodyText": "No need to implement them here, these methods throw by default", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411111114", "createdAt": "2020-04-20T05:54:51Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/metadata/AbstractMockMetadata.java", "diffHunk": "@@ -387,6 +387,18 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMjIyMg==", "bodyText": "Why do you need this method here?", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411112222", "createdAt": "2020-04-20T05:57:55Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -225,6 +225,11 @@ public void checkCanSetSystemSessionProperty(SystemSecurityContext context, Stri\n                 return Optional.of(new ViewExpression(\"user\", Optional.empty(), Optional.empty(), \"connector mask\"));\n             }\n \n+            @Override\n+            public void checkCanShowCreateSchema(ConnectorSecurityContext context, String schemaName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMjM4MA==", "bodyText": "I think this method could be removed too (in separate commit)", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411112380", "createdAt": "2020-04-20T05:58:13Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -225,6 +225,11 @@ public void checkCanSetSystemSessionProperty(SystemSecurityContext context, Stri\n                 return Optional.of(new ViewExpression(\"user\", Optional.empty(), Optional.empty(), \"connector mask\"));\n             }\n \n+            @Override\n+            public void checkCanShowCreateSchema(ConnectorSecurityContext context, String schemaName)\n+            {\n+            }\n+\n             @Override\n             public void checkCanShowCreateTable(ConnectorSecurityContext context, SchemaTableName tableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNTYzMQ==", "bodyText": "FYI #3484", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411115631", "createdAt": "2020-04-20T06:06:53Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -490,6 +495,12 @@ public void checkCanShowCreateTable(ConnectorSecurityContext context, SchemaTabl\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n+        public void checkCanShowCreateSchema(ConnectorSecurityContext context, String schemaName)\n+        {\n+            throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNTkyOA==", "bodyText": "separate commit?", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411115928", "createdAt": "2020-04-20T06:07:41Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -823,7 +823,7 @@ protected Void visitCreateSchema(CreateSchema node, Integer context)\n             }\n             builder.append(formatName(node.getSchemaName()));\n             if (node.getPrincipal().isPresent()) {\n-                builder.append(\" AUTHORIZATION \")\n+                builder.append(\"\\nAUTHORIZATION \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNjMyOQ==", "bodyText": "add:\nSCHEMA,\n/**/;\n\nThat way you can add new entries with changing only single line.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411116329", "createdAt": "2020-04-20T06:08:41Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/ShowCreate.java", "diffHunk": "@@ -28,7 +28,8 @@\n     public enum Type\n     {\n         TABLE,\n-        VIEW\n+        VIEW,\n+        SCHEMA", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNjY1NA==", "bodyText": "make it deny by default, see #3484", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411116654", "createdAt": "2020-04-20T06:09:35Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorAccessControl.java", "diffHunk": "@@ -122,6 +122,13 @@ default void checkCanShowSchemas(ConnectorSecurityContext context)\n         return emptySet();\n     }\n \n+    /**\n+     * Check if identity is allowed to execute SHOW CREATE SCHEMA.\n+     *\n+     * @throws io.prestosql.spi.security.AccessDeniedException if not allowed\n+     */\n+    void checkCanShowCreateSchema(ConnectorSecurityContext context, String schemaName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDg2NDAw", "url": "https://github.com/trinodb/trino/pull/3099#pullrequestreview-397086400", "createdAt": "2020-04-21T08:07:04Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowNzowNFrOGI4bZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowNzowNFrOGI4bZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NjMwOA==", "bodyText": "Please remove, it is not used.", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411966308", "createdAt": "2020-04-21T08:07:04Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -164,6 +164,11 @@ public SemiTransactionalHiveMetastore(\n         return delegate.getAllDatabases();\n     }\n \n+    public Optional<String> getConfigValue(String name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e17d38471a8ef645ae3f982745cf1197dff0acbf", "author": {"user": {"login": "lhofhansl", "name": null}}, "url": "https://github.com/trinodb/trino/commit/e17d38471a8ef645ae3f982745cf1197dff0acbf", "committedDate": "2020-04-21T16:06:22Z", "message": "Add support for SHOW CREATE SCHEMA.\n\nAdd support for authorized users to see the definitin of a schema,\nincluding its owner and location."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1562, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}