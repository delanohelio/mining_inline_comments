{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODI0Nzk5", "number": 5017, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjoyODo1NVrOEeFXTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo1NDo1NlrOEhqLNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTgwNjIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjoyODo1NVrOHJkAkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMzowMlrOHJ25wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4OTIwMg==", "bodyText": "Since semi-join build side is not partitioned right now, I think it will be better to use higher limits on filter size here (maybe 4x).", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r479789202", "createdAt": "2020-08-30T16:28:55Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2235,6 +2241,26 @@ public PhysicalOperation visitSemiJoin(SemiJoinNode node, LocalExecutionPlanCont\n             int probeChannel = probeSource.getLayout().get(node.getSourceJoinSymbol());\n             int buildChannel = buildSource.getLayout().get(node.getFilteringSourceJoinSymbol());\n \n+            ImmutableList.Builder<OperatorFactory> buildOperatorFactories = new ImmutableList.Builder<>();\n+            buildOperatorFactories.addAll(buildSource.getOperatorFactories());\n+\n+            node.getDynamicFilterId().ifPresent(filterId -> {\n+                // Add a DynamicFilterSourceOperatorFactory to build operator factories\n+                log.debug(\"[Semi-join] Dynamic filter: %s\", node.getDynamicFilterId().get());\n+                LocalDynamicFilterConsumer filterConsumer = new LocalDynamicFilterConsumer(\n+                        ImmutableMap.of(filterId, buildChannel),\n+                        ImmutableMap.of(filterId, buildSource.getTypes().get(buildChannel)),\n+                        1);\n+                addSuccessCallback(filterConsumer.getDynamicFilterDomains(), context::addDynamicFilter);\n+                buildOperatorFactories.add(new DynamicFilterSourceOperatorFactory(\n+                        buildContext.getNextOperatorId(),\n+                        node.getId(),\n+                        filterConsumer.getTupleDomainConsumer(),\n+                        ImmutableList.of(new DynamicFilterSourceOperator.Channel(filterId, buildSource.getTypes().get(buildChannel), buildChannel)),\n+                        getDynamicFilteringMaxPerDriverRowCount(context.getSession()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODc1Mw==", "bodyText": "Makes sense. This could be separate PR. Maybe we want to rethink per driver limits and use node global limit (which we could divide between drivers).", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r480098753", "createdAt": "2020-08-31T12:33:02Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2235,6 +2241,26 @@ public PhysicalOperation visitSemiJoin(SemiJoinNode node, LocalExecutionPlanCont\n             int probeChannel = probeSource.getLayout().get(node.getSourceJoinSymbol());\n             int buildChannel = buildSource.getLayout().get(node.getFilteringSourceJoinSymbol());\n \n+            ImmutableList.Builder<OperatorFactory> buildOperatorFactories = new ImmutableList.Builder<>();\n+            buildOperatorFactories.addAll(buildSource.getOperatorFactories());\n+\n+            node.getDynamicFilterId().ifPresent(filterId -> {\n+                // Add a DynamicFilterSourceOperatorFactory to build operator factories\n+                log.debug(\"[Semi-join] Dynamic filter: %s\", node.getDynamicFilterId().get());\n+                LocalDynamicFilterConsumer filterConsumer = new LocalDynamicFilterConsumer(\n+                        ImmutableMap.of(filterId, buildChannel),\n+                        ImmutableMap.of(filterId, buildSource.getTypes().get(buildChannel)),\n+                        1);\n+                addSuccessCallback(filterConsumer.getDynamicFilterDomains(), context::addDynamicFilter);\n+                buildOperatorFactories.add(new DynamicFilterSourceOperatorFactory(\n+                        buildContext.getNextOperatorId(),\n+                        node.getId(),\n+                        filterConsumer.getTupleDomainConsumer(),\n+                        ImmutableList.of(new DynamicFilterSourceOperator.Channel(filterId, buildSource.getTypes().get(buildChannel), buildChannel)),\n+                        getDynamicFilteringMaxPerDriverRowCount(context.getSession()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4OTIwMg=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTgxNDA3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjozODoxN1rOHJkEKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjozODoxN1rOHJkEKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5MDEyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.debug(\"[Semi-join] Dynamic filter: %s\", node.getDynamicFilterId().get());\n          \n          \n            \n                            log.debug(\"[Semi-join] Dynamic filter: %s\", filterId);", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r479790120", "createdAt": "2020-08-30T16:38:17Z", "author": {"login": "rzeyde-varada"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2235,6 +2241,26 @@ public PhysicalOperation visitSemiJoin(SemiJoinNode node, LocalExecutionPlanCont\n             int probeChannel = probeSource.getLayout().get(node.getSourceJoinSymbol());\n             int buildChannel = buildSource.getLayout().get(node.getFilteringSourceJoinSymbol());\n \n+            ImmutableList.Builder<OperatorFactory> buildOperatorFactories = new ImmutableList.Builder<>();\n+            buildOperatorFactories.addAll(buildSource.getOperatorFactories());\n+\n+            node.getDynamicFilterId().ifPresent(filterId -> {\n+                // Add a DynamicFilterSourceOperatorFactory to build operator factories\n+                log.debug(\"[Semi-join] Dynamic filter: %s\", node.getDynamicFilterId().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTc1MTE4OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToyOTozNFrOHJ1FOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToyOTozNFrOHJ1FOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2ODkyMQ==", "bodyText": "just make LINEITEM_COUNT and others ints", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r480068921", "createdAt": "2020-08-31T11:29:34Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -90,52 +97,34 @@ public void testSelect()\n     @Test\n     public void testJoinDynamicFilteringNone()\n     {\n-        Session session = Session.builder(getSession())\n-                .setSystemProperty(JOIN_DISTRIBUTION_TYPE, FeaturesConfig.JoinDistributionType.BROADCAST.name())\n-                .build();\n-        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n-        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(\n-                session,\n-                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.totalprice < 0\");\n-        assertEquals(result.getResult().getRowCount(), 0);\n-\n         // Probe-side is not scanned at all, due to dynamic filtering:\n-        Set<Long> rowsRead = getOperatorRowsRead(runner, result.getQueryId());\n-        assertEquals(rowsRead, ImmutableSet.of(0L, ORDERS_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.totalprice < 0\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                0,\n+                ImmutableSet.of(0L, ORDERS_COUNT));\n     }\n \n     @Test\n     public void testJoinLargeBuildSideNoDynamicFiltering()\n     {\n-        Session session = Session.builder(getSession())\n-                .setSystemProperty(JOIN_DISTRIBUTION_TYPE, FeaturesConfig.JoinDistributionType.BROADCAST.name())\n-                .build();\n-        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n-        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(\n-                session,\n-                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey\");\n-        assertEquals(result.getResult().getRowCount(), LINEITEM_COUNT);\n-\n         // Probe-side is fully scanned because the build-side is too large for dynamic filtering:\n-        Set<Long> rowsRead = getOperatorRowsRead(runner, result.getQueryId());\n-        assertEquals(rowsRead, ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                toIntExact(LINEITEM_COUNT),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk0MTU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMDo0NlrOHJ21iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMDo0NlrOHJ21iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5NzY3Mg==", "bodyText": "please extract buildContext.getDriverInstanceCount().orElse(1) above as partitionCount", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r480097672", "createdAt": "2020-08-31T12:30:46Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2235,6 +2241,26 @@ public PhysicalOperation visitSemiJoin(SemiJoinNode node, LocalExecutionPlanCont\n             int probeChannel = probeSource.getLayout().get(node.getSourceJoinSymbol());\n             int buildChannel = buildSource.getLayout().get(node.getFilteringSourceJoinSymbol());\n \n+            ImmutableList.Builder<OperatorFactory> buildOperatorFactories = new ImmutableList.Builder<>();\n+            buildOperatorFactories.addAll(buildSource.getOperatorFactories());\n+\n+            node.getDynamicFilterId().ifPresent(filterId -> {\n+                // Add a DynamicFilterSourceOperatorFactory to build operator factories\n+                log.debug(\"[Semi-join] Dynamic filter: %s\", node.getDynamicFilterId().get());\n+                LocalDynamicFilterConsumer filterConsumer = new LocalDynamicFilterConsumer(\n+                        ImmutableMap.of(filterId, buildChannel),\n+                        ImmutableMap.of(filterId, buildSource.getTypes().get(buildChannel)),\n+                        1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk1NDE0OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNDozOVrOHJ283w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNDozOVrOHJ283w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5OTU1MQ==", "bodyText": "please add a seperate test case for it", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r480099551", "createdAt": "2020-08-31T12:34:39Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -95,40 +95,55 @@ public void testSelect()\n     }\n \n     @Test\n-    public void testJoinDynamicFilteringNone()\n+    public void testJoinAndSemiJoinDynamicFilteringNone()\n     {\n         // Probe-side is not scanned at all, due to dynamic filtering:\n         assertDynamicFiltering(\n                 \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.totalprice < 0\",\n                 ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n                 0,\n                 ImmutableSet.of(0L, ORDERS_COUNT));\n+        assertDynamicFiltering(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk1NDY1OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNDo1MVrOHJ29PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNDo1MVrOHJ29PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5OTY0NA==", "bodyText": "please add a separate test case", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r480099644", "createdAt": "2020-08-31T12:34:51Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -95,40 +95,55 @@ public void testSelect()\n     }\n \n     @Test\n-    public void testJoinDynamicFilteringNone()\n+    public void testJoinAndSemiJoinDynamicFilteringNone()\n     {\n         // Probe-side is not scanned at all, due to dynamic filtering:\n         assertDynamicFiltering(\n                 \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.totalprice < 0\",\n                 ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n                 0,\n                 ImmutableSet.of(0L, ORDERS_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                0,\n+                ImmutableSet.of(0L, ORDERS_COUNT));\n     }\n \n     @Test\n-    public void testJoinLargeBuildSideNoDynamicFiltering()\n+    public void testJoinAndSemiJoinLargeBuildSideNoDynamicFiltering()\n     {\n         // Probe-side is fully scanned because the build-side is too large for dynamic filtering:\n         assertDynamicFiltering(\n                 \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey\",\n                 ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n                 toIntExact(LINEITEM_COUNT),\n                 ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+        assertDynamicFiltering(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk1NTU5OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNTowM1rOHJ29uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNTowM1rOHJ29uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5OTc2OQ==", "bodyText": "please add a separate test case", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r480099769", "createdAt": "2020-08-31T12:35:03Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -95,40 +95,55 @@ public void testSelect()\n     }\n \n     @Test\n-    public void testJoinDynamicFilteringNone()\n+    public void testJoinAndSemiJoinDynamicFilteringNone()\n     {\n         // Probe-side is not scanned at all, due to dynamic filtering:\n         assertDynamicFiltering(\n                 \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.totalprice < 0\",\n                 ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n                 0,\n                 ImmutableSet.of(0L, ORDERS_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                0,\n+                ImmutableSet.of(0L, ORDERS_COUNT));\n     }\n \n     @Test\n-    public void testJoinLargeBuildSideNoDynamicFiltering()\n+    public void testJoinAndSemiJoinLargeBuildSideNoDynamicFiltering()\n     {\n         // Probe-side is fully scanned because the build-side is too large for dynamic filtering:\n         assertDynamicFiltering(\n                 \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey\",\n                 ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n                 toIntExact(LINEITEM_COUNT),\n                 ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders)\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                toIntExact(LINEITEM_COUNT),\n+                ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n     }\n \n     @Test\n-    public void testPartitionedJoinNoDynamicFiltering()\n+    public void testPartitionedJoinAndSemiJoinNoDynamicFiltering()\n     {\n         // Probe-side is fully scanned, because local dynamic filtering does not work for partitioned joins:\n         assertDynamicFiltering(\n                 \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.totalprice < 0\",\n                 ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, PARTITIONED.name()),\n                 0,\n                 ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+        assertDynamicFiltering(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk1NjMwOnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNToxMlrOHJ2-Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNToxMlrOHJ2-Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5OTg3MQ==", "bodyText": "ditto", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r480099871", "createdAt": "2020-08-31T12:35:12Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -142,13 +157,23 @@ public void testJoinDynamicFilteringSingleValue()\n                 ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n                 6,\n                 ImmutableSet.of(6L, ORDERS_COUNT));\n+        assertDynamicFiltering(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk1NjU0OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNToxNVrOHJ2-PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNToxNVrOHJ2-PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5OTkwMQ==", "bodyText": "ditto", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r480099901", "createdAt": "2020-08-31T12:35:15Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -142,13 +157,23 @@ public void testJoinDynamicFilteringSingleValue()\n                 ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n                 6,\n                 ImmutableSet.of(6L, ORDERS_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.comment = 'nstructions sleep furiously among ')\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                6,\n+                ImmutableSet.of(6L, ORDERS_COUNT));\n \n         // Join lineitem with a single row of part\n         assertDynamicFiltering(\n                 \"SELECT l.comment FROM  lineitem l, part p WHERE p.partkey = l.partkey AND p.comment = 'onic deposits'\",\n                 ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n                 39,\n                 ImmutableSet.of(39L, PART_COUNT));\n+        assertDynamicFiltering(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk2MTM5OnYy", "diffSide": "LEFT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNjo0NVrOHJ3BJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNTo0MDo1MVrOHMWp7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwMDY0Ng==", "bodyText": "please also add test cases to AbstractCoordinatorDynamicFilteringTest", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r480100646", "createdAt": "2020-08-31T12:36:45Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -95,40 +95,55 @@ public void testSelect()\n     }\n \n     @Test\n-    public void testJoinDynamicFilteringNone()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxNjE0Mw==", "bodyText": "Thanks for the pointer; added. Also made some changes to DynamicFilterService to register semi-join dynamic filters. Rebased to master to fix a file conflict.", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r482716143", "createdAt": "2020-09-03T05:40:51Z", "author": {"login": "lxynov"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -95,40 +95,55 @@ public void testSelect()\n     }\n \n     @Test\n-    public void testJoinDynamicFilteringNone()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwMDY0Ng=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODM3ODM5OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoxMzo1MVrOHMZJqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzozNDowMFrOHM6sfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NzAzMg==", "bodyText": "Would be better to have Session session as parameter instead of Map<String, String> sessionProperties, then we can use withBroadcastJoin() or withPartitionedJoin() as input", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r482757032", "createdAt": "2020-09-03T07:13:51Z", "author": {"login": "raunaqmorarka"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -147,52 +136,112 @@ public void testJoinDynamicFilteringSingleValue()\n         assertQueryResult(\"SELECT partkey FROM part WHERE comment = 'onic deposits'\", 1552L);\n         assertQueryResult(\"SELECT COUNT() FROM lineitem WHERE partkey = 1552\", 39L);\n \n-        Session session = Session.builder(getSession())\n-                .setSystemProperty(JOIN_DISTRIBUTION_TYPE, FeaturesConfig.JoinDistributionType.BROADCAST.name())\n-                .build();\n-        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n-\n         // Join lineitem with a single row of orders\n-        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(\n-                session,\n-                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.comment = 'nstructions sleep furiously among '\");\n-        assertEquals(result.getResult().getRowCount(), 6);\n-        assertEquals(getOperatorRowsRead(runner, result.getQueryId()), ImmutableSet.of(6L, ORDERS_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.comment = 'nstructions sleep furiously among '\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                6,\n+                ImmutableSet.of(6, ORDERS_COUNT));\n \n         // Join lineitem with a single row of part\n-        result = runner.executeWithQueryId(\n-                session,\n-                \"SELECT l.comment FROM  lineitem l, part p WHERE p.partkey = l.partkey AND p.comment = 'onic deposits'\");\n-        assertEquals(result.getResult().getRowCount(), 39);\n-        assertEquals(getOperatorRowsRead(runner, result.getQueryId()), ImmutableSet.of(39L, PART_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT l.comment FROM  lineitem l, part p WHERE p.partkey = l.partkey AND p.comment = 'onic deposits'\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                39,\n+                ImmutableSet.of(39, PART_COUNT));\n     }\n \n     @Test\n     public void testJoinDynamicFilteringBlockProbeSide()\n     {\n-        Session session = Session.builder(getSession())\n-                .setSystemProperty(JOIN_REORDERING_STRATEGY, FeaturesConfig.JoinReorderingStrategy.NONE.name())\n-                .setSystemProperty(JOIN_DISTRIBUTION_TYPE, FeaturesConfig.JoinDistributionType.BROADCAST.name())\n-                .build();\n-        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n         // Wait for both build sides to finish before starting the scan of 'lineitem' table (should be very selective given the dynamic filters).\n-        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(\n-                session,\n+        assertDynamicFiltering(\n                 \"SELECT l.comment\" +\n                         \" FROM  lineitem l, part p, orders o\" +\n                         \" WHERE l.orderkey = o.orderkey AND o.comment = 'nstructions sleep furiously among '\" +\n-                        \" AND p.partkey = l.partkey AND p.comment = 'onic deposits'\");\n-        assertEquals(result.getResult().getRowCount(), 1);\n-        assertEquals(getOperatorRowsRead(runner, result.getQueryId()), ImmutableSet.of(1L, ORDERS_COUNT, PART_COUNT));\n+                        \" AND p.partkey = l.partkey AND p.comment = 'onic deposits'\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name(), JOIN_REORDERING_STRATEGY, NONE.name()),\n+                1,\n+                ImmutableSet.of(1, ORDERS_COUNT, PART_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinDynamicFilteringNone()\n+    {\n+        // Probe-side is not scanned at all, due to dynamic filtering:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                0,\n+                ImmutableSet.of(0, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinLargeBuildSideNoDynamicFiltering()\n+    {\n+        // Probe-side is fully scanned because the build-side is too large for dynamic filtering:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders)\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                toIntExact(LINEITEM_COUNT),\n+                ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testPartitionedSemiJoinNoDynamicFiltering()\n+    {\n+        // Probe-side is fully scanned, because local dynamic filtering does not work for partitioned joins:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, PARTITIONED.name()),\n+                0,\n+                ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinDynamicFilteringSingleValue()\n+    {\n+        assertQueryResult(\"SELECT orderkey FROM orders WHERE comment = 'nstructions sleep furiously among '\", 1L);\n+        assertQueryResult(\"SELECT COUNT() FROM lineitem WHERE orderkey = 1\", 6L);\n+\n+        assertQueryResult(\"SELECT partkey FROM part WHERE comment = 'onic deposits'\", 1552L);\n+        assertQueryResult(\"SELECT COUNT() FROM lineitem WHERE partkey = 1552\", 39L);\n+\n+        // Join lineitem with a single row of orders\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.comment = 'nstructions sleep furiously among ')\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                6,\n+                ImmutableSet.of(6, ORDERS_COUNT));\n+\n+        // Join lineitem with a single row of part\n+        assertDynamicFiltering(\n+                \"SELECT l.comment FROM lineitem l WHERE l.partkey IN (SELECT p.partkey FROM part p WHERE p.comment = 'onic deposits')\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                39,\n+                ImmutableSet.of(39, PART_COUNT));\n+    }\n+\n+    private void assertDynamicFiltering(String selectQuery, Map<String, String> sessionProperties, int expectedRowCount, Set<Integer> expectedOperatorRowsRead)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwNjYyMQ==", "bodyText": "Sounds good. Will update once @sopel39 makes more comments.", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r483306621", "createdAt": "2020-09-03T23:34:00Z", "author": {"login": "lxynov"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -147,52 +136,112 @@ public void testJoinDynamicFilteringSingleValue()\n         assertQueryResult(\"SELECT partkey FROM part WHERE comment = 'onic deposits'\", 1552L);\n         assertQueryResult(\"SELECT COUNT() FROM lineitem WHERE partkey = 1552\", 39L);\n \n-        Session session = Session.builder(getSession())\n-                .setSystemProperty(JOIN_DISTRIBUTION_TYPE, FeaturesConfig.JoinDistributionType.BROADCAST.name())\n-                .build();\n-        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n-\n         // Join lineitem with a single row of orders\n-        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(\n-                session,\n-                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.comment = 'nstructions sleep furiously among '\");\n-        assertEquals(result.getResult().getRowCount(), 6);\n-        assertEquals(getOperatorRowsRead(runner, result.getQueryId()), ImmutableSet.of(6L, ORDERS_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.comment = 'nstructions sleep furiously among '\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                6,\n+                ImmutableSet.of(6, ORDERS_COUNT));\n \n         // Join lineitem with a single row of part\n-        result = runner.executeWithQueryId(\n-                session,\n-                \"SELECT l.comment FROM  lineitem l, part p WHERE p.partkey = l.partkey AND p.comment = 'onic deposits'\");\n-        assertEquals(result.getResult().getRowCount(), 39);\n-        assertEquals(getOperatorRowsRead(runner, result.getQueryId()), ImmutableSet.of(39L, PART_COUNT));\n+        assertDynamicFiltering(\n+                \"SELECT l.comment FROM  lineitem l, part p WHERE p.partkey = l.partkey AND p.comment = 'onic deposits'\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                39,\n+                ImmutableSet.of(39, PART_COUNT));\n     }\n \n     @Test\n     public void testJoinDynamicFilteringBlockProbeSide()\n     {\n-        Session session = Session.builder(getSession())\n-                .setSystemProperty(JOIN_REORDERING_STRATEGY, FeaturesConfig.JoinReorderingStrategy.NONE.name())\n-                .setSystemProperty(JOIN_DISTRIBUTION_TYPE, FeaturesConfig.JoinDistributionType.BROADCAST.name())\n-                .build();\n-        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n         // Wait for both build sides to finish before starting the scan of 'lineitem' table (should be very selective given the dynamic filters).\n-        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(\n-                session,\n+        assertDynamicFiltering(\n                 \"SELECT l.comment\" +\n                         \" FROM  lineitem l, part p, orders o\" +\n                         \" WHERE l.orderkey = o.orderkey AND o.comment = 'nstructions sleep furiously among '\" +\n-                        \" AND p.partkey = l.partkey AND p.comment = 'onic deposits'\");\n-        assertEquals(result.getResult().getRowCount(), 1);\n-        assertEquals(getOperatorRowsRead(runner, result.getQueryId()), ImmutableSet.of(1L, ORDERS_COUNT, PART_COUNT));\n+                        \" AND p.partkey = l.partkey AND p.comment = 'onic deposits'\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name(), JOIN_REORDERING_STRATEGY, NONE.name()),\n+                1,\n+                ImmutableSet.of(1, ORDERS_COUNT, PART_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinDynamicFilteringNone()\n+    {\n+        // Probe-side is not scanned at all, due to dynamic filtering:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                0,\n+                ImmutableSet.of(0, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinLargeBuildSideNoDynamicFiltering()\n+    {\n+        // Probe-side is fully scanned because the build-side is too large for dynamic filtering:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders)\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                toIntExact(LINEITEM_COUNT),\n+                ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testPartitionedSemiJoinNoDynamicFiltering()\n+    {\n+        // Probe-side is fully scanned, because local dynamic filtering does not work for partitioned joins:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, PARTITIONED.name()),\n+                0,\n+                ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinDynamicFilteringSingleValue()\n+    {\n+        assertQueryResult(\"SELECT orderkey FROM orders WHERE comment = 'nstructions sleep furiously among '\", 1L);\n+        assertQueryResult(\"SELECT COUNT() FROM lineitem WHERE orderkey = 1\", 6L);\n+\n+        assertQueryResult(\"SELECT partkey FROM part WHERE comment = 'onic deposits'\", 1552L);\n+        assertQueryResult(\"SELECT COUNT() FROM lineitem WHERE partkey = 1552\", 39L);\n+\n+        // Join lineitem with a single row of orders\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.comment = 'nstructions sleep furiously among ')\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                6,\n+                ImmutableSet.of(6, ORDERS_COUNT));\n+\n+        // Join lineitem with a single row of part\n+        assertDynamicFiltering(\n+                \"SELECT l.comment FROM lineitem l WHERE l.partkey IN (SELECT p.partkey FROM part p WHERE p.comment = 'onic deposits')\",\n+                ImmutableMap.of(JOIN_DISTRIBUTION_TYPE, BROADCAST.name()),\n+                39,\n+                ImmutableSet.of(39, PART_COUNT));\n+    }\n+\n+    private void assertDynamicFiltering(String selectQuery, Map<String, String> sessionProperties, int expectedRowCount, Set<Integer> expectedOperatorRowsRead)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NzAzMg=="}, "originalCommit": null, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzEzMDE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOToxNDoyMlrOHNGKLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOToxNDoyMlrOHNGKLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NDQ0Nw==", "bodyText": "please extract\n                    if (node instanceof JoinNode) {\n                        return ((JoinNode) node).getDynamicFilters().keySet().stream();\n                    }\n                    return ((SemiJoinNode) node).getDynamicFilterId().map(ImmutableSet::of).orElse(ImmutableSet.of()).stream();\n\nas a separate method", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r483494447", "createdAt": "2020-09-04T09:14:22Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -323,19 +326,34 @@ void collectDynamicFilters()\n     private static Set<DynamicFilterId> getReplicatedDynamicFilters(PlanNode planNode)\n     {\n         return PlanNodeSearcher.searchFrom(planNode)\n-                .where(JoinNode.class::isInstance)\n-                .<JoinNode>findAll().stream()\n-                .filter(JoinUtils::isBuildSideReplicated)\n-                .flatMap(node -> node.getDynamicFilters().keySet().stream())\n+                .where(isInstanceOfAny(JoinNode.class, SemiJoinNode.class))\n+                .findAll().stream()\n+                .filter(node -> {\n+                    if (node instanceof JoinNode) {\n+                        return isBuildSideReplicated((JoinNode) node);\n+                    }\n+                    return isBuildSideReplicated((SemiJoinNode) node);\n+                })\n+                .flatMap(node -> {\n+                    if (node instanceof JoinNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzEzMzg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/JoinUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOToxNToyMlrOHNGMWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOToxNToyMlrOHNGMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NTAwMQ==", "bodyText": "Please add isBuildSideReplicated(PlanNode node). Then we wouldn't need to do ifs in DynamicFilterService", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r483495001", "createdAt": "2020-09-04T09:15:22Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/JoinUtils.java", "diffHunk": "@@ -65,6 +67,16 @@ public static boolean isBuildSideReplicated(JoinNode joinNode)\n                 .matches();\n     }\n \n+    public static boolean isBuildSideReplicated(SemiJoinNode semiJoinNode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzI2ODEzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo0ODo0NFrOHPFrHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo1OTo0N1rOHPRg1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4MzY0NQ==", "bodyText": "you can use\n.filter(JoinUtils::isBuildSideReplicated)\n\nnow", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r485583645", "createdAt": "2020-09-09T12:48:44Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -323,22 +326,43 @@ void collectDynamicFilters()\n     private static Set<DynamicFilterId> getReplicatedDynamicFilters(PlanNode planNode)\n     {\n         return PlanNodeSearcher.searchFrom(planNode)\n-                .where(JoinNode.class::isInstance)\n-                .<JoinNode>findAll().stream()\n-                .filter(JoinUtils::isBuildSideReplicated)\n-                .flatMap(node -> node.getDynamicFilters().keySet().stream())\n+                .where(isInstanceOfAny(JoinNode.class, SemiJoinNode.class))\n+                .findAll().stream()\n+                .filter(node -> {\n+                    if (node instanceof JoinNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzYyMQ==", "bodyText": "oh my bad..", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r485777621", "createdAt": "2020-09-09T16:59:47Z", "author": {"login": "lxynov"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -323,22 +326,43 @@ void collectDynamicFilters()\n     private static Set<DynamicFilterId> getReplicatedDynamicFilters(PlanNode planNode)\n     {\n         return PlanNodeSearcher.searchFrom(planNode)\n-                .where(JoinNode.class::isInstance)\n-                .<JoinNode>findAll().stream()\n-                .filter(JoinUtils::isBuildSideReplicated)\n-                .flatMap(node -> node.getDynamicFilters().keySet().stream())\n+                .where(isInstanceOfAny(JoinNode.class, SemiJoinNode.class))\n+                .findAll().stream()\n+                .filter(node -> {\n+                    if (node instanceof JoinNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4MzY0NQ=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzI3MjM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo0OTo0MlrOHPFttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo0OTo0MlrOHPFttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4NDMwOQ==", "bodyText": "you can use:\n.flatMap(node -> getDynamicFiltersProducedInPlanNode(node).stream())\n\nhere", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r485584309", "createdAt": "2020-09-09T12:49:42Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -323,22 +326,43 @@ void collectDynamicFilters()\n     private static Set<DynamicFilterId> getReplicatedDynamicFilters(PlanNode planNode)\n     {\n         return PlanNodeSearcher.searchFrom(planNode)\n-                .where(JoinNode.class::isInstance)\n-                .<JoinNode>findAll().stream()\n-                .filter(JoinUtils::isBuildSideReplicated)\n-                .flatMap(node -> node.getDynamicFilters().keySet().stream())\n+                .where(isInstanceOfAny(JoinNode.class, SemiJoinNode.class))\n+                .findAll().stream()\n+                .filter(node -> {\n+                    if (node instanceof JoinNode) {\n+                        return isBuildSideReplicated((JoinNode) node);\n+                    }\n+                    return isBuildSideReplicated((SemiJoinNode) node);\n+                })\n+                .flatMap(node -> {\n+                    if (node instanceof JoinNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzI3NDk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo1MDoxMVrOHPFvOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo1MDoxMVrOHPFvOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4NDY5Nw==", "bodyText": "throw new IllegalStateException() here", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r485584697", "createdAt": "2020-09-09T12:50:11Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -323,22 +326,43 @@ void collectDynamicFilters()\n     private static Set<DynamicFilterId> getReplicatedDynamicFilters(PlanNode planNode)\n     {\n         return PlanNodeSearcher.searchFrom(planNode)\n-                .where(JoinNode.class::isInstance)\n-                .<JoinNode>findAll().stream()\n-                .filter(JoinUtils::isBuildSideReplicated)\n-                .flatMap(node -> node.getDynamicFilters().keySet().stream())\n+                .where(isInstanceOfAny(JoinNode.class, SemiJoinNode.class))\n+                .findAll().stream()\n+                .filter(node -> {\n+                    if (node instanceof JoinNode) {\n+                        return isBuildSideReplicated((JoinNode) node);\n+                    }\n+                    return isBuildSideReplicated((SemiJoinNode) node);\n+                })\n+                .flatMap(node -> {\n+                    if (node instanceof JoinNode) {\n+                        return ((JoinNode) node).getDynamicFilters().keySet().stream();\n+                    }\n+                    return ((SemiJoinNode) node).getDynamicFilterId().map(ImmutableSet::of).orElse(ImmutableSet.of()).stream();\n+                })\n                 .collect(toImmutableSet());\n     }\n \n     private static Set<DynamicFilterId> getProducedDynamicFilters(PlanNode planNode)\n     {\n         return PlanNodeSearcher.searchFrom(planNode)\n-                .where(JoinNode.class::isInstance)\n-                .<JoinNode>findAll().stream()\n-                .flatMap(node -> node.getDynamicFilters().keySet().stream())\n+                .where(isInstanceOfAny(JoinNode.class, SemiJoinNode.class))\n+                .findAll().stream()\n+                .flatMap(node -> getDynamicFiltersProducedInPlanNode(node).stream())\n                 .collect(toImmutableSet());\n     }\n \n+    private static Set<DynamicFilterId> getDynamicFiltersProducedInPlanNode(PlanNode planNode)\n+    {\n+        if (planNode instanceof JoinNode) {\n+            return ((JoinNode) planNode).getDynamicFilters().keySet();\n+        }\n+        if (planNode instanceof SemiJoinNode) {\n+            return ((SemiJoinNode) planNode).getDynamicFilterId().map(ImmutableSet::of).orElse(ImmutableSet.of());\n+        }\n+        return ImmutableSet.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzI4ODA1OnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo1MzoxN1rOHPF3Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo1MzoxN1rOHPF3Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4Njc4Nw==", "bodyText": "no need to check it twice, it's already checked as part of testJoinDynamicFilteringSingleValue", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r485586787", "createdAt": "2020-09-09T12:53:17Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -162,6 +162,63 @@ public void testJoinDynamicFilteringBlockProbeSide()\n                 ImmutableSet.of(1, ORDERS_COUNT, PART_COUNT));\n     }\n \n+    @Test\n+    public void testSemiJoinDynamicFilteringNone()\n+    {\n+        // Probe-side is not scanned at all, due to dynamic filtering:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                withBroadcastJoin(),\n+                0,\n+                ImmutableSet.of(0, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinLargeBuildSideNoDynamicFiltering()\n+    {\n+        // Probe-side is fully scanned because the build-side is too large for dynamic filtering:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders)\",\n+                withBroadcastJoin(),\n+                toIntExact(LINEITEM_COUNT),\n+                ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testPartitionedSemiJoinNoDynamicFiltering()\n+    {\n+        // Probe-side is fully scanned, because local dynamic filtering does not work for partitioned joins:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                withPartitionedJoin(),\n+                0,\n+                ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinDynamicFilteringSingleValue()\n+    {\n+        assertQueryResult(\"SELECT orderkey FROM orders WHERE comment = 'nstructions sleep furiously among '\", 1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzI5NDYzOnYy", "diffSide": "RIGHT", "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo1NDo1NlrOHPF7hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo1NDo1NlrOHPF7hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4Nzg0Nw==", "bodyText": "there is also testJoinDynamicFilteringBlockProbeSide. We should add testSemiJoinDynamicFilteringBlockProbeSide", "url": "https://github.com/trinodb/trino/pull/5017#discussion_r485587847", "createdAt": "2020-09-09T12:54:56Z", "author": {"login": "sopel39"}, "path": "presto-memory/src/test/java/io/prestosql/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -162,6 +162,63 @@ public void testJoinDynamicFilteringBlockProbeSide()\n                 ImmutableSet.of(1, ORDERS_COUNT, PART_COUNT));\n     }\n \n+    @Test\n+    public void testSemiJoinDynamicFilteringNone()\n+    {\n+        // Probe-side is not scanned at all, due to dynamic filtering:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                withBroadcastJoin(),\n+                0,\n+                ImmutableSet.of(0, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinLargeBuildSideNoDynamicFiltering()\n+    {\n+        // Probe-side is fully scanned because the build-side is too large for dynamic filtering:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders)\",\n+                withBroadcastJoin(),\n+                toIntExact(LINEITEM_COUNT),\n+                ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testPartitionedSemiJoinNoDynamicFiltering()\n+    {\n+        // Probe-side is fully scanned, because local dynamic filtering does not work for partitioned joins:\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.totalprice < 0)\",\n+                withPartitionedJoin(),\n+                0,\n+                ImmutableSet.of(LINEITEM_COUNT, ORDERS_COUNT));\n+    }\n+\n+    @Test\n+    public void testSemiJoinDynamicFilteringSingleValue()\n+    {\n+        assertQueryResult(\"SELECT orderkey FROM orders WHERE comment = 'nstructions sleep furiously among '\", 1L);\n+        assertQueryResult(\"SELECT COUNT() FROM lineitem WHERE orderkey = 1\", 6L);\n+\n+        assertQueryResult(\"SELECT partkey FROM part WHERE comment = 'onic deposits'\", 1552L);\n+        assertQueryResult(\"SELECT COUNT() FROM lineitem WHERE partkey = 1552\", 39L);\n+\n+        // Join lineitem with a single row of orders\n+        assertDynamicFiltering(\n+                \"SELECT * FROM lineitem WHERE lineitem.orderkey IN (SELECT orders.orderkey FROM orders WHERE orders.comment = 'nstructions sleep furiously among ')\",\n+                withBroadcastJoin(),\n+                6,\n+                ImmutableSet.of(6, ORDERS_COUNT));\n+\n+        // Join lineitem with a single row of part\n+        assertDynamicFiltering(\n+                \"SELECT l.comment FROM lineitem l WHERE l.partkey IN (SELECT p.partkey FROM part p WHERE p.comment = 'onic deposits')\",\n+                withBroadcastJoin(),\n+                39,\n+                ImmutableSet.of(39, PART_COUNT));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3387, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}