{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4ODIxNDE5", "number": 4858, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzoxMTozNVrOEZCgHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOToyNToxNlrOEbeusQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjkwODQ3OnYy", "diffSide": "RIGHT", "path": "presto-main/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzoxMTozNVrOHBoHLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzoxMTozNVrOHBoHLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NzgyMg==", "bodyText": "\ud83d\ude31", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r471467822", "createdAt": "2020-08-17T13:11:35Z", "author": {"login": "kokosing"}, "path": "presto-main/pom.xml", "diffHunk": "@@ -56,6 +56,12 @@\n             <artifactId>presto-spi</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <!-- transitive test dependency -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDYyMjYzOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozMDo0NlrOHCLXVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTo0OTo1OVrOHCP0KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0NTM5OQ==", "bodyText": "can we use presto-testing for this?", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472045399", "createdAt": "2020-08-18T09:30:46Z", "author": {"login": "findepi"}, "path": "pom.xml", "diffHunk": "@@ -142,6 +142,7 @@\n         <module>presto-testing</module>\n         <module>presto-testing-kafka</module>\n         <module>presto-testing-server-launcher</module>\n+        <module>presto-testng-services</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExODMxMg==", "bodyText": "No, I do not want to use presto-testing(white box testing)  in product tests (black box testing).\nBTW product tests already depends on presto-main which is bad.\n#4871", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472118312", "createdAt": "2020-08-18T11:49:59Z", "author": {"login": "kokosing"}, "path": "pom.xml", "diffHunk": "@@ -142,6 +142,7 @@\n         <module>presto-testing</module>\n         <module>presto-testing-kafka</module>\n         <module>presto-testing-server-launcher</module>\n+        <module>presto-testng-services</module>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0NTM5OQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDYzNDcwOnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNDoyMFrOHCLfHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNDoyMFrOHCLfHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0NzM5MA==", "bodyText": "typo", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472047390", "createdAt": "2020-08-18T09:34:20Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "diffHunk": "@@ -32,29 +34,34 @@\n     @Override\n     public void onBeforeClass(ITestClass testClass)\n     {\n-        Method[] publicMethods = testClass.getRealClass().getMethods();\n-\n-        List<Method> unannotatedMethods = Arrays.stream(publicMethods)\n-                .filter(method -> method.getDeclaringClass() != Object.class)\n-                .filter(method -> !Modifier.isStatic(method.getModifiers()))\n-                .filter(method -> !method.isBridge())\n-                .filter(method -> !isTestMethod(method))\n-                .collect(toImmutableList());\n-\n-        if (!unannotatedMethods.isEmpty()) {\n+        Class<?> realClass = testClass.getRealClass();\n+        List<Method> unnatedTestMethods = findUnannotatedTestMethods(realClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDYzODgyOnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNToxOVrOHCLhgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyMzoyM1rOHCQ7Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0ODAwMg==", "bodyText": "equals, or is prefix", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472048002", "createdAt": "2020-08-18T09:35:19Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "diffHunk": "@@ -92,11 +99,44 @@ private static boolean isTestAnnotated(Method method)\n                         // testng annotation (@Test, @Before*, @DataProvider, etc.)\n                         return true;\n                     }\n-                    if (\"io.prestosql.tempto\".equals(annotationClass.getPackage().getName())) {\n+                    if (isTemptoClass(annotationClass)) {\n                         // tempto annotation (@BeforeTestWithContext, @AfterTestWithContext)\n                         return true;\n                     }\n                     return false;\n                 });\n     }\n+\n+    private static boolean isSpiMethod(Method method)\n+    {\n+        return Stream.of(method.getDeclaringClass().getInterfaces())\n+                .filter(ReportUnannotatedMethods::isTemptoClass)\n+                .map(Class::getMethods)\n+                .flatMap(Stream::of)\n+                .anyMatch(actualMethod -> hasSameNameAndParameters(method, actualMethod));\n+    }\n+\n+    private static boolean hasSameNameAndParameters(Method first, Method second)\n+    {\n+        if (!first.getName().equals(second.getName())) {\n+            return false;\n+        }\n+\n+        if (first.getParameterTypes().length != second.getParameterTypes().length) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < first.getParameterTypes().length; i++) {\n+            if (!first.getParameterTypes()[i].getName().equals(second.getParameterTypes()[i].getName())) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private static boolean isTemptoClass(Class<?> aClass)\n+    {\n+        return \"io.prestosql.tempto\".equals(aClass.getPackage().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNjQ5OQ==", "bodyText": "I think all tempto spi is in this package.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472136499", "createdAt": "2020-08-18T12:23:23Z", "author": {"login": "kokosing"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "diffHunk": "@@ -92,11 +99,44 @@ private static boolean isTestAnnotated(Method method)\n                         // testng annotation (@Test, @Before*, @DataProvider, etc.)\n                         return true;\n                     }\n-                    if (\"io.prestosql.tempto\".equals(annotationClass.getPackage().getName())) {\n+                    if (isTemptoClass(annotationClass)) {\n                         // tempto annotation (@BeforeTestWithContext, @AfterTestWithContext)\n                         return true;\n                     }\n                     return false;\n                 });\n     }\n+\n+    private static boolean isSpiMethod(Method method)\n+    {\n+        return Stream.of(method.getDeclaringClass().getInterfaces())\n+                .filter(ReportUnannotatedMethods::isTemptoClass)\n+                .map(Class::getMethods)\n+                .flatMap(Stream::of)\n+                .anyMatch(actualMethod -> hasSameNameAndParameters(method, actualMethod));\n+    }\n+\n+    private static boolean hasSameNameAndParameters(Method first, Method second)\n+    {\n+        if (!first.getName().equals(second.getName())) {\n+            return false;\n+        }\n+\n+        if (first.getParameterTypes().length != second.getParameterTypes().length) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < first.getParameterTypes().length; i++) {\n+            if (!first.getParameterTypes()[i].getName().equals(second.getParameterTypes()[i].getName())) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private static boolean isTemptoClass(Class<?> aClass)\n+    {\n+        return \"io.prestosql.tempto\".equals(aClass.getPackage().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0ODAwMg=="}, "originalCommit": null, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDY0MTc2OnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNjowM1rOHCLjUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoxODozN1rOHCQwvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0ODQ2Ng==", "bodyText": "is this kind of quadratic?", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472048466", "createdAt": "2020-08-18T09:36:03Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "diffHunk": "@@ -32,29 +34,34 @@\n     @Override\n     public void onBeforeClass(ITestClass testClass)\n     {\n-        Method[] publicMethods = testClass.getRealClass().getMethods();\n-\n-        List<Method> unannotatedMethods = Arrays.stream(publicMethods)\n-                .filter(method -> method.getDeclaringClass() != Object.class)\n-                .filter(method -> !Modifier.isStatic(method.getModifiers()))\n-                .filter(method -> !method.isBridge())\n-                .filter(method -> !isTestMethod(method))\n-                .collect(toImmutableList());\n-\n-        if (!unannotatedMethods.isEmpty()) {\n+        Class<?> realClass = testClass.getRealClass();\n+        List<Method> unnatedTestMethods = findUnannotatedTestMethods(realClass);\n+        if (!unnatedTestMethods.isEmpty()) {\n             // TestNG may or may not propagate listener's exception as test execution exception.\n             // Therefore, instead of throwing, we terminate the JVM.\n             System.err.println(format(\n                     \"FATAL: Test class %s has methods which are public but not explicitly annotated. Are they missing @Test?%s\",\n-                    testClass.getRealClass().getName(),\n-                    unannotatedMethods.stream()\n+                    realClass.getName(),\n+                    unnatedTestMethods.stream()\n                             .map(Method::toString)\n                             .collect(joining(\"\\n\\t\\t\", \"\\n\\t\\t\", \"\"))));\n             System.err.println(\"JVM will be terminated\");\n             System.exit(1);\n         }\n     }\n \n+    @VisibleForTesting\n+    static List<Method> findUnannotatedTestMethods(Class<?> realClass)\n+    {\n+        return Arrays.stream(realClass.getMethods())\n+                .filter(method -> method.getDeclaringClass() != Object.class)\n+                .filter(method -> !Modifier.isStatic(method.getModifiers()))\n+                .filter(method -> !method.isBridge())\n+                .filter(method -> !isTestMethod(method))\n+                .filter(method -> !isSpiMethod(method))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzMzgyMw==", "bodyText": "Maybe I could use some caching here to not verify same methods multiple times, but I don't think it is a real problem here anyway.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472133823", "createdAt": "2020-08-18T12:18:37Z", "author": {"login": "kokosing"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "diffHunk": "@@ -32,29 +34,34 @@\n     @Override\n     public void onBeforeClass(ITestClass testClass)\n     {\n-        Method[] publicMethods = testClass.getRealClass().getMethods();\n-\n-        List<Method> unannotatedMethods = Arrays.stream(publicMethods)\n-                .filter(method -> method.getDeclaringClass() != Object.class)\n-                .filter(method -> !Modifier.isStatic(method.getModifiers()))\n-                .filter(method -> !method.isBridge())\n-                .filter(method -> !isTestMethod(method))\n-                .collect(toImmutableList());\n-\n-        if (!unannotatedMethods.isEmpty()) {\n+        Class<?> realClass = testClass.getRealClass();\n+        List<Method> unnatedTestMethods = findUnannotatedTestMethods(realClass);\n+        if (!unnatedTestMethods.isEmpty()) {\n             // TestNG may or may not propagate listener's exception as test execution exception.\n             // Therefore, instead of throwing, we terminate the JVM.\n             System.err.println(format(\n                     \"FATAL: Test class %s has methods which are public but not explicitly annotated. Are they missing @Test?%s\",\n-                    testClass.getRealClass().getName(),\n-                    unannotatedMethods.stream()\n+                    realClass.getName(),\n+                    unnatedTestMethods.stream()\n                             .map(Method::toString)\n                             .collect(joining(\"\\n\\t\\t\", \"\\n\\t\\t\", \"\"))));\n             System.err.println(\"JVM will be terminated\");\n             System.exit(1);\n         }\n     }\n \n+    @VisibleForTesting\n+    static List<Method> findUnannotatedTestMethods(Class<?> realClass)\n+    {\n+        return Arrays.stream(realClass.getMethods())\n+                .filter(method -> method.getDeclaringClass() != Object.class)\n+                .filter(method -> !Modifier.isStatic(method.getModifiers()))\n+                .filter(method -> !method.isBridge())\n+                .filter(method -> !isTestMethod(method))\n+                .filter(method -> !isSpiMethod(method))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0ODQ2Ng=="}, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDY0MjE4OnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNjoxMVrOHCLjmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNjoxMVrOHCLjmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0ODUzOQ==", "bodyText": "spi -> temptoSpi", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472048539", "createdAt": "2020-08-18T09:36:11Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "diffHunk": "@@ -92,11 +99,44 @@ private static boolean isTestAnnotated(Method method)\n                         // testng annotation (@Test, @Before*, @DataProvider, etc.)\n                         return true;\n                     }\n-                    if (\"io.prestosql.tempto\".equals(annotationClass.getPackage().getName())) {\n+                    if (isTemptoClass(annotationClass)) {\n                         // tempto annotation (@BeforeTestWithContext, @AfterTestWithContext)\n                         return true;\n                     }\n                     return false;\n                 });\n     }\n+\n+    private static boolean isSpiMethod(Method method)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDY0MzIwOnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNjozMFrOHCLkSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNjozMFrOHCLkSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0ODcxMg==", "bodyText": "hasSameNameAndParameters -> overrides ?", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472048712", "createdAt": "2020-08-18T09:36:30Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java", "diffHunk": "@@ -92,11 +99,44 @@ private static boolean isTestAnnotated(Method method)\n                         // testng annotation (@Test, @Before*, @DataProvider, etc.)\n                         return true;\n                     }\n-                    if (\"io.prestosql.tempto\".equals(annotationClass.getPackage().getName())) {\n+                    if (isTemptoClass(annotationClass)) {\n                         // tempto annotation (@BeforeTestWithContext, @AfterTestWithContext)\n                         return true;\n                     }\n                     return false;\n                 });\n     }\n+\n+    private static boolean isSpiMethod(Method method)\n+    {\n+        return Stream.of(method.getDeclaringClass().getInterfaces())\n+                .filter(ReportUnannotatedMethods::isTemptoClass)\n+                .map(Class::getMethods)\n+                .flatMap(Stream::of)\n+                .anyMatch(actualMethod -> hasSameNameAndParameters(method, actualMethod));\n+    }\n+\n+    private static boolean hasSameNameAndParameters(Method first, Method second)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDY0NzQ4OnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/RetryAnnotationTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNzozOVrOHCLnEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjo0NToxNVrOHCR9SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0OTQyNw==", "bodyText": "Can we apply FlakyTestRetryAnalyzer twice, on class and method level?\nwhat does it do on the class level?", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472049427", "createdAt": "2020-08-18T09:37:39Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/RetryAnnotationTransformer.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.airlift.log.Logger;\n+import org.testng.IAnnotationTransformer;\n+import org.testng.annotations.ITestAnnotation;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+\n+public class RetryAnnotationTransformer\n+        implements IAnnotationTransformer\n+{\n+    private static final Logger log = Logger.get(RetryAnnotationTransformer.class);\n+\n+    @Override\n+    public void transform(ITestAnnotation annotation, Class testClass, Constructor testConstructor, Method testMethod)\n+    {\n+        if (testClass != null) {\n+            log.debug(\"Instrumenting class %s with %s.\", testClass.getSimpleName(), FlakyTestRetryAnalyzer.class.getSimpleName());\n+            annotation.setRetryAnalyzer(FlakyTestRetryAnalyzer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE1MzQxNg==", "bodyText": "Can we apply FlakyTestRetryAnalyzer twice, on class and method level?\n\nWe already did that.\n\nwhat does it do on the class level?\n\nI guess it might want to enable retrying for test methods? (However I know that testng is ready to surprise me here) Anyway @Flaky can be only set for methods so I removed instrumenting class.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472153416", "createdAt": "2020-08-18T12:45:15Z", "author": {"login": "kokosing"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/RetryAnnotationTransformer.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.airlift.log.Logger;\n+import org.testng.IAnnotationTransformer;\n+import org.testng.annotations.ITestAnnotation;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+\n+public class RetryAnnotationTransformer\n+        implements IAnnotationTransformer\n+{\n+    private static final Logger log = Logger.get(RetryAnnotationTransformer.class);\n+\n+    @Override\n+    public void transform(ITestAnnotation annotation, Class testClass, Constructor testConstructor, Method testMethod)\n+    {\n+        if (testClass != null) {\n+            log.debug(\"Instrumenting class %s with %s.\", testClass.getSimpleName(), FlakyTestRetryAnalyzer.class.getSimpleName());\n+            annotation.setRetryAnalyzer(FlakyTestRetryAnalyzer.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0OTQyNw=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDY1MTYwOnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyTestRetryAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozODo0OFrOHCLptQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozODo0OFrOHCLptQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1MDEwMQ==", "bodyText": "Does this work for parameterized methods (dataprovider)?\nmaybe we could explicitly detect & reject this?", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472050101", "createdAt": "2020-08-18T09:38:48Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyTestRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.airlift.log.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestNGMethod;\n+import org.testng.ITestResult;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.lang.String.format;\n+\n+public class FlakyTestRetryAnalyzer\n+        implements IRetryAnalyzer\n+{\n+    private static final Logger log = Logger.get(FlakyTestRetryAnalyzer.class);\n+\n+    public static final int ALLOWED_RETRIES_COUNT = 2;\n+\n+    @GuardedBy(\"this\")\n+    private final Map<String, Long> retryCounter = new HashMap<>();\n+\n+    @Override\n+    public boolean retry(ITestResult result)\n+    {\n+        if (!isTestRetryable(result)) {\n+            return false;\n+        }\n+        long retryCount;\n+        synchronized (this) {\n+            String name = getName(result.getMethod());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDY1MzQ5OnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyTestRetryAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozOToxN1rOHCLqyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozOToxN1rOHCLqyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1MDM3Ng==", "bodyText": "Add a comment whether the class name is defining class (eg abstract base), or actual class (the test class)", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472050376", "createdAt": "2020-08-18T09:39:17Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyTestRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.airlift.log.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestNGMethod;\n+import org.testng.ITestResult;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.lang.String.format;\n+\n+public class FlakyTestRetryAnalyzer\n+        implements IRetryAnalyzer\n+{\n+    private static final Logger log = Logger.get(FlakyTestRetryAnalyzer.class);\n+\n+    public static final int ALLOWED_RETRIES_COUNT = 2;\n+\n+    @GuardedBy(\"this\")\n+    private final Map<String, Long> retryCounter = new HashMap<>();\n+\n+    @Override\n+    public boolean retry(ITestResult result)\n+    {\n+        if (!isTestRetryable(result)) {\n+            return false;\n+        }\n+        long retryCount;\n+        synchronized (this) {\n+            String name = getName(result.getMethod());\n+            retryCount = retryCounter.getOrDefault(name, 0L);\n+            retryCount++;\n+            if (retryCount > ALLOWED_RETRIES_COUNT) {\n+                return false;\n+            }\n+            retryCounter.put(name, retryCount);\n+        }\n+        log.warn(\n+                result.getThrowable(),\n+                \"Test %s::%s attempt %s failed, retrying...,\",\n+                result.getTestClass().getName(),\n+                result.getMethod().getMethodName(),\n+                retryCount);\n+        return true;\n+    }\n+\n+    private static boolean isTestRetryable(ITestResult result)\n+    {\n+        Method method = result.getMethod().getConstructorOrMethod().getMethod();\n+        if (method == null) {\n+            return false;\n+        }\n+        return method.getAnnotation(Flaky.class) != null;\n+    }\n+\n+    public static String getName(ITestNGMethod method)\n+    {\n+        return format(\"%s::%s\", method.getTestClass().getName(), method.getMethodName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDY1ODIyOnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/Flaky.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo0MDo0MVrOHCLtvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo0MDo0MVrOHCLtvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1MTEzNQ==", "bodyText": "I'd (ab)use @Deprecated here\n/**\n * @deprecated Use of this is strongly discouraged\n */\n@Deprecated\n\nso that every use of this annotation visually stands out and calls for a fix", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472051135", "createdAt": "2020-08-18T09:40:41Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/Flaky.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Retention(RUNTIME)\n+@Target(METHOD)\n+public @interface Flaky", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzM5NDgwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveStorageFormats.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1OToyOVrOHCmfDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDowMzozNlrOHDI8Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4OTc0MA==", "bodyText": "It's unsupported, isn't it?", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472489740", "createdAt": "2020-08-18T20:59:29Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveStorageFormats.java", "diffHunk": "@@ -157,6 +158,7 @@ public void testCreateTableAs(StorageFormat storageFormat)\n     }\n \n     @Test(dataProvider = \"storage_formats\", groups = STORAGE_FORMATS)\n+    @Flaky(issue = \"https://github.com/prestosql/presto/issues/2390\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0MzU5Ng==", "bodyText": "It is supported and most of the time the test is passing.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472943596", "createdAt": "2020-08-19T11:00:05Z", "author": {"login": "kokosing"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveStorageFormats.java", "diffHunk": "@@ -157,6 +158,7 @@ public void testCreateTableAs(StorageFormat storageFormat)\n     }\n \n     @Test(dataProvider = \"storage_formats\", groups = STORAGE_FORMATS)\n+    @Flaky(issue = \"https://github.com/prestosql/presto/issues/2390\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4OTc0MA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1NDI1NQ==", "bodyText": "Fixed", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r473054255", "createdAt": "2020-08-19T14:03:36Z", "author": {"login": "kokosing"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveStorageFormats.java", "diffHunk": "@@ -157,6 +158,7 @@ public void testCreateTableAs(StorageFormat storageFormat)\n     }\n \n     @Test(dataProvider = \"storage_formats\", groups = STORAGE_FORMATS)\n+    @Flaky(issue = \"https://github.com/prestosql/presto/issues/2390\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4OTc0MA=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzQxOTY4OnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyTestRetryAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTowNzo0OVrOHCmulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo1MTo1M1rOHDB7kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5MzcxOQ==", "bodyText": "I would prefer having public methods before private ones. You can see what class can do pretty easily without going into implementation details. No change requested.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472493719", "createdAt": "2020-08-18T21:07:49Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyTestRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.airlift.log.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestNGMethod;\n+import org.testng.ITestResult;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.lang.String.format;\n+\n+public class FlakyTestRetryAnalyzer\n+        implements IRetryAnalyzer\n+{\n+    private static final Logger log = Logger.get(FlakyTestRetryAnalyzer.class);\n+\n+    public static final int ALLOWED_RETRIES_COUNT = 2;\n+\n+    @GuardedBy(\"this\")\n+    private final Map<String, Long> retryCounter = new HashMap<>();\n+\n+    @Override\n+    public boolean retry(ITestResult result)\n+    {\n+        if (!isTestRetryable(result)) {\n+            return false;\n+        }\n+        long retryCount;\n+        ITestNGMethod method = result.getMethod();\n+        synchronized (this) {\n+            String name = getName(method);\n+            retryCount = retryCounter.getOrDefault(name, 0L);\n+            retryCount++;\n+            if (retryCount > ALLOWED_RETRIES_COUNT) {\n+                return false;\n+            }\n+            retryCounter.put(name, retryCount);\n+        }\n+        log.warn(\n+                result.getThrowable(),\n+                \"Test %s::%s attempt %s failed, retrying...,\",\n+                result.getTestClass().getName(),\n+                method.getMethodName(),\n+                retryCount);\n+        return true;\n+    }\n+\n+    private static boolean isTestRetryable(ITestResult result)\n+    {\n+        Method method = result.getMethod().getConstructorOrMethod().getMethod();\n+        if (method == null) {\n+            return false;\n+        }\n+        if (method.getParameterTypes().length != 0) {\n+            throw new UnsupportedOperationException(\"@Flaky annotation is not yet supported for parametric tests\");\n+        }\n+        return method.getAnnotation(Flaky.class) != null;\n+    }\n+\n+    public static String getName(ITestNGMethod method)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzOTQwOA==", "bodyText": "This one should not be public.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472939408", "createdAt": "2020-08-19T10:51:53Z", "author": {"login": "kokosing"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyTestRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.airlift.log.Logger;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestNGMethod;\n+import org.testng.ITestResult;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.lang.String.format;\n+\n+public class FlakyTestRetryAnalyzer\n+        implements IRetryAnalyzer\n+{\n+    private static final Logger log = Logger.get(FlakyTestRetryAnalyzer.class);\n+\n+    public static final int ALLOWED_RETRIES_COUNT = 2;\n+\n+    @GuardedBy(\"this\")\n+    private final Map<String, Long> retryCounter = new HashMap<>();\n+\n+    @Override\n+    public boolean retry(ITestResult result)\n+    {\n+        if (!isTestRetryable(result)) {\n+            return false;\n+        }\n+        long retryCount;\n+        ITestNGMethod method = result.getMethod();\n+        synchronized (this) {\n+            String name = getName(method);\n+            retryCount = retryCounter.getOrDefault(name, 0L);\n+            retryCount++;\n+            if (retryCount > ALLOWED_RETRIES_COUNT) {\n+                return false;\n+            }\n+            retryCounter.put(name, retryCount);\n+        }\n+        log.warn(\n+                result.getThrowable(),\n+                \"Test %s::%s attempt %s failed, retrying...,\",\n+                result.getTestClass().getName(),\n+                method.getMethodName(),\n+                retryCount);\n+        return true;\n+    }\n+\n+    private static boolean isTestRetryable(ITestResult result)\n+    {\n+        Method method = result.getMethod().getConstructorOrMethod().getMethod();\n+        if (method == null) {\n+            return false;\n+        }\n+        if (method.getParameterTypes().length != 0) {\n+            throw new UnsupportedOperationException(\"@Flaky annotation is not yet supported for parametric tests\");\n+        }\n+        return method.getAnnotation(Flaky.class) != null;\n+    }\n+\n+    public static String getName(ITestNGMethod method)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5MzcxOQ=="}, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzQ1NzI2OnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestFlakyTestRetryAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMToxOTozNFrOHCnExQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo1ODoyMFrOHDCIWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5OTM5Nw==", "bodyText": "I suspect it's hard to write this kind of test but there's no check for the maximum retries count, ie. you do not check what's going to happen when the test fails 3 times.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472499397", "createdAt": "2020-08-18T21:19:34Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestFlakyTestRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testng.services.FlakyTestRetryAnalyzer.ALLOWED_RETRIES_COUNT;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestFlakyTestRetryAnalyzer", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0MjY4MQ==", "bodyText": "It is hard:\nI tried with:\n    @Flaky\n    @Test(expectedExceptions = AssertionError.class, expectedExceptionsMessageRegExp = \"3\")\n    public void testAlwaysFailingRetrying()\n    {\n        testAlwaysFailingRetryingCount++;\n        fail(\"\" + testAlwaysFailingRetryingCount);\n    }\n\nBut such test just passes so it does not trigger the retrying so it is the same as testRetrying.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472942681", "createdAt": "2020-08-19T10:58:20Z", "author": {"login": "kokosing"}, "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestFlakyTestRetryAnalyzer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testng.services.FlakyTestRetryAnalyzer.ALLOWED_RETRIES_COUNT;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestFlakyTestRetryAnalyzer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5OTM5Nw=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzQ2MjU0OnYy", "diffSide": "RIGHT", "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestReportUnannotatedMethods.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMToyMToxNFrOHCnH6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0ODo1M1rOHD_Nhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDIwMw==", "bodyText": "Yeah... not the best name.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472500203", "createdAt": "2020-08-18T21:21:14Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestReportUnannotatedMethods.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.Requirements;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestReportUnannotatedMethods\n+{\n+    private final ReportUnannotatedMethods instance = new ReportUnannotatedMethods();\n+\n+    @Test\n+    public void testTest()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMTUxMw==", "bodyText": "Actually, the whole class could use less \"test*\" words.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472501513", "createdAt": "2020-08-18T21:24:06Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestReportUnannotatedMethods.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.Requirements;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestReportUnannotatedMethods\n+{\n+    private final ReportUnannotatedMethods instance = new ReportUnannotatedMethods();\n+\n+    @Test\n+    public void testTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDIwMw=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzODU0Mw==", "bodyText": "Why? The problem is that it noun and verb. This test tests the test. Notice that TestingTest has a method annotated with @Test. While other test cases are different.\nWhat do you suggest?", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r472938543", "createdAt": "2020-08-19T10:50:12Z", "author": {"login": "kokosing"}, "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestReportUnannotatedMethods.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.Requirements;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestReportUnannotatedMethods\n+{\n+    private final ReportUnannotatedMethods instance = new ReportUnannotatedMethods();\n+\n+    @Test\n+    public void testTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDIwMw=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4OTYxNQ==", "bodyText": "Actually, the whole class could use less \"test*\" words.\n\nin fact, it's legacy from JUnit 3 era, when Java didn't have annotations and method name stood for @Test; new code shouldn't use such convention\nthere are many, many more test naming problems in Presto, subject for huuuge refactoring some day:\n\nTestXxxx (attribute + object in wrong order) - the standard way of naming this pretty everywhere is XxxxTest / XxxxSpec, etc (natural order: attributive + subject)\nTestingXxxx (gerund + object - too ambiguous) - the standard way of naming this is TestXxxx / MockXxxx / StubXxxx / TestXxxxService / TestXxxxUtil etc (natural order: attribute + object)\ntestSomethingVeryVeryVeryLongWhenSomethingLong - hard to read, camel case is terrible for more descriptive test names; better break Java conventions and allow something_very_very_long_when_something_long (for this reason languages like Kotlin or Groovy allow even spaces and most special chars in identifiers!)", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r473689615", "createdAt": "2020-08-20T07:24:41Z", "author": {"login": "iirekm"}, "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestReportUnannotatedMethods.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.Requirements;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestReportUnannotatedMethods\n+{\n+    private final ReportUnannotatedMethods instance = new ReportUnannotatedMethods();\n+\n+    @Test\n+    public void testTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDIwMw=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzNDk0OQ==", "bodyText": "Actually, the whole class could use less \"test*\" words.\n\nin fact, it's legacy from JUnit 3 era, when Java didn't have annotations and method name stood for @Test; new code shouldn't use such convention\n\nIntellij's \u2318O does not let my find test classes by name, unless they have something in their name\nsimilarily, in a test class with tests  helper methods (normal thing), \u2318F12 does not let me find test methods my name, unless they have something in their name\n-- the naming convention is for us, developers, even more than testng, surefile or whatever", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r473834949", "createdAt": "2020-08-20T09:57:03Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestReportUnannotatedMethods.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.Requirements;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestReportUnannotatedMethods\n+{\n+    private final ReportUnannotatedMethods instance = new ReportUnannotatedMethods();\n+\n+    @Test\n+    public void testTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDIwMw=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1MTc4NA==", "bodyText": "You need to find by method names probably only because some test classes are huuuge here.\nIf all test classes were small (this is another refactoring needed in some places), you didn't have to find by method names, and class name pattern like *Test is enough.", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r473851784", "createdAt": "2020-08-20T10:17:16Z", "author": {"login": "iirekm"}, "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestReportUnannotatedMethods.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.Requirements;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestReportUnannotatedMethods\n+{\n+    private final ReportUnannotatedMethods instance = new ReportUnannotatedMethods();\n+\n+    @Test\n+    public void testTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDIwMw=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MzQzMA==", "bodyText": "If all test classes were small\n\nThen we would use \"find class by name\"", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r473943430", "createdAt": "2020-08-20T12:48:53Z", "author": {"login": "kokosing"}, "path": "presto-testng-services/src/test/java/io/prestosql/testng/services/TestReportUnannotatedMethods.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.Requirements;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestReportUnannotatedMethods\n+{\n+    private final ReportUnannotatedMethods instance = new ReportUnannotatedMethods();\n+\n+    @Test\n+    public void testTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDIwMw=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjUwNDgxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOToyNToxNlrOHFbwzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOToyNToxNlrOHFbwzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1OTc4OQ==", "bodyText": "FYI A different test method is tagged than originally reported n #4927\nwill follow-up", "url": "https://github.com/trinodb/trino/pull/4858#discussion_r475459789", "createdAt": "2020-08-24T09:25:16Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -86,6 +87,7 @@ public void testReadFullAcidPartitionedBucketed()\n     }\n \n     @Test(groups = HIVE_TRANSACTIONAL, timeOut = TEST_TIMEOUT)\n+    @Flaky(issue = \"https://github.com/prestosql/presto/issues/4857\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d6683e702a1cd76217d16e28f7930c165c8582"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3486, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}