{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTM0NTk5", "number": 4151, "title": "Add support for IN predicate in outer join criteria", "bodyText": "", "createdAt": "2020-06-22T19:28:08Z", "url": "https://github.com/trinodb/trino/pull/4151", "merged": true, "mergeCommit": {"oid": "9730985e349d54b4a9c3af313eeea37c1ee36f12"}, "closed": true, "closedAt": "2020-06-24T13:02:46Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct15ExgH2gAyNDM4MTM0NTk5OmUyMGEyMzkxYWFiNWEwNmYwNzBhYzdkMmRlMmUyMGEwZGQ4MDc5NGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuVFQogFqTQzNjM5ODQ0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e20a2391aab5a06f070ac7d2de2e20a0dd80794c", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/e20a2391aab5a06f070ac7d2de2e20a0dd80794c", "committedDate": "2020-06-22T19:19:59Z", "message": "Fix incorrect result for inequality join involving NaN\n\nIn the case of NaN, not(a < b) is not equivalent to a >= b."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTE1OTQ2", "url": "https://github.com/trinodb/trino/pull/4151#pullrequestreview-435515946", "createdAt": "2020-06-23T07:34:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNDozN1rOGnc28w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNjoyNVrOGnc7cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMDQ2Nw==", "bodyText": "what correlation in IN and inner join?", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444020467", "createdAt": "2020-06-23T07:34:37Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestJoin.java", "diffHunk": "@@ -58,7 +59,106 @@ public void testJoinOnNan()\n     {\n         assertThat(assertions.query(\n                 \"WITH t(x) AS (VALUES if(rand() > 0, nan())) \" + // TODO: remove if(rand() > 0, ...) once https://github.com/prestosql/presto/issues/4119 is fixed\n-                \"SELECT * FROM t t1 JOIN t t2 ON NOT t1.x < t2.x\"))\n-            .matches(\"VALUES (nan(), nan())\");\n+                        \"SELECT * FROM t t1 JOIN t t2 ON NOT t1.x < t2.x\"))\n+                .matches(\"VALUES (nan(), nan())\");\n+    }\n+\n+    @Test\n+    public void testInPredicateInJoinCriteria()\n+    {\n+        assertThat(assertions.query(\"SELECT * FROM (VALUES 1, 2, NULL) t(x) JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL)\");\n+\n+        assertThat(assertions.query(\"SELECT * FROM (VALUES 1, 2, NULL) t(x) LEFT JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL), (2, NULL), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) RIGHT JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) FULL JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL), (2, NULL), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) LEFT JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) RIGHT JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1), (NULL, 3), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) FULL JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1), (NULL, 3), (NULL, NULL)\");\n+\n+        // correlation in join clause not allowed for outer join", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMTYxNw==", "bodyText": "else if (dependencies.stream().allMatch(right::canResolve) and then else fail?", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444021617", "createdAt": "2020-06-23T07:36:25Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -411,15 +409,15 @@ else if (firstDependencies.stream().allMatch(right::canResolve) && secondDepende\n \n         if (node.getType() != INNER) {\n             for (Expression complexExpression : complexJoinExpressions) {\n-                Set<InPredicate> inPredicates = subqueryPlanner.collectInPredicateSubqueries(complexExpression, node);\n-                if (!inPredicates.isEmpty()) {\n-                    InPredicate inPredicate = Iterables.getLast(inPredicates);\n-                    throw semanticException(NOT_SUPPORTED, inPredicate, \"IN with subquery predicate in join condition is not supported\");\n+                Set<QualifiedName> dependencies = SymbolsExtractor.extractNames(complexExpression, analysis.getColumnReferences());\n+\n+                if (dependencies.stream().allMatch(left::canResolve)) {\n+                    leftPlanBuilder = subqueryPlanner.handleSubqueries(leftPlanBuilder, complexExpression, node);\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b34b893c6ed5a2e80d03f2a20e0c644ed080e581", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/b34b893c6ed5a2e80d03f2a20e0c644ed080e581", "committedDate": "2020-06-23T18:51:09Z", "message": "Add support for IN predicate in outer join criteria"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b34b893c6ed5a2e80d03f2a20e0c644ed080e581", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/b34b893c6ed5a2e80d03f2a20e0c644ed080e581", "committedDate": "2020-06-23T18:51:09Z", "message": "Add support for IN predicate in outer join criteria"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2Mzk4NDQy", "url": "https://github.com/trinodb/trino/pull/4151#pullrequestreview-436398442", "createdAt": "2020-06-24T07:40:15Z", "commit": {"oid": "b34b893c6ed5a2e80d03f2a20e0c644ed080e581"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0MDoxNVrOGoGjrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0MDoxNVrOGoGjrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMzY2Mw==", "bodyText": "thanks", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444703663", "createdAt": "2020-06-24T07:40:15Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -411,15 +409,15 @@ else if (firstDependencies.stream().allMatch(right::canResolve) && secondDepende\n \n         if (node.getType() != INNER) {\n             for (Expression complexExpression : complexJoinExpressions) {\n-                Set<InPredicate> inPredicates = subqueryPlanner.collectInPredicateSubqueries(complexExpression, node);\n-                if (!inPredicates.isEmpty()) {\n-                    InPredicate inPredicate = Iterables.getLast(inPredicates);\n-                    throw semanticException(NOT_SUPPORTED, inPredicate, \"IN with subquery predicate in join condition is not supported\");\n+                Set<QualifiedName> dependencies = SymbolsExtractor.extractNames(complexExpression, analysis.getColumnReferences());\n+\n+                if (dependencies.stream().allMatch(left::canResolve)) {\n+                    leftPlanBuilder = subqueryPlanner.handleSubqueries(leftPlanBuilder, complexExpression, node);\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMTYxNw=="}, "originalCommit": null, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 497, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}