{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODAzNDcw", "number": 5276, "title": "Improve nested loop operator", "bodyText": "Also adds a constructor to the Page class for when no blocks are passed as arguments.", "createdAt": "2020-09-23T13:59:41Z", "url": "https://github.com/trinodb/trino/pull/5276", "merged": true, "mergeCommit": {"oid": "7f303fbda4809c75a14a2aec7a80d966c81f0052"}, "closed": true, "closedAt": "2020-10-08T21:49:32Z", "author": {"login": "pettyjamesm"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLuBDRgBqjM3OTg2MjU5NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQowf8AFqTUwNTE5MDQ1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODQ0Mzcz", "url": "https://github.com/trinodb/trino/pull/5276#pullrequestreview-495844373", "createdAt": "2020-09-24T18:26:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODoyNjowOFrOHXnVNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODoyNjowOFrOHXnVNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyMzcwMQ==", "bodyText": "This logic is wrong, I know. Will fix.", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r494523701", "createdAt": "2020-09-24T18:26:08Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -235,6 +235,63 @@ public void close()\n         afterClose.run();\n     }\n \n+    private static Iterator<Page> createNestedLoopIterator(Page probePage, Page buildPage)\n+    {\n+        int probeChannels = probePage.getChannelCount();\n+        int buildChannels = buildPage.getChannelCount();\n+        if (probeChannels == 0 && buildChannels == 0) {\n+            int probePositions = probePage.getPositionCount();\n+            int buildPositions = buildPage.getPositionCount();\n+            try {\n+                // positionCount is an int. Make sure the product can still fit in an int.\n+                int outputPositions = multiplyExact(probePositions, buildPositions);\n+                return new PageRepeatingIterator(new Page(outputPositions), 1);\n+            }\n+            catch (ArithmeticException ignored) {\n+            }\n+            // Repeat larger position count a smaller position count number of times\n+            Page outputPage = new Page(max(probePositions, buildPositions));\n+            return new PageRepeatingIterator(outputPage, min(probePositions, buildPositions));\n+        }\n+        else if (probeChannels == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 138}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MjU1MTI5", "url": "https://github.com/trinodb/trino/pull/5276#pullrequestreview-496255129", "createdAt": "2020-09-25T09:23:34Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOToyMzozNFrOHX7-Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOToyOToxOFrOHX8LLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MTkyMg==", "bodyText": "Why aren't build channels extracted by pruning projection? It seems like it should be the case. If it isn't, we already lost because build data was transferred over the network.", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r494861922", "createdAt": "2020-09-25T09:23:34Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopBuildOperator.java", "diffHunk": "@@ -33,22 +35,24 @@\n         private final int operatorId;\n         private final PlanNodeId planNodeId;\n         private final JoinBridgeManager<NestedLoopJoinBridge> nestedLoopJoinBridgeManager;\n+        private final List<Integer> buildChannels;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2NTE5Nw==", "bodyText": "These channels should be used for reordering only and not pruning. If we use this for (build) prunning, we lost already because data was already transferred over the network.\nI think we should have something plan validator like ValidateCrossJoins that would assert that cross joins do not do build pruning.", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r494865197", "createdAt": "2020-09-25T09:29:18Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -123,21 +121,19 @@ public OperatorFactory duplicate()\n     private final OperatorContext operatorContext;\n     private final Runnable afterClose;\n \n-    private final List<Integer> probeChannels;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MjUwOTAw", "url": "https://github.com/trinodb/trino/pull/5276#pullrequestreview-498250900", "createdAt": "2020-09-29T08:52:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODo1MjozOVrOHZi-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODo1MjozOVrOHZi-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0OTYyOA==", "bodyText": "Commit message needs update", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r496549628", "createdAt": "2020-09-29T08:52:39Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -15,6 +15,7 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzIwNjAz", "url": "https://github.com/trinodb/trino/pull/5276#pullrequestreview-502320603", "createdAt": "2020-10-05T18:38:34Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozODozNFrOHcpIUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozODozNFrOHcpIUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NjA1MA==", "bodyText": "Have you benchmarked this to make sure it's an issue? If it's on the hot path, the VM will likely inline it and the invokeinterface call shouldn't matter.", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r499796050", "createdAt": "2020-10-05T18:38:34Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -235,59 +242,132 @@ public void close()\n         afterClose.run();\n     }\n \n+    @VisibleForTesting\n+    static NestedLoopOutputIterator createNestedLoopOutputIterator(Page probePage, Page buildPage, int[] probeChannels, int[] buildChannels)\n+    {\n+        if (probeChannels.length == 0 && buildChannels.length == 0) {\n+            int probePositions = probePage.getPositionCount();\n+            int buildPositions = buildPage.getPositionCount();\n+            try {\n+                // positionCount is an int. Make sure the product can still fit in an int.\n+                int outputPositions = multiplyExact(probePositions, buildPositions);\n+                return new PageRepeatingIterator(new Page(outputPositions), 1);\n+            }\n+            catch (ArithmeticException ignored) {\n+            }\n+            // Repeat larger position count a smaller position count number of times\n+            Page outputPage = new Page(max(probePositions, buildPositions));\n+            return new PageRepeatingIterator(outputPage, min(probePositions, buildPositions));\n+        }\n+        else if (probeChannels.length == 0 && probePage.getPositionCount() <= buildPage.getPositionCount()) {\n+            return new PageRepeatingIterator(buildPage.getColumns(buildChannels), probePage.getPositionCount());\n+        }\n+        else if (buildChannels.length == 0 && buildPage.getPositionCount() <= probePage.getPositionCount()) {\n+            return new PageRepeatingIterator(probePage.getColumns(probeChannels), buildPage.getPositionCount());\n+        }\n+        else {\n+            return new NestedLoopPageBuilder(probePage, buildPage, probeChannels, buildChannels);\n+        }\n+    }\n+\n+    // bi-morphic parent class to avoid invoking iterator interface methods via invokeinterface on the hot path", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MjI0NjM0", "url": "https://github.com/trinodb/trino/pull/5276#pullrequestreview-504224634", "createdAt": "2020-10-07T20:04:19Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDowNDoxOVrOHeDgaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTowMTo0OFrOHeFZcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3Njc3Nw==", "bodyText": "It'd be safer to cap the max number of positions in a page. Some operators that append columns may not be able to split the input page into smaller pages, so this could result in massive pages.", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501276777", "createdAt": "2020-10-07T20:04:19Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -235,59 +242,130 @@ public void close()\n         afterClose.run();\n     }\n \n+    @VisibleForTesting\n+    static NestedLoopOutputIterator createNestedLoopOutputIterator(Page probePage, Page buildPage, int[] probeChannels, int[] buildChannels)\n+    {\n+        if (probeChannels.length == 0 && buildChannels.length == 0) {\n+            int probePositions = probePage.getPositionCount();\n+            int buildPositions = buildPage.getPositionCount();\n+            try {\n+                // positionCount is an int. Make sure the product can still fit in an int.\n+                int outputPositions = multiplyExact(probePositions, buildPositions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNDA4NQ==", "bodyText": "Same as above, we should cap the number of positions per page.", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501304085", "createdAt": "2020-10-07T20:54:50Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinPagesBuilder.java", "diffHunk": "@@ -47,12 +51,44 @@ public void addPage(Page page)\n             return;\n         }\n \n+        // Fast path for empty output channels\n+        if (page.getChannelCount() == 0) {\n+            updatePagePositionCounter(page.getPositionCount());\n+            return;\n+        }\n+\n         pages.add(page);\n         estimatedSize += page.getRetainedSizeInBytes();\n     }\n \n+    private void updatePagePositionCounter(int positions)\n+    {\n+        try {\n+            this.emptyChannelPositionCounter = addExact(this.emptyChannelPositionCounter, positions);\n+        }\n+        catch (ArithmeticException overflow) {\n+            flushPositionCounter();\n+            this.emptyChannelPositionCounter = positions;\n+        }\n+    }\n+\n+    private void flushPositionCounter()\n+    {\n+        checkState(!finished, \"NestedLoopJoinPagesBuilder is finished\");\n+        if (emptyChannelPositionCounter > 0) {\n+            Page output = new Page(emptyChannelPositionCounter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzc2MA==", "bodyText": "Not sure I understand. Where is the \"pending\" page being held? From my reading of the code above, there's no page involved. It's just an int in this  class until it's time to flush it, at which point a page is created and estimatedSize is updated.", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501307760", "createdAt": "2020-10-07T21:01:48Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinPagesBuilder.java", "diffHunk": "@@ -47,12 +51,44 @@ public void addPage(Page page)\n             return;\n         }\n \n+        // Fast path for empty output channels\n+        if (page.getChannelCount() == 0) {\n+            updatePagePositionCounter(page.getPositionCount());\n+            return;\n+        }\n+\n         pages.add(page);\n         estimatedSize += page.getRetainedSizeInBytes();\n     }\n \n+    private void updatePagePositionCounter(int positions)\n+    {\n+        try {\n+            this.emptyChannelPositionCounter = addExact(this.emptyChannelPositionCounter, positions);\n+        }\n+        catch (ArithmeticException overflow) {\n+            flushPositionCounter();\n+            this.emptyChannelPositionCounter = positions;\n+        }\n+    }\n+\n+    private void flushPositionCounter()\n+    {\n+        checkState(!finished, \"NestedLoopJoinPagesBuilder is finished\");\n+        if (emptyChannelPositionCounter > 0) {\n+            Page output = new Page(emptyChannelPositionCounter);\n+            pages.add(output);\n+            estimatedSize += output.getRetainedSizeInBytes();\n+            this.emptyChannelPositionCounter = 0;\n+        }\n+    }\n+\n     public DataSize getEstimatedSize()\n     {\n+        if (emptyChannelPositionCounter > 0) {\n+            // account for pending positionCount only page\n+            return DataSize.ofBytes(estimatedSize + POSITION_ONLY_PAGE_RETAINED_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce8456456807a373fe2f62843a3762e6688a8727", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/ce8456456807a373fe2f62843a3762e6688a8727", "committedDate": "2020-10-08T12:24:18Z", "message": "Add Page constructor for empty blocks case\n\nAvoids varargs empty array creation per call for these usage sites"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd38e2cd17291deeab4c9dcb015499ca8356270b", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/cd38e2cd17291deeab4c9dcb015499ca8356270b", "committedDate": "2020-10-08T13:07:16Z", "message": "Improve NestedLoopJoinOperator performance\n\n- Modifies NestedLoopJoinPagesBuilder to combine empty pages (aka:\npositionCount only pages) when the build side of the nested loop\njoin is empty\n- Handles the case where either probe or build side outputs are empty\nand position counts are fewer by emitting the same page repeatedly,\navoiding unnecessary per-iteration allocations\n- Reduces the amount of block array copies made in the standard case\nby reusing a block buffer to build each page and letting the Page\nconstructor clone it (ie: 1/2 as many allocations)\n- Nullifies the output iterator as well as the probe page when finished\niterating through it to make the referenced pages elligible for GC. Also\nnullifies more fields when the operator is closed for the same reason."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "cd38e2cd17291deeab4c9dcb015499ca8356270b", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/cd38e2cd17291deeab4c9dcb015499ca8356270b", "committedDate": "2020-10-08T13:07:16Z", "message": "Improve NestedLoopJoinOperator performance\n\n- Modifies NestedLoopJoinPagesBuilder to combine empty pages (aka:\npositionCount only pages) when the build side of the nested loop\njoin is empty\n- Handles the case where either probe or build side outputs are empty\nand position counts are fewer by emitting the same page repeatedly,\navoiding unnecessary per-iteration allocations\n- Reduces the amount of block array copies made in the standard case\nby reusing a block buffer to build each page and letting the Page\nconstructor clone it (ie: 1/2 as many allocations)\n- Nullifies the output iterator as well as the probe page when finished\niterating through it to make the referenced pages elligible for GC. Also\nnullifies more fields when the operator is closed for the same reason."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTkwNDU2", "url": "https://github.com/trinodb/trino/pull/5276#pullrequestreview-505190456", "createdAt": "2020-10-08T21:49:12Z", "commit": {"oid": "cd38e2cd17291deeab4c9dcb015499ca8356270b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3746, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}