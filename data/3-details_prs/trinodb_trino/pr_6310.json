{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MDcyOTg4", "number": 6310, "title": "Support picoseond date/times in DistributedQueryRunner", "bodyText": "also fixes #6318", "createdAt": "2020-12-11T16:05:47Z", "url": "https://github.com/trinodb/trino/pull/6310", "merged": true, "mergeCommit": {"oid": "3de449f4eec12c944d193119dd63261372e086bd"}, "closed": true, "closedAt": "2020-12-13T21:21:59Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlKvqwgFqTU1MDI2NDcwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdl37CnABqjQxMDY0NTg5NzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjY0NzAx", "url": "https://github.com/trinodb/trino/pull/6310#pullrequestreview-550264701", "createdAt": "2020-12-11T16:43:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0MzozMlrOIEA5jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0MzozMlrOIEA5jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTk1MQ==", "bodyText": "what does it mean that \"X\" matches \"X\" ?", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541079951", "createdAt": "2020-12-11T16:43:32Z", "author": {"login": "losipiuk"}, "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -109,6 +109,11 @@ public void testTimeLiterals()\n         // TODO https://github.com/prestosql/presto/issues/37\n         // TODO assertQuery(chicago, \"SELECT TIME '3:04:05'\");\n         // TODO assertQuery(kathmandu, \"SELECT TIME '3:04:05'\");\n+\n+        assertThat(query(\"SELECT TIME '01:23:45.123'\")).matches(\"SELECT TIME '01:23:45.123'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTg4ODY5", "url": "https://github.com/trinodb/trino/pull/6310#pullrequestreview-550588869", "createdAt": "2020-12-11T21:27:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToyNzoyNlrOIEO7AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToyNzoyNlrOIEO7AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTY5Nw==", "bodyText": "cc @martint", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541309697", "createdAt": "2020-12-11T21:27:26Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimeWithTimeZone.java", "diffHunk": "@@ -67,7 +67,7 @@ public boolean equals(Object o)\n         }\n \n         SqlTimeWithTimeZone other = (SqlTimeWithTimeZone) o;\n-        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, offsetMinutes);\n+        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, other.offsetMinutes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTk5OTgx", "url": "https://github.com/trinodb/trino/pull/6310#pullrequestreview-550599981", "createdAt": "2020-12-11T21:48:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0ODozMVrOIEQGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0ODozMVrOIEQGlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTA0NQ==", "bodyText": "Why is this outside the lambda below and as a separate variable?", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541329045", "createdAt": "2020-12-11T21:48:31Z", "author": {"login": "martint"}, "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -111,6 +113,25 @@ public void testTimeLiterals()\n         // TODO assertQuery(kathmandu, \"SELECT TIME '3:04:05'\");\n     }\n \n+    /**\n+     * Tests query runner with results of vaious precisions, and query assert.\n+     */\n+    @Test\n+    public void testTimeQueryResult()\n+    {\n+        assertThat(query(\"SELECT TIME '01:23:45.123'\")).matches(\"SELECT TIME '01:23:45.123'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456'\")).matches(\"SELECT TIME '01:23:45.123456'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456789'\")).matches(\"SELECT TIME '01:23:45.123456789'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456789012'\")).matches(\"SELECT TIME '01:23:45.123456789012'\");\n+\n+        QueryAssert queryAssert = assertThat(query(\"SELECT TIME '01:23:45.123456789012'\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "0df96b403ec9673ea8283a744eb80a326948ed37", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/0df96b403ec9673ea8283a744eb80a326948ed37", "committedDate": "2020-12-12T18:38:08Z", "message": "Split test method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3d5c7f3ea56edc184d6fd852456746943c5ae87", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/b3d5c7f3ea56edc184d6fd852456746943c5ae87", "committedDate": "2020-12-12T18:45:06Z", "message": "Fix SqlTimeWithTimeZone#equals wrt. offset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "885768d90c28c3cc077c4067aa7faed999cf7cf9", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/885768d90c28c3cc077c4067aa7faed999cf7cf9", "committedDate": "2020-12-12T18:45:06Z", "message": "Fix long timestamp with time zone constants handling\n\n`PageFunctionCompiler` cache is keyed by the `RowExpression`, and in\ncase of constants, the constant's stack representation `equals` is\nused.\n\nIn case of `LongTimestampWithTimeZone`, the `equals` followed SQL\nspecification for `timestamp with time zone` equality (compare point in\ntime, ignore zone) and so different values were being treated as equal.\n\nThe stack representation's `equals` does not have to, however, adhere to\nSQL specifiation and can be value-based instead. The `Type` object\nprovides the equality from SQL perspective. In fact, for short\n`timestamp with time zone` types, or for `time with time zone` types,\nthe stack representation is `long` (boxed to `Long` in\n`ConstantExpression`) and obviously does not apply SQL semantics for\ncomparison."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwODc0NjY3", "url": "https://github.com/trinodb/trino/pull/6310#pullrequestreview-550874667", "createdAt": "2020-12-13T01:03:00Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMTowMzowMFrOIEtvEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMTowMzowMFrOIEtvEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgxNDU0Ng==", "bodyText": "Typo in commit message: :\"picoseond\"", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541814546", "createdAt": "2020-12-13T01:03:00Z", "author": {"login": "martint"}, "path": "presto-testing/src/main/java/io/prestosql/testing/TestingPrestoClient.java", "diffHunk": "@@ -79,7 +79,13 @@\n public class TestingPrestoClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17851698441d04b000d734f635d3ee4746243ef0", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/17851698441d04b000d734f635d3ee4746243ef0", "committedDate": "2020-12-13T21:21:23Z", "message": "Support picosecond date/times in DistributedQueryRunner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3e8b28c66b4bc81a2f8c5f95db3d3296dea816", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/cf3e8b28c66b4bc81a2f8c5f95db3d3296dea816", "committedDate": "2020-12-13T21:21:34Z", "message": "Make SqlTimeWithTimeZone#equals value-based\n\nPer SQL specification, comparison between `time with time zone` values\ncompares them after normalizing to UTC. This logic, however, does not\nneed to be applied in the `SqlTimeWithTimeZone` class. The class can be\npurely value-based, the same way `SqlTimestampWithTimeZone` is."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "cf3e8b28c66b4bc81a2f8c5f95db3d3296dea816", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/cf3e8b28c66b4bc81a2f8c5f95db3d3296dea816", "committedDate": "2020-12-13T21:21:34Z", "message": "Make SqlTimeWithTimeZone#equals value-based\n\nPer SQL specification, comparison between `time with time zone` values\ncompares them after normalizing to UTC. This logic, however, does not\nneed to be applied in the `SqlTimeWithTimeZone` class. The class can be\npurely value-based, the same way `SqlTimestampWithTimeZone` is."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2193, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}