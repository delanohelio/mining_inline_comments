{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1OTUwMjQ3", "number": 4383, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTo1MDoxMlrOEMajKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjowNzoxM1rOEMdNbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDUzMzU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/SymbolsExtractor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTo1MDoxMlrOGuglPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDowNzowMlrOGupzqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMTUwMQ==", "bodyText": "what if there is a reference to outer column within subquery?", "url": "https://github.com/trinodb/trino/pull/4383#discussion_r451421501", "createdAt": "2020-07-08T09:50:12Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/SymbolsExtractor.java", "diffHunk": "@@ -181,5 +191,15 @@ protected Void visitIdentifier(Identifier node, ImmutableSet.Builder<QualifiedNa\n             builder.add(QualifiedName.of(node.getValue()));\n             return null;\n         }\n+\n+        @Override\n+        protected Void visitSubqueryExpression(SubqueryExpression node, ImmutableSet.Builder<QualifiedName> context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfe1dcf1d017b5da590c59e203ca0273980cf5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1MjA0NQ==", "bodyText": "That\u2019s taken care of during analysis. See the comment where this is used in join planning.\nThere\u2019s a broader cleanup that needs to be done at some point. Unfortunately, we currently resolve columns in join planning to determine where they originate. This should be done entirely during analysis.", "url": "https://github.com/trinodb/trino/pull/4383#discussion_r451552045", "createdAt": "2020-07-08T13:40:14Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/SymbolsExtractor.java", "diffHunk": "@@ -181,5 +191,15 @@ protected Void visitIdentifier(Identifier node, ImmutableSet.Builder<QualifiedNa\n             builder.add(QualifiedName.of(node.getValue()));\n             return null;\n         }\n+\n+        @Override\n+        protected Void visitSubqueryExpression(SubqueryExpression node, ImmutableSet.Builder<QualifiedName> context)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMTUwMQ=="}, "originalCommit": {"oid": "cacfe1dcf1d017b5da590c59e203ca0273980cf5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2NDY0NA==", "bodyText": "Could we have a test case for such subquery (referencing outer scope)?", "url": "https://github.com/trinodb/trino/pull/4383#discussion_r451564644", "createdAt": "2020-07-08T13:57:02Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/SymbolsExtractor.java", "diffHunk": "@@ -181,5 +191,15 @@ protected Void visitIdentifier(Identifier node, ImmutableSet.Builder<QualifiedNa\n             builder.add(QualifiedName.of(node.getValue()));\n             return null;\n         }\n+\n+        @Override\n+        protected Void visitSubqueryExpression(SubqueryExpression node, ImmutableSet.Builder<QualifiedName> context)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMTUwMQ=="}, "originalCommit": {"oid": "cacfe1dcf1d017b5da590c59e203ca0273980cf5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU3MjY0OQ==", "bodyText": "We already have a bunch of them. See the tests further down below the one I added. E.g.,\n        assertThatThrownBy(() -> assertions.query(\n                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) FULL JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES t.x)\"))\n                .hasMessage(\"line 1:93: Reference to column 't.x' from outer scope not allowed in this context\");", "url": "https://github.com/trinodb/trino/pull/4383#discussion_r451572649", "createdAt": "2020-07-08T14:07:02Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/SymbolsExtractor.java", "diffHunk": "@@ -181,5 +191,15 @@ protected Void visitIdentifier(Identifier node, ImmutableSet.Builder<QualifiedNa\n             builder.add(QualifiedName.of(node.getValue()));\n             return null;\n         }\n+\n+        @Override\n+        protected Void visitSubqueryExpression(SubqueryExpression node, ImmutableSet.Builder<QualifiedName> context)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMTUwMQ=="}, "originalCommit": {"oid": "cacfe1dcf1d017b5da590c59e203ca0273980cf5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDk2OTQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/SymbolsExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjowNzoxM1rOGuk0rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDoxMDo1NFrOGup_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5MDk5MA==", "bodyText": "consider using io.prestosql.sql.util.AstUtils#preOrder instead of DefaultExpressionTraversalVisitor", "url": "https://github.com/trinodb/trino/pull/4383#discussion_r451490990", "createdAt": "2020-07-08T12:07:13Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/SymbolsExtractor.java", "diffHunk": "@@ -124,7 +125,14 @@ private SymbolsExtractor() {}\n     public static Set<QualifiedName> extractNames(Expression expression, Set<NodeRef<Expression>> columnReferences)\n     {\n         ImmutableSet.Builder<QualifiedName> builder = ImmutableSet.builder();\n-        new QualifiedNameBuilderVisitor(columnReferences).process(expression, builder);\n+        new QualifiedNameBuilderVisitor(columnReferences, true).process(expression, builder);\n+        return builder.build();\n+    }\n+\n+    public static Set<QualifiedName> extractNamesNoSubqueries(Expression expression, Set<NodeRef<Expression>> columnReferences)\n+    {\n+        ImmutableSet.Builder<QualifiedName> builder = ImmutableSet.builder();\n+        new QualifiedNameBuilderVisitor(columnReferences, false).process(expression, builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacfe1dcf1d017b5da590c59e203ca0273980cf5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU3NTU3Ng==", "bodyText": "That's more complicated, as there's no way to stop the recursion with preOrder. In any case, I just extended what's already there. That would be a separate cleanup task.", "url": "https://github.com/trinodb/trino/pull/4383#discussion_r451575576", "createdAt": "2020-07-08T14:10:54Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/SymbolsExtractor.java", "diffHunk": "@@ -124,7 +125,14 @@ private SymbolsExtractor() {}\n     public static Set<QualifiedName> extractNames(Expression expression, Set<NodeRef<Expression>> columnReferences)\n     {\n         ImmutableSet.Builder<QualifiedName> builder = ImmutableSet.builder();\n-        new QualifiedNameBuilderVisitor(columnReferences).process(expression, builder);\n+        new QualifiedNameBuilderVisitor(columnReferences, true).process(expression, builder);\n+        return builder.build();\n+    }\n+\n+    public static Set<QualifiedName> extractNamesNoSubqueries(Expression expression, Set<NodeRef<Expression>> columnReferences)\n+    {\n+        ImmutableSet.Builder<QualifiedName> builder = ImmutableSet.builder();\n+        new QualifiedNameBuilderVisitor(columnReferences, false).process(expression, builder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5MDk5MA=="}, "originalCommit": {"oid": "cacfe1dcf1d017b5da590c59e203ca0273980cf5"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3839, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}