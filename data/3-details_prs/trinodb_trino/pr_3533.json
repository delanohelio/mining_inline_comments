{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjY0ODk1", "number": 3533, "title": "Handle unwrapping of casts with partial injective coercion", "bodyText": "", "createdAt": "2020-04-24T00:22:48Z", "url": "https://github.com/trinodb/trino/pull/3533", "merged": true, "mergeCommit": {"oid": "49c749656196868f6a7b071d2985a5a4e1877348"}, "closed": true, "closedAt": "2020-06-23T06:52:30Z", "author": {"login": "rohangarg"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcazZLDAFqTQwMDA0NzAwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABct_fl4AFqTQzNTQ3NzY0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMDQ3MDA5", "url": "https://github.com/trinodb/trino/pull/3533#pullrequestreview-400047009", "createdAt": "2020-04-24T15:25:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNToyNToyMlrOGLc_nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTozNTowM1rOGLda7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY2MjU1Nw==", "bodyText": "The additional condition is redundant. For PARTIAL, the allowed range for literal here is well within source type range. Instead, please add a comment.", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r414662557", "createdAt": "2020-04-24T15:25:22Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -309,7 +332,7 @@ private Expression unwrapCast(ComparisonExpression expression)\n                         return TRUE_LITERAL;\n                     case LESS_THAN:\n                     case LESS_THAN_OR_EQUAL:\n-                        if (sourceRange.isPresent() && compare(sourceType, sourceRange.get().getMin(), literalInSourceType) == 0) {\n+                        if (sourceRange.isPresent() && compare(sourceType, sourceRange.get().getMin(), literalInSourceType) == 0 && implicitInjectiveCoercionAbility == FULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY2Mjc2OA==", "bodyText": "The additional condition is redundant. For PARTIAL, the allowed range for literal here is well within source type range. Instead, please add a comment.", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r414662768", "createdAt": "2020-04-24T15:25:39Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -339,7 +362,7 @@ private Expression unwrapCast(ComparisonExpression expression)\n                         return new ComparisonExpression(LESS_THAN, cast.getExpression(), literalEncoder.toExpression(literalInSourceType, sourceType));\n                     case GREATER_THAN:\n                     case GREATER_THAN_OR_EQUAL:\n-                        if (sourceRange.isPresent() && compare(sourceType, sourceRange.get().getMax(), literalInSourceType) == 0) {\n+                        if (sourceRange.isPresent() && compare(sourceType, sourceRange.get().getMax(), literalInSourceType) == 0 && implicitInjectiveCoercionAbility == FULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY2NTExMQ==", "bodyText": "Please add a type check to the if-conditions instead of try-catch.", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r414665111", "createdAt": "2020-04-24T15:28:46Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -178,14 +181,34 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n-            if (!hasInjectiveImplicitCoercion(sourceType, targetType)) {\n+            ImplicitInjectiveCoercionAbility implicitInjectiveCoercionAbility = getImplicitInjectiveCoercionAbility(sourceType, targetType);\n+            if (implicitInjectiveCoercionAbility == NONE) {\n                 return expression;\n             }\n+            if (implicitInjectiveCoercionAbility == PARTIAL) {\n+                try {\n+                    if (targetType.equals(DOUBLE) && sourceType.equals(BIGINT)) {\n+                        Double rightDouble = (Double) right;\n+                        if (rightDouble.isInfinite() || rightDouble.isNaN() || rightDouble >= 1L << 53 || rightDouble <= -1L << 53) {\n+                            return expression;\n+                        }\n+                    }\n+                    if (targetType.equals(REAL) && (sourceType.equals(BIGINT) || sourceType.equals(INTEGER))) {\n+                        Float rightReal = Float.intBitsToFloat(((Long) right).intValue());\n+                        if (rightReal.isInfinite() || rightReal.isNaN() || rightReal >= 1L << 23 || rightReal <= -1L << 23) {\n+                            return expression;\n+                        }\n+                    }\n+                }\n+                catch (ClassCastException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY2NTkzMw==", "bodyText": "Flipping conjuncts would improve readability.", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r414665933", "createdAt": "2020-04-24T15:29:57Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -178,14 +181,34 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n-            if (!hasInjectiveImplicitCoercion(sourceType, targetType)) {\n+            ImplicitInjectiveCoercionAbility implicitInjectiveCoercionAbility = getImplicitInjectiveCoercionAbility(sourceType, targetType);\n+            if (implicitInjectiveCoercionAbility == NONE) {\n                 return expression;\n             }\n+            if (implicitInjectiveCoercionAbility == PARTIAL) {\n+                try {\n+                    if (targetType.equals(DOUBLE) && sourceType.equals(BIGINT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY2OTU1MQ==", "bodyText": "No need to give up here. Most of the cases could be handled:\n\na comparison with NaN\na comparison with any Double outside of Bigint range (including infinity)", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r414669551", "createdAt": "2020-04-24T15:35:03Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -178,14 +181,34 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n-            if (!hasInjectiveImplicitCoercion(sourceType, targetType)) {\n+            ImplicitInjectiveCoercionAbility implicitInjectiveCoercionAbility = getImplicitInjectiveCoercionAbility(sourceType, targetType);\n+            if (implicitInjectiveCoercionAbility == NONE) {\n                 return expression;\n             }\n+            if (implicitInjectiveCoercionAbility == PARTIAL) {\n+                try {\n+                    if (targetType.equals(DOUBLE) && sourceType.equals(BIGINT)) {\n+                        Double rightDouble = (Double) right;\n+                        if (rightDouble.isInfinite() || rightDouble.isNaN() || rightDouble >= 1L << 53 || rightDouble <= -1L << 53) {\n+                            return expression;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTAzNDQy", "url": "https://github.com/trinodb/trino/pull/3533#pullrequestreview-403903442", "createdAt": "2020-04-30T21:52:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo1Mjo0MlrOGO7oMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyMDozM1rOGO8U5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDE5Mw==", "bodyText": "I think it can be assumed here that right is a Double (because of how expressionOptimizer works).", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r418310193", "createdAt": "2020-04-30T21:52:42Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -178,14 +181,41 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n-            if (!hasInjectiveImplicitCoercion(sourceType, targetType)) {\n+            ImplicitInjectiveCoercionAbility implicitInjectiveCoercionAbility = getImplicitInjectiveCoercionAbility(sourceType, targetType);\n+            boolean boundaryChecksAllowed = implicitInjectiveCoercionAbility == FULL;\n+            if (implicitInjectiveCoercionAbility == NONE) {\n                 return expression;\n             }\n+            if (implicitInjectiveCoercionAbility == PARTIAL) {\n+                if (sourceType.equals(BIGINT) && targetType.equals(DOUBLE) && right instanceof Double) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDM2NQ==", "bodyText": "I think it can be assumed here that right is a Long (because of how expressionOptimizer works).", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r418310365", "createdAt": "2020-04-30T21:53:04Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -178,14 +181,41 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n-            if (!hasInjectiveImplicitCoercion(sourceType, targetType)) {\n+            ImplicitInjectiveCoercionAbility implicitInjectiveCoercionAbility = getImplicitInjectiveCoercionAbility(sourceType, targetType);\n+            boolean boundaryChecksAllowed = implicitInjectiveCoercionAbility == FULL;\n+            if (implicitInjectiveCoercionAbility == NONE) {\n                 return expression;\n             }\n+            if (implicitInjectiveCoercionAbility == PARTIAL) {\n+                if (sourceType.equals(BIGINT) && targetType.equals(DOUBLE) && right instanceof Double) {\n+                    double rightDouble = (Double) right;\n+                    if (rightDouble > Long.MAX_VALUE || rightDouble < Long.MIN_VALUE) {\n+                        // the double constant is greater (or smaller) than all bigints when casted to double\n+                        boundaryChecksAllowed = true;\n+                    }\n+                    else if (rightDouble >= 1L << 53 || rightDouble <= -1L << 53) {\n+                        // in (-2^53, 2^53), bigint follows an injective implicit coercion w.r.t double\n+                        return expression;\n+                    }\n+                }\n+                if ((sourceType.equals(BIGINT) || sourceType.equals(INTEGER)) && targetType.equals(REAL) && right instanceof Long) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMTg3Mg==", "bodyText": "float rightReal = intBitsToFloat(toIntExact((Long) right))", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r418311872", "createdAt": "2020-04-30T21:56:29Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -178,14 +181,41 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n-            if (!hasInjectiveImplicitCoercion(sourceType, targetType)) {\n+            ImplicitInjectiveCoercionAbility implicitInjectiveCoercionAbility = getImplicitInjectiveCoercionAbility(sourceType, targetType);\n+            boolean boundaryChecksAllowed = implicitInjectiveCoercionAbility == FULL;\n+            if (implicitInjectiveCoercionAbility == NONE) {\n                 return expression;\n             }\n+            if (implicitInjectiveCoercionAbility == PARTIAL) {\n+                if (sourceType.equals(BIGINT) && targetType.equals(DOUBLE) && right instanceof Double) {\n+                    double rightDouble = (Double) right;\n+                    if (rightDouble > Long.MAX_VALUE || rightDouble < Long.MIN_VALUE) {\n+                        // the double constant is greater (or smaller) than all bigints when casted to double\n+                        boundaryChecksAllowed = true;\n+                    }\n+                    else if (rightDouble >= 1L << 53 || rightDouble <= -1L << 53) {\n+                        // in (-2^53, 2^53), bigint follows an injective implicit coercion w.r.t double\n+                        return expression;\n+                    }\n+                }\n+                if ((sourceType.equals(BIGINT) || sourceType.equals(INTEGER)) && targetType.equals(REAL) && right instanceof Long) {\n+                    float rightReal = Float.intBitsToFloat(((Long) right).intValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMjcwNg==", "bodyText": "This case handles infinity. You could mention it in a comment.\nRegarding special values, NaN is not handled still. It should fail at literalInSourceType = coerce(right, targetToSource); (line 315)", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r418312706", "createdAt": "2020-04-30T21:58:28Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -178,14 +181,41 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n-            if (!hasInjectiveImplicitCoercion(sourceType, targetType)) {\n+            ImplicitInjectiveCoercionAbility implicitInjectiveCoercionAbility = getImplicitInjectiveCoercionAbility(sourceType, targetType);\n+            boolean boundaryChecksAllowed = implicitInjectiveCoercionAbility == FULL;\n+            if (implicitInjectiveCoercionAbility == NONE) {\n                 return expression;\n             }\n+            if (implicitInjectiveCoercionAbility == PARTIAL) {\n+                if (sourceType.equals(BIGINT) && targetType.equals(DOUBLE) && right instanceof Double) {\n+                    double rightDouble = (Double) right;\n+                    if (rightDouble > Long.MAX_VALUE || rightDouble < Long.MIN_VALUE) {\n+                        // the double constant is greater (or smaller) than all bigints when casted to double", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjI4OA==", "bodyText": "This comment looks like a general rule for partial injective types, but it's not.\nNow, that the out-of-bound cases are supported, it is not obvious that the condition is false. Actually, it is false because such cases would be handled / excluded until this point.\n(see the comment on code structure)", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r418316288", "createdAt": "2020-04-30T22:06:59Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -309,6 +339,7 @@ private Expression unwrapCast(ComparisonExpression expression)\n                         return TRUE_LITERAL;\n                     case LESS_THAN:\n                     case LESS_THAN_OR_EQUAL:\n+                        // this condition will never be true for PARTIAL injective types", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjM1Mg==", "bodyText": "same as above", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r418316352", "createdAt": "2020-04-30T22:07:09Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -339,6 +370,7 @@ private Expression unwrapCast(ComparisonExpression expression)\n                         return new ComparisonExpression(LESS_THAN, cast.getExpression(), literalEncoder.toExpression(literalInSourceType, sourceType));\n                     case GREATER_THAN:\n                     case GREATER_THAN_OR_EQUAL:\n+                        // this condition will never be true for PARTIAL injective types", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMTYzNg==", "bodyText": "Instead of adding a boolean, I would restructure the code so that there are different methods for different unwrapping routines. It would be easier to follow the flow:\nFULL --> out-of-bound unwrapping --> in-bound unwrapping --> give up\nPARTIAL --> analyse rightValue --> either out-of-bound unwrapping or in-bound unwrapping or NaN or give up", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r418321636", "createdAt": "2020-04-30T22:20:33Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -178,14 +181,41 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n-            if (!hasInjectiveImplicitCoercion(sourceType, targetType)) {\n+            ImplicitInjectiveCoercionAbility implicitInjectiveCoercionAbility = getImplicitInjectiveCoercionAbility(sourceType, targetType);\n+            boolean boundaryChecksAllowed = implicitInjectiveCoercionAbility == FULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Njg2MTg3", "url": "https://github.com/trinodb/trino/pull/3533#pullrequestreview-425686187", "createdAt": "2020-06-06T00:09:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1ODE4Njcx", "url": "https://github.com/trinodb/trino/pull/3533#pullrequestreview-425818671", "createdAt": "2020-06-07T13:09:18Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMzowOToxOFrOGgJZnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMzowOToxOFrOGgJZnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MTYyOQ==", "bodyText": "Cast value to primitive long and use toIntExact() instead of intValue().", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r436361629", "createdAt": "2020-06-07T13:09:18Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -351,14 +352,25 @@ private Expression unwrapCast(ComparisonExpression expression)\n             return new ComparisonExpression(operator, cast.getExpression(), literalEncoder.toExpression(literalInSourceType, sourceType));\n         }\n \n-        private boolean hasInjectiveImplicitCoercion(Type source, Type target)\n+        private boolean hasInjectiveImplicitCoercion(Type source, Type target, Object value)\n         {\n             if ((source.equals(BIGINT) && target.equals(DOUBLE)) ||\n                     (source.equals(BIGINT) && target.equals(REAL)) ||\n                     (source.equals(INTEGER) && target.equals(REAL))) {\n                 // Not every BIGINT fits in DOUBLE/REAL due to 64 bit vs 53-bit/23-bit mantissa. Similarly,\n                 // not every INTEGER fits in a REAL (32-bit vs 23-bit mantissa)\n-                return false;\n+                if (target.equals(DOUBLE)) {\n+                    double doubleValue = (double) value;\n+                    return doubleValue > Long.MAX_VALUE ||\n+                            doubleValue < Long.MIN_VALUE ||\n+                            (doubleValue > -1L << 53 && doubleValue < 1L << 53); // in (-2^53, 2^53), bigint follows an injective implicit coercion w.r.t double\n+                }\n+                else {\n+                    float realValue = intBitsToFloat(((Long) value).intValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjM2MTU4", "url": "https://github.com/trinodb/trino/pull/3533#pullrequestreview-427236158", "createdAt": "2020-06-09T14:53:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1MzozOVrOGhOFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1NDoxNVrOGhOHAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NjkxMw==", "bodyText": "BIGINT ?", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r437486913", "createdAt": "2020-06-09T14:53:39Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "diffHunk": "@@ -263,6 +299,30 @@ public void testLessThan()\n                 anyTree(\n                         filter(\"A IS NULL AND NULL\",\n                                 values(\"A\"))));\n+\n+        assertPlan(\n+                \"SELECT * FROM (VALUES BIGINT '0') t(a) WHERE a < DOUBLE '1'\",\n+                anyTree(\n+                        filter(\"A < BIGINT '1'\",\n+                                values(\"A\"))));\n+\n+        assertPlan(\n+                \"SELECT * FROM (VALUES BIGINT '0') t(a) WHERE a < DOUBLE '1.1'\",\n+                anyTree(\n+                        filter(\"A <= SMALLINT '1'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NzM2Mw==", "bodyText": "BIGINT ?", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r437487363", "createdAt": "2020-06-09T14:54:15Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "diffHunk": "@@ -263,6 +299,30 @@ public void testLessThan()\n                 anyTree(\n                         filter(\"A IS NULL AND NULL\",\n                                 values(\"A\"))));\n+\n+        assertPlan(\n+                \"SELECT * FROM (VALUES BIGINT '0') t(a) WHERE a < DOUBLE '1'\",\n+                anyTree(\n+                        filter(\"A < BIGINT '1'\",\n+                                values(\"A\"))));\n+\n+        assertPlan(\n+                \"SELECT * FROM (VALUES BIGINT '0') t(a) WHERE a < DOUBLE '1.1'\",\n+                anyTree(\n+                        filter(\"A <= SMALLINT '1'\",\n+                                values(\"A\"))));\n+\n+        assertPlan(\n+                \"SELECT * FROM (VALUES BIGINT '0') t(a) WHERE a < DOUBLE '1.9'\",\n+                anyTree(\n+                        filter(\"A < SMALLINT '2'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b04deceba1ad7ec4a49e296ca4a63473c01cee3", "author": {"user": {"login": "rohangarg", "name": "Rohan Garg"}}, "url": "https://github.com/trinodb/trino/commit/4b04deceba1ad7ec4a49e296ca4a63473c01cee3", "committedDate": "2020-06-21T15:44:34Z", "message": "Handle unwrapping of casts with partial injective coercion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "4b04deceba1ad7ec4a49e296ca4a63473c01cee3", "author": {"user": {"login": "rohangarg", "name": "Rohan Garg"}}, "url": "https://github.com/trinodb/trino/commit/4b04deceba1ad7ec4a49e296ca4a63473c01cee3", "committedDate": "2020-06-21T15:44:34Z", "message": "Handle unwrapping of casts with partial injective coercion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NDc3NjQ1", "url": "https://github.com/trinodb/trino/pull/3533#pullrequestreview-435477645", "createdAt": "2020-06-23T06:31:12Z", "commit": {"oid": "4b04deceba1ad7ec4a49e296ca4a63473c01cee3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjozMToxMlrOGnbCbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjozMToxMlrOGnbCbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5MDYzNw==", "bodyText": "Can you explain why we return true in these cases?", "url": "https://github.com/trinodb/trino/pull/3533#discussion_r443990637", "createdAt": "2020-06-23T06:31:12Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -382,14 +382,27 @@ private Expression unwrapCast(ComparisonExpression expression)\n             return new ComparisonExpression(operator, cast.getExpression(), literalEncoder.toExpression(literalInSourceType, sourceType));\n         }\n \n-        private boolean hasInjectiveImplicitCoercion(Type source, Type target)\n+        private boolean hasInjectiveImplicitCoercion(Type source, Type target, Object value)\n         {\n             if ((source.equals(BIGINT) && target.equals(DOUBLE)) ||\n                     (source.equals(BIGINT) && target.equals(REAL)) ||\n                     (source.equals(INTEGER) && target.equals(REAL))) {\n                 // Not every BIGINT fits in DOUBLE/REAL due to 64 bit vs 53-bit/23-bit mantissa. Similarly,\n                 // not every INTEGER fits in a REAL (32-bit vs 23-bit mantissa)\n-                return false;\n+                if (target.equals(DOUBLE)) {\n+                    double doubleValue = (double) value;\n+                    return doubleValue > Long.MAX_VALUE ||\n+                            doubleValue < Long.MIN_VALUE ||\n+                            Double.isNaN(doubleValue) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b04deceba1ad7ec4a49e296ca4a63473c01cee3"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1639, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}