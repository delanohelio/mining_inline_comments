{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NTU1ODg3", "number": 4768, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0MjoyM1rOEW-V8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowODo0N1rOEZca6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI1NTU0OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0MjoyM1rOG-gz4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozMzowNFrOHCPSMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjQ2NA==", "bodyText": "CachingHiveMetastore didn't work correctly with GRANT/REVOKE\n\nInstead of saying what was broken, please describe how it got improved. I would say:\nRespect GRANT and REVOKE CachingHiveMetastore", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468202464", "createdAt": "2020-08-10T21:42:23Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1MzcyMQ==", "bodyText": "will split into 3 commits a moment before merge, doing this on every fix is clumsy", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468353721", "createdAt": "2020-08-11T06:27:19Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjQ2NA=="}, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwOTYxNw==", "bodyText": "splitted into 2 commits", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472109617", "createdAt": "2020-08-18T11:33:04Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjQ2NA=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI1NzE2OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0MzowOVrOG-g07g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyNDo1MFrOHCPAjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjczNA==", "bodyText": "extend io.prestosql.testing.AbstractTestQueryFramework", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468202734", "createdAt": "2020-08-10T21:43:09Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1Mzk2Nw==", "bodyText": "I don't need any functionality from this base class\nalso as we discussed internally, reusing test code via inheritance does more harm than good", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468353967", "createdAt": "2020-08-11T06:28:02Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjczNA=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5MjcyNA==", "bodyText": "Just FYI there is io.prestosql.sql.query.QueryAssertions", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471492724", "createdAt": "2020-08-17T13:51:02Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjczNA=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwNTEwMA==", "bodyText": "I just need to know if query passes or fails in this test, so no assertion utility class is needed for me, just regular method calls", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472105100", "createdAt": "2020-08-18T11:24:50Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjczNA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI1ODA3OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0MzozMVrOG-g1fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjozMTo1NVrOG-qJPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjg3OA==", "bodyText": "AfterMethod(alwaysRun =true)", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468202878", "createdAt": "2020-08-10T21:43:31Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", Map.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NTM5MA==", "bodyText": "forgot\nthis is another reason why JUnit 5 is better, their @After method don't have such distinctions", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468355390", "createdAt": "2020-08-11T06:31:55Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", Map.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjg3OA=="}, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI2MTMxOnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0NDozOVrOG-g3XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0NDozOVrOG-g3XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMzM1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n          \n          \n            \n                        .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());\n          \n          \n            \n                private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n          \n          \n            \n                        .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n          \n          \n            \n                        .build());", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468203357", "createdAt": "2020-08-10T21:44:39Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI2Mjc1OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0NTowMlrOG-g4KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0NTowMlrOG-g4KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMzU2MQ==", "bodyText": "ImmutableMap", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468203561", "createdAt": "2020-08-10T21:45:02Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", Map.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI2NTQ2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0NjowNlrOG-g5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTo1Mjo0OFrOHCP6CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMzk3OQ==", "bodyText": "Please fix file based metastore in separate commit", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468203979", "createdAt": "2020-08-10T21:46:06Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -1054,9 +1056,11 @@ public synchronized void grantTablePrivileges(String databaseName, String tableN\n     public synchronized void revokeTablePrivileges(String databaseName, String tableName, String tableOwner, HivePrincipal grantee, Set<HivePrivilegeInfo> privileges)\n     {\n         Set<HivePrivilegeInfo> currentPrivileges = listTablePrivileges(databaseName, tableName, tableOwner, Optional.of(grantee));\n-        currentPrivileges.removeAll(privileges);\n+        Set<HivePrivilegeInfo> privilegesToRemove = privileges.stream()\n+                .map(p -> new HivePrivilegeInfo(p.getHivePrivilege(), p.isGrantOption(), p.getGrantor(), grantee))\n+                .collect(toUnmodifiableSet());\n \n-        setTablePrivileges(grantee, databaseName, tableName, currentPrivileges);\n+        setTablePrivileges(grantee, databaseName, tableName, Sets.difference(currentPrivileges, privilegesToRemove));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1MzQzMQ==", "bodyText": "will split into 3 commits a moment before merge, doing this on every fix is clumsy", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468353431", "createdAt": "2020-08-11T06:26:36Z", "author": {"login": "iirekm"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -1054,9 +1056,11 @@ public synchronized void grantTablePrivileges(String databaseName, String tableN\n     public synchronized void revokeTablePrivileges(String databaseName, String tableName, String tableOwner, HivePrincipal grantee, Set<HivePrivilegeInfo> privileges)\n     {\n         Set<HivePrivilegeInfo> currentPrivileges = listTablePrivileges(databaseName, tableName, tableOwner, Optional.of(grantee));\n-        currentPrivileges.removeAll(privileges);\n+        Set<HivePrivilegeInfo> privilegesToRemove = privileges.stream()\n+                .map(p -> new HivePrivilegeInfo(p.getHivePrivilege(), p.isGrantOption(), p.getGrantor(), grantee))\n+                .collect(toUnmodifiableSet());\n \n-        setTablePrivileges(grantee, databaseName, tableName, currentPrivileges);\n+        setTablePrivileges(grantee, databaseName, tableName, Sets.difference(currentPrivileges, privilegesToRemove));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMzk3OQ=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5MTc0Mw==", "bodyText": "will split into 3 commits a moment before merge\n\nA person who merge and so accepts the code has to see the code in a form it is going to be merged.\nAnyway, I think it could stay as it is now. Single commit is not perfect here, but it is good enough.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471491743", "createdAt": "2020-08-17T13:49:32Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -1054,9 +1056,11 @@ public synchronized void grantTablePrivileges(String databaseName, String tableN\n     public synchronized void revokeTablePrivileges(String databaseName, String tableName, String tableOwner, HivePrincipal grantee, Set<HivePrivilegeInfo> privileges)\n     {\n         Set<HivePrivilegeInfo> currentPrivileges = listTablePrivileges(databaseName, tableName, tableOwner, Optional.of(grantee));\n-        currentPrivileges.removeAll(privileges);\n+        Set<HivePrivilegeInfo> privilegesToRemove = privileges.stream()\n+                .map(p -> new HivePrivilegeInfo(p.getHivePrivilege(), p.isGrantOption(), p.getGrantor(), grantee))\n+                .collect(toUnmodifiableSet());\n \n-        setTablePrivileges(grantee, databaseName, tableName, currentPrivileges);\n+        setTablePrivileges(grantee, databaseName, tableName, Sets.difference(currentPrivileges, privilegesToRemove));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMzk3OQ=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExOTgxNg==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472119816", "createdAt": "2020-08-18T11:52:48Z", "author": {"login": "iirekm"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -1054,9 +1056,11 @@ public synchronized void grantTablePrivileges(String databaseName, String tableN\n     public synchronized void revokeTablePrivileges(String databaseName, String tableName, String tableOwner, HivePrincipal grantee, Set<HivePrivilegeInfo> privileges)\n     {\n         Set<HivePrivilegeInfo> currentPrivileges = listTablePrivileges(databaseName, tableName, tableOwner, Optional.of(grantee));\n-        currentPrivileges.removeAll(privileges);\n+        Set<HivePrivilegeInfo> privilegesToRemove = privileges.stream()\n+                .map(p -> new HivePrivilegeInfo(p.getHivePrivilege(), p.isGrantOption(), p.getGrantor(), grantee))\n+                .collect(toUnmodifiableSet());\n \n-        setTablePrivileges(grantee, databaseName, tableName, currentPrivileges);\n+        setTablePrivileges(grantee, databaseName, tableName, Sets.difference(currentPrivileges, privilegesToRemove));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMzk3OQ=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI2Nzg5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0NzowMFrOG-g7PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzo1NzowMlrOG_WFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDM0OQ==", "bodyText": "This does not look like related to GRANT/REVOKE. Please extract this as separate commit.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468204349", "createdAt": "2020-08-10T21:47:00Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -250,6 +250,7 @@ public void flushCache()\n         tableStatisticsCache.invalidateAll();\n         partitionStatisticsCache.invalidateAll();\n         rolesCache.invalidateAll();\n+        roleGrantsCache.invalidateAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1MzYwNw==", "bodyText": "will split into 3 commits a moment before merge, doing this on every fix is clumsy", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468353607", "createdAt": "2020-08-11T06:27:01Z", "author": {"login": "iirekm"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -250,6 +250,7 @@ public void flushCache()\n         tableStatisticsCache.invalidateAll();\n         partitionStatisticsCache.invalidateAll();\n         rolesCache.invalidateAll();\n+        roleGrantsCache.invalidateAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDM0OQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1ODE4NQ==", "bodyText": "And what about: grantedPrincipalsCache (my bad), and grantedPrincipalsCache?", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468358185", "createdAt": "2020-08-11T06:39:05Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -250,6 +250,7 @@ public void flushCache()\n         tableStatisticsCache.invalidateAll();\n         partitionStatisticsCache.invalidateAll();\n         rolesCache.invalidateAll();\n+        roleGrantsCache.invalidateAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDM0OQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3NTMwMQ==", "bodyText": "in fact 4 caches weren't cleaned here :-(\nI added cleaning in a loop to solve this once and for all", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r469075301", "createdAt": "2020-08-12T07:57:02Z", "author": {"login": "iirekm"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -250,6 +250,7 @@ public void flushCache()\n         tableStatisticsCache.invalidateAll();\n         partitionStatisticsCache.invalidateAll();\n         rolesCache.invalidateAll();\n+        roleGrantsCache.invalidateAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDM0OQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI2ODU5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0NzoxNVrOG-g7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTo1MjozNFrOHCP5kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDQ2MQ==", "bodyText": "what about grant and revoke for roles?", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468204461", "createdAt": "2020-08-10T21:47:15Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -888,6 +890,7 @@ public void revokeTablePrivileges(String databaseName, String tableName, String\n         }\n         finally {\n             tablePrivilegesCache.invalidate(new UserTableKey(Optional.of(grantee), databaseName, tableName, tableOwner));\n+            tablePrivilegesCache.invalidate(new UserTableKey(Optional.empty(), databaseName, tableName, tableOwner));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1MzU0NA==", "bodyText": "works, see the test", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468353544", "createdAt": "2020-08-11T06:26:51Z", "author": {"login": "iirekm"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -888,6 +890,7 @@ public void revokeTablePrivileges(String databaseName, String tableName, String\n         }\n         finally {\n             tablePrivilegesCache.invalidate(new UserTableKey(Optional.of(grantee), databaseName, tableName, tableOwner));\n+            tablePrivilegesCache.invalidate(new UserTableKey(Optional.empty(), databaseName, tableName, tableOwner));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDQ2MQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1OTg0MQ==", "bodyText": "This seems to be the crux of the change. It would be cool @iirekm, if that could be explained in the description - so we do not have guess from the code what the goal is :)", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468359841", "createdAt": "2020-08-11T06:43:18Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -888,6 +890,7 @@ public void revokeTablePrivileges(String databaseName, String tableName, String\n         }\n         finally {\n             tablePrivilegesCache.invalidate(new UserTableKey(Optional.of(grantee), databaseName, tableName, tableOwner));\n+            tablePrivilegesCache.invalidate(new UserTableKey(Optional.empty(), databaseName, tableName, tableOwner));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDQ2MQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MzE0NQ==", "bodyText": "what you mean by \"explained in description\" - a comment?\nthe reason of this strange bahavior is that sometimes cache.get is called Optional.of(grantee), sometimes with Optional.empty(), for me this is a bigger issue for another task to simplify and refactory this code", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468363145", "createdAt": "2020-08-11T06:51:20Z", "author": {"login": "iirekm"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -888,6 +890,7 @@ public void revokeTablePrivileges(String databaseName, String tableName, String\n         }\n         finally {\n             tablePrivilegesCache.invalidate(new UserTableKey(Optional.of(grantee), databaseName, tableName, tableOwner));\n+            tablePrivilegesCache.invalidate(new UserTableKey(Optional.empty(), databaseName, tableName, tableOwner));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDQ2MQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjUxMw==", "bodyText": "Thanks.\nI meant to update the description of this PR with what you just said. But this comment explains it too.\nStrange, though, what does a get without a specific grantee even mean?", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r469026513", "createdAt": "2020-08-12T06:11:31Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -888,6 +890,7 @@ public void revokeTablePrivileges(String databaseName, String tableName, String\n         }\n         finally {\n             tablePrivilegesCache.invalidate(new UserTableKey(Optional.of(grantee), databaseName, tableName, tableOwner));\n+            tablePrivilegesCache.invalidate(new UserTableKey(Optional.empty(), databaseName, tableName, tableOwner));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDQ2MQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4ODIyMQ==", "bodyText": "listTablePrivileges is called with Optional.empty() for principal when we want to access all privileges. It is set when when we want to access specific user privileges.\nI think adding a comment to code could be nice here.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471488221", "createdAt": "2020-08-17T13:44:19Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -888,6 +890,7 @@ public void revokeTablePrivileges(String databaseName, String tableName, String\n         }\n         finally {\n             tablePrivilegesCache.invalidate(new UserTableKey(Optional.of(grantee), databaseName, tableName, tableOwner));\n+            tablePrivilegesCache.invalidate(new UserTableKey(Optional.empty(), databaseName, tableName, tableOwner));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDQ2MQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExOTY5Ng==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472119696", "createdAt": "2020-08-18T11:52:34Z", "author": {"login": "iirekm"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -888,6 +890,7 @@ public void revokeTablePrivileges(String databaseName, String tableName, String\n         }\n         finally {\n             tablePrivilegesCache.invalidate(new UserTableKey(Optional.of(grantee), databaseName, tableName, tableOwner));\n+            tablePrivilegesCache.invalidate(new UserTableKey(Optional.empty(), databaseName, tableName, tableOwner));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNDQ2MQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI3NjIyOnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0OTo1NFrOG-hAJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTo0NDowNFrOHCPnWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNTYwNg==", "bodyText": "It is strange that you GRANT something that is created in test (line 112).", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468205606", "createdAt": "2020-08-10T21:49:54Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", Map.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();\n+    }\n+\n+    static Session getTestSession(Identity identity)\n+    {\n+        return testSessionBuilder()\n+                .setCatalog(CATALOG)\n+                .setSchema(SCHEMA)\n+                .setIdentity(identity)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testCacheRefreshOnGrantAndRevoke()\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+        queryRunner.execute(\"GRANT SELECT ON test TO \" + ALICE_NAME);\n+        queryRunner.execute(ALICE, \"SELECT * FROM test\");\n+        queryRunner.execute(\"REVOKE SELECT ON test FROM \" + ALICE_NAME);\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+    }\n+\n+    @DataProvider\n+    private Object[][] testCacheRefreshOnRoleGrantAndRevokeParams()\n+    {\n+        String grantSelectStatement = \"GRANT SELECT ON test TO ROLE test_role\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExNTAzNA==", "bodyText": "test table is created in @BeforeMethod, so it's quite reasonable\nalso I wouldn't be surprised if an implementation of \"GRANT\" would rely not on particular object but on object name, in that case it could even work before creating table", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472115034", "createdAt": "2020-08-18T11:44:04Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", Map.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();\n+    }\n+\n+    static Session getTestSession(Identity identity)\n+    {\n+        return testSessionBuilder()\n+                .setCatalog(CATALOG)\n+                .setSchema(SCHEMA)\n+                .setIdentity(identity)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testCacheRefreshOnGrantAndRevoke()\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+        queryRunner.execute(\"GRANT SELECT ON test TO \" + ALICE_NAME);\n+        queryRunner.execute(ALICE, \"SELECT * FROM test\");\n+        queryRunner.execute(\"REVOKE SELECT ON test FROM \" + ALICE_NAME);\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+    }\n+\n+    @DataProvider\n+    private Object[][] testCacheRefreshOnRoleGrantAndRevokeParams()\n+    {\n+        String grantSelectStatement = \"GRANT SELECT ON test TO ROLE test_role\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNTYwNg=="}, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI3OTA5OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1MDo0NFrOG-hBwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjozOTowN1rOG-qUOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNjAxOA==", "bodyText": "I would test GRANT table privileges and GRANT role independently. Now it is not known what caused cache to flush. We need to make sure that cache is flushed properly for any of these.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468206018", "createdAt": "2020-08-10T21:50:44Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", Map.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();\n+    }\n+\n+    static Session getTestSession(Identity identity)\n+    {\n+        return testSessionBuilder()\n+                .setCatalog(CATALOG)\n+                .setSchema(SCHEMA)\n+                .setIdentity(identity)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testCacheRefreshOnGrantAndRevoke()\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+        queryRunner.execute(\"GRANT SELECT ON test TO \" + ALICE_NAME);\n+        queryRunner.execute(ALICE, \"SELECT * FROM test\");\n+        queryRunner.execute(\"REVOKE SELECT ON test FROM \" + ALICE_NAME);\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+    }\n+\n+    @DataProvider\n+    private Object[][] testCacheRefreshOnRoleGrantAndRevokeParams()\n+    {\n+        String grantSelectStatement = \"GRANT SELECT ON test TO ROLE test_role\";\n+        String grantRoleStatement = \"GRANT test_role TO \" + ALICE_NAME;\n+        List<List<String>> grantRoleStatements = ImmutableList.of(\n+                ImmutableList.of(grantSelectStatement, grantRoleStatement),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1ODIwMQ==", "bodyText": "why independently? those two steps are necessary for user to get privileges, they must be together; and for GRANT SELEC ON ... to user is separate test", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468358201", "createdAt": "2020-08-11T06:39:07Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", Map.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();\n+    }\n+\n+    static Session getTestSession(Identity identity)\n+    {\n+        return testSessionBuilder()\n+                .setCatalog(CATALOG)\n+                .setSchema(SCHEMA)\n+                .setIdentity(identity)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testCacheRefreshOnGrantAndRevoke()\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+        queryRunner.execute(\"GRANT SELECT ON test TO \" + ALICE_NAME);\n+        queryRunner.execute(ALICE, \"SELECT * FROM test\");\n+        queryRunner.execute(\"REVOKE SELECT ON test FROM \" + ALICE_NAME);\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+    }\n+\n+    @DataProvider\n+    private Object[][] testCacheRefreshOnRoleGrantAndRevokeParams()\n+    {\n+        String grantSelectStatement = \"GRANT SELECT ON test TO ROLE test_role\";\n+        String grantRoleStatement = \"GRANT test_role TO \" + ALICE_NAME;\n+        List<List<String>> grantRoleStatements = ImmutableList.of(\n+                ImmutableList.of(grantSelectStatement, grantRoleStatement),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNjAxOA=="}, "originalCommit": null, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI3OTkwOnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1MTowMlrOG-hCPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1MTowMlrOG-hCPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNjE0Mw==", "bodyText": "Let's define data provider under the usage.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468206143", "createdAt": "2020-08-10T21:51:02Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(new Identity.Builder(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\"))).build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", Map.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();\n+    }\n+\n+    static Session getTestSession(Identity identity)\n+    {\n+        return testSessionBuilder()\n+                .setCatalog(CATALOG)\n+                .setSchema(SCHEMA)\n+                .setIdentity(identity)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testCacheRefreshOnGrantAndRevoke()\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+        queryRunner.execute(\"GRANT SELECT ON test TO \" + ALICE_NAME);\n+        queryRunner.execute(ALICE, \"SELECT * FROM test\");\n+        queryRunner.execute(\"REVOKE SELECT ON test FROM \" + ALICE_NAME);\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+    }\n+\n+    @DataProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODAzOTg0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDozMDo0M1rOG-6t_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzozOTo0NFrOHBpLQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNjk0MA==", "bodyText": "I don\u2019t see why we need to duplicate the list of caches just to invalidate them. The old code seems fine. This change is unrelated to fixing grant/revoke, so please make a separate PR and we can discuss it independently.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468626940", "createdAt": "2020-08-11T14:30:43Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -218,38 +230,33 @@ public PartitionStatistics load(WithIdentity<HivePartitionName> key)\n                         return loadPartitionsByNames(partitionNames);\n                     }\n                 }, executor));\n+        caches.add(partitionCache);\n \n         tablePrivilegesCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(key -> loadTablePrivileges(key.getDatabase(), key.getTable(), key.getOwner(), key.getPrincipal())), executor));\n+        caches.add(tablePrivilegesCache);\n \n         rolesCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadRoles), executor));\n+        caches.add(rolesCache);\n \n         roleGrantsCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadRoleGrants), executor));\n+        caches.add(roleGrantsCache);\n \n         grantedPrincipalsCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadPrincipals), executor));\n+        caches.add(grantedPrincipalsCache);\n \n         configValuesCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadConfigValue), executor));\n+        caches.add(configValuesCache);\n     }\n \n     @Managed\n     public void flushCache()\n     {\n-        databaseNamesCache.invalidateAll();\n-        tableNamesCache.invalidateAll();\n-        viewNamesCache.invalidateAll();\n-        partitionNamesCache.invalidateAll();\n-        databaseCache.invalidateAll();\n-        tableCache.invalidateAll();\n-        partitionCache.invalidateAll();\n-        partitionFilterCache.invalidateAll();\n-        tablePrivilegesCache.invalidateAll();\n-        tableStatisticsCache.invalidateAll();\n-        partitionStatisticsCache.invalidateAll();\n-        rolesCache.invalidateAll();\n+        caches.forEach(Cache::invalidateAll);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyOTE4Nw==", "bodyText": "The old code was buggy, 4 caches weren't cleaned, so I added this to prevent such things in the future. Now the title of this pr will be different.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r468629187", "createdAt": "2020-08-11T14:33:56Z", "author": {"login": "iirekm"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -218,38 +230,33 @@ public PartitionStatistics load(WithIdentity<HivePartitionName> key)\n                         return loadPartitionsByNames(partitionNames);\n                     }\n                 }, executor));\n+        caches.add(partitionCache);\n \n         tablePrivilegesCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(key -> loadTablePrivileges(key.getDatabase(), key.getTable(), key.getOwner(), key.getPrincipal())), executor));\n+        caches.add(tablePrivilegesCache);\n \n         rolesCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadRoles), executor));\n+        caches.add(rolesCache);\n \n         roleGrantsCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadRoleGrants), executor));\n+        caches.add(roleGrantsCache);\n \n         grantedPrincipalsCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadPrincipals), executor));\n+        caches.add(grantedPrincipalsCache);\n \n         configValuesCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadConfigValue), executor));\n+        caches.add(configValuesCache);\n     }\n \n     @Managed\n     public void flushCache()\n     {\n-        databaseNamesCache.invalidateAll();\n-        tableNamesCache.invalidateAll();\n-        viewNamesCache.invalidateAll();\n-        partitionNamesCache.invalidateAll();\n-        databaseCache.invalidateAll();\n-        tableCache.invalidateAll();\n-        partitionCache.invalidateAll();\n-        partitionFilterCache.invalidateAll();\n-        tablePrivilegesCache.invalidateAll();\n-        tableStatisticsCache.invalidateAll();\n-        partitionStatisticsCache.invalidateAll();\n-        rolesCache.invalidateAll();\n+        caches.forEach(Cache::invalidateAll);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNjk0MA=="}, "originalCommit": null, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NTI0OA==", "bodyText": "now it is buggy in different way. Still someone might forget to add a cache to caches. Please undo the refactor or please make a separate PR and we can discuss it", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471485248", "createdAt": "2020-08-17T13:39:44Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastore.java", "diffHunk": "@@ -218,38 +230,33 @@ public PartitionStatistics load(WithIdentity<HivePartitionName> key)\n                         return loadPartitionsByNames(partitionNames);\n                     }\n                 }, executor));\n+        caches.add(partitionCache);\n \n         tablePrivilegesCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(key -> loadTablePrivileges(key.getDatabase(), key.getTable(), key.getOwner(), key.getPrincipal())), executor));\n+        caches.add(tablePrivilegesCache);\n \n         rolesCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadRoles), executor));\n+        caches.add(rolesCache);\n \n         roleGrantsCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadRoleGrants), executor));\n+        caches.add(roleGrantsCache);\n \n         grantedPrincipalsCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadPrincipals), executor));\n+        caches.add(grantedPrincipalsCache);\n \n         configValuesCache = newCacheBuilder(expiresAfterWriteMillis, refreshMills, maximumSize, statsRecording)\n                 .build(asyncReloading(CacheLoader.from(this::loadConfigValue), executor));\n+        caches.add(configValuesCache);\n     }\n \n     @Managed\n     public void flushCache()\n     {\n-        databaseNamesCache.invalidateAll();\n-        tableNamesCache.invalidateAll();\n-        viewNamesCache.invalidateAll();\n-        partitionNamesCache.invalidateAll();\n-        databaseCache.invalidateAll();\n-        tableCache.invalidateAll();\n-        partitionCache.invalidateAll();\n-        partitionFilterCache.invalidateAll();\n-        tablePrivilegesCache.invalidateAll();\n-        tableStatisticsCache.invalidateAll();\n-        partitionStatisticsCache.invalidateAll();\n-        rolesCache.invalidateAll();\n+        caches.forEach(Cache::invalidateAll);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNjk0MA=="}, "originalCommit": null, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzAwNzU1OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzozNjowOVrOHBpCRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozNjoyOVrOHCPYTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4Mjk0OA==", "bodyText": "static import,\ncloser for single usage is an overkill to me.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471482948", "createdAt": "2020-08-17T13:36:09Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMTE4Mw==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472111183", "createdAt": "2020-08-18T11:36:29Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4Mjk0OA=="}, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzA1NTExOnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo0Nzo0MVrOHBpfbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozMjo1OVrOHCPSAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5MDQxMg==", "bodyText": "Commit message:\nAdd missing cache invalidate calls to CachingHiveMetastore is implementation detail, however the more important aspect is user visiable behavior change. Also please do not use - in commit message title.\nI would write:\nInvalidate Hive metastore cache on GRANT/REVOKE\n\n- Add missing cache invalidate calls to CachingHiveMetastore\n- Fix REVOKE in FileHiveMetastore", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471490412", "createdAt": "2020-08-17T13:47:41Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwOTU2OA==", "bodyText": "splitted into 2 commits", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472109568", "createdAt": "2020-08-18T11:32:59Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5MDQxMg=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzA4MDY0OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo1MzozN1rOHBpu0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozNDo0MVrOHCPU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDM1NQ==", "bodyText": "Use io.prestosql.plugin.hive.HiveQueryRunner#builder then you don't have to play with metastore directory.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471494355", "createdAt": "2020-08-17T13:53:37Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMDMxNA==", "bodyText": "my setup is completely different from the offering of this builder, code reuse in this case makes no sense", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472110314", "createdAt": "2020-08-18T11:34:41Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDM1NQ=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzA4MTY4OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo1Mzo1MVrOHBpvdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTo0MDowNlrOHCPfyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDUxNw==", "bodyText": "you need to close query runner here.", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471494517", "createdAt": "2020-08-17T13:53:51Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", ImmutableMap.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMzA5OA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472113098", "createdAt": "2020-08-18T11:40:06Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", ImmutableMap.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDUxNw=="}, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzA4Mzc2OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo1NDoyNFrOHBpwwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTo0MDoyM1rOHCPgYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDg1MA==", "bodyText": "private static", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471494850", "createdAt": "2020-08-17T13:54:24Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", ImmutableMap.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();\n+    }\n+\n+    static Session getTestSession(Identity identity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMzI1MA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472113250", "createdAt": "2020-08-18T11:40:23Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", ImmutableMap.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();\n+    }\n+\n+    static Session getTestSession(Identity identity)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDg1MA=="}, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzA4NDA4OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo1NDoyOVrOHBpw6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozOTo0NVrOHCPfJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDg5MQ==", "bodyText": "public", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471494891", "createdAt": "2020-08-17T13:54:29Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", ImmutableMap.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    void cleanUp()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMjkzMw==", "bodyText": "added for convention, it matters on JUnit, but it doesn't matter in testng", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472112933", "createdAt": "2020-08-18T11:39:45Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", ImmutableMap.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    void cleanUp()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDg5MQ=="}, "originalCommit": null, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzA4Njc4OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo1NTowM1rOHBpyZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTo0ODowNVrOHCPwKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NTI3MQ==", "bodyText": "com.google.common.collect.Sets#cartesianProduct(java.util.Set<? extends B>...)?", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r471495271", "createdAt": "2020-08-17T13:55:03Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", ImmutableMap.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();\n+    }\n+\n+    static Session getTestSession(Identity identity)\n+    {\n+        return testSessionBuilder()\n+                .setCatalog(CATALOG)\n+                .setSchema(SCHEMA)\n+                .setIdentity(identity)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testCacheRefreshOnGrantAndRevoke()\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+        queryRunner.execute(\"GRANT SELECT ON test TO \" + ALICE_NAME);\n+        queryRunner.execute(ALICE, \"SELECT * FROM test\");\n+        queryRunner.execute(\"REVOKE SELECT ON test FROM \" + ALICE_NAME);\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+    }\n+\n+    @Test(dataProvider = \"testCacheRefreshOnRoleGrantAndRevokeParams\")\n+    public void testCacheRefreshOnRoleGrantAndRevoke(List<String> grantRoleStatements, String revokeRoleStatement)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+        queryRunner.execute(\"CREATE ROLE test_role\");\n+        grantRoleStatements.forEach(queryRunner::execute);\n+        queryRunner.execute(ALICE, \"SELECT * FROM test\");\n+        queryRunner.execute(revokeRoleStatement);\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+    }\n+\n+    @DataProvider\n+    private Object[][] testCacheRefreshOnRoleGrantAndRevokeParams()\n+    {\n+        String grantSelectStatement = \"GRANT SELECT ON test TO ROLE test_role\";\n+        String grantRoleStatement = \"GRANT test_role TO \" + ALICE_NAME;\n+        List<List<String>> grantRoleStatements = ImmutableList.of(\n+                ImmutableList.of(grantSelectStatement, grantRoleStatement),\n+                ImmutableList.of(grantRoleStatement, grantSelectStatement));\n+        List<String> revokeRoleStatements = ImmutableList.of(\n+                \"DROP ROLE test_role\",\n+                \"REVOKE SELECT ON test FROM ROLE test_role\",\n+                \"REVOKE test_role FROM \" + ALICE_NAME);\n+        return grantRoleStatements.stream()\n+                .flatMap(arg1 -> revokeRoleStatements.stream().map(arg2 -> new Object[] {arg1, arg2}))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExNzI5MA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472117290", "createdAt": "2020-08-18T11:48:05Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Closer;\n+import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer\n+@Test(singleThreaded = true)\n+public class TestCachingHiveMetastoreWithQueryRunner\n+{\n+    private static final String CATALOG = \"test\";\n+    private static final String SCHEMA = \"test\";\n+    private static final Session ADMIN = getTestSession(Identity.forUser(\"admin\")\n+            .withRole(CATALOG, new SelectedRole(ROLE, Optional.of(\"admin\")))\n+            .build());\n+    private static final String ALICE_NAME = \"alice\";\n+    private static final Session ALICE = getTestSession(new Identity.Builder(ALICE_NAME).build());\n+\n+    private DistributedQueryRunner queryRunner;\n+    private final Closer closer = Closer.create();\n+\n+    @BeforeMethod\n+    public void createQueryRunner()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner\n+                .builder(ADMIN)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new HiveHadoop2Plugin());\n+        File tmp = Files.createTempDir();\n+        closer.register(() -> MoreFiles.deleteRecursively(tmp.toPath(), ALLOW_INSECURE));\n+        queryRunner.createCatalog(CATALOG, \"hive-hadoop2\", ImmutableMap.of(\n+                \"hive.metastore\", \"file\",\n+                \"hive.metastore.catalog.dir\", tmp.toURI().toString(),\n+                \"hive.security\", \"sql-standard\",\n+                \"hive.metastore-cache-ttl\", \"60m\",\n+                \"hive.metastore-refresh-interval\", \"10m\"));\n+        queryRunner.execute(ADMIN, \"CREATE SCHEMA \" + SCHEMA);\n+        queryRunner.execute(\"CREATE TABLE test (test INT)\");\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    void cleanUp()\n+            throws IOException\n+    {\n+        closer.close();\n+    }\n+\n+    static Session getTestSession(Identity identity)\n+    {\n+        return testSessionBuilder()\n+                .setCatalog(CATALOG)\n+                .setSchema(SCHEMA)\n+                .setIdentity(identity)\n+                .build();\n+    }\n+\n+    @Test\n+    public void testCacheRefreshOnGrantAndRevoke()\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+        queryRunner.execute(\"GRANT SELECT ON test TO \" + ALICE_NAME);\n+        queryRunner.execute(ALICE, \"SELECT * FROM test\");\n+        queryRunner.execute(\"REVOKE SELECT ON test FROM \" + ALICE_NAME);\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+    }\n+\n+    @Test(dataProvider = \"testCacheRefreshOnRoleGrantAndRevokeParams\")\n+    public void testCacheRefreshOnRoleGrantAndRevoke(List<String> grantRoleStatements, String revokeRoleStatement)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+        queryRunner.execute(\"CREATE ROLE test_role\");\n+        grantRoleStatements.forEach(queryRunner::execute);\n+        queryRunner.execute(ALICE, \"SELECT * FROM test\");\n+        queryRunner.execute(revokeRoleStatement);\n+        assertThatThrownBy(() -> queryRunner.execute(ALICE, \"SELECT * FROM test\"))\n+                .hasMessageContaining(\"Access Denied\");\n+    }\n+\n+    @DataProvider\n+    private Object[][] testCacheRefreshOnRoleGrantAndRevokeParams()\n+    {\n+        String grantSelectStatement = \"GRANT SELECT ON test TO ROLE test_role\";\n+        String grantRoleStatement = \"GRANT test_role TO \" + ALICE_NAME;\n+        List<List<String>> grantRoleStatements = ImmutableList.of(\n+                ImmutableList.of(grantSelectStatement, grantRoleStatement),\n+                ImmutableList.of(grantRoleStatement, grantSelectStatement));\n+        List<String> revokeRoleStatements = ImmutableList.of(\n+                \"DROP ROLE test_role\",\n+                \"REVOKE SELECT ON test FROM ROLE test_role\",\n+                \"REVOKE test_role FROM \" + ALICE_NAME);\n+        return grantRoleStatements.stream()\n+                .flatMap(arg1 -> revokeRoleStatements.stream().map(arg2 -> new Object[] {arg1, arg2}))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NTI3MQ=="}, "originalCommit": null, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTE1NDk5OnYy", "diffSide": "RIGHT", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowODo0N1rOHCQcTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTowMTozM1rOHCYy9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyODU5MA==", "bodyText": "This is no longer needed", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472128590", "createdAt": "2020-08-18T12:08:47Z", "author": {"login": "kokosing"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.collect.Lists.cartesianProduct;\n+import static com.google.common.io.Files.createTempDir;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2NTQ2MQ==", "bodyText": "needed - other @Beta stuff from Guava used", "url": "https://github.com/trinodb/trino/pull/4768#discussion_r472265461", "createdAt": "2020-08-18T15:01:33Z", "author": {"login": "iirekm"}, "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestCachingHiveMetastoreWithQueryRunner.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.hive.HiveHadoop2Plugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.SelectedRole;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.collect.Lists.cartesianProduct;\n+import static com.google.common.io.Files.createTempDir;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.spi.security.SelectedRole.Type.ROLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")   // for Closer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyODU5MA=="}, "originalCommit": null, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3422, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}