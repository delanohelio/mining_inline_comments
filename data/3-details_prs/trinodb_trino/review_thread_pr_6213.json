{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDg0MzY4", "number": 6213, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNTozMlrOFB_aFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozMTo0MFrOFB_zQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjMxNzY3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNTozMlrOIA7B2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNTozMlrOIA7B2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzODA0MA==", "bodyText": "The canonical way is HiveStorageFormat.values()", "url": "https://github.com/trinodb/trino/pull/6213#discussion_r537838040", "createdAt": "2020-12-07T21:15:32Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "diffHunk": "@@ -308,11 +309,14 @@ private static void configureCompressionCodecs(JobConf jobConf)\n \n             Class<? extends InputFormat<?, ?>> inputFormatClass = getInputFormatClass(jobConf, inputFormatName);\n             if (symlinkTarget && inputFormatClass == SymlinkTextInputFormat.class) {\n-                // Symlink targets are assumed to be TEXTFILE unless serde indicates otherwise.\n-                inputFormatClass = TextInputFormat.class;\n-                if (isDeserializerClass(schema, AvroSerDe.class)) {\n-                    inputFormatClass = AvroContainerInputFormat.class;\n+                String serDe = getDeserializerClassName(schema);\n+                for (HiveStorageFormat format : EnumSet.allOf(HiveStorageFormat.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjMyNDk3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNzoxMlrOIA7F-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNzoxMlrOIA7F-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzOTA5OA==", "bodyText": "No need to qualify method call", "url": "https://github.com/trinodb/trino/pull/6213#discussion_r537839098", "createdAt": "2020-12-07T21:17:12Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "diffHunk": "@@ -308,11 +309,14 @@ private static void configureCompressionCodecs(JobConf jobConf)\n \n             Class<? extends InputFormat<?, ?>> inputFormatClass = getInputFormatClass(jobConf, inputFormatName);\n             if (symlinkTarget && inputFormatClass == SymlinkTextInputFormat.class) {\n-                // Symlink targets are assumed to be TEXTFILE unless serde indicates otherwise.\n-                inputFormatClass = TextInputFormat.class;\n-                if (isDeserializerClass(schema, AvroSerDe.class)) {\n-                    inputFormatClass = AvroContainerInputFormat.class;\n+                String serDe = getDeserializerClassName(schema);\n+                for (HiveStorageFormat format : EnumSet.allOf(HiveStorageFormat.class)) {\n+                    if (serDe.equals(format.getSerDe())) {\n+                        inputFormatClass = HiveUtil.getInputFormatClass(jobConf, format.getInputFormat());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM1MTQ2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyMzo1NFrOIA7Veg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyMzo1NFrOIA7Veg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MzA2Ng==", "bodyText": "INVALID_TABLE_PROPERTY is for when the user is creating a table in Presto and specifies an invalid table property. We have HIVE_UNSUPPORTED_FORMAT which seems to exactly match this error case. Also, it's better to put the variable part of the error message at the end, so that the fixed part of the message is more searchable.\nHow about\nthrow new PrestoException(HIVE_UNSUPPORTED_FORMAT, \"Unknown SerDe for SymlinkTextInputFormat: \" + serDe);", "url": "https://github.com/trinodb/trino/pull/6213#discussion_r537843066", "createdAt": "2020-12-07T21:23:54Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "diffHunk": "@@ -308,11 +309,14 @@ private static void configureCompressionCodecs(JobConf jobConf)\n \n             Class<? extends InputFormat<?, ?>> inputFormatClass = getInputFormatClass(jobConf, inputFormatName);\n             if (symlinkTarget && inputFormatClass == SymlinkTextInputFormat.class) {\n-                // Symlink targets are assumed to be TEXTFILE unless serde indicates otherwise.\n-                inputFormatClass = TextInputFormat.class;\n-                if (isDeserializerClass(schema, AvroSerDe.class)) {\n-                    inputFormatClass = AvroContainerInputFormat.class;\n+                String serDe = getDeserializerClassName(schema);\n+                for (HiveStorageFormat format : EnumSet.allOf(HiveStorageFormat.class)) {\n+                    if (serDe.equals(format.getSerDe())) {\n+                        inputFormatClass = HiveUtil.getInputFormatClass(jobConf, format.getInputFormat());\n+                        return ReflectionUtils.newInstance(inputFormatClass, jobConf);\n+                    }\n                 }\n+                throw new PrestoException(INVALID_TABLE_PROPERTY, format(\"No corresponding InputFormat for SerDe %s for SymlinkTextInputFormat table\", serDe));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM1OTczOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestBackgroundHiveSplitLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyNTo1OFrOIA7aRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTozMToxMVrOIBPt3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDI5NQ==", "bodyText": "We could use AVRO.getInputFormat() to match the above AVRO.getSerDe()", "url": "https://github.com/trinodb/trino/pull/6213#discussion_r537844295", "createdAt": "2020-12-07T21:25:58Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestBackgroundHiveSplitLoader.java", "diffHunk": "@@ -769,7 +769,7 @@ public void testBuildManifestFileIterator()\n                 files,\n                 directoryLister);\n         Optional<Iterator<InternalHiveSplit>> splitIterator = backgroundHiveSplitLoader.buildManifestFileIterator(\n-                configuration,\n+                new AvroContainerInputFormat(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3Njk5MQ==", "bodyText": "AVRO.getInputFormat() returns string while we need instance here", "url": "https://github.com/trinodb/trino/pull/6213#discussion_r538176991", "createdAt": "2020-12-08T09:31:11Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestBackgroundHiveSplitLoader.java", "diffHunk": "@@ -769,7 +769,7 @@ public void testBuildManifestFileIterator()\n                 files,\n                 directoryLister);\n         Optional<Iterator<InternalHiveSplit>> splitIterator = backgroundHiveSplitLoader.buildManifestFileIterator(\n-                configuration,\n+                new AvroContainerInputFormat(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDI5NQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM1OTk5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestBackgroundHiveSplitLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyNjowMVrOIA7acQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyNjowMVrOIA7acQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDMzNw==", "bodyText": "Same here", "url": "https://github.com/trinodb/trino/pull/6213#discussion_r537844337", "createdAt": "2020-12-07T21:26:01Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestBackgroundHiveSplitLoader.java", "diffHunk": "@@ -808,7 +807,7 @@ public void testBuildManifestFileIteratorNestedDirectory()\n                 files,\n                 directoryLister);\n         Optional<Iterator<InternalHiveSplit>> splitIterator = backgroundHiveSplitLoader.buildManifestFileIterator(\n-                configuration,\n+                new AvroContainerInputFormat(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM2ODQ1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/util/TestHiveUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyODowNVrOIA7fQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyODowNVrOIA7fQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NTU2OA==", "bodyText": "PARQUET.getInputFormat()", "url": "https://github.com/trinodb/trino/pull/6213#discussion_r537845568", "createdAt": "2020-12-07T21:28:05Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/util/TestHiveUtil.java", "diffHunk": "@@ -75,6 +83,29 @@ public void testToPartitionValues()\n         assertToPartitionValues(\"pk=__HIVE_DEFAULT_PARTITION__\");\n     }\n \n+    @Test\n+    public void testGetInputFormat()\n+    {\n+        Configuration configuration = new Configuration(false);\n+\n+        Properties avroSymlinkSchema = new Properties();\n+        avroSymlinkSchema.setProperty(FILE_INPUT_FORMAT, SymlinkTextInputFormat.class.getName());\n+        avroSymlinkSchema.setProperty(SERIALIZATION_LIB, AVRO.getSerDe());\n+        assertTrue(getInputFormat(configuration, avroSymlinkSchema, false) instanceof SymlinkTextInputFormat);\n+        assertTrue(getInputFormat(configuration, avroSymlinkSchema, true) instanceof AvroContainerInputFormat);\n+\n+        Properties parquetSymlinkSchema = new Properties();\n+        parquetSymlinkSchema.setProperty(FILE_INPUT_FORMAT, SymlinkTextInputFormat.class.getName());\n+        parquetSymlinkSchema.setProperty(SERIALIZATION_LIB, PARQUET.getSerDe());\n+        assertTrue(getInputFormat(configuration, parquetSymlinkSchema, false) instanceof SymlinkTextInputFormat);\n+        assertTrue(getInputFormat(configuration, parquetSymlinkSchema, true) instanceof MapredParquetInputFormat);\n+\n+        Properties parquetSchema = new Properties();\n+        parquetSchema.setProperty(FILE_INPUT_FORMAT, MapredParquetInputFormat.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM3MzI1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/util/TestHiveUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyOToyMVrOIA7iBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyOToyMVrOIA7iBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NjI3Nw==", "bodyText": "Use assertInstanceOf() since it provides a better error message. In general, assertTrue() should not be used with a predicate -- try to express the predicate using an assertion method or AssertJ.", "url": "https://github.com/trinodb/trino/pull/6213#discussion_r537846277", "createdAt": "2020-12-07T21:29:21Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/util/TestHiveUtil.java", "diffHunk": "@@ -75,6 +83,29 @@ public void testToPartitionValues()\n         assertToPartitionValues(\"pk=__HIVE_DEFAULT_PARTITION__\");\n     }\n \n+    @Test\n+    public void testGetInputFormat()\n+    {\n+        Configuration configuration = new Configuration(false);\n+\n+        Properties avroSymlinkSchema = new Properties();\n+        avroSymlinkSchema.setProperty(FILE_INPUT_FORMAT, SymlinkTextInputFormat.class.getName());\n+        avroSymlinkSchema.setProperty(SERIALIZATION_LIB, AVRO.getSerDe());\n+        assertTrue(getInputFormat(configuration, avroSymlinkSchema, false) instanceof SymlinkTextInputFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM4MjExOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/util/TestHiveUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozMTo0MFrOIA7nLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTozMTo0MFrOIA7nLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NzU5Ng==", "bodyText": "Add a test for the legacy Parquet handling\nProperties legacyParquetSchema = new Properties();\nparquetSchema.setProperty(FILE_INPUT_FORMAT, \"parquet.hive.MapredParquetInputFormat\");\nassertInstanceOf(getInputFormat(configuration, legacyParquetSchema, false), MapredParquetInputFormat.class);\nassertInstanceOf(getInputFormat(configuration, legacyParquetSchema, true), MapredParquetInputFormat.class);", "url": "https://github.com/trinodb/trino/pull/6213#discussion_r537847596", "createdAt": "2020-12-07T21:31:40Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/util/TestHiveUtil.java", "diffHunk": "@@ -75,6 +83,29 @@ public void testToPartitionValues()\n         assertToPartitionValues(\"pk=__HIVE_DEFAULT_PARTITION__\");\n     }\n \n+    @Test\n+    public void testGetInputFormat()\n+    {\n+        Configuration configuration = new Configuration(false);\n+\n+        Properties avroSymlinkSchema = new Properties();\n+        avroSymlinkSchema.setProperty(FILE_INPUT_FORMAT, SymlinkTextInputFormat.class.getName());\n+        avroSymlinkSchema.setProperty(SERIALIZATION_LIB, AVRO.getSerDe());\n+        assertTrue(getInputFormat(configuration, avroSymlinkSchema, false) instanceof SymlinkTextInputFormat);\n+        assertTrue(getInputFormat(configuration, avroSymlinkSchema, true) instanceof AvroContainerInputFormat);\n+\n+        Properties parquetSymlinkSchema = new Properties();\n+        parquetSymlinkSchema.setProperty(FILE_INPUT_FORMAT, SymlinkTextInputFormat.class.getName());\n+        parquetSymlinkSchema.setProperty(SERIALIZATION_LIB, PARQUET.getSerDe());\n+        assertTrue(getInputFormat(configuration, parquetSymlinkSchema, false) instanceof SymlinkTextInputFormat);\n+        assertTrue(getInputFormat(configuration, parquetSymlinkSchema, true) instanceof MapredParquetInputFormat);\n+\n+        Properties parquetSchema = new Properties();\n+        parquetSchema.setProperty(FILE_INPUT_FORMAT, MapredParquetInputFormat.class.getName());\n+        assertTrue(getInputFormat(configuration, parquetSchema, false) instanceof MapredParquetInputFormat);\n+        assertTrue(getInputFormat(configuration, parquetSchema, true) instanceof MapredParquetInputFormat);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4490, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}