{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNDI4MTcz", "number": 3599, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDozNzoyMFrOD4pPRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDozNzoyMFrOD4pPRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIyNTAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDozNzoyMFrOGPiNog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDozMDozM1rOGPjn1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MjM3MA==", "bodyText": "do we have a test ensuring trailing space is preserved?\nlike\nassertFunction(\"SUBSTR(CAST('keep trailing' AS CHAR(14)), 1, 14)\", createVarcharType(14), \"keep trailing \");", "url": "https://github.com/trinodb/trino/pull/3599#discussion_r418942370", "createdAt": "2020-05-02T10:37:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -390,41 +390,41 @@ public void testSubstring()\n     @Test\n     public void testCharSubstring()\n     {\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 6)\", createCharType(13), padRight(\"ratica\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 10)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 50)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50, 10)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 4)\", createCharType(13), padRight(\"call\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 40)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50, 4)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0, 4)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTR(CAST('abc def' AS CHAR(7)), 1, 4)\", createCharType(7), padRight(\"abc\", 7));\n-\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM -5)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM -50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5 FOR 6)\", createCharType(13), padRight(\"ratica\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5 FOR 50)\", createCharType(13), padRight(\"ratically\", 13));\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5)\", createVarcharType(13), \"cally\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0)\", createVarcharType(13), \"\");\n+\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 6)\", createVarcharType(13), \"ratica\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 10)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 50)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50, 10)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 4)\", createVarcharType(13), \"call\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 40)\", createVarcharType(13), \"cally\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50, 4)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0, 4)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 0)\", createVarcharType(13), \"\");\n+\n+        assertFunction(\"SUBSTR(CAST('abc def' AS CHAR(7)), 1, 4)\", createVarcharType(7), \"abc \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NTQ2MQ==", "bodyText": "Thanks, I was missing the case. Updated.", "url": "https://github.com/trinodb/trino/pull/3599#discussion_r418965461", "createdAt": "2020-05-02T14:30:33Z", "author": {"login": "ebyhr"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -390,41 +390,41 @@ public void testSubstring()\n     @Test\n     public void testCharSubstring()\n     {\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 6)\", createCharType(13), padRight(\"ratica\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 10)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 50)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50, 10)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 4)\", createCharType(13), padRight(\"call\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 40)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50, 4)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0, 4)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTR(CAST('abc def' AS CHAR(7)), 1, 4)\", createCharType(7), padRight(\"abc\", 7));\n-\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM -5)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM -50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5 FOR 6)\", createCharType(13), padRight(\"ratica\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5 FOR 50)\", createCharType(13), padRight(\"ratically\", 13));\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5)\", createVarcharType(13), \"cally\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0)\", createVarcharType(13), \"\");\n+\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 6)\", createVarcharType(13), \"ratica\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 10)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 50)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50, 10)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 4)\", createVarcharType(13), \"call\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 40)\", createVarcharType(13), \"cally\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50, 4)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0, 4)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 0)\", createVarcharType(13), \"\");\n+\n+        assertFunction(\"SUBSTR(CAST('abc def' AS CHAR(7)), 1, 4)\", createVarcharType(7), \"abc \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MjM3MA=="}, "originalCommit": null, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4988, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}