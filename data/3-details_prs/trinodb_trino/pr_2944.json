{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5ODg5NzQ3", "number": 2944, "title": "Fix UI redirect with proxy", "bodyText": "Fixes #2908", "createdAt": "2020-02-25T23:54:18Z", "url": "https://github.com/trinodb/trino/pull/2944", "merged": true, "mergeCommit": {"oid": "09edc589af9691050b1d6feb34466d78d8352027"}, "closed": true, "closedAt": "2020-03-13T23:54:50Z", "author": {"login": "dain"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcH9qDvABqjMwNzE5MzY5NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNYAaOABqjMxMjg0NDE5NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NzI3MDM0", "url": "https://github.com/trinodb/trino/pull/2944#pullrequestreview-364727034", "createdAt": "2020-02-26T09:10:05Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOToxMDowNVrOFujY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOToxMDowNVrOFujY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1ODY0OQ==", "bodyText": "If there is\nX-Forwarder-Proto https\nX-Forwarder-Host my-load-balancer.local\n\nthen using 8080 (in absence of X-Forwarded-Port) seems unreasonable.\nUsing https' default would make more sense to me.\n(This is why i wrote the code this way.)\n@electrum?", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r384358649", "createdAt": "2020-02-26T09:10:05Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -318,21 +319,10 @@ private static String getRedirectLocation(HttpServletRequest request, String pat\n \n     static String getRedirectLocation(HttpServletRequest request, String path, String queryParameter)\n     {\n-        HttpUriBuilder builder;\n-        if (isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {\n-            // not forwarded\n-            builder = uriBuilder()\n-                    .scheme(request.getScheme())\n-                    .host(request.getServerName())\n-                    .port(request.getServerPort());\n-        }\n-        else {\n-            // forwarded\n-            builder = uriBuilder()\n+        HttpUriBuilder builder = uriBuilder()\n                     .scheme(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme()))\n-                    .host(request.getHeader(X_FORWARDED_HOST));\n-            getForwarderPort(request).ifPresent(builder::port);\n-        }\n+                    .host(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_HOST)), request.getServerName()))\n+                    .port(getForwarderPort(request).orElse(request.getServerPort()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzg0NDQ3", "url": "https://github.com/trinodb/trino/pull/2944#pullrequestreview-366784447", "createdAt": "2020-02-29T07:56:51Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwNzo1Njo1MlrOFwINwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwODowMzo0MVrOFwIPFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDU2MQ==", "bodyText": "We determined -Host cannot be the activator (sorry for that!)\nBut having -Host | -Proto an activator but not -Port seems arbitrary.\nIn any case, this requires a code comment explaining the choice.", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010561", "createdAt": "2020-02-29T07:56:52Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -371,15 +357,30 @@ private static String parseJwt(byte[] hmac, String jwt)\n                 .getSubject();\n     }\n \n-    private static Optional<Integer> getForwarderPort(HttpServletRequest request)\n+    private static HttpUriBuilder toUriBuilderWithForwarding(HttpServletRequest request)\n     {\n-        if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {\n-            try {\n-                return Optional.of(parseInt(request.getHeader(X_FORWARDED_PORT)));\n-            }\n-            catch (ArithmeticException ignore) {\n+        HttpUriBuilder builder;\n+        if (isNullOrEmpty(request.getHeader(X_FORWARDED_PROTO)) && isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDYzNA==", "bodyText": "Add a comment explaining who's setting -Host with port numbers.", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010634", "createdAt": "2020-02-29T07:58:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -371,15 +357,30 @@ private static String parseJwt(byte[] hmac, String jwt)\n                 .getSubject();\n     }\n \n-    private static Optional<Integer> getForwarderPort(HttpServletRequest request)\n+    private static HttpUriBuilder toUriBuilderWithForwarding(HttpServletRequest request)\n     {\n-        if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {\n-            try {\n-                return Optional.of(parseInt(request.getHeader(X_FORWARDED_PORT)));\n-            }\n-            catch (ArithmeticException ignore) {\n+        HttpUriBuilder builder;\n+        if (isNullOrEmpty(request.getHeader(X_FORWARDED_PROTO)) && isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {\n+            // not forwarded\n+            builder = uriBuilder()\n+                    .scheme(request.getScheme())\n+                    .host(request.getServerName())\n+                    .port(request.getServerPort());\n+        }\n+        else {\n+            // forwarded\n+            builder = uriBuilder()\n+                    .scheme(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme()))\n+                    .hostAndPort(HostAndPort.fromString(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_HOST)), request.getServerName())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDgxMQ==", "bodyText": "i deliberately used .replace instead of using uri builder.\nReplace is simplistic, so it's obvious what the expected value is.\nWith uri builder used in the test and in the code under test, it's not as obvious.", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010811", "createdAt": "2020-02-29T08:01:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -344,13 +344,115 @@ private static void assertRedirect(OkHttpClient client, String url, String redir\n         if (testProxy) {\n             request = new Request.Builder()\n                     .url(url)\n-                    .header(X_FORWARDED_PROTO, \"https\")\n+                    .header(X_FORWARDED_PROTO, \"test\")\n                     .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n-                    .header(X_FORWARDED_PORT, \"443\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n                     .build();\n             try (Response response = client.newCall(request).execute()) {\n                 assertEquals(response.code(), SC_SEE_OTHER);\n-                assertEquals(response.header(LOCATION), \"https://my-load-balancer.local:443/\" + redirectLocation.replaceFirst(\"^([^/]*/){3}\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDg2MA==", "bodyText": "Isn't in this case simply http://my-load-balancer.local/? we could use constant here", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010860", "createdAt": "2020-02-29T08:02:53Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -344,13 +344,115 @@ private static void assertRedirect(OkHttpClient client, String url, String redir\n         if (testProxy) {\n             request = new Request.Builder()\n                     .url(url)\n-                    .header(X_FORWARDED_PROTO, \"https\")\n+                    .header(X_FORWARDED_PROTO, \"test\")\n                     .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n-                    .header(X_FORWARDED_PORT, \"443\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n                     .build();\n             try (Response response = client.newCall(request).execute()) {\n                 assertEquals(response.code(), SC_SEE_OTHER);\n-                assertEquals(response.header(LOCATION), \"https://my-load-balancer.local:443/\" + redirectLocation.replaceFirst(\"^([^/]*/){3}\", \"\"));\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local:123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .defaultPort()\n+                                .toString());\n+            }\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local:123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .defaultPort()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDkwMg==", "bodyText": "Add a comment like // X-Forwarded-Port not recognized as valid forwarding", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010902", "createdAt": "2020-02-29T08:03:41Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -344,13 +344,115 @@ private static void assertRedirect(OkHttpClient client, String url, String redir\n         if (testProxy) {\n             request = new Request.Builder()\n                     .url(url)\n-                    .header(X_FORWARDED_PROTO, \"https\")\n+                    .header(X_FORWARDED_PROTO, \"test\")\n                     .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n-                    .header(X_FORWARDED_PORT, \"443\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n                     .build();\n             try (Response response = client.newCall(request).execute()) {\n                 assertEquals(response.code(), SC_SEE_OTHER);\n-                assertEquals(response.header(LOCATION), \"https://my-load-balancer.local:443/\" + redirectLocation.replaceFirst(\"^([^/]*/){3}\", \"\"));\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local:123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .defaultPort()\n+                                .toString());\n+            }\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local:123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .defaultPort()\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(response.header(LOCATION), redirectLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODI5NTI3", "url": "https://github.com/trinodb/trino/pull/2944#pullrequestreview-366829527", "createdAt": "2020-03-01T01:45:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTY5Mjgx", "url": "https://github.com/trinodb/trino/pull/2944#pullrequestreview-373969281", "createdAt": "2020-03-12T23:47:48Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0Nzo0OFrOF1ze7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo1NDoyOFrOF1zlow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjM0OA==", "bodyText": "Could simplify this to\nOptional.ofNullable(emptyToNull(request.getHeader(X_FORWARDED_PORT)))\n        .map(Ints::tryParseInt)\n        .ifPresent(builder::port);", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r391962348", "createdAt": "2020-03-12T23:47:48Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -371,15 +357,30 @@ private static String parseJwt(byte[] hmac, String jwt)\n                 .getSubject();\n     }\n \n-    private static Optional<Integer> getForwarderPort(HttpServletRequest request)\n+    private static HttpUriBuilder toUriBuilderWithForwarding(HttpServletRequest request)\n     {\n-        if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {\n-            try {\n-                return Optional.of(parseInt(request.getHeader(X_FORWARDED_PORT)));\n-            }\n-            catch (ArithmeticException ignore) {\n+        HttpUriBuilder builder;\n+        if (isNullOrEmpty(request.getHeader(X_FORWARDED_PROTO)) && isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {\n+            // not forwarded\n+            builder = uriBuilder()\n+                    .scheme(request.getScheme())\n+                    .host(request.getServerName())\n+                    .port(request.getServerPort());\n+        }\n+        else {\n+            // forwarded\n+            builder = uriBuilder()\n+                    .scheme(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme()))\n+                    .hostAndPort(HostAndPort.fromString(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_HOST)), request.getServerName())));\n+\n+            if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2Mzk5NA==", "bodyText": "I think this should be\n.hostAndPort(HostAndPort.fromString(request.getHeader(HOST)))\nWe don't want to add the port number unless the original request had one. Though, what happens if there's no Host header? Is that legal?", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r391963994", "createdAt": "2020-03-12T23:54:11Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -371,15 +357,30 @@ private static String parseJwt(byte[] hmac, String jwt)\n                 .getSubject();\n     }\n \n-    private static Optional<Integer> getForwarderPort(HttpServletRequest request)\n+    private static HttpUriBuilder toUriBuilderWithForwarding(HttpServletRequest request)\n     {\n-        if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {\n-            try {\n-                return Optional.of(parseInt(request.getHeader(X_FORWARDED_PORT)));\n-            }\n-            catch (ArithmeticException ignore) {\n+        HttpUriBuilder builder;\n+        if (isNullOrEmpty(request.getHeader(X_FORWARDED_PROTO)) && isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDU2MQ=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2NDA2Nw==", "bodyText": "Same, I think this should be using request.getHeader(HOST)", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r391964067", "createdAt": "2020-03-12T23:54:28Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -371,15 +357,30 @@ private static String parseJwt(byte[] hmac, String jwt)\n                 .getSubject();\n     }\n \n-    private static Optional<Integer> getForwarderPort(HttpServletRequest request)\n+    private static HttpUriBuilder toUriBuilderWithForwarding(HttpServletRequest request)\n     {\n-        if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {\n-            try {\n-                return Optional.of(parseInt(request.getHeader(X_FORWARDED_PORT)));\n-            }\n-            catch (ArithmeticException ignore) {\n+        HttpUriBuilder builder;\n+        if (isNullOrEmpty(request.getHeader(X_FORWARDED_PROTO)) && isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {\n+            // not forwarded\n+            builder = uriBuilder()\n+                    .scheme(request.getScheme())\n+                    .host(request.getServerName())\n+                    .port(request.getServerPort());\n+        }\n+        else {\n+            // forwarded\n+            builder = uriBuilder()\n+                    .scheme(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme()))\n+                    .hostAndPort(HostAndPort.fromString(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_HOST)), request.getServerName())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDYzNA=="}, "originalCommit": null, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c85ca1f9d35e609ee2251fc33ed8739ed211200", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/6c85ca1f9d35e609ee2251fc33ed8739ed211200", "committedDate": "2020-03-13T22:25:07Z", "message": "Fix UI redirect with proxy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6c85ca1f9d35e609ee2251fc33ed8739ed211200", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/6c85ca1f9d35e609ee2251fc33ed8739ed211200", "committedDate": "2020-03-13T22:25:07Z", "message": "Fix UI redirect with proxy"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1611, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}