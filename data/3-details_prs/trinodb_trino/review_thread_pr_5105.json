{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjc3OTg3", "number": 5105, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoyMjoyNFrOEhj7vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1ODo1N1rOEhk5Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjI3MTk5OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoyMjoyNFrOHO8LIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTozOTo0N1rOHO_SrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyODAwMw==", "bodyText": "Postgres currently supports p <=6 (according to docs), so we do not have behavioral regression here.\nWorth mentioning in the commit message that we are leveraging this fact.", "url": "https://github.com/trinodb/trino/pull/5105#discussion_r485428003", "createdAt": "2020-09-09T08:22:24Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -434,8 +442,15 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n         if (TIMESTAMP_MILLIS.equals(type)) {\n             return WriteMapping.longMapping(\"timestamp\", timestampWriteFunction());\n         }\n-        if (TIMESTAMP_WITH_TIME_ZONE.equals(type)) {\n-            return WriteMapping.longMapping(\"timestamptz\", timestampWithTimeZoneWriteFunction());\n+        if (type instanceof TimestampWithTimeZoneType && ((TimestampWithTimeZoneType) type).getPrecision() <= 6) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3OTA4NA==", "bodyText": "Until 9 we would be fine. It would harder with 10,11,12 as I am not sure if that is compatible with JDBC. At least not via OffsetDateTime PSQL uses.\nThe ((TimestampWithTimeZoneType) type).getPrecision() <= 6 condition is merly a checkstate. I just did not want to have it explicitly in if (type instanceof TimestampWithTimeZoneType) {, so standard unsupported type handling logic triggers if for some magical reason we get timestamp with precision >6 (e.g with some future version of PSQL)", "url": "https://github.com/trinodb/trino/pull/5105#discussion_r485479084", "createdAt": "2020-09-09T09:39:47Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -434,8 +442,15 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n         if (TIMESTAMP_MILLIS.equals(type)) {\n             return WriteMapping.longMapping(\"timestamp\", timestampWriteFunction());\n         }\n-        if (TIMESTAMP_WITH_TIME_ZONE.equals(type)) {\n-            return WriteMapping.longMapping(\"timestamptz\", timestampWithTimeZoneWriteFunction());\n+        if (type instanceof TimestampWithTimeZoneType && ((TimestampWithTimeZoneType) type).getPrecision() <= 6) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyODAwMw=="}, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjI3NTMzOnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoyMzoxM1rOHO8NNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoyMzoxM1rOHO8NNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyODUzNA==", "bodyText": "Add\n// PostgreSQL currently supports precision up to microseconds\n\nto argument that throwing is actually OK think to do", "url": "https://github.com/trinodb/trino/pull/5105#discussion_r485428534", "createdAt": "2020-09-09T08:23:13Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -489,15 +504,25 @@ private static LongWriteFunction timestampWriteFunction()\n         };\n     }\n \n-    private static ColumnMapping timestampWithTimeZoneColumnMapping()\n+    private static ColumnMapping timestampWithTimeZoneColumnMapping(int precision)\n     {\n-        return ColumnMapping.longMapping(\n-                TIMESTAMP_WITH_TIME_ZONE,\n-                timeStampWithTimeZoneReadFunction(),\n-                timestampWithTimeZoneWriteFunction());\n+        checkArgument(precision <= 6, \"unsupported precision value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjQwNjMyOnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1MzoyNlrOHO9ccQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1MzoyNlrOHO9ccQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0ODgxNw==", "bodyText": "MICROSECONDS_PER_MILLISECOND -> MILLISECONDS_PER_SECOND\n@martint is the % and / right here? or floorDiv instead?\ndo we have helper methods somewhere so that we do not have to ask the above question ever again?", "url": "https://github.com/trinodb/trino/pull/5105#discussion_r485448817", "createdAt": "2020-09-09T08:53:26Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -515,6 +540,32 @@ private static LongWriteFunction timestampWithTimeZoneWriteFunction()\n         };\n     }\n \n+    private static ObjectReadFunction longTimestampWithTimeZoneReadFunction()\n+    {\n+        return ObjectReadFunction.of(\n+                LongTimestampWithTimeZone.class,\n+                (resultSet, columnIndex) -> {\n+                    // PostgreSQL does not store zone information in \"timestamp with time zone\" data type\n+                    OffsetDateTime offsetDateTime = resultSet.getObject(columnIndex, OffsetDateTime.class);\n+                    return LongTimestampWithTimeZone.fromEpochSecondsAndFraction(\n+                            offsetDateTime.toEpochSecond(),\n+                            (long) offsetDateTime.getNano() * PICOSECONDS_PER_NANOSECOND,\n+                            UTC_KEY);\n+                });\n+    }\n+\n+    private static ObjectWriteFunction longTimestampWithTimeZoneWriteFunction()\n+    {\n+        return ObjectWriteFunction.of(\n+                LongTimestampWithTimeZone.class,\n+                (statement, index, value) -> {\n+                    // PostgreSQL does not store zone information in \"timestamp with time zone\" data type\n+                    long epochSeconds = value.getEpochMillis() / MILLISECONDS_PER_SECOND;\n+                    long nanosOfSecond = value.getEpochMillis() % MICROSECONDS_PER_MILLISECOND * NANOSECONDS_PER_MILLISECOND + value.getPicosOfMilli() / PICOSECONDS_PER_NANOSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjQxODY5OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/TypeUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1NjoyMVrOHO9kIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1NjoyMVrOHO9kIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MDc4NQ==", "bodyText": "MICROSECONDS_PER_MILLISECOND -> ..", "url": "https://github.com/trinodb/trino/pull/5105#discussion_r485450785", "createdAt": "2020-09-09T08:56:21Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/TypeUtils.java", "diffHunk": "@@ -180,10 +194,20 @@ private static Object prestoNativeToJdbcObject(ConnectorSession session, Type pr\n             return toPgTimestamp(fromPrestoTimestamp((long) prestoNative));\n         }\n \n-        if (TIMESTAMP_WITH_TIME_ZONE.equals(prestoType)) {\n-            long millisUtc = unpackMillisUtc((long) prestoNative);\n+        if (prestoType instanceof TimestampWithTimeZoneType) {\n             // PostgreSQL does not store zone, only the point in time\n-            return new Timestamp(millisUtc);\n+            int precision = ((TimestampWithTimeZoneType) prestoType).getPrecision();\n+            if (precision <= TimestampWithTimeZoneType.MAX_SHORT_PRECISION) {\n+                long millisUtc = unpackMillisUtc((long) prestoNative);\n+                return new Timestamp(millisUtc);\n+            }\n+            else {\n+                LongTimestampWithTimeZone value = (LongTimestampWithTimeZone) prestoNative;\n+                long epochSeconds = value.getEpochMillis() / MILLISECONDS_PER_SECOND;\n+                long nanosOfSecond = value.getEpochMillis() % MICROSECONDS_PER_MILLISECOND * NANOSECONDS_PER_MILLISECOND", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjQyMzc5OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1NzozNVrOHO9nYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1NzozNVrOHO9nYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MTYxNw==", "bodyText": "Let's also add test what happens if we try create table with timestamp(7).", "url": "https://github.com/trinodb/trino/pull/5105#discussion_r485451617", "createdAt": "2020-09-09T08:57:35Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1141,16 +1141,16 @@ public void testTimestampWithTimeZone(boolean insertWithPresto)\n     }\n \n     @Test(dataProvider = \"testTimestampWithTimeZoneDataProvider\")\n-    public void testArrayTimestampWithTimeZone(boolean insertWithPresto)\n+    public void testArrayTimestampWithTimeZone(boolean insertWithPresto, int precision)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjQyOTQ2OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODo1ODo1N1rOHO9q-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTozMTozOVrOHO-_5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MjUzNw==", "bodyText": "Method is called \"round to precision\", but this truncates.", "url": "https://github.com/trinodb/trino/pull/5105#discussion_r485452537", "createdAt": "2020-09-09T08:58:57Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1376,26 +1386,35 @@ private void testUnsupportedDataTypeConvertedToVarchar(Session session, String d\n         }\n     }\n \n-    public static DataType<ZonedDateTime> prestoTimestampWithTimeZoneDataType()\n+    public static DataType<ZonedDateTime> prestoTimestampWithTimeZoneDataType(int precision)\n     {\n         return dataType(\n-                \"timestamp with time zone\",\n-                TIMESTAMP_WITH_TIME_ZONE,\n-                DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSS VV''\")::format,\n+                format(\"timestamp(%d) with time zone\", precision),\n+                createTimestampWithTimeZoneType(precision),\n+                zonedDateTime -> DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSSSSS VV''\").format(roundToPrecision(zonedDateTime, precision)),\n                 // PostgreSQL does not store zone, only the point in time\n-                zonedDateTime -> zonedDateTime.withZoneSameInstant(ZoneId.of(\"UTC\")));\n+                zonedDateTime -> roundToPrecision(zonedDateTime, precision).withZoneSameInstant(ZoneId.of(\"UTC\")));\n     }\n \n-    public static DataType<ZonedDateTime> postgreSqlTimestampWithTimeZoneDataType()\n+    public static DataType<ZonedDateTime> postgreSqlTimestampWithTimeZoneDataType(int precision)\n     {\n         return dataType(\n-                \"timestamp with time zone\",\n-                TIMESTAMP_WITH_TIME_ZONE,\n+                format(\"timestamp(%d) with time zone\", precision),\n+                createTimestampWithTimeZoneType(precision),\n                 // PostgreSQL never examines the content of a literal string before determining its type, so `TIMESTAMP '.... {zone}'` won't work.\n                 // PostgreSQL does not store zone, only the point in time\n-                zonedDateTime -> DateTimeFormatter.ofPattern(\"'TIMESTAMP WITH TIME ZONE '''yyyy-MM-dd HH:mm:ss.SSS VV''\").format(zonedDateTime.withZoneSameInstant(UTC)),\n-                DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSS VV''\")::format,\n-                zonedDateTime -> zonedDateTime.withZoneSameInstant(ZoneId.of(\"UTC\")));\n+                zonedDateTime -> {\n+                    String pattern = format(\"'TIMESTAMP (%d) WITH TIME ZONE '''yyyy-MM-dd HH:mm:ss.SSSSSS VV''\", precision);\n+                    return DateTimeFormatter.ofPattern(pattern).format(roundToPrecision(zonedDateTime, precision).withZoneSameInstant(UTC));\n+                },\n+                zonedDateTime -> DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSSSSS VV''\").format(roundToPrecision(zonedDateTime, precision)),\n+                zonedDateTime -> roundToPrecision(zonedDateTime, precision).withZoneSameInstant(ZoneId.of(\"UTC\")));\n+    }\n+\n+    private static ZonedDateTime roundToPrecision(ZonedDateTime zonedDateTime, int precision)\n+    {\n+        int divisor = (int) Math.pow(10, 9 - precision);\n+        return zonedDateTime.withNano(zonedDateTime.getNano() / divisor * divisor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3NDI3Nw==", "bodyText": "Yeah - previous version used to round :)", "url": "https://github.com/trinodb/trino/pull/5105#discussion_r485474277", "createdAt": "2020-09-09T09:31:39Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1376,26 +1386,35 @@ private void testUnsupportedDataTypeConvertedToVarchar(Session session, String d\n         }\n     }\n \n-    public static DataType<ZonedDateTime> prestoTimestampWithTimeZoneDataType()\n+    public static DataType<ZonedDateTime> prestoTimestampWithTimeZoneDataType(int precision)\n     {\n         return dataType(\n-                \"timestamp with time zone\",\n-                TIMESTAMP_WITH_TIME_ZONE,\n-                DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSS VV''\")::format,\n+                format(\"timestamp(%d) with time zone\", precision),\n+                createTimestampWithTimeZoneType(precision),\n+                zonedDateTime -> DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSSSSS VV''\").format(roundToPrecision(zonedDateTime, precision)),\n                 // PostgreSQL does not store zone, only the point in time\n-                zonedDateTime -> zonedDateTime.withZoneSameInstant(ZoneId.of(\"UTC\")));\n+                zonedDateTime -> roundToPrecision(zonedDateTime, precision).withZoneSameInstant(ZoneId.of(\"UTC\")));\n     }\n \n-    public static DataType<ZonedDateTime> postgreSqlTimestampWithTimeZoneDataType()\n+    public static DataType<ZonedDateTime> postgreSqlTimestampWithTimeZoneDataType(int precision)\n     {\n         return dataType(\n-                \"timestamp with time zone\",\n-                TIMESTAMP_WITH_TIME_ZONE,\n+                format(\"timestamp(%d) with time zone\", precision),\n+                createTimestampWithTimeZoneType(precision),\n                 // PostgreSQL never examines the content of a literal string before determining its type, so `TIMESTAMP '.... {zone}'` won't work.\n                 // PostgreSQL does not store zone, only the point in time\n-                zonedDateTime -> DateTimeFormatter.ofPattern(\"'TIMESTAMP WITH TIME ZONE '''yyyy-MM-dd HH:mm:ss.SSS VV''\").format(zonedDateTime.withZoneSameInstant(UTC)),\n-                DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSS VV''\")::format,\n-                zonedDateTime -> zonedDateTime.withZoneSameInstant(ZoneId.of(\"UTC\")));\n+                zonedDateTime -> {\n+                    String pattern = format(\"'TIMESTAMP (%d) WITH TIME ZONE '''yyyy-MM-dd HH:mm:ss.SSSSSS VV''\", precision);\n+                    return DateTimeFormatter.ofPattern(pattern).format(roundToPrecision(zonedDateTime, precision).withZoneSameInstant(UTC));\n+                },\n+                zonedDateTime -> DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSSSSS VV''\").format(roundToPrecision(zonedDateTime, precision)),\n+                zonedDateTime -> roundToPrecision(zonedDateTime, precision).withZoneSameInstant(ZoneId.of(\"UTC\")));\n+    }\n+\n+    private static ZonedDateTime roundToPrecision(ZonedDateTime zonedDateTime, int precision)\n+    {\n+        int divisor = (int) Math.pow(10, 9 - precision);\n+        return zonedDateTime.withNano(zonedDateTime.getNano() / divisor * divisor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MjUzNw=="}, "originalCommit": null, "originalPosition": 149}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3171, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}