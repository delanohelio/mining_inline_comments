{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDAwMTQ5", "number": 4886, "title": "128 bit arithmetic upgrades", "bodyText": "Addition throughput improved by ~7% by using 2x64 instead of 4x32 bit operations.\nEverything improved 0.1-0.5% by changing & to >>>", "createdAt": "2020-08-19T08:18:19Z", "url": "https://github.com/trinodb/trino/pull/4886", "merged": true, "mergeCommit": {"oid": "4e97cb091cb8a98edae7d8f2bedf252740ee4357"}, "closed": true, "closedAt": "2020-09-09T11:33:34Z", "author": {"login": "skrzypo987"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAY3XjAFqTQ3MDMxNjg1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHHkELABqjM3NDQ0OTI0MTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzE2ODUz", "url": "https://github.com/trinodb/trino/pull/4886#pullrequestreview-470316853", "createdAt": "2020-08-19T10:14:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoxNDoxN1rOHDArLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoxNDoxN1rOHDArLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkxODgyOQ==", "bodyText": "It appears that bit shift is slightly better\n\nWhat do you mean better? faster?", "url": "https://github.com/trinodb/trino/pull/4886#discussion_r472918829", "createdAt": "2020-08-19T10:14:17Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -724,27 +724,27 @@ public static void negate(Slice decimal)\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjg2OTgw", "url": "https://github.com/trinodb/trino/pull/4886#pullrequestreview-483686980", "createdAt": "2020-09-07T18:38:41Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDA4OTI5", "url": "https://github.com/trinodb/trino/pull/4886#pullrequestreview-484008929", "createdAt": "2020-09-08T10:38:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDozODozMlrOHOXE5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDo1ODoxNFrOHOXsuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyMDE5OA==", "bodyText": "is the SIGN_INT_MASK still needed?", "url": "https://github.com/trinodb/trino/pull/4886#discussion_r484820198", "createdAt": "2020-09-08T10:38:32Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -724,27 +724,27 @@ public static void negate(Slice decimal)\n \n     public static boolean isStrictlyNegative(Slice decimal)\n     {\n-        return isNegative(decimal) && (getLong(decimal, 0) != 0 || getLong(decimal, 1) != 0);\n+        return isStrictlyNegative(getRawLong(decimal, 0), getRawLong(decimal, 1));\n     }\n \n     public static boolean isStrictlyNegative(long rawLow, long rawHigh)\n     {\n-        return isNegative(rawLow, rawHigh) && (rawLow != 0 || unpackUnsignedLong(rawHigh) != 0);\n+        return isNegative(rawHigh) && (rawLow != 0 || unpackUnsignedLong(rawHigh) != 0);\n     }\n \n     private static boolean isNegative(int lastRawHigh)\n     {\n-        return (lastRawHigh & SIGN_INT_MASK) != 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyODA2Ng==", "bodyText": "Could you explain why it works? Why do we need to add MIN_VALUE to both sides? Please add a comment in code also.", "url": "https://github.com/trinodb/trino/pull/4886#discussion_r484828066", "createdAt": "2020-09-08T10:53:54Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -353,77 +352,41 @@ else if (compare < 0) {\n      */\n     private static long addUnsignedReturnOverflow(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) + toUnsignedLong(r0);\n+        long intermediateResult = l0 + r0;\n+        long z0 = intermediateResult;\n+        // Unsigned compare\n+        int overflow = intermediateResult + Long.MIN_VALUE < l0 + Long.MIN_VALUE ? 1 : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyODgxNA==", "bodyText": "Could you explain why it works? Why do we need to add MIN_VALUE to both sides? Please add a comment in code also.", "url": "https://github.com/trinodb/trino/pull/4886#discussion_r484828814", "createdAt": "2020-09-08T10:55:13Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -353,77 +352,41 @@ else if (compare < 0) {\n      */\n     private static long addUnsignedReturnOverflow(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) + toUnsignedLong(r0);\n+        long intermediateResult = l0 + r0;\n+        long z0 = intermediateResult;\n+        // Unsigned compare\n+        int overflow = intermediateResult + Long.MIN_VALUE < l0 + Long.MIN_VALUE ? 1 : 0;\n \n-        int z0 = (int) intermediateResult;\n+        intermediateResult = l1 + r1 + overflow;\n+        long z1 = intermediateResult & (~SIGN_LONG_MASK);\n+        pack(result, z0, z1, resultNegative);\n \n-        intermediateResult = toUnsignedLong(l1) + toUnsignedLong(r1) + (intermediateResult >>> 32);\n-\n-        int z1 = (int) intermediateResult;\n-\n-        intermediateResult = toUnsignedLong(l2) + toUnsignedLong(r2) + (intermediateResult >>> 32);\n-\n-        int z2 = (int) intermediateResult;\n-\n-        intermediateResult = toUnsignedLong(l3) + toUnsignedLong(r3) + (intermediateResult >>> 32);\n-\n-        int z3 = (int) intermediateResult & (~SIGN_INT_MASK);\n-\n-        pack(result, z0, z1, z2, z3, resultNegative);\n-\n-        return intermediateResult >> 31;\n+        return intermediateResult >>> 63;\n     }\n \n     /**\n      * This method ignores signs of the left and right and assumes that left is greater then right\n      */\n     private static void subtractUnsigned(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n-\n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) - toUnsignedLong(r0);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        int z0 = (int) intermediateResult;\n+        long z0 = l0 - r0;\n+        // Unsigned compare\n+        int overflow = z0 + Long.MIN_VALUE > l0 + Long.MIN_VALUE ? 1 : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyOTYyMQ==", "bodyText": "intermediateResult is not need until this point", "url": "https://github.com/trinodb/trino/pull/4886#discussion_r484829621", "createdAt": "2020-09-08T10:56:45Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -353,77 +352,41 @@ else if (compare < 0) {\n      */\n     private static long addUnsignedReturnOverflow(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) + toUnsignedLong(r0);\n+        long intermediateResult = l0 + r0;\n+        long z0 = intermediateResult;\n+        // Unsigned compare\n+        int overflow = intermediateResult + Long.MIN_VALUE < l0 + Long.MIN_VALUE ? 1 : 0;\n \n-        int z0 = (int) intermediateResult;\n+        intermediateResult = l1 + r1 + overflow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzMDM5NQ==", "bodyText": "previously we added (intermediateResult >> 32), but now we remove overflow. Is this correct?", "url": "https://github.com/trinodb/trino/pull/4886#discussion_r484830395", "createdAt": "2020-09-08T10:58:14Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -353,77 +352,41 @@ else if (compare < 0) {\n      */\n     private static long addUnsignedReturnOverflow(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) + toUnsignedLong(r0);\n+        long intermediateResult = l0 + r0;\n+        long z0 = intermediateResult;\n+        // Unsigned compare\n+        int overflow = intermediateResult + Long.MIN_VALUE < l0 + Long.MIN_VALUE ? 1 : 0;\n \n-        int z0 = (int) intermediateResult;\n+        intermediateResult = l1 + r1 + overflow;\n+        long z1 = intermediateResult & (~SIGN_LONG_MASK);\n+        pack(result, z0, z1, resultNegative);\n \n-        intermediateResult = toUnsignedLong(l1) + toUnsignedLong(r1) + (intermediateResult >>> 32);\n-\n-        int z1 = (int) intermediateResult;\n-\n-        intermediateResult = toUnsignedLong(l2) + toUnsignedLong(r2) + (intermediateResult >>> 32);\n-\n-        int z2 = (int) intermediateResult;\n-\n-        intermediateResult = toUnsignedLong(l3) + toUnsignedLong(r3) + (intermediateResult >>> 32);\n-\n-        int z3 = (int) intermediateResult & (~SIGN_INT_MASK);\n-\n-        pack(result, z0, z1, z2, z3, resultNegative);\n-\n-        return intermediateResult >> 31;\n+        return intermediateResult >>> 63;\n     }\n \n     /**\n      * This method ignores signs of the left and right and assumes that left is greater then right\n      */\n     private static void subtractUnsigned(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n-\n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) - toUnsignedLong(r0);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        int z0 = (int) intermediateResult;\n+        long z0 = l0 - r0;\n+        // Unsigned compare\n+        int overflow = z0 + Long.MIN_VALUE > l0 + Long.MIN_VALUE ? 1 : 0;\n+        long z1 = l1 - r1 - overflow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71a8fcf46a6ddefaaa1e14ec41d621b75677491e", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/71a8fcf46a6ddefaaa1e14ec41d621b75677491e", "committedDate": "2020-09-08T12:15:37Z", "message": "Change way of checking sign in 128-bit arithmetic\n\nIt appears that bit shift is slightly faster that &"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eae6fbc4ee1bf174be66a53c741ccf43526e28cf", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/eae6fbc4ee1bf174be66a53c741ccf43526e28cf", "committedDate": "2020-09-08T12:15:37Z", "message": "Add unscaled values to decimal operators addition benchmark\n\nAddition benchmark relied only on values that needed rescaling,\nwhich is a multiplication by a power of 10.\nBenchmarking unscaled values makes addition benchmark more synthetic."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTYyOTM4", "url": "https://github.com/trinodb/trino/pull/4886#pullrequestreview-484162938", "createdAt": "2020-09-08T13:53:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MzowMlrOHOeRoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MzowMlrOHOeRoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzODE0NA==", "bodyText": "It's not inlined method as unsignedCompare can return -1, 0 or 1.\nCould you extract unsignedIsSmaller method and add a comment what it's based on?", "url": "https://github.com/trinodb/trino/pull/4886#discussion_r484938144", "createdAt": "2020-09-08T13:53:02Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -353,77 +352,42 @@ else if (compare < 0) {\n      */\n     private static long addUnsignedReturnOverflow(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) + toUnsignedLong(r0);\n+        long z0 = l0 + r0;\n+        // Long.unsignedCompare() inlined", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTY1NjQ5", "url": "https://github.com/trinodb/trino/pull/4886#pullrequestreview-484165649", "createdAt": "2020-09-08T13:55:50Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1NTo1MVrOHOeZxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1NTo1MVrOHOeZxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0MDIyOQ==", "bodyText": "similar here, it's not unsignedCompare inlined. Please extract a separate method and add a comment what it's based on.", "url": "https://github.com/trinodb/trino/pull/4886#discussion_r484940229", "createdAt": "2020-09-08T13:55:51Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -353,77 +352,42 @@ else if (compare < 0) {\n      */\n     private static long addUnsignedReturnOverflow(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) + toUnsignedLong(r0);\n+        long z0 = l0 + r0;\n+        // Long.unsignedCompare() inlined\n+        // (unsigned) z0 < (unsigned) l0\n+        int overflow = z0 + Long.MIN_VALUE < l0 + Long.MIN_VALUE ? 1 : 0;\n \n-        int z0 = (int) intermediateResult;\n+        long intermediateResult = l1 + r1 + overflow;\n+        long z1 = intermediateResult & (~SIGN_LONG_MASK);\n+        pack(result, z0, z1, resultNegative);\n \n-        intermediateResult = toUnsignedLong(l1) + toUnsignedLong(r1) + (intermediateResult >>> 32);\n-\n-        int z1 = (int) intermediateResult;\n-\n-        intermediateResult = toUnsignedLong(l2) + toUnsignedLong(r2) + (intermediateResult >>> 32);\n-\n-        int z2 = (int) intermediateResult;\n-\n-        intermediateResult = toUnsignedLong(l3) + toUnsignedLong(r3) + (intermediateResult >>> 32);\n-\n-        int z3 = (int) intermediateResult & (~SIGN_INT_MASK);\n-\n-        pack(result, z0, z1, z2, z3, resultNegative);\n-\n-        return intermediateResult >> 31;\n+        return intermediateResult >>> 63;\n     }\n \n     /**\n      * This method ignores signs of the left and right and assumes that left is greater then right\n      */\n     private static void subtractUnsigned(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n-\n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) - toUnsignedLong(r0);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        int z0 = (int) intermediateResult;\n+        long z0 = l0 - r0;\n+        // Long.unsignedCompare() inlined", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTY3NDcy", "url": "https://github.com/trinodb/trino/pull/4886#pullrequestreview-484167472", "createdAt": "2020-09-08T13:57:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1NzozMVrOHOefDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1NzozMVrOHOefDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0MTU4Mg==", "bodyText": "should this be called underflow?", "url": "https://github.com/trinodb/trino/pull/4886#discussion_r484941582", "createdAt": "2020-09-08T13:57:31Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -353,77 +352,42 @@ else if (compare < 0) {\n      */\n     private static long addUnsignedReturnOverflow(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) + toUnsignedLong(r0);\n+        long z0 = l0 + r0;\n+        // Long.unsignedCompare() inlined\n+        // (unsigned) z0 < (unsigned) l0\n+        int overflow = z0 + Long.MIN_VALUE < l0 + Long.MIN_VALUE ? 1 : 0;\n \n-        int z0 = (int) intermediateResult;\n+        long intermediateResult = l1 + r1 + overflow;\n+        long z1 = intermediateResult & (~SIGN_LONG_MASK);\n+        pack(result, z0, z1, resultNegative);\n \n-        intermediateResult = toUnsignedLong(l1) + toUnsignedLong(r1) + (intermediateResult >>> 32);\n-\n-        int z1 = (int) intermediateResult;\n-\n-        intermediateResult = toUnsignedLong(l2) + toUnsignedLong(r2) + (intermediateResult >>> 32);\n-\n-        int z2 = (int) intermediateResult;\n-\n-        intermediateResult = toUnsignedLong(l3) + toUnsignedLong(r3) + (intermediateResult >>> 32);\n-\n-        int z3 = (int) intermediateResult & (~SIGN_INT_MASK);\n-\n-        pack(result, z0, z1, z2, z3, resultNegative);\n-\n-        return intermediateResult >> 31;\n+        return intermediateResult >>> 63;\n     }\n \n     /**\n      * This method ignores signs of the left and right and assumes that left is greater then right\n      */\n     private static void subtractUnsigned(Slice left, Slice right, Slice result, boolean resultNegative)\n     {\n-        // TODO: consider two 7 bytes operations\n-        int l0 = getInt(left, 0);\n-        int l1 = getInt(left, 1);\n-        int l2 = getInt(left, 2);\n-        int l3 = getInt(left, 3);\n-\n-        int r0 = getInt(right, 0);\n-        int r1 = getInt(right, 1);\n-        int r2 = getInt(right, 2);\n-        int r3 = getInt(right, 3);\n+        long l0 = getLong(left, 0);\n+        long l1 = getLong(left, 1);\n \n-        long intermediateResult;\n-        intermediateResult = toUnsignedLong(l0) - toUnsignedLong(r0);\n+        long r0 = getLong(right, 0);\n+        long r1 = getLong(right, 1);\n \n-        int z0 = (int) intermediateResult;\n+        long z0 = l0 - r0;\n+        // Long.unsignedCompare() inlined\n+        // (unsigned) z0 > (unsigned) l0\n+        int overflow = z0 + Long.MIN_VALUE > l0 + Long.MIN_VALUE ? 1 : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7cb2f0c8f9c88505ce4f6413bf9ae2a0cdf8b05", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/c7cb2f0c8f9c88505ce4f6413bf9ae2a0cdf8b05", "committedDate": "2020-09-09T08:02:30Z", "message": "Make 128-bit addition use 2*64 bit values\n\nAs opposed to 4*32 bit values.\nDone for subtraction as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53ce46edbbae48c78e87dca483cd60650b1dd6e0", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/53ce46edbbae48c78e87dca483cd60650b1dd6e0", "committedDate": "2020-09-09T08:02:37Z", "message": "Extract local variable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "53ce46edbbae48c78e87dca483cd60650b1dd6e0", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/53ce46edbbae48c78e87dca483cd60650b1dd6e0", "committedDate": "2020-09-09T08:02:37Z", "message": "Extract local variable"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4450, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}