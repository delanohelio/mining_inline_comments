{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTcyMTY3", "number": 3685, "title": "Add presto-ml doc", "bodyText": "Purpose\nPresto has been providing machine learning functionality. Although its capability is limited and no active development happens in this module, partially that might result from the lack of official documentation. Without any clear description of the feature, we cannot expect even any feedback from the community.\nThis change is for adding the new page in the documentation describing the available functionality in presto-ml module. The page would be helpful for the community to keep in touch with the ML module and collecting some interests or feedback for it.\n\nFixes: #662\nOverview\n\nAdd a new page describing the available functionality of presto-ml in the official documentation.", "createdAt": "2020-05-09T12:57:38Z", "url": "https://github.com/trinodb/trino/pull/3685", "merged": true, "mergeCommit": {"oid": "42669fe10ac2d47a8db15469fcb36a44e8228717"}, "closed": true, "closedAt": "2020-05-20T12:41:00Z", "author": {"login": "Lewuathe"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgXu9XAFqTQwOTU3MzE2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABciU4a1ABqjMzNDUxMTA1Nzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NTczMTYx", "url": "https://github.com/trinodb/trino/pull/3685#pullrequestreview-409573161", "createdAt": "2020-05-11T22:23:39Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjoyMzozOVrOGTvfRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo1MDozNlrOGTwF2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NDE4Mg==", "bodyText": "same length required as title", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423354182", "createdAt": "2020-05-11T22:23:39Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NDI1Ng==", "bodyText": "length", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423354256", "createdAt": "2020-05-11T22:23:52Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NDQ2NQ==", "bodyText": "remove \"in Presto\"", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423354465", "createdAt": "2020-05-11T22:24:21Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NDY5Ng==", "bodyText": "It enables you to train", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423354696", "createdAt": "2020-05-11T22:24:59Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NTA4NA==", "bodyText": "should it be \"classifiers and regressors\" or is an article missing earlier in this sentence?", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423355084", "createdAt": "2020-05-11T22:25:47Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NTQ2NQ==", "bodyText": "The machine learning functions are not optimized for distributed processing. The capability to train large data sets is limited by this execution of the final training on a single instance.", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423355465", "createdAt": "2020-05-11T22:26:49Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NjA0Mw==", "bodyText": "Also ... ideally keep it to 80 char line length", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423356043", "createdAt": "2020-05-11T22:28:23Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NTQ2NQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NjI5Mg==", "bodyText": "empty line after this", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423356292", "createdAt": "2020-05-11T22:28:55Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NjUyMQ==", "bodyText": "technique,", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423356521", "createdAt": "2020-05-11T22:29:32Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1ODAwOQ==", "bodyText": "a An ?", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423358009", "createdAt": "2020-05-11T22:33:21Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1ODYyOQ==", "bodyText": "In Presto, a feature vector is represented as a map-type value, whose key is an index of each feature, so that it can express a sparse vector.", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423358629", "createdAt": "2020-05-11T22:35:02Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1ODcyMw==", "bodyText": "Remove \"in Presto\"", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423358723", "createdAt": "2020-05-11T22:35:15Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1ODc4Nw==", "bodyText": "map-type", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423358787", "createdAt": "2020-05-11T22:35:26Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1OTkxOQ==", "bodyText": "Confusing sentence.. maybe\nThe interface looks similar to the construction of the SVM model from the sequence of pairs of labels and features implemented in Teradata Aster or BigQuery ML.", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423359919", "createdAt": "2020-05-11T22:38:26Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MDUxMw==", "bodyText": "would it make sense to break this in multiple lines?\nlearn_classifier(species,\n                 features(sepal_length, sepal_width, petal_length, petal_width)\n                 )", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423360513", "createdAt": "2020-05-11T22:40:11Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MTU4Mw==", "bodyText": "Dont use \"For now\" and \"we\"\nThe trained model can not be saved natively, and needs to be passed in the format of a nested query::", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423361583", "createdAt": "2020-05-11T22:43:17Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MTcyNA==", "bodyText": "As a result you need to run the training process..", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423361724", "createdAt": "2020-05-11T22:43:44Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjIzNg==", "bodyText": "You can use learn_libsvm_classifier to control the internal parameters of the model.", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362236", "createdAt": "2020-05-11T22:45:07Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjM3Mg==", "bodyText": "problem,", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362372", "createdAt": "2020-05-11T22:45:28Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjQyNw==", "bodyText": "values ?", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362427", "createdAt": "2020-05-11T22:45:39Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjU1NQ==", "bodyText": "only use ::", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362555", "createdAt": "2020-05-11T22:46:01Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjYzMA==", "bodyText": "same .. just ::", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362630", "createdAt": "2020-05-11T22:46:14Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjcwMA==", "bodyText": "remove \"also\"", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362700", "createdAt": "2020-05-11T22:46:28Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjgxMQ==", "bodyText": "remove \"flexibly\"", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362811", "createdAt": "2020-05-11T22:46:49Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzE1MA==", "bodyText": "model, trained with..", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363150", "createdAt": "2020-05-11T22:47:50Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzIzMQ==", "bodyText": "model, trained", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363231", "createdAt": "2020-05-11T22:48:01Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzMyMg==", "bodyText": "parameters", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363322", "createdAt": "2020-05-11T22:48:18Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+    You can control the training process by libsvm params.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzQyMA==", "bodyText": "model, trained...", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363420", "createdAt": "2020-05-11T22:48:35Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+    You can control the training process by libsvm params.\n+\n+.. function:: classify(features, model) -> label\n+\n+    Returns a label predicted by the given classifier SVM model.\n+\n+.. function:: learn_regressor(target, features) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzUxMA==", "bodyText": "model, trained..", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363510", "createdAt": "2020-05-11T22:48:52Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+    You can control the training process by libsvm params.\n+\n+.. function:: classify(features, model) -> label\n+\n+    Returns a label predicted by the given classifier SVM model.\n+\n+.. function:: learn_regressor(target, features) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.\n+\n+.. function:: learn_libsvm_regressor(target, features, params) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzU3Nw==", "bodyText": "parameters.", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363577", "createdAt": "2020-05-11T22:49:03Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+    You can control the training process by libsvm params.\n+\n+.. function:: classify(features, model) -> label\n+\n+    Returns a label predicted by the given classifier SVM model.\n+\n+.. function:: learn_regressor(target, features) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.\n+\n+.. function:: learn_libsvm_regressor(target, features, params) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.\n+    You can control the training process by libsvm params.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NDA1Nw==", "bodyText": "All these functions should be added to the index as well. https://github.com/prestosql/presto/blob/master/presto-docs/src/main/sphinx/functions/list.rst", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423364057", "createdAt": "2020-05-11T22:50:36Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzk0MTAz", "url": "https://github.com/trinodb/trino/pull/3685#pullrequestreview-410394103", "createdAt": "2020-05-12T20:24:09Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNjM1OTU4", "url": "https://github.com/trinodb/trino/pull/3685#pullrequestreview-412635958", "createdAt": "2020-05-15T13:13:12Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoxMzoxMlrOGWER-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzozMDoxMVrOGWE8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5MTk5Mw==", "bodyText": "I suppose functions/list should be bottom. Could you move this line to before functions/list? (cc: @mosabua)\nOtherwise, the generated page will be like this.", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425791993", "createdAt": "2020-05-15T13:13:12Z", "author": {"login": "ebyhr"}, "path": "presto-docs/src/main/sphinx/functions.rst", "diffHunk": "@@ -42,3 +42,4 @@ If you are looking for more information about a specific function or operator,\n     functions/session\n     functions/teradata\n     functions/list\n+    functions/ml", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5MzA4OA==", "bodyText": "CI failured by this line.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            be described as :ref:`double`::\n          \n          \n            \n            be described as ``double``.", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425793088", "createdAt": "2020-05-15T13:15:02Z", "author": {"login": "ebyhr"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,158 @@\n+==========================\n+Machine Learning Functions\n+==========================\n+\n+The machine learning plugin provides machine learning functionality\n+as an aggregation function. It enables you to train Support Vector Machine (SVM)\n+based classifiers and regressors for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+\n+  The machine learning functions are not optimized for distributed processing.\n+  The capability to train large data sets is limited by this execution of the\n+  final training on a single instance.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique, especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+A N-dimensional vector whose elements are numerical values. In Presto, a\n+feature vector is represented as a map-type value, whose key is an index\n+of each feature, so that it can express a sparse vector.\n+Since classifiers and regressors can recognize the map-type feature\n+vector, there is a function to construct the feature from the existing\n+numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks similar to the\n+construction of the SVM model from the sequence of pairs of labels and features\n+implemented in Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_.\n+The function to train a classification model looks like as follows::\n+\n+    SELECT\n+      learn_classifier(\n+        species,\n+        features(sepal_length, sepal_width, petal_length, petal_width)\n+      )\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model.\n+The trained model can not be saved natively, and needs to be passed in\n+the format of a nested query::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+As a result you need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+You can use :func:`learn_libsvm_classifier` to control the internal parameters of the model.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem, predicting continuous\n+value, unlike the classification problem. The target must be numerical values that can\n+be described as :ref:`double`::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5Mzk3Nw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Regression\n          \n          \n            \n            -----------\n          \n          \n            \n            Regression\n          \n          \n            \n            ----------", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425793977", "createdAt": "2020-05-15T13:16:24Z", "author": {"login": "ebyhr"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,158 @@\n+==========================\n+Machine Learning Functions\n+==========================\n+\n+The machine learning plugin provides machine learning functionality\n+as an aggregation function. It enables you to train Support Vector Machine (SVM)\n+based classifiers and regressors for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+\n+  The machine learning functions are not optimized for distributed processing.\n+  The capability to train large data sets is limited by this execution of the\n+  final training on a single instance.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique, especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+A N-dimensional vector whose elements are numerical values. In Presto, a\n+feature vector is represented as a map-type value, whose key is an index\n+of each feature, so that it can express a sparse vector.\n+Since classifiers and regressors can recognize the map-type feature\n+vector, there is a function to construct the feature from the existing\n+numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks similar to the\n+construction of the SVM model from the sequence of pairs of labels and features\n+implemented in Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_.\n+The function to train a classification model looks like as follows::\n+\n+    SELECT\n+      learn_classifier(\n+        species,\n+        features(sepal_length, sepal_width, petal_length, petal_width)\n+      )\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model.\n+The trained model can not be saved natively, and needs to be passed in\n+the format of a nested query::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+As a result you need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+You can use :func:`learn_libsvm_classifier` to control the internal parameters of the model.\n+\n+Regression\n+-----------", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5NDExNg==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Classification\n          \n          \n            \n            ---------------\n          \n          \n            \n            Classification\n          \n          \n            \n            --------------", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425794116", "createdAt": "2020-05-15T13:16:38Z", "author": {"login": "ebyhr"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,158 @@\n+==========================\n+Machine Learning Functions\n+==========================\n+\n+The machine learning plugin provides machine learning functionality\n+as an aggregation function. It enables you to train Support Vector Machine (SVM)\n+based classifiers and regressors for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+\n+  The machine learning functions are not optimized for distributed processing.\n+  The capability to train large data sets is limited by this execution of the\n+  final training on a single instance.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique, especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+A N-dimensional vector whose elements are numerical values. In Presto, a\n+feature vector is represented as a map-type value, whose key is an index\n+of each feature, so that it can express a sparse vector.\n+Since classifiers and regressors can recognize the map-type feature\n+vector, there is a function to construct the feature from the existing\n+numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMjg1NQ==", "bodyText": "Some other queries are missing as of column alias and following ;. Could you add it to be consistent in this page?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SELECT features(1.0, 2.0, 3.0) features;\n          \n          \n            \n                SELECT features(1.0, 2.0, 3.0) as features;", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425802855", "createdAt": "2020-05-15T13:30:11Z", "author": {"login": "ebyhr"}, "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,158 @@\n+==========================\n+Machine Learning Functions\n+==========================\n+\n+The machine learning plugin provides machine learning functionality\n+as an aggregation function. It enables you to train Support Vector Machine (SVM)\n+based classifiers and regressors for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+\n+  The machine learning functions are not optimized for distributed processing.\n+  The capability to train large data sets is limited by this execution of the\n+  final training on a single instance.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique, especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+A N-dimensional vector whose elements are numerical values. In Presto, a\n+feature vector is represented as a map-type value, whose key is an index\n+of each feature, so that it can express a sparse vector.\n+Since classifiers and regressors can recognize the map-type feature\n+vector, there is a function to construct the feature from the existing\n+numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "754a2f2bb7c3ee7ab9e198e1bb2cf27d6565285a", "author": {"user": {"login": "Lewuathe", "name": "Kai Sasaki"}}, "url": "https://github.com/trinodb/trino/commit/754a2f2bb7c3ee7ab9e198e1bb2cf27d6565285a", "committedDate": "2020-05-18T00:39:05Z", "message": "Add presto-ml doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "754a2f2bb7c3ee7ab9e198e1bb2cf27d6565285a", "author": {"user": {"login": "Lewuathe", "name": "Kai Sasaki"}}, "url": "https://github.com/trinodb/trino/commit/754a2f2bb7c3ee7ab9e198e1bb2cf27d6565285a", "committedDate": "2020-05-18T00:39:05Z", "message": "Add presto-ml doc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1442, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}