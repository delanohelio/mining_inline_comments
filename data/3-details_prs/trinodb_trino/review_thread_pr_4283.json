{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjI1MTgz", "number": 4283, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1NTowMlrOEOCBkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo1MzozMVrOEOC8oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTQ4NjkwOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1NTowMlrOGw9h2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo0NDo0MFrOGxB7KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MjkyMA==", "bodyText": "Missing word \"table\" at end of first sentence", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r453992920", "createdAt": "2020-07-13T22:55:02Z", "author": {"login": "electrum"}, "path": "presto-iceberg/README.md", "diffHunk": "@@ -69,6 +69,23 @@ Iceberg supports `$snapshot_id` and `$snapshot_timestamp_ms` as hidden columns.\n These columns allow users to query an old version of the table. Think of this\n as a time travel feature which lets you query your table's snapshot at a given time.\n \n+## Rolling back to a previous Snapshot\n+\n+The connector provides a system snapshots table for each Iceberg.  Snapshots are", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2NDkzNw==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454064937", "createdAt": "2020-07-14T02:44:40Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/README.md", "diffHunk": "@@ -69,6 +69,23 @@ Iceberg supports `$snapshot_id` and `$snapshot_timestamp_ms` as hidden columns.\n These columns allow users to query an old version of the table. Think of this\n as a time travel feature which lets you query your table's snapshot at a given time.\n \n+## Rolling back to a previous Snapshot\n+\n+The connector provides a system snapshots table for each Iceberg.  Snapshots are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MjkyMA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTQ5MzA0OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergConnector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1Nzo0MlrOGw9lgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo0NDo0OFrOGxB7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5Mzg1OQ==", "bodyText": "I don't think we need the IcebergProcedures class. We can directly inject Set<Procedure> here, like we do in JdbcConnector.", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r453993859", "createdAt": "2020-07-13T22:57:42Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergConnector.java", "diffHunk": "@@ -71,7 +73,8 @@ public IcebergConnector(\n             List<PropertyMetadata<?>> sessionProperties,\n             List<PropertyMetadata<?>> schemaProperties,\n             List<PropertyMetadata<?>> tableProperties,\n-            ConnectorAccessControl accessControl)\n+            ConnectorAccessControl accessControl,\n+            IcebergProcedures procedures)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2NDk4Mg==", "bodyText": "Removed.  I added it because I couldn't figure out how to get the Set<Procedure> from an Injector, which is needed in InternalIcebergConnectorFactory.  I've since figured that out, and am glad to be able to remove the IcebergProcedures and IcebergProceduresModule.", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454064982", "createdAt": "2020-07-14T02:44:48Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergConnector.java", "diffHunk": "@@ -71,7 +73,8 @@ public IcebergConnector(\n             List<PropertyMetadata<?>> sessionProperties,\n             List<PropertyMetadata<?>> schemaProperties,\n             List<PropertyMetadata<?>> tableProperties,\n-            ConnectorAccessControl accessControl)\n+            ConnectorAccessControl accessControl,\n+            IcebergProcedures procedures)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5Mzg1OQ=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYwMzcyOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/InternalIcebergConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzozOTozN1rOGw-kLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo0NDo1NVrOGxB7dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwOTkwMw==", "bodyText": "Not needed here since we install it in IcebergModule", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454009903", "createdAt": "2020-07-13T23:39:37Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/InternalIcebergConnectorFactory.java", "diffHunk": "@@ -63,6 +63,7 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     new HiveAuthenticationModule(),\n                     new HiveMetastoreModule(metastore),\n                     new MBeanServerModule(),\n+                    new IcebergProceduresModule(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2NTAxMg==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454065012", "createdAt": "2020-07-14T02:44:55Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/InternalIcebergConnectorFactory.java", "diffHunk": "@@ -63,6 +63,7 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     new HiveAuthenticationModule(),\n                     new HiveMetastoreModule(metastore),\n                     new MBeanServerModule(),\n+                    new IcebergProceduresModule(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwOTkwMw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYyODY1OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/RollbackToSnapshotProcedure.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo0ODo1MVrOGw-xsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo0NToxMFrOGxB72Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMzM2MQ==", "bodyText": "Our code style is wrap all arguments if any are wrapped (all or none).", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454013361", "createdAt": "2020-07-13T23:48:51Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/RollbackToSnapshotProcedure.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.hive.HdfsEnvironment;\n+import io.prestosql.plugin.hive.metastore.HiveMetastore;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.apache.iceberg.BaseTable;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.prestosql.plugin.iceberg.IcebergUtil.getIcebergTable;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RollbackToSnapshotProcedure\n+        implements Provider<Procedure>\n+{\n+    private static final MethodHandle ROLLBACK_TO_SNAPSHOT = methodHandle(RollbackToSnapshotProcedure.class, \"rollbackToSnapshot\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2NTExMw==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454065113", "createdAt": "2020-07-14T02:45:10Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/RollbackToSnapshotProcedure.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.hive.HdfsEnvironment;\n+import io.prestosql.plugin.hive.metastore.HiveMetastore;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.apache.iceberg.BaseTable;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.prestosql.plugin.iceberg.IcebergUtil.getIcebergTable;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RollbackToSnapshotProcedure\n+        implements Provider<Procedure>\n+{\n+    private static final MethodHandle ROLLBACK_TO_SNAPSHOT = methodHandle(RollbackToSnapshotProcedure.class, \"rollbackToSnapshot\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMzM2MQ=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYzNjc5OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/RollbackToSnapshotProcedure.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo1Mjo1NFrOGw-2aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo0NToxN1rOGxB8BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDU2OQ==", "bodyText": "rollback() is on Table so we shouldn't need to case to BaseTable here", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454014569", "createdAt": "2020-07-13T23:52:54Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/RollbackToSnapshotProcedure.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.hive.HdfsEnvironment;\n+import io.prestosql.plugin.hive.metastore.HiveMetastore;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.apache.iceberg.BaseTable;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.prestosql.plugin.iceberg.IcebergUtil.getIcebergTable;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RollbackToSnapshotProcedure\n+        implements Provider<Procedure>\n+{\n+    private static final MethodHandle ROLLBACK_TO_SNAPSHOT = methodHandle(RollbackToSnapshotProcedure.class, \"rollbackToSnapshot\",\n+            ConnectorSession.class,\n+            String.class,\n+            String.class,\n+            Long.class);\n+\n+    private final IcebergMetadataFactory metadataFactory;\n+    private final HdfsEnvironment hdfsEnvironment;\n+\n+    @Inject\n+    public RollbackToSnapshotProcedure(IcebergMetadataFactory metadataFactory, HdfsEnvironment hdfsEnvironment)\n+    {\n+        this.metadataFactory = requireNonNull(metadataFactory, \"metadataFactory is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+    }\n+\n+    @Override\n+    public Procedure get()\n+    {\n+        return new Procedure(\n+                \"system\",\n+                \"rollback_to_snapshot\",\n+                ImmutableList.of(\n+                        new Procedure.Argument(\"schema\", VARCHAR),\n+                        new Procedure.Argument(\"table\", VARCHAR),\n+                        new Procedure.Argument(\"id\", BIGINT)),\n+                ROLLBACK_TO_SNAPSHOT.bindTo(this));\n+    }\n+\n+    public void rollbackToSnapshot(ConnectorSession clientSession, String schema, String table, Long id)\n+    {\n+        SchemaTableName schemaTableName = new SchemaTableName(schema, table);\n+        IcebergMetadata metadata = metadataFactory.create();\n+        HiveMetastore metastore = metadata.getMetastore();\n+        BaseTable icebergTable = (BaseTable) getIcebergTable(metastore, hdfsEnvironment, clientSession, schemaTableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2NTE1Ng==", "bodyText": "Good point; fixed.", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454065156", "createdAt": "2020-07-14T02:45:17Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/RollbackToSnapshotProcedure.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.hive.HdfsEnvironment;\n+import io.prestosql.plugin.hive.metastore.HiveMetastore;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.apache.iceberg.BaseTable;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.prestosql.plugin.iceberg.IcebergUtil.getIcebergTable;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RollbackToSnapshotProcedure\n+        implements Provider<Procedure>\n+{\n+    private static final MethodHandle ROLLBACK_TO_SNAPSHOT = methodHandle(RollbackToSnapshotProcedure.class, \"rollbackToSnapshot\",\n+            ConnectorSession.class,\n+            String.class,\n+            String.class,\n+            Long.class);\n+\n+    private final IcebergMetadataFactory metadataFactory;\n+    private final HdfsEnvironment hdfsEnvironment;\n+\n+    @Inject\n+    public RollbackToSnapshotProcedure(IcebergMetadataFactory metadataFactory, HdfsEnvironment hdfsEnvironment)\n+    {\n+        this.metadataFactory = requireNonNull(metadataFactory, \"metadataFactory is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+    }\n+\n+    @Override\n+    public Procedure get()\n+    {\n+        return new Procedure(\n+                \"system\",\n+                \"rollback_to_snapshot\",\n+                ImmutableList.of(\n+                        new Procedure.Argument(\"schema\", VARCHAR),\n+                        new Procedure.Argument(\"table\", VARCHAR),\n+                        new Procedure.Argument(\"id\", BIGINT)),\n+                ROLLBACK_TO_SNAPSHOT.bindTo(this));\n+    }\n+\n+    public void rollbackToSnapshot(ConnectorSession clientSession, String schema, String table, Long id)\n+    {\n+        SchemaTableName schemaTableName = new SchemaTableName(schema, table);\n+        IcebergMetadata metadata = metadataFactory.create();\n+        HiveMetastore metastore = metadata.getMetastore();\n+        BaseTable icebergTable = (BaseTable) getIcebergTable(metastore, hdfsEnvironment, clientSession, schemaTableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDU2OQ=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTYzODA4OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/RollbackToSnapshotProcedure.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzo1MzozMVrOGw-3LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo0NToyNVrOGxB8PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDc2NA==", "bodyText": "Let's call this snapshot_id to be consistent with SnapshotsTable", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454014764", "createdAt": "2020-07-13T23:53:31Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/RollbackToSnapshotProcedure.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.hive.HdfsEnvironment;\n+import io.prestosql.plugin.hive.metastore.HiveMetastore;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.apache.iceberg.BaseTable;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.prestosql.plugin.iceberg.IcebergUtil.getIcebergTable;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RollbackToSnapshotProcedure\n+        implements Provider<Procedure>\n+{\n+    private static final MethodHandle ROLLBACK_TO_SNAPSHOT = methodHandle(RollbackToSnapshotProcedure.class, \"rollbackToSnapshot\",\n+            ConnectorSession.class,\n+            String.class,\n+            String.class,\n+            Long.class);\n+\n+    private final IcebergMetadataFactory metadataFactory;\n+    private final HdfsEnvironment hdfsEnvironment;\n+\n+    @Inject\n+    public RollbackToSnapshotProcedure(IcebergMetadataFactory metadataFactory, HdfsEnvironment hdfsEnvironment)\n+    {\n+        this.metadataFactory = requireNonNull(metadataFactory, \"metadataFactory is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+    }\n+\n+    @Override\n+    public Procedure get()\n+    {\n+        return new Procedure(\n+                \"system\",\n+                \"rollback_to_snapshot\",\n+                ImmutableList.of(\n+                        new Procedure.Argument(\"schema\", VARCHAR),\n+                        new Procedure.Argument(\"table\", VARCHAR),\n+                        new Procedure.Argument(\"id\", BIGINT)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2NTIxMw==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/4283#discussion_r454065213", "createdAt": "2020-07-14T02:45:25Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/RollbackToSnapshotProcedure.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.hive.HdfsEnvironment;\n+import io.prestosql.plugin.hive.metastore.HiveMetastore;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.apache.iceberg.BaseTable;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.prestosql.plugin.iceberg.IcebergUtil.getIcebergTable;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RollbackToSnapshotProcedure\n+        implements Provider<Procedure>\n+{\n+    private static final MethodHandle ROLLBACK_TO_SNAPSHOT = methodHandle(RollbackToSnapshotProcedure.class, \"rollbackToSnapshot\",\n+            ConnectorSession.class,\n+            String.class,\n+            String.class,\n+            Long.class);\n+\n+    private final IcebergMetadataFactory metadataFactory;\n+    private final HdfsEnvironment hdfsEnvironment;\n+\n+    @Inject\n+    public RollbackToSnapshotProcedure(IcebergMetadataFactory metadataFactory, HdfsEnvironment hdfsEnvironment)\n+    {\n+        this.metadataFactory = requireNonNull(metadataFactory, \"metadataFactory is null\");\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+    }\n+\n+    @Override\n+    public Procedure get()\n+    {\n+        return new Procedure(\n+                \"system\",\n+                \"rollback_to_snapshot\",\n+                ImmutableList.of(\n+                        new Procedure.Argument(\"schema\", VARCHAR),\n+                        new Procedure.Argument(\"table\", VARCHAR),\n+                        new Procedure.Argument(\"id\", BIGINT)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDc2NA=="}, "originalCommit": null, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4006, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}