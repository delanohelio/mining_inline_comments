{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDM0MjY4", "number": 3212, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozMDoxMFrODqiz1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozMDo0NlrODqi0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTM3MTExOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduRecordCursor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozMDoxMFrOF6W7YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMzo1NToxNVrOF6gNFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNzM3Ng==", "bodyText": "Can you please add a tests where incorrect column mapping was exposed?", "url": "https://github.com/trinodb/trino/pull/3212#discussion_r396737376", "createdAt": "2020-03-23T20:30:10Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduRecordCursor.java", "diffHunk": "@@ -14,19 +14,26 @@\n package io.prestosql.plugin.kudu;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4OTM2NQ==", "bodyText": "AbstractTestQuery#testCorrelatedJoin, testTableSampleWithFiltering, testSelectAllFromOuterScopeTable exposes this incorrect table mapping. TestKuduDistributedQueries  captures most of the cases where incorrect column mapping was exposed", "url": "https://github.com/trinodb/trino/pull/3212#discussion_r396889365", "createdAt": "2020-03-24T03:55:15Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduRecordCursor.java", "diffHunk": "@@ -14,19 +14,26 @@\n package io.prestosql.plugin.kudu;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNzM3Ng=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTM3MzI5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozMDo0NlrOF6W8uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozMDo0NlrOF6W8uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNzcyMQ==", "bodyText": "this comment is not needed, the code below is self explanatory", "url": "https://github.com/trinodb/trino/pull/3212#discussion_r396737721", "createdAt": "2020-03-23T20:30:46Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduDistributedQueries.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.testing.AbstractTestDistributedQueries;\n+import io.prestosql.testing.MaterializedResult;\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.testing.sql.TestTable;\n+import io.prestosql.tpch.TpchTable;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunnerTpch;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static io.prestosql.testing.MaterializedResult.resultBuilder;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+\n+public class TestKuduDistributedQueries\n+        extends AbstractTestDistributedQueries\n+{\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunnerTpch(kuduServer, Optional.of(\"\"), TpchTable.getTables());\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Override\n+    protected boolean supportsViews()\n+    {\n+        return false;\n+    }\n+\n+    @Override\n+    protected boolean supportsArrays()\n+    {\n+        return false;\n+    }\n+\n+    @Override\n+    protected TestTable createTableWithDefaultColumns()\n+    {\n+        throw new SkipException(\"Kudu connector does not support column default values\");\n+    }\n+\n+    @Override\n+    public void testInsert()\n+    {\n+        // TODO Support these test once kudu connector can create tables with default partitions\n+    }\n+\n+    @Override\n+    public void testDataMappingSmokeTest(DataMappingTestSetup dataMappingTestSetup)\n+    {\n+        // TODO Support these test once kudu connector can create tables with default partitions\n+    }\n+\n+    @Override\n+    public void testAddColumn()\n+    {\n+        // TODO Support these test once kudu connector can create tables with default partitions\n+    }\n+\n+    @Override\n+    public void testCreateTable()\n+    {\n+        // TODO Support these test once kudu connector can create tables with default partitions\n+    }\n+\n+    @Override\n+    public void testInsertUnicode()\n+    {\n+        // TODO Support these test once kudu connector can create tables with default partitions\n+    }\n+\n+    @Override\n+    public void testInsertWithCoercion()\n+    {\n+        // Override because of non-canonical varchar mapping\n+    }\n+\n+    @Override\n+    public void testDelete()\n+    {\n+        // TODO Support these test once kudu connector can create tables with default partitions\n+    }\n+\n+    @Override\n+    public void testShowColumns()\n+    {\n+        MaterializedResult actual = computeActual(\"SHOW COLUMNS FROM orders\");\n+\n+        MaterializedResult expectedParametrizedVarchar = resultBuilder(getSession(), VARCHAR, VARCHAR, VARCHAR, VARCHAR)\n+                .row(\"orderkey\", \"bigint\", \"nullable, encoding=auto, compression=default\", \"\")\n+                .row(\"custkey\", \"bigint\", \"nullable, encoding=auto, compression=default\", \"\")\n+                .row(\"orderstatus\", \"varchar\", \"nullable, encoding=auto, compression=default\", \"\")\n+                .row(\"totalprice\", \"double\", \"nullable, encoding=auto, compression=default\", \"\")\n+                .row(\"orderdate\", \"varchar\", \"nullable, encoding=auto, compression=default\", \"\")\n+                .row(\"orderpriority\", \"varchar\", \"nullable, encoding=auto, compression=default\", \"\")\n+                .row(\"clerk\", \"varchar\", \"nullable, encoding=auto, compression=default\", \"\")\n+                .row(\"shippriority\", \"integer\", \"nullable, encoding=auto, compression=default\", \"\")\n+                .row(\"comment\", \"varchar\", \"nullable, encoding=auto, compression=default\", \"\")\n+                .build();\n+\n+        assertEquals(actual, expectedParametrizedVarchar);\n+    }\n+\n+    @Override\n+    public void testDescribeOutput()\n+    {\n+        // this connector uses a non-canonical type for varchar columns in tpch\n+    }\n+\n+    @Override\n+    public void testDescribeOutputNamedAndUnnamed()\n+    {\n+        // this connector uses a non-canonical type for varchar columns in tpch\n+    }\n+\n+    @Override\n+    public void testCommentTable()\n+    {\n+        // Kudu connector currently does not support comment on table", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 467, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}