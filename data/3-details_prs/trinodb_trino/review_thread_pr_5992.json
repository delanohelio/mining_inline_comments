{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjU2MTkx", "number": 5992, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo1Mjo0N1rOE6MnIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxNTozNVrOE6QfiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDU5NDkxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo1Mjo0N1rOH1HToA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo1Mjo0N1rOH1HToA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1NjI4OA==", "bodyText": ".mapToInt(String::length)\n.max()\n.orElse(0);\n\nwhat about", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525456288", "createdAt": "2020-11-17T19:52:47Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -216,47 +218,65 @@ public void containerStopping(DockerContainer container, InspectContainerRespons\n     static EnvironmentListener statsPrintingListener()\n     {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(2, daemonThreadsNamed(\"container-stats-%d\"));\n-        List<ScheduledFuture<?>> futures = new ArrayList<>();\n+        Map<String, StatisticsFetcher> fetchers = new HashMap<>();\n \n         return new EnvironmentListener()\n         {\n             @Override\n-            public void containerStarting(DockerContainer container, InspectContainerResponse response)\n+            public void containerStarted(DockerContainer container, InspectContainerResponse response)\n             {\n-                // Print stats every 30 seconds\n-                futures.add(executorService.scheduleWithFixedDelay(() ->\n-                {\n-                    StatisticsFetcher.Stats stats = container.getStats();\n-                    if (stats.areCalculated()) {\n-                        log.info(\"%s - %s\", container.getLogicalName(), container.getStats());\n-                    }\n-                }, 5 * 1000L, 30 * 1000L, MILLISECONDS));\n+                // Start listening on statistics stream\n+                fetcher(container).start();\n             }\n \n             @Override\n-            public void containerStopping(DockerContainer container, InspectContainerResponse response)\n+            public void environmentStopping(Environment environment)\n             {\n-                log.info(\"Container %s final statistics - %s\", container, container.getStats());\n-            }\n+                log.info(\"Container final stats: \");\n+                printContainerStats();\n \n-            @Override\n-            public void containerStarted(DockerContainer container, InspectContainerResponse containerInfo)\n-            {\n-                // Force fetching of stats so CPU usage can be calculated from delta\n-                container.getStats();\n+                fetchers.values().forEach(StatisticsFetcher::close);\n+                executorService.shutdownNow();\n             }\n \n             @Override\n-            public void environmentStopping(Environment environment)\n+            public void environmentStarted(Environment environment)\n             {\n-                futures.forEach(future -> future.cancel(true));\n+                // Print stats for all containers every 30s after environment is started\n+                executorService.scheduleWithFixedDelay(() ->\n+                {\n+                    log.info(\"Container stats:\");\n+                    printContainerStats();\n+                }, 5 * 1000L, 30 * 1000L, MILLISECONDS);\n             }\n \n             @Override\n             public void environmentStopped(Environment environment)\n             {\n                 executorService.shutdown();\n             }\n+\n+            private StatisticsFetcher fetcher(DockerContainer container)\n+            {\n+                return fetchers.computeIfAbsent(container.getLogicalName(), key -> new StatisticsFetcher(container.getContainerId(), container.getLogicalName()));\n+            }\n+\n+            private void printContainerStats()\n+            {\n+                int maxLength = fetchers.keySet().stream()\n+                        .map(String::length)\n+                        .max(Integer::compareTo)\n+                        .get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTE3MDQ5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1NzozM1rOH1NIVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTozNTozMVrOH1k4CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MTcwMA==", "bodyText": "nit: closing and then printing seems more natural.", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525551700", "createdAt": "2020-11-17T21:57:33Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -216,47 +218,65 @@ public void containerStopping(DockerContainer container, InspectContainerRespons\n     static EnvironmentListener statsPrintingListener()\n     {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(2, daemonThreadsNamed(\"container-stats-%d\"));\n-        List<ScheduledFuture<?>> futures = new ArrayList<>();\n+        Map<String, StatisticsFetcher> fetchers = new TreeMap<>(); // keep map sorted\n \n         return new EnvironmentListener()\n         {\n             @Override\n-            public void containerStarting(DockerContainer container, InspectContainerResponse response)\n+            public void containerStarted(DockerContainer container, InspectContainerResponse response)\n             {\n-                // Print stats every 30 seconds\n-                futures.add(executorService.scheduleWithFixedDelay(() ->\n-                {\n-                    StatisticsFetcher.Stats stats = container.getStats();\n-                    if (stats.areCalculated()) {\n-                        log.info(\"%s - %s\", container.getLogicalName(), container.getStats());\n-                    }\n-                }, 5 * 1000L, 30 * 1000L, MILLISECONDS));\n+                // Start listening on statistics stream\n+                fetcher(container).start();\n             }\n \n             @Override\n-            public void containerStopping(DockerContainer container, InspectContainerResponse response)\n+            public void environmentStopping(Environment environment)\n             {\n-                log.info(\"Container %s final statistics - %s\", container, container.getStats());\n-            }\n+                log.info(\"Container final stats: \");\n+                printContainerStats();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk0MDc0NA==", "bodyText": "makes sense", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525940744", "createdAt": "2020-11-18T09:35:31Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -216,47 +218,65 @@ public void containerStopping(DockerContainer container, InspectContainerRespons\n     static EnvironmentListener statsPrintingListener()\n     {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(2, daemonThreadsNamed(\"container-stats-%d\"));\n-        List<ScheduledFuture<?>> futures = new ArrayList<>();\n+        Map<String, StatisticsFetcher> fetchers = new TreeMap<>(); // keep map sorted\n \n         return new EnvironmentListener()\n         {\n             @Override\n-            public void containerStarting(DockerContainer container, InspectContainerResponse response)\n+            public void containerStarted(DockerContainer container, InspectContainerResponse response)\n             {\n-                // Print stats every 30 seconds\n-                futures.add(executorService.scheduleWithFixedDelay(() ->\n-                {\n-                    StatisticsFetcher.Stats stats = container.getStats();\n-                    if (stats.areCalculated()) {\n-                        log.info(\"%s - %s\", container.getLogicalName(), container.getStats());\n-                    }\n-                }, 5 * 1000L, 30 * 1000L, MILLISECONDS));\n+                // Start listening on statistics stream\n+                fetcher(container).start();\n             }\n \n             @Override\n-            public void containerStopping(DockerContainer container, InspectContainerResponse response)\n+            public void environmentStopping(Environment environment)\n             {\n-                log.info(\"Container %s final statistics - %s\", container, container.getStats());\n-            }\n+                log.info(\"Container final stats: \");\n+                printContainerStats();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MTcwMA=="}, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTE3Njk4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1OTozMlrOH1NMVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDozOTozNFrOH1w7YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjcyNQ==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525552725", "createdAt": "2020-11-17T21:59:32Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1Njg1OA==", "bodyText": "actually this one does not seem to be used at all", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525556858", "createdAt": "2020-11-17T22:07:27Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjcyNQ=="}, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEzODIwOA==", "bodyText": "It is now", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r526138208", "createdAt": "2020-11-18T14:39:34Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjcyNQ=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTE3NzczOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1OTo0MlrOH1NMtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1OTo0MlrOH1NMtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjgyMw==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525552823", "createdAt": "2020-11-17T21:59:42Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);\n+    private AtomicBoolean closed = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTIyMjQyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxMzowOFrOH1Nnow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDo0MDoxMVrOH1w9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1OTcxNQ==", "bodyText": "Do we need to close callbackClosable here. I would expect not given fact that this close is called by dockerjava", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525559715", "createdAt": "2020-11-17T22:13:08Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -87,20 +101,56 @@ private Stats toStats(Statistics statistics, Stats previousStats)\n         }\n \n         MemoryStatsConfig memoryStats = statistics.getMemoryStats();\n-        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).succinct();\n-        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).succinct();\n-        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).succinct();\n+        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).to(GIGABYTE);\n+        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).to(GIGABYTE);\n+        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).to(GIGABYTE);\n         stats.memoryUsagePerc = 100.0 * memoryStats.getUsage() / memoryStats.getLimit();\n \n         stats.pids = statistics.getPidsStats().getCurrent();\n \n         Supplier<Stream<StatisticNetworksConfig>> stream = () -> statistics.getNetworks().values().stream();\n-        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n-        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n+        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n \n         return stats;\n     }\n \n+    private class StatisticsCallback\n+            implements ResultCallback<Statistics>\n+    {\n+        @Override\n+        public void onNext(Statistics statistics)\n+        {\n+            lastStats.getAndUpdate(previousStats -> toStats(statistics, previousStats));\n+        }\n+\n+        @Override\n+        public void onStart(Closeable closeable)\n+        {\n+            callbackCloseable = closeable;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable)\n+        {\n+            // we don't care here - in worst case scenario we will just have stale statistics\n+        }\n+\n+        @Override\n+        public void onComplete()\n+        {\n+            log.info(\"Statistics for container %s stopped streaming\", containerLogicalName);\n+        }\n+\n+        @Override\n+        public void close()\n+                throws IOException\n+        {\n+            callbackCloseable.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEzODY4OQ==", "bodyText": "We need if we close before stream ends (ie when pt timeout occurs)", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r526138689", "createdAt": "2020-11-18T14:40:11Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -87,20 +101,56 @@ private Stats toStats(Statistics statistics, Stats previousStats)\n         }\n \n         MemoryStatsConfig memoryStats = statistics.getMemoryStats();\n-        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).succinct();\n-        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).succinct();\n-        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).succinct();\n+        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).to(GIGABYTE);\n+        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).to(GIGABYTE);\n+        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).to(GIGABYTE);\n         stats.memoryUsagePerc = 100.0 * memoryStats.getUsage() / memoryStats.getLimit();\n \n         stats.pids = statistics.getPidsStats().getCurrent();\n \n         Supplier<Stream<StatisticNetworksConfig>> stream = () -> statistics.getNetworks().values().stream();\n-        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n-        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n+        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n \n         return stats;\n     }\n \n+    private class StatisticsCallback\n+            implements ResultCallback<Statistics>\n+    {\n+        @Override\n+        public void onNext(Statistics statistics)\n+        {\n+            lastStats.getAndUpdate(previousStats -> toStats(statistics, previousStats));\n+        }\n+\n+        @Override\n+        public void onStart(Closeable closeable)\n+        {\n+            callbackCloseable = closeable;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable)\n+        {\n+            // we don't care here - in worst case scenario we will just have stale statistics\n+        }\n+\n+        @Override\n+        public void onComplete()\n+        {\n+            log.info(\"Statistics for container %s stopped streaming\", containerLogicalName);\n+        }\n+\n+        @Override\n+        public void close()\n+                throws IOException\n+        {\n+            callbackCloseable.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1OTcxNQ=="}, "originalCommit": null, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTIyNTk3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxNDoxM1rOH1NpsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDozODowMlrOH1w2wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MDI0MA==", "bodyText": "it is not obvious that callbackClosable cannot be null.", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525560240", "createdAt": "2020-11-17T22:14:13Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);\n+    private AtomicBoolean closed = new AtomicBoolean(false);\n+    private Closeable callbackCloseable;\n \n-    public StatisticsFetcher(DockerContainer container, FailsafeExecutor executor)\n+    public StatisticsFetcher(String containerId, String containerLogicalName)\n     {\n-        this.container = requireNonNull(container, \"container is null\");\n-        this.executor = requireNonNull(executor, \"executor is null\");\n+        this.containerId = requireNonNull(containerId, \"containerId is null\");\n+        this.containerLogicalName = requireNonNull(containerLogicalName, \"containerLogicalName is null\");\n     }\n \n     public Stats get()\n     {\n-        if (!container.isRunning()) {\n-            log.warn(\"Could not get statistics for stopped container %s\", container.getLogicalName());\n-            return lastStats.get();\n-        }\n+        return lastStats.get();\n+    }\n \n-        try (InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>()) {\n-            DockerClientFactory.lazyClient().statsCmd(container.getContainerId()).exec(callback);\n+    public void start()\n+    {\n+        DockerClientFactory.lazyClient()\n+                .statsCmd(containerId)\n+                .exec(new StatisticsCallback());\n \n-            return lastStats.getAndUpdate(previousStats -> toStats((Statistics) executor.get(callback::awaitResult), previousStats));\n-        }\n-        catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-        catch (RuntimeException e) {\n-            log.error(e, \"Could not fetch container %s statistics\", container.getLogicalName());\n-            return lastStats.get();\n+        log.info(\"Started listening for container %s statistics stream...\", containerLogicalName);\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        if (closed.compareAndSet(false, true)) {\n+            try {\n+                callbackCloseable.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEzNzAyNQ==", "bodyText": "It\u2019s not but I can add an assertion here", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r526137025", "createdAt": "2020-11-18T14:38:02Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -13,55 +13,69 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n+import com.github.dockerjava.api.async.ResultCallback;\n import com.github.dockerjava.api.model.MemoryStatsConfig;\n import com.github.dockerjava.api.model.StatisticNetworksConfig;\n import com.github.dockerjava.api.model.Statistics;\n-import com.github.dockerjava.core.InvocationBuilder;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n import io.airlift.log.Logger;\n import io.airlift.units.DataSize;\n-import net.jodah.failsafe.FailsafeExecutor;\n import org.testcontainers.DockerClientFactory;\n \n+import java.io.Closeable;\n import java.io.IOException;\n-import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n \n+import static io.airlift.units.DataSize.Unit.GIGABYTE;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class StatisticsFetcher\n+        implements AutoCloseable\n {\n-    private final DockerContainer container;\n-    private final FailsafeExecutor executor;\n+    private final String containerId;\n     private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private final String containerLogicalName;\n     private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+    private AtomicBoolean started = new AtomicBoolean(false);\n+    private AtomicBoolean closed = new AtomicBoolean(false);\n+    private Closeable callbackCloseable;\n \n-    public StatisticsFetcher(DockerContainer container, FailsafeExecutor executor)\n+    public StatisticsFetcher(String containerId, String containerLogicalName)\n     {\n-        this.container = requireNonNull(container, \"container is null\");\n-        this.executor = requireNonNull(executor, \"executor is null\");\n+        this.containerId = requireNonNull(containerId, \"containerId is null\");\n+        this.containerLogicalName = requireNonNull(containerLogicalName, \"containerLogicalName is null\");\n     }\n \n     public Stats get()\n     {\n-        if (!container.isRunning()) {\n-            log.warn(\"Could not get statistics for stopped container %s\", container.getLogicalName());\n-            return lastStats.get();\n-        }\n+        return lastStats.get();\n+    }\n \n-        try (InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>()) {\n-            DockerClientFactory.lazyClient().statsCmd(container.getContainerId()).exec(callback);\n+    public void start()\n+    {\n+        DockerClientFactory.lazyClient()\n+                .statsCmd(containerId)\n+                .exec(new StatisticsCallback());\n \n-            return lastStats.getAndUpdate(previousStats -> toStats((Statistics) executor.get(callback::awaitResult), previousStats));\n-        }\n-        catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-        catch (RuntimeException e) {\n-            log.error(e, \"Could not fetch container %s statistics\", container.getLogicalName());\n-            return lastStats.get();\n+        log.info(\"Started listening for container %s statistics stream...\", containerLogicalName);\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        if (closed.compareAndSet(false, true)) {\n+            try {\n+                callbackCloseable.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MDI0MA=="}, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTIzMDgxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxNTozNVrOH1Nsbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDozODo1MFrOH1w5IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MDk0Mw==", "bodyText": "can we still log something (we are logging in onComplete)", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r525560943", "createdAt": "2020-11-17T22:15:35Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -87,20 +101,56 @@ private Stats toStats(Statistics statistics, Stats previousStats)\n         }\n \n         MemoryStatsConfig memoryStats = statistics.getMemoryStats();\n-        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).succinct();\n-        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).succinct();\n-        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).succinct();\n+        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).to(GIGABYTE);\n+        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).to(GIGABYTE);\n+        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).to(GIGABYTE);\n         stats.memoryUsagePerc = 100.0 * memoryStats.getUsage() / memoryStats.getLimit();\n \n         stats.pids = statistics.getPidsStats().getCurrent();\n \n         Supplier<Stream<StatisticNetworksConfig>> stream = () -> statistics.getNetworks().values().stream();\n-        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n-        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n+        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n \n         return stats;\n     }\n \n+    private class StatisticsCallback\n+            implements ResultCallback<Statistics>\n+    {\n+        @Override\n+        public void onNext(Statistics statistics)\n+        {\n+            lastStats.getAndUpdate(previousStats -> toStats(statistics, previousStats));\n+        }\n+\n+        @Override\n+        public void onStart(Closeable closeable)\n+        {\n+            callbackCloseable = closeable;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable)\n+        {\n+            // we don't care here - in worst case scenario we will just have stale statistics", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEzNzYzMg==", "bodyText": "It will log always (when container is stopped we will get recv() eof error)", "url": "https://github.com/trinodb/trino/pull/5992#discussion_r526137632", "createdAt": "2020-11-18T14:38:50Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -87,20 +101,56 @@ private Stats toStats(Statistics statistics, Stats previousStats)\n         }\n \n         MemoryStatsConfig memoryStats = statistics.getMemoryStats();\n-        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).succinct();\n-        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).succinct();\n-        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).succinct();\n+        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).to(GIGABYTE);\n+        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).to(GIGABYTE);\n+        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).to(GIGABYTE);\n         stats.memoryUsagePerc = 100.0 * memoryStats.getUsage() / memoryStats.getLimit();\n \n         stats.pids = statistics.getPidsStats().getCurrent();\n \n         Supplier<Stream<StatisticNetworksConfig>> stream = () -> statistics.getNetworks().values().stream();\n-        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n-        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n+        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).to(MEGABYTE);\n \n         return stats;\n     }\n \n+    private class StatisticsCallback\n+            implements ResultCallback<Statistics>\n+    {\n+        @Override\n+        public void onNext(Statistics statistics)\n+        {\n+            lastStats.getAndUpdate(previousStats -> toStats(statistics, previousStats));\n+        }\n+\n+        @Override\n+        public void onStart(Closeable closeable)\n+        {\n+            callbackCloseable = closeable;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable)\n+        {\n+            // we don't care here - in worst case scenario we will just have stale statistics", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MDk0Mw=="}, "originalCommit": null, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4813, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}