{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5Mzk0MDYw", "number": 3770, "title": "Add Oracle connection pool", "bodyText": "as asked here: #1959 (comment)\nthis is to allow to configure a oracle connection pool", "createdAt": "2020-05-18T10:01:00Z", "url": "https://github.com/trinodb/trino/pull/3770", "merged": true, "mergeCommit": {"oid": "7a15b763aa0292dedd6ab9c2d791281cf75bc0ce"}, "closed": true, "closedAt": "2020-07-07T10:54:06Z", "author": {"login": "eskabetxe"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcidh2wAFqTQxMzQ3NjUwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyi0cYgBqjM1MTk2MjczNTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDc2NTA4", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-413476508", "createdAt": "2020-05-18T10:43:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo0MzoxMFrOGWxkrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDo0MzoxMFrOGWxkrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNDA2Mg==", "bodyText": "Can we have an interface for ConnectionProvider and have implementation for for both pooledDataSource and a driver based one and bind them in the run time ?", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r426534062", "createdAt": "2020-05-18T10:43:10Z", "author": {"login": "Praveen2112"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConnectorFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.plugin.jdbc.BaseJdbcConfig;\n+import io.prestosql.plugin.jdbc.ConnectionFactory;\n+import io.prestosql.plugin.jdbc.JdbcIdentity;\n+import io.prestosql.plugin.jdbc.credential.CredentialProvider;\n+import oracle.jdbc.OracleConnection;\n+import oracle.jdbc.OracleDriver;\n+import oracle.ucp.jdbc.PoolDataSource;\n+import oracle.ucp.jdbc.PoolDataSourceFactory;\n+\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class OracleConnectorFactory\n+        implements ConnectionFactory\n+{\n+    private final String connectionUrl;\n+    private final boolean connectionPoolEnabled;\n+    private final int connectionPoolMinSize;\n+    private final int connectionPoolMaxSize;\n+    private final Properties connectionProperties;\n+    private final CredentialProvider credentialProvider;\n+\n+    private PoolDataSource pds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjQxMTM1", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-417641135", "createdAt": "2020-05-25T11:16:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToxNjowNlrOGZ9wwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToxNjowNlrOGZ9wwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3OTQ4OQ==", "bodyText": "IMO running whole DistributedQueries is superfluous. It adds a lot of test runtime. TestOraclePoolIntegrationSmokeTest should be enough.", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r429879489", "createdAt": "2020-05-25T11:16:06Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOraclePoolDistributedQueries.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.tpch.TpchTable;\n+\n+public class TestOraclePoolDistributedQueries", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjQxODQ3", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-417641847", "createdAt": "2020-05-25T11:17:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToxNzozOVrOGZ9y9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToxNzozOVrOGZ9y9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MDA1Mw==", "bodyText": "Please extract separate commit Extract a variable with Oracle JDBC version", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r429880053", "createdAt": "2020-05-25T11:17:39Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/pom.xml", "diffHunk": "@@ -16,13 +16,20 @@\n \n     <properties>\n         <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+        <dep.oracle.version>19.3.0.0</dep.oracle.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDE5MjA2", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-418019206", "createdAt": "2020-05-26T07:01:18Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowMToxOFrOGaRD6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowMToxOFrOGaRD6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5NTY4OQ==", "bodyText": "Is there a reason to have connection pooling disable by default? I would suggest having true here.", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430195689", "createdAt": "2020-05-26T07:01:18Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleConfig.java", "diffHunk": "@@ -33,6 +33,9 @@ public void testDefaults()\n                 .setVarcharMaxSize(4000)\n                 .setTimestampDefaultPrecision(6)\n                 .setNumberDefaultScale(10)\n+                .setConnectionPoolEnabled(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDIyNjky", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-418022692", "createdAt": "2020-05-26T07:07:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowNzoyMlrOGaROdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowNzoyMlrOGaROdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5ODM4OA==", "bodyText": "Inline this back it is no longer needed .", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430198388", "createdAt": "2020-05-26T07:07:22Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -47,9 +47,13 @@ protected QueryRunner createQueryRunner()\n             throws Exception\n     {\n         this.oracleServer = new TestingOracleServer();\n-        return OracleQueryRunner.createOracleQueryRunner(\n-                oracleServer,\n-                TpchTable.getTables());\n+        return createOracleQueryRunner(oracleServer, TpchTable.getTables());\n+    }\n+\n+    protected QueryRunner createOracleQueryRunner(TestingOracleServer server, Iterable<TpchTable<?>> tables)\n+            throws Exception\n+    {\n+        return OracleQueryRunner.createOracleQueryRunner(server, tables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDI0OTg2", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-418024986", "createdAt": "2020-05-26T07:11:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoxMToyMFrOGaRV7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoxMToyMFrOGaRV7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMDMwMg==", "bodyText": "Please extract abstract BaseOracleIntegrationSmokeTest with all the test changes needed for Oracle, but with createQueryRunner not implemented.\nAnd then derive TestOraclePoolIntegrationSmokeTest and TestOracleIntegrationSmokeTest from it.\nWith that we do not extend non-abstract class. And we can get rid of createOracleQueryRunner.", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430200302", "createdAt": "2020-05-26T07:11:20Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOraclePoolIntegrationSmokeTest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.tpch.TpchTable;\n+\n+public class TestOraclePoolIntegrationSmokeTest\n+        extends TestOracleIntegrationSmokeTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDQyMjIw", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-418042220", "createdAt": "2020-05-26T07:38:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTY0MzY1", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-418164365", "createdAt": "2020-05-26T10:22:59Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyMzowMFrOGaYAsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyNToxOVrOGaYFYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwOTU1NQ==", "bodyText": "rename connectionPool to dataSource", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430309555", "createdAt": "2020-05-26T10:23:00Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OraclePoolConnectorFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.plugin.jdbc.ConnectionFactory;\n+import io.prestosql.plugin.jdbc.JdbcIdentity;\n+import io.prestosql.plugin.jdbc.credential.CredentialProvider;\n+import oracle.ucp.jdbc.PoolDataSource;\n+import oracle.ucp.jdbc.PoolDataSourceFactory;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class OraclePoolConnectorFactory\n+        implements ConnectionFactory\n+{\n+    private final PoolDataSource connectionPool;\n+    private final CredentialProvider credentialProvider;\n+\n+    public OraclePoolConnectorFactory(\n+            String connectionUrl,\n+            Properties connectionProperties,\n+            CredentialProvider credentialProvider,\n+            int connectionPoolMinSize,\n+            int connectionPoolMaxSize)\n+            throws SQLException\n+    {\n+        this.credentialProvider = credentialProvider;\n+        this.connectionPool = PoolDataSourceFactory.getPoolDataSource();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMDc1Mg==", "bodyText": "I would suggest adding connectionPool.setValidateConnectionOnBorrow(true);", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430310752", "createdAt": "2020-05-26T10:25:19Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OraclePoolConnectorFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.plugin.jdbc.ConnectionFactory;\n+import io.prestosql.plugin.jdbc.JdbcIdentity;\n+import io.prestosql.plugin.jdbc.credential.CredentialProvider;\n+import oracle.ucp.jdbc.PoolDataSource;\n+import oracle.ucp.jdbc.PoolDataSourceFactory;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class OraclePoolConnectorFactory\n+        implements ConnectionFactory\n+{\n+    private final PoolDataSource connectionPool;\n+    private final CredentialProvider credentialProvider;\n+\n+    public OraclePoolConnectorFactory(\n+            String connectionUrl,\n+            Properties connectionProperties,\n+            CredentialProvider credentialProvider,\n+            int connectionPoolMinSize,\n+            int connectionPoolMaxSize)\n+            throws SQLException\n+    {\n+        this.credentialProvider = credentialProvider;\n+        this.connectionPool = PoolDataSourceFactory.getPoolDataSource();\n+\n+        //Setting connection properties of the data source\n+        this.connectionPool.setConnectionFactoryClassName(\"oracle.jdbc.pool.OracleDataSource\");\n+        this.connectionPool.setURL(connectionUrl);\n+\n+        //Setting pool properties\n+        this.connectionPool.setInitialPoolSize(connectionPoolMinSize);\n+        this.connectionPool.setMinPoolSize(connectionPoolMinSize);\n+        this.connectionPool.setMaxPoolSize(connectionPoolMaxSize);\n+        this.connectionPool.setConnectionProperties(connectionProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTQzNDQ3", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-419543447", "createdAt": "2020-05-27T19:28:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyODowMlrOGbaFEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTozNToxNVrOGbaUUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjAxNg==", "bodyText": "Nit: remove leading space", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431392016", "createdAt": "2020-05-27T19:28:02Z", "author": {"login": "electrum"}, "path": "presto-oracle/pom.xml", "diffHunk": "@@ -16,13 +16,20 @@\n \n     <properties>\n         <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+        <dep.oracle.version>19.3.0.0</dep.oracle.version>\n     </properties>\n \n     <dependencies>\n         <dependency>\n             <groupId>com.oracle.ojdbc</groupId>\n             <artifactId>ojdbc8</artifactId>\n-            <version>19.3.0.0</version>\n+            <version>${dep.oracle.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId> com.oracle.ojdbc</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjE5Mg==", "bodyText": "Nit: the \"else\" is redundant since the above always returns", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431392192", "createdAt": "2020-05-27T19:28:24Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClientModule.java", "diffHunk": "@@ -51,10 +51,20 @@ public static ConnectionFactory connectionFactory(BaseJdbcConfig config, Credent\n         Properties connectionProperties = new Properties();\n         connectionProperties.setProperty(OracleConnection.CONNECTION_PROPERTY_INCLUDE_SYNONYMS, String.valueOf(oracleConfig.isSynonymsEnabled()));\n \n-        return new DriverConnectionFactory(\n-                new OracleDriver(),\n-                config.getConnectionUrl(),\n-                connectionProperties,\n-                credentialProvider);\n+        if (oracleConfig.isConnectionPoolEnabled()) {\n+            return new OraclePoolConnectorFactory(\n+                    config.getConnectionUrl(),\n+                    connectionProperties,\n+                    credentialProvider,\n+                    oracleConfig.getConnectionPoolMinSize(),\n+                    oracleConfig.getConnectionPoolMaxSize());\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MzUzNQ==", "bodyText": "Can this be 0?", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431393535", "createdAt": "2020-05-27T19:30:47Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -95,4 +98,43 @@ public OracleConfig setTimestampDefaultPrecision(int timestampDefaultPrecision)\n         this.timestampDefaultPrecision = timestampDefaultPrecision;\n         return this;\n     }\n+\n+    @NotNull\n+    public boolean isConnectionPoolEnabled()\n+    {\n+        return connectionPoolEnabled;\n+    }\n+\n+    @Config(\"oracle.connection-pool.enabled\")\n+    public OracleConfig setConnectionPoolEnabled(boolean connectionPoolEnabled)\n+    {\n+        this.connectionPoolEnabled = connectionPoolEnabled;\n+        return this;\n+    }\n+\n+    @Min(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NDA4NQ==", "bodyText": "Add a validation:\n@AssertTrue(message = \"Pool min size cannot be larger than max size\")\npublic boolean isPoolSizedProperly()\n{\n    return getMaxPoolSize() >= getMinPoolSize();\n}", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431394085", "createdAt": "2020-05-27T19:31:47Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -95,4 +98,43 @@ public OracleConfig setTimestampDefaultPrecision(int timestampDefaultPrecision)\n         this.timestampDefaultPrecision = timestampDefaultPrecision;\n         return this;\n     }\n+\n+    @NotNull\n+    public boolean isConnectionPoolEnabled()\n+    {\n+        return connectionPoolEnabled;\n+    }\n+\n+    @Config(\"oracle.connection-pool.enabled\")\n+    public OracleConfig setConnectionPoolEnabled(boolean connectionPoolEnabled)\n+    {\n+        this.connectionPoolEnabled = connectionPoolEnabled;\n+        return this;\n+    }\n+\n+    @Min(1)\n+    public int getConnectionPoolMinSize()\n+    {\n+        return connectionPoolMinSize;\n+    }\n+\n+    @Config(\"oracle.connection-pool.min-size\")\n+    public OracleConfig setConnectionPoolMinSize(int connectionPoolMinSize)\n+    {\n+        this.connectionPoolMinSize = connectionPoolMinSize;\n+        return this;\n+    }\n+\n+    @Min(1)\n+    public int getConnectionPoolMaxSize()\n+    {\n+        return connectionPoolMaxSize;\n+    }\n+\n+    @Config(\"oracle.connection-pool.max-size\")\n+    public OracleConfig setConnectionPoolMaxSize(int connectionPoolMaxSize)\n+    {\n+        this.connectionPoolMaxSize = connectionPoolMaxSize;\n+        return this;\n+    }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTkyMA==", "bodyText": "Can we use OracleDataSource.class.getName() here?", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431395920", "createdAt": "2020-05-27T19:35:15Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OraclePoolConnectorFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.plugin.jdbc.ConnectionFactory;\n+import io.prestosql.plugin.jdbc.JdbcIdentity;\n+import io.prestosql.plugin.jdbc.credential.CredentialProvider;\n+import oracle.ucp.jdbc.PoolDataSource;\n+import oracle.ucp.jdbc.PoolDataSourceFactory;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class OraclePoolConnectorFactory\n+        implements ConnectionFactory\n+{\n+    private final PoolDataSource connectionPool;\n+    private final CredentialProvider credentialProvider;\n+\n+    public OraclePoolConnectorFactory(\n+            String connectionUrl,\n+            Properties connectionProperties,\n+            CredentialProvider credentialProvider,\n+            int connectionPoolMinSize,\n+            int connectionPoolMaxSize)\n+            throws SQLException\n+    {\n+        this.credentialProvider = credentialProvider;\n+        this.connectionPool = PoolDataSourceFactory.getPoolDataSource();\n+\n+        //Setting connection properties of the data source\n+        this.connectionPool.setConnectionFactoryClassName(\"oracle.jdbc.pool.OracleDataSource\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MDM2Nzcw", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-426036770", "createdAt": "2020-06-08T09:00:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTowMDoyM1rOGgU9gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTowMDoyM1rOGgU9gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1MTA0MA==", "bodyText": "nit: add tests for validation constraints", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r436551040", "createdAt": "2020-06-08T09:00:23Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -67,4 +71,49 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n+\n+    @NotNull\n+    public boolean isConnectionPoolEnabled()\n+    {\n+        return connectionPoolEnabled;\n+    }\n+\n+    @Config(\"oracle.connection-pool.enabled\")\n+    public OracleConfig setConnectionPoolEnabled(boolean connectionPoolEnabled)\n+    {\n+        this.connectionPoolEnabled = connectionPoolEnabled;\n+        return this;\n+    }\n+\n+    @Min(0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MDM3Mzkw", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-426037390", "createdAt": "2020-06-08T09:01:10Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNDI3OTY4", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-430427968", "createdAt": "2020-06-15T08:30:10Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTUwNTU5", "url": "https://github.com/trinodb/trino/pull/3770#pullrequestreview-430550559", "createdAt": "2020-06-15T11:22:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMToyMjoxMFrOGjt-Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMToyMzo1NlrOGjuBZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNjU1NQ==", "bodyText": "This is being added in Extract a variable with Oracle JDBC version commit. Does not look intentional.\n(Not sure why would you want to separate this btw, but maybe this was agreed upon)", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440106555", "createdAt": "2020-06-15T11:22:10Z", "author": {"login": "findepi"}, "path": "presto-oracle/pom.xml", "diffHunk": "@@ -14,13 +14,20 @@\n \n     <properties>\n         <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+        <dep.oracle.version>19.3.0.0</dep.oracle.version>\n     </properties>\n \n     <dependencies>\n         <dependency>\n             <groupId>com.oracle.ojdbc</groupId>\n             <artifactId>ojdbc8</artifactId>\n-            <version>19.3.0.0</version>\n+            <version>${dep.oracle.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId> com.oracle.ojdbc</groupId>\n+            <artifactId>ucp</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzM2Ng==", "bodyText": "the Oracle IntegrationTest cleanups should not be a separate commit\n(we should not add TestOraclePoolIntegrationSmokeTest being a copy of TestOracleIntegrationSmokeTest` and only then  extract common super class)", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440107366", "createdAt": "2020-06-15T11:23:56Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOraclePoolIntegrationSmokeTest.java", "diffHunk": "@@ -13,82 +13,16 @@\n  */\n package io.prestosql.plugin.oracle;\n \n-import io.prestosql.testing.AbstractTestIntegrationSmokeTest;\n-import io.prestosql.testing.MaterializedResult;\n import io.prestosql.testing.QueryRunner;\n import io.prestosql.tpch.TpchTable;\n-import org.testcontainers.shaded.com.google.common.collect.ImmutableList;\n-import org.testng.SkipException;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.Test;\n-\n-import static io.prestosql.spi.type.VarcharType.VARCHAR;\n-import static io.prestosql.testing.assertions.Assert.assertEquals;\n-import static io.prestosql.tpch.TpchTable.*;\n-import static io.prestosql.tpch.TpchTable.REGION;\n-import static org.assertj.core.api.Assertions.assertThat;\n \n public class TestOraclePoolIntegrationSmokeTest\n-        extends AbstractTestIntegrationSmokeTest\n+        extends BaseOracleIntegrationSmokeTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "2092bcc8953f1178919de16a4ebb00419336f54f", "author": {"user": {"login": "eskabetxe", "name": "Joao Boto"}}, "url": "https://github.com/trinodb/trino/commit/2092bcc8953f1178919de16a4ebb00419336f54f", "committedDate": "2020-07-07T08:48:37Z", "message": "Extract variable with Oracle JDBC version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39f2211eb3f54fe458a9fef80bdfeae795a13154", "author": {"user": {"login": "eskabetxe", "name": "Joao Boto"}}, "url": "https://github.com/trinodb/trino/commit/39f2211eb3f54fe458a9fef80bdfeae795a13154", "committedDate": "2020-07-07T08:48:37Z", "message": "Clean OracleQueryRunner method overload"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c877859e71286a9c233834690d49ae3e2607da8", "author": {"user": {"login": "eskabetxe", "name": "Joao Boto"}}, "url": "https://github.com/trinodb/trino/commit/0c877859e71286a9c233834690d49ae3e2607da8", "committedDate": "2020-07-07T09:56:08Z", "message": "Add Oracle connection pool"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "0c877859e71286a9c233834690d49ae3e2607da8", "author": {"user": {"login": "eskabetxe", "name": "Joao Boto"}}, "url": "https://github.com/trinodb/trino/commit/0c877859e71286a9c233834690d49ae3e2607da8", "committedDate": "2020-07-07T09:56:08Z", "message": "Add Oracle connection pool"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1150, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}