{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzkxMTY4", "number": 2613, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODozOTo1N1rODarn6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0NzoyMVrODarpIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA0Mjk3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODozOTo1N1rOFhw6jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMjoxNToxMVrOFhxkMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODc1MA==", "bodyText": "Not specific to this PR, but this pattern is strange. Why do we call an empty super method in the abstract parent class (which is designed for subclasses to implement)?", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370948750", "createdAt": "2020-01-25T18:39:57Z", "author": {"login": "electrum"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1ODYwNA==", "bodyText": "right. Let's fix them everywhere consistently", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370958604", "createdAt": "2020-01-25T21:56:41Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODc1MA=="}, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1OTQwOQ==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370959409", "createdAt": "2020-01-25T22:15:11Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODc1MA=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA0MzQ5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0MDo1M1rOFhw61A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMTo1NzozNlrOFhxhNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODgyMA==", "bodyText": "Use prestoDockerImageName.equals(...) since we know this isn't null. (otherwise the reader wonders why it is done this way)", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370948820", "createdAt": "2020-01-25T18:40:53Z", "author": {"login": "electrum"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODkyNA==", "bodyText": "Also, why do we need this check? I don't see it in the others", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370948924", "createdAt": "2020-01-25T18:42:31Z", "author": {"login": "electrum"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODgyMA=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1ODY0Ng==", "bodyText": "I use Objects.equals for its symmetry, not because prestoDockerImageName may be null", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370958646", "createdAt": "2020-01-25T21:57:36Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODgyMA=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA0NDc3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0Mzo0MFrOFhw7hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMTo1ODowMVrOFhxhSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODk5Ng==", "bodyText": "Should this be final? Most implementations are", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370948996", "createdAt": "2020-01-25T18:43:40Z", "author": {"login": "electrum"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1ODY2NA==", "bodyText": "Will make it final.", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370958664", "createdAt": "2020-01-25T21:58:01Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODk5Ng=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA0NTU1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0NTo1MFrOFhw77w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMjo0NToyM1rOFhxpDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTEwMw==", "bodyText": "It'd be helpful to extract a constant for the config prefix (perhaps clean this up separately in all of the launchers)", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370949103", "createdAt": "2020-01-25T18:45:50Z", "author": {"login": "electrum"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());\n+            container\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-master.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1ODg3MQ==", "bodyText": "i am not totally sure. a constant would make paths less searchable\nalso, we can easily use constants for loading resources from host into docker\nbut we can't use constants withing dockerized scripts; so this makes the situation assymetric\ni am not confident which direction is the best yet", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370958871", "createdAt": "2020-01-25T22:02:23Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());\n+            container\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-master.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTEwMw=="}, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MDI5MQ==", "bodyText": "I was thinking to remove the duplication of conf/environment/multinode-tls-kerberos within this file.", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370960291", "createdAt": "2020-01-25T22:36:41Z", "author": {"login": "electrum"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());\n+            container\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-master.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTEwMw=="}, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MDY1Mw==", "bodyText": "that's how i undestand this. but then, if someone wants to find where is config-master.properties referenced... it's ambiguous (several files of this name). and if they search w/ path suffix, they will find none.\nthat's just a downside. upside is less repetition, i admit\ni choose to keep it for now.", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370960653", "createdAt": "2020-01-25T22:45:23Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());\n+            container\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-master.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTEwMw=="}, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA0NjA5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0NzoyMVrOFhw8PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMjozMjo1NlrOFhxnFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTE4MQ==", "bodyText": "Maybe add a shared helper for this", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370949181", "createdAt": "2020-01-25T18:47:21Z", "author": {"login": "electrum"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());\n+            container\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-master.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/hive.properties\"), CONTAINER_PRESTO_HIVE_PROPERTIES, READ_ONLY);\n+        });\n+\n+        addPrestoWorker(builder, \"presto-worker-1\");\n+        addPrestoWorker(builder, \"presto-worker-2\");\n+    }\n+\n+    private void addPrestoWorker(Environment.Builder builder, String workerName)\n+    {\n+        DockerContainer container = new DockerContainer(prestoDockerImageName)\n+                .withCreateContainerCmdModifier(createContainerCmd -> createContainerCmd.withDomainName(\"docker.cluster\"))\n+                .withNetworkAliases(workerName + \".docker.cluster\")\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(), \"/docker/presto-product-tests\", READ_ONLY)\n+                .withFileSystemBind(pathResolver.resolvePlaceholders(serverPackage).toString(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-worker.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/hive.properties\"), CONTAINER_PRESTO_HIVE_PROPERTIES, READ_ONLY)\n+                .withCommand(\"/docker/presto-product-tests/run-presto.sh\")\n+                .withStartupCheckStrategy(new IsRunningStartupCheckStrategy())\n+                .waitingFor(Wait.forLogMessage(\".*======== SERVER STARTED ========.*\", 1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1ODgwOA==", "bodyText": "good idea. let's follow up", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370958808", "createdAt": "2020-01-25T22:01:15Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());\n+            container\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-master.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/hive.properties\"), CONTAINER_PRESTO_HIVE_PROPERTIES, READ_ONLY);\n+        });\n+\n+        addPrestoWorker(builder, \"presto-worker-1\");\n+        addPrestoWorker(builder, \"presto-worker-2\");\n+    }\n+\n+    private void addPrestoWorker(Environment.Builder builder, String workerName)\n+    {\n+        DockerContainer container = new DockerContainer(prestoDockerImageName)\n+                .withCreateContainerCmdModifier(createContainerCmd -> createContainerCmd.withDomainName(\"docker.cluster\"))\n+                .withNetworkAliases(workerName + \".docker.cluster\")\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(), \"/docker/presto-product-tests\", READ_ONLY)\n+                .withFileSystemBind(pathResolver.resolvePlaceholders(serverPackage).toString(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-worker.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/hive.properties\"), CONTAINER_PRESTO_HIVE_PROPERTIES, READ_ONLY)\n+                .withCommand(\"/docker/presto-product-tests/run-presto.sh\")\n+                .withStartupCheckStrategy(new IsRunningStartupCheckStrategy())\n+                .waitingFor(Wait.forLogMessage(\".*======== SERVER STARTED ========.*\", 1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTE4MQ=="}, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MDE1MA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/2613#discussion_r370960150", "createdAt": "2020-01-25T22:32:56Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/MultinodeTlsKerberos.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Kerberos;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.google.common.base.Verify.verify;\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class MultinodeTlsKerberos\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String prestoDockerImageName;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public MultinodeTlsKerberos(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            Kerberos kerberos,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop, kerberos));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        String hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        String imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        prestoDockerImageName = hadoopBaseImage + \"-kerberized:\" + imagesVersion;\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"resource\")\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            verify(Objects.equals(container.getDockerImageName(), prestoDockerImageName), \"Expected image '%s', but is '%s'\", prestoDockerImageName, container.getDockerImageName());\n+            container\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-master.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/hive.properties\"), CONTAINER_PRESTO_HIVE_PROPERTIES, READ_ONLY);\n+        });\n+\n+        addPrestoWorker(builder, \"presto-worker-1\");\n+        addPrestoWorker(builder, \"presto-worker-2\");\n+    }\n+\n+    private void addPrestoWorker(Environment.Builder builder, String workerName)\n+    {\n+        DockerContainer container = new DockerContainer(prestoDockerImageName)\n+                .withCreateContainerCmdModifier(createContainerCmd -> createContainerCmd.withDomainName(\"docker.cluster\"))\n+                .withNetworkAliases(workerName + \".docker.cluster\")\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(), \"/docker/presto-product-tests\", READ_ONLY)\n+                .withFileSystemBind(pathResolver.resolvePlaceholders(serverPackage).toString(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/config-worker.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode-tls-kerberos/hive.properties\"), CONTAINER_PRESTO_HIVE_PROPERTIES, READ_ONLY)\n+                .withCommand(\"/docker/presto-product-tests/run-presto.sh\")\n+                .withStartupCheckStrategy(new IsRunningStartupCheckStrategy())\n+                .waitingFor(Wait.forLogMessage(\".*======== SERVER STARTED ========.*\", 1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTE4MQ=="}, "originalCommit": null, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1075, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}