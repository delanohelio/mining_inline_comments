{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzOTEyNTky", "number": 6232, "reviewThreads": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0Nzo0NFrOFC4dow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yOFQxMDoyNzozMlrOGbXtqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY2NTYzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/CustomMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0Nzo0NFrOICQmeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo1OTo1N1rOIDQhpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MDA1OA==", "bodyText": "this object should be immutable", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r539240058", "createdAt": "2020-12-09T11:47:44Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/CustomMetrics.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CustomMetrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4NzM5OQ==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r540287399", "createdAt": "2020-12-10T15:59:57Z", "author": {"login": "rzeyde-varada"}, "path": "presto-main/src/main/java/io/prestosql/operator/CustomMetrics.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CustomMetrics", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MDA1OA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY2NjI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/CustomMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0Nzo1MlrOICQm2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjowMDowM1rOIDQh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MDE1NA==", "bodyText": "this should return new object", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r539240154", "createdAt": "2020-12-09T11:47:52Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/CustomMetrics.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CustomMetrics\n+{\n+    private Map<String, Long> metrics;\n+\n+    public CustomMetrics()\n+    {\n+        metrics = new HashMap<>();\n+    }\n+\n+    public synchronized void set(Map<String, Long> metrics)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4NzQ4NQ==", "bodyText": "Refactored.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r540287485", "createdAt": "2020-12-10T16:00:03Z", "author": {"login": "rzeyde-varada"}, "path": "presto-main/src/main/java/io/prestosql/operator/CustomMetrics.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CustomMetrics\n+{\n+    private Map<String, Long> metrics;\n+\n+    public CustomMetrics()\n+    {\n+        metrics = new HashMap<>();\n+    }\n+\n+    public synchronized void set(Map<String, Long> metrics)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MDE1NA=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY4MDE0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/ScanFilterAndProjectOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MTowN1rOICQu0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MTowN1rOICQu0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MjE5Mw==", "bodyText": "ImmutableMap.of()", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r539242193", "createdAt": "2020-12-09T11:51:07Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/ScanFilterAndProjectOperator.java", "diffHunk": "@@ -76,6 +77,7 @@\n     private long physicalBytes;\n     private long readTimeNanos;\n     private long dynamicFilterSplitsProcessed;\n+    private Map<String, Long> customMetrics = Map.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY4MzMzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/OperatorContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MTo1MFrOICQwtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjowMDoxMVrOIDQiZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MjY3OQ==", "bodyText": "use correct javadoc formatting", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r539242679", "createdAt": "2020-12-09T11:51:50Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/operator/OperatorContext.java", "diffHunk": "@@ -218,6 +220,14 @@ public void recordDynamicFilterSplitProcessed(long dynamicFilterSplits)\n         dynamicFilterSplitsProcessed.getAndAdd(dynamicFilterSplits);\n     }\n \n+    /** Overwrites the metrics with the latest one.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4NzU5MQ==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r540287591", "createdAt": "2020-12-10T16:00:11Z", "author": {"login": "rzeyde-varada"}, "path": "presto-main/src/main/java/io/prestosql/operator/OperatorContext.java", "diffHunk": "@@ -218,6 +220,14 @@ public void recordDynamicFilterSplitProcessed(long dynamicFilterSplits)\n         dynamicFilterSplitsProcessed.getAndAdd(dynamicFilterSplits);\n     }\n \n+    /** Overwrites the metrics with the latest one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MjY3OQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2MTcyMjIyOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Histogram.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDozODoxOFrOJUYgBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxMjo1MDowN1rOJdx8lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM1MjcxMQ==", "bodyText": "This seems unnecessary. There's a more flexible implementation in airlift that doesn't require knowing the buckets and boundaries in advance: https://github.com/airlift/airlift/blob/master/stats/src/main/java/io/airlift/stats/TDigest.java", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r625352711", "createdAt": "2021-05-03T20:38:18Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Histogram.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Arrays;\n+\n+public class Histogram", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzM1OTAxNQ==", "bodyText": "IIUC, adding airlift's stats to trino-spi seems to require adding even more dependencies to the SPI - e.g. guava (which is currently is used only for tests). However, after adding guava as a provided dependency [1] I got the following errors when building trino-tpch:\n$ ./mvnw install -Dmaven.gitcommitid.skip=true -DskipTests -pl plugin/trino-tpch -am \n...\n[ERROR] Failed to execute goal io.trino:trino-maven-plugin:10:check-spi-dependencies (default-check-spi-dependencies) on project trino-tpch: \n[ERROR] \n[ERROR] Trino plugin dependency org.hdrhistogram:HdrHistogram must not have scope 'provided'. It is not part of the SPI and will not be available at runtime.\n\nSince org.hdrhistogram is an airlift stats dependency [2], I tried to add the following fixes to trino-tpch [3], but it seems that I didn't specified the dependency correctly :(\nI would appreciate if you could please help me to find the correct way of adding the TDigest to trino-spi...\n[1] rzeyde-varada@5b80288\n[2] https://github.com/airlift/airlift/blob/1e50fbd21c43ea355b7415af6a39ca7ad42c1daa/stats/pom.xml#L20\n[3] rzeyde-varada@d1228f3", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r627359015", "createdAt": "2021-05-06T12:07:51Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Histogram.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Arrays;\n+\n+public class Histogram", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM1MjcxMQ=="}, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDMyODM2NQ==", "bodyText": "That's a good point. We don't want to add extra dependencies to the SPI. There are a couple of options:\n\nKeep what you have here -- although, I dislike having complex behaviors in the SPI. It should mostly be an \"interface\".\nFigure out a way to make these metrics \"interfaces\" and leave the implementation to a connector or toolkit that connectors can use.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r630328365", "createdAt": "2021-05-11T16:13:11Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Histogram.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Arrays;\n+\n+public class Histogram", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM1MjcxMQ=="}, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA2MjQ5MA==", "bodyText": "Thanks!\nI think that I will move the implementation into a toolkit.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r633062490", "createdAt": "2021-05-16T08:39:12Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Histogram.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Arrays;\n+\n+public class Histogram", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM1MjcxMQ=="}, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTIwNjgwNw==", "bodyText": "Done in b50d473.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635206807", "createdAt": "2021-05-19T12:50:07Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Histogram.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Arrays;\n+\n+public class Histogram", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM1MjcxMQ=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2MTcyNDEyOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/LongSumValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDozODo0OVrOJUYhNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDozODo0OVrOJUYhNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM1MzAxMw==", "bodyText": "This should just be called \"Count\"", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r625353013", "createdAt": "2021-05-03T20:38:49Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/LongSumValue.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class LongSumValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2MTcyNDQ4OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/LongSumValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDozODo1N1rOJUYhdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDozODo1N1rOJUYhdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM1MzA3OQ==", "bodyText": "use primitive long", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r625353079", "createdAt": "2021-05-03T20:38:57Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/LongSumValue.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class LongSumValue\n+        implements Metric\n+{\n+    private final Long value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2MTc3MzcwOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/CustomMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDo1MjozMFrOJUY_Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDo1MjozMFrOJUY_Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM2MDcwMw==", "bodyText": "I would just call this Metrics, since it should evolve to tracking all metrics exposed by operators", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r625360703", "createdAt": "2021-05-03T20:52:30Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/CustomMetrics.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CustomMetrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2MTc4NTc0OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/CustomMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDo1NTo1MFrOJUZGcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDo1NTo1MFrOJUZGcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM2MjU0Nw==", "bodyText": "Use Map<String, Metric> for the variable declaration", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r625362547", "createdAt": "2021-05-03T20:55:50Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/CustomMetrics.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CustomMetrics\n+{\n+    public static final CustomMetrics EMPTY = new CustomMetrics();\n+\n+    private final Map<String, Metric> map;\n+\n+    public CustomMetrics(Map<String, Metric>... maps)\n+    {\n+        this(Arrays.asList(maps));\n+    }\n+\n+    public CustomMetrics(Iterable<Map<String, Metric>> maps)\n+    {\n+        HashMap<String, Metric> aggregation = new HashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2MTc5NTQ4OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/ScanFilterAndProjectOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDo1ODo0MlrOJUZMcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMDo1ODo0MlrOJUZMcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM2NDA4Mg==", "bodyText": "This should be called getConnectorMetrics(). In the future, we'll likely want to expose operator-specific metrics, which should be namespaced separately from those exposed by the connector.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r625364082", "createdAt": "2021-05-03T20:58:42Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/operator/ScanFilterAndProjectOperator.java", "diffHunk": "@@ -157,6 +159,12 @@ public long getDynamicFilterSplitsProcessed()\n         return dynamicFilterSplitsProcessed;\n     }\n \n+    @Override\n+    public CustomMetrics getCustomMetrics()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2MTg0MTcyOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/connector/ConnectorPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMToxMjowOVrOJUZoaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMToxMjowOVrOJUZoaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM3MTI0Mw==", "bodyText": "Call this getMetrics().\nAlso, it needs to document the semantics of the returned metrics -- i.e., they are a new snapshot of the metrics, metrics need to be immutable, etc.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r625371243", "createdAt": "2021-05-03T21:12:09Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/connector/ConnectorPageSource.java", "diffHunk": "@@ -70,4 +72,9 @@ void close()\n     {\n         return NOT_BLOCKED;\n     }\n+\n+    default Map<String, Metric> getCustomMetrics()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2MTg0Njk3OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/CustomMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMToxMzozOVrOJUZrtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwOTozNDowN1rOJWM3Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM3MjA4NQ==", "bodyText": "What's the use case for taking multiple maps?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r625372085", "createdAt": "2021-05-03T21:13:39Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/CustomMetrics.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CustomMetrics\n+{\n+    public static final CustomMetrics EMPTY = new CustomMetrics();\n+\n+    private final Map<String, Metric> map;\n+\n+    public CustomMetrics(Map<String, Metric>... maps)\n+    {\n+        this(Arrays.asList(maps));\n+    }\n+\n+    public CustomMetrics(Iterable<Map<String, Metric>> maps)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzI1OTE5OQ==", "bodyText": "I am using it to merge multiple custom metrics at OperatorStats#add, but it's probably not a good choice for a c-tor - so I have renamed it into a static method Metrics#merge: b4f3406#diff-de6c1298bb6eabc28a83bbb6305b6de4f2900681b3dfab627a0d541e2e50230aR34", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r627259199", "createdAt": "2021-05-06T09:34:07Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/CustomMetrics.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CustomMetrics\n+{\n+    public static final CustomMetrics EMPTY = new CustomMetrics();\n+\n+    private final Map<String, Metric> map;\n+\n+    public CustomMetrics(Map<String, Metric>... maps)\n+    {\n+        this(Arrays.asList(maps));\n+    }\n+\n+    public CustomMetrics(Iterable<Map<String, Metric>> maps)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM3MjA4NQ=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2MTkyMDc5OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/LongSumValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QyMTozNTo1MFrOJUaXsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNlQwOTozNjoxNlrOJWM_jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM4MzM0NQ==", "bodyText": "Take a look at io.trino.util.Mergeable and implementations of that. We may want to do something similar. Or move Mergeable to the SPI for use in these.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r625383345", "createdAt": "2021-05-03T21:35:50Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/LongSumValue.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class LongSumValue\n+        implements Metric\n+{\n+    private final Long value;\n+\n+    @JsonCreator\n+    public LongSumValue(long value)\n+    {\n+        this.value = value;\n+    }\n+\n+    @JsonProperty(\"value\")\n+    public long getValue()\n+    {\n+        return value;\n+    }\n+\n+    @Override\n+    public Metric merge(Metric other)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzI2MTMyNA==", "bodyText": "Sounds good - I have moved Mergeable to trino-spi at ad3f94a and refactored the merging code following the implementation at OperatorStats#mergeInfo.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r627261324", "createdAt": "2021-05-06T09:36:16Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/LongSumValue.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class LongSumValue\n+        implements Metric\n+{\n+    private final Long value;\n+\n+    @JsonCreator\n+    public LongSumValue(long value)\n+    {\n+        this.value = value;\n+    }\n+\n+    @JsonProperty(\"value\")\n+    public long getValue()\n+    {\n+        return value;\n+    }\n+\n+    @Override\n+    public Metric merge(Metric other)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTM4MzM0NQ=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyNzY3MzM2OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNDozNDo0MVrOJd311A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyNDowNVrOJf9-jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMwMzM4MA==", "bodyText": "I don't see equals overridden for Metrics, is this meant to be a ref comparison only ? Might be clearer to use != in that case", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635303380", "createdAt": "2021-05-19T14:34:41Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "diffHunk": "@@ -228,6 +232,11 @@ private void updateOperatorStats()\n             operatorContext.recordDynamicFilterSplitProcessed(currentDynamicFilterSplitsProcessed - previousDynamicFilterSplitsProcessed);\n             previousDynamicFilterSplitsProcessed = currentDynamicFilterSplitsProcessed;\n         }\n+\n+        if (!currentMetrics.equals(previousMetrics)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTA3MA==", "bodyText": "Thanks, fixed to use !=.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501070", "createdAt": "2021-05-23T07:24:05Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "diffHunk": "@@ -228,6 +232,11 @@ private void updateOperatorStats()\n             operatorContext.recordDynamicFilterSplitProcessed(currentDynamicFilterSplitsProcessed - previousDynamicFilterSplitsProcessed);\n             previousDynamicFilterSplitsProcessed = currentDynamicFilterSplitsProcessed;\n         }\n+\n+        if (!currentMetrics.equals(previousMetrics)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMwMzM4MA=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyNzY5NTM1OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNDozODoyMFrOJd4Dlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyNToyMVrOJf9_EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMwNjkwMw==", "bodyText": "new HashMap<>()", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635306903", "createdAt": "2021-05-19T14:38:20Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;\n+\n+    public Metrics(Map<String, Metric> map)\n+    {\n+        this.map = Map.copyOf(requireNonNull(map, \"map is null\"));\n+    }\n+\n+    public static Metrics merge(Iterable<Map<String, Metric>> maps)\n+    {\n+        Map<String, Metric> merged = new HashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTIwMQ==", "bodyText": "Thanks, fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501201", "createdAt": "2021-05-23T07:25:21Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;\n+\n+    public Metrics(Map<String, Metric> map)\n+    {\n+        this.map = Map.copyOf(requireNonNull(map, \"map is null\"));\n+    }\n+\n+    public static Metrics merge(Iterable<Map<String, Metric>> maps)\n+    {\n+        Map<String, Metric> merged = new HashMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMwNjkwMw=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyNzcyNzI3OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNDo0MzozM1rOJd4XLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyNTozN1rOJf9_Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMxMTkxOA==", "bodyText": "maps.forEach(map ->\n                map.forEach((key, value) ->\n                        merged.merge(key, value, Metrics::mergeInternal)));", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635311918", "createdAt": "2021-05-19T14:43:33Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;\n+\n+    public Metrics(Map<String, Metric> map)\n+    {\n+        this.map = Map.copyOf(requireNonNull(map, \"map is null\"));\n+    }\n+\n+    public static Metrics merge(Iterable<Map<String, Metric>> maps)\n+    {\n+        Map<String, Metric> merged = new HashMap();\n+        maps.forEach(map -> map\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> merged.merge(\n+                        entry.getKey(),\n+                        entry.getValue(),\n+                        (left, right) -> mergeInternal(left, right))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTIxNA==", "bodyText": "Thanks, fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501214", "createdAt": "2021-05-23T07:25:37Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;\n+\n+    public Metrics(Map<String, Metric> map)\n+    {\n+        this.map = Map.copyOf(requireNonNull(map, \"map is null\"));\n+    }\n+\n+    public static Metrics merge(Iterable<Map<String, Metric>> maps)\n+    {\n+        Map<String, Metric> merged = new HashMap();\n+        maps.forEach(map -> map\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> merged.merge(\n+                        entry.getKey(),\n+                        entry.getValue(),\n+                        (left, right) -> mergeInternal(left, right))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMxMTkxOA=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyNzc3NDE0OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNDo1MToxNVrOJd40KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyNjoyOFrOJf9_YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMxOTMzNg==", "bodyText": "Why do we have Metric interface ?\nIt seems it must implement Mergeable to be usable.\nCould we just use Mergeable or have Metric extend Mergeable ?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635319336", "createdAt": "2021-05-19T14:51:15Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTI4MQ==", "bodyText": "Good point - changed Metric to extend Mergeable.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501281", "createdAt": "2021-05-23T07:26:28Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMxOTMzNg=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyNzc3NTAyOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNDo1MToyNlrOJd40yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyNjozNVrOJf9_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMxOTQ5OA==", "bodyText": "map -> metrics", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635319498", "createdAt": "2021-05-19T14:51:26Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTI5MA==", "bodyText": "Thanks, fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501290", "createdAt": "2021-05-23T07:26:35Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMxOTQ5OA=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyNzkwMDA3OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNToxMzoxNVrOJd6EPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyNjo0NFrOJf9_fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMzOTgzNg==", "bodyText": "requireNonNull", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635339836", "createdAt": "2021-05-19T15:13:15Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "diffHunk": "@@ -169,6 +176,7 @@ public OperatorStats(\n         this.outputPositions = outputPositions;\n \n         this.dynamicFilterSplitsProcessed = dynamicFilterSplitsProcessed;\n+        this.customMetrics = customMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTMwOQ==", "bodyText": "Thanks, fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501309", "createdAt": "2021-05-23T07:26:44Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "diffHunk": "@@ -169,6 +176,7 @@ public OperatorStats(\n         this.outputPositions = outputPositions;\n \n         this.dynamicFilterSplitsProcessed = dynamicFilterSplitsProcessed;\n+        this.customMetrics = customMetrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTMzOTgzNg=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyNzk0MzEzOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNToyMDo1NFrOJd6e7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyNzozOFrOJf9_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM0NjY3MA==", "bodyText": "Can we make it\nMap<String, Metric> merge(Iterable<Map<String, Metric>> metrics)\nor\nMetrics merge(Iterable<Metrics> metrics) ?\nLooks inconsistent to use the wrapper class sometimes and the Map directly in other places", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635346670", "createdAt": "2021-05-19T15:20:54Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;\n+\n+    public Metrics(Map<String, Metric> map)\n+    {\n+        this.map = Map.copyOf(requireNonNull(map, \"map is null\"));\n+    }\n+\n+    public static Metrics merge(Iterable<Map<String, Metric>> maps)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTQxOA==", "bodyText": "Good point - changed to use Metrics instead of Map.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501418", "createdAt": "2021-05-23T07:27:38Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> map;\n+\n+    public Metrics(Map<String, Metric> map)\n+    {\n+        this.map = Map.copyOf(requireNonNull(map, \"map is null\"));\n+    }\n+\n+    public static Metrics merge(Iterable<Map<String, Metric>> maps)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM0NjY3MA=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyNzk2NzAzOnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNToyNDo1NVrOJd6tUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNToyNDo1NVrOJd6tUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM1MDM1Mg==", "bodyText": "null handling shouldn't be needed", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635350352", "createdAt": "2021-05-19T15:24:55Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "diffHunk": "@@ -332,6 +340,16 @@ public long getDynamicFilterSplitsProcessed()\n         return dynamicFilterSplitsProcessed;\n     }\n \n+    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n+    @JsonProperty\n+    public Map<String, Metric> getCustomMetrics()\n+    {\n+        if (customMetrics == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyNzk3NzE0OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNToyNjo1NlrOJd6zrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyODoxNFrOJf-ARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM1MTk4MQ==", "bodyText": "Could we use Metrics instead of Map<String, Metric> ?\nOr if we just want to use maybe Map<String, Metric> directly, we can consider getting rid of Metrics wrapper and put the merge method in some utils class.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635351981", "createdAt": "2021-05-19T15:26:56Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "diffHunk": "@@ -115,6 +121,7 @@ public OperatorStats(\n             @JsonProperty(\"outputPositions\") long outputPositions,\n \n             @JsonProperty(\"dynamicFilterSplitsProcessed\") long dynamicFilterSplitsProcessed,\n+            @JsonProperty(\"customMetrics\") Map<String, Metric> customMetrics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTUwOQ==", "bodyText": "Sounds good, changed to use Metrics instead of Map.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501509", "createdAt": "2021-05-23T07:28:14Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "diffHunk": "@@ -115,6 +121,7 @@ public OperatorStats(\n             @JsonProperty(\"outputPositions\") long outputPositions,\n \n             @JsonProperty(\"dynamicFilterSplitsProcessed\") long dynamicFilterSplitsProcessed,\n+            @JsonProperty(\"customMetrics\") Map<String, Metric> customMetrics,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM1MTk4MQ=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyODAyMTYxOnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorPipelineSourceOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNTozNDo0N1rOJd7PdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyODoyMVrOJf-AVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM1OTA5Mw==", "bodyText": "new AtomicReference<>", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635359093", "createdAt": "2021-05-19T15:34:47Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorPipelineSourceOperator.java", "diffHunk": "@@ -675,6 +681,7 @@ public void close()\n         final AtomicLong outputPositions = new AtomicLong();\n \n         final AtomicLong dynamicFilterSplitsProcessed = new AtomicLong();\n+        final AtomicReference<Metrics> customMetrics = new AtomicReference(Metrics.EMPTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTUyNw==", "bodyText": "Thanks, fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501527", "createdAt": "2021-05-23T07:28:21Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorPipelineSourceOperator.java", "diffHunk": "@@ -675,6 +681,7 @@ public void close()\n         final AtomicLong outputPositions = new AtomicLong();\n \n         final AtomicLong dynamicFilterSplitsProcessed = new AtomicLong();\n+        final AtomicReference<Metrics> customMetrics = new AtomicReference(Metrics.EMPTY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM1OTA5Mw=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyODAyMzY1OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/OperatorContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNTozNToxMFrOJd7QrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyODo1MFrOJf-Alw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM1OTQwNQ==", "bodyText": "new AtomicReference<>", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635359405", "createdAt": "2021-05-19T15:35:10Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorContext.java", "diffHunk": "@@ -82,6 +83,7 @@\n     private final CounterStat outputPositions = new CounterStat();\n \n     private final AtomicLong dynamicFilterSplitsProcessed = new AtomicLong();\n+    private final AtomicReference<Metrics> customMetrics = new AtomicReference(Metrics.EMPTY);  // this is not incremental, but gets overwritten by the latest value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTU5MQ==", "bodyText": "Thanks, fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501591", "createdAt": "2021-05-23T07:28:50Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorContext.java", "diffHunk": "@@ -82,6 +83,7 @@\n     private final CounterStat outputPositions = new CounterStat();\n \n     private final AtomicLong dynamicFilterSplitsProcessed = new AtomicLong();\n+    private final AtomicReference<Metrics> customMetrics = new AtomicReference(Metrics.EMPTY);  // this is not incremental, but gets overwritten by the latest value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM1OTQwNQ=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDAyODA2NDI2OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xOVQxNTo0MjoxNFrOJd7ptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwNzoyOTo1MFrOJf-BIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM2NTgxMg==", "bodyText": "Do we need a list ?\nCould we merge the maps one at a time like the other metrics here ?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r635365812", "createdAt": "2021-05-19T15:42:14Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "diffHunk": "@@ -451,6 +469,8 @@ public OperatorStats add(Iterable<OperatorStats> operators)\n         long outputPositions = this.outputPositions;\n \n         long dynamicFilterSplitsProcessed = this.dynamicFilterSplitsProcessed;\n+        ImmutableList.Builder<Map<String, Metric>> metricsMaps = ImmutableList.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUwMTcyOQ==", "bodyText": "Sounds good, changed to merge the metrics on at a time.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637501729", "createdAt": "2021-05-23T07:29:50Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "diffHunk": "@@ -451,6 +469,8 @@ public OperatorStats add(Iterable<OperatorStats> operators)\n         long outputPositions = this.outputPositions;\n \n         long dynamicFilterSplitsProcessed = this.dynamicFilterSplitsProcessed;\n+        ImmutableList.Builder<Map<String, Metric>> metricsMaps = ImmutableList.builder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNTM2NTgxMg=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MjQyNzY5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwOToyNToyMVrOJf-54A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNFQwOTozODoxOVrOJgRYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUxNjI1Ng==", "bodyText": "We could make this cleaner by doing something like below\nassertThat(metrics.get(\"rows\")).isEqualTo(count(2000));        \nassertThat(metrics.get(\"opened\")).isEqualTo(metrics.get(\"closed\"));\nassertThat(metrics.get(\"closed\")).isGreaterThan(count(0));", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637516256", "createdAt": "2021-05-23T09:25:21Z", "author": {"login": "raunaqmorarka"}, "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -99,6 +104,52 @@ public void testSelect()\n         assertQueryResult(\"SELECT count(*) FROM test_select\", 75L);\n     }\n \n+    @Test\n+    public void testCustomMetricsScanFilter()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part WHERE partkey % 1000 > 0\");\n+        assertEquals(\n+                ((Count) metrics.get(\"rows\")).getValue(),\n+                2000);\n+        assertEquals(\n+                ((Count) metrics.get(\"opened\")).getValue(),\n+                ((Count) metrics.get(\"closed\")).getValue());\n+        assertGreaterThan(\n+                ((Count) metrics.get(\"closed\")).getValue(),\n+                0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzgxODk3Ng==", "bodyText": "Fixed the first two, but the last one still requires comparing the underlying count (since Metric is not Comparable) IIUC.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637818976", "createdAt": "2021-05-24T09:38:19Z", "author": {"login": "rzeyde-varada"}, "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -99,6 +104,52 @@ public void testSelect()\n         assertQueryResult(\"SELECT count(*) FROM test_select\", 75L);\n     }\n \n+    @Test\n+    public void testCustomMetricsScanFilter()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part WHERE partkey % 1000 > 0\");\n+        assertEquals(\n+                ((Count) metrics.get(\"rows\")).getValue(),\n+                2000);\n+        assertEquals(\n+                ((Count) metrics.get(\"opened\")).getValue(),\n+                ((Count) metrics.get(\"closed\")).getValue());\n+        assertGreaterThan(\n+                ((Count) metrics.get(\"closed\")).getValue(),\n+                0L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUxNjI1Ng=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MjQyODgyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwOToyNzoxNlrOJf-6eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNFQwOTozODo0OVrOJgRZcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUxNjQxMA==", "bodyText": "Could we use method reference instead ?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637516410", "createdAt": "2021-05-23T09:27:16Z", "author": {"login": "raunaqmorarka"}, "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -99,6 +104,52 @@ public void testSelect()\n         assertQueryResult(\"SELECT count(*) FROM test_select\", 75L);\n     }\n \n+    @Test\n+    public void testCustomMetricsScanFilter()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part WHERE partkey % 1000 > 0\");\n+        assertEquals(\n+                ((Count) metrics.get(\"rows\")).getValue(),\n+                2000);\n+        assertEquals(\n+                ((Count) metrics.get(\"opened\")).getValue(),\n+                ((Count) metrics.get(\"closed\")).getValue());\n+        assertGreaterThan(\n+                ((Count) metrics.get(\"closed\")).getValue(),\n+                0L);\n+    }\n+\n+    @Test\n+    public void testCustomMetricsScanOnly()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part\");\n+        assertEquals(\n+                ((Count) metrics.get(\"rows\")).getValue(),\n+                2000);\n+        assertEquals(\n+                ((Count) metrics.get(\"opened\")).getValue(),\n+                ((Count) metrics.get(\"closed\")).getValue());\n+        assertGreaterThan(\n+                ((Count) metrics.get(\"closed\")).getValue(),\n+                0L);\n+    }\n+\n+    private Map<String, Metric> collectCustomMetrics(String sql)\n+    {\n+        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n+        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(getSession(), sql);\n+        return runner\n+                .getCoordinator()\n+                .getQueryManager()\n+                .getFullQueryInfo(result.getQueryId())\n+                .getQueryStats()\n+                .getOperatorSummaries()\n+                .stream()\n+                .map(s -> s.getMetrics())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzgxOTI1MA==", "bodyText": "Good catch, thanks!", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637819250", "createdAt": "2021-05-24T09:38:49Z", "author": {"login": "rzeyde-varada"}, "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -99,6 +104,52 @@ public void testSelect()\n         assertQueryResult(\"SELECT count(*) FROM test_select\", 75L);\n     }\n \n+    @Test\n+    public void testCustomMetricsScanFilter()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part WHERE partkey % 1000 > 0\");\n+        assertEquals(\n+                ((Count) metrics.get(\"rows\")).getValue(),\n+                2000);\n+        assertEquals(\n+                ((Count) metrics.get(\"opened\")).getValue(),\n+                ((Count) metrics.get(\"closed\")).getValue());\n+        assertGreaterThan(\n+                ((Count) metrics.get(\"closed\")).getValue(),\n+                0L);\n+    }\n+\n+    @Test\n+    public void testCustomMetricsScanOnly()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part\");\n+        assertEquals(\n+                ((Count) metrics.get(\"rows\")).getValue(),\n+                2000);\n+        assertEquals(\n+                ((Count) metrics.get(\"opened\")).getValue(),\n+                ((Count) metrics.get(\"closed\")).getValue());\n+        assertGreaterThan(\n+                ((Count) metrics.get(\"closed\")).getValue(),\n+                0L);\n+    }\n+\n+    private Map<String, Metric> collectCustomMetrics(String sql)\n+    {\n+        DistributedQueryRunner runner = (DistributedQueryRunner) getQueryRunner();\n+        ResultWithQueryId<MaterializedResult> result = runner.executeWithQueryId(getSession(), sql);\n+        return runner\n+                .getCoordinator()\n+                .getQueryManager()\n+                .getFullQueryInfo(result.getQueryId())\n+                .getQueryStats()\n+                .getOperatorSummaries()\n+                .stream()\n+                .map(s -> s.getMetrics())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUxNjQxMA=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MjQ0MjgwOnYy", "diffSide": "RIGHT", "path": "lib/trino-plugin-toolkit/src/test/java/io/trino/plugin/base/metrics/TestMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QwOTo0MTowM1rOJf_BHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNFQwOTo0NzowMVrOJgRsJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUxODExMA==", "bodyText": "Using assertThat would be preferable", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637518110", "createdAt": "2021-05-23T09:41:03Z", "author": {"login": "raunaqmorarka"}, "path": "lib/trino-plugin-toolkit/src/test/java/io/trino/plugin/base/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.trino.plugin.base.metrics;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.airlift.stats.TDigest;\n+import io.trino.spi.metrics.Metrics;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzgyNDAzNw==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637824037", "createdAt": "2021-05-24T09:47:01Z", "author": {"login": "rzeyde-varada"}, "path": "lib/trino-plugin-toolkit/src/test/java/io/trino/plugin/base/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.trino.plugin.base.metrics;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.airlift.stats.TDigest;\n+import io.trino.spi.metrics.Metrics;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUxODExMA=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MjQ2OTkzOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QxMDowODo1MFrOJf_N6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNFQwOTozOTo0M1rOJgRbXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUyMTM4Nw==", "bodyText": "Since we only give two metrics as input, it might be better to simplify this method to just take 2 metrics as input.\nOr you could even make this class implement Mergeable<Metrics> interface.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637521387", "createdAt": "2021-05-23T10:08:50Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> metrics;\n+\n+    @JsonCreator\n+    public Metrics(Map<String, Metric> metrics)\n+    {\n+        this.metrics = Map.copyOf(requireNonNull(metrics, \"metrics is null\"));\n+    }\n+\n+    public static Metrics merge(Metrics... metrics)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzgxOTc0MA==", "bodyText": "Made Metrics mergeable.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637819740", "createdAt": "2021-05-24T09:39:43Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> metrics;\n+\n+    @JsonCreator\n+    public Metrics(Map<String, Metric> metrics)\n+    {\n+        this.metrics = Map.copyOf(requireNonNull(metrics, \"metrics is null\"));\n+    }\n+\n+    public static Metrics merge(Metrics... metrics)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUyMTM4Nw=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MjQ5OTI1OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QxMDozODo1OFrOJf_b-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNFQwOTo0MDo0NVrOJgRduw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUyNDk4Nw==", "bodyText": "I think one disadvantage of working with Metrics wrapper is that it would result in the underlying map getting copied many times here.\nIt might be more efficient to work directly with the underlying Map for merging here\nE.g.\nMap<> metricsAccumulator = this.getMetrics().getMetrics()\n...\nfor (OperatorStats operator : operators) {\n....\n    operator.getMetrics().forEach((key, value) -> metricsAccumulator.merge(key, value, (m1, m2) -> m1.mergeWith(m2))));\n....\n}\nMetrics merged = new Metrics(metricsAccumulator);", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637524987", "createdAt": "2021-05-23T10:38:58Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "diffHunk": "@@ -498,6 +509,7 @@ public OperatorStats add(Iterable<OperatorStats> operators)\n             outputPositions += operator.getOutputPositions();\n \n             dynamicFilterSplitsProcessed += operator.getDynamicFilterSplitsProcessed();\n+            metrics = Metrics.merge(metrics, operator.getMetrics());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzgyMDM0Nw==", "bodyText": "Sounds good - created an helper Metrics.Accumulator class (similar to the \"builder\" pattern).", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637820347", "createdAt": "2021-05-24T09:40:45Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/OperatorStats.java", "diffHunk": "@@ -498,6 +509,7 @@ public OperatorStats add(Iterable<OperatorStats> operators)\n             outputPositions += operator.getOutputPositions();\n \n             dynamicFilterSplitsProcessed += operator.getDynamicFilterSplitsProcessed();\n+            metrics = Metrics.merge(metrics, operator.getMetrics());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUyNDk4Nw=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MjUwNTE4OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yM1QxMDo0NToyNFrOJf_e1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNFQwOTozNjoyMFrOJgRTpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUyNTcxNw==", "bodyText": "Would it be better to collect sourceOperator.getConnectorMetrics() before sourceOperator.close() as sourceOperator could decide to clear its metrics to release resources on close ?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637525717", "createdAt": "2021-05-23T10:45:24Z", "author": {"login": "raunaqmorarka"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "diffHunk": "@@ -175,6 +177,7 @@ public void close()\n             throws Exception\n     {\n         sourceOperator.close();\n+        operatorContext.setLatestMetrics(sourceOperator.getConnectorMetrics());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzgxNzc2NA==", "bodyText": "Sounds good - moved the collection before closing the operator.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r637817764", "createdAt": "2021-05-24T09:36:20Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "diffHunk": "@@ -175,6 +177,7 @@ public void close()\n             throws Exception\n     {\n         sourceOperator.close();\n+        operatorContext.setLatestMetrics(sourceOperator.getConnectorMetrics());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUyNTcxNw=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4NzM0ODAyOnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorPipelineSourceOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wMlQxODo1NzowMFrOJmZa-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wN1QxNzozNTozOFrOJo14Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI0MjE2OA==", "bodyText": "Is this for connector metrics? If so, call it connectorMetrics. Otherwise, just call it metrics.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r644242168", "createdAt": "2021-06-02T18:57:00Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorPipelineSourceOperator.java", "diffHunk": "@@ -675,6 +681,7 @@ public void close()\n         final AtomicLong outputPositions = new AtomicLong();\n \n         final AtomicLong dynamicFilterSplitsProcessed = new AtomicLong();\n+        final AtomicReference<Metrics> customMetrics = new AtomicReference<>(Metrics.EMPTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjgwNTUyNw==", "bodyText": "Renamed to connectorMetrics.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r646805527", "createdAt": "2021-06-07T17:35:38Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorPipelineSourceOperator.java", "diffHunk": "@@ -675,6 +681,7 @@ public void close()\n         final AtomicLong outputPositions = new AtomicLong();\n \n         final AtomicLong dynamicFilterSplitsProcessed = new AtomicLong();\n+        final AtomicReference<Metrics> customMetrics = new AtomicReference<>(Metrics.EMPTY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI0MjE2OA=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4NzM2ODE3OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wMlQxOTowMjowN1rOJmZnTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wN1QxNzozNTo0OFrOJo14fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI0NTMyNg==", "bodyText": "This method seems unnecessary. It's used only once and it's fairly trivial. Just inline it where it's used.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r644245326", "createdAt": "2021-06-02T19:02:07Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+        implements Mergeable<Metrics>\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> metrics;\n+\n+    @JsonCreator\n+    public Metrics(Map<String, Metric> metrics)\n+    {\n+        this.metrics = requireNonNull(metrics, \"metrics is null\");\n+    }\n+\n+    @JsonProperty(\"metrics\")\n+    public Map<String, Metric> getMetrics()\n+    {\n+        return metrics;\n+    }\n+\n+    @Override\n+    public Metrics mergeWith(Metrics other)\n+    {\n+        return accumulator().add(this).add(other).get();\n+    }\n+\n+    public static Accumulator accumulator()\n+    {\n+        return new Accumulator();\n+    }\n+\n+    public static class Accumulator\n+    {\n+        private final Map<String, Metric> merged = new HashMap<>();\n+\n+        private Accumulator()\n+        {\n+        }\n+\n+        public Accumulator add(Metrics metrics)\n+        {\n+            metrics.getMetrics().forEach((key, value) ->\n+                    merged.merge(key, value, Accumulator::mergeInternal));\n+            return this;\n+        }\n+\n+        public Metrics get()\n+        {\n+            return new Metrics(merged);\n+        }\n+\n+        private static Metric mergeInternal(Metric left, Metric right)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjgwNTYyOA==", "bodyText": "Sounds good - done.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r646805628", "createdAt": "2021-06-07T17:35:48Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+        implements Mergeable<Metrics>\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> metrics;\n+\n+    @JsonCreator\n+    public Metrics(Map<String, Metric> metrics)\n+    {\n+        this.metrics = requireNonNull(metrics, \"metrics is null\");\n+    }\n+\n+    @JsonProperty(\"metrics\")\n+    public Map<String, Metric> getMetrics()\n+    {\n+        return metrics;\n+    }\n+\n+    @Override\n+    public Metrics mergeWith(Metrics other)\n+    {\n+        return accumulator().add(this).add(other).get();\n+    }\n+\n+    public static Accumulator accumulator()\n+    {\n+        return new Accumulator();\n+    }\n+\n+    public static class Accumulator\n+    {\n+        private final Map<String, Metric> merged = new HashMap<>();\n+\n+        private Accumulator()\n+        {\n+        }\n+\n+        public Accumulator add(Metrics metrics)\n+        {\n+            metrics.getMetrics().forEach((key, value) ->\n+                    merged.merge(key, value, Accumulator::mergeInternal));\n+            return this;\n+        }\n+\n+        public Metrics get()\n+        {\n+            return new Metrics(merged);\n+        }\n+\n+        private static Metric mergeInternal(Metric left, Metric right)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI0NTMyNg=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4NzM4MTEwOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wMlQxOTowNTozM1rOJmZvhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wN1QxNzozNTo1NlrOJo141A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI0NzQyOQ==", "bodyText": "This class is holding on to the map provided by the caller. That can cause potential problems down the road if the map is modified (especially in a non-thread-safe manner). Do Map.copyOf(...)", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r644247429", "createdAt": "2021-06-02T19:05:33Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+        implements Mergeable<Metrics>\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> metrics;\n+\n+    @JsonCreator\n+    public Metrics(Map<String, Metric> metrics)\n+    {\n+        this.metrics = requireNonNull(metrics, \"metrics is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjgwNTcxNg==", "bodyText": "Thanks, fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r646805716", "createdAt": "2021-06-07T17:35:56Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+        implements Mergeable<Metrics>\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> metrics;\n+\n+    @JsonCreator\n+    public Metrics(Map<String, Metric> metrics)\n+    {\n+        this.metrics = requireNonNull(metrics, \"metrics is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI0NzQyOQ=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4NzQwNjkxOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wMlQxOToxMjoyMlrOJmZ_Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wN1QxNzozNjowM1rOJo15VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI1MTQ0Mw==", "bodyText": "Use @JsonValue so that it doesn't introduce an artificial nested JSON object.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r644251443", "createdAt": "2021-06-02T19:12:22Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+        implements Mergeable<Metrics>\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> metrics;\n+\n+    @JsonCreator\n+    public Metrics(Map<String, Metric> metrics)\n+    {\n+        this.metrics = requireNonNull(metrics, \"metrics is null\");\n+    }\n+\n+    @JsonProperty(\"metrics\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjgwNTg0NA==", "bodyText": "Thanks, fixed.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r646805844", "createdAt": "2021-06-07T17:36:03Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Metrics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.trino.spi.Mergeable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class Metrics\n+        implements Mergeable<Metrics>\n+{\n+    public static final Metrics EMPTY = new Metrics(Map.of());\n+\n+    private final Map<String, Metric> metrics;\n+\n+    @JsonCreator\n+    public Metrics(Map<String, Metric> metrics)\n+    {\n+        this.metrics = requireNonNull(metrics, \"metrics is null\");\n+    }\n+\n+    @JsonProperty(\"metrics\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI1MTQ0Mw=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA4NzQxNzY3OnYy", "diffSide": "RIGHT", "path": "lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/metrics/Histogram.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wMlQxOToxNDo1MFrOJmaFVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wN1QxNzozNzo1OVrOJo191w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI1MzAxMw==", "bodyText": "TDigest is not json-serializable.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r644253013", "createdAt": "2021-06-02T19:14:50Z", "author": {"login": "martint"}, "path": "lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/metrics/Histogram.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.trino.plugin.base.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.stats.TDigest;\n+import io.trino.spi.metrics.Metric;\n+\n+public class Histogram\n+        implements Metric<Histogram>\n+{\n+    private final TDigest digest;\n+\n+    @JsonCreator\n+    public Histogram(TDigest digest)\n+    {\n+        this.digest = digest;\n+    }\n+\n+    @JsonProperty(\"digest\")\n+    public TDigest getDigest()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjgwNjk5OQ==", "bodyText": "Oops, you're right - added a custom converter to serialize/deserialize TDigest (using base64).", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r646806999", "createdAt": "2021-06-07T17:37:59Z", "author": {"login": "rzeyde-varada"}, "path": "lib/trino-plugin-toolkit/src/main/java/io/trino/plugin/base/metrics/Histogram.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.trino.plugin.base.metrics;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.stats.TDigest;\n+import io.trino.spi.metrics.Metric;\n+\n+public class Histogram\n+        implements Metric<Histogram>\n+{\n+    private final TDigest digest;\n+\n+    @JsonCreator\n+    public Histogram(TDigest digest)\n+    {\n+        this.digest = digest;\n+    }\n+\n+    @JsonProperty(\"digest\")\n+    public TDigest getDigest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDI1MzAxMw=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE1NjAzMTY0OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xOFQxOTo1MTo0MVrOJwUlJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMVQxNjoyMjoxOVrOJ3vjwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY0ODYxNA==", "bodyText": "Why not set it unconditionally?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r654648614", "createdAt": "2021-06-18T19:51:41Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "diffHunk": "@@ -228,6 +232,11 @@ private void updateOperatorStats()\n             operatorContext.recordDynamicFilterSplitProcessed(currentDynamicFilterSplitsProcessed - previousDynamicFilterSplitsProcessed);\n             previousDynamicFilterSplitsProcessed = currentDynamicFilterSplitsProcessed;\n         }\n+\n+        if (currentMetrics != previousMetrics) {\n+            operatorContext.setLatestMetrics(currentMetrics);\n+            previousMetrics = currentMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDk3NTU0Ng==", "bodyText": "It can be done, but I thought to optimize for the case where currentMetrics == Metrics.EMPTY (which currently happens for all connectors that don't implement ConnectorPageSource#getMetrics).", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r654975546", "createdAt": "2021-06-20T19:01:53Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "diffHunk": "@@ -228,6 +232,11 @@ private void updateOperatorStats()\n             operatorContext.recordDynamicFilterSplitProcessed(currentDynamicFilterSplitsProcessed - previousDynamicFilterSplitsProcessed);\n             previousDynamicFilterSplitsProcessed = currentDynamicFilterSplitsProcessed;\n         }\n+\n+        if (currentMetrics != previousMetrics) {\n+            operatorContext.setLatestMetrics(currentMetrics);\n+            previousMetrics = currentMetrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY0ODYxNA=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjQzMDY1Ng==", "bodyText": "setLatestMetrics just sets a field. There's no processing involved, so I don't think this optimization really optimizes much. We can add it in the future if we observe that being an actual problem.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r662430656", "createdAt": "2021-07-01T16:22:19Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/operator/WorkProcessorSourceOperatorAdapter.java", "diffHunk": "@@ -228,6 +232,11 @@ private void updateOperatorStats()\n             operatorContext.recordDynamicFilterSplitProcessed(currentDynamicFilterSplitsProcessed - previousDynamicFilterSplitsProcessed);\n             previousDynamicFilterSplitsProcessed = currentDynamicFilterSplitsProcessed;\n         }\n+\n+        if (currentMetrics != previousMetrics) {\n+            operatorContext.setLatestMetrics(currentMetrics);\n+            previousMetrics = currentMetrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY0ODYxNA=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE1NjA0NjY3OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Count.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xOFQxOTo1NzowOVrOJwUuAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMVQxNjoyNzozOFrOJ3vxPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY1MDg4Mg==", "bodyText": "Why double?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r654650882", "createdAt": "2021-06-18T19:57:09Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Count.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+public interface Count\n+{\n+    double getTotal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDk3NjQ2Ng==", "bodyText": "In case a connector would like to aggregate a floating-point metric, returning double should work both for integer and floating-point metrics.\nShould I change it to long?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r654976466", "createdAt": "2021-06-20T19:10:27Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Count.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+public interface Count\n+{\n+    double getTotal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY1MDg4Mg=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjQzNDExMQ==", "bodyText": "I think that would be a different type of metric, though. Let's change it to long. We can reconsider in the future if we find an actual use case for it.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r662434111", "createdAt": "2021-07-01T16:27:38Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Count.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+public interface Count\n+{\n+    double getTotal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY1MDg4Mg=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE1NjA0OTcxOnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Count.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xOFQxOTo1ODoxN1rOJwUv1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yMFQxOTowNjowMlrOJwoj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY1MTM1MA==", "bodyText": "Did you try making Count and Histogram extend from Metric?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r654651350", "createdAt": "2021-06-18T19:58:17Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Count.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+public interface Count", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDk3NTk4Ng==", "bodyText": "Good point, thanks!\nFixed in 749ef4f.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r654975986", "createdAt": "2021-06-20T19:06:02Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Count.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+public interface Count", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY1MTM1MA=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE1NjA1MDE3OnYy", "diffSide": "RIGHT", "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Distribution.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xOFQxOTo1ODoyOFrOJwUwHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMVQxNjoyNjozOFrOJ3vudw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY1MTQyMw==", "bodyText": "Why double?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r654651423", "createdAt": "2021-06-18T19:58:28Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Distribution.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+public interface Distribution\n+{\n+    double getTotal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDk3NTg2Nw==", "bodyText": "Because TDigest#getCount and QuantileDigest#getCount return double - so I thought to use the same type here.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r654975867", "createdAt": "2021-06-20T19:04:38Z", "author": {"login": "rzeyde-varada"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Distribution.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+public interface Distribution\n+{\n+    double getTotal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY1MTQyMw=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjQzMzM5OQ==", "bodyText": "That's because TDigest and QDigest are designed to support exponential decay, which results in fractional weights over time. I don't think we need that here.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r662433399", "createdAt": "2021-07-01T16:26:38Z", "author": {"login": "martint"}, "path": "core/trino-spi/src/main/java/io/trino/spi/metrics/Distribution.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.spi.metrics;\n+\n+public interface Distribution\n+{\n+    double getTotal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY1MTQyMw=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMxMzUzMjU2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yOFQxMDoyNzozMlrOKGwhNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yOVQxNDo0MzoxN1rOKHwL6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODE3NTAzMQ==", "bodyText": "Would it be possible to avoid using raw types here?", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r678175031", "createdAt": "2021-07-28T10:27:32Z", "author": {"login": "findepi"}, "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -107,6 +113,40 @@ public void testSelect()\n         assertQueryResult(\"SELECT count(*) FROM test_select\", 75L);\n     }\n \n+    @Test\n+    public void testCustomMetricsScanFilter()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part WHERE partkey % 1000 > 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3a96cb9e7aec3101cce7ac67517b1a1e2f384f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODU2MzkzMg==", "bodyText": "Sounds good - do you mean returning a Metrics object from collectCustomMetrics() (instead of a Map)?\nIf so, I think it can be fixed by master...rzeyde-varada:fixup-metrics-test.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r678563932", "createdAt": "2021-07-28T18:43:57Z", "author": {"login": "rzeyde-varada"}, "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -107,6 +113,40 @@ public void testSelect()\n         assertQueryResult(\"SELECT count(*) FROM test_select\", 75L);\n     }\n \n+    @Test\n+    public void testCustomMetricsScanFilter()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part WHERE partkey % 1000 > 0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODE3NTAzMQ=="}, "originalCommit": {"oid": "7c3a96cb9e7aec3101cce7ac67517b1a1e2f384f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODk0NzUxMA==", "bodyText": "I don't know this code, so cannot suggest something.\nJust my IDE warns me that Metric is a generic class, but here it's used without <...>.\nmaybe Metric<?> would do for now", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r678947510", "createdAt": "2021-07-29T08:40:28Z", "author": {"login": "findepi"}, "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -107,6 +113,40 @@ public void testSelect()\n         assertQueryResult(\"SELECT count(*) FROM test_select\", 75L);\n     }\n \n+    @Test\n+    public void testCustomMetricsScanFilter()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part WHERE partkey % 1000 > 0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODE3NTAzMQ=="}, "originalCommit": {"oid": "7c3a96cb9e7aec3101cce7ac67517b1a1e2f384f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTIxODE1NQ==", "bodyText": "Opened #8707.", "url": "https://github.com/trinodb/trino/pull/6232#discussion_r679218155", "createdAt": "2021-07-29T14:43:17Z", "author": {"login": "rzeyde-varada"}, "path": "plugin/trino-memory/src/test/java/io/trino/plugin/memory/TestMemorySmoke.java", "diffHunk": "@@ -107,6 +113,40 @@ public void testSelect()\n         assertQueryResult(\"SELECT count(*) FROM test_select\", 75L);\n     }\n \n+    @Test\n+    public void testCustomMetricsScanFilter()\n+    {\n+        Map<String, Metric> metrics = collectCustomMetrics(\"SELECT partkey FROM part WHERE partkey % 1000 > 0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODE3NTAzMQ=="}, "originalCommit": {"oid": "7c3a96cb9e7aec3101cce7ac67517b1a1e2f384f"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4506, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}