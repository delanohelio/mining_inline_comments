{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTk0NDcx", "number": 5507, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzowMjozMlrOEsTJ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxODoxNTo0MVrOE2iftA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg2NjM1OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzowMjozMlrOHfhHkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzowMjozMlrOHfhHkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMDUxNQ==", "bodyText": "Here we could make map into a list, and verify right number and right positions of parameters were set", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r502810515", "createdAt": "2020-10-10T17:02:32Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +455,29 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchParameters.add(ImmutableMap.copyOf(parameters));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg2NzExOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzowMzo1MlrOHfhH8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzowMzo1MlrOHfhH8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMDYwOQ==", "bodyText": "should clearBatch be in finally?", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r502810609", "createdAt": "2020-10-10T17:03:52Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +455,29 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchParameters.add(ImmutableMap.copyOf(parameters));\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchParameters.clear();\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        int[] batchUpdateCounts = new int[batchParameters.size()];\n+        for (int i = 0; i < batchParameters.size(); i++) {\n+            super.execute(getExecuteSql(statementName, batchParameters.get(i)));\n+            batchUpdateCounts[i] = getUpdateCount();\n+        }\n+        clearBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg2ODM4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzowNToxOFrOHfhIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNzowNToxOFrOHfhIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMDc2MQ==", "bodyText": "Use memory connector and verify the data has been inserted correctly.", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r502810761", "createdAt": "2020-10-10T17:05:18Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -263,6 +263,38 @@ public void testExecuteUpdate()\n         }\n     }\n \n+    @Test\n+    public void testExecuteBatch()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTE3MDc3OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODowODowOFrOHfzgqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMDozOToyNFrOHrrL0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ==", "bodyText": "Should execute*() methods be disallowed once addBatch is called?", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r503111849", "createdAt": "2020-10-12T08:08:08Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0ODQ2Ng==", "bodyText": "@findepi Sorry, I couldn't understand well. Do you mean we should allow only executeBatch() and disallow other execute*() once addBatch() is used?", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r504348466", "createdAt": "2020-10-14T01:30:25Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyMTg3MQ==", "bodyText": "i think so, but i admit i have not checked any other JDBC drivers for comparison", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r505621871", "createdAt": "2020-10-15T15:08:57Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMDM1NQ==", "bodyText": "@findepi I confirmed some JDBC drivers (MySQL, PostgreSQL, SQLServer & Oracle) and they don't have such limitation.", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r507010355", "createdAt": "2020-10-18T03:13:44Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5OTA2Mg==", "bodyText": "thanks for checking!\ncan i\n.setParameter(...)\n.addBatch()\n.setParameter(...)\n.executeUpdate()\n.addBatch()\n.executeBatch()\n\n?\nin such a case, what parameters will be added in the second addBatch() call? (eg does .executeUpdate() clear current params?)", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r507699062", "createdAt": "2020-10-19T12:17:53Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyNDk2NQ==", "bodyText": "@findepi It seems the behavior is different between Oracle and other JDBC drivers .\n\nOracle throws error occurred during batching: batch must be either executed or cleared at executeUpdate\nMySQL, PostgreSQL & SQLServer doesn't clear at executeUpdate. 3 rows are added in this case.", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r507724965", "createdAt": "2020-10-19T12:58:45Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMTQ0MA==", "bodyText": "I like the \"more strict\" approach -- if we can opt out from supporting some niche or purely hypothetical use-case, we should.", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r507821440", "createdAt": "2020-10-19T14:56:52Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMzE3Nw==", "bodyText": "@findepi Added a logic to let execute* fail. Should we clear the status when called clearBatch?", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r511933177", "createdAt": "2020-10-26T12:48:01Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2NTYxMw==", "bodyText": "Makes sense to me. clearBatch looks like reverting the pristine state, right?", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r512065613", "createdAt": "2020-10-26T15:47:33Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU1ODM1Mg==", "bodyText": "@findepi Right. Added isBatch = false in clearBatch().", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r515558352", "createdAt": "2020-11-01T00:39:24Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTE4NDU5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxMTo0NFrOHfzosw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxMTo0NFrOHfzosw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMzkwNw==", "bodyText": "You can express this more concisely  as in\nhttps://github.com/prestosql/presto/blob/7771f046f19b868e1cde7e04876dd45d8b0647dd/presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDatabaseMetaData.java#L404\n(and then you can remove ORDER BY)", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r503113907", "createdAt": "2020-10-12T08:11:44Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -263,6 +266,47 @@ public void testExecuteUpdate()\n         }\n     }\n \n+    @Test\n+    public void testExecuteBatch()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"memory\", \"default\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_execute_batch (c_int integer)\");\n+            }\n+\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(\n+                    \"INSERT INTO test_execute_batch VALUES (?)\")) {\n+                for (int i = 0; i < 3; i++) {\n+                    preparedStatement.setInt(1, i);\n+                    preparedStatement.addBatch();\n+                }\n+                assertEquals(preparedStatement.executeBatch(), new int[]{1, 1, 1});\n+\n+                try (Statement statement = connection.createStatement()) {\n+                    ResultSet resultSet = statement.executeQuery(\"SELECT c_int FROM test_execute_batch ORDER BY 1\");\n+                    for (int i = 0; i < 3; i++) {\n+                        assertTrue(resultSet.next());\n+                        assertEquals(i, resultSet.getInt(1));\n+                    }\n+                    assertFalse(resultSet.next());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTE4NzI5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxMjoxOFrOHfzqMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxMjoxOFrOHfzqMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNDI4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            statement.execute(\"CREATE TABLE test_execute_batch (c_int integer)\");\n          \n          \n            \n                            statement.execute(\"CREATE TABLE test_execute_batch(c_int integer)\");", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r503114288", "createdAt": "2020-10-12T08:12:18Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -263,6 +266,47 @@ public void testExecuteUpdate()\n         }\n     }\n \n+    @Test\n+    public void testExecuteBatch()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"memory\", \"default\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_execute_batch (c_int integer)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTgzMzM4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODoyODoxNFrOHt4Nrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODoyODoxNFrOHt4Nrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2ODk3NQ==", "bodyText": "final\nTest -> Testing", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r517868975", "createdAt": "2020-11-05T08:28:14Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestJdbcUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTg0MTUyOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODozMDowOVrOHt4SmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODozMDowOVrOHt4SmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MDIzMg==", "bodyText": "Add a test when executeBatch is called without calling addBatch first", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r517870232", "createdAt": "2020-11-05T08:30:09Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchValues.clear();\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        try {\n+            int[] batchUpdateCounts = new int[batchValues.size()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjIzNzMyOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxODoxNTo0MVrOHvZRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozMTowMFrOHvahMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ1OTA4NQ==", "bodyText": "is it possible execute SQLs in batch as well instead of one by one ?\nex: in case of INSERT, one by one insertion cause small files (hive connector)", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r519459085", "createdAt": "2020-11-08T18:15:41Z", "author": {"login": "51yu"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +459,35 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));\n+        isBatch = true;\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchValues.clear();\n+        isBatch = false;\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        try {\n+            int[] batchUpdateCounts = new int[batchValues.size()];\n+            for (int i = 0; i < batchValues.size(); i++) {\n+                super.execute(getExecuteSql(statementName, batchValues.get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3OTYwMA==", "bodyText": "That would be nice to have, but i'd rather see this as a follow up to this change.", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r519479600", "createdAt": "2020-11-08T21:31:00Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +459,35 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));\n+        isBatch = true;\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchValues.clear();\n+        isBatch = false;\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        try {\n+            int[] batchUpdateCounts = new int[batchValues.size()];\n+            for (int i = 0; i < batchValues.size(); i++) {\n+                super.execute(getExecuteSql(statementName, batchValues.get(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ1OTA4NQ=="}, "originalCommit": null, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4672, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}