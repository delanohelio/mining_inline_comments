{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDg2MzE3", "number": 5219, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0MTowMVrOEliOdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDo1NTowMFrOEnaF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzkzNTI2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0MTowMVrOHVDyqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0MTowMVrOHVDyqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NDI2Nw==", "bodyText": "I don't like exception in non-exceptional flow of code. Can you just make container.isHealthy() return true when no healthcheck is defined. Or alternatively make isHealthy return Optional<Boolean> if you feel it is beneficial to know when we are in unknown state.", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491844267", "createdAt": "2020-09-21T07:41:01Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -217,6 +224,32 @@ public void close()\n         stop();\n     }\n \n+    private boolean allContainersHealthy()\n+    {\n+        List<Container> containers = ImmutableList.copyOf(getContainers());\n+        return containers.stream().allMatch(Environment::containerIsHealthy);\n+    }\n+\n+    private static boolean containerIsHealthy(Container container)\n+    {\n+        try {\n+            if (!container.isHealthy()) {\n+                log.warn(\"Container %s is not healthy\", container.getContainerName());\n+                return false;\n+            }\n+        }\n+        catch (RuntimeException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzk0MjI3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/supervisorctl-status.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0MzowM1rOHVD24A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxODo1N1rOHVE_lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NTM0NA==", "bodyText": "This file is added by Interrupt tests on unhealthy environment commit but not used here.", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491845344", "createdAt": "2020-09-21T07:43:03Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/supervisorctl-status.sh", "diffHunk": "@@ -0,0 +1,11 @@\n+#!/usr/bin/env bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2Mzk1OA==", "bodyText": "Also it is removed in the next commit", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491863958", "createdAt": "2020-09-21T08:18:57Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/supervisorctl-status.sh", "diffHunk": "@@ -0,0 +1,11 @@\n+#!/usr/bin/env bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NTM0NA=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzk0ODA3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0NDo0NlrOHVD6NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0NDo0NlrOHVD6NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NjE5Ng==", "bodyText": "rename container variable to testContainer.", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491846196", "createdAt": "2020-09-21T07:44:46Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -170,7 +172,12 @@ public long awaitTestsCompletion()\n \n         try {\n             while (container.isRunning()) {\n-                Thread.sleep(1000);\n+                Thread.sleep(10000); // check every 10 seconds\n+\n+                if (!allContainersHealthy()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzk5NzEyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/ContainerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo1ODo0OFrOHVEXKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMDo1OFrOHVEbnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1MzYwOA==", "bodyText": "why not extend DockerContainer with this method?", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491853608", "createdAt": "2020-09-21T07:58:48Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/ContainerUtil.java", "diffHunk": "@@ -80,4 +86,22 @@ public static void exposePort(DockerContainer container, int port)\n         container.addExposedPort(port);\n         container.withFixedExposedPort(port, port);\n     }\n+\n+    public static DockerContainer withHealthChecks(DockerContainer container, DockerFiles dockerFiles)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NDc0OQ==", "bodyText": "Then probably it should be parametrized with health-chack script name.", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491854749", "createdAt": "2020-09-21T08:00:58Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/ContainerUtil.java", "diffHunk": "@@ -80,4 +86,22 @@ public static void exposePort(DockerContainer container, int port)\n         container.addExposedPort(port);\n         container.withFixedExposedPort(port, port);\n     }\n+\n+    public static DockerContainer withHealthChecks(DockerContainer container, DockerFiles dockerFiles)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1MzYwOA=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODAwODY5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMjowOVrOHVEd1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMjowOVrOHVEd1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NTMxNg==", "bodyText": "changes here should be moved to previous commit.", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491855316", "createdAt": "2020-09-21T08:02:09Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -167,24 +167,27 @@ public void awaitContainersStopped()\n \n     public long awaitTestsCompletion()\n     {\n-        Container<?> container = getContainer(TESTS);\n+        Container<?> testContainer = getContainer(TESTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODAxMDAwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMjozM1rOHVEekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMjozM1rOHVEekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NTUwNw==", "bodyText": "this changes too", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491855507", "createdAt": "2020-09-21T08:02:33Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -224,10 +227,9 @@ public void close()\n         stop();\n     }\n \n-    private boolean allContainersHealthy()\n+    private static boolean allContainersHealthy(Iterable<Container<?>> containers)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODA0NzIyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxMzozNVrOHVE0Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxMzozNVrOHVE0Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MTAzOQ==", "bodyText": "general comment: mix of refactorings and changes makes it harder to review.", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491861039", "createdAt": "2020-09-21T08:13:35Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "diffHunk": "@@ -68,30 +88,20 @@ public void extendEnvironment(Environment.Builder builder)\n     }\n \n     @SuppressWarnings(\"resource\")\n-    private DockerContainer createHadoopMaster()\n+    public static DockerContainer createHadoopContainer(DockerFiles dockerFiles, String dockerImage, String logicalName)\n     {\n-        DockerContainer container = new DockerContainer(hadoopBaseImage + \":\" + hadoopImagesVersion, HADOOP)\n+        DockerContainer container = new DockerContainer(dockerImage, logicalName)\n                 // TODO HIVE_PROXY_PORT:1180\n-                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath()), \"/docker/presto-product-tests\")\n-                .withExposedLogPaths(\"/var/log/hadoop-yarn\", \"/var/log/hadoop-hdfs\", \"/var/log/hive\")\n+                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath()), CONTAINER_CONF_ROOT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODA1OTk5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/health-checks/presto-health-check.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNjo1MFrOHVE7dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowMDozN1rOHVIolg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MjkwMQ==", "bodyText": "run some SQL to check if it actually works?", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491862901", "createdAt": "2020-09-21T08:16:50Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/health-checks/presto-health-check.sh", "diffHunk": "@@ -0,0 +1,10 @@\n+#!/usr/bin/env bash\n+set -euo pipefail\n+\n+if test $# -gt 0; then\n+    echo \"$0 does not accept arguments\" >&2\n+    exit 32\n+fi\n+\n+# Check if PrestoServer is listed as running Java process\n+jps | grep -q PrestoServer", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyMzYwNg==", "bodyText": "I don't think that it's possible in a generic way (Kerberos auth in Presto etc)", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491923606", "createdAt": "2020-09-21T10:00:37Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/health-checks/presto-health-check.sh", "diffHunk": "@@ -0,0 +1,10 @@\n+#!/usr/bin/env bash\n+set -euo pipefail\n+\n+if test $# -gt 0; then\n+    echo \"$0 does not accept arguments\" >&2\n+    exit 32\n+fi\n+\n+# Check if PrestoServer is listed as running Java process\n+jps | grep -q PrestoServer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MjkwMQ=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODA2MTM5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/health-checks/hadoop-health-check.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNzoxOVrOHVE8VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNzoxOVrOHVE8VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MzEyNA==", "bodyText": "what does it mean? comment?", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491863124", "createdAt": "2020-09-21T08:17:19Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/health-checks/hadoop-health-check.sh", "diffHunk": "@@ -0,0 +1,21 @@\n+#!/usr/bin/env bash\n+set -euo pipefail\n+\n+if test $# -gt 0; then\n+    echo \"$0 does not accept arguments\" >&2\n+    exit 32\n+fi\n+\n+if ! test -f /tmp/supervisor.sock; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODEwNTkxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/EnvironmentUp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODozMDowMFrOHVFXKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODozMDowMFrOHVFXKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2OTk5Mg==", "bodyText": "Can you extend it to separate PR. Also maybe rename extendEnvironment to getEnvironmentExtender.", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491869992", "createdAt": "2020-09-21T08:30:00Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/EnvironmentUp.java", "diffHunk": "@@ -145,7 +145,9 @@ public Integer call()\n                 builder.configureContainers(Standard::enablePrestoJavaDebugger);\n             }\n \n+            environmentConfig.extendEnvironment(this.environment).ifPresent(extender -> extender.extendEnvironment(builder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODEwNjk4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODozMDoyMVrOHVFX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODozMDoyMVrOHVFX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg3MDE2NQ==", "bodyText": "nit: constant", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r491870165", "createdAt": "2020-09-21T08:30:21Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "diffHunk": "@@ -269,7 +270,8 @@ private Environment getEnvironment()\n                                 .addAll(reportsDirOptions(reportsDirBase))\n                                 .build().toArray(new String[0]))\n                         // this message marks that environment has started and tests are running\n-                        .waitingFor(new LogMessageWaitStrategy().withRegEx(\".*\\\\[TestNG] Running.*\"));\n+                        .waitingFor(new LogMessageWaitStrategy().withRegEx(\".*\\\\[TestNG] Running.*\")\n+                                .withStartupTimeout(ofMinutes(15)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTUxODAxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyNDo0MVrOHVSxlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyNDo0MVrOHVSxlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4OTc0OA==", "bodyText": "unrelated to Interrupt tests on unhealthy environment?", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r492089748", "createdAt": "2020-09-21T14:24:41Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "diffHunk": "@@ -200,6 +201,7 @@ private Integer tryExecuteTests()\n \n         private Environment startEnvironment()\n         {\n+            pruneEnvironment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTUyOTg4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyNzowMFrOHVS4xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyNzowMFrOHVS4xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5MTU4OA==", "bodyText": "merge with call chain above", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r492091588", "createdAt": "2020-09-21T14:27:00Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "diffHunk": "@@ -68,30 +87,20 @@ public void extendEnvironment(Environment.Builder builder)\n     }\n \n     @SuppressWarnings(\"resource\")\n-    private DockerContainer createHadoopMaster()\n+    public static DockerContainer createHadoopContainer(DockerFiles dockerFiles, String dockerImage, String logicalName)\n     {\n-        DockerContainer container = new DockerContainer(hadoopBaseImage + \":\" + hadoopImagesVersion, HADOOP)\n+        DockerContainer container = new DockerContainer(dockerImage, logicalName)\n                 // TODO HIVE_PROXY_PORT:1180\n-                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath()), \"/docker/presto-product-tests\")\n-                .withExposedLogPaths(\"/var/log/hadoop-yarn\", \"/var/log/hadoop-hdfs\", \"/var/log/hive\")\n+                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath()), CONTAINER_CONF_ROOT)\n+                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath(\"health-checks/hadoop-health-check.sh\")), CONTAINER_HEALTH_D + \"hadoop-health-check.sh\")\n+                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath(\"common/hadoop/hadoop-run.sh\")), \"/usr/local/hadoop-run.sh\")\n+                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath(\"common/hadoop/apply-config-overrides.sh\")), CONTAINER_HADOOP_INIT_D + \"00-apply-config-overrides.sh\")\n+                .withCommand(\"/usr/local/hadoop-run.sh\")\n+                .withExposedLogPaths(\"/var/log/hadoop-yarn\", \"/var/log/hadoop-hdfs\", \"/var/log/hive\", \"/var/log/container-health.log\")\n                 .withStartupCheckStrategy(new IsRunningStartupCheckStrategy())\n                 .waitingFor(new SelectedPortWaitStrategy(10000)) // HiveServer2\n                 .withStartupTimeout(Duration.ofMinutes(5));\n \n-        portBinder.exposePort(container, 1180);  // socks proxy\n-        // TODO portBinder.exposePort(container, 5006); // debug port\n-        portBinder.exposePort(container, 8020);\n-        portBinder.exposePort(container, 8042);\n-        portBinder.exposePort(container, 8088);\n-        portBinder.exposePort(container, 9000);\n-        portBinder.exposePort(container, 9083); // Metastore Thrift\n-        portBinder.exposePort(container, 9864); // DataNode Web UI since Hadoop 3\n-        portBinder.exposePort(container, 9870); // NameNode Web UI since Hadoop 3\n-        portBinder.exposePort(container, 10000); // HiveServer2\n-        portBinder.exposePort(container, 19888);\n-        portBinder.exposePort(container, 50070); // NameNode Web UI prior to Hadoop 3\n-        portBinder.exposePort(container, 50075); // DataNode Web UI prior to Hadoop 3\n-\n-        return container;\n+        return container.withHealthCheck(dockerFiles.getDockerFilesHostPath(\"health-checks/health.sh\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODQxNjQ5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTozMDoxNlrOHWngvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjoyNjo1NlrOHWqklA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ3ODA3Ng==", "bodyText": "this name is misleading to me. Why not extendEnvironment?", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493478076", "createdAt": "2020-09-23T11:30:16Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfig.java", "diffHunk": "@@ -46,8 +45,13 @@ default String getConfigName()\n         return nameForConfigClass(getClass());\n     }\n \n-    default Optional<EnvironmentExtender> extendEnvironment(String environmentName)\n+    default EnvironmentExtender getEnvironmentExtender(String environmentName)\n     {\n-        return Optional.empty();\n+        return builder -> builder;\n+    }\n+\n+    default Environment.Builder applyToEnvironment(String environmentName, Environment.Builder builder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUyODIxMg==", "bodyText": "\ud83d\udc4d\ud83c\udffb", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493528212", "createdAt": "2020-09-23T12:26:56Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfig.java", "diffHunk": "@@ -46,8 +45,13 @@ default String getConfigName()\n         return nameForConfigClass(getClass());\n     }\n \n-    default Optional<EnvironmentExtender> extendEnvironment(String environmentName)\n+    default EnvironmentExtender getEnvironmentExtender(String environmentName)\n     {\n-        return Optional.empty();\n+        return builder -> builder;\n+    }\n+\n+    default Environment.Builder applyToEnvironment(String environmentName, Environment.Builder builder)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ3ODA3Ng=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODQxNzEzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTozMDoyOFrOHWnhMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTo1ODo0OFrOHWpCvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ3ODE5NA==", "bodyText": "Why do we need environmentName here?", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493478194", "createdAt": "2020-09-23T11:30:28Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfig.java", "diffHunk": "@@ -46,8 +45,13 @@ default String getConfigName()\n         return nameForConfigClass(getClass());\n     }\n \n-    default Optional<EnvironmentExtender> extendEnvironment(String environmentName)\n+    default EnvironmentExtender getEnvironmentExtender(String environmentName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwMzE2NQ==", "bodyText": "Because config applies to multiple environments and sometimes there is a need for config to configure only selected environment(s). EnvironmentExtender accepts Environment.Builder which does not expose environment name.", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493503165", "createdAt": "2020-09-23T11:58:48Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfig.java", "diffHunk": "@@ -46,8 +45,13 @@ default String getConfigName()\n         return nameForConfigClass(getClass());\n     }\n \n-    default Optional<EnvironmentExtender> extendEnvironment(String environmentName)\n+    default EnvironmentExtender getEnvironmentExtender(String environmentName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ3ODE5NA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODQyMTg0OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/EnvironmentExtender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTozMTozNlrOHWnj_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTozMTozNlrOHWnj_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ3ODkwOQ==", "bodyText": "I would rather expect the method to take list of extenders and return an extender", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493478909", "createdAt": "2020-09-23T11:31:36Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/EnvironmentExtender.java", "diffHunk": "@@ -15,7 +15,20 @@\n \n import io.prestosql.tests.product.launcher.env.Environment;\n \n+import java.util.List;\n+\n public interface EnvironmentExtender\n {\n-    void extendEnvironment(Environment.Builder builder);\n+    Environment.Builder extendEnvironment(Environment.Builder builder);\n+\n+    static Environment.Builder compose(Environment.Builder builder, List<EnvironmentExtender> extenders)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODQ0MTgxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTozNTo0OFrOHWnxIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTozODo1NVrOHWn7uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ4MjI3NA==", "bodyText": "You are runnint tryStop as:\n        // Allow containers to take up to 5 minutes to stop\n        Timeout<Object> timeout = Timeout.of(ofMinutes(5))\n                .withCancel(true);\n\n        RetryPolicy retry = new RetryPolicy()\n                .withMaxAttempts(3);\n\n        FailsafeExecutor<Object> executor = Failsafe.with(timeout, retry);\nSo there is max retries == 3 and timout.\nWill the retries be made every timeout/maxretrycount seconds?", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493482274", "createdAt": "2020-09-23T11:35:48Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -312,6 +313,8 @@ public void tryStop()\n         catch (Exception e) {\n             log.warn(\"Could not stop container correctly: %s\", getStackTraceAsString(e));\n         }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ4NDk4Nw==", "bodyText": "If above is the case we will almost always wait almost 2 minutes for containers to stop as threre is no significant time window between calling stop() in tryStop(), and checking if container actually stopped with isRunning()", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493484987", "createdAt": "2020-09-23T11:38:55Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -312,6 +313,8 @@ public void tryStop()\n         catch (Exception e) {\n             log.warn(\"Could not stop container correctly: %s\", getStackTraceAsString(e));\n         }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ4MjI3NA=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODU0ODc1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTo1NDo1OVrOHWo0sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjo1NjozM1rOHWsSOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5OTU3MQ==", "bodyText": "It is not obvious to me why we need cast here. Someone stupid. Either me or java compiler.", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493499571", "createdAt": "2020-09-23T11:54:59Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -252,7 +262,9 @@ private void copyFileFromContainer(String filename, Path rootHostPath)\n         try (DockerClient client = DockerClientFactory.lazyClient()) {\n             InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>();\n             client.statsCmd(getContainerId()).exec(callback);\n-            return Optional.ofNullable(callback.awaitResult());\n+\n+            return Optional.ofNullable(executor.get(callback::awaitResult))\n+                    .map(Statistics.class::cast);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwNDI3Mg==", "bodyText": "executor is FailsafeExecutor (thus .get() returns Object", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493504272", "createdAt": "2020-09-23T12:00:03Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -252,7 +262,9 @@ private void copyFileFromContainer(String filename, Path rootHostPath)\n         try (DockerClient client = DockerClientFactory.lazyClient()) {\n             InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>();\n             client.statsCmd(getContainerId()).exec(callback);\n-            return Optional.ofNullable(callback.awaitResult());\n+\n+            return Optional.ofNullable(executor.get(callback::awaitResult))\n+                    .map(Statistics.class::cast);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5OTU3MQ=="}, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU1NjI4MQ==", "bodyText": "Not really:", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493556281", "createdAt": "2020-09-23T12:56:33Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -252,7 +262,9 @@ private void copyFileFromContainer(String filename, Path rootHostPath)\n         try (DockerClient client = DockerClientFactory.lazyClient()) {\n             InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>();\n             client.statsCmd(getContainerId()).exec(callback);\n-            return Optional.ofNullable(callback.awaitResult());\n+\n+            return Optional.ofNullable(executor.get(callback::awaitResult))\n+                    .map(Statistics.class::cast);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5OTU3MQ=="}, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODU1MDQ4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/DeadLockDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTo1NToxNVrOHWo1sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTo1NToxNVrOHWo1sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5OTgyNw==", "bodyText": "not reviewing this one", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r493499827", "createdAt": "2020-09-23T11:55:15Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/DeadLockDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzU3NDEzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/config/launcher-logging.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDo1NTowMFrOHX-3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo1MDowM1rOHYAabg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkwOTIyNw==", "bodyText": "Isn't that too much? How big are the log files?", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r494909227", "createdAt": "2020-09-25T10:55:00Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/config/launcher-logging.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+org.testcontainers=DEBUG\n+com.github.dockerjava=DEBUG\n+io.prestosql=DEBUG", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNDYzOA==", "bodyText": "I've dropped that commit", "url": "https://github.com/trinodb/trino/pull/5219#discussion_r494934638", "createdAt": "2020-09-25T11:50:03Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/config/launcher-logging.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+org.testcontainers=DEBUG\n+com.github.dockerjava=DEBUG\n+io.prestosql=DEBUG", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkwOTIyNw=="}, "originalCommit": null, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3001, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}