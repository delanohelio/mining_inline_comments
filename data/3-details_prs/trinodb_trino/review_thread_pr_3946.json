{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5NjE4MTMw", "number": 3946, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMzoxODo1NVrOEDPGLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMzoyMDowNlrOEDPGdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODI4NTI2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMzoxODo1NVrOGgJdEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToyMzoyNlrOGgVysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg==", "bodyText": "nit: We usually use Kathmandu for this.", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436362512", "createdAt": "2020-06-07T13:18:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()\n+    {\n+        // The number of seconds since the beginning of the day for the America/Los_Angeles in 2020 doesn't match\n+        // that of 1970, the year of the epoch. Make sure the proper corrections are being performed.\n+        Session session = assertions.sessionBuilder()\n+                .setTimeZoneKey(getTimeZoneKey(\"America/Los_Angeles\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3MjExNQ==", "bodyText": "Does it matter? This timezone reproduces the issue and is easy to reason about.", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436372115", "createdAt": "2020-06-07T14:59:35Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()\n+    {\n+        // The number of seconds since the beginning of the day for the America/Los_Angeles in 2020 doesn't match\n+        // that of 1970, the year of the epoch. Make sure the proper corrections are being performed.\n+        Session session = assertions.sessionBuilder()\n+                .setTimeZoneKey(getTimeZoneKey(\"America/Los_Angeles\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MjQ5OQ==", "bodyText": "Kathmandu zone is very easy to reason about.  It doesn't", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436382499", "createdAt": "2020-06-07T17:05:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()\n+    {\n+        // The number of seconds since the beginning of the day for the America/Los_Angeles in 2020 doesn't match\n+        // that of 1970, the year of the epoch. Make sure the proper corrections are being performed.\n+        Session session = assertions.sessionBuilder()\n+                .setTimeZoneKey(getTimeZoneKey(\"America/Los_Angeles\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwOTc5Mw==", "bodyText": "I guess what I'm referring to is to the fact that while I know what the daylight saving rules for America/Los_Angeles, I have no idea about Kathmandu's. I'd need to look them up (what day it switches over, etc).", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436409793", "createdAt": "2020-06-07T22:56:09Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()\n+    {\n+        // The number of seconds since the beginning of the day for the America/Los_Angeles in 2020 doesn't match\n+        // that of 1970, the year of the epoch. Make sure the proper corrections are being performed.\n+        Session session = assertions.sessionBuilder()\n+                .setTimeZoneKey(getTimeZoneKey(\"America/Los_Angeles\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2NDAxNQ==", "bodyText": "We use Kathmandu in the code base for two reasons:\n\nit has an offset that is not whole hours (x:45)\nit has a different offset on 1970-01-01 than \"today\"\n(and it has no DST btw, which probably doesn't matter for this test)\n\nhttps://github.com/prestosql/presto/blob/4e1393d4933f73876999944ef9c7d0b5ddd3e534/presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java#L357\nhttps://github.com/prestosql/presto/blob/21e3ddf55a641e1c17b7e4a17689223ff1120b42/presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctionsBase.java#L196\nhttps://github.com/prestosql/presto/blob/21e3ddf55a641e1c17b7e4a17689223ff1120b42/presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctionsBase.java#L1125-L1126\nThat doesn't not surprise me you know the rules for Los Angeles. I would need to look them up though.\nTo be clear: I am fine with this test using Los Angeles zone.\nI just do not agree that Los Angeles is \"better\" in general.\n(See also prestodb/presto#10078)", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436564015", "createdAt": "2020-06-08T09:22:19Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()\n+    {\n+        // The number of seconds since the beginning of the day for the America/Los_Angeles in 2020 doesn't match\n+        // that of 1970, the year of the epoch. Make sure the proper corrections are being performed.\n+        Session session = assertions.sessionBuilder()\n+                .setTimeZoneKey(getTimeZoneKey(\"America/Los_Angeles\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2NDY1OA==", "bodyText": "Of course, we do not need (and we should not) use 2-4 selected zones everywhere.", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436564658", "createdAt": "2020-06-08T09:23:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()\n+    {\n+        // The number of seconds since the beginning of the day for the America/Los_Angeles in 2020 doesn't match\n+        // that of 1970, the year of the epoch. Make sure the proper corrections are being performed.\n+        Session session = assertions.sessionBuilder()\n+                .setTimeZoneKey(getTimeZoneKey(\"America/Los_Angeles\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODI4NTk5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMzoyMDowNlrOGgJdfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxNzowNjoyOFrOGgKrgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjYyMQ==", "bodyText": "This could go into BaseTestTimestamp, to cover the new semantics (even though it was not broken)", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436362621", "createdAt": "2020-06-07T13:20:06Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3MjM4OA==", "bodyText": "I thought about that, but this is just testing an implementation detail. (New) timestamps are not sensitive to timezones, so it didn't feel right to be testing that.", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436372388", "createdAt": "2020-06-07T15:02:26Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjYyMQ=="}, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MjU5Mg==", "bodyText": "I would prefer to have a common test. The new semantics are immune to session zone & its DST, but it is OK to verify that with a test (\"black box\").", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436382592", "createdAt": "2020-06-07T17:06:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjYyMQ=="}, "originalCommit": null, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4248, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}