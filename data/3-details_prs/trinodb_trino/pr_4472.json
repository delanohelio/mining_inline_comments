{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMDQ5Nzc3", "number": 4472, "title": "Check permission for create table like", "bodyText": "AccessControl::checkCanSelectFromColumn is now made when executing CREATE TABLE .. (LIKE ...)", "createdAt": "2020-07-16T09:36:08Z", "url": "https://github.com/trinodb/trino/pull/4472", "merged": true, "mergeCommit": {"oid": "94f2ae2b58d378cf389d630ba57905b5aa090c3f"}, "closed": true, "closedAt": "2020-08-05T12:06:10Z", "author": {"login": "skrzypo987"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1cNPEAFqTQ0OTY5MzM0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7TUprABqjM2MTYzMDIzODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NjkzMzQ5", "url": "https://github.com/trinodb/trino/pull/4472#pullrequestreview-449693349", "createdAt": "2020-07-16T09:50:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1MDowOVrOGyjlDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1NTozNFrOGyjyAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDkxMA==", "bodyText": "checkCanShowColumns is dedicated for SHOW COLUMNS statement. Notice that raising error: Cannot show columns of table %s for CREATE TABLE could be a bit misleading.\nInstead I would use io.prestosql.security.AccessControl#filterColumns, then in case all columns were filtered you might need to raise some custom AccessDeniedException", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455664910", "createdAt": "2020-07-16T09:50:09Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -161,6 +162,10 @@ else if (element instanceof LikeClause) {\n \n                 TableMetadata likeTableMetadata = metadata.getTableMetadata(session, likeTable);\n \n+                accessControl.checkCanShowColumns(\n+                        session.toSecurityContext(),\n+                        new CatalogSchemaTableName(likeTableName.getCatalogName(), likeTableName.asSchemaTableName()));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NTA1NQ==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455665055", "createdAt": "2020-07-16T09:50:23Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -77,14 +93,20 @@\n public class TestCreateTableTask\n {\n     private static final String CATALOG_NAME = \"catalog\";\n+    private static ConnectorTableMetadata PARENT_TABLE = new ConnectorTableMetadata(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2Njg0MA==", "bodyText": "reference PARENT_TABLE here", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455666840", "createdAt": "2020-07-16T09:53:14Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -186,6 +208,62 @@ public void testCreateWithUnsupportedConnectorThrowsWhenNotNull()\n                 .hasMessage(\"Catalog 'catalog' does not support non-null column for column name 'b'\");\n     }\n \n+    @Test\n+    public void testCreateLike()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NzE5MQ==", "bodyText": "reference PARENT_TABLE here", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455667191", "createdAt": "2020-07-16T09:53:47Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -186,6 +208,62 @@ public void testCreateWithUnsupportedConnectorThrowsWhenNotNull()\n                 .hasMessage(\"Catalog 'catalog' does not support non-null column for column name 'b'\");\n     }\n \n+    @Test\n+    public void testCreateLike()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),\n+                true,\n+                ImmutableList.of(),\n+                Optional.empty());\n+\n+        new CreateTableTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, List.of());\n+        assertEquals(metadata.getCreateTableCallCount(), 1);\n+\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getColumns())\n+                .isEqualTo(PARENT_TABLE.getColumns());\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getProperties())\n+                .isNotEqualTo(PARENT_TABLE.getProperties());\n+    }\n+\n+    @Test\n+    public void testCreateLikeWithProperties()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.of(INCLUDING))),\n+                true,\n+                ImmutableList.of(),\n+                Optional.empty());\n+\n+        new CreateTableTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, List.of());\n+        assertEquals(metadata.getCreateTableCallCount(), 1);\n+\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getColumns())\n+                .isEqualTo(PARENT_TABLE.getColumns());\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getProperties())\n+                .isEqualTo(PARENT_TABLE.getProperties());\n+    }\n+\n+    @Test\n+    public void testCreateLikeDenyPermission()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NzI3NA==", "bodyText": "reference PARENT_TABLE here", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455667274", "createdAt": "2020-07-16T09:53:56Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -186,6 +208,62 @@ public void testCreateWithUnsupportedConnectorThrowsWhenNotNull()\n                 .hasMessage(\"Catalog 'catalog' does not support non-null column for column name 'b'\");\n     }\n \n+    @Test\n+    public void testCreateLike()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),\n+                true,\n+                ImmutableList.of(),\n+                Optional.empty());\n+\n+        new CreateTableTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, List.of());\n+        assertEquals(metadata.getCreateTableCallCount(), 1);\n+\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getColumns())\n+                .isEqualTo(PARENT_TABLE.getColumns());\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getProperties())\n+                .isNotEqualTo(PARENT_TABLE.getProperties());\n+    }\n+\n+    @Test\n+    public void testCreateLikeWithProperties()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.of(INCLUDING))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NzYyNg==", "bodyText": "can you assert that there are no properties?", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455667626", "createdAt": "2020-07-16T09:54:34Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -186,6 +208,62 @@ public void testCreateWithUnsupportedConnectorThrowsWhenNotNull()\n                 .hasMessage(\"Catalog 'catalog' does not support non-null column for column name 'b'\");\n     }\n \n+    @Test\n+    public void testCreateLike()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),\n+                true,\n+                ImmutableList.of(),\n+                Optional.empty());\n+\n+        new CreateTableTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, List.of());\n+        assertEquals(metadata.getCreateTableCallCount(), 1);\n+\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getColumns())\n+                .isEqualTo(PARENT_TABLE.getColumns());\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getProperties())\n+                .isNotEqualTo(PARENT_TABLE.getProperties());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2ODIyNA==", "bodyText": "verify that tableHandle references PARENT_TABLE", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455668224", "createdAt": "2020-07-16T09:55:34Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -260,9 +338,23 @@ public Type fromSqlType(String sqlType)\n         @Override\n         public Optional<TableHandle> getTableHandle(Session session, QualifiedObjectName tableName)\n         {\n+            if (tableName.asSchemaTableName().equals(PARENT_TABLE.getTable())) {\n+                return Optional.of(\n+                        new TableHandle(\n+                                new CatalogName(CATALOG_NAME),\n+                                new TestingTableHandle(tableName.asSchemaTableName()),\n+                                TestingConnectorTransactionHandle.INSTANCE,\n+                                Optional.empty()));\n+            }\n             return Optional.empty();\n         }\n \n+        @Override\n+        public TableMetadata getTableMetadata(Session session, TableHandle tableHandle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 168}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTk2NDE3", "url": "https://github.com/trinodb/trino/pull/4472#pullrequestreview-452196417", "createdAt": "2020-07-21T07:31:45Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzozMTo0NVrOG0ro1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzozMjoyNVrOG0rqIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDEwMg==", "bodyText": "toImmutableList() let's be consistent with the current convention. Consider changing the convention in the separate pull request.", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r457894102", "createdAt": "2020-07-21T07:31:45Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,8 +182,12 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n-                likeTableMetadata.getColumns().stream()\n-                        .filter(column -> !column.isHidden())\n+                accessControl.filterColumns(\n+                        session.toSecurityContext(),\n+                        tableName.asCatalogSchemaTableName(),\n+                        likeTableMetadata.getColumns().stream()\n+                                .filter(column -> !column.isHidden())\n+                                .collect(toUnmodifiableList()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDQzNQ==", "bodyText": "What is happening when all columns are filtered? Do you have test for that?", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r457894435", "createdAt": "2020-07-21T07:32:25Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,8 +182,12 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n-                likeTableMetadata.getColumns().stream()\n-                        .filter(column -> !column.isHidden())\n+                accessControl.filterColumns(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODgwNjgy", "url": "https://github.com/trinodb/trino/pull/4472#pullrequestreview-459880682", "createdAt": "2020-08-03T09:27:19Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyNzoxOVrOG6yiJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyNzo0M1rOG6yi4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5ODUzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new AccessDeniedException(\"Cannot reference properties of table \" + likeTableName);\n          \n          \n            \n                                    throw new AccessDeniedException(\"Cannot reference columns and properties of table \" + likeTableName);", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r464298535", "createdAt": "2020-08-03T09:27:19Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,6 +174,26 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n+                if (propertiesOption.orElse(EXCLUDING) == INCLUDING) {\n+                    try {\n+                        accessControl.checkCanShowCreateTable(session.toSecurityContext(), likeTableName);\n+                    }\n+                    catch (AccessDeniedException e) {\n+                        throw new AccessDeniedException(\"Cannot reference properties of table \" + likeTableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5ODcyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            likeTableMetadata.getColumns().stream().map(ColumnMetadata::getName).collect(toImmutableSet()));\n          \n          \n            \n                                            likeTableMetadata.getColumns().stream()\n          \n          \n            \n                                                  .map(ColumnMetadata::getName)\n          \n          \n            \n                                                  .collect(toImmutableSet()));", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r464298723", "createdAt": "2020-08-03T09:27:43Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,6 +174,26 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n+                if (propertiesOption.orElse(EXCLUDING) == INCLUDING) {\n+                    try {\n+                        accessControl.checkCanShowCreateTable(session.toSecurityContext(), likeTableName);\n+                    }\n+                    catch (AccessDeniedException e) {\n+                        throw new AccessDeniedException(\"Cannot reference properties of table \" + likeTableName);\n+                    }\n+                }\n+                else {\n+                    try {\n+                        accessControl.checkCanSelectFromColumns(\n+                                session.toSecurityContext(),\n+                                likeTableName,\n+                                likeTableMetadata.getColumns().stream().map(ColumnMetadata::getName).collect(toImmutableSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODgzMDg4", "url": "https://github.com/trinodb/trino/pull/4472#pullrequestreview-459883088", "createdAt": "2020-08-03T09:30:58Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTozMDo1OFrOG6yp1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTozMDo1OFrOG6yp1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwMDUwMw==", "bodyText": "I think we should check this unconditionally (always). Successful checkCanShowCreateTable does not imply successful checkCanSelectFromColumns.", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r464300503", "createdAt": "2020-08-03T09:30:58Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,6 +174,26 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n+                if (propertiesOption.orElse(EXCLUDING) == INCLUDING) {\n+                    try {\n+                        accessControl.checkCanShowCreateTable(session.toSecurityContext(), likeTableName);\n+                    }\n+                    catch (AccessDeniedException e) {\n+                        throw new AccessDeniedException(\"Cannot reference properties of table \" + likeTableName);\n+                    }\n+                }\n+                else {\n+                    try {\n+                        accessControl.checkCanSelectFromColumns(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3f776a5493181cb6221a4bc34ced7b12d8365f4", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/c3f776a5493181cb6221a4bc34ced7b12d8365f4", "committedDate": "2020-08-03T12:50:27Z", "message": "Decrease visibility of @VisibleForTesting method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5e1afe14176db650682e77aa2e32912b526b6fa", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/d5e1afe14176db650682e77aa2e32912b526b6fa", "committedDate": "2020-08-03T14:58:01Z", "message": "Check permission to access columns in CREATE TABLE (LIKE)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "d5e1afe14176db650682e77aa2e32912b526b6fa", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/d5e1afe14176db650682e77aa2e32912b526b6fa", "committedDate": "2020-08-03T14:58:01Z", "message": "Check permission to access columns in CREATE TABLE (LIKE)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4727, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}