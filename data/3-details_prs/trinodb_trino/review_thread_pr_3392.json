{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzc2OTA2", "number": 3392, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDoyNjo1N1rODw2d-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMjo1Njo1MFrODw52eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTUwNjUxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/string.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDoyNjo1N1rOGEE5ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowODozMVrOGEtfXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzcxNw==", "bodyText": "How about \"Tests whether substring is a prefix of string\".\n@mosabua, any suggestions?", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406927717", "createdAt": "2020-04-10T20:26:57Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -141,6 +141,10 @@ String Functions\n     Returns the starting position of the first instance of ``substring`` in\n     ``string``. Positions start with ``1``. If not found, ``0`` is returned.\n \n+.. function:: starts_with(string, substring) -> boolean\n+\n+    Returns boolean whether ``string`` starts with ``substring`` or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5Mjc5OQ==", "bodyText": "thats good.. or\nDetermine if the supplied string starts with substring.\nThe \"or not\" is redundant in my opinion.", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r407592799", "createdAt": "2020-04-13T17:08:31Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -141,6 +141,10 @@ String Functions\n     Returns the starting position of the first instance of ``substring`` in\n     ``string``. Positions start with ``1``. If not found, ``0`` is returned.\n \n+.. function:: starts_with(string, substring) -> boolean\n+\n+    Returns boolean whether ``string`` starts with ``substring`` or not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzcxNw=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTUxOTk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDozMDo0NlrOGEFBOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMToyNzozMFrOGEJSyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyOTcyMw==", "bodyText": "Can you add tests for:\n\nstrings that contain non-ascii unicode characters?\nwhere the string is shorter than the substring\nempty string and/or empty substring", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406929723", "createdAt": "2020-04-10T20:30:46Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -284,6 +284,11 @@ public void testStringPosition()\n         testStrPosAndPosition(\"\", null, null);\n         testStrPosAndPosition(null, null, null);\n \n+        assertFunction(\"STARTS_WITH('foo', 'foo')\", BOOLEAN, true);\n+        assertFunction(\"STARTS_WITH('foo', 'bar')\", BOOLEAN, false);\n+        assertFunction(\"STARTS_WITH('foo_bar_baz', 'foo')\", BOOLEAN, true);\n+        assertFunction(\"STARTS_WITH('foo_bar_baz', 'bar')\", BOOLEAN, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTc1NQ==", "bodyText": "Added several test cases", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406999755", "createdAt": "2020-04-11T01:27:30Z", "author": {"login": "yuokada"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -284,6 +284,11 @@ public void testStringPosition()\n         testStrPosAndPosition(\"\", null, null);\n         testStrPosAndPosition(null, null, null);\n \n+        assertFunction(\"STARTS_WITH('foo', 'foo')\", BOOLEAN, true);\n+        assertFunction(\"STARTS_WITH('foo', 'bar')\", BOOLEAN, false);\n+        assertFunction(\"STARTS_WITH('foo_bar_baz', 'foo')\", BOOLEAN, true);\n+        assertFunction(\"STARTS_WITH('foo_bar_baz', 'bar')\", BOOLEAN, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyOTcyMw=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk4MTg5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/string.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMToxNDo0MlrOGEJNwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMToxNDo0MlrOGEJNwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5ODQ2NQ==", "bodyText": "substring and string should be surrounded by `\nAlso, there's an extra \" at the end of the sentence.", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406998465", "createdAt": "2020-04-11T01:14:42Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -141,6 +141,10 @@ String Functions\n     Returns the starting position of the first instance of ``substring`` in\n     ``string``. Positions start with ``1``. If not found, ``0`` is returned.\n \n+.. function:: starts_with(string, substring) -> boolean\n+\n+    Tests whether substring is a prefix of string\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk4MjQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMToxNToyNlrOGEJOAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMToyNjo0M1rOGEJSmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5ODUzMA==", "bodyText": "else is unnecessary:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (source.length() < prefix.length()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (source.length() < prefix.length()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406998530", "createdAt": "2020-04-11T01:15:26Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -899,4 +899,18 @@ public static Slice concat(@LiteralParameter(\"x\") Long x, @SqlType(\"char(x)\") Sl\n \n         return result;\n     }\n+\n+    @Description(\"Determine whether source starts with prefix or not\")\n+    @ScalarFunction(\"starts_with\")\n+    @LiteralParameters({\"x\", \"y\"})\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean startsWith(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"varchar(y)\") Slice prefix)\n+    {\n+        if (source.length() < prefix.length()) {\n+            return false;\n+        }\n+        else {\n+            return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTcwNQ==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406999705", "createdAt": "2020-04-11T01:26:43Z", "author": {"login": "yuokada"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -899,4 +899,18 @@ public static Slice concat(@LiteralParameter(\"x\") Long x, @SqlType(\"char(x)\") Sl\n \n         return result;\n     }\n+\n+    @Description(\"Determine whether source starts with prefix or not\")\n+    @ScalarFunction(\"starts_with\")\n+    @LiteralParameters({\"x\", \"y\"})\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean startsWith(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"varchar(y)\") Slice prefix)\n+    {\n+        if (source.length() < prefix.length()) {\n+            return false;\n+        }\n+        else {\n+            return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5ODUzMA=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjA2MDczOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMjo1Njo1MFrOGEJ1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMzoxNzoyM1rOGEJ78w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwODUyNw==", "bodyText": "nit: We can remove (\"starts_with\") because the method name startsWith  will be translated to starts_with function.", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r407008527", "createdAt": "2020-04-11T02:56:50Z", "author": {"login": "ebyhr"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -899,4 +899,16 @@ public static Slice concat(@LiteralParameter(\"x\") Long x, @SqlType(\"char(x)\") Sl\n \n         return result;\n     }\n+\n+    @Description(\"Determine whether source starts with prefix or not\")\n+    @ScalarFunction(\"starts_with\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxMDI5MQ==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r407010291", "createdAt": "2020-04-11T03:17:23Z", "author": {"login": "yuokada"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -899,4 +899,16 @@ public static Slice concat(@LiteralParameter(\"x\") Long x, @SqlType(\"char(x)\") Sl\n \n         return result;\n     }\n+\n+    @Description(\"Determine whether source starts with prefix or not\")\n+    @ScalarFunction(\"starts_with\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwODUyNw=="}, "originalCommit": null, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 385, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}