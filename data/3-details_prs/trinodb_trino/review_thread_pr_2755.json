{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDM0NTAx", "number": 2755, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzozMDo0NVrODfCaWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTozNjoyNlrODfZALA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODcxOTYwOnYy", "diffSide": "RIGHT", "path": "presto-main/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzozMDo0NVrOFogwPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzozMDo0NVrOFogwPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMzk5OA==", "bodyText": "Make these <scope>runtime</scope> and add a section header:\n<!-- used by tests but also needed transitively -->", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378023998", "createdAt": "2020-02-12T03:30:45Z", "author": {"login": "electrum"}, "path": "presto-main/pom.xml", "diffHunk": "@@ -302,6 +302,16 @@\n             <artifactId>jjwt</artifactId>\n         </dependency>\n \n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTg3NzA2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMToyOTowNVrOFo_NBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMToyOTowNVrOFo_NBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyMjg4Ng==", "bodyText": "Check for null", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378522886", "createdAt": "2020-02-12T21:29:05Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);\n+        this.jwtGenerator = username -> generateJwt(hmac, username, sessionTimeoutNanos);\n+\n+        this.passwordAuthenticatorManager = passwordAuthenticatorManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjE2OTA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoyMTowMlrOFpCEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0MDo0M1rOFrurUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2OTkwNA==", "bodyText": "We might want to fail here if a password was provided", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378569904", "createdAt": "2020-02-12T23:21:02Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);\n+        this.jwtGenerator = username -> generateJwt(hmac, username, sessionTimeoutNanos);\n+\n+        this.passwordAuthenticatorManager = passwordAuthenticatorManager;\n+    }\n+\n+    @Override\n+    public void handleUiRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        if (request.getPathInfo() == null || request.getPathInfo().equals(\"/\")) {\n+            sendRedirect(response, getUiLocation(request));\n+            return;\n+        }\n+\n+        if (isPublic(request)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/login\")) {\n+            handleLoginRequest(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/logout\")) {\n+            handleLogoutRequest(request, response);\n+            return;\n+        }\n+\n+        Optional<String> username = getAuthenticatedUsername(request);\n+        if (username.isPresent()) {\n+            if (request.getPathInfo().equals(LOGIN_FORM)) {\n+                sendRedirectFromSuccessfulLogin(request, response, request.getQueryString());\n+                return;\n+            }\n+            nextFilter.doFilter(withUsername(request, username.get()), response);\n+            return;\n+        }\n+\n+        // clear authentication cookie if present\n+        getAuthenticationCookie(request)\n+                .ifPresent(ignored -> response.addCookie(getDeleteCookie(request)));\n+\n+        // drain the input\n+        try (InputStream inputStream = request.getInputStream()) {\n+            ByteStreams.exhaust(inputStream);\n+        }\n+\n+        // send 401 to REST api calls and redirect to others\n+        if (request.getPathInfo().startsWith(\"/ui/api/\")) {\n+            response.setHeader(WWW_AUTHENTICATE, \"Presto-Form-Login\");\n+            response.setStatus(SC_UNAUTHORIZED);\n+            return;\n+        }\n+\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+\n+        if (request.getPathInfo().equals(LOGIN_FORM)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+\n+        // redirect to login page\n+        sendRedirect(response, getRedirectLocation(request, LOGIN_FORM, encodeCurrentLocationForLoginRedirect(request)));\n+    }\n+\n+    private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest request)\n+    {\n+        String path = request.getPathInfo();\n+        if (!isNullOrEmpty(request.getQueryString())) {\n+            path += \"?\" + request.getQueryString();\n+        }\n+        if (path.equals(\"/ui\") || path.equals(\"/ui/\")) {\n+            return null;\n+        }\n+        return path;\n+    }\n+\n+    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+        Optional<String> username = checkLoginCredentials(request);\n+        if (username.isPresent()) {\n+            response.addCookie(createAuthenticationCookie(request, username.get()));\n+            sendRedirectFromSuccessfulLogin(request, response, request.getParameter(\"redirectPath\"));\n+            return;\n+        }\n+        sendRedirect(response, getLoginFormLocation(request));\n+    }\n+\n+    private static void sendRedirectFromSuccessfulLogin(HttpServletRequest request, HttpServletResponse response, String redirectPath)\n+    {\n+        try {\n+            URI redirectUri = new URI(firstNonNull(emptyToNull(redirectPath), UI_LOCATION));\n+            sendRedirect(response, getRedirectLocation(request, redirectUri.getPath(), redirectUri.getQuery()));\n+        }\n+        catch (URISyntaxException ignored) {\n+            sendRedirect(response, UI_LOCATION);\n+        }\n+    }\n+\n+    private Optional<String> checkLoginCredentials(HttpServletRequest request)\n+    {\n+        String username = emptyToNull(request.getParameter(\"username\"));\n+        if (username == null) {\n+            return Optional.empty();\n+        }\n+\n+        if (!isHttps(request)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5Nzg0Mw==", "bodyText": "There is no \"fail\" in this code. We either take the login on redirect back to the login page.  Which would you prefer?", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r381397843", "createdAt": "2020-02-19T16:40:43Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);\n+        this.jwtGenerator = username -> generateJwt(hmac, username, sessionTimeoutNanos);\n+\n+        this.passwordAuthenticatorManager = passwordAuthenticatorManager;\n+    }\n+\n+    @Override\n+    public void handleUiRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        if (request.getPathInfo() == null || request.getPathInfo().equals(\"/\")) {\n+            sendRedirect(response, getUiLocation(request));\n+            return;\n+        }\n+\n+        if (isPublic(request)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/login\")) {\n+            handleLoginRequest(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/logout\")) {\n+            handleLogoutRequest(request, response);\n+            return;\n+        }\n+\n+        Optional<String> username = getAuthenticatedUsername(request);\n+        if (username.isPresent()) {\n+            if (request.getPathInfo().equals(LOGIN_FORM)) {\n+                sendRedirectFromSuccessfulLogin(request, response, request.getQueryString());\n+                return;\n+            }\n+            nextFilter.doFilter(withUsername(request, username.get()), response);\n+            return;\n+        }\n+\n+        // clear authentication cookie if present\n+        getAuthenticationCookie(request)\n+                .ifPresent(ignored -> response.addCookie(getDeleteCookie(request)));\n+\n+        // drain the input\n+        try (InputStream inputStream = request.getInputStream()) {\n+            ByteStreams.exhaust(inputStream);\n+        }\n+\n+        // send 401 to REST api calls and redirect to others\n+        if (request.getPathInfo().startsWith(\"/ui/api/\")) {\n+            response.setHeader(WWW_AUTHENTICATE, \"Presto-Form-Login\");\n+            response.setStatus(SC_UNAUTHORIZED);\n+            return;\n+        }\n+\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+\n+        if (request.getPathInfo().equals(LOGIN_FORM)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+\n+        // redirect to login page\n+        sendRedirect(response, getRedirectLocation(request, LOGIN_FORM, encodeCurrentLocationForLoginRedirect(request)));\n+    }\n+\n+    private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest request)\n+    {\n+        String path = request.getPathInfo();\n+        if (!isNullOrEmpty(request.getQueryString())) {\n+            path += \"?\" + request.getQueryString();\n+        }\n+        if (path.equals(\"/ui\") || path.equals(\"/ui/\")) {\n+            return null;\n+        }\n+        return path;\n+    }\n+\n+    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+        Optional<String> username = checkLoginCredentials(request);\n+        if (username.isPresent()) {\n+            response.addCookie(createAuthenticationCookie(request, username.get()));\n+            sendRedirectFromSuccessfulLogin(request, response, request.getParameter(\"redirectPath\"));\n+            return;\n+        }\n+        sendRedirect(response, getLoginFormLocation(request));\n+    }\n+\n+    private static void sendRedirectFromSuccessfulLogin(HttpServletRequest request, HttpServletResponse response, String redirectPath)\n+    {\n+        try {\n+            URI redirectUri = new URI(firstNonNull(emptyToNull(redirectPath), UI_LOCATION));\n+            sendRedirect(response, getRedirectLocation(request, redirectUri.getPath(), redirectUri.getQuery()));\n+        }\n+        catch (URISyntaxException ignored) {\n+            sendRedirect(response, UI_LOCATION);\n+        }\n+    }\n+\n+    private Optional<String> checkLoginCredentials(HttpServletRequest request)\n+    {\n+        String username = emptyToNull(request.getParameter(\"username\"));\n+        if (username == null) {\n+            return Optional.empty();\n+        }\n+\n+        if (!isHttps(request)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2OTkwNA=="}, "originalCommit": null, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjE3NDQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoyMzo0NVrOFpCH6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoyMzo0NVrOFpCH6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MDcyOQ==", "bodyText": "This could be\nreturn stream(firstNonNull(request.getCookies(), new Cookie[0]))\n        .filter(cookie -> cookie.getName().equals(PRESTO_UI_COOKIE))\n        .findFirst();", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378570729", "createdAt": "2020-02-12T23:23:45Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);\n+        this.jwtGenerator = username -> generateJwt(hmac, username, sessionTimeoutNanos);\n+\n+        this.passwordAuthenticatorManager = passwordAuthenticatorManager;\n+    }\n+\n+    @Override\n+    public void handleUiRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        if (request.getPathInfo() == null || request.getPathInfo().equals(\"/\")) {\n+            sendRedirect(response, getUiLocation(request));\n+            return;\n+        }\n+\n+        if (isPublic(request)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/login\")) {\n+            handleLoginRequest(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/logout\")) {\n+            handleLogoutRequest(request, response);\n+            return;\n+        }\n+\n+        Optional<String> username = getAuthenticatedUsername(request);\n+        if (username.isPresent()) {\n+            if (request.getPathInfo().equals(LOGIN_FORM)) {\n+                sendRedirectFromSuccessfulLogin(request, response, request.getQueryString());\n+                return;\n+            }\n+            nextFilter.doFilter(withUsername(request, username.get()), response);\n+            return;\n+        }\n+\n+        // clear authentication cookie if present\n+        getAuthenticationCookie(request)\n+                .ifPresent(ignored -> response.addCookie(getDeleteCookie(request)));\n+\n+        // drain the input\n+        try (InputStream inputStream = request.getInputStream()) {\n+            ByteStreams.exhaust(inputStream);\n+        }\n+\n+        // send 401 to REST api calls and redirect to others\n+        if (request.getPathInfo().startsWith(\"/ui/api/\")) {\n+            response.setHeader(WWW_AUTHENTICATE, \"Presto-Form-Login\");\n+            response.setStatus(SC_UNAUTHORIZED);\n+            return;\n+        }\n+\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+\n+        if (request.getPathInfo().equals(LOGIN_FORM)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+\n+        // redirect to login page\n+        sendRedirect(response, getRedirectLocation(request, LOGIN_FORM, encodeCurrentLocationForLoginRedirect(request)));\n+    }\n+\n+    private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest request)\n+    {\n+        String path = request.getPathInfo();\n+        if (!isNullOrEmpty(request.getQueryString())) {\n+            path += \"?\" + request.getQueryString();\n+        }\n+        if (path.equals(\"/ui\") || path.equals(\"/ui/\")) {\n+            return null;\n+        }\n+        return path;\n+    }\n+\n+    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+        Optional<String> username = checkLoginCredentials(request);\n+        if (username.isPresent()) {\n+            response.addCookie(createAuthenticationCookie(request, username.get()));\n+            sendRedirectFromSuccessfulLogin(request, response, request.getParameter(\"redirectPath\"));\n+            return;\n+        }\n+        sendRedirect(response, getLoginFormLocation(request));\n+    }\n+\n+    private static void sendRedirectFromSuccessfulLogin(HttpServletRequest request, HttpServletResponse response, String redirectPath)\n+    {\n+        try {\n+            URI redirectUri = new URI(firstNonNull(emptyToNull(redirectPath), UI_LOCATION));\n+            sendRedirect(response, getRedirectLocation(request, redirectUri.getPath(), redirectUri.getQuery()));\n+        }\n+        catch (URISyntaxException ignored) {\n+            sendRedirect(response, UI_LOCATION);\n+        }\n+    }\n+\n+    private Optional<String> checkLoginCredentials(HttpServletRequest request)\n+    {\n+        String username = emptyToNull(request.getParameter(\"username\"));\n+        if (username == null) {\n+            return Optional.empty();\n+        }\n+\n+        if (!isHttps(request)) {\n+            return Optional.of(username);\n+        }\n+\n+        String password = emptyToNull(request.getParameter(\"password\"));\n+        try {\n+            passwordAuthenticatorManager.getAuthenticator().createAuthenticatedPrincipal(username, password);\n+            return Optional.of(username);\n+        }\n+        catch (AccessDeniedException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleLogoutRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        response.addCookie(getDeleteCookie(request));\n+        if (isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getLoginFormLocation(request));\n+            return;\n+        }\n+        sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+    }\n+\n+    private Optional<String> getAuthenticatedUsername(HttpServletRequest request)\n+    {\n+        Optional<Cookie> cookie = getAuthenticationCookie(request);\n+        if (cookie.isPresent()) {\n+            try {\n+                return Optional.of(jwtParser.apply(cookie.get().getValue()));\n+            }\n+            catch (JwtException e) {\n+                return Optional.empty();\n+            }\n+            catch (RuntimeException e) {\n+                throw new RuntimeException(\"Authentication error\", e);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static ServletRequest withUsername(HttpServletRequest request, String username)\n+    {\n+        requireNonNull(username, \"username is null\");\n+        BasicPrincipal principal = new BasicPrincipal(username);\n+        request.setAttribute(AUTHENTICATED_IDENTITY, Identity.forUser(username)\n+                .withPrincipal(principal)\n+                .build());\n+        return new HttpServletRequestWrapper(request)\n+        {\n+            @Override\n+            public Principal getUserPrincipal()\n+            {\n+                return principal;\n+            }\n+        };\n+    }\n+\n+    private Cookie createAuthenticationCookie(HttpServletRequest request, String userName)\n+    {\n+        String jwt = jwtGenerator.apply(userName);\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, jwt);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        cookie.setPath(\"/ui\");\n+        return cookie;\n+    }\n+\n+    private static Cookie getDeleteCookie(HttpServletRequest request)\n+    {\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, \"delete\");\n+        cookie.setMaxAge(0);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        return cookie;\n+    }\n+\n+    private static Optional<Cookie> getAuthenticationCookie(HttpServletRequest request)\n+    {\n+        for (Cookie cookie : firstNonNull(request.getCookies(), new Cookie[0])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjE3NzI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoyNToxNVrOFpCJxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0NTo0NFrOFru43g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MTIwNA==", "bodyText": "Use the JAX-RS URI builder", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378571204", "createdAt": "2020-02-12T23:25:15Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);\n+        this.jwtGenerator = username -> generateJwt(hmac, username, sessionTimeoutNanos);\n+\n+        this.passwordAuthenticatorManager = passwordAuthenticatorManager;\n+    }\n+\n+    @Override\n+    public void handleUiRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        if (request.getPathInfo() == null || request.getPathInfo().equals(\"/\")) {\n+            sendRedirect(response, getUiLocation(request));\n+            return;\n+        }\n+\n+        if (isPublic(request)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/login\")) {\n+            handleLoginRequest(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/logout\")) {\n+            handleLogoutRequest(request, response);\n+            return;\n+        }\n+\n+        Optional<String> username = getAuthenticatedUsername(request);\n+        if (username.isPresent()) {\n+            if (request.getPathInfo().equals(LOGIN_FORM)) {\n+                sendRedirectFromSuccessfulLogin(request, response, request.getQueryString());\n+                return;\n+            }\n+            nextFilter.doFilter(withUsername(request, username.get()), response);\n+            return;\n+        }\n+\n+        // clear authentication cookie if present\n+        getAuthenticationCookie(request)\n+                .ifPresent(ignored -> response.addCookie(getDeleteCookie(request)));\n+\n+        // drain the input\n+        try (InputStream inputStream = request.getInputStream()) {\n+            ByteStreams.exhaust(inputStream);\n+        }\n+\n+        // send 401 to REST api calls and redirect to others\n+        if (request.getPathInfo().startsWith(\"/ui/api/\")) {\n+            response.setHeader(WWW_AUTHENTICATE, \"Presto-Form-Login\");\n+            response.setStatus(SC_UNAUTHORIZED);\n+            return;\n+        }\n+\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+\n+        if (request.getPathInfo().equals(LOGIN_FORM)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+\n+        // redirect to login page\n+        sendRedirect(response, getRedirectLocation(request, LOGIN_FORM, encodeCurrentLocationForLoginRedirect(request)));\n+    }\n+\n+    private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest request)\n+    {\n+        String path = request.getPathInfo();\n+        if (!isNullOrEmpty(request.getQueryString())) {\n+            path += \"?\" + request.getQueryString();\n+        }\n+        if (path.equals(\"/ui\") || path.equals(\"/ui/\")) {\n+            return null;\n+        }\n+        return path;\n+    }\n+\n+    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+        Optional<String> username = checkLoginCredentials(request);\n+        if (username.isPresent()) {\n+            response.addCookie(createAuthenticationCookie(request, username.get()));\n+            sendRedirectFromSuccessfulLogin(request, response, request.getParameter(\"redirectPath\"));\n+            return;\n+        }\n+        sendRedirect(response, getLoginFormLocation(request));\n+    }\n+\n+    private static void sendRedirectFromSuccessfulLogin(HttpServletRequest request, HttpServletResponse response, String redirectPath)\n+    {\n+        try {\n+            URI redirectUri = new URI(firstNonNull(emptyToNull(redirectPath), UI_LOCATION));\n+            sendRedirect(response, getRedirectLocation(request, redirectUri.getPath(), redirectUri.getQuery()));\n+        }\n+        catch (URISyntaxException ignored) {\n+            sendRedirect(response, UI_LOCATION);\n+        }\n+    }\n+\n+    private Optional<String> checkLoginCredentials(HttpServletRequest request)\n+    {\n+        String username = emptyToNull(request.getParameter(\"username\"));\n+        if (username == null) {\n+            return Optional.empty();\n+        }\n+\n+        if (!isHttps(request)) {\n+            return Optional.of(username);\n+        }\n+\n+        String password = emptyToNull(request.getParameter(\"password\"));\n+        try {\n+            passwordAuthenticatorManager.getAuthenticator().createAuthenticatedPrincipal(username, password);\n+            return Optional.of(username);\n+        }\n+        catch (AccessDeniedException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleLogoutRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        response.addCookie(getDeleteCookie(request));\n+        if (isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getLoginFormLocation(request));\n+            return;\n+        }\n+        sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+    }\n+\n+    private Optional<String> getAuthenticatedUsername(HttpServletRequest request)\n+    {\n+        Optional<Cookie> cookie = getAuthenticationCookie(request);\n+        if (cookie.isPresent()) {\n+            try {\n+                return Optional.of(jwtParser.apply(cookie.get().getValue()));\n+            }\n+            catch (JwtException e) {\n+                return Optional.empty();\n+            }\n+            catch (RuntimeException e) {\n+                throw new RuntimeException(\"Authentication error\", e);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static ServletRequest withUsername(HttpServletRequest request, String username)\n+    {\n+        requireNonNull(username, \"username is null\");\n+        BasicPrincipal principal = new BasicPrincipal(username);\n+        request.setAttribute(AUTHENTICATED_IDENTITY, Identity.forUser(username)\n+                .withPrincipal(principal)\n+                .build());\n+        return new HttpServletRequestWrapper(request)\n+        {\n+            @Override\n+            public Principal getUserPrincipal()\n+            {\n+                return principal;\n+            }\n+        };\n+    }\n+\n+    private Cookie createAuthenticationCookie(HttpServletRequest request, String userName)\n+    {\n+        String jwt = jwtGenerator.apply(userName);\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, jwt);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        cookie.setPath(\"/ui\");\n+        return cookie;\n+    }\n+\n+    private static Cookie getDeleteCookie(HttpServletRequest request)\n+    {\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, \"delete\");\n+        cookie.setMaxAge(0);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        return cookie;\n+    }\n+\n+    private static Optional<Cookie> getAuthenticationCookie(HttpServletRequest request)\n+    {\n+        for (Cookie cookie : firstNonNull(request.getCookies(), new Cookie[0])) {\n+            if (cookie.getName().equals(PRESTO_UI_COOKIE)) {\n+                return Optional.of(cookie);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static boolean isPublic(HttpServletRequest request)\n+    {\n+        // note login page is handled later\n+        String pathInfo = request.getPathInfo();\n+        return pathInfo.equals(DISABLED_LOCATION) ||\n+                pathInfo.startsWith(\"/ui/vendor\") ||\n+                pathInfo.startsWith(\"/ui/assets\");\n+    }\n+\n+    private static void sendRedirect(HttpServletResponse response, String location)\n+    {\n+        response.setHeader(LOCATION, location);\n+        response.setStatus(SC_SEE_OTHER);\n+    }\n+\n+    private static String getLoginFormLocation(HttpServletRequest request)\n+    {\n+        return getRedirectLocation(request, LOGIN_FORM);\n+    }\n+\n+    private static String getUiLocation(HttpServletRequest request)\n+    {\n+        return getRedirectLocation(request, UI_LOCATION);\n+    }\n+\n+    private static String getRedirectLocation(HttpServletRequest request, String path)\n+    {\n+        return getRedirectLocation(request, path, null);\n+    }\n+\n+    private static String getRedirectLocation(HttpServletRequest request, String path, String queryParameter)\n+    {\n+        String proto = firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme());\n+        HttpUriBuilder builder = uriBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMTMxMA==", "bodyText": "The JAX-RS builder is not a generic builder.  It can't build a URI from raw parts, and instead builds URIs from templates or existing URIs.", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r381401310", "createdAt": "2020-02-19T16:45:44Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);\n+        this.jwtGenerator = username -> generateJwt(hmac, username, sessionTimeoutNanos);\n+\n+        this.passwordAuthenticatorManager = passwordAuthenticatorManager;\n+    }\n+\n+    @Override\n+    public void handleUiRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        if (request.getPathInfo() == null || request.getPathInfo().equals(\"/\")) {\n+            sendRedirect(response, getUiLocation(request));\n+            return;\n+        }\n+\n+        if (isPublic(request)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/login\")) {\n+            handleLoginRequest(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/logout\")) {\n+            handleLogoutRequest(request, response);\n+            return;\n+        }\n+\n+        Optional<String> username = getAuthenticatedUsername(request);\n+        if (username.isPresent()) {\n+            if (request.getPathInfo().equals(LOGIN_FORM)) {\n+                sendRedirectFromSuccessfulLogin(request, response, request.getQueryString());\n+                return;\n+            }\n+            nextFilter.doFilter(withUsername(request, username.get()), response);\n+            return;\n+        }\n+\n+        // clear authentication cookie if present\n+        getAuthenticationCookie(request)\n+                .ifPresent(ignored -> response.addCookie(getDeleteCookie(request)));\n+\n+        // drain the input\n+        try (InputStream inputStream = request.getInputStream()) {\n+            ByteStreams.exhaust(inputStream);\n+        }\n+\n+        // send 401 to REST api calls and redirect to others\n+        if (request.getPathInfo().startsWith(\"/ui/api/\")) {\n+            response.setHeader(WWW_AUTHENTICATE, \"Presto-Form-Login\");\n+            response.setStatus(SC_UNAUTHORIZED);\n+            return;\n+        }\n+\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+\n+        if (request.getPathInfo().equals(LOGIN_FORM)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+\n+        // redirect to login page\n+        sendRedirect(response, getRedirectLocation(request, LOGIN_FORM, encodeCurrentLocationForLoginRedirect(request)));\n+    }\n+\n+    private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest request)\n+    {\n+        String path = request.getPathInfo();\n+        if (!isNullOrEmpty(request.getQueryString())) {\n+            path += \"?\" + request.getQueryString();\n+        }\n+        if (path.equals(\"/ui\") || path.equals(\"/ui/\")) {\n+            return null;\n+        }\n+        return path;\n+    }\n+\n+    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+        Optional<String> username = checkLoginCredentials(request);\n+        if (username.isPresent()) {\n+            response.addCookie(createAuthenticationCookie(request, username.get()));\n+            sendRedirectFromSuccessfulLogin(request, response, request.getParameter(\"redirectPath\"));\n+            return;\n+        }\n+        sendRedirect(response, getLoginFormLocation(request));\n+    }\n+\n+    private static void sendRedirectFromSuccessfulLogin(HttpServletRequest request, HttpServletResponse response, String redirectPath)\n+    {\n+        try {\n+            URI redirectUri = new URI(firstNonNull(emptyToNull(redirectPath), UI_LOCATION));\n+            sendRedirect(response, getRedirectLocation(request, redirectUri.getPath(), redirectUri.getQuery()));\n+        }\n+        catch (URISyntaxException ignored) {\n+            sendRedirect(response, UI_LOCATION);\n+        }\n+    }\n+\n+    private Optional<String> checkLoginCredentials(HttpServletRequest request)\n+    {\n+        String username = emptyToNull(request.getParameter(\"username\"));\n+        if (username == null) {\n+            return Optional.empty();\n+        }\n+\n+        if (!isHttps(request)) {\n+            return Optional.of(username);\n+        }\n+\n+        String password = emptyToNull(request.getParameter(\"password\"));\n+        try {\n+            passwordAuthenticatorManager.getAuthenticator().createAuthenticatedPrincipal(username, password);\n+            return Optional.of(username);\n+        }\n+        catch (AccessDeniedException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleLogoutRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        response.addCookie(getDeleteCookie(request));\n+        if (isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getLoginFormLocation(request));\n+            return;\n+        }\n+        sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+    }\n+\n+    private Optional<String> getAuthenticatedUsername(HttpServletRequest request)\n+    {\n+        Optional<Cookie> cookie = getAuthenticationCookie(request);\n+        if (cookie.isPresent()) {\n+            try {\n+                return Optional.of(jwtParser.apply(cookie.get().getValue()));\n+            }\n+            catch (JwtException e) {\n+                return Optional.empty();\n+            }\n+            catch (RuntimeException e) {\n+                throw new RuntimeException(\"Authentication error\", e);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static ServletRequest withUsername(HttpServletRequest request, String username)\n+    {\n+        requireNonNull(username, \"username is null\");\n+        BasicPrincipal principal = new BasicPrincipal(username);\n+        request.setAttribute(AUTHENTICATED_IDENTITY, Identity.forUser(username)\n+                .withPrincipal(principal)\n+                .build());\n+        return new HttpServletRequestWrapper(request)\n+        {\n+            @Override\n+            public Principal getUserPrincipal()\n+            {\n+                return principal;\n+            }\n+        };\n+    }\n+\n+    private Cookie createAuthenticationCookie(HttpServletRequest request, String userName)\n+    {\n+        String jwt = jwtGenerator.apply(userName);\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, jwt);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        cookie.setPath(\"/ui\");\n+        return cookie;\n+    }\n+\n+    private static Cookie getDeleteCookie(HttpServletRequest request)\n+    {\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, \"delete\");\n+        cookie.setMaxAge(0);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        return cookie;\n+    }\n+\n+    private static Optional<Cookie> getAuthenticationCookie(HttpServletRequest request)\n+    {\n+        for (Cookie cookie : firstNonNull(request.getCookies(), new Cookie[0])) {\n+            if (cookie.getName().equals(PRESTO_UI_COOKIE)) {\n+                return Optional.of(cookie);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static boolean isPublic(HttpServletRequest request)\n+    {\n+        // note login page is handled later\n+        String pathInfo = request.getPathInfo();\n+        return pathInfo.equals(DISABLED_LOCATION) ||\n+                pathInfo.startsWith(\"/ui/vendor\") ||\n+                pathInfo.startsWith(\"/ui/assets\");\n+    }\n+\n+    private static void sendRedirect(HttpServletResponse response, String location)\n+    {\n+        response.setHeader(LOCATION, location);\n+        response.setStatus(SC_SEE_OTHER);\n+    }\n+\n+    private static String getLoginFormLocation(HttpServletRequest request)\n+    {\n+        return getRedirectLocation(request, LOGIN_FORM);\n+    }\n+\n+    private static String getUiLocation(HttpServletRequest request)\n+    {\n+        return getRedirectLocation(request, UI_LOCATION);\n+    }\n+\n+    private static String getRedirectLocation(HttpServletRequest request, String path)\n+    {\n+        return getRedirectLocation(request, path, null);\n+    }\n+\n+    private static String getRedirectLocation(HttpServletRequest request, String path, String queryParameter)\n+    {\n+        String proto = firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme());\n+        HttpUriBuilder builder = uriBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MTIwNA=="}, "originalCommit": null, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjI0OTYxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDowMzowOFrOFpC2Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo0Mzo0OVrOFruz1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4MjYwNw==", "bodyText": "Why not\nDate.from(Instant.now().plusNanos(sessionTimeoutNanos))", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378582607", "createdAt": "2020-02-13T00:03:08Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);\n+        this.jwtGenerator = username -> generateJwt(hmac, username, sessionTimeoutNanos);\n+\n+        this.passwordAuthenticatorManager = passwordAuthenticatorManager;\n+    }\n+\n+    @Override\n+    public void handleUiRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        if (request.getPathInfo() == null || request.getPathInfo().equals(\"/\")) {\n+            sendRedirect(response, getUiLocation(request));\n+            return;\n+        }\n+\n+        if (isPublic(request)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/login\")) {\n+            handleLoginRequest(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/logout\")) {\n+            handleLogoutRequest(request, response);\n+            return;\n+        }\n+\n+        Optional<String> username = getAuthenticatedUsername(request);\n+        if (username.isPresent()) {\n+            if (request.getPathInfo().equals(LOGIN_FORM)) {\n+                sendRedirectFromSuccessfulLogin(request, response, request.getQueryString());\n+                return;\n+            }\n+            nextFilter.doFilter(withUsername(request, username.get()), response);\n+            return;\n+        }\n+\n+        // clear authentication cookie if present\n+        getAuthenticationCookie(request)\n+                .ifPresent(ignored -> response.addCookie(getDeleteCookie(request)));\n+\n+        // drain the input\n+        try (InputStream inputStream = request.getInputStream()) {\n+            ByteStreams.exhaust(inputStream);\n+        }\n+\n+        // send 401 to REST api calls and redirect to others\n+        if (request.getPathInfo().startsWith(\"/ui/api/\")) {\n+            response.setHeader(WWW_AUTHENTICATE, \"Presto-Form-Login\");\n+            response.setStatus(SC_UNAUTHORIZED);\n+            return;\n+        }\n+\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+\n+        if (request.getPathInfo().equals(LOGIN_FORM)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+\n+        // redirect to login page\n+        sendRedirect(response, getRedirectLocation(request, LOGIN_FORM, encodeCurrentLocationForLoginRedirect(request)));\n+    }\n+\n+    private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest request)\n+    {\n+        String path = request.getPathInfo();\n+        if (!isNullOrEmpty(request.getQueryString())) {\n+            path += \"?\" + request.getQueryString();\n+        }\n+        if (path.equals(\"/ui\") || path.equals(\"/ui/\")) {\n+            return null;\n+        }\n+        return path;\n+    }\n+\n+    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+        Optional<String> username = checkLoginCredentials(request);\n+        if (username.isPresent()) {\n+            response.addCookie(createAuthenticationCookie(request, username.get()));\n+            sendRedirectFromSuccessfulLogin(request, response, request.getParameter(\"redirectPath\"));\n+            return;\n+        }\n+        sendRedirect(response, getLoginFormLocation(request));\n+    }\n+\n+    private static void sendRedirectFromSuccessfulLogin(HttpServletRequest request, HttpServletResponse response, String redirectPath)\n+    {\n+        try {\n+            URI redirectUri = new URI(firstNonNull(emptyToNull(redirectPath), UI_LOCATION));\n+            sendRedirect(response, getRedirectLocation(request, redirectUri.getPath(), redirectUri.getQuery()));\n+        }\n+        catch (URISyntaxException ignored) {\n+            sendRedirect(response, UI_LOCATION);\n+        }\n+    }\n+\n+    private Optional<String> checkLoginCredentials(HttpServletRequest request)\n+    {\n+        String username = emptyToNull(request.getParameter(\"username\"));\n+        if (username == null) {\n+            return Optional.empty();\n+        }\n+\n+        if (!isHttps(request)) {\n+            return Optional.of(username);\n+        }\n+\n+        String password = emptyToNull(request.getParameter(\"password\"));\n+        try {\n+            passwordAuthenticatorManager.getAuthenticator().createAuthenticatedPrincipal(username, password);\n+            return Optional.of(username);\n+        }\n+        catch (AccessDeniedException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleLogoutRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        response.addCookie(getDeleteCookie(request));\n+        if (isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getLoginFormLocation(request));\n+            return;\n+        }\n+        sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+    }\n+\n+    private Optional<String> getAuthenticatedUsername(HttpServletRequest request)\n+    {\n+        Optional<Cookie> cookie = getAuthenticationCookie(request);\n+        if (cookie.isPresent()) {\n+            try {\n+                return Optional.of(jwtParser.apply(cookie.get().getValue()));\n+            }\n+            catch (JwtException e) {\n+                return Optional.empty();\n+            }\n+            catch (RuntimeException e) {\n+                throw new RuntimeException(\"Authentication error\", e);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static ServletRequest withUsername(HttpServletRequest request, String username)\n+    {\n+        requireNonNull(username, \"username is null\");\n+        BasicPrincipal principal = new BasicPrincipal(username);\n+        request.setAttribute(AUTHENTICATED_IDENTITY, Identity.forUser(username)\n+                .withPrincipal(principal)\n+                .build());\n+        return new HttpServletRequestWrapper(request)\n+        {\n+            @Override\n+            public Principal getUserPrincipal()\n+            {\n+                return principal;\n+            }\n+        };\n+    }\n+\n+    private Cookie createAuthenticationCookie(HttpServletRequest request, String userName)\n+    {\n+        String jwt = jwtGenerator.apply(userName);\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, jwt);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        cookie.setPath(\"/ui\");\n+        return cookie;\n+    }\n+\n+    private static Cookie getDeleteCookie(HttpServletRequest request)\n+    {\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, \"delete\");\n+        cookie.setMaxAge(0);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        return cookie;\n+    }\n+\n+    private static Optional<Cookie> getAuthenticationCookie(HttpServletRequest request)\n+    {\n+        for (Cookie cookie : firstNonNull(request.getCookies(), new Cookie[0])) {\n+            if (cookie.getName().equals(PRESTO_UI_COOKIE)) {\n+                return Optional.of(cookie);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static boolean isPublic(HttpServletRequest request)\n+    {\n+        // note login page is handled later\n+        String pathInfo = request.getPathInfo();\n+        return pathInfo.equals(DISABLED_LOCATION) ||\n+                pathInfo.startsWith(\"/ui/vendor\") ||\n+                pathInfo.startsWith(\"/ui/assets\");\n+    }\n+\n+    private static void sendRedirect(HttpServletResponse response, String location)\n+    {\n+        response.setHeader(LOCATION, location);\n+        response.setStatus(SC_SEE_OTHER);\n+    }\n+\n+    private static String getLoginFormLocation(HttpServletRequest request)\n+    {\n+        return getRedirectLocation(request, LOGIN_FORM);\n+    }\n+\n+    private static String getUiLocation(HttpServletRequest request)\n+    {\n+        return getRedirectLocation(request, UI_LOCATION);\n+    }\n+\n+    private static String getRedirectLocation(HttpServletRequest request, String path)\n+    {\n+        return getRedirectLocation(request, path, null);\n+    }\n+\n+    private static String getRedirectLocation(HttpServletRequest request, String path, String queryParameter)\n+    {\n+        String proto = firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme());\n+        HttpUriBuilder builder = uriBuilder()\n+                .scheme(proto)\n+                .host(request.getServerName())\n+                .port(request.getServerPort())\n+                .replacePath(path);\n+        if (queryParameter != null) {\n+            builder.addParameter(queryParameter);\n+        }\n+        return builder.toString();\n+    }\n+\n+    private static boolean isHttps(HttpServletRequest request)\n+    {\n+        return \"https\".equals(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme()));\n+    }\n+\n+    private boolean isAuthenticationEnabled(HttpServletRequest request)\n+    {\n+        return !isHttps(request) || passwordAuthenticatorManager.isLoaded();\n+    }\n+\n+    private static String generateJwt(byte[] hmac, String username, long sessionTimeoutNanos)\n+    {\n+        return Jwts.builder()\n+                .signWith(SignatureAlgorithm.HS256, hmac)\n+                .setSubject(username)\n+                .setExpiration(Date.from(ZonedDateTime.now().plusNanos(sessionTimeoutNanos).toInstant()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMDAyMg==", "bodyText": "This is the same code used by all the JWT code.", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r381400022", "createdAt": "2020-02-19T16:43:49Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);\n+        this.jwtGenerator = username -> generateJwt(hmac, username, sessionTimeoutNanos);\n+\n+        this.passwordAuthenticatorManager = passwordAuthenticatorManager;\n+    }\n+\n+    @Override\n+    public void handleUiRequest(HttpServletRequest request, HttpServletResponse response, FilterChain nextFilter)\n+            throws IOException, ServletException\n+    {\n+        if (request.getPathInfo() == null || request.getPathInfo().equals(\"/\")) {\n+            sendRedirect(response, getUiLocation(request));\n+            return;\n+        }\n+\n+        if (isPublic(request)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/login\")) {\n+            handleLoginRequest(request, response);\n+            return;\n+        }\n+        if (request.getPathInfo().equals(\"/ui/logout\")) {\n+            handleLogoutRequest(request, response);\n+            return;\n+        }\n+\n+        Optional<String> username = getAuthenticatedUsername(request);\n+        if (username.isPresent()) {\n+            if (request.getPathInfo().equals(LOGIN_FORM)) {\n+                sendRedirectFromSuccessfulLogin(request, response, request.getQueryString());\n+                return;\n+            }\n+            nextFilter.doFilter(withUsername(request, username.get()), response);\n+            return;\n+        }\n+\n+        // clear authentication cookie if present\n+        getAuthenticationCookie(request)\n+                .ifPresent(ignored -> response.addCookie(getDeleteCookie(request)));\n+\n+        // drain the input\n+        try (InputStream inputStream = request.getInputStream()) {\n+            ByteStreams.exhaust(inputStream);\n+        }\n+\n+        // send 401 to REST api calls and redirect to others\n+        if (request.getPathInfo().startsWith(\"/ui/api/\")) {\n+            response.setHeader(WWW_AUTHENTICATE, \"Presto-Form-Login\");\n+            response.setStatus(SC_UNAUTHORIZED);\n+            return;\n+        }\n+\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+\n+        if (request.getPathInfo().equals(LOGIN_FORM)) {\n+            nextFilter.doFilter(request, response);\n+            return;\n+        }\n+\n+        // redirect to login page\n+        sendRedirect(response, getRedirectLocation(request, LOGIN_FORM, encodeCurrentLocationForLoginRedirect(request)));\n+    }\n+\n+    private static String encodeCurrentLocationForLoginRedirect(HttpServletRequest request)\n+    {\n+        String path = request.getPathInfo();\n+        if (!isNullOrEmpty(request.getQueryString())) {\n+            path += \"?\" + request.getQueryString();\n+        }\n+        if (path.equals(\"/ui\") || path.equals(\"/ui/\")) {\n+            return null;\n+        }\n+        return path;\n+    }\n+\n+    private void handleLoginRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        if (!isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+            return;\n+        }\n+        Optional<String> username = checkLoginCredentials(request);\n+        if (username.isPresent()) {\n+            response.addCookie(createAuthenticationCookie(request, username.get()));\n+            sendRedirectFromSuccessfulLogin(request, response, request.getParameter(\"redirectPath\"));\n+            return;\n+        }\n+        sendRedirect(response, getLoginFormLocation(request));\n+    }\n+\n+    private static void sendRedirectFromSuccessfulLogin(HttpServletRequest request, HttpServletResponse response, String redirectPath)\n+    {\n+        try {\n+            URI redirectUri = new URI(firstNonNull(emptyToNull(redirectPath), UI_LOCATION));\n+            sendRedirect(response, getRedirectLocation(request, redirectUri.getPath(), redirectUri.getQuery()));\n+        }\n+        catch (URISyntaxException ignored) {\n+            sendRedirect(response, UI_LOCATION);\n+        }\n+    }\n+\n+    private Optional<String> checkLoginCredentials(HttpServletRequest request)\n+    {\n+        String username = emptyToNull(request.getParameter(\"username\"));\n+        if (username == null) {\n+            return Optional.empty();\n+        }\n+\n+        if (!isHttps(request)) {\n+            return Optional.of(username);\n+        }\n+\n+        String password = emptyToNull(request.getParameter(\"password\"));\n+        try {\n+            passwordAuthenticatorManager.getAuthenticator().createAuthenticatedPrincipal(username, password);\n+            return Optional.of(username);\n+        }\n+        catch (AccessDeniedException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleLogoutRequest(HttpServletRequest request, HttpServletResponse response)\n+    {\n+        response.addCookie(getDeleteCookie(request));\n+        if (isAuthenticationEnabled(request)) {\n+            sendRedirect(response, getLoginFormLocation(request));\n+            return;\n+        }\n+        sendRedirect(response, getRedirectLocation(request, DISABLED_LOCATION));\n+    }\n+\n+    private Optional<String> getAuthenticatedUsername(HttpServletRequest request)\n+    {\n+        Optional<Cookie> cookie = getAuthenticationCookie(request);\n+        if (cookie.isPresent()) {\n+            try {\n+                return Optional.of(jwtParser.apply(cookie.get().getValue()));\n+            }\n+            catch (JwtException e) {\n+                return Optional.empty();\n+            }\n+            catch (RuntimeException e) {\n+                throw new RuntimeException(\"Authentication error\", e);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static ServletRequest withUsername(HttpServletRequest request, String username)\n+    {\n+        requireNonNull(username, \"username is null\");\n+        BasicPrincipal principal = new BasicPrincipal(username);\n+        request.setAttribute(AUTHENTICATED_IDENTITY, Identity.forUser(username)\n+                .withPrincipal(principal)\n+                .build());\n+        return new HttpServletRequestWrapper(request)\n+        {\n+            @Override\n+            public Principal getUserPrincipal()\n+            {\n+                return principal;\n+            }\n+        };\n+    }\n+\n+    private Cookie createAuthenticationCookie(HttpServletRequest request, String userName)\n+    {\n+        String jwt = jwtGenerator.apply(userName);\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, jwt);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        cookie.setPath(\"/ui\");\n+        return cookie;\n+    }\n+\n+    private static Cookie getDeleteCookie(HttpServletRequest request)\n+    {\n+        Cookie cookie = new Cookie(PRESTO_UI_COOKIE, \"delete\");\n+        cookie.setMaxAge(0);\n+        cookie.setSecure(isHttps(request));\n+        cookie.setHttpOnly(true);\n+        return cookie;\n+    }\n+\n+    private static Optional<Cookie> getAuthenticationCookie(HttpServletRequest request)\n+    {\n+        for (Cookie cookie : firstNonNull(request.getCookies(), new Cookie[0])) {\n+            if (cookie.getName().equals(PRESTO_UI_COOKIE)) {\n+                return Optional.of(cookie);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static boolean isPublic(HttpServletRequest request)\n+    {\n+        // note login page is handled later\n+        String pathInfo = request.getPathInfo();\n+        return pathInfo.equals(DISABLED_LOCATION) ||\n+                pathInfo.startsWith(\"/ui/vendor\") ||\n+                pathInfo.startsWith(\"/ui/assets\");\n+    }\n+\n+    private static void sendRedirect(HttpServletResponse response, String location)\n+    {\n+        response.setHeader(LOCATION, location);\n+        response.setStatus(SC_SEE_OTHER);\n+    }\n+\n+    private static String getLoginFormLocation(HttpServletRequest request)\n+    {\n+        return getRedirectLocation(request, LOGIN_FORM);\n+    }\n+\n+    private static String getUiLocation(HttpServletRequest request)\n+    {\n+        return getRedirectLocation(request, UI_LOCATION);\n+    }\n+\n+    private static String getRedirectLocation(HttpServletRequest request, String path)\n+    {\n+        return getRedirectLocation(request, path, null);\n+    }\n+\n+    private static String getRedirectLocation(HttpServletRequest request, String path, String queryParameter)\n+    {\n+        String proto = firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme());\n+        HttpUriBuilder builder = uriBuilder()\n+                .scheme(proto)\n+                .host(request.getServerName())\n+                .port(request.getServerPort())\n+                .replacePath(path);\n+        if (queryParameter != null) {\n+            builder.addParameter(queryParameter);\n+        }\n+        return builder.toString();\n+    }\n+\n+    private static boolean isHttps(HttpServletRequest request)\n+    {\n+        return \"https\".equals(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme()));\n+    }\n+\n+    private boolean isAuthenticationEnabled(HttpServletRequest request)\n+    {\n+        return !isHttps(request) || passwordAuthenticatorManager.isLoaded();\n+    }\n+\n+    private static String generateJwt(byte[] hmac, String username, long sessionTimeoutNanos)\n+    {\n+        return Jwts.builder()\n+                .signWith(SignatureAlgorithm.HS256, hmac)\n+                .setSubject(username)\n+                .setExpiration(Date.from(ZonedDateTime.now().plusNanos(sessionTimeoutNanos).toInstant()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4MjYwNw=="}, "originalCommit": null, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjI1MDc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDowMzo0N1rOFpC2-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozODo1OVrOFrumwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4Mjc3Ng==", "bodyText": "Using nanos seems a bit weird here. I'd use toMillis()", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378582776", "createdAt": "2020-02-13T00:03:47Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5NjY3NA==", "bodyText": "I use nanos because there is zoned data time doesn't have a built in method for millis.", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r381396674", "createdAt": "2020-02-19T16:38:59Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.hash.Hashing;\n+import com.google.common.io.ByteStreams;\n+import io.airlift.http.client.HttpUriBuilder;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import io.prestosql.spi.security.Identity;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import java.security.SecureRandom;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Strings.emptyToNull;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static com.google.common.net.HttpHeaders.WWW_AUTHENTICATE;\n+import static com.google.common.net.HttpHeaders.X_FORWARDED_PROTO;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilder;\n+import static io.prestosql.server.HttpRequestSessionContext.AUTHENTICATED_IDENTITY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+public class FormWebUiAuthenticationManager\n+        implements WebUiAuthenticationManager\n+{\n+    private static final String PRESTO_UI_AUDIENCE = \"presto-ui\";\n+    private static final String PRESTO_UI_COOKIE = \"Presto-UI-Token\";\n+    private static final String LOGIN_FORM = \"/ui/login.html\";\n+    private static final String DISABLED_LOCATION = \"/ui/disabled.html\";\n+    private static final String UI_LOCATION = \"/ui/\";\n+\n+    private final Function<String, String> jwtParser;\n+    private final Function<String, String> jwtGenerator;\n+    private final PasswordAuthenticatorManager passwordAuthenticatorManager;\n+\n+    @Inject\n+    public FormWebUiAuthenticationManager(WebUiConfig config, PasswordAuthenticatorManager passwordAuthenticatorManager)\n+    {\n+        byte[] hmac;\n+        if (config.getSharedSecret().isPresent()) {\n+            hmac = Hashing.sha256().hashString(config.getSharedSecret().get(), UTF_8).asBytes();\n+        }\n+        else {\n+            hmac = new byte[32];\n+            new SecureRandom().nextBytes(hmac);\n+        }\n+\n+        this.jwtParser = jwt -> parseJwt(hmac, jwt);\n+\n+        long sessionTimeoutNanos = config.getSessionTimeout().roundTo(NANOSECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4Mjc3Ng=="}, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjI1NDk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/resources/webapp/disabled.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDowNjowM1rOFpC5fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDowNjowM1rOFpC5fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4MzQyMg==", "bodyText": "Web Interface is Disabled", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378583422", "createdAt": "2020-02-13T00:06:03Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/resources/webapp/disabled.html", "diffHunk": "@@ -0,0 +1,58 @@\n+<!--\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"utf-8\">\n+    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n+\n+    <meta name=\"description\" content=\"Cluster Overview - Presto\">\n+    <title>Cluster Overview - Presto</title>\n+\n+    <link rel=\"icon\" href=\"assets/favicon.ico\">\n+\n+    <!-- Bootstrap core -->\n+    <link href=\"vendor/bootstrap/css/bootstrap.css\" rel=\"stylesheet\">\n+\n+    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n+    <!--[if lt IE 9]>\n+    <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n+    <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n+    <![endif]-->\n+\n+    <!-- jQuery -->\n+    <script type=\"text/javascript\" src=\"vendor/jquery/jquery-2.2.3.min.js\"></script>\n+\n+    <!-- Bootstrap JS -->\n+    <script type=\"text/javascript\" src=\"vendor/bootstrap/js/bootstrap.js\"></script>\n+\n+    <!-- Sparkline -->\n+    <script type=\"text/javascript\" src=\"vendor/jquery.sparkline/jquery.sparkline.min.js\"></script>\n+\n+    <!-- CSS loader -->\n+    <link href=\"vendor/css-loaders/loader.css\" rel=\"stylesheet\">\n+\n+    <!-- Custom CSS -->\n+    <link href=\"assets/presto.css\" rel=\"stylesheet\">\n+</head>\n+\n+<body>\n+\n+<h2 class=\"text-center\">Web User Interface Is Disabled</h2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjI1NzU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/resources/webapp/disabled.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDowNzozMVrOFpC7CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDowNzozMVrOFpC7CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4MzgxNw==", "bodyText": "I feel like this should say something different, but I'm not sure what. Maybe just \"Presto\"? Or perhaps\n\nWeb Interface - Presto\n\nFor meta and title", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378583817", "createdAt": "2020-02-13T00:07:31Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/resources/webapp/disabled.html", "diffHunk": "@@ -0,0 +1,58 @@\n+<!--\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"utf-8\">\n+    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n+\n+    <meta name=\"description\" content=\"Cluster Overview - Presto\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjI2MDY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/resources/webapp/login.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDowOToxNlrOFpC83w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDowOToxNlrOFpC83w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NDI4Nw==", "bodyText": "Probably change to\n\nLogin - Presto\n\nFor meta and title", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378584287", "createdAt": "2020-02-13T00:09:16Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/resources/webapp/login.html", "diffHunk": "@@ -0,0 +1,118 @@\n+<!--\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"utf-8\">\n+    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n+\n+    <meta name=\"description\" content=\"Cluster Overview - Presto\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjI3MDI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/resources/webapp/login.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDoxNDoxMlrOFpDCaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDoxNDoxMlrOFpDCaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTcwNA==", "bodyText": "Capitalize \"Log In\"", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378585704", "createdAt": "2020-02-13T00:14:12Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/resources/webapp/login.html", "diffHunk": "@@ -0,0 +1,118 @@\n+<!--\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"utf-8\">\n+    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n+\n+    <meta name=\"description\" content=\"Cluster Overview - Presto\">\n+    <title>Cluster Overview - Presto</title>\n+\n+    <link rel=\"icon\" href=\"assets/favicon.ico\">\n+\n+    <!-- Bootstrap core -->\n+    <link href=\"vendor/bootstrap/css/bootstrap.css\" rel=\"stylesheet\">\n+\n+    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n+    <!--[if lt IE 9]>\n+    <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n+    <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n+    <![endif]-->\n+\n+    <!-- jQuery -->\n+    <script type=\"text/javascript\" src=\"vendor/jquery/jquery-2.2.3.min.js\"></script>\n+\n+    <!-- Bootstrap JS -->\n+    <script type=\"text/javascript\" src=\"vendor/bootstrap/js/bootstrap.js\"></script>\n+\n+    <!-- Sparkline -->\n+    <script type=\"text/javascript\" src=\"vendor/jquery.sparkline/jquery.sparkline.min.js\"></script>\n+\n+    <!-- CSS loader -->\n+    <link href=\"vendor/css-loaders/loader.css\" rel=\"stylesheet\">\n+\n+    <!-- Custom CSS -->\n+    <link href=\"assets/presto.css\" rel=\"stylesheet\">\n+\n+    <style type=\"text/css\">\n+        .login-form {\n+            width: 340px;\n+            margin: 50px auto;\n+        }\n+\n+        .login-form form {\n+            margin-bottom: 15px;\n+            background: #f7f7f7;\n+            box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n+            padding: 30px;\n+        }\n+\n+        .login-form h2 {\n+            color: black;\n+            margin: 0 0 15px;\n+        }\n+\n+        .form-control, .btn {\n+            min-height: 38px;\n+            border-radius: 2px;\n+        }\n+\n+        .btn {\n+            background-color: #337AB7;\n+            font-size: 15px;\n+            font-weight: bold;\n+        }\n+    </style>\n+</head>\n+\n+<body>\n+\n+<div class=\"login-form\">\n+    <form id=\"login\" action=\"/ui/login\" method=\"post\" style=\"display: none\">\n+        <h2 class=\"text-center\">Log in</h2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjM2MzMwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/resources/webapp/login.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTowMTo0NVrOFpD4yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTowMTo0NVrOFpD4yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5OTYyNA==", "bodyText": "Nit: single space", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378599624", "createdAt": "2020-02-13T01:01:45Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/resources/webapp/login.html", "diffHunk": "@@ -0,0 +1,118 @@\n+<!--\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"utf-8\">\n+    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n+\n+    <meta name=\"description\" content=\"Cluster Overview - Presto\">\n+    <title>Cluster Overview - Presto</title>\n+\n+    <link rel=\"icon\" href=\"assets/favicon.ico\">\n+\n+    <!-- Bootstrap core -->\n+    <link href=\"vendor/bootstrap/css/bootstrap.css\" rel=\"stylesheet\">\n+\n+    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n+    <!--[if lt IE 9]>\n+    <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n+    <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n+    <![endif]-->\n+\n+    <!-- jQuery -->\n+    <script type=\"text/javascript\" src=\"vendor/jquery/jquery-2.2.3.min.js\"></script>\n+\n+    <!-- Bootstrap JS -->\n+    <script type=\"text/javascript\" src=\"vendor/bootstrap/js/bootstrap.js\"></script>\n+\n+    <!-- Sparkline -->\n+    <script type=\"text/javascript\" src=\"vendor/jquery.sparkline/jquery.sparkline.min.js\"></script>\n+\n+    <!-- CSS loader -->\n+    <link href=\"vendor/css-loaders/loader.css\" rel=\"stylesheet\">\n+\n+    <!-- Custom CSS -->\n+    <link href=\"assets/presto.css\" rel=\"stylesheet\">\n+\n+    <style type=\"text/css\">\n+        .login-form {\n+            width: 340px;\n+            margin: 50px auto;\n+        }\n+\n+        .login-form form {\n+            margin-bottom: 15px;\n+            background: #f7f7f7;\n+            box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n+            padding: 30px;\n+        }\n+\n+        .login-form h2 {\n+            color: black;\n+            margin: 0 0 15px;\n+        }\n+\n+        .form-control, .btn {\n+            min-height: 38px;\n+            border-radius: 2px;\n+        }\n+\n+        .btn {\n+            background-color: #337AB7;\n+            font-size: 15px;\n+            font-weight: bold;\n+        }\n+    </style>\n+</head>\n+\n+<body>\n+\n+<div class=\"login-form\">\n+    <form id=\"login\" action=\"/ui/login\" method=\"post\" style=\"display: none\">\n+        <h2 class=\"text-center\">Log in</h2>\n+        <div class=\"form-group\">\n+            <input id=\"username\" name=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Username\" required=\"required\">\n+        </div>\n+        <div class=\"form-group\">\n+            <input id=\"password\" name=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\" required=\"required\">\n+        </div>\n+        <input id=\"redirectPath\" name=\"redirectPath\" type=\"hidden\">\n+        <div class=\"form-group\">\n+            <button id=\"submit\"  type=\"submit\" class=\"btn btn-primary btn-block\">Log in</button>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjM4NTA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/resources/webapp/src/components/PageTitle.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToxNDo0M1rOFpEF9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToxNDo0M1rOFpEF9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwMjk5OA==", "bodyText": "Log Out", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378602998", "createdAt": "2020-02-13T01:14:43Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/resources/webapp/src/components/PageTitle.jsx", "diffHunk": "@@ -142,6 +147,13 @@ export class PageTitle extends React.Component<Props, State> {\n                                         <span className=\"text\" id=\"uptime\">{info.uptime}</span>\n                                     </span>\n                                 </li>\n+                                <li>\n+                                    <span className=\"navbar-cluster-info\">\n+                                        <span className=\"text\" id=\"logout\">\n+                                            <a className=\"btn btn-logout\" href=\"logout\">Logout</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjQwMTcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToyNTowM1rOFpEQKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToyNTowM1rOFpEQKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwNTYxMQ==", "bodyText": "assertThat(body).contains(\"action=\\\"/ui/login\\\"\");", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378605611", "createdAt": "2020-02-13T01:25:03Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.io.Resources;\n+import com.google.inject.Key;\n+import io.airlift.http.server.HttpServerInfo;\n+import io.airlift.node.NodeInfo;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.server.testing.TestingPrestoServer;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import okhttp3.FormBody;\n+import okhttp3.JavaNetCookieJar;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.net.CookieManager;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Optional;\n+\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilderFrom;\n+import static io.airlift.testing.Closeables.closeQuietly;\n+import static io.prestosql.client.OkHttpUtil.setupSsl;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test\n+public class TestWebUi\n+{\n+    private static final String LOCALHOST_KEYSTORE = Resources.getResource(\"cert/localhost.pem\").getPath();\n+    private static final ImmutableMap<String, String> SECURE_PROPERTIES = ImmutableMap.<String, String>builder()\n+            .put(\"http-server.https.enabled\", \"true\")\n+            .put(\"http-server.https.keystore.path\", LOCALHOST_KEYSTORE)\n+            .put(\"http-server.https.keystore.key\", \"\")\n+            .put(\"http-server.authentication.type\", \"PASSWORD\")\n+            .build();\n+    private static final String TEST_USER = \"test-user\";\n+    private static final String TEST_PASSWORD = \"test-password\";\n+\n+    private TestingPrestoServer server;\n+    private OkHttpClient client;\n+    private URI insecureUrl;\n+    private URI secureUrl;\n+\n+    @BeforeClass\n+    public void setup()\n+    {\n+        server = new TestingPrestoServer(SECURE_PROPERTIES);\n+        server.getInstance(Key.get(PasswordAuthenticatorManager.class)).setAuthenticator(TestWebUi::authenticate);\n+\n+        HttpServerInfo httpServerInfo = server.getInstance(Key.get(HttpServerInfo.class));\n+        insecureUrl = httpServerInfo.getHttpUri();\n+        secureUrl = httpServerInfo.getHttpsUri();\n+\n+        OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder()\n+                .followRedirects(false);\n+        setupSsl(\n+                clientBuilder,\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.of(LOCALHOST_KEYSTORE),\n+                Optional.empty());\n+        client = clientBuilder.build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        closeQuietly(server);\n+        server = null;\n+    }\n+\n+    @Test\n+    public void testRootRedirect()\n+            throws Exception\n+    {\n+        testRootRedirect(insecureUrl);\n+        testRootRedirect(secureUrl);\n+    }\n+\n+    private void testRootRedirect(URI baseUri)\n+            throws Exception\n+    {\n+        assertRedirect(client, uriBuilderFrom(baseUri).toString(), getUiLocation(baseUri));\n+    }\n+\n+    @Test\n+    public void testLoggedOut()\n+            throws Exception\n+    {\n+        testLoggedOut(insecureUrl);\n+        testLoggedOut(secureUrl);\n+    }\n+\n+    private void testLoggedOut(URI baseUri)\n+            throws Exception\n+    {\n+        assertRedirect(client, getUiLocation(baseUri), getLoginHtmlLocation(baseUri));\n+\n+        assertRedirect(client, getLocation(baseUri, \"/ui/query.html\", \"abc123\"), getLocation(baseUri, \"/ui/login.html\", \"/ui/query.html?abc123\"));\n+\n+        assertResponseCode(client, getValidApiLocation(baseUri), SC_UNAUTHORIZED);\n+\n+        assertOk(client, getValidAssetsLocation(baseUri));\n+\n+        assertOk(client, getValidVendorLocation(baseUri));\n+    }\n+\n+    @Test\n+    public void testLogIn()\n+            throws Exception\n+    {\n+        testLogIn(insecureUrl);\n+        testLogIn(secureUrl);\n+    }\n+\n+    private void testLogIn(URI baseUri)\n+            throws Exception\n+    {\n+        CookieManager cookieManager = new CookieManager();\n+        OkHttpClient client = this.client.newBuilder()\n+                .cookieJar(new JavaNetCookieJar(cookieManager))\n+                .build();\n+\n+        Response response = assertOk(client, getLoginHtmlLocation(baseUri));\n+        String body = response.body().string();\n+        assertTrue(body.contains(\"action=\\\"/ui/login\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjQwMzA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToyNTo0NVrOFpEQ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToyNTo0NVrOFpEQ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwNTgwOQ==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378605809", "createdAt": "2020-02-13T01:25:45Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.io.Resources;\n+import com.google.inject.Key;\n+import io.airlift.http.server.HttpServerInfo;\n+import io.airlift.node.NodeInfo;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.server.testing.TestingPrestoServer;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import okhttp3.FormBody;\n+import okhttp3.JavaNetCookieJar;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.net.CookieManager;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Optional;\n+\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilderFrom;\n+import static io.airlift.testing.Closeables.closeQuietly;\n+import static io.prestosql.client.OkHttpUtil.setupSsl;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test\n+public class TestWebUi\n+{\n+    private static final String LOCALHOST_KEYSTORE = Resources.getResource(\"cert/localhost.pem\").getPath();\n+    private static final ImmutableMap<String, String> SECURE_PROPERTIES = ImmutableMap.<String, String>builder()\n+            .put(\"http-server.https.enabled\", \"true\")\n+            .put(\"http-server.https.keystore.path\", LOCALHOST_KEYSTORE)\n+            .put(\"http-server.https.keystore.key\", \"\")\n+            .put(\"http-server.authentication.type\", \"PASSWORD\")\n+            .build();\n+    private static final String TEST_USER = \"test-user\";\n+    private static final String TEST_PASSWORD = \"test-password\";\n+\n+    private TestingPrestoServer server;\n+    private OkHttpClient client;\n+    private URI insecureUrl;\n+    private URI secureUrl;\n+\n+    @BeforeClass\n+    public void setup()\n+    {\n+        server = new TestingPrestoServer(SECURE_PROPERTIES);\n+        server.getInstance(Key.get(PasswordAuthenticatorManager.class)).setAuthenticator(TestWebUi::authenticate);\n+\n+        HttpServerInfo httpServerInfo = server.getInstance(Key.get(HttpServerInfo.class));\n+        insecureUrl = httpServerInfo.getHttpUri();\n+        secureUrl = httpServerInfo.getHttpsUri();\n+\n+        OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder()\n+                .followRedirects(false);\n+        setupSsl(\n+                clientBuilder,\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.of(LOCALHOST_KEYSTORE),\n+                Optional.empty());\n+        client = clientBuilder.build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        closeQuietly(server);\n+        server = null;\n+    }\n+\n+    @Test\n+    public void testRootRedirect()\n+            throws Exception\n+    {\n+        testRootRedirect(insecureUrl);\n+        testRootRedirect(secureUrl);\n+    }\n+\n+    private void testRootRedirect(URI baseUri)\n+            throws Exception\n+    {\n+        assertRedirect(client, uriBuilderFrom(baseUri).toString(), getUiLocation(baseUri));\n+    }\n+\n+    @Test\n+    public void testLoggedOut()\n+            throws Exception\n+    {\n+        testLoggedOut(insecureUrl);\n+        testLoggedOut(secureUrl);\n+    }\n+\n+    private void testLoggedOut(URI baseUri)\n+            throws Exception\n+    {\n+        assertRedirect(client, getUiLocation(baseUri), getLoginHtmlLocation(baseUri));\n+\n+        assertRedirect(client, getLocation(baseUri, \"/ui/query.html\", \"abc123\"), getLocation(baseUri, \"/ui/login.html\", \"/ui/query.html?abc123\"));\n+\n+        assertResponseCode(client, getValidApiLocation(baseUri), SC_UNAUTHORIZED);\n+\n+        assertOk(client, getValidAssetsLocation(baseUri));\n+\n+        assertOk(client, getValidVendorLocation(baseUri));\n+    }\n+\n+    @Test\n+    public void testLogIn()\n+            throws Exception\n+    {\n+        testLogIn(insecureUrl);\n+        testLogIn(secureUrl);\n+    }\n+\n+    private void testLogIn(URI baseUri)\n+            throws Exception\n+    {\n+        CookieManager cookieManager = new CookieManager();\n+        OkHttpClient client = this.client.newBuilder()\n+                .cookieJar(new JavaNetCookieJar(cookieManager))\n+                .build();\n+\n+        Response response = assertOk(client, getLoginHtmlLocation(baseUri));\n+        String body = response.body().string();\n+        assertTrue(body.contains(\"action=\\\"/ui/login\"));\n+        assertTrue(body.contains(\"method=\\\"post\\\"\"));\n+\n+        logIn(baseUri, client);\n+        HttpCookie cookie = Iterables.getOnlyElement(cookieManager.getCookieStore().getCookies());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjQyMDkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTozNjoyNlrOFpEcMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTozNjoyNlrOFpEcMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwODY4OQ==", "bodyText": "assertThat(cookieManager.getCookieStore().getCookies()).isEmpty();", "url": "https://github.com/trinodb/trino/pull/2755#discussion_r378608689", "createdAt": "2020-02-13T01:36:26Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.ui;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.io.Resources;\n+import com.google.inject.Key;\n+import io.airlift.http.server.HttpServerInfo;\n+import io.airlift.node.NodeInfo;\n+import io.prestosql.server.security.PasswordAuthenticatorManager;\n+import io.prestosql.server.testing.TestingPrestoServer;\n+import io.prestosql.spi.security.AccessDeniedException;\n+import io.prestosql.spi.security.BasicPrincipal;\n+import okhttp3.FormBody;\n+import okhttp3.JavaNetCookieJar;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.net.CookieManager;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.security.Principal;\n+import java.util.Optional;\n+\n+import static com.google.common.net.HttpHeaders.LOCATION;\n+import static io.airlift.http.client.HttpUriBuilder.uriBuilderFrom;\n+import static io.airlift.testing.Closeables.closeQuietly;\n+import static io.prestosql.client.OkHttpUtil.setupSsl;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static javax.servlet.http.HttpServletResponse.SC_SEE_OTHER;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test\n+public class TestWebUi\n+{\n+    private static final String LOCALHOST_KEYSTORE = Resources.getResource(\"cert/localhost.pem\").getPath();\n+    private static final ImmutableMap<String, String> SECURE_PROPERTIES = ImmutableMap.<String, String>builder()\n+            .put(\"http-server.https.enabled\", \"true\")\n+            .put(\"http-server.https.keystore.path\", LOCALHOST_KEYSTORE)\n+            .put(\"http-server.https.keystore.key\", \"\")\n+            .put(\"http-server.authentication.type\", \"PASSWORD\")\n+            .build();\n+    private static final String TEST_USER = \"test-user\";\n+    private static final String TEST_PASSWORD = \"test-password\";\n+\n+    private TestingPrestoServer server;\n+    private OkHttpClient client;\n+    private URI insecureUrl;\n+    private URI secureUrl;\n+\n+    @BeforeClass\n+    public void setup()\n+    {\n+        server = new TestingPrestoServer(SECURE_PROPERTIES);\n+        server.getInstance(Key.get(PasswordAuthenticatorManager.class)).setAuthenticator(TestWebUi::authenticate);\n+\n+        HttpServerInfo httpServerInfo = server.getInstance(Key.get(HttpServerInfo.class));\n+        insecureUrl = httpServerInfo.getHttpUri();\n+        secureUrl = httpServerInfo.getHttpsUri();\n+\n+        OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder()\n+                .followRedirects(false);\n+        setupSsl(\n+                clientBuilder,\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.of(LOCALHOST_KEYSTORE),\n+                Optional.empty());\n+        client = clientBuilder.build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        closeQuietly(server);\n+        server = null;\n+    }\n+\n+    @Test\n+    public void testRootRedirect()\n+            throws Exception\n+    {\n+        testRootRedirect(insecureUrl);\n+        testRootRedirect(secureUrl);\n+    }\n+\n+    private void testRootRedirect(URI baseUri)\n+            throws Exception\n+    {\n+        assertRedirect(client, uriBuilderFrom(baseUri).toString(), getUiLocation(baseUri));\n+    }\n+\n+    @Test\n+    public void testLoggedOut()\n+            throws Exception\n+    {\n+        testLoggedOut(insecureUrl);\n+        testLoggedOut(secureUrl);\n+    }\n+\n+    private void testLoggedOut(URI baseUri)\n+            throws Exception\n+    {\n+        assertRedirect(client, getUiLocation(baseUri), getLoginHtmlLocation(baseUri));\n+\n+        assertRedirect(client, getLocation(baseUri, \"/ui/query.html\", \"abc123\"), getLocation(baseUri, \"/ui/login.html\", \"/ui/query.html?abc123\"));\n+\n+        assertResponseCode(client, getValidApiLocation(baseUri), SC_UNAUTHORIZED);\n+\n+        assertOk(client, getValidAssetsLocation(baseUri));\n+\n+        assertOk(client, getValidVendorLocation(baseUri));\n+    }\n+\n+    @Test\n+    public void testLogIn()\n+            throws Exception\n+    {\n+        testLogIn(insecureUrl);\n+        testLogIn(secureUrl);\n+    }\n+\n+    private void testLogIn(URI baseUri)\n+            throws Exception\n+    {\n+        CookieManager cookieManager = new CookieManager();\n+        OkHttpClient client = this.client.newBuilder()\n+                .cookieJar(new JavaNetCookieJar(cookieManager))\n+                .build();\n+\n+        Response response = assertOk(client, getLoginHtmlLocation(baseUri));\n+        String body = response.body().string();\n+        assertTrue(body.contains(\"action=\\\"/ui/login\"));\n+        assertTrue(body.contains(\"method=\\\"post\\\"\"));\n+\n+        logIn(baseUri, client);\n+        HttpCookie cookie = Iterables.getOnlyElement(cookieManager.getCookieStore().getCookies());\n+        assertEquals(cookie.getPath(), \"/ui\");\n+        assertEquals(cookie.getDomain(), baseUri.getHost());\n+        assertEquals(cookie.getMaxAge(), -1);\n+        assertTrue(cookie.isHttpOnly());\n+\n+        assertOk(client, getUiLocation(baseUri));\n+\n+        assertOk(client, getValidApiLocation(baseUri));\n+\n+        assertResponseCode(client, getLocation(baseUri, \"/ui/unknown\"), SC_NOT_FOUND);\n+\n+        assertResponseCode(client, getLocation(baseUri, \"/ui/api/unknown\"), SC_NOT_FOUND);\n+\n+        assertRedirect(client, getLogoutLocation(baseUri), getLoginHtmlLocation(baseUri));\n+        assertTrue(cookieManager.getCookieStore().getCookies().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 172}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 881, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}