{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MTUyNjA0", "number": 3306, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoxOTo1M1rODtpqlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMDoyNFrODtprQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk1MTU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoxOTo1M1rOF_M-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoxOTo1M1rOF_M-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNzE1Mg==", "bodyText": "I'd flatten these in the list above. There's no benefit in grouping them in a separate collection. It also makes them look different and \"special\" and requires extra mental work to realize they are not.", "url": "https://github.com/trinodb/trino/pull/3306#discussion_r401817152", "createdAt": "2020-04-01T18:19:53Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -233,30 +234,33 @@ public PlanOptimizers(\n         Set<Rule<?>> predicatePushDownRules = ImmutableSet.of(\n                 new MergeFilters(metadata));\n \n-        Set<Rule<?>> columnPruningRules = ImmutableSet.of(\n-                new PruneAggregationColumns(),\n-                new PruneAggregationSourceColumns(),\n-                new PruneApplyColumns(),\n-                new PruneApplySourceColumns(),\n-                new PruneAssignUniqueIdColumns(),\n-                new PruneCorrelatedJoinColumns(),\n-                new PruneDeleteSourceColumns(),\n-                new PruneEnforceSingleRowColumns(),\n-                new PruneFilterColumns(),\n-                new PruneIndexSourceColumns(),\n-                new PruneJoinChildrenColumns(),\n-                new PruneJoinColumns(),\n-                new PruneMarkDistinctColumns(),\n-                new PruneOutputColumns(),\n-                new PruneProjectColumns(),\n-                new PruneSemiJoinColumns(),\n-                new PruneSemiJoinFilteringSourceColumns(),\n-                new PruneTopNColumns(),\n-                new PruneValuesColumns(),\n-                new PruneWindowColumns(),\n-                new PruneOffsetColumns(),\n-                new PruneLimitColumns(),\n-                new PruneTableScanColumns());\n+        Set<Rule<?>> columnPruningRules = ImmutableSet.<Rule<?>>builder()\n+                .add(\n+                        new PruneAggregationColumns(),\n+                        new PruneAggregationSourceColumns(),\n+                        new PruneApplyColumns(),\n+                        new PruneApplySourceColumns(),\n+                        new PruneAssignUniqueIdColumns(),\n+                        new PruneCorrelatedJoinColumns(),\n+                        new PruneDeleteSourceColumns(),\n+                        new PruneEnforceSingleRowColumns(),\n+                        new PruneFilterColumns(),\n+                        new PruneIndexSourceColumns(),\n+                        new PruneJoinChildrenColumns(),\n+                        new PruneJoinColumns(),\n+                        new PruneMarkDistinctColumns(),\n+                        new PruneOutputColumns(),\n+                        new PruneProjectColumns(),\n+                        new PruneSemiJoinColumns(),\n+                        new PruneSemiJoinFilteringSourceColumns(),\n+                        new PruneTopNColumns(),\n+                        new PruneValuesColumns(),\n+                        new PruneWindowColumns(),\n+                        new PruneOffsetColumns(),\n+                        new PruneLimitColumns(),\n+                        new PruneTableScanColumns())\n+                .addAll(PruneSetOperationSourceColumnsRuleSet.rules())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk1MzMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneSetOperationSourceColumnsRuleSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMDoyNFrOF_M_Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMDoyNFrOF_M_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNzQyNw==", "bodyText": "Let's make these top-level rules. See my comment above.", "url": "https://github.com/trinodb/trino/pull/3306#discussion_r401817427", "createdAt": "2020-04-01T18:20:24Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneSetOperationSourceColumnsRuleSet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.iterative.Rule.Context;\n+import io.prestosql.sql.planner.iterative.Rule.Result;\n+import io.prestosql.sql.planner.plan.ExceptNode;\n+import io.prestosql.sql.planner.plan.IntersectNode;\n+import io.prestosql.sql.planner.plan.SetOperationNode;\n+import io.prestosql.sql.planner.plan.UnionNode;\n+\n+import java.util.Set;\n+\n+import static io.prestosql.sql.planner.iterative.rule.Util.restrictChildOutputs;\n+import static io.prestosql.sql.planner.plan.Patterns.except;\n+import static io.prestosql.sql.planner.plan.Patterns.intersect;\n+import static io.prestosql.sql.planner.plan.Patterns.union;\n+\n+public final class PruneSetOperationSourceColumnsRuleSet\n+{\n+    private PruneSetOperationSourceColumnsRuleSet() {}\n+\n+    public static Set<Rule<?>> rules()\n+    {\n+        return ImmutableSet.of(\n+                new PruneExceptSourceColumns(),\n+                new PruneIntersectSourceColumns(),\n+                new PruneUnionSourceColumns());\n+    }\n+\n+    public static class PruneExceptSourceColumns", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 283, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}