{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NTM0NjM4", "number": 6463, "title": "Fix memory revoking accounting", "bodyText": "Extracted relevant changes from prestodb/presto#15569\nPreviously, MemoryRevokingScheduler would find running tasks and operate on them by traversing through their QueryContext. This led to two significant problems:\n\nMemoryRevokingScheduler would over-count the amount of memory that was already being revoked since it would traverse each task for a given query through all other tasks in that query.\nMemoryRevokingScheduler would repeatedly traverse the same tasks and attempt to revoke memory from the same operators if the number of tasks in a given query was > 1 on the current node\n\nThis PR also contains some cleanup commits that refactor related methods to avoid redundant work and to use cheaper methods than SqlTask#getTaskStatus() when possible.", "createdAt": "2020-12-29T15:39:26Z", "url": "https://github.com/trinodb/trino/pull/6463", "merged": true, "mergeCommit": {"oid": "5ca24b0e9d84318f0e7c8a5013f8d4174d0fb7b6"}, "closed": true, "closedAt": "2021-01-08T23:31:32Z", "author": {"login": "pettyjamesm"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdq871lgBqjQxNTUwNTMwOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABduPnJOgBqjQxODYxNDQwMTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTM1NTgy", "url": "https://github.com/trinodb/trino/pull/6463#pullrequestreview-563935582", "createdAt": "2021-01-08T00:59:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDo1OTo0M1rOIQB_FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOTo0MzozMlrOIQe3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4MDY2MA==", "bodyText": "Why \"snapshot\" in the name? TaskState is an enum with no mutable or complex state, so the notion of a snapshot is awkward. I would just rename it to getTaskState.", "url": "https://github.com/trinodb/trino/pull/6463#discussion_r553680660", "createdAt": "2021-01-08T00:59:43Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/execution/SqlTask.java", "diffHunk": "@@ -203,6 +203,16 @@ public SqlTaskIoStats getIoStats()\n         return taskHolderReference.get().getIoStats();\n     }\n \n+    public TaskState getTaskStateSnapshot()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4MTM5MA==", "bodyText": "The renaming of this local variable seems unrelated to the main purpose of this commit. Pull it out into a separate commit.", "url": "https://github.com/trinodb/trino/pull/6463#discussion_r553681390", "createdAt": "2021-01-08T01:02:07Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -187,26 +189,29 @@ private void scheduleRevoking()\n     private synchronized void runMemoryRevoking()\n     {\n         if (checkPending.getAndSet(false)) {\n-            Collection<SqlTask> sqlTasks = null;\n+            Collection<SqlTask> allTasks = null;\n             for (MemoryPool memoryPool : memoryPools) {\n                 if (!memoryRevokingNeeded(memoryPool)) {\n                     continue;\n                 }\n \n-                if (sqlTasks == null) {\n-                    sqlTasks = requireNonNull(currentTasksSupplier.get());\n+                if (allTasks == null) {\n+                    allTasks = requireNonNull(currentTasksSupplier.get());\n                 }\n \n-                requestMemoryRevoking(memoryPool, sqlTasks);\n+                requestMemoryRevoking(memoryPool, allTasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1Mjg4Mg==", "bodyText": "Rename this to getTaskContext. The fact that it returns an Optional is indication enough that it will return one if present.", "url": "https://github.com/trinodb/trino/pull/6463#discussion_r554152882", "createdAt": "2021-01-08T19:41:30Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/execution/SqlTask.java", "diffHunk": "@@ -578,4 +578,13 @@ public QueryContext getQueryContext()\n     {\n         return queryContext;\n     }\n+\n+    public Optional<TaskContext> getTaskContextIfPresent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1Mzc5MA==", "bodyText": "Alternatively,\n        return Optional.ofNullable(taskExecution)\n                .map(SqlTaskExecution::getTaskContext);", "url": "https://github.com/trinodb/trino/pull/6463#discussion_r554153790", "createdAt": "2021-01-08T19:43:32Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/execution/SqlTask.java", "diffHunk": "@@ -578,4 +578,13 @@ public QueryContext getQueryContext()\n     {\n         return queryContext;\n     }\n+\n+    public Optional<TaskContext> getTaskContextIfPresent()\n+    {\n+        SqlTaskExecution taskExecution = taskHolderReference.get().getTaskExecution();\n+        if (taskExecution == null) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(taskExecution.getTaskContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NTc4MzAz", "url": "https://github.com/trinodb/trino/pull/6463#pullrequestreview-564578303", "createdAt": "2021-01-08T20:59:34Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMToxNjoxNVrOIQhYYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMToxNjoxNVrOIQhYYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE5NTA0Mw==", "bodyText": "Just curious, is a negative value legitimate, or are you really protecting against calls when the value is zero?", "url": "https://github.com/trinodb/trino/pull/6463#discussion_r554195043", "createdAt": "2021-01-08T21:16:15Z", "author": {"login": "dain"}, "path": "core/trino-main/src/main/java/io/trino/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -187,26 +189,29 @@ private void scheduleRevoking()\n     private synchronized void runMemoryRevoking()\n     {\n         if (checkPending.getAndSet(false)) {\n-            Collection<SqlTask> sqlTasks = null;\n+            Collection<SqlTask> allTasks = null;\n             for (MemoryPool memoryPool : memoryPools) {\n                 if (!memoryRevokingNeeded(memoryPool)) {\n                     continue;\n                 }\n \n-                if (sqlTasks == null) {\n-                    sqlTasks = requireNonNull(currentTasksSupplier.get());\n+                if (allTasks == null) {\n+                    allTasks = requireNonNull(currentTasksSupplier.get());\n                 }\n \n-                requestMemoryRevoking(memoryPool, sqlTasks);\n+                requestMemoryRevoking(memoryPool, allTasks);\n             }\n         }\n     }\n \n-    private void requestMemoryRevoking(MemoryPool memoryPool, Collection<SqlTask> sqlTasks)\n+    private void requestMemoryRevoking(MemoryPool memoryPool, Collection<SqlTask> allTasks)\n     {\n         long remainingBytesToRevoke = (long) (-memoryPool.getFreeBytes() + (memoryPool.getMaxBytes() * (1.0 - memoryRevokingTarget)));\n-        remainingBytesToRevoke -= getMemoryAlreadyBeingRevoked(sqlTasks, memoryPool);\n-        requestRevoking(memoryPool, sqlTasks, remainingBytesToRevoke);\n+        List<SqlTask> runningTasksInPool = findRunningTasksInMemoryPool(allTasks, memoryPool);\n+        remainingBytesToRevoke -= getMemoryAlreadyBeingRevoked(runningTasksInPool, remainingBytesToRevoke);\n+        if (remainingBytesToRevoke > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NTkxMzE1", "url": "https://github.com/trinodb/trino/pull/6463#pullrequestreview-564591315", "createdAt": "2021-01-08T21:24:47Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ded9bb20ee3370c3d41cf9b3338a33d1c9e92bc9", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/ded9bb20ee3370c3d41cf9b3338a33d1c9e92bc9", "committedDate": "2021-01-08T21:28:56Z", "message": "Add SqlTask#getTaskState() and SqlTask#getTaskCreateTime()\n\nAvoids using comparatively more expensive methods like getTaskStats()\nor getTaskStatus() when only these specific fields are required and\nno particular synchronization order is being enforced."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7fd4b8834f7f35735ff99a285a7d05a9125231d", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/b7fd4b8834f7f35735ff99a285a7d05a9125231d", "committedDate": "2021-01-08T21:28:56Z", "message": "Refactor MemoryRevokingScheduler to avoid redundant work\n\nAvoids repeatedly traversing the tasks collection to filter running\ntasks for the given memory pool and sorting them between summing the\nin progress revoking and initiating subsequent revoking actions on\noperators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26cc959b89fcc2557aa0ef8a22e9699277cb0575", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/26cc959b89fcc2557aa0ef8a22e9699277cb0575", "committedDate": "2021-01-08T21:28:57Z", "message": "Fix MemoryRevokingScheduler from re-visiting tasks for the same query\n\nPreviously, MemoryRevokingScheduler would find running tasks and operate\non them by traversing through their QueryContext. This led to two\nsignificant problems:\n- MemoryRevokingScheduler would over-count the amount of memory that\n  was already being revoked since it would traverse each task for a\n  given query through all other tasks in that query.\n- MemoryRevokingScheduler would repeatedly traverse the same tasks\n  and attempt to revoke memory from the same operators if the number\n  of tasks in a given query was > 1 on the current node"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "26cc959b89fcc2557aa0ef8a22e9699277cb0575", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/trinodb/trino/commit/26cc959b89fcc2557aa0ef8a22e9699277cb0575", "committedDate": "2021-01-08T21:28:57Z", "message": "Fix MemoryRevokingScheduler from re-visiting tasks for the same query\n\nPreviously, MemoryRevokingScheduler would find running tasks and operate\non them by traversing through their QueryContext. This led to two\nsignificant problems:\n- MemoryRevokingScheduler would over-count the amount of memory that\n  was already being revoked since it would traverse each task for a\n  given query through all other tasks in that query.\n- MemoryRevokingScheduler would repeatedly traverse the same tasks\n  and attempt to revoke memory from the same operators if the number\n  of tasks in a given query was > 1 on the current node"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1962, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}