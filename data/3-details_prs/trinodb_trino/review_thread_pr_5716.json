{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzc2NzAx", "number": 5716, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxMDoyOVrOE0g7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxMDoyOVrOE0g7kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAwOTQ0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/AbstractTestExtract.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxMDoyOVrOHsSHqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoxMTo1OFrOHtE4iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjI2Nw==", "bodyText": "Catch and throw an error with a better message", "url": "https://github.com/trinodb/trino/pull/5716#discussion_r516196267", "createdAt": "2020-11-02T19:10:29Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/AbstractTestExtract.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import com.google.common.base.CaseFormat;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.sql.tree.Extract;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public abstract class AbstractTestExtract\n+{\n+    protected QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void tearDown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testTestCompleteness()\n+            throws NoSuchMethodException\n+    {\n+        for (Extract.Field value : Extract.Field.values()) {\n+            String testMethodName = \"test\" + CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, value.name());\n+            this.getClass().getMethod(testMethodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4f8d21efa0d1ce4719b7845b6336b8d20f1a3c4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NjkzMg==", "bodyText": "This currently looks like this:\njava.lang.NoSuchMethodException: io.prestosql.operator.scalar.time.TestExtract.testQuarter()\n\n\tat java.base/java.lang.Class.getMethod(Class.java:2108)\n\tat io.prestosql.operator.scalar.AbstractTestExtract.testTestCompleteness(AbstractTestExtract.java:52)\n\ni felt this is sufficient?", "url": "https://github.com/trinodb/trino/pull/5716#discussion_r516986932", "createdAt": "2020-11-03T22:14:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/AbstractTestExtract.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import com.google.common.base.CaseFormat;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.sql.tree.Extract;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public abstract class AbstractTestExtract\n+{\n+    protected QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void tearDown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testTestCompleteness()\n+            throws NoSuchMethodException\n+    {\n+        for (Extract.Field value : Extract.Field.values()) {\n+            String testMethodName = \"test\" + CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, value.name());\n+            this.getClass().getMethod(testMethodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjI2Nw=="}, "originalCommit": {"oid": "b4f8d21efa0d1ce4719b7845b6336b8d20f1a3c4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzk3Ng==", "bodyText": "Ok, that's fine.", "url": "https://github.com/trinodb/trino/pull/5716#discussion_r517027976", "createdAt": "2020-11-04T00:11:58Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/AbstractTestExtract.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import com.google.common.base.CaseFormat;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.sql.tree.Extract;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public abstract class AbstractTestExtract\n+{\n+    protected QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void tearDown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testTestCompleteness()\n+            throws NoSuchMethodException\n+    {\n+        for (Extract.Field value : Extract.Field.values()) {\n+            String testMethodName = \"test\" + CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, value.name());\n+            this.getClass().getMethod(testMethodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjI2Nw=="}, "originalCommit": {"oid": "b4f8d21efa0d1ce4719b7845b6336b8d20f1a3c4"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4555, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}