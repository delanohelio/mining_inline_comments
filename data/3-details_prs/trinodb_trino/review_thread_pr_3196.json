{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDI0MTQ3", "number": 3196, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxOToxMTozMlrODqLpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMzozN1rODtpvpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTU3NTA1OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxOToxMTozMlrOF5x2Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxOToxMTozMlrOF5x2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyOTg0Nw==", "bodyText": "These tests are ineffective, at least for decimal(38), since it is converted to bigint during planning, which I verified by looking at the explain plan. I'm not sure why it happens for decimal(38) but not decimal(18).\nLet's remove these and replace with direct tests for InCodeGenerator, as we don't need to run such expensive tests against every connector. The primary purpose of this test is to very end-to-end against the engine and connectors for large sets. (if we only care about InCodeGenerator, we just need a list of at least 33 elements)", "url": "https://github.com/trinodb/trino/pull/3196#discussion_r396129847", "createdAt": "2020-03-22T19:11:32Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -2188,6 +2188,10 @@ public void testLargeIn()\n                 .collect(joining(\", \"));\n         assertQuery(\"SELECT orderkey FROM orders WHERE orderkey IN (\" + longValues + \")\");\n         assertQuery(\"SELECT orderkey FROM orders WHERE orderkey NOT IN (\" + longValues + \")\");\n+        assertQuery(\"SELECT orderkey FROM orders WHERE CAST(orderkey AS DECIMAL(38)) IN (\" + longValues + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTYzNjk0OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/InMemoryRecordSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1Njo1MFrOF_J37A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1Njo1MFrOF_J37A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2NjM4MA==", "bodyText": "Split this into two checks for isShortDecimal and isLongDecimal, then we can validate the type is correct for each one.", "url": "https://github.com/trinodb/trino/pull/3196#discussion_r401766380", "createdAt": "2020-04-01T16:56:50Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/InMemoryRecordSet.java", "diffHunk": "@@ -243,6 +244,10 @@ else if (type instanceof RowType) {\n                     checkArgument(value instanceof Block,\n                             \"Expected value %d to be an instance of Block, but is a %s\", i, value.getClass().getSimpleName());\n                 }\n+                else if (type instanceof DecimalType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTcxMzU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/util/FastutilSetHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxNToxMFrOF_KmxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxNToxMFrOF_KmxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3ODM3Mg==", "bodyText": "Nit: these could be outside the try/catch", "url": "https://github.com/trinodb/trino/pull/3196#discussion_r401778372", "createdAt": "2020-04-01T17:15:10Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/util/FastutilSetHelper.java", "diffHunk": "@@ -190,6 +190,9 @@ private ObjectStrategy(Metadata metadata, Type type)\n         public int hashCode(Object value)\n         {\n             try {\n+                if (value == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk2NDU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/gen/TestExpressionCompiler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMzozN1rOF_NGpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMzozN1rOF_NGpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxOTMwMA==", "bodyText": "I think this can also be 2000, 7000", "url": "https://github.com/trinodb/trino/pull/3196#discussion_r401819300", "createdAt": "2020-04-01T18:23:37Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/sql/gen/TestExpressionCompiler.java", "diffHunk": "@@ -1321,6 +1321,18 @@ public void testHugeIn()\n         assertExecute(\"bound_timestamp_with_timezone in (\" + timestampValues + \")\", BOOLEAN, true);\n         assertExecute(\"bound_timestamp_with_timezone in (TIMESTAMP '1970-01-01 01:01:00.0+02:00')\", BOOLEAN, false);\n \n+        String shortDecimalValues = range(2000, 7000)\n+                .mapToObj(value -> format(\"decimal '%s'\", value))\n+                .collect(joining(\", \"));\n+        assertExecute(\"bound_short_decimal in (1234, \" + shortDecimalValues + \")\", BOOLEAN, true);\n+        assertExecute(\"bound_short_decimal in (\" + shortDecimalValues + \")\", BOOLEAN, false);\n+\n+        String longDecimalValues = range(2000, 3000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 452, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}