{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjYyNDUy", "number": 3768, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowNjoyM1rOD-4aQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowODo0NFrOD-4c2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYyNTI5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestOrcPageSourceMemoryTracking.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowNjoyNFrOGZQFvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDowNzoyNVrOGtlcFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTE5OQ==", "bodyText": "source is already a String\ndid you mean firstNonNull(source, \"null\")?", "url": "https://github.com/trinodb/trino/pull/3768#discussion_r429131199", "createdAt": "2020-05-22T09:06:24Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestOrcPageSourceMemoryTracking.java", "diffHunk": "@@ -749,9 +749,7 @@ public Object getWriteValue()\n         {\n             StringBuilder builder = new StringBuilder();\n             String source = writeValue.get();\n-            for (int i = 0; i < counter / step; i++) {\n-                builder.append(source);\n-            }\n+            builder.append(String.valueOf(source).repeat(Math.max(0, counter / step)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1MjUwMw==", "bodyText": "Thanks, this got added somehow", "url": "https://github.com/trinodb/trino/pull/3768#discussion_r450452503", "createdAt": "2020-07-06T20:07:25Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestOrcPageSourceMemoryTracking.java", "diffHunk": "@@ -749,9 +749,7 @@ public Object getWriteValue()\n         {\n             StringBuilder builder = new StringBuilder();\n             String source = writeValue.get();\n-            for (int i = 0; i < counter / step; i++) {\n-                builder.append(source);\n-            }\n+            builder.append(String.valueOf(source).repeat(Math.max(0, counter / step)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTE5OQ=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYyOTkwOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryConnectorModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowODowMVrOGZQImA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDowNDo1OFrOGtlXmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTkyOA==", "bodyText": "hm... BigQueryOptions seemed more appropriate (i don;t know the design behind BigQueryOptions vs generic ServiceOptions though)", "url": "https://github.com/trinodb/trino/pull/3768#discussion_r429131928", "createdAt": "2020-05-22T09:08:01Z", "author": {"login": "findepi"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryConnectorModule.java", "diffHunk": "@@ -94,6 +95,6 @@ static String calculateBillingProjectId(Optional<String> configParentProjectId,\n             return ((ServiceAccountCredentials) credentials.get()).getProjectId();\n         }\n         // 3. No configuration was provided, so get the default from the environment\n-        return BigQueryOptions.getDefaultProjectId();\n+        return ServiceOptions.getDefaultProjectId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1MTM1Mg==", "bodyText": "I'll drop this commit", "url": "https://github.com/trinodb/trino/pull/3768#discussion_r450451352", "createdAt": "2020-07-06T20:04:58Z", "author": {"login": "electrum"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryConnectorModule.java", "diffHunk": "@@ -94,6 +95,6 @@ static String calculateBillingProjectId(Optional<String> configParentProjectId,\n             return ((ServiceAccountCredentials) credentials.get()).getProjectId();\n         }\n         // 3. No configuration was provided, so get the default from the environment\n-        return BigQueryOptions.getDefaultProjectId();\n+        return ServiceOptions.getDefaultProjectId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTkyOA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYzMTAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/BigintGroupByHash.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowODoyMlrOGZQJRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowODoyMlrOGZQJRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMjEwMg==", "bodyText": "Qualifying with BigintType was more appropriate.", "url": "https://github.com/trinodb/trino/pull/3768#discussion_r429132102", "createdAt": "2020-05-22T09:08:22Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/BigintGroupByHash.java", "diffHunk": "@@ -200,7 +200,7 @@ public boolean contains(int position, Page page, int[] hashChannels)\n     @Override\n     public long getRawHash(int groupId)\n     {\n-        return BigintType.hash(valuesByGroupId.get(groupId));\n+        return AbstractLongType.hash(valuesByGroupId.get(groupId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYzMTk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/TestOperatorAssertion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowODo0NFrOGZQJ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowODo0NFrOGZQJ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMjI1OA==", "bodyText": "nit: does not belong to Access static methods on declared class\n(same in TestPinotClient)", "url": "https://github.com/trinodb/trino/pull/3768#discussion_r429132258", "createdAt": "2020-05-22T09:08:44Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestOperatorAssertion.java", "diffHunk": "@@ -52,7 +52,7 @@ public void testToPagesWithBlockedOperator()\n     {\n         Operator operator = new BlockedOperator(Duration.valueOf(\"15 ms\"));\n         List<Page> pages = OperatorAssertion.toPages(operator, emptyIterator());\n-        Assert.assertEquals(pages, ImmutableList.of());\n+        assertEquals(pages, ImmutableList.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4856, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}