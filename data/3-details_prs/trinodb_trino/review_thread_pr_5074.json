{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5MDE2ODY1", "number": 5074, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjozMTo0MFrOEgLWJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjozMTo0MFrOEgLWJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTc1NzgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjozMTo0MFrOHM5j5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozNDowMlrOHNGy6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4ODAzNw==", "bodyText": "This is only needed if samplePercentageType != DOUBLE", "url": "https://github.com/trinodb/trino/pull/5074#discussion_r483288037", "createdAt": "2020-09-03T22:31:40Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1465,29 +1468,38 @@ protected Scope visitSampledRelation(SampledRelation relation, Optional<Scope> s\n                     accessControl,\n                     sqlParser,\n                     TypeProvider.empty(),\n-                    ImmutableList.of(relation.getSamplePercentage()),\n+                    ImmutableList.of(samplePercentage),\n                     analysis.getParameters(),\n                     WarningCollector.NOOP,\n                     analysis.isDescribe())\n                     .getExpressionTypes();\n \n-            ExpressionInterpreter samplePercentageEval = expressionOptimizer(relation.getSamplePercentage(), metadata, session, expressionTypes);\n+            Type samplePercentageType = expressionTypes.get(NodeRef.of(samplePercentage));\n+            if (!typeCoercion.canCoerce(samplePercentageType, DOUBLE)) {\n+                throw semanticException(TYPE_MISMATCH, samplePercentage, \"Sample percentage should be a numeric expression\");\n+            }\n+\n+            ExpressionInterpreter samplePercentageEval = expressionOptimizer(samplePercentage, metadata, session, expressionTypes);\n \n             Object samplePercentageObject = samplePercentageEval.optimize(symbol -> {\n-                throw semanticException(EXPRESSION_NOT_CONSTANT, relation.getSamplePercentage(), \"Sample percentage cannot contain column references\");\n+                throw semanticException(EXPRESSION_NOT_CONSTANT, samplePercentage, \"Sample percentage cannot contain column references\");\n             });\n \n-            if (!(samplePercentageObject instanceof Number)) {\n-                throw semanticException(TYPE_MISMATCH, relation.getSamplePercentage(), \"Sample percentage should evaluate to a numeric expression\");\n+            ResolvedFunction coercion = metadata.getCoercion(samplePercentageType, DOUBLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NTg2OA==", "bodyText": "Also, this could be done after checking whether the value is null, in which case, you don't need a separate variable for samplePercentageObject. An implicit cast should never produce a null from a non-null value.", "url": "https://github.com/trinodb/trino/pull/5074#discussion_r483295868", "createdAt": "2020-09-03T22:57:08Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1465,29 +1468,38 @@ protected Scope visitSampledRelation(SampledRelation relation, Optional<Scope> s\n                     accessControl,\n                     sqlParser,\n                     TypeProvider.empty(),\n-                    ImmutableList.of(relation.getSamplePercentage()),\n+                    ImmutableList.of(samplePercentage),\n                     analysis.getParameters(),\n                     WarningCollector.NOOP,\n                     analysis.isDescribe())\n                     .getExpressionTypes();\n \n-            ExpressionInterpreter samplePercentageEval = expressionOptimizer(relation.getSamplePercentage(), metadata, session, expressionTypes);\n+            Type samplePercentageType = expressionTypes.get(NodeRef.of(samplePercentage));\n+            if (!typeCoercion.canCoerce(samplePercentageType, DOUBLE)) {\n+                throw semanticException(TYPE_MISMATCH, samplePercentage, \"Sample percentage should be a numeric expression\");\n+            }\n+\n+            ExpressionInterpreter samplePercentageEval = expressionOptimizer(samplePercentage, metadata, session, expressionTypes);\n \n             Object samplePercentageObject = samplePercentageEval.optimize(symbol -> {\n-                throw semanticException(EXPRESSION_NOT_CONSTANT, relation.getSamplePercentage(), \"Sample percentage cannot contain column references\");\n+                throw semanticException(EXPRESSION_NOT_CONSTANT, samplePercentage, \"Sample percentage cannot contain column references\");\n             });\n \n-            if (!(samplePercentageObject instanceof Number)) {\n-                throw semanticException(TYPE_MISMATCH, relation.getSamplePercentage(), \"Sample percentage should evaluate to a numeric expression\");\n+            ResolvedFunction coercion = metadata.getCoercion(samplePercentageType, DOUBLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4ODAzNw=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDg3Mg==", "bodyText": "An implicit cast should never produce a null from a non-null value.\n\nI thought about this, but i didn't want to put this assumption in the code,\non the assumption that less assumptions the easier to read...\ni will rearange if you find this more useful that way", "url": "https://github.com/trinodb/trino/pull/5074#discussion_r483504872", "createdAt": "2020-09-04T09:34:02Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1465,29 +1468,38 @@ protected Scope visitSampledRelation(SampledRelation relation, Optional<Scope> s\n                     accessControl,\n                     sqlParser,\n                     TypeProvider.empty(),\n-                    ImmutableList.of(relation.getSamplePercentage()),\n+                    ImmutableList.of(samplePercentage),\n                     analysis.getParameters(),\n                     WarningCollector.NOOP,\n                     analysis.isDescribe())\n                     .getExpressionTypes();\n \n-            ExpressionInterpreter samplePercentageEval = expressionOptimizer(relation.getSamplePercentage(), metadata, session, expressionTypes);\n+            Type samplePercentageType = expressionTypes.get(NodeRef.of(samplePercentage));\n+            if (!typeCoercion.canCoerce(samplePercentageType, DOUBLE)) {\n+                throw semanticException(TYPE_MISMATCH, samplePercentage, \"Sample percentage should be a numeric expression\");\n+            }\n+\n+            ExpressionInterpreter samplePercentageEval = expressionOptimizer(samplePercentage, metadata, session, expressionTypes);\n \n             Object samplePercentageObject = samplePercentageEval.optimize(symbol -> {\n-                throw semanticException(EXPRESSION_NOT_CONSTANT, relation.getSamplePercentage(), \"Sample percentage cannot contain column references\");\n+                throw semanticException(EXPRESSION_NOT_CONSTANT, samplePercentage, \"Sample percentage cannot contain column references\");\n             });\n \n-            if (!(samplePercentageObject instanceof Number)) {\n-                throw semanticException(TYPE_MISMATCH, relation.getSamplePercentage(), \"Sample percentage should evaluate to a numeric expression\");\n+            ResolvedFunction coercion = metadata.getCoercion(samplePercentageType, DOUBLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4ODAzNw=="}, "originalCommit": null, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3137, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}