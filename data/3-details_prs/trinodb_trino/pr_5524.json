{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTU4ODk2", "number": 5524, "title": "Push down aggregation with LIMIT into JDBC connectors", "bodyText": "For a query like\nSELECT k, max(v) FROM table LIMIT 5\n\nthe plan after aggregation pushdown looks like this:\n- LIMIT 5\n  - Project k=k, max=generated_column\n    - TableScan producing k, generated_column\n\nThe Project prevents Limit from being pushed into the connector.\nThe PushProjectionIntoTableScan cannot remove the projection, because\nit can only narrow down selection of columns, it cannot do renaming\n(also, requiring connector to support renaming would feel abundant).\nThe projection is not an identity projection either. It can currently be\nremoved by UnaliasSymbolReferences (which turns it into an identity\nprojection) + RemoveRedundantIdentityProjections (which removes it).\nThis commit adds another attempt of \"push into table scan\" optimizations\n(which already include RemoveRedundantIdentityProjections), preceded\nwith UnaliasSymbolReferences, so that the unaliasing can take place\nbetween aggregation and limit pushdown.\nIt is considered temporarily adequate for UnaliasSymbolReferences to\nbe run once. In the future we may require more invocations of\nUnaliasSymbolReferences + \"push into table scan\" optimization pairs.\nBetter yet, the unaliasing is either turned into optimizer rules, or\nmade redundant by other means.\nFixes #5261", "createdAt": "2020-10-12T12:55:02Z", "url": "https://github.com/trinodb/trino/pull/5524", "merged": true, "mergeCommit": {"oid": "b04bd57747e7aaee0cee83ae72ce170300521db6"}, "closed": true, "closedAt": "2020-10-13T11:39:07Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRzhp8AFqTUwNjU5MzM0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSEXmOABqjM4NzAwMTczNjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NTkzMzQ5", "url": "https://github.com/trinodb/trino/pull/5524#pullrequestreview-506593349", "createdAt": "2020-10-12T12:55:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NToxOFrOHf9jSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NTo1MFrOHf9kdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NjM2MQ==", "bodyText": "#811", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503276361", "createdAt": "2020-10-12T12:55:18Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -527,20 +527,26 @@ public PlanOptimizers(\n                 new CheckSubqueryNodesAreRewritten(),\n                 new StatsRecordingPlanOptimizer(\n                         optimizerStats,\n-                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)),\n-                new IterativeOptimizer(\n-                        ruleStats,\n-                        statsCalculator,\n-                        estimatedExchangesCostCalculator,\n-                        ImmutableSet.<Rule<?>>builder()\n-                                .addAll(columnPruningRules)\n-                                .addAll(projectionPushdownRules)\n-                                .add(new RemoveRedundantIdentityProjections())\n-                                .add(new PushLimitIntoTableScan(metadata))\n-                                .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n-                                .add(new PushSampleIntoTableScan(metadata))\n-                                .add(new PushAggregationIntoTableScan(metadata))\n-                                .build()),\n+                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)));\n+\n+        IterativeOptimizer pushIntoTableScanOptimizer = new IterativeOptimizer(\n+                ruleStats,\n+                statsCalculator,\n+                estimatedExchangesCostCalculator,\n+                ImmutableSet.<Rule<?>>builder()\n+                        .addAll(columnPruningRules)\n+                        .addAll(projectionPushdownRules)\n+                        .add(new RemoveRedundantIdentityProjections())\n+                        .add(new PushLimitIntoTableScan(metadata))\n+                        .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n+                        .add(new PushSampleIntoTableScan(metadata))\n+                        .add(new PushAggregationIntoTableScan(metadata))\n+                        .build());\n+        builder.add(pushIntoTableScanOptimizer);\n+        builder.add(new UnaliasSymbolReferences(metadata));\n+        builder.add(pushIntoTableScanOptimizer); // TODO (https://github.com/prestosql/presto/issues/811) merge merge with the above after migrating UnaliasSymbolReferences to rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NjUwNA==", "bodyText": "#4313", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503276504", "createdAt": "2020-10-12T12:55:35Z", "author": {"login": "findepi"}, "path": "presto-druid/src/test/java/io/prestosql/plugin/druid/TestDruidIntegrationSmokeTest.java", "diffHunk": "@@ -283,5 +284,14 @@ public void testLimitPushdown()\n \n         // with filter over varchar column\n         assertThat(query(\"SELECT name FROM nation WHERE name < 'EEE' LIMIT 5\")).isCorrectlyPushedDown();\n+\n+        // with aggregation\n+        assertThat(query(\"SELECT max(regionkey) FROM nation LIMIT 5\")).isNotFullyPushedDown(AggregationNode.class); // global aggregation, LIMIT removed TODO https://github.com/prestosql/presto/pull/4313", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NjY2Mw==", "bodyText": "#5522", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503276663", "createdAt": "2020-10-12T12:55:50Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "diffHunk": "@@ -385,6 +385,15 @@ public void testLimitPushdown()\n \n         // with filter over varchar column\n         assertThat(query(\"SELECT name FROM nation WHERE name < 'EEE' LIMIT 5\")).isCorrectlyPushedDown();\n+\n+        // with aggregation\n+        assertThat(query(\"SELECT max(regionkey) FROM nation LIMIT 5\")).isCorrectlyPushedDown(); // global aggregation, LIMIT removed\n+        assertThat(query(\"SELECT regionkey, max(name) FROM nation GROUP BY regionkey LIMIT 5\")).isCorrectlyPushedDown();\n+        // TODO (https://github.com/prestosql/presto/issues/5522) assertThat(query(\"SELECT DISTINCT regionkey FROM nation LIMIT 5\")).isCorrectlyPushedDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODYyNTE2", "url": "https://github.com/trinodb/trino/pull/5524#pullrequestreview-506862516", "createdAt": "2020-10-12T19:24:37Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyNDozN1rOHgKiLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyNzo1MFrOHgKnlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTA3MQ==", "bodyText": "add an example with actual aggregation? like avg(DISTINCT regionkey)`?", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503489071", "createdAt": "2020-10-12T19:24:37Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "diffHunk": "@@ -385,6 +385,15 @@ public void testLimitPushdown()\n \n         // with filter over varchar column\n         assertThat(query(\"SELECT name FROM nation WHERE name < 'EEE' LIMIT 5\")).isCorrectlyPushedDown();\n+\n+        // with aggregation\n+        assertThat(query(\"SELECT max(regionkey) FROM nation LIMIT 5\")).isCorrectlyPushedDown(); // global aggregation, LIMIT removed\n+        assertThat(query(\"SELECT regionkey, max(name) FROM nation GROUP BY regionkey LIMIT 5\")).isCorrectlyPushedDown();\n+        // TODO (https://github.com/prestosql/presto/issues/5522) assertThat(query(\"SELECT DISTINCT regionkey FROM nation LIMIT 5\")).isCorrectlyPushedDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NjY2Mw=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5MDQ1NQ==", "bodyText": "General comment. I have some problem with test naming. It claims that pushdown is being tested here. While we do not really have any pushdown related assertions. We are just checking if LIMIT queries are not messed up by connector implementation.", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503490455", "createdAt": "2020-10-12T19:27:50Z", "author": {"login": "losipiuk"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -866,6 +866,22 @@ public void testLimitPushDown()\n \n         assertEquals(actual.getMaterializedRows().size(), 10);\n         assertContains(all, actual);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTU4MDE2", "url": "https://github.com/trinodb/trino/pull/5524#pullrequestreview-506958016", "createdAt": "2020-10-12T22:39:26Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjozOToyNlrOHgPZLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo0NDowNVrOHgPeyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2ODY4NA==", "bodyText": "may be define this at the top where other optimizers/rulesets are defined? just a suggestion.", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503568684", "createdAt": "2020-10-12T22:39:26Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -527,20 +527,26 @@ public PlanOptimizers(\n                 new CheckSubqueryNodesAreRewritten(),\n                 new StatsRecordingPlanOptimizer(\n                         optimizerStats,\n-                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)),\n-                new IterativeOptimizer(\n-                        ruleStats,\n-                        statsCalculator,\n-                        estimatedExchangesCostCalculator,\n-                        ImmutableSet.<Rule<?>>builder()\n-                                .addAll(columnPruningRules)\n-                                .addAll(projectionPushdownRules)\n-                                .add(new RemoveRedundantIdentityProjections())\n-                                .add(new PushLimitIntoTableScan(metadata))\n-                                .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n-                                .add(new PushSampleIntoTableScan(metadata))\n-                                .add(new PushAggregationIntoTableScan(metadata))\n-                                .build()),\n+                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)));\n+\n+        IterativeOptimizer pushIntoTableScanOptimizer = new IterativeOptimizer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDEyMw==", "bodyText": "nit: merge merge --> merge", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503570123", "createdAt": "2020-10-12T22:44:05Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -527,20 +527,26 @@ public PlanOptimizers(\n                 new CheckSubqueryNodesAreRewritten(),\n                 new StatsRecordingPlanOptimizer(\n                         optimizerStats,\n-                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)),\n-                new IterativeOptimizer(\n-                        ruleStats,\n-                        statsCalculator,\n-                        estimatedExchangesCostCalculator,\n-                        ImmutableSet.<Rule<?>>builder()\n-                                .addAll(columnPruningRules)\n-                                .addAll(projectionPushdownRules)\n-                                .add(new RemoveRedundantIdentityProjections())\n-                                .add(new PushLimitIntoTableScan(metadata))\n-                                .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n-                                .add(new PushSampleIntoTableScan(metadata))\n-                                .add(new PushAggregationIntoTableScan(metadata))\n-                                .build()),\n+                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)));\n+\n+        IterativeOptimizer pushIntoTableScanOptimizer = new IterativeOptimizer(\n+                ruleStats,\n+                statsCalculator,\n+                estimatedExchangesCostCalculator,\n+                ImmutableSet.<Rule<?>>builder()\n+                        .addAll(columnPruningRules)\n+                        .addAll(projectionPushdownRules)\n+                        .add(new RemoveRedundantIdentityProjections())\n+                        .add(new PushLimitIntoTableScan(metadata))\n+                        .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n+                        .add(new PushSampleIntoTableScan(metadata))\n+                        .add(new PushAggregationIntoTableScan(metadata))\n+                        .build());\n+        builder.add(pushIntoTableScanOptimizer);\n+        builder.add(new UnaliasSymbolReferences(metadata));\n+        builder.add(pushIntoTableScanOptimizer); // TODO (https://github.com/prestosql/presto/issues/811) merge merge with the above after migrating UnaliasSymbolReferences to rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "936e8ffbda6307b28753ed717698302bf460bd19", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/936e8ffbda6307b28753ed717698302bf460bd19", "committedDate": "2020-10-13T08:32:51Z", "message": "Push down aggregation with LIMIT into JDBC connectors\n\nFor a query like\n\n    SELECT k, max(v) FROM table LIMIT 5\n\nthe plan after aggregation pushdown looks like this:\n\n    - LIMIT 5\n      - Project k=k, max=generated_column\n        - TableScan producing k, generated_column\n\nThe Project prevents Limit from being pushed into the connector.\nThe `PushProjectionIntoTableScan` cannot remove the projection, because\nit can only narrow down selection of columns, it cannot do renaming\n(also, requiring connector to support _renaming_ would feel abundant).\nThe projection is not an identity projection either. It can currently be\nremoved by `UnaliasSymbolReferences` (which turns it into an identity\nprojection) + `RemoveRedundantIdentityProjections` (which removes it).\n\nThis commit adds another attempt of \"push into table scan\" optimizations\n(which already include `RemoveRedundantIdentityProjections`), preceded\nwith `UnaliasSymbolReferences`, so that the unaliasing can take place\nbetween aggregation and limit pushdown.\n\nIt is considered temporarily adequate for `UnaliasSymbolReferences` to\nbe run once. In the future we may require more invocations of\n`UnaliasSymbolReferences` + \"push into table scan\" optimization pairs.\nBetter yet, the unaliasing is either turned into optimizer rules, or\nmade redundant by other means."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "936e8ffbda6307b28753ed717698302bf460bd19", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/936e8ffbda6307b28753ed717698302bf460bd19", "committedDate": "2020-10-13T08:32:51Z", "message": "Push down aggregation with LIMIT into JDBC connectors\n\nFor a query like\n\n    SELECT k, max(v) FROM table LIMIT 5\n\nthe plan after aggregation pushdown looks like this:\n\n    - LIMIT 5\n      - Project k=k, max=generated_column\n        - TableScan producing k, generated_column\n\nThe Project prevents Limit from being pushed into the connector.\nThe `PushProjectionIntoTableScan` cannot remove the projection, because\nit can only narrow down selection of columns, it cannot do renaming\n(also, requiring connector to support _renaming_ would feel abundant).\nThe projection is not an identity projection either. It can currently be\nremoved by `UnaliasSymbolReferences` (which turns it into an identity\nprojection) + `RemoveRedundantIdentityProjections` (which removes it).\n\nThis commit adds another attempt of \"push into table scan\" optimizations\n(which already include `RemoveRedundantIdentityProjections`), preceded\nwith `UnaliasSymbolReferences`, so that the unaliasing can take place\nbetween aggregation and limit pushdown.\n\nIt is considered temporarily adequate for `UnaliasSymbolReferences` to\nbe run once. In the future we may require more invocations of\n`UnaliasSymbolReferences` + \"push into table scan\" optimization pairs.\nBetter yet, the unaliasing is either turned into optimizer rules, or\nmade redundant by other means."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3410, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}