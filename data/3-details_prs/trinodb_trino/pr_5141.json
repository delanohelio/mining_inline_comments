{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MTk0Njgx", "number": 5141, "title": "Cleanup join distribution code", "bodyText": "", "createdAt": "2020-09-11T15:32:09Z", "url": "https://github.com/trinodb/trino/pull/5141", "merged": true, "mergeCommit": {"oid": "25abaf03074dc7d8f379c602c8cdbaa2f36f3c1c"}, "closed": true, "closedAt": "2020-09-17T10:39:06Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIyvYRABqjM3NjMxNzk3Mjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJulOngBqjM3NzcyOTA3NzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NDkxMTE2", "url": "https://github.com/trinodb/trino/pull/5141#pullrequestreview-488491116", "createdAt": "2020-09-15T09:22:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToyMjowMlrOHR4uxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToyODo1N1rOHR5AUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxNzMxNg==", "bodyText": "these are utilities, move them below where they are used", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488517316", "createdAt": "2020-09-15T09:22:02Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMDI3Ng==", "bodyText": "containsReplicatedJoin seems straighforward, based on addJoinsWithDifferentDistributions -- there is no cost decision yet.\ni am concerned we exit too early here.\nWould it be sufficient to add this to if (possibleJoinNodes.stream().anyMatch(result -> result.getCost().hasUnknownComponents()) || possibleJoinNodes.isEmpty()) branch below?", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488520276", "createdAt": "2020-09-15T09:26:37Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)\n+    {\n+        boolean hasExpandingNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(JoinNode.class))\n+                .matches();\n+        if (hasExpandingNodes) {\n+            return Double.NaN;\n+        }\n+\n+        List<PlanNode> sourceNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(TableScanNode.class, ValuesNode.class))\n+                .findAll();\n+\n+        return sourceNodes.stream()\n+                .mapToDouble(sourceNode -> statsProvider.getStats(sourceNode).getOutputSizeInBytes(sourceNode.getOutputSymbols(), typeProvider))\n+                .sum();\n+    }\n+\n     private PlanNode getCostBasedJoin(JoinNode joinNode, Context context)\n     {\n         List<PlanNodeWithCost> possibleJoinNodes = new ArrayList<>();\n \n         addJoinsWithDifferentDistributions(joinNode, possibleJoinNodes, context);\n         addJoinsWithDifferentDistributions(joinNode.flipChildren(), possibleJoinNodes, context);\n+        boolean containsReplicatedJoin = possibleJoinNodes.stream()\n+                .map(PlanNodeWithCost::getPlanNode)\n+                .map(JoinNode.class::cast)\n+                .anyMatch(node -> node.getDistributionType().equals(Optional.of(REPLICATED)));\n+\n+        JoinNode sizedBasedJoin = getSizeBasedJoin(joinNode, context);\n+        if (!containsReplicatedJoin && sizedBasedJoin.getDistributionType().equals(Optional.of(REPLICATED))) {\n+            // choose replicated size based join if stats calculator would skip replicated join altogether\n+            // (because of inaccurate or missing intermediate plan node stats)\n+            return sizedBasedJoin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMDkwOA==", "bodyText": "Add a test when one side eg UNION or UNION ALL of something", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488520908", "createdAt": "2020-09-15T09:27:34Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)\n+    {\n+        boolean hasExpandingNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(JoinNode.class))\n+                .matches();\n+        if (hasExpandingNodes) {\n+            return Double.NaN;\n+        }\n+\n+        List<PlanNode> sourceNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(TableScanNode.class, ValuesNode.class))\n+                .findAll();\n+\n+        return sourceNodes.stream()\n+                .mapToDouble(sourceNode -> statsProvider.getStats(sourceNode).getOutputSizeInBytes(sourceNode.getOutputSymbols(), typeProvider))\n+                .sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMTU1OQ==", "bodyText": "Add \"integration\" test to TestLogicalPlanner as well.", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488521559", "createdAt": "2020-09-15T09:28:32Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestDetermineJoinDistributionType.java", "diffHunk": "@@ -643,6 +655,185 @@ public void testReplicatesWhenNotRestricted()\n                         values(ImmutableMap.of(\"B1\", 0))));\n     }\n \n+    @Test\n+    public void testReplicatesWhenSourceIsSmall()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMTgxMQ==", "bodyText": "is there such a constant?", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488521811", "createdAt": "2020-09-15T09:28:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestDetermineJoinDistributionType.java", "diffHunk": "@@ -643,6 +655,185 @@ public void testReplicatesWhenNotRestricted()\n                         values(ImmutableMap.of(\"B1\", 0))));\n     }\n \n+    @Test\n+    public void testReplicatesWhenSourceIsSmall()\n+    {\n+        VarcharType symbolType = createUnboundedVarcharType(); // variable width so that average row size is respected\n+        int aRows = 10_000;\n+        int bRows = 10;\n+\n+        // output size exceeds AUTOMATIC_RESTRICTED limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTQ2ODMy", "url": "https://github.com/trinodb/trino/pull/5141#pullrequestreview-489946832", "createdAt": "2020-09-16T19:14:06Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxNDowNlrOHTAYOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxNDowNlrOHTAYOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5MTE5Mg==", "bodyText": "what will happen if we add stats for that schema?\n(using \"sf42.5\".orders could buy you a bit more of safety)", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r489691192", "createdAt": "2020-09-16T19:14:06Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLogicalPlanner.java", "diffHunk": "@@ -1473,11 +1474,71 @@ public void testGroupingSetsWithDefaultValue()\n                                                                                 tableScan(\"orders\"))))))))));\n     }\n \n+    @Test\n+    public void testSizeBasedJoin()\n+    {\n+        // both local.sf100000.nation and local.sf100000.orders don't provide stats, therefore no reordering happens\n+        assertDistributedPlan(\"SELECT custkey FROM local.sf100000.nation, local.sf100000.orders WHERE nation.nationkey = orders.custkey\",\n+                automaticJoinDistribution(),\n+                output(\n+                        anyTree(\n+                                join(INNER, ImmutableList.of(equiJoinClause(\"NATIONKEY\", \"CUSTKEY\")),\n+                                        anyTree(\n+                                                tableScan(\"nation\", ImmutableMap.of(\"NATIONKEY\", \"nationkey\"))),\n+                                        anyTree(\n+                                                tableScan(\"orders\", ImmutableMap.of(\"CUSTKEY\", \"custkey\")))))));\n+\n+        // values node provides stats\n+        assertDistributedPlan(\"SELECT custkey FROM (VALUES CAST(1 AS BIGINT), CAST(2 AS BIGINT)) t(a), local.sf100000.orders WHERE t.a = orders.custkey\",\n+                automaticJoinDistribution(),\n+                output(\n+                        anyTree(\n+                                join(INNER, ImmutableList.of(equiJoinClause(\"CUSTKEY\", \"T_A\")), Optional.empty(), Optional.of(REPLICATED),\n+                                        anyTree(\n+                                                tableScan(\"orders\", ImmutableMap.of(\"CUSTKEY\", \"custkey\"))),\n+                                        anyTree(\n+                                                values(\"T_A\"))))));\n+    }\n+\n+    @Test\n+    public void testSizeBasedSemiJoin()\n+    {\n+        // both local.sf100000.nation and local.sf100000.orders don't provide stats, therefore no reordering happens", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f788ff13b5f6e9d0c34d329fac6b1ddc40c7b6b5", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/f788ff13b5f6e9d0c34d329fac6b1ddc40c7b6b5", "committedDate": "2020-09-17T10:38:43Z", "message": "Choose join side with small tables as build side\n\nChoose join side with small tables as build (and\nreplicated if possible) side when CBO fails to\ndetermine join distribution type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f788ff13b5f6e9d0c34d329fac6b1ddc40c7b6b5", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/f788ff13b5f6e9d0c34d329fac6b1ddc40c7b6b5", "committedDate": "2020-09-17T10:38:43Z", "message": "Choose join side with small tables as build side\n\nChoose join side with small tables as build (and\nreplicated if possible) side when CBO fails to\ndetermine join distribution type."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3958, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}