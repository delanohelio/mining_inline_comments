{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MTk0Njgx", "number": 5141, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToyMjowMlrOEjgHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxNDowNlrOEkM-MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjYxNzUwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToyMjowMlrOHR4uxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToxOToyMFrOHSn9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxNzMxNg==", "bodyText": "these are utilities, move them below where they are used", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488517316", "createdAt": "2020-09-15T09:22:02Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0NTYzMw==", "bodyText": "this is below other utility methods. Let's create another PR/commit to move them", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488645633", "createdAt": "2020-09-15T12:59:04Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxNzMxNg=="}, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5MTE5OQ==", "bodyText": "The is one uitility above this one (canReplicate) and more utilities below, so i am not quite convinced. Up to you", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r489291199", "createdAt": "2020-09-16T09:19:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxNzMxNg=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjYzNzAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToyNjozN1rOHR46VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjo1Mzo0M1rOHSAVZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMDI3Ng==", "bodyText": "containsReplicatedJoin seems straighforward, based on addJoinsWithDifferentDistributions -- there is no cost decision yet.\ni am concerned we exit too early here.\nWould it be sufficient to add this to if (possibleJoinNodes.stream().anyMatch(result -> result.getCost().hasUnknownComponents()) || possibleJoinNodes.isEmpty()) branch below?", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488520276", "createdAt": "2020-09-15T09:26:37Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)\n+    {\n+        boolean hasExpandingNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(JoinNode.class))\n+                .matches();\n+        if (hasExpandingNodes) {\n+            return Double.NaN;\n+        }\n+\n+        List<PlanNode> sourceNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(TableScanNode.class, ValuesNode.class))\n+                .findAll();\n+\n+        return sourceNodes.stream()\n+                .mapToDouble(sourceNode -> statsProvider.getStats(sourceNode).getOutputSizeInBytes(sourceNode.getOutputSymbols(), typeProvider))\n+                .sum();\n+    }\n+\n     private PlanNode getCostBasedJoin(JoinNode joinNode, Context context)\n     {\n         List<PlanNodeWithCost> possibleJoinNodes = new ArrayList<>();\n \n         addJoinsWithDifferentDistributions(joinNode, possibleJoinNodes, context);\n         addJoinsWithDifferentDistributions(joinNode.flipChildren(), possibleJoinNodes, context);\n+        boolean containsReplicatedJoin = possibleJoinNodes.stream()\n+                .map(PlanNodeWithCost::getPlanNode)\n+                .map(JoinNode.class::cast)\n+                .anyMatch(node -> node.getDistributionType().equals(Optional.of(REPLICATED)));\n+\n+        JoinNode sizedBasedJoin = getSizeBasedJoin(joinNode, context);\n+        if (!containsReplicatedJoin && sizedBasedJoin.getDistributionType().equals(Optional.of(REPLICATED))) {\n+            // choose replicated size based join if stats calculator would skip replicated join altogether\n+            // (because of inaccurate or missing intermediate plan node stats)\n+            return sizedBasedJoin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0MTg5NA==", "bodyText": "Would it be sufficient to add this to if (possibleJoinNodes.stream().anyMatch(result -> result.getCost().hasUnknownComponents()) || possibleJoinNodes.isEmpty()) branch below?\n\nIn such case CBO might not take replicated join into account at all (due to inaccurate stats since we know source tables are small) and would choose partitioned join. This if is to prevent such case and choose replicated instead.", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488641894", "createdAt": "2020-09-15T12:53:43Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)\n+    {\n+        boolean hasExpandingNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(JoinNode.class))\n+                .matches();\n+        if (hasExpandingNodes) {\n+            return Double.NaN;\n+        }\n+\n+        List<PlanNode> sourceNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(TableScanNode.class, ValuesNode.class))\n+                .findAll();\n+\n+        return sourceNodes.stream()\n+                .mapToDouble(sourceNode -> statsProvider.getStats(sourceNode).getOutputSizeInBytes(sourceNode.getOutputSymbols(), typeProvider))\n+                .sum();\n+    }\n+\n     private PlanNode getCostBasedJoin(JoinNode joinNode, Context context)\n     {\n         List<PlanNodeWithCost> possibleJoinNodes = new ArrayList<>();\n \n         addJoinsWithDifferentDistributions(joinNode, possibleJoinNodes, context);\n         addJoinsWithDifferentDistributions(joinNode.flipChildren(), possibleJoinNodes, context);\n+        boolean containsReplicatedJoin = possibleJoinNodes.stream()\n+                .map(PlanNodeWithCost::getPlanNode)\n+                .map(JoinNode.class::cast)\n+                .anyMatch(node -> node.getDistributionType().equals(Optional.of(REPLICATED)));\n+\n+        JoinNode sizedBasedJoin = getSizeBasedJoin(joinNode, context);\n+        if (!containsReplicatedJoin && sizedBasedJoin.getDistributionType().equals(Optional.of(REPLICATED))) {\n+            // choose replicated size based join if stats calculator would skip replicated join altogether\n+            // (because of inaccurate or missing intermediate plan node stats)\n+            return sizedBasedJoin;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMDI3Ng=="}, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjY0MTA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToyNzozNFrOHR48zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjo0OToyOFrOHSAKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMDkwOA==", "bodyText": "Add a test when one side eg UNION or UNION ALL of something", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488520908", "createdAt": "2020-09-15T09:27:34Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)\n+    {\n+        boolean hasExpandingNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(JoinNode.class))\n+                .matches();\n+        if (hasExpandingNodes) {\n+            return Double.NaN;\n+        }\n+\n+        List<PlanNode> sourceNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(TableScanNode.class, ValuesNode.class))\n+                .findAll();\n+\n+        return sourceNodes.stream()\n+                .mapToDouble(sourceNode -> statsProvider.getStats(sourceNode).getOutputSizeInBytes(sourceNode.getOutputSymbols(), typeProvider))\n+                .sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYzOTA1NA==", "bodyText": "There is such test, see TestDetermineJoinDistributionType#testGetSourceTablesSizeInBytes", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488639054", "createdAt": "2020-09-15T12:49:28Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/DetermineJoinDistributionType.java", "diffHunk": "@@ -91,22 +98,87 @@ public static boolean canReplicate(JoinNode joinNode, Context context)\n         return buildSideSizeInBytes <= joinMaxBroadcastTableSize.toBytes();\n     }\n \n+    public static double getSourceTablesSizeInBytes(PlanNode node, Context context)\n+    {\n+        return getSourceTablesSizeInBytes(node, context.getLookup(), context.getStatsProvider(), context.getSymbolAllocator().getTypes());\n+    }\n+\n+    @VisibleForTesting\n+    static double getSourceTablesSizeInBytes(PlanNode node, Lookup lookup, StatsProvider statsProvider, TypeProvider typeProvider)\n+    {\n+        boolean hasExpandingNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(JoinNode.class))\n+                .matches();\n+        if (hasExpandingNodes) {\n+            return Double.NaN;\n+        }\n+\n+        List<PlanNode> sourceNodes = PlanNodeSearcher.searchFrom(node, lookup)\n+                .where(isInstanceOfAny(TableScanNode.class, ValuesNode.class))\n+                .findAll();\n+\n+        return sourceNodes.stream()\n+                .mapToDouble(sourceNode -> statsProvider.getStats(sourceNode).getOutputSizeInBytes(sourceNode.getOutputSymbols(), typeProvider))\n+                .sum();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMDkwOA=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjY0NTMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestDetermineJoinDistributionType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToyODozMlrOHR4_Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToyODozMlrOHR4_Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMTU1OQ==", "bodyText": "Add \"integration\" test to TestLogicalPlanner as well.", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488521559", "createdAt": "2020-09-15T09:28:32Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestDetermineJoinDistributionType.java", "diffHunk": "@@ -643,6 +655,185 @@ public void testReplicatesWhenNotRestricted()\n                         values(ImmutableMap.of(\"B1\", 0))));\n     }\n \n+    @Test\n+    public void testReplicatesWhenSourceIsSmall()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjY0NjkzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestDetermineJoinDistributionType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToyODo1N1rOHR5AUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzowMDoxM1rOHSAnVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMTgxMQ==", "bodyText": "is there such a constant?", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488521811", "createdAt": "2020-09-15T09:28:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestDetermineJoinDistributionType.java", "diffHunk": "@@ -643,6 +655,185 @@ public void testReplicatesWhenNotRestricted()\n                         values(ImmutableMap.of(\"B1\", 0))));\n     }\n \n+    @Test\n+    public void testReplicatesWhenSourceIsSmall()\n+    {\n+        VarcharType symbolType = createUnboundedVarcharType(); // variable width so that average row size is respected\n+        int aRows = 10_000;\n+        int bRows = 10;\n+\n+        // output size exceeds AUTOMATIC_RESTRICTED limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0NjQ4Ng==", "bodyText": "no there isn't, but AUTOMATIC_RESTRICTED is used in other tests too. Let's make this cleanup a follow-up PR.", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r488646486", "createdAt": "2020-09-15T13:00:13Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestDetermineJoinDistributionType.java", "diffHunk": "@@ -643,6 +655,185 @@ public void testReplicatesWhenNotRestricted()\n                         values(ImmutableMap.of(\"B1\", 0))));\n     }\n \n+    @Test\n+    public void testReplicatesWhenSourceIsSmall()\n+    {\n+        VarcharType symbolType = createUnboundedVarcharType(); // variable width so that average row size is respected\n+        int aRows = 10_000;\n+        int bRows = 10;\n+\n+        // output size exceeds AUTOMATIC_RESTRICTED limit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMTgxMQ=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mzk2NzIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLogicalPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxNDowNlrOHTAYOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxNDowNlrOHTAYOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5MTE5Mg==", "bodyText": "what will happen if we add stats for that schema?\n(using \"sf42.5\".orders could buy you a bit more of safety)", "url": "https://github.com/trinodb/trino/pull/5141#discussion_r489691192", "createdAt": "2020-09-16T19:14:06Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLogicalPlanner.java", "diffHunk": "@@ -1473,11 +1474,71 @@ public void testGroupingSetsWithDefaultValue()\n                                                                                 tableScan(\"orders\"))))))))));\n     }\n \n+    @Test\n+    public void testSizeBasedJoin()\n+    {\n+        // both local.sf100000.nation and local.sf100000.orders don't provide stats, therefore no reordering happens\n+        assertDistributedPlan(\"SELECT custkey FROM local.sf100000.nation, local.sf100000.orders WHERE nation.nationkey = orders.custkey\",\n+                automaticJoinDistribution(),\n+                output(\n+                        anyTree(\n+                                join(INNER, ImmutableList.of(equiJoinClause(\"NATIONKEY\", \"CUSTKEY\")),\n+                                        anyTree(\n+                                                tableScan(\"nation\", ImmutableMap.of(\"NATIONKEY\", \"nationkey\"))),\n+                                        anyTree(\n+                                                tableScan(\"orders\", ImmutableMap.of(\"CUSTKEY\", \"custkey\")))))));\n+\n+        // values node provides stats\n+        assertDistributedPlan(\"SELECT custkey FROM (VALUES CAST(1 AS BIGINT), CAST(2 AS BIGINT)) t(a), local.sf100000.orders WHERE t.a = orders.custkey\",\n+                automaticJoinDistribution(),\n+                output(\n+                        anyTree(\n+                                join(INNER, ImmutableList.of(equiJoinClause(\"CUSTKEY\", \"T_A\")), Optional.empty(), Optional.of(REPLICATED),\n+                                        anyTree(\n+                                                tableScan(\"orders\", ImmutableMap.of(\"CUSTKEY\", \"custkey\"))),\n+                                        anyTree(\n+                                                values(\"T_A\"))))));\n+    }\n+\n+    @Test\n+    public void testSizeBasedSemiJoin()\n+    {\n+        // both local.sf100000.nation and local.sf100000.orders don't provide stats, therefore no reordering happens", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3197, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}